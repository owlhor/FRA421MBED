
H745_ST7735S_LCD_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a31c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001294c  0800a5b4  0800a5b4  0001a5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cf00  0801cf00  000300e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801cf00  0801cf00  0002cf00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cf08  0801cf08  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cf08  0801cf08  0002cf08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cf0c  0801cf0c  0002cf0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  24000000  0801cf10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000028  0801cf38  00030028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000088  0801cf98  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000089c  240000e8  0801cff8  000300e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000984  0801cff8  00030984  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e5b1  00000000  00000000  00030116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032bc  00000000  00000000  0004e6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001380  00000000  00000000  00051988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001250  00000000  00000000  00052d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b7ce  00000000  00000000  00053f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c0e1  00000000  00000000  0008f726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001854ca  00000000  00000000  000ab807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00230cd1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000052ac  00000000  00000000  00230d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000e8 	.word	0x240000e8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a59c 	.word	0x0800a59c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000ec 	.word	0x240000ec
 80002d4:	0800a59c 	.word	0x0800a59c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000712:	4802      	ldr	r0, [pc, #8]	; (800071c <ST7735_Select+0x14>)
 8000714:	f004 fc0c 	bl	8004f30 <HAL_GPIO_WritePin>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	58020c00 	.word	0x58020c00

08000720 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072a:	4802      	ldr	r0, [pc, #8]	; (8000734 <ST7735_Unselect+0x14>)
 800072c:	f004 fc00 	bl	8004f30 <HAL_GPIO_WritePin>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	58020c00 	.word	0x58020c00

08000738 <ST7735_Reset>:

static void ST7735_Reset() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <ST7735_Reset+0x28>)
 8000744:	f004 fbf4 	bl	8004f30 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000748:	2005      	movs	r0, #5
 800074a:	f001 faa3 	bl	8001c94 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <ST7735_Reset+0x28>)
 8000756:	f004 fbeb 	bl	8004f30 <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	58021800 	.word	0x58021800

08000764 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000774:	4806      	ldr	r0, [pc, #24]	; (8000790 <ST7735_WriteCommand+0x2c>)
 8000776:	f004 fbdb 	bl	8004f30 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800077a:	1df9      	adds	r1, r7, #7
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	2201      	movs	r2, #1
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <ST7735_WriteCommand+0x30>)
 8000784:	f007 f9f6 	bl	8007b74 <HAL_SPI_Transmit>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	58020c00 	.word	0x58020c00
 8000794:	240001ec 	.word	0x240001ec

08000798 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <ST7735_WriteData+0x30>)
 80007aa:	f004 fbc1 	bl	8004f30 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <ST7735_WriteData+0x34>)
 80007ba:	f007 f9db 	bl	8007b74 <HAL_SPI_Transmit>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	58020c00 	.word	0x58020c00
 80007cc:	240001ec 	.word	0x240001ec

080007d0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80007e2:	e034      	b.n	800084e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80007ee:	7afb      	ldrb	r3, [r7, #11]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ffb7 	bl	8000764 <ST7735_WriteCommand>

        numArgs = *addr++;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000800:	7abb      	ldrb	r3, [r7, #10]
 8000802:	b29b      	uxth	r3, r3
 8000804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000808:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800080a:	7abb      	ldrb	r3, [r7, #10]
 800080c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000810:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000812:	7abb      	ldrb	r3, [r7, #10]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d008      	beq.n	800082a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000818:	7abb      	ldrb	r3, [r7, #10]
 800081a:	4619      	mov	r1, r3
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ffbb 	bl	8000798 <ST7735_WriteData>
            addr += numArgs;
 8000822:	7abb      	ldrb	r3, [r7, #10]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800082a:	89bb      	ldrh	r3, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00e      	beq.n	800084e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800083a:	89bb      	ldrh	r3, [r7, #12]
 800083c:	2bff      	cmp	r3, #255	; 0xff
 800083e:	d102      	bne.n	8000846 <ST7735_ExecuteCommandList+0x76>
 8000840:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000844:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000846:	89bb      	ldrh	r3, [r7, #12]
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fa23 	bl	8001c94 <HAL_Delay>
    while(numCommands--) {
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	1e5a      	subs	r2, r3, #1
 8000852:	73fa      	strb	r2, [r7, #15]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1c5      	bne.n	80007e4 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000862:	b590      	push	{r4, r7, lr}
 8000864:	b085      	sub	sp, #20
 8000866:	af00      	add	r7, sp, #0
 8000868:	4604      	mov	r4, r0
 800086a:	4608      	mov	r0, r1
 800086c:	4611      	mov	r1, r2
 800086e:	461a      	mov	r2, r3
 8000870:	4623      	mov	r3, r4
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	4603      	mov	r3, r0
 8000876:	71bb      	strb	r3, [r7, #6]
 8000878:	460b      	mov	r3, r1
 800087a:	717b      	strb	r3, [r7, #5]
 800087c:	4613      	mov	r3, r2
 800087e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000880:	202a      	movs	r0, #42	; 0x2a
 8000882:	f7ff ff6f 	bl	8000764 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000886:	2300      	movs	r3, #0
 8000888:	733b      	strb	r3, [r7, #12]
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	737b      	strb	r3, [r7, #13]
 800088e:	2300      	movs	r3, #0
 8000890:	73bb      	strb	r3, [r7, #14]
 8000892:	797b      	ldrb	r3, [r7, #5]
 8000894:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2104      	movs	r1, #4
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff7b 	bl	8000798 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80008a2:	202b      	movs	r0, #43	; 0x2b
 80008a4:	f7ff ff5e 	bl	8000764 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80008ac:	793b      	ldrb	r3, [r7, #4]
 80008ae:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2104      	movs	r1, #4
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff6e 	bl	8000798 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80008bc:	202c      	movs	r0, #44	; 0x2c
 80008be:	f7ff ff51 	bl	8000764 <ST7735_WriteCommand>
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd90      	pop	{r4, r7, pc}
	...

080008cc <ST7735_Init>:

void ST7735_Init() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    ST7735_Select();
 80008d0:	f7ff ff1a 	bl	8000708 <ST7735_Select>
    ST7735_Reset();
 80008d4:	f7ff ff30 	bl	8000738 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80008d8:	4806      	ldr	r0, [pc, #24]	; (80008f4 <ST7735_Init+0x28>)
 80008da:	f7ff ff79 	bl	80007d0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <ST7735_Init+0x2c>)
 80008e0:	f7ff ff76 	bl	80007d0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <ST7735_Init+0x30>)
 80008e6:	f7ff ff73 	bl	80007d0 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80008ea:	f7ff ff19 	bl	8000720 <ST7735_Unselect>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	0800a644 	.word	0x0800a644
 80008f8:	0800a680 	.word	0x0800a680
 80008fc:	0800a690 	.word	0x0800a690

08000900 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
 800090a:	460b      	mov	r3, r1
 800090c:	80bb      	strh	r3, [r7, #4]
 800090e:	4613      	mov	r3, r2
 8000910:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	2b7f      	cmp	r3, #127	; 0x7f
 8000916:	d823      	bhi.n	8000960 <ST7735_DrawPixel+0x60>
 8000918:	88bb      	ldrh	r3, [r7, #4]
 800091a:	2b7f      	cmp	r3, #127	; 0x7f
 800091c:	d820      	bhi.n	8000960 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 800091e:	f7ff fef3 	bl	8000708 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	b2d8      	uxtb	r0, r3
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	b2d9      	uxtb	r1, r3
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	3301      	adds	r3, #1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	88bb      	ldrh	r3, [r7, #4]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	3301      	adds	r3, #1
 8000938:	b2db      	uxtb	r3, r3
 800093a:	f7ff ff92 	bl	8000862 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800093e:	887b      	ldrh	r3, [r7, #2]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	b29b      	uxth	r3, r3
 8000944:	b2db      	uxtb	r3, r3
 8000946:	733b      	strb	r3, [r7, #12]
 8000948:	887b      	ldrh	r3, [r7, #2]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2102      	movs	r1, #2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff1f 	bl	8000798 <ST7735_WriteData>

    ST7735_Unselect();
 800095a:	f7ff fee1 	bl	8000720 <ST7735_Unselect>
 800095e:	e000      	b.n	8000962 <ST7735_DrawPixel+0x62>
        return;
 8000960:	bf00      	nop
}
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000968:	b082      	sub	sp, #8
 800096a:	b590      	push	{r4, r7, lr}
 800096c:	b089      	sub	sp, #36	; 0x24
 800096e:	af00      	add	r7, sp, #0
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
 8000976:	460b      	mov	r3, r1
 8000978:	80bb      	strh	r3, [r7, #4]
 800097a:	4613      	mov	r3, r2
 800097c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	b2d8      	uxtb	r0, r3
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	b2d9      	uxtb	r1, r3
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800098e:	4413      	add	r3, r2
 8000990:	b2db      	uxtb	r3, r3
 8000992:	3b01      	subs	r3, #1
 8000994:	b2dc      	uxtb	r4, r3
 8000996:	88bb      	ldrh	r3, [r7, #4]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800099e:	4413      	add	r3, r2
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	3b01      	subs	r3, #1
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4622      	mov	r2, r4
 80009a8:	f7ff ff5b 	bl	8000862 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	e043      	b.n	8000a3a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80009b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	3b20      	subs	r3, #32
 80009b8:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80009bc:	fb01 f303 	mul.w	r3, r1, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	440b      	add	r3, r1
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
 80009d2:	e029      	b.n	8000a28 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d00e      	beq.n	8000a02 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	743b      	strb	r3, [r7, #16]
 80009ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	2102      	movs	r1, #2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fecc 	bl	8000798 <ST7735_WriteData>
 8000a00:	e00f      	b.n	8000a22 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a06:	0a1b      	lsrs	r3, r3, #8
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	733b      	strb	r3, [r7, #12]
 8000a0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff febb 	bl	8000798 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	3301      	adds	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d3cf      	bcc.n	80009d4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	3301      	adds	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
 8000a3a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a3e:	461a      	mov	r2, r3
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d3b5      	bcc.n	80009b2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
 8000a4a:	3724      	adds	r7, #36	; 0x24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a52:	b002      	add	sp, #8
 8000a54:	4770      	bx	lr

08000a56 <ST7735_WriteString>:
    }
}
*/

//// ST7735_WriteString(40, 10, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a56:	b082      	sub	sp, #8
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af04      	add	r7, sp, #16
 8000a5e:	603a      	str	r2, [r7, #0]
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
 8000a66:	460b      	mov	r3, r1
 8000a68:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000a6a:	f7ff fe4d 	bl	8000708 <ST7735_Select>

    while(*str) {
 8000a6e:	e02d      	b.n	8000acc <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	7d3a      	ldrb	r2, [r7, #20]
 8000a74:	4413      	add	r3, r2
 8000a76:	2b7f      	cmp	r3, #127	; 0x7f
 8000a78:	dd13      	ble.n	8000aa2 <ST7735_WriteString+0x4c>
            x = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000a7e:	7d7b      	ldrb	r3, [r7, #21]
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	88bb      	ldrh	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000a88:	88bb      	ldrh	r3, [r7, #4]
 8000a8a:	7d7a      	ldrb	r2, [r7, #21]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a90:	dc21      	bgt.n	8000ad6 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b20      	cmp	r3, #32
 8000a98:	d103      	bne.n	8000aa2 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	603b      	str	r3, [r7, #0]
                continue;
 8000aa0:	e014      	b.n	8000acc <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	88b9      	ldrh	r1, [r7, #4]
 8000aa8:	88f8      	ldrh	r0, [r7, #6]
 8000aaa:	8c3b      	ldrh	r3, [r7, #32]
 8000aac:	9302      	str	r3, [sp, #8]
 8000aae:	8bbb      	ldrh	r3, [r7, #28]
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	f7ff ff56 	bl	8000968 <ST7735_WriteChar>
        x += font.width;
 8000abc:	7d3b      	ldrb	r3, [r7, #20]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	80fb      	strh	r3, [r7, #6]
        str++;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1cd      	bne.n	8000a70 <ST7735_WriteString+0x1a>
 8000ad4:	e000      	b.n	8000ad8 <ST7735_WriteString+0x82>
                break;
 8000ad6:	bf00      	nop
    }

    ST7735_Unselect();
 8000ad8:	f7ff fe22 	bl	8000720 <ST7735_Unselect>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ae6:	b002      	add	sp, #8
 8000ae8:	4770      	bx	lr
	...

08000aec <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4604      	mov	r4, r0
 8000af4:	4608      	mov	r0, r1
 8000af6:	4611      	mov	r1, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	4623      	mov	r3, r4
 8000afc:	80fb      	strh	r3, [r7, #6]
 8000afe:	4603      	mov	r3, r0
 8000b00:	80bb      	strh	r3, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]
 8000b06:	4613      	mov	r3, r2
 8000b08:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b0e:	d858      	bhi.n	8000bc2 <ST7735_FillRectangle+0xd6>
 8000b10:	88bb      	ldrh	r3, [r7, #4]
 8000b12:	2b7f      	cmp	r3, #127	; 0x7f
 8000b14:	d855      	bhi.n	8000bc2 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000b16:	88fa      	ldrh	r2, [r7, #6]
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2b80      	cmp	r3, #128	; 0x80
 8000b1e:	dd03      	ble.n	8000b28 <ST7735_FillRectangle+0x3c>
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000b26:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000b28:	88ba      	ldrh	r2, [r7, #4]
 8000b2a:	883b      	ldrh	r3, [r7, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	2b80      	cmp	r3, #128	; 0x80
 8000b30:	dd03      	ble.n	8000b3a <ST7735_FillRectangle+0x4e>
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000b38:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000b3a:	f7ff fde5 	bl	8000708 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	b2d8      	uxtb	r0, r3
 8000b42:	88bb      	ldrh	r3, [r7, #4]
 8000b44:	b2d9      	uxtb	r1, r3
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	887b      	ldrh	r3, [r7, #2]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4413      	add	r3, r2
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	3b01      	subs	r3, #1
 8000b54:	b2dc      	uxtb	r4, r3
 8000b56:	88bb      	ldrh	r3, [r7, #4]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	883b      	ldrh	r3, [r7, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4413      	add	r3, r2
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	3b01      	subs	r3, #1
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4622      	mov	r2, r4
 8000b68:	f7ff fe7b 	bl	8000862 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000b6c:	8c3b      	ldrh	r3, [r7, #32]
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	733b      	strb	r3, [r7, #12]
 8000b76:	8c3b      	ldrh	r3, [r7, #32]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b82:	4812      	ldr	r0, [pc, #72]	; (8000bcc <ST7735_FillRectangle+0xe0>)
 8000b84:	f004 f9d4 	bl	8004f30 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000b88:	883b      	ldrh	r3, [r7, #0]
 8000b8a:	80bb      	strh	r3, [r7, #4]
 8000b8c:	e013      	b.n	8000bb6 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8000b8e:	887b      	ldrh	r3, [r7, #2]
 8000b90:	80fb      	strh	r3, [r7, #6]
 8000b92:	e00a      	b.n	8000baa <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000b94:	f107 010c 	add.w	r1, r7, #12
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <ST7735_FillRectangle+0xe4>)
 8000ba0:	f006 ffe8 	bl	8007b74 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	80fb      	strh	r3, [r7, #6]
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1f1      	bne.n	8000b94 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8000bb0:	88bb      	ldrh	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	80bb      	strh	r3, [r7, #4]
 8000bb6:	88bb      	ldrh	r3, [r7, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1e8      	bne.n	8000b8e <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8000bbc:	f7ff fdb0 	bl	8000720 <ST7735_Unselect>
 8000bc0:	e000      	b.n	8000bc4 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000bc2:	bf00      	nop
}
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd90      	pop	{r4, r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	58020c00 	.word	0x58020c00
 8000bd0:	240001ec 	.word	0x240001ec

08000bd4 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	2100      	movs	r1, #0
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff ff7f 	bl	8000aec <ST7735_FillRectangle>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <ST7735_DrawImage>:

void ST7735_FillScreenFast(uint16_t color) {
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000bf6:	b590      	push	{r4, r7, lr}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4604      	mov	r4, r0
 8000bfe:	4608      	mov	r0, r1
 8000c00:	4611      	mov	r1, r2
 8000c02:	461a      	mov	r2, r3
 8000c04:	4623      	mov	r3, r4
 8000c06:	80fb      	strh	r3, [r7, #6]
 8000c08:	4603      	mov	r3, r0
 8000c0a:	80bb      	strh	r3, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	807b      	strh	r3, [r7, #2]
 8000c10:	4613      	mov	r3, r2
 8000c12:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	2b7f      	cmp	r3, #127	; 0x7f
 8000c18:	d831      	bhi.n	8000c7e <ST7735_DrawImage+0x88>
 8000c1a:	88bb      	ldrh	r3, [r7, #4]
 8000c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c1e:	d82e      	bhi.n	8000c7e <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8000c20:	88fa      	ldrh	r2, [r7, #6]
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	4413      	add	r3, r2
 8000c26:	2b80      	cmp	r3, #128	; 0x80
 8000c28:	dc2b      	bgt.n	8000c82 <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8000c2a:	88ba      	ldrh	r2, [r7, #4]
 8000c2c:	883b      	ldrh	r3, [r7, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	2b80      	cmp	r3, #128	; 0x80
 8000c32:	dc28      	bgt.n	8000c86 <ST7735_DrawImage+0x90>

    ST7735_Select();
 8000c34:	f7ff fd68 	bl	8000708 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	b2d8      	uxtb	r0, r3
 8000c3c:	88bb      	ldrh	r3, [r7, #4]
 8000c3e:	b2d9      	uxtb	r1, r3
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	887b      	ldrh	r3, [r7, #2]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4413      	add	r3, r2
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	b2dc      	uxtb	r4, r3
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	883b      	ldrh	r3, [r7, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	4622      	mov	r2, r4
 8000c62:	f7ff fdfe 	bl	8000862 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000c66:	887b      	ldrh	r3, [r7, #2]
 8000c68:	883a      	ldrh	r2, [r7, #0]
 8000c6a:	fb02 f303 	mul.w	r3, r2, r3
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4619      	mov	r1, r3
 8000c72:	69b8      	ldr	r0, [r7, #24]
 8000c74:	f7ff fd90 	bl	8000798 <ST7735_WriteData>
    ST7735_Unselect();
 8000c78:	f7ff fd52 	bl	8000720 <ST7735_Unselect>
 8000c7c:	e004      	b.n	8000c88 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000c7e:	bf00      	nop
 8000c80:	e002      	b.n	8000c88 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8000c82:	bf00      	nop
 8000c84:	e000      	b.n	8000c88 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8000c86:	bf00      	nop
}
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd90      	pop	{r4, r7, pc}
	...

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c9a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c9c:	bf00      	nop
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <main+0xac>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d004      	beq.n	8000cb4 <main+0x24>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	1e5a      	subs	r2, r3, #1
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dcf4      	bgt.n	8000c9e <main+0xe>
  if ( timeout < 0 )
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da01      	bge.n	8000cbe <main+0x2e>
  {
  Error_Handler();
 8000cba:	f000 fbb3 	bl	8001424 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbe:	f000 ff57 	bl	8001b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f83d 	bl	8000d40 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <main+0xac>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <main+0xac>)
 8000cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <main+0xac>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f004 f93d 	bl	8004f64 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2000      	movs	r0, #0
 8000cee:	f004 f953 	bl	8004f98 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000cf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cf6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000cf8:	bf00      	nop
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <main+0xac>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d104      	bne.n	8000d10 <main+0x80>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	dcf4      	bgt.n	8000cfa <main+0x6a>
if ( timeout < 0 )
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	da01      	bge.n	8000d1a <main+0x8a>
{
Error_Handler();
 8000d16:	f000 fb85 	bl	8001424 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1a:	f000 f9e9 	bl	80010f0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000d1e:	f000 f895 	bl	8000e4c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d22:	f000 f937 	bl	8000f94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d26:	f000 f981 	bl	800102c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000d2a:	f000 f8db 	bl	8000ee4 <MX_SPI1_Init>
  MX_DMA_Init();
 8000d2e:	f000 f9af 	bl	8001090 <MX_DMA_Init>
//  	UARTInit(&UART2);
//  	UARTResetStart(&UART2);



  	ST7735_Init();
 8000d32:	f7ff fdcb 	bl	80008cc <ST7735_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //demoTFT();
	  af_loop();
 8000d36:	f000 fa7b 	bl	8001230 <af_loop>
 8000d3a:	e7fc      	b.n	8000d36 <main+0xa6>
 8000d3c:	58024400 	.word	0x58024400

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b09c      	sub	sp, #112	; 0x70
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	224c      	movs	r2, #76	; 0x4c
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f009 fc1c 	bl	800a58c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2220      	movs	r2, #32
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f009 fc16 	bl	800a58c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d60:	2004      	movs	r0, #4
 8000d62:	f004 fa75 	bl	8005250 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b35      	ldr	r3, [pc, #212]	; (8000e40 <SystemClock_Config+0x100>)
 8000d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6e:	4a34      	ldr	r2, [pc, #208]	; (8000e40 <SystemClock_Config+0x100>)
 8000d70:	f023 0301 	bic.w	r3, r3, #1
 8000d74:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d76:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <SystemClock_Config+0x100>)
 8000d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <SystemClock_Config+0x104>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d88:	4a2e      	ldr	r2, [pc, #184]	; (8000e44 <SystemClock_Config+0x104>)
 8000d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b2c      	ldr	r3, [pc, #176]	; (8000e44 <SystemClock_Config+0x104>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d9c:	bf00      	nop
 8000d9e:	4b29      	ldr	r3, [pc, #164]	; (8000e44 <SystemClock_Config+0x104>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000daa:	d1f8      	bne.n	8000d9e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <SystemClock_Config+0x108>)
 8000dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db0:	f023 0303 	bic.w	r3, r3, #3
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <SystemClock_Config+0x108>)
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dc0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000dd2:	2332      	movs	r3, #50	; 0x32
 8000dd4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dde:	2302      	movs	r3, #2
 8000de0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000de2:	230c      	movs	r3, #12
 8000de4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000dea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	4618      	mov	r0, r3
 8000df6:	f004 fa95 	bl	8005324 <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e00:	f000 fb10 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	233f      	movs	r3, #63	; 0x3f
 8000e06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e10:	2308      	movs	r3, #8
 8000e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e18:	2340      	movs	r3, #64	; 0x40
 8000e1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2101      	movs	r1, #1
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 fea9 	bl	8005b80 <HAL_RCC_ClockConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000e34:	f000 faf6 	bl	8001424 <Error_Handler>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3770      	adds	r7, #112	; 0x70
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	58000400 	.word	0x58000400
 8000e44:	58024800 	.word	0x58024800
 8000e48:	58024400 	.word	0x58024400

08000e4c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_ETH_Init+0x80>)
 8000e52:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <MX_ETH_Init+0x84>)
 8000e54:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_ETH_Init+0x88>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_ETH_Init+0x88>)
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_ETH_Init+0x88>)
 8000e64:	22e1      	movs	r2, #225	; 0xe1
 8000e66:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_ETH_Init+0x88>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_ETH_Init+0x88>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MX_ETH_Init+0x88>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_ETH_Init+0x80>)
 8000e7c:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <MX_ETH_Init+0x88>)
 8000e7e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <MX_ETH_Init+0x80>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_ETH_Init+0x80>)
 8000e88:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <MX_ETH_Init+0x8c>)
 8000e8a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_ETH_Init+0x80>)
 8000e8e:	4a13      	ldr	r2, [pc, #76]	; (8000edc <MX_ETH_Init+0x90>)
 8000e90:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_ETH_Init+0x80>)
 8000e94:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e98:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <MX_ETH_Init+0x80>)
 8000e9c:	f003 fa74 	bl	8004388 <HAL_ETH_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ea6:	f000 fabd 	bl	8001424 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000eaa:	2238      	movs	r2, #56	; 0x38
 8000eac:	2100      	movs	r1, #0
 8000eae:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <MX_ETH_Init+0x94>)
 8000eb0:	f009 fb6c 	bl	800a58c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <MX_ETH_Init+0x94>)
 8000eb6:	2221      	movs	r2, #33	; 0x21
 8000eb8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_ETH_Init+0x94>)
 8000ebc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ec0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <MX_ETH_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2400013c 	.word	0x2400013c
 8000ed0:	40028000 	.word	0x40028000
 8000ed4:	24000978 	.word	0x24000978
 8000ed8:	24000088 	.word	0x24000088
 8000edc:	24000028 	.word	0x24000028
 8000ee0:	24000104 	.word	0x24000104

08000ee4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000eea:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <MX_SPI1_Init+0xac>)
 8000eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eee:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000ef0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000ef8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000efc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f1a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f3e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_SPI1_Init+0xa8>)
 8000f78:	f006 fcf6 	bl	8007968 <HAL_SPI_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000f82:	f000 fa4f 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	240001ec 	.word	0x240001ec
 8000f90:	40013000 	.word	0x40013000

08000f94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <MX_USART3_UART_Init+0x94>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fa0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000fa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fdc:	4811      	ldr	r0, [pc, #68]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fde:	f007 fab2 	bl	8008546 <HAL_UART_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fe8:	f000 fa1c 	bl	8001424 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000ff0:	f008 fed4 	bl	8009d9c <HAL_UARTEx_SetTxFifoThreshold>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ffa:	f000 fa13 	bl	8001424 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8001002:	f008 ff09 	bl	8009e18 <HAL_UARTEx_SetRxFifoThreshold>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800100c:	f000 fa0a 	bl	8001424 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8001012:	f008 fe8a 	bl	8009d2a <HAL_UARTEx_DisableFifoMode>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800101c:	f000 fa02 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	240002ec 	.word	0x240002ec
 8001028:	40004800 	.word	0x40004800

0800102c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001034:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001038:	2209      	movs	r2, #9
 800103a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800103e:	2202      	movs	r2, #2
 8001040:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800104a:	2202      	movs	r2, #2
 800104c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800105c:	2200      	movs	r2, #0
 800105e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001062:	2201      	movs	r2, #1
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001068:	2201      	movs	r2, #1
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800106e:	2200      	movs	r2, #0
 8001070:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001074:	f003 ffa4 	bl	8004fc0 <HAL_PCD_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800107e:	f000 f9d1 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2400046c 	.word	0x2400046c
 800108c:	40080000 	.word	0x40080000

08001090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_DMA_Init+0x5c>)
 8001098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800109c:	4a13      	ldr	r2, [pc, #76]	; (80010ec <MX_DMA_Init+0x5c>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_DMA_Init+0x5c>)
 80010a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	200b      	movs	r0, #11
 80010ba:	f000 ff0a 	bl	8001ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010be:	200b      	movs	r0, #11
 80010c0:	f000 ff21 	bl	8001f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	200c      	movs	r0, #12
 80010ca:	f000 ff02 	bl	8001ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010ce:	200c      	movs	r0, #12
 80010d0:	f000 ff19 	bl	8001f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	200d      	movs	r0, #13
 80010da:	f000 fefa 	bl	8001ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010de:	200d      	movs	r0, #13
 80010e0:	f000 ff11 	bl	8001f06 <HAL_NVIC_EnableIRQ>

}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	58024400 	.word	0x58024400

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <MX_GPIO_Init+0x134>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	4a45      	ldr	r2, [pc, #276]	; (8001224 <MX_GPIO_Init+0x134>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001116:	4b43      	ldr	r3, [pc, #268]	; (8001224 <MX_GPIO_Init+0x134>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
 8001122:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <MX_GPIO_Init+0x134>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112a:	4a3e      	ldr	r2, [pc, #248]	; (8001224 <MX_GPIO_Init+0x134>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001134:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <MX_GPIO_Init+0x134>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <MX_GPIO_Init+0x134>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001148:	4a36      	ldr	r2, [pc, #216]	; (8001224 <MX_GPIO_Init+0x134>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001152:	4b34      	ldr	r3, [pc, #208]	; (8001224 <MX_GPIO_Init+0x134>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <MX_GPIO_Init+0x134>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001166:	4a2f      	ldr	r2, [pc, #188]	; (8001224 <MX_GPIO_Init+0x134>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <MX_GPIO_Init+0x134>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <MX_GPIO_Init+0x134>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	4a27      	ldr	r2, [pc, #156]	; (8001224 <MX_GPIO_Init+0x134>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118e:	4b25      	ldr	r3, [pc, #148]	; (8001224 <MX_GPIO_Init+0x134>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <MX_GPIO_Init+0x134>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	4a20      	ldr	r2, [pc, #128]	; (8001224 <MX_GPIO_Init+0x134>)
 80011a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_GPIO_Init+0x134>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c0:	4819      	ldr	r0, [pc, #100]	; (8001228 <MX_GPIO_Init+0x138>)
 80011c2:	f003 feb5 	bl	8004f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011cc:	4816      	ldr	r0, [pc, #88]	; (8001228 <MX_GPIO_Init+0x138>)
 80011ce:	f003 feaf 	bl	8004f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d8:	4814      	ldr	r0, [pc, #80]	; (800122c <MX_GPIO_Init+0x13c>)
 80011da:	f003 fea9 	bl	8004f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 80011de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_GPIO_Init+0x138>)
 80011f8:	f003 fcea 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80011fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_GPIO_Init+0x13c>)
 8001216:	f003 fcdb 	bl	8004bd0 <HAL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3730      	adds	r7, #48	; 0x30
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	58024400 	.word	0x58024400
 8001228:	58020c00 	.word	0x58020c00
 800122c:	58021800 	.word	0x58021800

08001230 <af_loop>:

/* USER CODE BEGIN 4 */
void af_loop(){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
//	    }
//
//	    HAL_Delay(3000);

	    // Check fonts
	    ST7735_FillScreen(ST7735_BLACK);
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fccc 	bl	8000bd4 <ST7735_FillScreen>
	    ST7735_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 800123c:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <af_loop+0x1c4>)
 800123e:	2200      	movs	r2, #0
 8001240:	9202      	str	r2, [sp, #8]
 8001242:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001246:	9201      	str	r2, [sp, #4]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	9200      	str	r2, [sp, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a6a      	ldr	r2, [pc, #424]	; (80013f8 <af_loop+0x1c8>)
 8001250:	2100      	movs	r1, #0
 8001252:	2000      	movs	r0, #0
 8001254:	f7ff fbff 	bl	8000a56 <ST7735_WriteString>
	    ST7735_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8001258:	4b68      	ldr	r3, [pc, #416]	; (80013fc <af_loop+0x1cc>)
 800125a:	2200      	movs	r2, #0
 800125c:	9202      	str	r2, [sp, #8]
 800125e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001262:	9201      	str	r2, [sp, #4]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	9200      	str	r2, [sp, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a65      	ldr	r2, [pc, #404]	; (8001400 <af_loop+0x1d0>)
 800126c:	211e      	movs	r1, #30
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fbf1 	bl	8000a56 <ST7735_WriteString>
	    ST7735_WriteString(0, 3*10+3*18, "Font_16x26", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 8001274:	4b63      	ldr	r3, [pc, #396]	; (8001404 <af_loop+0x1d4>)
 8001276:	2200      	movs	r2, #0
 8001278:	9202      	str	r2, [sp, #8]
 800127a:	221f      	movs	r2, #31
 800127c:	9201      	str	r2, [sp, #4]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	9200      	str	r2, [sp, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a60      	ldr	r2, [pc, #384]	; (8001408 <af_loop+0x1d8>)
 8001286:	2154      	movs	r1, #84	; 0x54
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fbe4 	bl	8000a56 <ST7735_WriteString>
	    HAL_Delay(2000);
 800128e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001292:	f000 fcff 	bl	8001c94 <HAL_Delay>
//
//	    ST7735_FillScreen(ST7735_GREEN);
//	    ST7735_WriteString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
//	    HAL_Delay(500);

	    ST7735_FillScreen(ST7735_CYAN);
 8001296:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800129a:	f7ff fc9b 	bl	8000bd4 <ST7735_FillScreen>
	    ST7735_WriteString(0, 0, "CYAN", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 800129e:	4b57      	ldr	r3, [pc, #348]	; (80013fc <af_loop+0x1cc>)
 80012a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012a4:	9202      	str	r2, [sp, #8]
 80012a6:	2200      	movs	r2, #0
 80012a8:	9201      	str	r2, [sp, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	9200      	str	r2, [sp, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a56      	ldr	r2, [pc, #344]	; (800140c <af_loop+0x1dc>)
 80012b2:	2100      	movs	r1, #0
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fbce 	bl	8000a56 <ST7735_WriteString>
	    HAL_Delay(500);
 80012ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012be:	f000 fce9 	bl	8001c94 <HAL_Delay>

	    ST7735_FillScreen(ST7735_MAGENTA);
 80012c2:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80012c6:	f7ff fc85 	bl	8000bd4 <ST7735_FillScreen>
	    ST7735_WriteString(0, 0, "MAGENTA", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 80012ca:	4b4c      	ldr	r3, [pc, #304]	; (80013fc <af_loop+0x1cc>)
 80012cc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80012d0:	9202      	str	r2, [sp, #8]
 80012d2:	2200      	movs	r2, #0
 80012d4:	9201      	str	r2, [sp, #4]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	9200      	str	r2, [sp, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a4c      	ldr	r2, [pc, #304]	; (8001410 <af_loop+0x1e0>)
 80012de:	2100      	movs	r1, #0
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fbb8 	bl	8000a56 <ST7735_WriteString>
	    HAL_Delay(500);
 80012e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ea:	f000 fcd3 	bl	8001c94 <HAL_Delay>

	    ST7735_FillScreen(ST7735_YELLOW);
 80012ee:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80012f2:	f7ff fc6f 	bl	8000bd4 <ST7735_FillScreen>
	    ST7735_WriteString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <af_loop+0x1cc>)
 80012f8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80012fc:	9202      	str	r2, [sp, #8]
 80012fe:	2200      	movs	r2, #0
 8001300:	9201      	str	r2, [sp, #4]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	9200      	str	r2, [sp, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a42      	ldr	r2, [pc, #264]	; (8001414 <af_loop+0x1e4>)
 800130a:	2100      	movs	r1, #0
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fba2 	bl	8000a56 <ST7735_WriteString>
	    HAL_Delay(500);
 8001312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001316:	f000 fcbd 	bl	8001c94 <HAL_Delay>

	    ST7735_FillScreen(ST7735_WHITE);
 800131a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800131e:	f7ff fc59 	bl	8000bd4 <ST7735_FillScreen>
	    ST7735_WriteString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <af_loop+0x1cc>)
 8001324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	2200      	movs	r2, #0
 800132c:	9201      	str	r2, [sp, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	9200      	str	r2, [sp, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a38      	ldr	r2, [pc, #224]	; (8001418 <af_loop+0x1e8>)
 8001336:	2100      	movs	r1, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fb8c 	bl	8000a56 <ST7735_WriteString>
	    HAL_Delay(500);
 800133e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001342:	f000 fca7 	bl	8001c94 <HAL_Delay>

	#ifdef ST7735_IS_128X128
	    // Display test image 128x128
	    ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)image_data_Imageoftest);
 8001346:	4b35      	ldr	r3, [pc, #212]	; (800141c <af_loop+0x1ec>)
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	2100      	movs	r1, #0
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fc50 	bl	8000bf6 <ST7735_DrawImage>
	    ////test_img_128x128
	    HAL_Delay(3500);
 8001356:	f640 50ac 	movw	r0, #3500	; 0xdac
 800135a:	f000 fc9b 	bl	8001c94 <HAL_Delay>

	    ST7735_FillScreen(ST7735_YELLOW);
 800135e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001362:	f7ff fc37 	bl	8000bd4 <ST7735_FillScreen>
		ST7735_WriteString(40, 10, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <af_loop+0x1cc>)
 8001368:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800136c:	9202      	str	r2, [sp, #8]
 800136e:	2200      	movs	r2, #0
 8001370:	9201      	str	r2, [sp, #4]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	9200      	str	r2, [sp, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a26      	ldr	r2, [pc, #152]	; (8001414 <af_loop+0x1e4>)
 800137a:	210a      	movs	r1, #10
 800137c:	2028      	movs	r0, #40	; 0x28
 800137e:	f7ff fb6a 	bl	8000a56 <ST7735_WriteString>
		HAL_Delay(500);
 8001382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001386:	f000 fc85 	bl	8001c94 <HAL_Delay>

	    // Display test image 128x128 pixel by pixel
	    for(int y = 0; y < ST7735_HEIGHT; y++) {
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	e025      	b.n	80013dc <af_loop+0x1ac>
	        for(int x = 0; x < ST7735_WIDTH; x++) {
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	e01c      	b.n	80013d0 <af_loop+0x1a0>
	            uint16_t color565 = test_img_128x128[y][x];
 8001396:	4922      	ldr	r1, [pc, #136]	; (8001420 <af_loop+0x1f0>)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	01da      	lsls	r2, r3, #7
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4413      	add	r3, r2
 80013a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013a4:	80fb      	strh	r3, [r7, #6]
	            // fix endiness
	            color565 = ((color565 & 0xFF00) >> 8) | ((color565 & 0xFF) << 8);
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	80fb      	strh	r3, [r7, #6]
	            ST7735_DrawPixel(x, y, color565);
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	b291      	uxth	r1, r2
 80013c2:	88fa      	ldrh	r2, [r7, #6]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fa9b 	bl	8000900 <ST7735_DrawPixel>
	        for(int x = 0; x < ST7735_WIDTH; x++) {
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3301      	adds	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b7f      	cmp	r3, #127	; 0x7f
 80013d4:	dddf      	ble.n	8001396 <af_loop+0x166>
	    for(int y = 0; y < ST7735_HEIGHT; y++) {
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3301      	adds	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b7f      	cmp	r3, #127	; 0x7f
 80013e0:	ddd6      	ble.n	8001390 <af_loop+0x160>
	        }
	    }

	    HAL_Delay(5000);
 80013e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80013e6:	f000 fc55 	bl	8001c94 <HAL_Delay>
	#endif // ST7735_IS_128X128

	}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	24000008 	.word	0x24000008
 80013f8:	0800a5b4 	.word	0x0800a5b4
 80013fc:	24000010 	.word	0x24000010
 8001400:	0800a5e8 	.word	0x0800a5e8
 8001404:	24000018 	.word	0x24000018
 8001408:	0800a608 	.word	0x0800a608
 800140c:	0800a614 	.word	0x0800a614
 8001410:	0800a61c 	.word	0x0800a61c
 8001414:	0800a624 	.word	0x0800a624
 8001418:	0800a62c 	.word	0x0800a62c
 800141c:	08014ed0 	.word	0x08014ed0
 8001420:	0800ced0 	.word	0x0800ced0

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	e7fe      	b.n	800142c <Error_Handler+0x8>
	...

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_MspInit+0x30>)
 8001438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800143c:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_MspInit+0x30>)
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_MspInit+0x30>)
 8001448:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	58024400 	.word	0x58024400

08001464 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08e      	sub	sp, #56	; 0x38
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a59      	ldr	r2, [pc, #356]	; (80015e8 <HAL_ETH_MspInit+0x184>)
 8001482:	4293      	cmp	r3, r2
 8001484:	f040 80ab 	bne.w	80015de <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001488:	4b58      	ldr	r3, [pc, #352]	; (80015ec <HAL_ETH_MspInit+0x188>)
 800148a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800148e:	4a57      	ldr	r2, [pc, #348]	; (80015ec <HAL_ETH_MspInit+0x188>)
 8001490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001494:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001498:	4b54      	ldr	r3, [pc, #336]	; (80015ec <HAL_ETH_MspInit+0x188>)
 800149a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800149e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014a2:	623b      	str	r3, [r7, #32]
 80014a4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80014a6:	4b51      	ldr	r3, [pc, #324]	; (80015ec <HAL_ETH_MspInit+0x188>)
 80014a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ac:	4a4f      	ldr	r2, [pc, #316]	; (80015ec <HAL_ETH_MspInit+0x188>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014b6:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <HAL_ETH_MspInit+0x188>)
 80014b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80014c4:	4b49      	ldr	r3, [pc, #292]	; (80015ec <HAL_ETH_MspInit+0x188>)
 80014c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ca:	4a48      	ldr	r2, [pc, #288]	; (80015ec <HAL_ETH_MspInit+0x188>)
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014d4:	4b45      	ldr	r3, [pc, #276]	; (80015ec <HAL_ETH_MspInit+0x188>)
 80014d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	4b42      	ldr	r3, [pc, #264]	; (80015ec <HAL_ETH_MspInit+0x188>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	4a40      	ldr	r2, [pc, #256]	; (80015ec <HAL_ETH_MspInit+0x188>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f2:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <HAL_ETH_MspInit+0x188>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <HAL_ETH_MspInit+0x188>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001506:	4a39      	ldr	r2, [pc, #228]	; (80015ec <HAL_ETH_MspInit+0x188>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <HAL_ETH_MspInit+0x188>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <HAL_ETH_MspInit+0x188>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001524:	4a31      	ldr	r2, [pc, #196]	; (80015ec <HAL_ETH_MspInit+0x188>)
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <HAL_ETH_MspInit+0x188>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <HAL_ETH_MspInit+0x188>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	4a2a      	ldr	r2, [pc, #168]	; (80015ec <HAL_ETH_MspInit+0x188>)
 8001544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001548:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_ETH_MspInit+0x188>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800155a:	2332      	movs	r3, #50	; 0x32
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800156a:	230b      	movs	r3, #11
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	481e      	ldr	r0, [pc, #120]	; (80015f0 <HAL_ETH_MspInit+0x18c>)
 8001576:	f003 fb2b 	bl	8004bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800157a:	2386      	movs	r3, #134	; 0x86
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800158a:	230b      	movs	r3, #11
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4817      	ldr	r0, [pc, #92]	; (80015f4 <HAL_ETH_MspInit+0x190>)
 8001596:	f003 fb1b 	bl	8004bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800159a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ac:	230b      	movs	r3, #11
 80015ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b4:	4619      	mov	r1, r3
 80015b6:	4810      	ldr	r0, [pc, #64]	; (80015f8 <HAL_ETH_MspInit+0x194>)
 80015b8:	f003 fb0a 	bl	8004bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80015bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ce:	230b      	movs	r3, #11
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <HAL_ETH_MspInit+0x198>)
 80015da:	f003 faf9 	bl	8004bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3738      	adds	r7, #56	; 0x38
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40028000 	.word	0x40028000
 80015ec:	58024400 	.word	0x58024400
 80015f0:	58020800 	.word	0x58020800
 80015f4:	58020000 	.word	0x58020000
 80015f8:	58020400 	.word	0x58020400
 80015fc:	58021800 	.word	0x58021800

08001600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0ba      	sub	sp, #232	; 0xe8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	22bc      	movs	r2, #188	; 0xbc
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f008 ffb3 	bl	800a58c <memset>
  if(hspi->Instance==SPI1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <HAL_SPI_MspInit+0x194>)
 800162c:	4293      	cmp	r3, r2
 800162e:	f040 80ad 	bne.w	800178c <HAL_SPI_MspInit+0x18c>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001636:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001638:	2304      	movs	r3, #4
 800163a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 80;
 800163c:	2350      	movs	r3, #80	; 0x50
 800163e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001640:	2302      	movs	r3, #2
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001644:	2302      	movs	r3, #2
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001648:	2302      	movs	r3, #2
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800164c:	2340      	movs	r3, #64	; 0x40
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001650:	2320      	movs	r3, #32
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165e:	f107 0318 	add.w	r3, r7, #24
 8001662:	4618      	mov	r0, r3
 8001664:	f004 fe18 	bl	8006298 <HAL_RCCEx_PeriphCLKConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 800166e:	f7ff fed9 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001672:	4b49      	ldr	r3, [pc, #292]	; (8001798 <HAL_SPI_MspInit+0x198>)
 8001674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001678:	4a47      	ldr	r2, [pc, #284]	; (8001798 <HAL_SPI_MspInit+0x198>)
 800167a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800167e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001682:	4b45      	ldr	r3, [pc, #276]	; (8001798 <HAL_SPI_MspInit+0x198>)
 8001684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_SPI_MspInit+0x198>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001696:	4a40      	ldr	r2, [pc, #256]	; (8001798 <HAL_SPI_MspInit+0x198>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a0:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <HAL_SPI_MspInit+0x198>)
 80016a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	4b3a      	ldr	r3, [pc, #232]	; (8001798 <HAL_SPI_MspInit+0x198>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b4:	4a38      	ldr	r2, [pc, #224]	; (8001798 <HAL_SPI_MspInit+0x198>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016be:	4b36      	ldr	r3, [pc, #216]	; (8001798 <HAL_SPI_MspInit+0x198>)
 80016c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016cc:	2320      	movs	r3, #32
 80016ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016e4:	2305      	movs	r3, #5
 80016e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016ee:	4619      	mov	r1, r3
 80016f0:	482a      	ldr	r0, [pc, #168]	; (800179c <HAL_SPI_MspInit+0x19c>)
 80016f2:	f003 fa6d 	bl	8004bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016f6:	2320      	movs	r3, #32
 80016f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800170e:	2305      	movs	r3, #5
 8001710:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001718:	4619      	mov	r1, r3
 800171a:	4821      	ldr	r0, [pc, #132]	; (80017a0 <HAL_SPI_MspInit+0x1a0>)
 800171c:	f003 fa58 	bl	8004bd0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 8001722:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <HAL_SPI_MspInit+0x1a8>)
 8001724:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 8001728:	2226      	movs	r2, #38	; 0x26
 800172a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 800173a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 800174e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001752:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 8001756:	2200      	movs	r2, #0
 8001758:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 800175c:	2200      	movs	r2, #0
 800175e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001760:	4810      	ldr	r0, [pc, #64]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 8001762:	f000 fbeb 	bl	8001f3c <HAL_DMA_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_SPI_MspInit+0x170>
    {
      Error_Handler();
 800176c:	f7ff fe5a 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 8001774:	679a      	str	r2, [r3, #120]	; 0x78
 8001776:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_SPI_MspInit+0x1a4>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2023      	movs	r0, #35	; 0x23
 8001782:	f000 fba6 	bl	8001ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001786:	2023      	movs	r0, #35	; 0x23
 8001788:	f000 fbbd 	bl	8001f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	37e8      	adds	r7, #232	; 0xe8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40013000 	.word	0x40013000
 8001798:	58024400 	.word	0x58024400
 800179c:	58020000 	.word	0x58020000
 80017a0:	58020400 	.word	0x58020400
 80017a4:	24000274 	.word	0x24000274
 80017a8:	40020010 	.word	0x40020010

080017ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b0b8      	sub	sp, #224	; 0xe0
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	22bc      	movs	r2, #188	; 0xbc
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f008 fedd 	bl	800a58c <memset>
  if(huart->Instance==USART3)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a57      	ldr	r2, [pc, #348]	; (8001934 <HAL_UART_MspInit+0x188>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	f040 80a7 	bne.w	800192c <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017de:	2302      	movs	r3, #2
 80017e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	4618      	mov	r0, r3
 80017ee:	f004 fd53 	bl	8006298 <HAL_RCCEx_PeriphCLKConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80017f8:	f7ff fe14 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017fc:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <HAL_UART_MspInit+0x18c>)
 80017fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001802:	4a4d      	ldr	r2, [pc, #308]	; (8001938 <HAL_UART_MspInit+0x18c>)
 8001804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001808:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800180c:	4b4a      	ldr	r3, [pc, #296]	; (8001938 <HAL_UART_MspInit+0x18c>)
 800180e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_UART_MspInit+0x18c>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001820:	4a45      	ldr	r2, [pc, #276]	; (8001938 <HAL_UART_MspInit+0x18c>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800182a:	4b43      	ldr	r3, [pc, #268]	; (8001938 <HAL_UART_MspInit+0x18c>)
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001838:	f44f 7340 	mov.w	r3, #768	; 0x300
 800183c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001852:	2307      	movs	r3, #7
 8001854:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001858:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800185c:	4619      	mov	r1, r3
 800185e:	4837      	ldr	r0, [pc, #220]	; (800193c <HAL_UART_MspInit+0x190>)
 8001860:	f003 f9b6 	bl	8004bd0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <HAL_UART_MspInit+0x194>)
 8001866:	4a37      	ldr	r2, [pc, #220]	; (8001944 <HAL_UART_MspInit+0x198>)
 8001868:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800186a:	4b35      	ldr	r3, [pc, #212]	; (8001940 <HAL_UART_MspInit+0x194>)
 800186c:	222d      	movs	r2, #45	; 0x2d
 800186e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001870:	4b33      	ldr	r3, [pc, #204]	; (8001940 <HAL_UART_MspInit+0x194>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001876:	4b32      	ldr	r3, [pc, #200]	; (8001940 <HAL_UART_MspInit+0x194>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800187c:	4b30      	ldr	r3, [pc, #192]	; (8001940 <HAL_UART_MspInit+0x194>)
 800187e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001882:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001884:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <HAL_UART_MspInit+0x194>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_UART_MspInit+0x194>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_UART_MspInit+0x194>)
 8001892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001896:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001898:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_UART_MspInit+0x194>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_UART_MspInit+0x194>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80018a4:	4826      	ldr	r0, [pc, #152]	; (8001940 <HAL_UART_MspInit+0x194>)
 80018a6:	f000 fb49 	bl	8001f3c <HAL_DMA_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80018b0:	f7ff fdb8 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a22      	ldr	r2, [pc, #136]	; (8001940 <HAL_UART_MspInit+0x194>)
 80018b8:	67da      	str	r2, [r3, #124]	; 0x7c
 80018ba:	4a21      	ldr	r2, [pc, #132]	; (8001940 <HAL_UART_MspInit+0x194>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <HAL_UART_MspInit+0x19c>)
 80018c2:	4a22      	ldr	r2, [pc, #136]	; (800194c <HAL_UART_MspInit+0x1a0>)
 80018c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_UART_MspInit+0x19c>)
 80018c8:	222e      	movs	r2, #46	; 0x2e
 80018ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_UART_MspInit+0x19c>)
 80018ce:	2240      	movs	r2, #64	; 0x40
 80018d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_UART_MspInit+0x19c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_UART_MspInit+0x19c>)
 80018da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018de:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_UART_MspInit+0x19c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_UART_MspInit+0x19c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_UART_MspInit+0x19c>)
 80018ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_UART_MspInit+0x19c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_UART_MspInit+0x19c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001900:	4811      	ldr	r0, [pc, #68]	; (8001948 <HAL_UART_MspInit+0x19c>)
 8001902:	f000 fb1b 	bl	8001f3c <HAL_DMA_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 800190c:	f7ff fd8a 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <HAL_UART_MspInit+0x19c>)
 8001914:	679a      	str	r2, [r3, #120]	; 0x78
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <HAL_UART_MspInit+0x19c>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	2027      	movs	r0, #39	; 0x27
 8001922:	f000 fad6 	bl	8001ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001926:	2027      	movs	r0, #39	; 0x27
 8001928:	f000 faed 	bl	8001f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800192c:	bf00      	nop
 800192e:	37e0      	adds	r7, #224	; 0xe0
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40004800 	.word	0x40004800
 8001938:	58024400 	.word	0x58024400
 800193c:	58020c00 	.word	0x58020c00
 8001940:	2400037c 	.word	0x2400037c
 8001944:	40020028 	.word	0x40020028
 8001948:	240003f4 	.word	0x240003f4
 800194c:	40020040 	.word	0x40020040

08001950 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b0b8      	sub	sp, #224	; 0xe0
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	22bc      	movs	r2, #188	; 0xbc
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f008 fe0b 	bl	800a58c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a37      	ldr	r2, [pc, #220]	; (8001a58 <HAL_PCD_MspInit+0x108>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d166      	bne.n	8001a4e <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001980:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001984:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800198a:	2312      	movs	r3, #18
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800198e:	2302      	movs	r3, #2
 8001990:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001992:	2303      	movs	r3, #3
 8001994:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001996:	2302      	movs	r3, #2
 8001998:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800199a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800199e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80019a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019a4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80019a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fc70 	bl	8006298 <HAL_RCCEx_PeriphCLKConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80019be:	f7ff fd31 	bl	8001424 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80019c2:	f003 fc9f 	bl	8005304 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <HAL_PCD_MspInit+0x10c>)
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019cc:	4a23      	ldr	r2, [pc, #140]	; (8001a5c <HAL_PCD_MspInit+0x10c>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <HAL_PCD_MspInit+0x10c>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80019e4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80019e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80019fe:	230a      	movs	r3, #10
 8001a00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4815      	ldr	r0, [pc, #84]	; (8001a60 <HAL_PCD_MspInit+0x110>)
 8001a0c:	f003 f8e0 	bl	8004bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <HAL_PCD_MspInit+0x110>)
 8001a2c:	f003 f8d0 	bl	8004bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_PCD_MspInit+0x10c>)
 8001a32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <HAL_PCD_MspInit+0x10c>)
 8001a38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_PCD_MspInit+0x10c>)
 8001a42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	37e0      	adds	r7, #224	; 0xe0
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40080000 	.word	0x40080000
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	58020000 	.word	0x58020000

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <NMI_Handler+0x4>

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <MemManage_Handler+0x4>

08001a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab0:	f000 f8d0 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <DMA1_Stream0_IRQHandler+0x10>)
 8001abe:	f001 fafd 	bl	80030bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	24000274 	.word	0x24000274

08001acc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <DMA1_Stream1_IRQHandler+0x10>)
 8001ad2:	f001 faf3 	bl	80030bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2400037c 	.word	0x2400037c

08001ae0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <DMA1_Stream2_IRQHandler+0x10>)
 8001ae6:	f001 fae9 	bl	80030bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	240003f4 	.word	0x240003f4

08001af4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <SPI1_IRQHandler+0x10>)
 8001afa:	f006 fa2d 	bl	8007f58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	240001ec 	.word	0x240001ec

08001b08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <USART3_IRQHandler+0x10>)
 8001b0e:	f006 fd6b 	bl	80085e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	240002ec 	.word	0x240002ec

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b20:	f7fe fd5c 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b26:	490d      	ldr	r1, [pc, #52]	; (8001b5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b3c:	4c0a      	ldr	r4, [pc, #40]	; (8001b68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f008 fcfb 	bl	800a544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7ff f89f 	bl	8000c90 <main>
  bx  lr
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b5c:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001b60:	0801cf10 	.word	0x0801cf10
  ldr r2, =_sbss
 8001b64:	240000e8 	.word	0x240000e8
  ldr r4, =_ebss
 8001b68:	24000984 	.word	0x24000984

08001b6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC3_IRQHandler>
	...

08001b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b76:	2003      	movs	r0, #3
 8001b78:	f000 f9a0 	bl	8001ebc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b7c:	f004 f9b6 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_Init+0x68>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	4913      	ldr	r1, [pc, #76]	; (8001bdc <HAL_Init+0x6c>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
 8001b98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_Init+0x68>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_Init+0x6c>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_Init+0x70>)
 8001bb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_Init+0x74>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f814 	bl	8001be8 <HAL_InitTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e002      	b.n	8001bd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bca:	f7ff fc31 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	0800a634 	.word	0x0800a634
 8001be0:	24000004 	.word	0x24000004
 8001be4:	24000000 	.word	0x24000000

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_InitTick+0x60>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e021      	b.n	8001c40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_InitTick+0x64>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_InitTick+0x60>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f985 	bl	8001f22 <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 f94f 	bl	8001ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <HAL_InitTick+0x68>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	24000024 	.word	0x24000024
 8001c4c:	24000000 	.word	0x24000000
 8001c50:	24000020 	.word	0x24000020

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	24000024 	.word	0x24000024
 8001c78:	24000980 	.word	0x24000980

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	24000980 	.word	0x24000980

08001c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff ffee 	bl	8001c7c <HAL_GetTick>
 8001ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d005      	beq.n	8001cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_Delay+0x44>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cba:	bf00      	nop
 8001cbc:	f7ff ffde 	bl	8001c7c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d8f7      	bhi.n	8001cbc <HAL_Delay+0x28>
  {
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	24000024 	.word	0x24000024

08001cdc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_GetREVID+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	5c001000 	.word	0x5c001000

08001cf4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001d04:	4904      	ldr	r1, [pc, #16]	; (8001d18 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	58000400 	.word	0x58000400

08001d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <__NVIC_SetPriorityGrouping+0x40>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <__NVIC_SetPriorityGrouping+0x40>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00
 8001d60:	05fa0000 	.word	0x05fa0000

08001d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <__NVIC_GetPriorityGrouping+0x18>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 0307 	and.w	r3, r3, #7
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db0b      	blt.n	8001daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	4907      	ldr	r1, [pc, #28]	; (8001db8 <__NVIC_EnableIRQ+0x38>)
 8001d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2001      	movs	r0, #1
 8001da2:	fa00 f202 	lsl.w	r2, r0, r2
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	; (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	; (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
         );
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e88:	d301      	bcc.n	8001e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00f      	b.n	8001eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <SysTick_Config+0x40>)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e96:	210f      	movs	r1, #15
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f7ff ff8e 	bl	8001dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <SysTick_Config+0x40>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <SysTick_Config+0x40>)
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	e000e010 	.word	0xe000e010

08001ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff29 	bl	8001d1c <__NVIC_SetPriorityGrouping>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee0:	f7ff ff40 	bl	8001d64 <__NVIC_GetPriorityGrouping>
 8001ee4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f7ff ff90 	bl	8001e10 <NVIC_EncodePriority>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff5f 	bl	8001dbc <__NVIC_SetPriority>
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff33 	bl	8001d80 <__NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffa4 	bl	8001e78 <SysTick_Config>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff fe9a 	bl	8001c7c <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e316      	b.n	8002582 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a66      	ldr	r2, [pc, #408]	; (80020f4 <HAL_DMA_Init+0x1b8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d04a      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a65      	ldr	r2, [pc, #404]	; (80020f8 <HAL_DMA_Init+0x1bc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d045      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a63      	ldr	r2, [pc, #396]	; (80020fc <HAL_DMA_Init+0x1c0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d040      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a62      	ldr	r2, [pc, #392]	; (8002100 <HAL_DMA_Init+0x1c4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d03b      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a60      	ldr	r2, [pc, #384]	; (8002104 <HAL_DMA_Init+0x1c8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d036      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a5f      	ldr	r2, [pc, #380]	; (8002108 <HAL_DMA_Init+0x1cc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d031      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a5d      	ldr	r2, [pc, #372]	; (800210c <HAL_DMA_Init+0x1d0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d02c      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a5c      	ldr	r2, [pc, #368]	; (8002110 <HAL_DMA_Init+0x1d4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d027      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a5a      	ldr	r2, [pc, #360]	; (8002114 <HAL_DMA_Init+0x1d8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d022      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a59      	ldr	r2, [pc, #356]	; (8002118 <HAL_DMA_Init+0x1dc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d01d      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a57      	ldr	r2, [pc, #348]	; (800211c <HAL_DMA_Init+0x1e0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d018      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a56      	ldr	r2, [pc, #344]	; (8002120 <HAL_DMA_Init+0x1e4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d013      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a54      	ldr	r2, [pc, #336]	; (8002124 <HAL_DMA_Init+0x1e8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00e      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a53      	ldr	r2, [pc, #332]	; (8002128 <HAL_DMA_Init+0x1ec>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d009      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a51      	ldr	r2, [pc, #324]	; (800212c <HAL_DMA_Init+0x1f0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_DMA_Init+0xb8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a50      	ldr	r2, [pc, #320]	; (8002130 <HAL_DMA_Init+0x1f4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_DMA_Init+0xbc>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_DMA_Init+0xbe>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 813b 	beq.w	8002276 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a37      	ldr	r2, [pc, #220]	; (80020f4 <HAL_DMA_Init+0x1b8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d04a      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a36      	ldr	r2, [pc, #216]	; (80020f8 <HAL_DMA_Init+0x1bc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d045      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a34      	ldr	r2, [pc, #208]	; (80020fc <HAL_DMA_Init+0x1c0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d040      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a33      	ldr	r2, [pc, #204]	; (8002100 <HAL_DMA_Init+0x1c4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d03b      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a31      	ldr	r2, [pc, #196]	; (8002104 <HAL_DMA_Init+0x1c8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d036      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a30      	ldr	r2, [pc, #192]	; (8002108 <HAL_DMA_Init+0x1cc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d031      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a2e      	ldr	r2, [pc, #184]	; (800210c <HAL_DMA_Init+0x1d0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02c      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a2d      	ldr	r2, [pc, #180]	; (8002110 <HAL_DMA_Init+0x1d4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d027      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a2b      	ldr	r2, [pc, #172]	; (8002114 <HAL_DMA_Init+0x1d8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d022      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <HAL_DMA_Init+0x1dc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d01d      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a28      	ldr	r2, [pc, #160]	; (800211c <HAL_DMA_Init+0x1e0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d018      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a27      	ldr	r2, [pc, #156]	; (8002120 <HAL_DMA_Init+0x1e4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a25      	ldr	r2, [pc, #148]	; (8002124 <HAL_DMA_Init+0x1e8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00e      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a24      	ldr	r2, [pc, #144]	; (8002128 <HAL_DMA_Init+0x1ec>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d009      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a22      	ldr	r2, [pc, #136]	; (800212c <HAL_DMA_Init+0x1f0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d004      	beq.n	80020b0 <HAL_DMA_Init+0x174>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a21      	ldr	r2, [pc, #132]	; (8002130 <HAL_DMA_Init+0x1f4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d108      	bne.n	80020c2 <HAL_DMA_Init+0x186>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e007      	b.n	80020d2 <HAL_DMA_Init+0x196>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020d2:	e02f      	b.n	8002134 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020d4:	f7ff fdd2 	bl	8001c7c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d928      	bls.n	8002134 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2203      	movs	r2, #3
 80020ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e246      	b.n	8002582 <HAL_DMA_Init+0x646>
 80020f4:	40020010 	.word	0x40020010
 80020f8:	40020028 	.word	0x40020028
 80020fc:	40020040 	.word	0x40020040
 8002100:	40020058 	.word	0x40020058
 8002104:	40020070 	.word	0x40020070
 8002108:	40020088 	.word	0x40020088
 800210c:	400200a0 	.word	0x400200a0
 8002110:	400200b8 	.word	0x400200b8
 8002114:	40020410 	.word	0x40020410
 8002118:	40020428 	.word	0x40020428
 800211c:	40020440 	.word	0x40020440
 8002120:	40020458 	.word	0x40020458
 8002124:	40020470 	.word	0x40020470
 8002128:	40020488 	.word	0x40020488
 800212c:	400204a0 	.word	0x400204a0
 8002130:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1c8      	bne.n	80020d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4b83      	ldr	r3, [pc, #524]	; (800235c <HAL_DMA_Init+0x420>)
 800214e:	4013      	ands	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800215a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002166:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002172:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	2b04      	cmp	r3, #4
 8002186:	d107      	bne.n	8002198 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	4313      	orrs	r3, r2
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002198:	4b71      	ldr	r3, [pc, #452]	; (8002360 <HAL_DMA_Init+0x424>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b71      	ldr	r3, [pc, #452]	; (8002364 <HAL_DMA_Init+0x428>)
 800219e:	4013      	ands	r3, r2
 80021a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a4:	d328      	bcc.n	80021f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b28      	cmp	r3, #40	; 0x28
 80021ac:	d903      	bls.n	80021b6 <HAL_DMA_Init+0x27a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b2e      	cmp	r3, #46	; 0x2e
 80021b4:	d917      	bls.n	80021e6 <HAL_DMA_Init+0x2aa>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b3e      	cmp	r3, #62	; 0x3e
 80021bc:	d903      	bls.n	80021c6 <HAL_DMA_Init+0x28a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b42      	cmp	r3, #66	; 0x42
 80021c4:	d90f      	bls.n	80021e6 <HAL_DMA_Init+0x2aa>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b46      	cmp	r3, #70	; 0x46
 80021cc:	d903      	bls.n	80021d6 <HAL_DMA_Init+0x29a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b48      	cmp	r3, #72	; 0x48
 80021d4:	d907      	bls.n	80021e6 <HAL_DMA_Init+0x2aa>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b4e      	cmp	r3, #78	; 0x4e
 80021dc:	d905      	bls.n	80021ea <HAL_DMA_Init+0x2ae>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b52      	cmp	r3, #82	; 0x52
 80021e4:	d801      	bhi.n	80021ea <HAL_DMA_Init+0x2ae>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_DMA_Init+0x2b0>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f023 0307 	bic.w	r3, r3, #7
 800220e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	2b04      	cmp	r3, #4
 8002220:	d117      	bne.n	8002252 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00e      	beq.n	8002252 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f001 ff1d 	bl	8004074 <DMA_CheckFifoParam>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2240      	movs	r2, #64	; 0x40
 8002244:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e197      	b.n	8002582 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f001 fe58 	bl	8003f10 <DMA_CalcBaseAndBitshift>
 8002260:	4603      	mov	r3, r0
 8002262:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	223f      	movs	r2, #63	; 0x3f
 800226e:	409a      	lsls	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	e0cd      	b.n	8002412 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <HAL_DMA_Init+0x42c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d022      	beq.n	80022c6 <HAL_DMA_Init+0x38a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a39      	ldr	r2, [pc, #228]	; (800236c <HAL_DMA_Init+0x430>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d01d      	beq.n	80022c6 <HAL_DMA_Init+0x38a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a38      	ldr	r2, [pc, #224]	; (8002370 <HAL_DMA_Init+0x434>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d018      	beq.n	80022c6 <HAL_DMA_Init+0x38a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a36      	ldr	r2, [pc, #216]	; (8002374 <HAL_DMA_Init+0x438>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_DMA_Init+0x38a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a35      	ldr	r2, [pc, #212]	; (8002378 <HAL_DMA_Init+0x43c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00e      	beq.n	80022c6 <HAL_DMA_Init+0x38a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a33      	ldr	r2, [pc, #204]	; (800237c <HAL_DMA_Init+0x440>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d009      	beq.n	80022c6 <HAL_DMA_Init+0x38a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a32      	ldr	r2, [pc, #200]	; (8002380 <HAL_DMA_Init+0x444>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d004      	beq.n	80022c6 <HAL_DMA_Init+0x38a>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a30      	ldr	r2, [pc, #192]	; (8002384 <HAL_DMA_Init+0x448>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_DMA_Init+0x38e>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_DMA_Init+0x390>
 80022ca:	2300      	movs	r3, #0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8097 	beq.w	8002400 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a24      	ldr	r2, [pc, #144]	; (8002368 <HAL_DMA_Init+0x42c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d021      	beq.n	8002320 <HAL_DMA_Init+0x3e4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a22      	ldr	r2, [pc, #136]	; (800236c <HAL_DMA_Init+0x430>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01c      	beq.n	8002320 <HAL_DMA_Init+0x3e4>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a21      	ldr	r2, [pc, #132]	; (8002370 <HAL_DMA_Init+0x434>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d017      	beq.n	8002320 <HAL_DMA_Init+0x3e4>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <HAL_DMA_Init+0x438>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d012      	beq.n	8002320 <HAL_DMA_Init+0x3e4>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1e      	ldr	r2, [pc, #120]	; (8002378 <HAL_DMA_Init+0x43c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00d      	beq.n	8002320 <HAL_DMA_Init+0x3e4>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1c      	ldr	r2, [pc, #112]	; (800237c <HAL_DMA_Init+0x440>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d008      	beq.n	8002320 <HAL_DMA_Init+0x3e4>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1b      	ldr	r2, [pc, #108]	; (8002380 <HAL_DMA_Init+0x444>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d003      	beq.n	8002320 <HAL_DMA_Init+0x3e4>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a19      	ldr	r2, [pc, #100]	; (8002384 <HAL_DMA_Init+0x448>)
 800231e:	4293      	cmp	r3, r2
 8002320:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_DMA_Init+0x44c>)
 800233e:	4013      	ands	r3, r2
 8002340:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d020      	beq.n	800238c <HAL_DMA_Init+0x450>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b80      	cmp	r3, #128	; 0x80
 8002350:	d102      	bne.n	8002358 <HAL_DMA_Init+0x41c>
 8002352:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002356:	e01a      	b.n	800238e <HAL_DMA_Init+0x452>
 8002358:	2300      	movs	r3, #0
 800235a:	e018      	b.n	800238e <HAL_DMA_Init+0x452>
 800235c:	fe10803f 	.word	0xfe10803f
 8002360:	5c001000 	.word	0x5c001000
 8002364:	ffff0000 	.word	0xffff0000
 8002368:	58025408 	.word	0x58025408
 800236c:	5802541c 	.word	0x5802541c
 8002370:	58025430 	.word	0x58025430
 8002374:	58025444 	.word	0x58025444
 8002378:	58025458 	.word	0x58025458
 800237c:	5802546c 	.word	0x5802546c
 8002380:	58025480 	.word	0x58025480
 8002384:	58025494 	.word	0x58025494
 8002388:	fffe000f 	.word	0xfffe000f
 800238c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68d2      	ldr	r2, [r2, #12]
 8002392:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002394:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800239c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b6e      	ldr	r3, [pc, #440]	; (800258c <HAL_DMA_Init+0x650>)
 80023d4:	4413      	add	r3, r2
 80023d6:	4a6e      	ldr	r2, [pc, #440]	; (8002590 <HAL_DMA_Init+0x654>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	009a      	lsls	r2, r3, #2
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f001 fd93 	bl	8003f10 <DMA_CalcBaseAndBitshift>
 80023ea:	4603      	mov	r3, r0
 80023ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2201      	movs	r2, #1
 80023f8:	409a      	lsls	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	e008      	b.n	8002412 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2240      	movs	r2, #64	; 0x40
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2203      	movs	r2, #3
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0b7      	b.n	8002582 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a5f      	ldr	r2, [pc, #380]	; (8002594 <HAL_DMA_Init+0x658>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d072      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a5d      	ldr	r2, [pc, #372]	; (8002598 <HAL_DMA_Init+0x65c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d06d      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a5c      	ldr	r2, [pc, #368]	; (800259c <HAL_DMA_Init+0x660>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d068      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a5a      	ldr	r2, [pc, #360]	; (80025a0 <HAL_DMA_Init+0x664>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d063      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a59      	ldr	r2, [pc, #356]	; (80025a4 <HAL_DMA_Init+0x668>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d05e      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a57      	ldr	r2, [pc, #348]	; (80025a8 <HAL_DMA_Init+0x66c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d059      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a56      	ldr	r2, [pc, #344]	; (80025ac <HAL_DMA_Init+0x670>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d054      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a54      	ldr	r2, [pc, #336]	; (80025b0 <HAL_DMA_Init+0x674>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d04f      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a53      	ldr	r2, [pc, #332]	; (80025b4 <HAL_DMA_Init+0x678>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d04a      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a51      	ldr	r2, [pc, #324]	; (80025b8 <HAL_DMA_Init+0x67c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d045      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a50      	ldr	r2, [pc, #320]	; (80025bc <HAL_DMA_Init+0x680>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d040      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a4e      	ldr	r2, [pc, #312]	; (80025c0 <HAL_DMA_Init+0x684>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d03b      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a4d      	ldr	r2, [pc, #308]	; (80025c4 <HAL_DMA_Init+0x688>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d036      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a4b      	ldr	r2, [pc, #300]	; (80025c8 <HAL_DMA_Init+0x68c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d031      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a4a      	ldr	r2, [pc, #296]	; (80025cc <HAL_DMA_Init+0x690>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d02c      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a48      	ldr	r2, [pc, #288]	; (80025d0 <HAL_DMA_Init+0x694>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d027      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a47      	ldr	r2, [pc, #284]	; (80025d4 <HAL_DMA_Init+0x698>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d022      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a45      	ldr	r2, [pc, #276]	; (80025d8 <HAL_DMA_Init+0x69c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01d      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a44      	ldr	r2, [pc, #272]	; (80025dc <HAL_DMA_Init+0x6a0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d018      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a42      	ldr	r2, [pc, #264]	; (80025e0 <HAL_DMA_Init+0x6a4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a41      	ldr	r2, [pc, #260]	; (80025e4 <HAL_DMA_Init+0x6a8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00e      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a3f      	ldr	r2, [pc, #252]	; (80025e8 <HAL_DMA_Init+0x6ac>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d009      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a3e      	ldr	r2, [pc, #248]	; (80025ec <HAL_DMA_Init+0x6b0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_DMA_Init+0x5c6>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a3c      	ldr	r2, [pc, #240]	; (80025f0 <HAL_DMA_Init+0x6b4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_DMA_Init+0x5ca>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_DMA_Init+0x5cc>
 8002506:	2300      	movs	r3, #0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d032      	beq.n	8002572 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f001 fe2d 	bl	800416c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b80      	cmp	r3, #128	; 0x80
 8002518:	d102      	bne.n	8002520 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002534:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d010      	beq.n	8002560 <HAL_DMA_Init+0x624>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b08      	cmp	r3, #8
 8002544:	d80c      	bhi.n	8002560 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f001 feaa 	bl	80042a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	e008      	b.n	8002572 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	a7fdabf8 	.word	0xa7fdabf8
 8002590:	cccccccd 	.word	0xcccccccd
 8002594:	40020010 	.word	0x40020010
 8002598:	40020028 	.word	0x40020028
 800259c:	40020040 	.word	0x40020040
 80025a0:	40020058 	.word	0x40020058
 80025a4:	40020070 	.word	0x40020070
 80025a8:	40020088 	.word	0x40020088
 80025ac:	400200a0 	.word	0x400200a0
 80025b0:	400200b8 	.word	0x400200b8
 80025b4:	40020410 	.word	0x40020410
 80025b8:	40020428 	.word	0x40020428
 80025bc:	40020440 	.word	0x40020440
 80025c0:	40020458 	.word	0x40020458
 80025c4:	40020470 	.word	0x40020470
 80025c8:	40020488 	.word	0x40020488
 80025cc:	400204a0 	.word	0x400204a0
 80025d0:	400204b8 	.word	0x400204b8
 80025d4:	58025408 	.word	0x58025408
 80025d8:	5802541c 	.word	0x5802541c
 80025dc:	58025430 	.word	0x58025430
 80025e0:	58025444 	.word	0x58025444
 80025e4:	58025458 	.word	0x58025458
 80025e8:	5802546c 	.word	0x5802546c
 80025ec:	58025480 	.word	0x58025480
 80025f0:	58025494 	.word	0x58025494

080025f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff fb3e 	bl	8001c7c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e2dc      	b.n	8002bc6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d008      	beq.n	800262a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e2cd      	b.n	8002bc6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a76      	ldr	r2, [pc, #472]	; (8002808 <HAL_DMA_Abort+0x214>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d04a      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a74      	ldr	r2, [pc, #464]	; (800280c <HAL_DMA_Abort+0x218>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d045      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a73      	ldr	r2, [pc, #460]	; (8002810 <HAL_DMA_Abort+0x21c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d040      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a71      	ldr	r2, [pc, #452]	; (8002814 <HAL_DMA_Abort+0x220>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d03b      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a70      	ldr	r2, [pc, #448]	; (8002818 <HAL_DMA_Abort+0x224>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d036      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a6e      	ldr	r2, [pc, #440]	; (800281c <HAL_DMA_Abort+0x228>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d031      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6d      	ldr	r2, [pc, #436]	; (8002820 <HAL_DMA_Abort+0x22c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d02c      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a6b      	ldr	r2, [pc, #428]	; (8002824 <HAL_DMA_Abort+0x230>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d027      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6a      	ldr	r2, [pc, #424]	; (8002828 <HAL_DMA_Abort+0x234>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a68      	ldr	r2, [pc, #416]	; (800282c <HAL_DMA_Abort+0x238>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01d      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a67      	ldr	r2, [pc, #412]	; (8002830 <HAL_DMA_Abort+0x23c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d018      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a65      	ldr	r2, [pc, #404]	; (8002834 <HAL_DMA_Abort+0x240>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a64      	ldr	r2, [pc, #400]	; (8002838 <HAL_DMA_Abort+0x244>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00e      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a62      	ldr	r2, [pc, #392]	; (800283c <HAL_DMA_Abort+0x248>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d009      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a61      	ldr	r2, [pc, #388]	; (8002840 <HAL_DMA_Abort+0x24c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a5f      	ldr	r2, [pc, #380]	; (8002844 <HAL_DMA_Abort+0x250>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_DMA_Abort+0xda>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_DMA_Abort+0xdc>
 80026ce:	2300      	movs	r3, #0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 021e 	bic.w	r2, r2, #30
 80026e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e00a      	b.n	8002712 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 020e 	bic.w	r2, r2, #14
 800270a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a3c      	ldr	r2, [pc, #240]	; (8002808 <HAL_DMA_Abort+0x214>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d072      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a3a      	ldr	r2, [pc, #232]	; (800280c <HAL_DMA_Abort+0x218>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d06d      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a39      	ldr	r2, [pc, #228]	; (8002810 <HAL_DMA_Abort+0x21c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d068      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a37      	ldr	r2, [pc, #220]	; (8002814 <HAL_DMA_Abort+0x220>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d063      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a36      	ldr	r2, [pc, #216]	; (8002818 <HAL_DMA_Abort+0x224>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d05e      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a34      	ldr	r2, [pc, #208]	; (800281c <HAL_DMA_Abort+0x228>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d059      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a33      	ldr	r2, [pc, #204]	; (8002820 <HAL_DMA_Abort+0x22c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d054      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a31      	ldr	r2, [pc, #196]	; (8002824 <HAL_DMA_Abort+0x230>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d04f      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a30      	ldr	r2, [pc, #192]	; (8002828 <HAL_DMA_Abort+0x234>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d04a      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2e      	ldr	r2, [pc, #184]	; (800282c <HAL_DMA_Abort+0x238>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d045      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2d      	ldr	r2, [pc, #180]	; (8002830 <HAL_DMA_Abort+0x23c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d040      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2b      	ldr	r2, [pc, #172]	; (8002834 <HAL_DMA_Abort+0x240>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d03b      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a2a      	ldr	r2, [pc, #168]	; (8002838 <HAL_DMA_Abort+0x244>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d036      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a28      	ldr	r2, [pc, #160]	; (800283c <HAL_DMA_Abort+0x248>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d031      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a27      	ldr	r2, [pc, #156]	; (8002840 <HAL_DMA_Abort+0x24c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d02c      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a25      	ldr	r2, [pc, #148]	; (8002844 <HAL_DMA_Abort+0x250>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d027      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a24      	ldr	r2, [pc, #144]	; (8002848 <HAL_DMA_Abort+0x254>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d022      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a22      	ldr	r2, [pc, #136]	; (800284c <HAL_DMA_Abort+0x258>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01d      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a21      	ldr	r2, [pc, #132]	; (8002850 <HAL_DMA_Abort+0x25c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d018      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_DMA_Abort+0x260>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1e      	ldr	r2, [pc, #120]	; (8002858 <HAL_DMA_Abort+0x264>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1c      	ldr	r2, [pc, #112]	; (800285c <HAL_DMA_Abort+0x268>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d009      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_DMA_Abort+0x26c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d004      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <HAL_DMA_Abort+0x270>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d132      	bne.n	8002868 <HAL_DMA_Abort+0x274>
 8002802:	2301      	movs	r3, #1
 8002804:	e031      	b.n	800286a <HAL_DMA_Abort+0x276>
 8002806:	bf00      	nop
 8002808:	40020010 	.word	0x40020010
 800280c:	40020028 	.word	0x40020028
 8002810:	40020040 	.word	0x40020040
 8002814:	40020058 	.word	0x40020058
 8002818:	40020070 	.word	0x40020070
 800281c:	40020088 	.word	0x40020088
 8002820:	400200a0 	.word	0x400200a0
 8002824:	400200b8 	.word	0x400200b8
 8002828:	40020410 	.word	0x40020410
 800282c:	40020428 	.word	0x40020428
 8002830:	40020440 	.word	0x40020440
 8002834:	40020458 	.word	0x40020458
 8002838:	40020470 	.word	0x40020470
 800283c:	40020488 	.word	0x40020488
 8002840:	400204a0 	.word	0x400204a0
 8002844:	400204b8 	.word	0x400204b8
 8002848:	58025408 	.word	0x58025408
 800284c:	5802541c 	.word	0x5802541c
 8002850:	58025430 	.word	0x58025430
 8002854:	58025444 	.word	0x58025444
 8002858:	58025458 	.word	0x58025458
 800285c:	5802546c 	.word	0x5802546c
 8002860:	58025480 	.word	0x58025480
 8002864:	58025494 	.word	0x58025494
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800287c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6d      	ldr	r2, [pc, #436]	; (8002a38 <HAL_DMA_Abort+0x444>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d04a      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a6b      	ldr	r2, [pc, #428]	; (8002a3c <HAL_DMA_Abort+0x448>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d045      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6a      	ldr	r2, [pc, #424]	; (8002a40 <HAL_DMA_Abort+0x44c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d040      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a68      	ldr	r2, [pc, #416]	; (8002a44 <HAL_DMA_Abort+0x450>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d03b      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a67      	ldr	r2, [pc, #412]	; (8002a48 <HAL_DMA_Abort+0x454>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d036      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a65      	ldr	r2, [pc, #404]	; (8002a4c <HAL_DMA_Abort+0x458>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d031      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a64      	ldr	r2, [pc, #400]	; (8002a50 <HAL_DMA_Abort+0x45c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d02c      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a62      	ldr	r2, [pc, #392]	; (8002a54 <HAL_DMA_Abort+0x460>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d027      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a61      	ldr	r2, [pc, #388]	; (8002a58 <HAL_DMA_Abort+0x464>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d022      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a5f      	ldr	r2, [pc, #380]	; (8002a5c <HAL_DMA_Abort+0x468>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01d      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a5e      	ldr	r2, [pc, #376]	; (8002a60 <HAL_DMA_Abort+0x46c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d018      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a5c      	ldr	r2, [pc, #368]	; (8002a64 <HAL_DMA_Abort+0x470>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5b      	ldr	r2, [pc, #364]	; (8002a68 <HAL_DMA_Abort+0x474>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00e      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a59      	ldr	r2, [pc, #356]	; (8002a6c <HAL_DMA_Abort+0x478>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d009      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <HAL_DMA_Abort+0x47c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a56      	ldr	r2, [pc, #344]	; (8002a74 <HAL_DMA_Abort+0x480>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d108      	bne.n	8002930 <HAL_DMA_Abort+0x33c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0201 	bic.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e007      	b.n	8002940 <HAL_DMA_Abort+0x34c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002940:	e013      	b.n	800296a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002942:	f7ff f99b 	bl	8001c7c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b05      	cmp	r3, #5
 800294e:	d90c      	bls.n	800296a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2203      	movs	r2, #3
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e12d      	b.n	8002bc6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1e5      	bne.n	8002942 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a2f      	ldr	r2, [pc, #188]	; (8002a38 <HAL_DMA_Abort+0x444>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d04a      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a2d      	ldr	r2, [pc, #180]	; (8002a3c <HAL_DMA_Abort+0x448>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d045      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2c      	ldr	r2, [pc, #176]	; (8002a40 <HAL_DMA_Abort+0x44c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d040      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2a      	ldr	r2, [pc, #168]	; (8002a44 <HAL_DMA_Abort+0x450>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d03b      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <HAL_DMA_Abort+0x454>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d036      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <HAL_DMA_Abort+0x458>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d031      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <HAL_DMA_Abort+0x45c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d02c      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <HAL_DMA_Abort+0x460>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d027      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a23      	ldr	r2, [pc, #140]	; (8002a58 <HAL_DMA_Abort+0x464>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a21      	ldr	r2, [pc, #132]	; (8002a5c <HAL_DMA_Abort+0x468>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01d      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a20      	ldr	r2, [pc, #128]	; (8002a60 <HAL_DMA_Abort+0x46c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d018      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1e      	ldr	r2, [pc, #120]	; (8002a64 <HAL_DMA_Abort+0x470>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <HAL_DMA_Abort+0x474>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00e      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <HAL_DMA_Abort+0x478>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d009      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1a      	ldr	r2, [pc, #104]	; (8002a70 <HAL_DMA_Abort+0x47c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d004      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_DMA_Abort+0x480>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_DMA_Abort+0x426>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_DMA_Abort+0x428>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d02b      	beq.n	8002a78 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	223f      	movs	r2, #63	; 0x3f
 8002a30:	409a      	lsls	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	e02a      	b.n	8002a8e <HAL_DMA_Abort+0x49a>
 8002a38:	40020010 	.word	0x40020010
 8002a3c:	40020028 	.word	0x40020028
 8002a40:	40020040 	.word	0x40020040
 8002a44:	40020058 	.word	0x40020058
 8002a48:	40020070 	.word	0x40020070
 8002a4c:	40020088 	.word	0x40020088
 8002a50:	400200a0 	.word	0x400200a0
 8002a54:	400200b8 	.word	0x400200b8
 8002a58:	40020410 	.word	0x40020410
 8002a5c:	40020428 	.word	0x40020428
 8002a60:	40020440 	.word	0x40020440
 8002a64:	40020458 	.word	0x40020458
 8002a68:	40020470 	.word	0x40020470
 8002a6c:	40020488 	.word	0x40020488
 8002a70:	400204a0 	.word	0x400204a0
 8002a74:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2201      	movs	r2, #1
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a4f      	ldr	r2, [pc, #316]	; (8002bd0 <HAL_DMA_Abort+0x5dc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d072      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	; (8002bd4 <HAL_DMA_Abort+0x5e0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d06d      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a4c      	ldr	r2, [pc, #304]	; (8002bd8 <HAL_DMA_Abort+0x5e4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d068      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a4a      	ldr	r2, [pc, #296]	; (8002bdc <HAL_DMA_Abort+0x5e8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d063      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a49      	ldr	r2, [pc, #292]	; (8002be0 <HAL_DMA_Abort+0x5ec>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d05e      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a47      	ldr	r2, [pc, #284]	; (8002be4 <HAL_DMA_Abort+0x5f0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d059      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a46      	ldr	r2, [pc, #280]	; (8002be8 <HAL_DMA_Abort+0x5f4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d054      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a44      	ldr	r2, [pc, #272]	; (8002bec <HAL_DMA_Abort+0x5f8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d04f      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a43      	ldr	r2, [pc, #268]	; (8002bf0 <HAL_DMA_Abort+0x5fc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d04a      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a41      	ldr	r2, [pc, #260]	; (8002bf4 <HAL_DMA_Abort+0x600>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d045      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a40      	ldr	r2, [pc, #256]	; (8002bf8 <HAL_DMA_Abort+0x604>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d040      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a3e      	ldr	r2, [pc, #248]	; (8002bfc <HAL_DMA_Abort+0x608>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d03b      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a3d      	ldr	r2, [pc, #244]	; (8002c00 <HAL_DMA_Abort+0x60c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d036      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <HAL_DMA_Abort+0x610>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d031      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a3a      	ldr	r2, [pc, #232]	; (8002c08 <HAL_DMA_Abort+0x614>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d02c      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a38      	ldr	r2, [pc, #224]	; (8002c0c <HAL_DMA_Abort+0x618>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d027      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a37      	ldr	r2, [pc, #220]	; (8002c10 <HAL_DMA_Abort+0x61c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d022      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a35      	ldr	r2, [pc, #212]	; (8002c14 <HAL_DMA_Abort+0x620>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01d      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a34      	ldr	r2, [pc, #208]	; (8002c18 <HAL_DMA_Abort+0x624>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d018      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a32      	ldr	r2, [pc, #200]	; (8002c1c <HAL_DMA_Abort+0x628>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a31      	ldr	r2, [pc, #196]	; (8002c20 <HAL_DMA_Abort+0x62c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00e      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2f      	ldr	r2, [pc, #188]	; (8002c24 <HAL_DMA_Abort+0x630>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d009      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2e      	ldr	r2, [pc, #184]	; (8002c28 <HAL_DMA_Abort+0x634>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <HAL_DMA_Abort+0x638>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_DMA_Abort+0x58e>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_DMA_Abort+0x590>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b90:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00c      	beq.n	8002bb4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bb2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40020010 	.word	0x40020010
 8002bd4:	40020028 	.word	0x40020028
 8002bd8:	40020040 	.word	0x40020040
 8002bdc:	40020058 	.word	0x40020058
 8002be0:	40020070 	.word	0x40020070
 8002be4:	40020088 	.word	0x40020088
 8002be8:	400200a0 	.word	0x400200a0
 8002bec:	400200b8 	.word	0x400200b8
 8002bf0:	40020410 	.word	0x40020410
 8002bf4:	40020428 	.word	0x40020428
 8002bf8:	40020440 	.word	0x40020440
 8002bfc:	40020458 	.word	0x40020458
 8002c00:	40020470 	.word	0x40020470
 8002c04:	40020488 	.word	0x40020488
 8002c08:	400204a0 	.word	0x400204a0
 8002c0c:	400204b8 	.word	0x400204b8
 8002c10:	58025408 	.word	0x58025408
 8002c14:	5802541c 	.word	0x5802541c
 8002c18:	58025430 	.word	0x58025430
 8002c1c:	58025444 	.word	0x58025444
 8002c20:	58025458 	.word	0x58025458
 8002c24:	5802546c 	.word	0x5802546c
 8002c28:	58025480 	.word	0x58025480
 8002c2c:	58025494 	.word	0x58025494

08002c30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e237      	b.n	80030b2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d004      	beq.n	8002c58 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e22c      	b.n	80030b2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a5c      	ldr	r2, [pc, #368]	; (8002dd0 <HAL_DMA_Abort_IT+0x1a0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d04a      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a5b      	ldr	r2, [pc, #364]	; (8002dd4 <HAL_DMA_Abort_IT+0x1a4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d045      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a59      	ldr	r2, [pc, #356]	; (8002dd8 <HAL_DMA_Abort_IT+0x1a8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d040      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_DMA_Abort_IT+0x1ac>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d03b      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a56      	ldr	r2, [pc, #344]	; (8002de0 <HAL_DMA_Abort_IT+0x1b0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d036      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a55      	ldr	r2, [pc, #340]	; (8002de4 <HAL_DMA_Abort_IT+0x1b4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d031      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a53      	ldr	r2, [pc, #332]	; (8002de8 <HAL_DMA_Abort_IT+0x1b8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d02c      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_DMA_Abort_IT+0x1bc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d027      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a50      	ldr	r2, [pc, #320]	; (8002df0 <HAL_DMA_Abort_IT+0x1c0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d022      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a4f      	ldr	r2, [pc, #316]	; (8002df4 <HAL_DMA_Abort_IT+0x1c4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d01d      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a4d      	ldr	r2, [pc, #308]	; (8002df8 <HAL_DMA_Abort_IT+0x1c8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d018      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a4c      	ldr	r2, [pc, #304]	; (8002dfc <HAL_DMA_Abort_IT+0x1cc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d013      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	; (8002e00 <HAL_DMA_Abort_IT+0x1d0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00e      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a49      	ldr	r2, [pc, #292]	; (8002e04 <HAL_DMA_Abort_IT+0x1d4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d009      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a47      	ldr	r2, [pc, #284]	; (8002e08 <HAL_DMA_Abort_IT+0x1d8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a46      	ldr	r2, [pc, #280]	; (8002e0c <HAL_DMA_Abort_IT+0x1dc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_DMA_Abort_IT+0xcc>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <HAL_DMA_Abort_IT+0xce>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8086 	beq.w	8002e10 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2204      	movs	r2, #4
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a2f      	ldr	r2, [pc, #188]	; (8002dd0 <HAL_DMA_Abort_IT+0x1a0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d04a      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2e      	ldr	r2, [pc, #184]	; (8002dd4 <HAL_DMA_Abort_IT+0x1a4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d045      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2c      	ldr	r2, [pc, #176]	; (8002dd8 <HAL_DMA_Abort_IT+0x1a8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d040      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2b      	ldr	r2, [pc, #172]	; (8002ddc <HAL_DMA_Abort_IT+0x1ac>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d03b      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a29      	ldr	r2, [pc, #164]	; (8002de0 <HAL_DMA_Abort_IT+0x1b0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d036      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a28      	ldr	r2, [pc, #160]	; (8002de4 <HAL_DMA_Abort_IT+0x1b4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d031      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a26      	ldr	r2, [pc, #152]	; (8002de8 <HAL_DMA_Abort_IT+0x1b8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02c      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a25      	ldr	r2, [pc, #148]	; (8002dec <HAL_DMA_Abort_IT+0x1bc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d027      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a23      	ldr	r2, [pc, #140]	; (8002df0 <HAL_DMA_Abort_IT+0x1c0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d022      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <HAL_DMA_Abort_IT+0x1c4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d01d      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a20      	ldr	r2, [pc, #128]	; (8002df8 <HAL_DMA_Abort_IT+0x1c8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d018      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_DMA_Abort_IT+0x1cc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_DMA_Abort_IT+0x1d0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00e      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_DMA_Abort_IT+0x1d4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d009      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1a      	ldr	r2, [pc, #104]	; (8002e08 <HAL_DMA_Abort_IT+0x1d8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_DMA_Abort_IT+0x1dc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d108      	bne.n	8002dbe <HAL_DMA_Abort_IT+0x18e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e178      	b.n	80030b0 <HAL_DMA_Abort_IT+0x480>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e16f      	b.n	80030b0 <HAL_DMA_Abort_IT+0x480>
 8002dd0:	40020010 	.word	0x40020010
 8002dd4:	40020028 	.word	0x40020028
 8002dd8:	40020040 	.word	0x40020040
 8002ddc:	40020058 	.word	0x40020058
 8002de0:	40020070 	.word	0x40020070
 8002de4:	40020088 	.word	0x40020088
 8002de8:	400200a0 	.word	0x400200a0
 8002dec:	400200b8 	.word	0x400200b8
 8002df0:	40020410 	.word	0x40020410
 8002df4:	40020428 	.word	0x40020428
 8002df8:	40020440 	.word	0x40020440
 8002dfc:	40020458 	.word	0x40020458
 8002e00:	40020470 	.word	0x40020470
 8002e04:	40020488 	.word	0x40020488
 8002e08:	400204a0 	.word	0x400204a0
 8002e0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 020e 	bic.w	r2, r2, #14
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6c      	ldr	r2, [pc, #432]	; (8002fd8 <HAL_DMA_Abort_IT+0x3a8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d04a      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6b      	ldr	r2, [pc, #428]	; (8002fdc <HAL_DMA_Abort_IT+0x3ac>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d045      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a69      	ldr	r2, [pc, #420]	; (8002fe0 <HAL_DMA_Abort_IT+0x3b0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d040      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a68      	ldr	r2, [pc, #416]	; (8002fe4 <HAL_DMA_Abort_IT+0x3b4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d03b      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a66      	ldr	r2, [pc, #408]	; (8002fe8 <HAL_DMA_Abort_IT+0x3b8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d036      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a65      	ldr	r2, [pc, #404]	; (8002fec <HAL_DMA_Abort_IT+0x3bc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d031      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a63      	ldr	r2, [pc, #396]	; (8002ff0 <HAL_DMA_Abort_IT+0x3c0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d02c      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a62      	ldr	r2, [pc, #392]	; (8002ff4 <HAL_DMA_Abort_IT+0x3c4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d027      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a60      	ldr	r2, [pc, #384]	; (8002ff8 <HAL_DMA_Abort_IT+0x3c8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d022      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a5f      	ldr	r2, [pc, #380]	; (8002ffc <HAL_DMA_Abort_IT+0x3cc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d01d      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a5d      	ldr	r2, [pc, #372]	; (8003000 <HAL_DMA_Abort_IT+0x3d0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d018      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a5c      	ldr	r2, [pc, #368]	; (8003004 <HAL_DMA_Abort_IT+0x3d4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5a      	ldr	r2, [pc, #360]	; (8003008 <HAL_DMA_Abort_IT+0x3d8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00e      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a59      	ldr	r2, [pc, #356]	; (800300c <HAL_DMA_Abort_IT+0x3dc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a57      	ldr	r2, [pc, #348]	; (8003010 <HAL_DMA_Abort_IT+0x3e0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a56      	ldr	r2, [pc, #344]	; (8003014 <HAL_DMA_Abort_IT+0x3e4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d108      	bne.n	8002ed2 <HAL_DMA_Abort_IT+0x2a2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e007      	b.n	8002ee2 <HAL_DMA_Abort_IT+0x2b2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a3c      	ldr	r2, [pc, #240]	; (8002fd8 <HAL_DMA_Abort_IT+0x3a8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d072      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a3a      	ldr	r2, [pc, #232]	; (8002fdc <HAL_DMA_Abort_IT+0x3ac>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d06d      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a39      	ldr	r2, [pc, #228]	; (8002fe0 <HAL_DMA_Abort_IT+0x3b0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d068      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a37      	ldr	r2, [pc, #220]	; (8002fe4 <HAL_DMA_Abort_IT+0x3b4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d063      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a36      	ldr	r2, [pc, #216]	; (8002fe8 <HAL_DMA_Abort_IT+0x3b8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d05e      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a34      	ldr	r2, [pc, #208]	; (8002fec <HAL_DMA_Abort_IT+0x3bc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d059      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a33      	ldr	r2, [pc, #204]	; (8002ff0 <HAL_DMA_Abort_IT+0x3c0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d054      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a31      	ldr	r2, [pc, #196]	; (8002ff4 <HAL_DMA_Abort_IT+0x3c4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d04f      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a30      	ldr	r2, [pc, #192]	; (8002ff8 <HAL_DMA_Abort_IT+0x3c8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d04a      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2e      	ldr	r2, [pc, #184]	; (8002ffc <HAL_DMA_Abort_IT+0x3cc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d045      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a2d      	ldr	r2, [pc, #180]	; (8003000 <HAL_DMA_Abort_IT+0x3d0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d040      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a2b      	ldr	r2, [pc, #172]	; (8003004 <HAL_DMA_Abort_IT+0x3d4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d03b      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <HAL_DMA_Abort_IT+0x3d8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d036      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a28      	ldr	r2, [pc, #160]	; (800300c <HAL_DMA_Abort_IT+0x3dc>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d031      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a27      	ldr	r2, [pc, #156]	; (8003010 <HAL_DMA_Abort_IT+0x3e0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d02c      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a25      	ldr	r2, [pc, #148]	; (8003014 <HAL_DMA_Abort_IT+0x3e4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d027      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a24      	ldr	r2, [pc, #144]	; (8003018 <HAL_DMA_Abort_IT+0x3e8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d022      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a22      	ldr	r2, [pc, #136]	; (800301c <HAL_DMA_Abort_IT+0x3ec>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01d      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a21      	ldr	r2, [pc, #132]	; (8003020 <HAL_DMA_Abort_IT+0x3f0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	; (8003024 <HAL_DMA_Abort_IT+0x3f4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1e      	ldr	r2, [pc, #120]	; (8003028 <HAL_DMA_Abort_IT+0x3f8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_DMA_Abort_IT+0x3fc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <HAL_DMA_Abort_IT+0x400>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a19      	ldr	r2, [pc, #100]	; (8003034 <HAL_DMA_Abort_IT+0x404>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d132      	bne.n	8003038 <HAL_DMA_Abort_IT+0x408>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e031      	b.n	800303a <HAL_DMA_Abort_IT+0x40a>
 8002fd6:	bf00      	nop
 8002fd8:	40020010 	.word	0x40020010
 8002fdc:	40020028 	.word	0x40020028
 8002fe0:	40020040 	.word	0x40020040
 8002fe4:	40020058 	.word	0x40020058
 8002fe8:	40020070 	.word	0x40020070
 8002fec:	40020088 	.word	0x40020088
 8002ff0:	400200a0 	.word	0x400200a0
 8002ff4:	400200b8 	.word	0x400200b8
 8002ff8:	40020410 	.word	0x40020410
 8002ffc:	40020428 	.word	0x40020428
 8003000:	40020440 	.word	0x40020440
 8003004:	40020458 	.word	0x40020458
 8003008:	40020470 	.word	0x40020470
 800300c:	40020488 	.word	0x40020488
 8003010:	400204a0 	.word	0x400204a0
 8003014:	400204b8 	.word	0x400204b8
 8003018:	58025408 	.word	0x58025408
 800301c:	5802541c 	.word	0x5802541c
 8003020:	58025430 	.word	0x58025430
 8003024:	58025444 	.word	0x58025444
 8003028:	58025458 	.word	0x58025458
 800302c:	5802546c 	.word	0x5802546c
 8003030:	58025480 	.word	0x58025480
 8003034:	58025494 	.word	0x58025494
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d028      	beq.n	8003090 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800304c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003052:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2201      	movs	r2, #1
 800305e:	409a      	lsls	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800306c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003084:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800308e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop

080030bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030c8:	4b67      	ldr	r3, [pc, #412]	; (8003268 <HAL_DMA_IRQHandler+0x1ac>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a67      	ldr	r2, [pc, #412]	; (800326c <HAL_DMA_IRQHandler+0x1b0>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0a9b      	lsrs	r3, r3, #10
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a5f      	ldr	r2, [pc, #380]	; (8003270 <HAL_DMA_IRQHandler+0x1b4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d04a      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a5d      	ldr	r2, [pc, #372]	; (8003274 <HAL_DMA_IRQHandler+0x1b8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d045      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5c      	ldr	r2, [pc, #368]	; (8003278 <HAL_DMA_IRQHandler+0x1bc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d040      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a5a      	ldr	r2, [pc, #360]	; (800327c <HAL_DMA_IRQHandler+0x1c0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d03b      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a59      	ldr	r2, [pc, #356]	; (8003280 <HAL_DMA_IRQHandler+0x1c4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d036      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a57      	ldr	r2, [pc, #348]	; (8003284 <HAL_DMA_IRQHandler+0x1c8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d031      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a56      	ldr	r2, [pc, #344]	; (8003288 <HAL_DMA_IRQHandler+0x1cc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d02c      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a54      	ldr	r2, [pc, #336]	; (800328c <HAL_DMA_IRQHandler+0x1d0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d027      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a53      	ldr	r2, [pc, #332]	; (8003290 <HAL_DMA_IRQHandler+0x1d4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a51      	ldr	r2, [pc, #324]	; (8003294 <HAL_DMA_IRQHandler+0x1d8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01d      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a50      	ldr	r2, [pc, #320]	; (8003298 <HAL_DMA_IRQHandler+0x1dc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d018      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a4e      	ldr	r2, [pc, #312]	; (800329c <HAL_DMA_IRQHandler+0x1e0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a4d      	ldr	r2, [pc, #308]	; (80032a0 <HAL_DMA_IRQHandler+0x1e4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a4b      	ldr	r2, [pc, #300]	; (80032a4 <HAL_DMA_IRQHandler+0x1e8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a4a      	ldr	r2, [pc, #296]	; (80032a8 <HAL_DMA_IRQHandler+0x1ec>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a48      	ldr	r2, [pc, #288]	; (80032ac <HAL_DMA_IRQHandler+0x1f0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d101      	bne.n	8003192 <HAL_DMA_IRQHandler+0xd6>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_DMA_IRQHandler+0xd8>
 8003192:	2300      	movs	r3, #0
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 842b 	beq.w	80039f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2208      	movs	r2, #8
 80031a4:	409a      	lsls	r2, r3
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80a2 	beq.w	80032f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2e      	ldr	r2, [pc, #184]	; (8003270 <HAL_DMA_IRQHandler+0x1b4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d04a      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2d      	ldr	r2, [pc, #180]	; (8003274 <HAL_DMA_IRQHandler+0x1b8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d045      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a2b      	ldr	r2, [pc, #172]	; (8003278 <HAL_DMA_IRQHandler+0x1bc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d040      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a2a      	ldr	r2, [pc, #168]	; (800327c <HAL_DMA_IRQHandler+0x1c0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d03b      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a28      	ldr	r2, [pc, #160]	; (8003280 <HAL_DMA_IRQHandler+0x1c4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d036      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a27      	ldr	r2, [pc, #156]	; (8003284 <HAL_DMA_IRQHandler+0x1c8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d031      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a25      	ldr	r2, [pc, #148]	; (8003288 <HAL_DMA_IRQHandler+0x1cc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d02c      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a24      	ldr	r2, [pc, #144]	; (800328c <HAL_DMA_IRQHandler+0x1d0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d027      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a22      	ldr	r2, [pc, #136]	; (8003290 <HAL_DMA_IRQHandler+0x1d4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d022      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a21      	ldr	r2, [pc, #132]	; (8003294 <HAL_DMA_IRQHandler+0x1d8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d01d      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <HAL_DMA_IRQHandler+0x1dc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d018      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1e      	ldr	r2, [pc, #120]	; (800329c <HAL_DMA_IRQHandler+0x1e0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <HAL_DMA_IRQHandler+0x1e4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1b      	ldr	r2, [pc, #108]	; (80032a4 <HAL_DMA_IRQHandler+0x1e8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_DMA_IRQHandler+0x1ec>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a18      	ldr	r2, [pc, #96]	; (80032ac <HAL_DMA_IRQHandler+0x1f0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d12f      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x1f4>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e02e      	b.n	80032c4 <HAL_DMA_IRQHandler+0x208>
 8003266:	bf00      	nop
 8003268:	24000000 	.word	0x24000000
 800326c:	1b4e81b5 	.word	0x1b4e81b5
 8003270:	40020010 	.word	0x40020010
 8003274:	40020028 	.word	0x40020028
 8003278:	40020040 	.word	0x40020040
 800327c:	40020058 	.word	0x40020058
 8003280:	40020070 	.word	0x40020070
 8003284:	40020088 	.word	0x40020088
 8003288:	400200a0 	.word	0x400200a0
 800328c:	400200b8 	.word	0x400200b8
 8003290:	40020410 	.word	0x40020410
 8003294:	40020428 	.word	0x40020428
 8003298:	40020440 	.word	0x40020440
 800329c:	40020458 	.word	0x40020458
 80032a0:	40020470 	.word	0x40020470
 80032a4:	40020488 	.word	0x40020488
 80032a8:	400204a0 	.word	0x400204a0
 80032ac:	400204b8 	.word	0x400204b8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bf14      	ite	ne
 80032be:	2301      	movne	r3, #1
 80032c0:	2300      	moveq	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d015      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0204 	bic.w	r2, r2, #4
 80032d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2208      	movs	r2, #8
 80032e2:	409a      	lsls	r2, r3
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d06e      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a69      	ldr	r2, [pc, #420]	; (80034b4 <HAL_DMA_IRQHandler+0x3f8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d04a      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a67      	ldr	r2, [pc, #412]	; (80034b8 <HAL_DMA_IRQHandler+0x3fc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d045      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a66      	ldr	r2, [pc, #408]	; (80034bc <HAL_DMA_IRQHandler+0x400>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d040      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a64      	ldr	r2, [pc, #400]	; (80034c0 <HAL_DMA_IRQHandler+0x404>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d03b      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a63      	ldr	r2, [pc, #396]	; (80034c4 <HAL_DMA_IRQHandler+0x408>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d036      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a61      	ldr	r2, [pc, #388]	; (80034c8 <HAL_DMA_IRQHandler+0x40c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d031      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a60      	ldr	r2, [pc, #384]	; (80034cc <HAL_DMA_IRQHandler+0x410>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d02c      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a5e      	ldr	r2, [pc, #376]	; (80034d0 <HAL_DMA_IRQHandler+0x414>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d027      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a5d      	ldr	r2, [pc, #372]	; (80034d4 <HAL_DMA_IRQHandler+0x418>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d022      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a5b      	ldr	r2, [pc, #364]	; (80034d8 <HAL_DMA_IRQHandler+0x41c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01d      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a5a      	ldr	r2, [pc, #360]	; (80034dc <HAL_DMA_IRQHandler+0x420>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d018      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a58      	ldr	r2, [pc, #352]	; (80034e0 <HAL_DMA_IRQHandler+0x424>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a57      	ldr	r2, [pc, #348]	; (80034e4 <HAL_DMA_IRQHandler+0x428>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00e      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a55      	ldr	r2, [pc, #340]	; (80034e8 <HAL_DMA_IRQHandler+0x42c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d009      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a54      	ldr	r2, [pc, #336]	; (80034ec <HAL_DMA_IRQHandler+0x430>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d004      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a52      	ldr	r2, [pc, #328]	; (80034f0 <HAL_DMA_IRQHandler+0x434>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d10a      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x304>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf14      	ite	ne
 80033b8:	2301      	movne	r3, #1
 80033ba:	2300      	moveq	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e003      	b.n	80033c8 <HAL_DMA_IRQHandler+0x30c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2201      	movs	r2, #1
 80033d6:	409a      	lsls	r2, r3
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	f043 0202 	orr.w	r2, r3, #2
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2204      	movs	r2, #4
 80033f2:	409a      	lsls	r2, r3
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 808f 	beq.w	800351c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <HAL_DMA_IRQHandler+0x3f8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d04a      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <HAL_DMA_IRQHandler+0x3fc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d045      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a29      	ldr	r2, [pc, #164]	; (80034bc <HAL_DMA_IRQHandler+0x400>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d040      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a27      	ldr	r2, [pc, #156]	; (80034c0 <HAL_DMA_IRQHandler+0x404>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d03b      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <HAL_DMA_IRQHandler+0x408>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d036      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <HAL_DMA_IRQHandler+0x40c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d031      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a23      	ldr	r2, [pc, #140]	; (80034cc <HAL_DMA_IRQHandler+0x410>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d02c      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <HAL_DMA_IRQHandler+0x414>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d027      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <HAL_DMA_IRQHandler+0x418>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d022      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <HAL_DMA_IRQHandler+0x41c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01d      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_DMA_IRQHandler+0x420>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d018      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <HAL_DMA_IRQHandler+0x424>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <HAL_DMA_IRQHandler+0x428>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00e      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <HAL_DMA_IRQHandler+0x42c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d009      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a17      	ldr	r2, [pc, #92]	; (80034ec <HAL_DMA_IRQHandler+0x430>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a15      	ldr	r2, [pc, #84]	; (80034f0 <HAL_DMA_IRQHandler+0x434>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d12a      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x438>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	e023      	b.n	80034fc <HAL_DMA_IRQHandler+0x440>
 80034b4:	40020010 	.word	0x40020010
 80034b8:	40020028 	.word	0x40020028
 80034bc:	40020040 	.word	0x40020040
 80034c0:	40020058 	.word	0x40020058
 80034c4:	40020070 	.word	0x40020070
 80034c8:	40020088 	.word	0x40020088
 80034cc:	400200a0 	.word	0x400200a0
 80034d0:	400200b8 	.word	0x400200b8
 80034d4:	40020410 	.word	0x40020410
 80034d8:	40020428 	.word	0x40020428
 80034dc:	40020440 	.word	0x40020440
 80034e0:	40020458 	.word	0x40020458
 80034e4:	40020470 	.word	0x40020470
 80034e8:	40020488 	.word	0x40020488
 80034ec:	400204a0 	.word	0x400204a0
 80034f0:	400204b8 	.word	0x400204b8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2300      	movs	r3, #0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2204      	movs	r2, #4
 800350a:	409a      	lsls	r2, r3
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	f043 0204 	orr.w	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	2210      	movs	r2, #16
 8003526:	409a      	lsls	r2, r3
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80a6 	beq.w	800367e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a85      	ldr	r2, [pc, #532]	; (800374c <HAL_DMA_IRQHandler+0x690>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d04a      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a83      	ldr	r2, [pc, #524]	; (8003750 <HAL_DMA_IRQHandler+0x694>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d045      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a82      	ldr	r2, [pc, #520]	; (8003754 <HAL_DMA_IRQHandler+0x698>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d040      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a80      	ldr	r2, [pc, #512]	; (8003758 <HAL_DMA_IRQHandler+0x69c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d03b      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a7f      	ldr	r2, [pc, #508]	; (800375c <HAL_DMA_IRQHandler+0x6a0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d036      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a7d      	ldr	r2, [pc, #500]	; (8003760 <HAL_DMA_IRQHandler+0x6a4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d031      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7c      	ldr	r2, [pc, #496]	; (8003764 <HAL_DMA_IRQHandler+0x6a8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d02c      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a7a      	ldr	r2, [pc, #488]	; (8003768 <HAL_DMA_IRQHandler+0x6ac>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d027      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a79      	ldr	r2, [pc, #484]	; (800376c <HAL_DMA_IRQHandler+0x6b0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d022      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a77      	ldr	r2, [pc, #476]	; (8003770 <HAL_DMA_IRQHandler+0x6b4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01d      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a76      	ldr	r2, [pc, #472]	; (8003774 <HAL_DMA_IRQHandler+0x6b8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d018      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a74      	ldr	r2, [pc, #464]	; (8003778 <HAL_DMA_IRQHandler+0x6bc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a73      	ldr	r2, [pc, #460]	; (800377c <HAL_DMA_IRQHandler+0x6c0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00e      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a71      	ldr	r2, [pc, #452]	; (8003780 <HAL_DMA_IRQHandler+0x6c4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d009      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a70      	ldr	r2, [pc, #448]	; (8003784 <HAL_DMA_IRQHandler+0x6c8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d004      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a6e      	ldr	r2, [pc, #440]	; (8003788 <HAL_DMA_IRQHandler+0x6cc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d10a      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x52c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e009      	b.n	80035fc <HAL_DMA_IRQHandler+0x540>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d03e      	beq.n	800367e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2210      	movs	r2, #16
 800360a:	409a      	lsls	r2, r3
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d018      	beq.n	8003650 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d108      	bne.n	800363e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d024      	beq.n	800367e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
 800363c:	e01f      	b.n	800367e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01b      	beq.n	800367e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
 800364e:	e016      	b.n	800367e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d107      	bne.n	800366e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0208 	bic.w	r2, r2, #8
 800366c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	2220      	movs	r2, #32
 8003688:	409a      	lsls	r2, r3
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8110 	beq.w	80038b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2c      	ldr	r2, [pc, #176]	; (800374c <HAL_DMA_IRQHandler+0x690>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d04a      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2b      	ldr	r2, [pc, #172]	; (8003750 <HAL_DMA_IRQHandler+0x694>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d045      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a29      	ldr	r2, [pc, #164]	; (8003754 <HAL_DMA_IRQHandler+0x698>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d040      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a28      	ldr	r2, [pc, #160]	; (8003758 <HAL_DMA_IRQHandler+0x69c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d03b      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a26      	ldr	r2, [pc, #152]	; (800375c <HAL_DMA_IRQHandler+0x6a0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d036      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a25      	ldr	r2, [pc, #148]	; (8003760 <HAL_DMA_IRQHandler+0x6a4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d031      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a23      	ldr	r2, [pc, #140]	; (8003764 <HAL_DMA_IRQHandler+0x6a8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d02c      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a22      	ldr	r2, [pc, #136]	; (8003768 <HAL_DMA_IRQHandler+0x6ac>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d027      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a20      	ldr	r2, [pc, #128]	; (800376c <HAL_DMA_IRQHandler+0x6b0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d022      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <HAL_DMA_IRQHandler+0x6b4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d01d      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <HAL_DMA_IRQHandler+0x6b8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d018      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <HAL_DMA_IRQHandler+0x6bc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1a      	ldr	r2, [pc, #104]	; (800377c <HAL_DMA_IRQHandler+0x6c0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00e      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a19      	ldr	r2, [pc, #100]	; (8003780 <HAL_DMA_IRQHandler+0x6c4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a17      	ldr	r2, [pc, #92]	; (8003784 <HAL_DMA_IRQHandler+0x6c8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a16      	ldr	r2, [pc, #88]	; (8003788 <HAL_DMA_IRQHandler+0x6cc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d12b      	bne.n	800378c <HAL_DMA_IRQHandler+0x6d0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	bf14      	ite	ne
 8003742:	2301      	movne	r3, #1
 8003744:	2300      	moveq	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	e02a      	b.n	80037a0 <HAL_DMA_IRQHandler+0x6e4>
 800374a:	bf00      	nop
 800374c:	40020010 	.word	0x40020010
 8003750:	40020028 	.word	0x40020028
 8003754:	40020040 	.word	0x40020040
 8003758:	40020058 	.word	0x40020058
 800375c:	40020070 	.word	0x40020070
 8003760:	40020088 	.word	0x40020088
 8003764:	400200a0 	.word	0x400200a0
 8003768:	400200b8 	.word	0x400200b8
 800376c:	40020410 	.word	0x40020410
 8003770:	40020428 	.word	0x40020428
 8003774:	40020440 	.word	0x40020440
 8003778:	40020458 	.word	0x40020458
 800377c:	40020470 	.word	0x40020470
 8003780:	40020488 	.word	0x40020488
 8003784:	400204a0 	.word	0x400204a0
 8003788:	400204b8 	.word	0x400204b8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8087 	beq.w	80038b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	2220      	movs	r2, #32
 80037b0:	409a      	lsls	r2, r3
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d139      	bne.n	8003836 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0216 	bic.w	r2, r2, #22
 80037d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <HAL_DMA_IRQHandler+0x736>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0208 	bic.w	r2, r2, #8
 8003800:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	223f      	movs	r2, #63	; 0x3f
 800380c:	409a      	lsls	r2, r3
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 834a 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
          }
          return;
 8003834:	e344      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d018      	beq.n	8003876 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	2b00      	cmp	r3, #0
 8003858:	d02c      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
 8003862:	e027      	b.n	80038b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d023      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
 8003874:	e01e      	b.n	80038b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10f      	bne.n	80038a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0210 	bic.w	r2, r2, #16
 8003892:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8306 	beq.w	8003eca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8088 	beq.w	80039dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2204      	movs	r2, #4
 80038d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a7a      	ldr	r2, [pc, #488]	; (8003ac4 <HAL_DMA_IRQHandler+0xa08>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d04a      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a79      	ldr	r2, [pc, #484]	; (8003ac8 <HAL_DMA_IRQHandler+0xa0c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d045      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a77      	ldr	r2, [pc, #476]	; (8003acc <HAL_DMA_IRQHandler+0xa10>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d040      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a76      	ldr	r2, [pc, #472]	; (8003ad0 <HAL_DMA_IRQHandler+0xa14>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d03b      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a74      	ldr	r2, [pc, #464]	; (8003ad4 <HAL_DMA_IRQHandler+0xa18>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d036      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a73      	ldr	r2, [pc, #460]	; (8003ad8 <HAL_DMA_IRQHandler+0xa1c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d031      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a71      	ldr	r2, [pc, #452]	; (8003adc <HAL_DMA_IRQHandler+0xa20>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02c      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a70      	ldr	r2, [pc, #448]	; (8003ae0 <HAL_DMA_IRQHandler+0xa24>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d027      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6e      	ldr	r2, [pc, #440]	; (8003ae4 <HAL_DMA_IRQHandler+0xa28>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d022      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a6d      	ldr	r2, [pc, #436]	; (8003ae8 <HAL_DMA_IRQHandler+0xa2c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d01d      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a6b      	ldr	r2, [pc, #428]	; (8003aec <HAL_DMA_IRQHandler+0xa30>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a6a      	ldr	r2, [pc, #424]	; (8003af0 <HAL_DMA_IRQHandler+0xa34>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a68      	ldr	r2, [pc, #416]	; (8003af4 <HAL_DMA_IRQHandler+0xa38>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a67      	ldr	r2, [pc, #412]	; (8003af8 <HAL_DMA_IRQHandler+0xa3c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a65      	ldr	r2, [pc, #404]	; (8003afc <HAL_DMA_IRQHandler+0xa40>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a64      	ldr	r2, [pc, #400]	; (8003b00 <HAL_DMA_IRQHandler+0xa44>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d108      	bne.n	8003986 <HAL_DMA_IRQHandler+0x8ca>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e007      	b.n	8003996 <HAL_DMA_IRQHandler+0x8da>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3301      	adds	r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	429a      	cmp	r2, r3
 80039a0:	d307      	bcc.n	80039b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f2      	bne.n	8003996 <HAL_DMA_IRQHandler+0x8da>
 80039b0:	e000      	b.n	80039b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80039b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2203      	movs	r2, #3
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80039ca:	e003      	b.n	80039d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8272 	beq.w	8003eca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
 80039ee:	e26c      	b.n	8003eca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a43      	ldr	r2, [pc, #268]	; (8003b04 <HAL_DMA_IRQHandler+0xa48>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d022      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a42      	ldr	r2, [pc, #264]	; (8003b08 <HAL_DMA_IRQHandler+0xa4c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d01d      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a40      	ldr	r2, [pc, #256]	; (8003b0c <HAL_DMA_IRQHandler+0xa50>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d018      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a3f      	ldr	r2, [pc, #252]	; (8003b10 <HAL_DMA_IRQHandler+0xa54>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d013      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a3d      	ldr	r2, [pc, #244]	; (8003b14 <HAL_DMA_IRQHandler+0xa58>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00e      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a3c      	ldr	r2, [pc, #240]	; (8003b18 <HAL_DMA_IRQHandler+0xa5c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d009      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a3a      	ldr	r2, [pc, #232]	; (8003b1c <HAL_DMA_IRQHandler+0xa60>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a39      	ldr	r2, [pc, #228]	; (8003b20 <HAL_DMA_IRQHandler+0xa64>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d101      	bne.n	8003a44 <HAL_DMA_IRQHandler+0x988>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_DMA_IRQHandler+0x98a>
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 823f 	beq.w	8003eca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80cd 	beq.w	8003c04 <HAL_DMA_IRQHandler+0xb48>
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80c7 	beq.w	8003c04 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2204      	movs	r2, #4
 8003a80:	409a      	lsls	r2, r3
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d049      	beq.n	8003b24 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8210 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aac:	e20a      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8206 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ac0:	e200      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xe08>
 8003ac2:	bf00      	nop
 8003ac4:	40020010 	.word	0x40020010
 8003ac8:	40020028 	.word	0x40020028
 8003acc:	40020040 	.word	0x40020040
 8003ad0:	40020058 	.word	0x40020058
 8003ad4:	40020070 	.word	0x40020070
 8003ad8:	40020088 	.word	0x40020088
 8003adc:	400200a0 	.word	0x400200a0
 8003ae0:	400200b8 	.word	0x400200b8
 8003ae4:	40020410 	.word	0x40020410
 8003ae8:	40020428 	.word	0x40020428
 8003aec:	40020440 	.word	0x40020440
 8003af0:	40020458 	.word	0x40020458
 8003af4:	40020470 	.word	0x40020470
 8003af8:	40020488 	.word	0x40020488
 8003afc:	400204a0 	.word	0x400204a0
 8003b00:	400204b8 	.word	0x400204b8
 8003b04:	58025408 	.word	0x58025408
 8003b08:	5802541c 	.word	0x5802541c
 8003b0c:	58025430 	.word	0x58025430
 8003b10:	58025444 	.word	0x58025444
 8003b14:	58025458 	.word	0x58025458
 8003b18:	5802546c 	.word	0x5802546c
 8003b1c:	58025480 	.word	0x58025480
 8003b20:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d160      	bne.n	8003bf0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a7f      	ldr	r2, [pc, #508]	; (8003d30 <HAL_DMA_IRQHandler+0xc74>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d04a      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a7d      	ldr	r2, [pc, #500]	; (8003d34 <HAL_DMA_IRQHandler+0xc78>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d045      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a7c      	ldr	r2, [pc, #496]	; (8003d38 <HAL_DMA_IRQHandler+0xc7c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d040      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a7a      	ldr	r2, [pc, #488]	; (8003d3c <HAL_DMA_IRQHandler+0xc80>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d03b      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a79      	ldr	r2, [pc, #484]	; (8003d40 <HAL_DMA_IRQHandler+0xc84>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d036      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a77      	ldr	r2, [pc, #476]	; (8003d44 <HAL_DMA_IRQHandler+0xc88>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d031      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a76      	ldr	r2, [pc, #472]	; (8003d48 <HAL_DMA_IRQHandler+0xc8c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d02c      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a74      	ldr	r2, [pc, #464]	; (8003d4c <HAL_DMA_IRQHandler+0xc90>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d027      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a73      	ldr	r2, [pc, #460]	; (8003d50 <HAL_DMA_IRQHandler+0xc94>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d022      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a71      	ldr	r2, [pc, #452]	; (8003d54 <HAL_DMA_IRQHandler+0xc98>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01d      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a70      	ldr	r2, [pc, #448]	; (8003d58 <HAL_DMA_IRQHandler+0xc9c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d018      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a6e      	ldr	r2, [pc, #440]	; (8003d5c <HAL_DMA_IRQHandler+0xca0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6d      	ldr	r2, [pc, #436]	; (8003d60 <HAL_DMA_IRQHandler+0xca4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00e      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6b      	ldr	r2, [pc, #428]	; (8003d64 <HAL_DMA_IRQHandler+0xca8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d009      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6a      	ldr	r2, [pc, #424]	; (8003d68 <HAL_DMA_IRQHandler+0xcac>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d004      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a68      	ldr	r2, [pc, #416]	; (8003d6c <HAL_DMA_IRQHandler+0xcb0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d108      	bne.n	8003be0 <HAL_DMA_IRQHandler+0xb24>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0208 	bic.w	r2, r2, #8
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e007      	b.n	8003bf0 <HAL_DMA_IRQHandler+0xb34>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0204 	bic.w	r2, r2, #4
 8003bee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8165 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c02:	e15f      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80c5 	beq.w	8003da4 <HAL_DMA_IRQHandler+0xce8>
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80bf 	beq.w	8003da4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	2202      	movs	r2, #2
 8003c30:	409a      	lsls	r2, r3
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d018      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 813a 	beq.w	8003ec8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c5c:	e134      	b.n	8003ec8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8130 	beq.w	8003ec8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c70:	e12a      	b.n	8003ec8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f040 8089 	bne.w	8003d90 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2b      	ldr	r2, [pc, #172]	; (8003d30 <HAL_DMA_IRQHandler+0xc74>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d04a      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a29      	ldr	r2, [pc, #164]	; (8003d34 <HAL_DMA_IRQHandler+0xc78>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d045      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a28      	ldr	r2, [pc, #160]	; (8003d38 <HAL_DMA_IRQHandler+0xc7c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d040      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <HAL_DMA_IRQHandler+0xc80>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d03b      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a25      	ldr	r2, [pc, #148]	; (8003d40 <HAL_DMA_IRQHandler+0xc84>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d036      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a23      	ldr	r2, [pc, #140]	; (8003d44 <HAL_DMA_IRQHandler+0xc88>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d031      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <HAL_DMA_IRQHandler+0xc8c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d02c      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <HAL_DMA_IRQHandler+0xc90>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d027      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <HAL_DMA_IRQHandler+0xc94>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d022      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1d      	ldr	r2, [pc, #116]	; (8003d54 <HAL_DMA_IRQHandler+0xc98>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01d      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1c      	ldr	r2, [pc, #112]	; (8003d58 <HAL_DMA_IRQHandler+0xc9c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d018      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <HAL_DMA_IRQHandler+0xca0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a19      	ldr	r2, [pc, #100]	; (8003d60 <HAL_DMA_IRQHandler+0xca4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <HAL_DMA_IRQHandler+0xca8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d009      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <HAL_DMA_IRQHandler+0xcac>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <HAL_DMA_IRQHandler+0xcb0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d128      	bne.n	8003d70 <HAL_DMA_IRQHandler+0xcb4>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0214 	bic.w	r2, r2, #20
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e027      	b.n	8003d80 <HAL_DMA_IRQHandler+0xcc4>
 8003d30:	40020010 	.word	0x40020010
 8003d34:	40020028 	.word	0x40020028
 8003d38:	40020040 	.word	0x40020040
 8003d3c:	40020058 	.word	0x40020058
 8003d40:	40020070 	.word	0x40020070
 8003d44:	40020088 	.word	0x40020088
 8003d48:	400200a0 	.word	0x400200a0
 8003d4c:	400200b8 	.word	0x400200b8
 8003d50:	40020410 	.word	0x40020410
 8003d54:	40020428 	.word	0x40020428
 8003d58:	40020440 	.word	0x40020440
 8003d5c:	40020458 	.word	0x40020458
 8003d60:	40020470 	.word	0x40020470
 8003d64:	40020488 	.word	0x40020488
 8003d68:	400204a0 	.word	0x400204a0
 8003d6c:	400204b8 	.word	0x400204b8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 020a 	bic.w	r2, r2, #10
 8003d7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8097 	beq.w	8003ec8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da2:	e091      	b.n	8003ec8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	2208      	movs	r2, #8
 8003dae:	409a      	lsls	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8088 	beq.w	8003eca <HAL_DMA_IRQHandler+0xe0e>
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8082 	beq.w	8003eca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a41      	ldr	r2, [pc, #260]	; (8003ed0 <HAL_DMA_IRQHandler+0xe14>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d04a      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a3f      	ldr	r2, [pc, #252]	; (8003ed4 <HAL_DMA_IRQHandler+0xe18>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d045      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a3e      	ldr	r2, [pc, #248]	; (8003ed8 <HAL_DMA_IRQHandler+0xe1c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d040      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a3c      	ldr	r2, [pc, #240]	; (8003edc <HAL_DMA_IRQHandler+0xe20>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d03b      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a3b      	ldr	r2, [pc, #236]	; (8003ee0 <HAL_DMA_IRQHandler+0xe24>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d036      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a39      	ldr	r2, [pc, #228]	; (8003ee4 <HAL_DMA_IRQHandler+0xe28>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d031      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a38      	ldr	r2, [pc, #224]	; (8003ee8 <HAL_DMA_IRQHandler+0xe2c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d02c      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a36      	ldr	r2, [pc, #216]	; (8003eec <HAL_DMA_IRQHandler+0xe30>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d027      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a35      	ldr	r2, [pc, #212]	; (8003ef0 <HAL_DMA_IRQHandler+0xe34>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d022      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a33      	ldr	r2, [pc, #204]	; (8003ef4 <HAL_DMA_IRQHandler+0xe38>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d01d      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a32      	ldr	r2, [pc, #200]	; (8003ef8 <HAL_DMA_IRQHandler+0xe3c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d018      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a30      	ldr	r2, [pc, #192]	; (8003efc <HAL_DMA_IRQHandler+0xe40>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d013      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2f      	ldr	r2, [pc, #188]	; (8003f00 <HAL_DMA_IRQHandler+0xe44>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00e      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2d      	ldr	r2, [pc, #180]	; (8003f04 <HAL_DMA_IRQHandler+0xe48>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d009      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2c      	ldr	r2, [pc, #176]	; (8003f08 <HAL_DMA_IRQHandler+0xe4c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2a      	ldr	r2, [pc, #168]	; (8003f0c <HAL_DMA_IRQHandler+0xe50>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d108      	bne.n	8003e78 <HAL_DMA_IRQHandler+0xdbc>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 021c 	bic.w	r2, r2, #28
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e007      	b.n	8003e88 <HAL_DMA_IRQHandler+0xdcc>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 020e 	bic.w	r2, r2, #14
 8003e86:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2201      	movs	r2, #1
 8003e92:	409a      	lsls	r2, r3
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
 8003ebe:	e004      	b.n	8003eca <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ec0:	bf00      	nop
 8003ec2:	e002      	b.n	8003eca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec4:	bf00      	nop
 8003ec6:	e000      	b.n	8003eca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003eca:	3728      	adds	r7, #40	; 0x28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40020010 	.word	0x40020010
 8003ed4:	40020028 	.word	0x40020028
 8003ed8:	40020040 	.word	0x40020040
 8003edc:	40020058 	.word	0x40020058
 8003ee0:	40020070 	.word	0x40020070
 8003ee4:	40020088 	.word	0x40020088
 8003ee8:	400200a0 	.word	0x400200a0
 8003eec:	400200b8 	.word	0x400200b8
 8003ef0:	40020410 	.word	0x40020410
 8003ef4:	40020428 	.word	0x40020428
 8003ef8:	40020440 	.word	0x40020440
 8003efc:	40020458 	.word	0x40020458
 8003f00:	40020470 	.word	0x40020470
 8003f04:	40020488 	.word	0x40020488
 8003f08:	400204a0 	.word	0x400204a0
 8003f0c:	400204b8 	.word	0x400204b8

08003f10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a42      	ldr	r2, [pc, #264]	; (8004028 <DMA_CalcBaseAndBitshift+0x118>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d04a      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a41      	ldr	r2, [pc, #260]	; (800402c <DMA_CalcBaseAndBitshift+0x11c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d045      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a3f      	ldr	r2, [pc, #252]	; (8004030 <DMA_CalcBaseAndBitshift+0x120>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d040      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a3e      	ldr	r2, [pc, #248]	; (8004034 <DMA_CalcBaseAndBitshift+0x124>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d03b      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a3c      	ldr	r2, [pc, #240]	; (8004038 <DMA_CalcBaseAndBitshift+0x128>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d036      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a3b      	ldr	r2, [pc, #236]	; (800403c <DMA_CalcBaseAndBitshift+0x12c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d031      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a39      	ldr	r2, [pc, #228]	; (8004040 <DMA_CalcBaseAndBitshift+0x130>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d02c      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a38      	ldr	r2, [pc, #224]	; (8004044 <DMA_CalcBaseAndBitshift+0x134>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d027      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a36      	ldr	r2, [pc, #216]	; (8004048 <DMA_CalcBaseAndBitshift+0x138>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d022      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a35      	ldr	r2, [pc, #212]	; (800404c <DMA_CalcBaseAndBitshift+0x13c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d01d      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a33      	ldr	r2, [pc, #204]	; (8004050 <DMA_CalcBaseAndBitshift+0x140>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d018      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a32      	ldr	r2, [pc, #200]	; (8004054 <DMA_CalcBaseAndBitshift+0x144>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d013      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a30      	ldr	r2, [pc, #192]	; (8004058 <DMA_CalcBaseAndBitshift+0x148>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00e      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a2f      	ldr	r2, [pc, #188]	; (800405c <DMA_CalcBaseAndBitshift+0x14c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d009      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2d      	ldr	r2, [pc, #180]	; (8004060 <DMA_CalcBaseAndBitshift+0x150>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d004      	beq.n	8003fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2c      	ldr	r2, [pc, #176]	; (8004064 <DMA_CalcBaseAndBitshift+0x154>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d101      	bne.n	8003fbc <DMA_CalcBaseAndBitshift+0xac>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <DMA_CalcBaseAndBitshift+0xae>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d024      	beq.n	800400c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	3b10      	subs	r3, #16
 8003fca:	4a27      	ldr	r2, [pc, #156]	; (8004068 <DMA_CalcBaseAndBitshift+0x158>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	4a24      	ldr	r2, [pc, #144]	; (800406c <DMA_CalcBaseAndBitshift+0x15c>)
 8003fdc:	5cd3      	ldrb	r3, [r2, r3]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d908      	bls.n	8003ffc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <DMA_CalcBaseAndBitshift+0x160>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	1d1a      	adds	r2, r3, #4
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	659a      	str	r2, [r3, #88]	; 0x58
 8003ffa:	e00d      	b.n	8004018 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <DMA_CalcBaseAndBitshift+0x160>)
 8004004:	4013      	ands	r3, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6593      	str	r3, [r2, #88]	; 0x58
 800400a:	e005      	b.n	8004018 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40020010 	.word	0x40020010
 800402c:	40020028 	.word	0x40020028
 8004030:	40020040 	.word	0x40020040
 8004034:	40020058 	.word	0x40020058
 8004038:	40020070 	.word	0x40020070
 800403c:	40020088 	.word	0x40020088
 8004040:	400200a0 	.word	0x400200a0
 8004044:	400200b8 	.word	0x400200b8
 8004048:	40020410 	.word	0x40020410
 800404c:	40020428 	.word	0x40020428
 8004050:	40020440 	.word	0x40020440
 8004054:	40020458 	.word	0x40020458
 8004058:	40020470 	.word	0x40020470
 800405c:	40020488 	.word	0x40020488
 8004060:	400204a0 	.word	0x400204a0
 8004064:	400204b8 	.word	0x400204b8
 8004068:	aaaaaaab 	.word	0xaaaaaaab
 800406c:	0801ced0 	.word	0x0801ced0
 8004070:	fffffc00 	.word	0xfffffc00

08004074 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d120      	bne.n	80040ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	2b03      	cmp	r3, #3
 800408e:	d858      	bhi.n	8004142 <DMA_CheckFifoParam+0xce>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <DMA_CheckFifoParam+0x24>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040a9 	.word	0x080040a9
 800409c:	080040bb 	.word	0x080040bb
 80040a0:	080040a9 	.word	0x080040a9
 80040a4:	08004143 	.word	0x08004143
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d048      	beq.n	8004146 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040b8:	e045      	b.n	8004146 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040c2:	d142      	bne.n	800414a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040c8:	e03f      	b.n	800414a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d2:	d123      	bne.n	800411c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d838      	bhi.n	800414e <DMA_CheckFifoParam+0xda>
 80040dc:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <DMA_CheckFifoParam+0x70>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	080040f5 	.word	0x080040f5
 80040e8:	080040fb 	.word	0x080040fb
 80040ec:	080040f5 	.word	0x080040f5
 80040f0:	0800410d 	.word	0x0800410d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
        break;
 80040f8:	e030      	b.n	800415c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d025      	beq.n	8004152 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800410a:	e022      	b.n	8004152 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004114:	d11f      	bne.n	8004156 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800411a:	e01c      	b.n	8004156 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	2b02      	cmp	r3, #2
 8004122:	d902      	bls.n	800412a <DMA_CheckFifoParam+0xb6>
 8004124:	2b03      	cmp	r3, #3
 8004126:	d003      	beq.n	8004130 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004128:	e018      	b.n	800415c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
        break;
 800412e:	e015      	b.n	800415c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00e      	beq.n	800415a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
    break;
 8004140:	e00b      	b.n	800415a <DMA_CheckFifoParam+0xe6>
        break;
 8004142:	bf00      	nop
 8004144:	e00a      	b.n	800415c <DMA_CheckFifoParam+0xe8>
        break;
 8004146:	bf00      	nop
 8004148:	e008      	b.n	800415c <DMA_CheckFifoParam+0xe8>
        break;
 800414a:	bf00      	nop
 800414c:	e006      	b.n	800415c <DMA_CheckFifoParam+0xe8>
        break;
 800414e:	bf00      	nop
 8004150:	e004      	b.n	800415c <DMA_CheckFifoParam+0xe8>
        break;
 8004152:	bf00      	nop
 8004154:	e002      	b.n	800415c <DMA_CheckFifoParam+0xe8>
        break;
 8004156:	bf00      	nop
 8004158:	e000      	b.n	800415c <DMA_CheckFifoParam+0xe8>
    break;
 800415a:	bf00      	nop
    }
  }

  return status;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop

0800416c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a38      	ldr	r2, [pc, #224]	; (8004260 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d022      	beq.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a36      	ldr	r2, [pc, #216]	; (8004264 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01d      	beq.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a35      	ldr	r2, [pc, #212]	; (8004268 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d018      	beq.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a33      	ldr	r2, [pc, #204]	; (800426c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a32      	ldr	r2, [pc, #200]	; (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00e      	beq.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a30      	ldr	r2, [pc, #192]	; (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d009      	beq.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2f      	ldr	r2, [pc, #188]	; (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d004      	beq.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a2d      	ldr	r2, [pc, #180]	; (800427c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041ce:	2300      	movs	r3, #0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01a      	beq.n	800420a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	3b08      	subs	r3, #8
 80041dc:	4a28      	ldr	r2, [pc, #160]	; (8004280 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	091b      	lsrs	r3, r3, #4
 80041e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4b26      	ldr	r3, [pc, #152]	; (8004284 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	461a      	mov	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a24      	ldr	r2, [pc, #144]	; (8004288 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80041f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	2201      	movs	r2, #1
 8004202:	409a      	lsls	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004208:	e024      	b.n	8004254 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3b10      	subs	r3, #16
 8004212:	4a1e      	ldr	r2, [pc, #120]	; (800428c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d806      	bhi.n	8004232 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4a1b      	ldr	r2, [pc, #108]	; (8004294 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d902      	bls.n	8004232 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3308      	adds	r3, #8
 8004230:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4b18      	ldr	r3, [pc, #96]	; (8004298 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	461a      	mov	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a16      	ldr	r2, [pc, #88]	; (800429c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004244:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	2201      	movs	r2, #1
 800424e:	409a      	lsls	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	58025408 	.word	0x58025408
 8004264:	5802541c 	.word	0x5802541c
 8004268:	58025430 	.word	0x58025430
 800426c:	58025444 	.word	0x58025444
 8004270:	58025458 	.word	0x58025458
 8004274:	5802546c 	.word	0x5802546c
 8004278:	58025480 	.word	0x58025480
 800427c:	58025494 	.word	0x58025494
 8004280:	cccccccd 	.word	0xcccccccd
 8004284:	16009600 	.word	0x16009600
 8004288:	58025880 	.word	0x58025880
 800428c:	aaaaaaab 	.word	0xaaaaaaab
 8004290:	400204b8 	.word	0x400204b8
 8004294:	4002040f 	.word	0x4002040f
 8004298:	10008200 	.word	0x10008200
 800429c:	40020880 	.word	0x40020880

080042a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d04a      	beq.n	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d847      	bhi.n	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a25      	ldr	r2, [pc, #148]	; (8004358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d022      	beq.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a24      	ldr	r2, [pc, #144]	; (800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d01d      	beq.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a22      	ldr	r2, [pc, #136]	; (8004360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d018      	beq.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a21      	ldr	r2, [pc, #132]	; (8004364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d013      	beq.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00e      	beq.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1e      	ldr	r2, [pc, #120]	; (800436c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d009      	beq.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1c      	ldr	r2, [pc, #112]	; (8004370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004310:	2300      	movs	r3, #0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4b17      	ldr	r3, [pc, #92]	; (8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	461a      	mov	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a15      	ldr	r2, [pc, #84]	; (800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004328:	671a      	str	r2, [r3, #112]	; 0x70
 800432a:	e009      	b.n	8004340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4b14      	ldr	r3, [pc, #80]	; (8004380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	461a      	mov	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a11      	ldr	r2, [pc, #68]	; (8004384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800433e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3b01      	subs	r3, #1
 8004344:	2201      	movs	r2, #1
 8004346:	409a      	lsls	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800434c:	bf00      	nop
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	58025408 	.word	0x58025408
 800435c:	5802541c 	.word	0x5802541c
 8004360:	58025430 	.word	0x58025430
 8004364:	58025444 	.word	0x58025444
 8004368:	58025458 	.word	0x58025458
 800436c:	5802546c 	.word	0x5802546c
 8004370:	58025480 	.word	0x58025480
 8004374:	58025494 	.word	0x58025494
 8004378:	1600963f 	.word	0x1600963f
 800437c:	58025940 	.word	0x58025940
 8004380:	1000823f 	.word	0x1000823f
 8004384:	40020940 	.word	0x40020940

08004388 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e0cf      	b.n	800453a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2223      	movs	r2, #35	; 0x23
 80043a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7fd f859 	bl	8001464 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b2:	4b64      	ldr	r3, [pc, #400]	; (8004544 <HAL_ETH_Init+0x1bc>)
 80043b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043b8:	4a62      	ldr	r2, [pc, #392]	; (8004544 <HAL_ETH_Init+0x1bc>)
 80043ba:	f043 0302 	orr.w	r3, r3, #2
 80043be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043c2:	4b60      	ldr	r3, [pc, #384]	; (8004544 <HAL_ETH_Init+0x1bc>)
 80043c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	7a1b      	ldrb	r3, [r3, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80043d8:	2000      	movs	r0, #0
 80043da:	f7fd fc8b 	bl	8001cf4 <HAL_SYSCFG_ETHInterfaceSelect>
 80043de:	e003      	b.n	80043e8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80043e0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80043e4:	f7fd fc86 	bl	8001cf4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80043e8:	4b57      	ldr	r3, [pc, #348]	; (8004548 <HAL_ETH_Init+0x1c0>)
 80043ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004402:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004404:	f7fd fc3a 	bl	8001c7c <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800440a:	e011      	b.n	8004430 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800440c:	f7fd fc36 	bl	8001c7c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800441a:	d909      	bls.n	8004430 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2204      	movs	r2, #4
 8004420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	22e0      	movs	r2, #224	; 0xe0
 8004428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e084      	b.n	800453a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e4      	bne.n	800440c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f886 	bl	8004554 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004448:	f001 feca 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 800444c:	4603      	mov	r3, r0
 800444e:	4a3f      	ldr	r2, [pc, #252]	; (800454c <HAL_ETH_Init+0x1c4>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	0c9a      	lsrs	r2, r3, #18
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3a01      	subs	r2, #1
 800445c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fa71 	bl	8004948 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004472:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6812      	ldr	r2, [r2, #0]
 800447a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800447e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004482:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	22e0      	movs	r2, #224	; 0xe0
 800449e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e049      	b.n	800453a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80044b2:	4b27      	ldr	r3, [pc, #156]	; (8004550 <HAL_ETH_Init+0x1c8>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6952      	ldr	r2, [r2, #20]
 80044ba:	0051      	lsls	r1, r2, #1
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	430b      	orrs	r3, r1
 80044c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044c6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fad9 	bl	8004a82 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fb1f 	bl	8004b14 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	3305      	adds	r3, #5
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	021a      	lsls	r2, r3, #8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	3304      	adds	r3, #4
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	4619      	mov	r1, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	3303      	adds	r3, #3
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	061a      	lsls	r2, r3, #24
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	3302      	adds	r3, #2
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	3301      	adds	r3, #1
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004514:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004522:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004524:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2210      	movs	r2, #16
 8004534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	58024400 	.word	0x58024400
 8004548:	58000400 	.word	0x58000400
 800454c:	431bde83 	.word	0x431bde83
 8004550:	ffff8001 	.word	0xffff8001

08004554 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004564:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800456c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800456e:	f001 fe37 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8004572:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4a1e      	ldr	r2, [pc, #120]	; (80045f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d908      	bls.n	800458e <HAL_ETH_SetMDIOClockRange+0x3a>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d804      	bhi.n	800458e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e027      	b.n	80045de <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d908      	bls.n	80045a8 <HAL_ETH_SetMDIOClockRange+0x54>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d204      	bcs.n	80045a8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e01a      	b.n	80045de <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d303      	bcc.n	80045b8 <HAL_ETH_SetMDIOClockRange+0x64>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d911      	bls.n	80045dc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a10      	ldr	r2, [pc, #64]	; (80045fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d908      	bls.n	80045d2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a0f      	ldr	r2, [pc, #60]	; (8004600 <HAL_ETH_SetMDIOClockRange+0xac>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d804      	bhi.n	80045d2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e005      	b.n	80045de <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	e000      	b.n	80045de <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80045dc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	01312cff 	.word	0x01312cff
 80045f4:	02160ebf 	.word	0x02160ebf
 80045f8:	03938700 	.word	0x03938700
 80045fc:	05f5e0ff 	.word	0x05f5e0ff
 8004600:	08f0d17f 	.word	0x08f0d17f

08004604 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004616:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	791b      	ldrb	r3, [r3, #4]
 800461c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800461e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	7b1b      	ldrb	r3, [r3, #12]
 8004624:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004626:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	7b5b      	ldrb	r3, [r3, #13]
 800462c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800462e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	7b9b      	ldrb	r3, [r3, #14]
 8004634:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004636:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	7bdb      	ldrb	r3, [r3, #15]
 800463c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800463e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	7c12      	ldrb	r2, [r2, #16]
 8004644:	2a00      	cmp	r2, #0
 8004646:	d102      	bne.n	800464e <ETH_SetMACConfig+0x4a>
 8004648:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800464c:	e000      	b.n	8004650 <ETH_SetMACConfig+0x4c>
 800464e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004650:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	7c52      	ldrb	r2, [r2, #17]
 8004656:	2a00      	cmp	r2, #0
 8004658:	d102      	bne.n	8004660 <ETH_SetMACConfig+0x5c>
 800465a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800465e:	e000      	b.n	8004662 <ETH_SetMACConfig+0x5e>
 8004660:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004662:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	7c9b      	ldrb	r3, [r3, #18]
 8004668:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800466a:	431a      	orrs	r2, r3
               macconf->Speed |
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004670:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004676:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	7f1b      	ldrb	r3, [r3, #28]
 800467c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800467e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	7f5b      	ldrb	r3, [r3, #29]
 8004684:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004686:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	7f92      	ldrb	r2, [r2, #30]
 800468c:	2a00      	cmp	r2, #0
 800468e:	d102      	bne.n	8004696 <ETH_SetMACConfig+0x92>
 8004690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004694:	e000      	b.n	8004698 <ETH_SetMACConfig+0x94>
 8004696:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004698:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	7fdb      	ldrb	r3, [r3, #31]
 800469e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80046a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80046a8:	2a00      	cmp	r2, #0
 80046aa:	d102      	bne.n	80046b2 <ETH_SetMACConfig+0xae>
 80046ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046b0:	e000      	b.n	80046b4 <ETH_SetMACConfig+0xb0>
 80046b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80046b4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80046ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80046c4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b56      	ldr	r3, [pc, #344]	; (8004830 <ETH_SetMACConfig+0x22c>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	68f9      	ldr	r1, [r7, #12]
 80046de:	430b      	orrs	r3, r1
 80046e0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ee:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80046f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046f8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80046fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004702:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004704:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800470c:	2a00      	cmp	r2, #0
 800470e:	d102      	bne.n	8004716 <ETH_SetMACConfig+0x112>
 8004710:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004714:	e000      	b.n	8004718 <ETH_SetMACConfig+0x114>
 8004716:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004718:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	4b42      	ldr	r3, [pc, #264]	; (8004834 <ETH_SetMACConfig+0x230>)
 800472a:	4013      	ands	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6812      	ldr	r2, [r2, #0]
 8004730:	68f9      	ldr	r1, [r7, #12]
 8004732:	430b      	orrs	r3, r1
 8004734:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800473c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	4b3a      	ldr	r3, [pc, #232]	; (8004838 <ETH_SetMACConfig+0x234>)
 800474e:	4013      	ands	r3, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	68f9      	ldr	r1, [r7, #12]
 8004756:	430b      	orrs	r3, r1
 8004758:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004760:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004766:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800476e:	2a00      	cmp	r2, #0
 8004770:	d101      	bne.n	8004776 <ETH_SetMACConfig+0x172>
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	e000      	b.n	8004778 <ETH_SetMACConfig+0x174>
 8004776:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004778:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800478a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800478e:	4013      	ands	r3, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	68f9      	ldr	r1, [r7, #12]
 8004796:	430b      	orrs	r3, r1
 8004798:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80047a0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80047a8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f023 0103 	bic.w	r1, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80047ce:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80047ea:	2a00      	cmp	r2, #0
 80047ec:	d101      	bne.n	80047f2 <ETH_SetMACConfig+0x1ee>
 80047ee:	2240      	movs	r2, #64	; 0x40
 80047f0:	e000      	b.n	80047f4 <ETH_SetMACConfig+0x1f0>
 80047f2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80047f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80047fc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80047fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004806:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004814:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	430a      	orrs	r2, r1
 8004820:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	00048083 	.word	0x00048083
 8004834:	c0f88000 	.word	0xc0f88000
 8004838:	fffffef0 	.word	0xfffffef0

0800483c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b38      	ldr	r3, [pc, #224]	; (8004934 <ETH_SetDMAConfig+0xf8>)
 8004852:	4013      	ands	r3, r2
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	6811      	ldr	r1, [r2, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	430b      	orrs	r3, r1
 800485e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004862:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	791b      	ldrb	r3, [r3, #4]
 8004868:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800486e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	7b1b      	ldrb	r3, [r3, #12]
 8004874:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	4b2c      	ldr	r3, [pc, #176]	; (8004938 <ETH_SetDMAConfig+0xfc>)
 8004886:	4013      	ands	r3, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	68f9      	ldr	r1, [r7, #12]
 800488e:	430b      	orrs	r3, r1
 8004890:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004894:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	7b5b      	ldrb	r3, [r3, #13]
 800489a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80048b0:	4b22      	ldr	r3, [pc, #136]	; (800493c <ETH_SetDMAConfig+0x100>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	430b      	orrs	r3, r1
 80048bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048c0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	7d1b      	ldrb	r3, [r3, #20]
 80048cc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80048ce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	7f5b      	ldrb	r3, [r3, #29]
 80048d4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80048e6:	4b16      	ldr	r3, [pc, #88]	; (8004940 <ETH_SetDMAConfig+0x104>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	68f9      	ldr	r1, [r7, #12]
 80048f0:	430b      	orrs	r3, r1
 80048f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048f6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	7f1b      	ldrb	r3, [r3, #28]
 80048fe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004910:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <ETH_SetDMAConfig+0x108>)
 8004916:	4013      	ands	r3, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	68f9      	ldr	r1, [r7, #12]
 800491e:	430b      	orrs	r3, r1
 8004920:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004924:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	ffff87fd 	.word	0xffff87fd
 8004938:	ffff2ffe 	.word	0xffff2ffe
 800493c:	fffec000 	.word	0xfffec000
 8004940:	ffc0efef 	.word	0xffc0efef
 8004944:	7fc0ffff 	.word	0x7fc0ffff

08004948 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b0a4      	sub	sp, #144	; 0x90
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004956:	2300      	movs	r3, #0
 8004958:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800495a:	2300      	movs	r3, #0
 800495c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004960:	2300      	movs	r3, #0
 8004962:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004978:	2300      	movs	r3, #0
 800497a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004988:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800498a:	2300      	movs	r3, #0
 800498c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004990:	2300      	movs	r3, #0
 8004992:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004994:	2300      	movs	r3, #0
 8004996:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800499a:	2300      	movs	r3, #0
 800499c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80049a0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80049a4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80049ac:	2300      	movs	r3, #0
 80049ae:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80049bc:	2300      	movs	r3, #0
 80049be:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80049c2:	2300      	movs	r3, #0
 80049c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80049ca:	2300      	movs	r3, #0
 80049cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80049e0:	2320      	movs	r3, #32
 80049e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80049f2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80049f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80049f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049fc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004a04:	2302      	movs	r3, #2
 8004a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004a22:	2300      	movs	r3, #0
 8004a24:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff fde6 	bl	8004604 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004a52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a56:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004a5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a60:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004a68:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004a6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004a6e:	f107 0308 	add.w	r3, r7, #8
 8004a72:	4619      	mov	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff fee1 	bl	800483c <ETH_SetDMAConfig>
}
 8004a7a:	bf00      	nop
 8004a7c:	3790      	adds	r7, #144	; 0x90
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e01d      	b.n	8004acc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68d9      	ldr	r1, [r3, #12]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4613      	mov	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	440b      	add	r3, r1
 8004aa0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	3206      	adds	r2, #6
 8004ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d9de      	bls.n	8004a90 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b04:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e023      	b.n	8004b6a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6919      	ldr	r1, [r3, #16]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	4413      	add	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	440b      	add	r3, r1
 8004b32:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2200      	movs	r2, #0
 8004b44:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2200      	movs	r2, #0
 8004b56:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	3212      	adds	r2, #18
 8004b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3301      	adds	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d9d8      	bls.n	8004b22 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b96:	461a      	mov	r2, r3
 8004b98:	2303      	movs	r3, #3
 8004b9a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004baa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bbe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004bc2:	bf00      	nop
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bde:	4b89      	ldr	r3, [pc, #548]	; (8004e04 <HAL_GPIO_Init+0x234>)
 8004be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004be2:	e194      	b.n	8004f0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	2101      	movs	r1, #1
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8186 	beq.w	8004f08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d005      	beq.n	8004c14 <HAL_GPIO_Init+0x44>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d130      	bne.n	8004c76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	2203      	movs	r2, #3
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	f003 0201 	and.w	r2, r3, #1
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d017      	beq.n	8004cb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	4013      	ands	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d123      	bne.n	8004d06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	08da      	lsrs	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3208      	adds	r2, #8
 8004cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	08da      	lsrs	r2, r3, #3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3208      	adds	r2, #8
 8004d00:	69b9      	ldr	r1, [r7, #24]
 8004d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	2203      	movs	r2, #3
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0203 	and.w	r2, r3, #3
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 80e0 	beq.w	8004f08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d48:	4b2f      	ldr	r3, [pc, #188]	; (8004e08 <HAL_GPIO_Init+0x238>)
 8004d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d4e:	4a2e      	ldr	r2, [pc, #184]	; (8004e08 <HAL_GPIO_Init+0x238>)
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d58:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <HAL_GPIO_Init+0x238>)
 8004d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d66:	4a29      	ldr	r2, [pc, #164]	; (8004e0c <HAL_GPIO_Init+0x23c>)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	220f      	movs	r2, #15
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4013      	ands	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a20      	ldr	r2, [pc, #128]	; (8004e10 <HAL_GPIO_Init+0x240>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d052      	beq.n	8004e38 <HAL_GPIO_Init+0x268>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a1f      	ldr	r2, [pc, #124]	; (8004e14 <HAL_GPIO_Init+0x244>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d031      	beq.n	8004dfe <HAL_GPIO_Init+0x22e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <HAL_GPIO_Init+0x248>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d02b      	beq.n	8004dfa <HAL_GPIO_Init+0x22a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <HAL_GPIO_Init+0x24c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d025      	beq.n	8004df6 <HAL_GPIO_Init+0x226>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <HAL_GPIO_Init+0x250>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01f      	beq.n	8004df2 <HAL_GPIO_Init+0x222>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <HAL_GPIO_Init+0x254>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d019      	beq.n	8004dee <HAL_GPIO_Init+0x21e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a1a      	ldr	r2, [pc, #104]	; (8004e28 <HAL_GPIO_Init+0x258>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <HAL_GPIO_Init+0x21a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <HAL_GPIO_Init+0x25c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00d      	beq.n	8004de6 <HAL_GPIO_Init+0x216>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <HAL_GPIO_Init+0x260>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d007      	beq.n	8004de2 <HAL_GPIO_Init+0x212>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a17      	ldr	r2, [pc, #92]	; (8004e34 <HAL_GPIO_Init+0x264>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d101      	bne.n	8004dde <HAL_GPIO_Init+0x20e>
 8004dda:	2309      	movs	r3, #9
 8004ddc:	e02d      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004dde:	230a      	movs	r3, #10
 8004de0:	e02b      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004de2:	2308      	movs	r3, #8
 8004de4:	e029      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004de6:	2307      	movs	r3, #7
 8004de8:	e027      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004dea:	2306      	movs	r3, #6
 8004dec:	e025      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004dee:	2305      	movs	r3, #5
 8004df0:	e023      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004df2:	2304      	movs	r3, #4
 8004df4:	e021      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004df6:	2303      	movs	r3, #3
 8004df8:	e01f      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e01d      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e01b      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004e02:	bf00      	nop
 8004e04:	58000080 	.word	0x58000080
 8004e08:	58024400 	.word	0x58024400
 8004e0c:	58000400 	.word	0x58000400
 8004e10:	58020000 	.word	0x58020000
 8004e14:	58020400 	.word	0x58020400
 8004e18:	58020800 	.word	0x58020800
 8004e1c:	58020c00 	.word	0x58020c00
 8004e20:	58021000 	.word	0x58021000
 8004e24:	58021400 	.word	0x58021400
 8004e28:	58021800 	.word	0x58021800
 8004e2c:	58021c00 	.word	0x58021c00
 8004e30:	58022000 	.word	0x58022000
 8004e34:	58022400 	.word	0x58022400
 8004e38:	2300      	movs	r3, #0
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	f002 0203 	and.w	r2, r2, #3
 8004e40:	0092      	lsls	r2, r2, #2
 8004e42:	4093      	lsls	r3, r2
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e4a:	4938      	ldr	r1, [pc, #224]	; (8004f2c <HAL_GPIO_Init+0x35c>)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	3302      	adds	r3, #2
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	43db      	mvns	r3, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4013      	ands	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	43db      	mvns	r3, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4013      	ands	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4013      	ands	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f47f ae63 	bne.w	8004be4 <HAL_GPIO_Init+0x14>
  }
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	3724      	adds	r7, #36	; 0x24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	58000400 	.word	0x58000400

08004f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	807b      	strh	r3, [r7, #2]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f40:	787b      	ldrb	r3, [r7, #1]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f46:	887a      	ldrh	r2, [r7, #2]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f4c:	e003      	b.n	8004f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f4e:	887b      	ldrh	r3, [r7, #2]
 8004f50:	041a      	lsls	r2, r3, #16
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	619a      	str	r2, [r3, #24]
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004f6c:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <HAL_HSEM_FastTake+0x2c>)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3320      	adds	r3, #32
 8004f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f76:	4a07      	ldr	r2, [pc, #28]	; (8004f94 <HAL_HSEM_FastTake+0x30>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d101      	bne.n	8004f80 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e000      	b.n	8004f82 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	58026400 	.word	0x58026400
 8004f94:	80000300 	.word	0x80000300

08004f98 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004fa2:	4906      	ldr	r1, [pc, #24]	; (8004fbc <HAL_HSEM_Release+0x24>)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	58026400 	.word	0x58026400

08004fc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc2:	b08f      	sub	sp, #60	; 0x3c
 8004fc4:	af0a      	add	r7, sp, #40	; 0x28
 8004fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e116      	b.n	8005200 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7fc fcaf 	bl	8001950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f004 fffb 	bl	800a00c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	687e      	ldr	r6, [r7, #4]
 800501e:	466d      	mov	r5, sp
 8005020:	f106 0410 	add.w	r4, r6, #16
 8005024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800502a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800502c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005030:	e885 0003 	stmia.w	r5, {r0, r1}
 8005034:	1d33      	adds	r3, r6, #4
 8005036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005038:	6838      	ldr	r0, [r7, #0]
 800503a:	f004 ff79 	bl	8009f30 <USB_CoreInit>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0d7      	b.n	8005200 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f004 ffe9 	bl	800a02e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800505c:	2300      	movs	r3, #0
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	e04a      	b.n	80050f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005062:	7bfa      	ldrb	r2, [r7, #15]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	333d      	adds	r3, #61	; 0x3d
 8005072:	2201      	movs	r2, #1
 8005074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005076:	7bfa      	ldrb	r2, [r7, #15]
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	333c      	adds	r3, #60	; 0x3c
 8005086:	7bfa      	ldrb	r2, [r7, #15]
 8005088:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800508a:	7bfa      	ldrb	r2, [r7, #15]
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	b298      	uxth	r0, r3
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	3344      	adds	r3, #68	; 0x44
 800509e:	4602      	mov	r2, r0
 80050a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050a2:	7bfa      	ldrb	r2, [r7, #15]
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	3340      	adds	r3, #64	; 0x40
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050b6:	7bfa      	ldrb	r2, [r7, #15]
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	3348      	adds	r3, #72	; 0x48
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050ca:	7bfa      	ldrb	r2, [r7, #15]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	334c      	adds	r3, #76	; 0x4c
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050de:	7bfa      	ldrb	r2, [r7, #15]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	3354      	adds	r3, #84	; 0x54
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	3301      	adds	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
 80050f8:	7bfa      	ldrb	r2, [r7, #15]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d3af      	bcc.n	8005062 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]
 8005106:	e044      	b.n	8005192 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005108:	7bfa      	ldrb	r2, [r7, #15]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800511e:	7bfa      	ldrb	r2, [r7, #15]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005130:	7bfa      	ldrb	r2, [r7, #15]
 8005132:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005134:	7bfa      	ldrb	r2, [r7, #15]
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4613      	mov	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800514a:	7bfa      	ldrb	r2, [r7, #15]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005176:	7bfa      	ldrb	r2, [r7, #15]
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	3301      	adds	r3, #1
 8005190:	73fb      	strb	r3, [r7, #15]
 8005192:	7bfa      	ldrb	r2, [r7, #15]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	d3b5      	bcc.n	8005108 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	687e      	ldr	r6, [r7, #4]
 80051a4:	466d      	mov	r5, sp
 80051a6:	f106 0410 	add.w	r4, r6, #16
 80051aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80051ba:	1d33      	adds	r3, r6, #4
 80051bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051be:	6838      	ldr	r0, [r7, #0]
 80051c0:	f004 ff82 	bl	800a0c8 <USB_DevInit>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e014      	b.n	8005200 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d102      	bne.n	80051f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f80a 	bl	8005208 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f005 f940 	bl	800a47e <USB_DevDisconnect>

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005208 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_PCDEx_ActivateLPM+0x44>)
 8005238:	4313      	orrs	r3, r2
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	10000003 	.word	0x10000003

08005250 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005258:	4b29      	ldr	r3, [pc, #164]	; (8005300 <HAL_PWREx_ConfigSupply+0xb0>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	2b06      	cmp	r3, #6
 8005262:	d00a      	beq.n	800527a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005264:	4b26      	ldr	r3, [pc, #152]	; (8005300 <HAL_PWREx_ConfigSupply+0xb0>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	429a      	cmp	r2, r3
 8005270:	d001      	beq.n	8005276 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e040      	b.n	80052f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e03e      	b.n	80052f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800527a:	4b21      	ldr	r3, [pc, #132]	; (8005300 <HAL_PWREx_ConfigSupply+0xb0>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005282:	491f      	ldr	r1, [pc, #124]	; (8005300 <HAL_PWREx_ConfigSupply+0xb0>)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4313      	orrs	r3, r2
 8005288:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800528a:	f7fc fcf7 	bl	8001c7c <HAL_GetTick>
 800528e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005290:	e009      	b.n	80052a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005292:	f7fc fcf3 	bl	8001c7c <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a0:	d901      	bls.n	80052a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e028      	b.n	80052f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052a6:	4b16      	ldr	r3, [pc, #88]	; (8005300 <HAL_PWREx_ConfigSupply+0xb0>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b2:	d1ee      	bne.n	8005292 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b1e      	cmp	r3, #30
 80052b8:	d008      	beq.n	80052cc <HAL_PWREx_ConfigSupply+0x7c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b2e      	cmp	r3, #46	; 0x2e
 80052be:	d005      	beq.n	80052cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b1d      	cmp	r3, #29
 80052c4:	d002      	beq.n	80052cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b2d      	cmp	r3, #45	; 0x2d
 80052ca:	d114      	bne.n	80052f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80052cc:	f7fc fcd6 	bl	8001c7c <HAL_GetTick>
 80052d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80052d2:	e009      	b.n	80052e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052d4:	f7fc fcd2 	bl	8001c7c <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052e2:	d901      	bls.n	80052e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e007      	b.n	80052f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <HAL_PWREx_ConfigSupply+0xb0>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f4:	d1ee      	bne.n	80052d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	58024800 	.word	0x58024800

08005304 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	4a04      	ldr	r2, [pc, #16]	; (8005320 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800530e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005312:	60d3      	str	r3, [r2, #12]
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	58024800 	.word	0x58024800

08005324 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08c      	sub	sp, #48	; 0x30
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d102      	bne.n	8005338 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f000 bc1d 	b.w	8005b72 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8087 	beq.w	8005454 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005346:	4b99      	ldr	r3, [pc, #612]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005350:	4b96      	ldr	r3, [pc, #600]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	2b10      	cmp	r3, #16
 800535a:	d007      	beq.n	800536c <HAL_RCC_OscConfig+0x48>
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	2b18      	cmp	r3, #24
 8005360:	d110      	bne.n	8005384 <HAL_RCC_OscConfig+0x60>
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d10b      	bne.n	8005384 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536c:	4b8f      	ldr	r3, [pc, #572]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d06c      	beq.n	8005452 <HAL_RCC_OscConfig+0x12e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d168      	bne.n	8005452 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e3f6      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538c:	d106      	bne.n	800539c <HAL_RCC_OscConfig+0x78>
 800538e:	4b87      	ldr	r3, [pc, #540]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a86      	ldr	r2, [pc, #536]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	e02e      	b.n	80053fa <HAL_RCC_OscConfig+0xd6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10c      	bne.n	80053be <HAL_RCC_OscConfig+0x9a>
 80053a4:	4b81      	ldr	r3, [pc, #516]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a80      	ldr	r2, [pc, #512]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80053aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	4b7e      	ldr	r3, [pc, #504]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a7d      	ldr	r2, [pc, #500]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80053b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	e01d      	b.n	80053fa <HAL_RCC_OscConfig+0xd6>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c6:	d10c      	bne.n	80053e2 <HAL_RCC_OscConfig+0xbe>
 80053c8:	4b78      	ldr	r3, [pc, #480]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a77      	ldr	r2, [pc, #476]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80053ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	4b75      	ldr	r3, [pc, #468]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a74      	ldr	r2, [pc, #464]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80053da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	e00b      	b.n	80053fa <HAL_RCC_OscConfig+0xd6>
 80053e2:	4b72      	ldr	r3, [pc, #456]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a71      	ldr	r2, [pc, #452]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80053e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	4b6f      	ldr	r3, [pc, #444]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a6e      	ldr	r2, [pc, #440]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80053f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d013      	beq.n	800542a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005402:	f7fc fc3b 	bl	8001c7c <HAL_GetTick>
 8005406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800540a:	f7fc fc37 	bl	8001c7c <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b64      	cmp	r3, #100	; 0x64
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e3aa      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800541c:	4b63      	ldr	r3, [pc, #396]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <HAL_RCC_OscConfig+0xe6>
 8005428:	e014      	b.n	8005454 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542a:	f7fc fc27 	bl	8001c7c <HAL_GetTick>
 800542e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005432:	f7fc fc23 	bl	8001c7c <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b64      	cmp	r3, #100	; 0x64
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e396      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005444:	4b59      	ldr	r3, [pc, #356]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f0      	bne.n	8005432 <HAL_RCC_OscConfig+0x10e>
 8005450:	e000      	b.n	8005454 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005452:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80cb 	beq.w	80055f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005462:	4b52      	ldr	r3, [pc, #328]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800546a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800546c:	4b4f      	ldr	r3, [pc, #316]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_RCC_OscConfig+0x164>
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	2b18      	cmp	r3, #24
 800547c:	d156      	bne.n	800552c <HAL_RCC_OscConfig+0x208>
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d151      	bne.n	800552c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005488:	4b48      	ldr	r3, [pc, #288]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_RCC_OscConfig+0x17c>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e368      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054a0:	4b42      	ldr	r3, [pc, #264]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f023 0219 	bic.w	r2, r3, #25
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	493f      	ldr	r1, [pc, #252]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054b2:	f7fc fbe3 	bl	8001c7c <HAL_GetTick>
 80054b6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ba:	f7fc fbdf 	bl	8001c7c <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e352      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054cc:	4b37      	ldr	r3, [pc, #220]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d8:	f7fc fc00 	bl	8001cdc <HAL_GetREVID>
 80054dc:	4603      	mov	r3, r0
 80054de:	f241 0203 	movw	r2, #4099	; 0x1003
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d817      	bhi.n	8005516 <HAL_RCC_OscConfig+0x1f2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b40      	cmp	r3, #64	; 0x40
 80054ec:	d108      	bne.n	8005500 <HAL_RCC_OscConfig+0x1dc>
 80054ee:	4b2f      	ldr	r3, [pc, #188]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054f6:	4a2d      	ldr	r2, [pc, #180]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80054f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054fe:	e07b      	b.n	80055f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005500:	4b2a      	ldr	r3, [pc, #168]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	031b      	lsls	r3, r3, #12
 800550e:	4927      	ldr	r1, [pc, #156]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005510:	4313      	orrs	r3, r2
 8005512:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005514:	e070      	b.n	80055f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005516:	4b25      	ldr	r3, [pc, #148]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	061b      	lsls	r3, r3, #24
 8005524:	4921      	ldr	r1, [pc, #132]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005526:	4313      	orrs	r3, r2
 8005528:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800552a:	e065      	b.n	80055f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d048      	beq.n	80055c6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005534:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f023 0219 	bic.w	r2, r3, #25
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	491a      	ldr	r1, [pc, #104]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005546:	f7fc fb99 	bl	8001c7c <HAL_GetTick>
 800554a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800554e:	f7fc fb95 	bl	8001c7c <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e308      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005560:	4b12      	ldr	r3, [pc, #72]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556c:	f7fc fbb6 	bl	8001cdc <HAL_GetREVID>
 8005570:	4603      	mov	r3, r0
 8005572:	f241 0203 	movw	r2, #4099	; 0x1003
 8005576:	4293      	cmp	r3, r2
 8005578:	d81a      	bhi.n	80055b0 <HAL_RCC_OscConfig+0x28c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d108      	bne.n	8005594 <HAL_RCC_OscConfig+0x270>
 8005582:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800558a:	4a08      	ldr	r2, [pc, #32]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 800558c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005590:	6053      	str	r3, [r2, #4]
 8005592:	e031      	b.n	80055f8 <HAL_RCC_OscConfig+0x2d4>
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	031b      	lsls	r3, r3, #12
 80055a2:	4902      	ldr	r1, [pc, #8]	; (80055ac <HAL_RCC_OscConfig+0x288>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	604b      	str	r3, [r1, #4]
 80055a8:	e026      	b.n	80055f8 <HAL_RCC_OscConfig+0x2d4>
 80055aa:	bf00      	nop
 80055ac:	58024400 	.word	0x58024400
 80055b0:	4b9a      	ldr	r3, [pc, #616]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	061b      	lsls	r3, r3, #24
 80055be:	4997      	ldr	r1, [pc, #604]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	604b      	str	r3, [r1, #4]
 80055c4:	e018      	b.n	80055f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055c6:	4b95      	ldr	r3, [pc, #596]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a94      	ldr	r2, [pc, #592]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d2:	f7fc fb53 	bl	8001c7c <HAL_GetTick>
 80055d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055da:	f7fc fb4f 	bl	8001c7c <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e2c2      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055ec:	4b8b      	ldr	r3, [pc, #556]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f0      	bne.n	80055da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80a9 	beq.w	8005758 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005606:	4b85      	ldr	r3, [pc, #532]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800560e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005610:	4b82      	ldr	r3, [pc, #520]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d007      	beq.n	800562c <HAL_RCC_OscConfig+0x308>
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2b18      	cmp	r3, #24
 8005620:	d13a      	bne.n	8005698 <HAL_RCC_OscConfig+0x374>
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d135      	bne.n	8005698 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800562c:	4b7b      	ldr	r3, [pc, #492]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_RCC_OscConfig+0x320>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	2b80      	cmp	r3, #128	; 0x80
 800563e:	d001      	beq.n	8005644 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e296      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005644:	f7fc fb4a 	bl	8001cdc <HAL_GetREVID>
 8005648:	4603      	mov	r3, r0
 800564a:	f241 0203 	movw	r2, #4099	; 0x1003
 800564e:	4293      	cmp	r3, r2
 8005650:	d817      	bhi.n	8005682 <HAL_RCC_OscConfig+0x35e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	2b20      	cmp	r3, #32
 8005658:	d108      	bne.n	800566c <HAL_RCC_OscConfig+0x348>
 800565a:	4b70      	ldr	r3, [pc, #448]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005662:	4a6e      	ldr	r2, [pc, #440]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 8005664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005668:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800566a:	e075      	b.n	8005758 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800566c:	4b6b      	ldr	r3, [pc, #428]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	069b      	lsls	r3, r3, #26
 800567a:	4968      	ldr	r1, [pc, #416]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 800567c:	4313      	orrs	r3, r2
 800567e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005680:	e06a      	b.n	8005758 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005682:	4b66      	ldr	r3, [pc, #408]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	061b      	lsls	r3, r3, #24
 8005690:	4962      	ldr	r1, [pc, #392]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 8005692:	4313      	orrs	r3, r2
 8005694:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005696:	e05f      	b.n	8005758 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d042      	beq.n	8005726 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80056a0:	4b5e      	ldr	r3, [pc, #376]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a5d      	ldr	r2, [pc, #372]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80056a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fc fae6 	bl	8001c7c <HAL_GetTick>
 80056b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056b4:	f7fc fae2 	bl	8001c7c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e255      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056c6:	4b55      	ldr	r3, [pc, #340]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056d2:	f7fc fb03 	bl	8001cdc <HAL_GetREVID>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80056dc:	4293      	cmp	r3, r2
 80056de:	d817      	bhi.n	8005710 <HAL_RCC_OscConfig+0x3ec>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d108      	bne.n	80056fa <HAL_RCC_OscConfig+0x3d6>
 80056e8:	4b4c      	ldr	r3, [pc, #304]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056f0:	4a4a      	ldr	r2, [pc, #296]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80056f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f6:	6053      	str	r3, [r2, #4]
 80056f8:	e02e      	b.n	8005758 <HAL_RCC_OscConfig+0x434>
 80056fa:	4b48      	ldr	r3, [pc, #288]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	069b      	lsls	r3, r3, #26
 8005708:	4944      	ldr	r1, [pc, #272]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 800570a:	4313      	orrs	r3, r2
 800570c:	604b      	str	r3, [r1, #4]
 800570e:	e023      	b.n	8005758 <HAL_RCC_OscConfig+0x434>
 8005710:	4b42      	ldr	r3, [pc, #264]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	061b      	lsls	r3, r3, #24
 800571e:	493f      	ldr	r1, [pc, #252]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 8005720:	4313      	orrs	r3, r2
 8005722:	60cb      	str	r3, [r1, #12]
 8005724:	e018      	b.n	8005758 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005726:	4b3d      	ldr	r3, [pc, #244]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a3c      	ldr	r2, [pc, #240]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 800572c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005732:	f7fc faa3 	bl	8001c7c <HAL_GetTick>
 8005736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800573a:	f7fc fa9f 	bl	8001c7c <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e212      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800574c:	4b33      	ldr	r3, [pc, #204]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f0      	bne.n	800573a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d036      	beq.n	80057d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d019      	beq.n	80057a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800576c:	4b2b      	ldr	r3, [pc, #172]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 800576e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005770:	4a2a      	ldr	r2, [pc, #168]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005778:	f7fc fa80 	bl	8001c7c <HAL_GetTick>
 800577c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005780:	f7fc fa7c 	bl	8001c7c <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e1ef      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005792:	4b22      	ldr	r3, [pc, #136]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 8005794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x45c>
 800579e:	e018      	b.n	80057d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057a0:	4b1e      	ldr	r3, [pc, #120]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80057a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a4:	4a1d      	ldr	r2, [pc, #116]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80057a6:	f023 0301 	bic.w	r3, r3, #1
 80057aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fc fa66 	bl	8001c7c <HAL_GetTick>
 80057b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b4:	f7fc fa62 	bl	8001c7c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e1d5      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057c6:	4b15      	ldr	r3, [pc, #84]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80057c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d039      	beq.n	8005852 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01c      	beq.n	8005820 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057e6:	4b0d      	ldr	r3, [pc, #52]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a0c      	ldr	r2, [pc, #48]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 80057ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057f2:	f7fc fa43 	bl	8001c7c <HAL_GetTick>
 80057f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057fa:	f7fc fa3f 	bl	8001c7c <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e1b2      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <HAL_RCC_OscConfig+0x4f8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0f0      	beq.n	80057fa <HAL_RCC_OscConfig+0x4d6>
 8005818:	e01b      	b.n	8005852 <HAL_RCC_OscConfig+0x52e>
 800581a:	bf00      	nop
 800581c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005820:	4b9b      	ldr	r3, [pc, #620]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a9a      	ldr	r2, [pc, #616]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800582a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800582c:	f7fc fa26 	bl	8001c7c <HAL_GetTick>
 8005830:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005834:	f7fc fa22 	bl	8001c7c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e195      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005846:	4b92      	ldr	r3, [pc, #584]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f0      	bne.n	8005834 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8081 	beq.w	8005962 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005860:	4b8c      	ldr	r3, [pc, #560]	; (8005a94 <HAL_RCC_OscConfig+0x770>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a8b      	ldr	r2, [pc, #556]	; (8005a94 <HAL_RCC_OscConfig+0x770>)
 8005866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800586c:	f7fc fa06 	bl	8001c7c <HAL_GetTick>
 8005870:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005874:	f7fc fa02 	bl	8001c7c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b64      	cmp	r3, #100	; 0x64
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e175      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005886:	4b83      	ldr	r3, [pc, #524]	; (8005a94 <HAL_RCC_OscConfig+0x770>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0f0      	beq.n	8005874 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d106      	bne.n	80058a8 <HAL_RCC_OscConfig+0x584>
 800589a:	4b7d      	ldr	r3, [pc, #500]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	4a7c      	ldr	r2, [pc, #496]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	6713      	str	r3, [r2, #112]	; 0x70
 80058a6:	e02d      	b.n	8005904 <HAL_RCC_OscConfig+0x5e0>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10c      	bne.n	80058ca <HAL_RCC_OscConfig+0x5a6>
 80058b0:	4b77      	ldr	r3, [pc, #476]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b4:	4a76      	ldr	r2, [pc, #472]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058b6:	f023 0301 	bic.w	r3, r3, #1
 80058ba:	6713      	str	r3, [r2, #112]	; 0x70
 80058bc:	4b74      	ldr	r3, [pc, #464]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c0:	4a73      	ldr	r2, [pc, #460]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058c2:	f023 0304 	bic.w	r3, r3, #4
 80058c6:	6713      	str	r3, [r2, #112]	; 0x70
 80058c8:	e01c      	b.n	8005904 <HAL_RCC_OscConfig+0x5e0>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b05      	cmp	r3, #5
 80058d0:	d10c      	bne.n	80058ec <HAL_RCC_OscConfig+0x5c8>
 80058d2:	4b6f      	ldr	r3, [pc, #444]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d6:	4a6e      	ldr	r2, [pc, #440]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058d8:	f043 0304 	orr.w	r3, r3, #4
 80058dc:	6713      	str	r3, [r2, #112]	; 0x70
 80058de:	4b6c      	ldr	r3, [pc, #432]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	4a6b      	ldr	r2, [pc, #428]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ea:	e00b      	b.n	8005904 <HAL_RCC_OscConfig+0x5e0>
 80058ec:	4b68      	ldr	r3, [pc, #416]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f0:	4a67      	ldr	r2, [pc, #412]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	6713      	str	r3, [r2, #112]	; 0x70
 80058f8:	4b65      	ldr	r3, [pc, #404]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fc:	4a64      	ldr	r2, [pc, #400]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80058fe:	f023 0304 	bic.w	r3, r3, #4
 8005902:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d015      	beq.n	8005938 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590c:	f7fc f9b6 	bl	8001c7c <HAL_GetTick>
 8005910:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005912:	e00a      	b.n	800592a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005914:	f7fc f9b2 	bl	8001c7c <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e123      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800592a:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0ee      	beq.n	8005914 <HAL_RCC_OscConfig+0x5f0>
 8005936:	e014      	b.n	8005962 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005938:	f7fc f9a0 	bl	8001c7c <HAL_GetTick>
 800593c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800593e:	e00a      	b.n	8005956 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005940:	f7fc f99c 	bl	8001c7c <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	f241 3288 	movw	r2, #5000	; 0x1388
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e10d      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005956:	4b4e      	ldr	r3, [pc, #312]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1ee      	bne.n	8005940 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 8102 	beq.w	8005b70 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800596c:	4b48      	ldr	r3, [pc, #288]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005974:	2b18      	cmp	r3, #24
 8005976:	f000 80bd 	beq.w	8005af4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b02      	cmp	r3, #2
 8005980:	f040 809e 	bne.w	8005ac0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005984:	4b42      	ldr	r3, [pc, #264]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a41      	ldr	r2, [pc, #260]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 800598a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800598e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fc f974 	bl	8001c7c <HAL_GetTick>
 8005994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005998:	f7fc f970 	bl	8001c7c <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e0e3      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059aa:	4b39      	ldr	r3, [pc, #228]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059b6:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80059b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ba:	4b37      	ldr	r3, [pc, #220]	; (8005a98 <HAL_RCC_OscConfig+0x774>)
 80059bc:	4013      	ands	r3, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059c6:	0112      	lsls	r2, r2, #4
 80059c8:	430a      	orrs	r2, r1
 80059ca:	4931      	ldr	r1, [pc, #196]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	628b      	str	r3, [r1, #40]	; 0x28
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	3b01      	subs	r3, #1
 80059d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	3b01      	subs	r3, #1
 80059e0:	025b      	lsls	r3, r3, #9
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	3b01      	subs	r3, #1
 80059ec:	041b      	lsls	r3, r3, #16
 80059ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f8:	3b01      	subs	r3, #1
 80059fa:	061b      	lsls	r3, r3, #24
 80059fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a00:	4923      	ldr	r1, [pc, #140]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a06:	4b22      	ldr	r3, [pc, #136]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	4a21      	ldr	r2, [pc, #132]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a12:	4b1f      	ldr	r3, [pc, #124]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a16:	4b21      	ldr	r3, [pc, #132]	; (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a1e:	00d2      	lsls	r2, r2, #3
 8005a20:	491b      	ldr	r1, [pc, #108]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a26:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	f023 020c 	bic.w	r2, r3, #12
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	4917      	ldr	r1, [pc, #92]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a38:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	f023 0202 	bic.w	r2, r3, #2
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a44:	4912      	ldr	r1, [pc, #72]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a4a:	4b11      	ldr	r3, [pc, #68]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	4a10      	ldr	r2, [pc, #64]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a56:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	4a0d      	ldr	r2, [pc, #52]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a62:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005a6e:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	4a07      	ldr	r2, [pc, #28]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a04      	ldr	r2, [pc, #16]	; (8005a90 <HAL_RCC_OscConfig+0x76c>)
 8005a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a86:	f7fc f8f9 	bl	8001c7c <HAL_GetTick>
 8005a8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a8c:	e011      	b.n	8005ab2 <HAL_RCC_OscConfig+0x78e>
 8005a8e:	bf00      	nop
 8005a90:	58024400 	.word	0x58024400
 8005a94:	58024800 	.word	0x58024800
 8005a98:	fffffc0c 	.word	0xfffffc0c
 8005a9c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aa0:	f7fc f8ec 	bl	8001c7c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e05f      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ab2:	4b32      	ldr	r3, [pc, #200]	; (8005b7c <HAL_RCC_OscConfig+0x858>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x77c>
 8005abe:	e057      	b.n	8005b70 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac0:	4b2e      	ldr	r3, [pc, #184]	; (8005b7c <HAL_RCC_OscConfig+0x858>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a2d      	ldr	r2, [pc, #180]	; (8005b7c <HAL_RCC_OscConfig+0x858>)
 8005ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fc f8d6 	bl	8001c7c <HAL_GetTick>
 8005ad0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad4:	f7fc f8d2 	bl	8001c7c <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e045      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ae6:	4b25      	ldr	r3, [pc, #148]	; (8005b7c <HAL_RCC_OscConfig+0x858>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x7b0>
 8005af2:	e03d      	b.n	8005b70 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005af4:	4b21      	ldr	r3, [pc, #132]	; (8005b7c <HAL_RCC_OscConfig+0x858>)
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005afa:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <HAL_RCC_OscConfig+0x858>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d031      	beq.n	8005b6c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f003 0203 	and.w	r2, r3, #3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d12a      	bne.n	8005b6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	091b      	lsrs	r3, r3, #4
 8005b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d122      	bne.n	8005b6c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d11a      	bne.n	8005b6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	0a5b      	lsrs	r3, r3, #9
 8005b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d111      	bne.n	8005b6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	0c1b      	lsrs	r3, r3, #16
 8005b4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d108      	bne.n	8005b6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	0e1b      	lsrs	r3, r3, #24
 8005b5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d001      	beq.n	8005b70 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3730      	adds	r7, #48	; 0x30
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	58024400 	.word	0x58024400

08005b80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e19c      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b94:	4b8a      	ldr	r3, [pc, #552]	; (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d910      	bls.n	8005bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b87      	ldr	r3, [pc, #540]	; (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 020f 	bic.w	r2, r3, #15
 8005baa:	4985      	ldr	r1, [pc, #532]	; (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	4b83      	ldr	r3, [pc, #524]	; (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d001      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e184      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d010      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	4b7b      	ldr	r3, [pc, #492]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d908      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005be0:	4b78      	ldr	r3, [pc, #480]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	4975      	ldr	r1, [pc, #468]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d010      	beq.n	8005c20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	4b70      	ldr	r3, [pc, #448]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d908      	bls.n	8005c20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c0e:	4b6d      	ldr	r3, [pc, #436]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	496a      	ldr	r1, [pc, #424]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d010      	beq.n	8005c4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699a      	ldr	r2, [r3, #24]
 8005c30:	4b64      	ldr	r3, [pc, #400]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d908      	bls.n	8005c4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c3c:	4b61      	ldr	r3, [pc, #388]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	495e      	ldr	r1, [pc, #376]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d010      	beq.n	8005c7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69da      	ldr	r2, [r3, #28]
 8005c5e:	4b59      	ldr	r3, [pc, #356]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d908      	bls.n	8005c7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c6a:	4b56      	ldr	r3, [pc, #344]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	4953      	ldr	r1, [pc, #332]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d010      	beq.n	8005caa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	4b4d      	ldr	r3, [pc, #308]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d908      	bls.n	8005caa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c98:	4b4a      	ldr	r3, [pc, #296]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f023 020f 	bic.w	r2, r3, #15
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	4947      	ldr	r1, [pc, #284]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d055      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cb6:	4b43      	ldr	r3, [pc, #268]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	4940      	ldr	r1, [pc, #256]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d107      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cd0:	4b3c      	ldr	r3, [pc, #240]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d121      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e0f6      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d107      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ce8:	4b36      	ldr	r3, [pc, #216]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d115      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0ea      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d107      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d00:	4b30      	ldr	r3, [pc, #192]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d109      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0de      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d10:	4b2c      	ldr	r3, [pc, #176]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0d6      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d20:	4b28      	ldr	r3, [pc, #160]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f023 0207 	bic.w	r2, r3, #7
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	4925      	ldr	r1, [pc, #148]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d32:	f7fb ffa3 	bl	8001c7c <HAL_GetTick>
 8005d36:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d38:	e00a      	b.n	8005d50 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d3a:	f7fb ff9f 	bl	8001c7c <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e0be      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d50:	4b1c      	ldr	r3, [pc, #112]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d1eb      	bne.n	8005d3a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d010      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d208      	bcs.n	8005d90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d7e:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f023 020f 	bic.w	r2, r3, #15
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	490e      	ldr	r1, [pc, #56]	; (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d90:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d214      	bcs.n	8005dc8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9e:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f023 020f 	bic.w	r2, r3, #15
 8005da6:	4906      	ldr	r1, [pc, #24]	; (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dae:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d005      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e086      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
 8005dc0:	52002000 	.word	0x52002000
 8005dc4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d010      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	4b3f      	ldr	r3, [pc, #252]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d208      	bcs.n	8005df6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005de4:	4b3c      	ldr	r3, [pc, #240]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	4939      	ldr	r1, [pc, #228]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d010      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	4b34      	ldr	r3, [pc, #208]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d208      	bcs.n	8005e24 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e12:	4b31      	ldr	r3, [pc, #196]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	492e      	ldr	r1, [pc, #184]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d010      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	4b28      	ldr	r3, [pc, #160]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d208      	bcs.n	8005e52 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e40:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	4922      	ldr	r1, [pc, #136]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d010      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69da      	ldr	r2, [r3, #28]
 8005e62:	4b1d      	ldr	r3, [pc, #116]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d208      	bcs.n	8005e80 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e6e:	4b1a      	ldr	r3, [pc, #104]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	4917      	ldr	r1, [pc, #92]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e80:	f000 f834 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	4912      	ldr	r1, [pc, #72]	; (8005edc <HAL_RCC_ClockConfig+0x35c>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	4a0d      	ldr	r2, [pc, #52]	; (8005edc <HAL_RCC_ClockConfig+0x35c>)
 8005ea8:	5cd3      	ldrb	r3, [r2, r3]
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb4:	4a0a      	ldr	r2, [pc, #40]	; (8005ee0 <HAL_RCC_ClockConfig+0x360>)
 8005eb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005eb8:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <HAL_RCC_ClockConfig+0x364>)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <HAL_RCC_ClockConfig+0x368>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fb fe90 	bl	8001be8 <HAL_InitTick>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	0800a634 	.word	0x0800a634
 8005ee0:	24000004 	.word	0x24000004
 8005ee4:	24000000 	.word	0x24000000
 8005ee8:	24000020 	.word	0x24000020

08005eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b089      	sub	sp, #36	; 0x24
 8005ef0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ef2:	4bb3      	ldr	r3, [pc, #716]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005efa:	2b18      	cmp	r3, #24
 8005efc:	f200 8155 	bhi.w	80061aa <HAL_RCC_GetSysClockFreq+0x2be>
 8005f00:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f6d 	.word	0x08005f6d
 8005f0c:	080061ab 	.word	0x080061ab
 8005f10:	080061ab 	.word	0x080061ab
 8005f14:	080061ab 	.word	0x080061ab
 8005f18:	080061ab 	.word	0x080061ab
 8005f1c:	080061ab 	.word	0x080061ab
 8005f20:	080061ab 	.word	0x080061ab
 8005f24:	080061ab 	.word	0x080061ab
 8005f28:	08005f93 	.word	0x08005f93
 8005f2c:	080061ab 	.word	0x080061ab
 8005f30:	080061ab 	.word	0x080061ab
 8005f34:	080061ab 	.word	0x080061ab
 8005f38:	080061ab 	.word	0x080061ab
 8005f3c:	080061ab 	.word	0x080061ab
 8005f40:	080061ab 	.word	0x080061ab
 8005f44:	080061ab 	.word	0x080061ab
 8005f48:	08005f99 	.word	0x08005f99
 8005f4c:	080061ab 	.word	0x080061ab
 8005f50:	080061ab 	.word	0x080061ab
 8005f54:	080061ab 	.word	0x080061ab
 8005f58:	080061ab 	.word	0x080061ab
 8005f5c:	080061ab 	.word	0x080061ab
 8005f60:	080061ab 	.word	0x080061ab
 8005f64:	080061ab 	.word	0x080061ab
 8005f68:	08005f9f 	.word	0x08005f9f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f6c:	4b94      	ldr	r3, [pc, #592]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d009      	beq.n	8005f8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f78:	4b91      	ldr	r3, [pc, #580]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	08db      	lsrs	r3, r3, #3
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	4a90      	ldr	r2, [pc, #576]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005f8a:	e111      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f8c:	4b8d      	ldr	r3, [pc, #564]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f8e:	61bb      	str	r3, [r7, #24]
    break;
 8005f90:	e10e      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f92:	4b8d      	ldr	r3, [pc, #564]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f94:	61bb      	str	r3, [r7, #24]
    break;
 8005f96:	e10b      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005f98:	4b8c      	ldr	r3, [pc, #560]	; (80061cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f9a:	61bb      	str	r3, [r7, #24]
    break;
 8005f9c:	e108      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f9e:	4b88      	ldr	r3, [pc, #544]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005fa8:	4b85      	ldr	r3, [pc, #532]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	091b      	lsrs	r3, r3, #4
 8005fae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fb4:	4b82      	ldr	r3, [pc, #520]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005fbe:	4b80      	ldr	r3, [pc, #512]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	08db      	lsrs	r3, r3, #3
 8005fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 80e1 	beq.w	80061a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	f000 8083 	beq.w	80060f0 <HAL_RCC_GetSysClockFreq+0x204>
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	f200 80a1 	bhi.w	8006134 <HAL_RCC_GetSysClockFreq+0x248>
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <HAL_RCC_GetSysClockFreq+0x114>
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d056      	beq.n	80060ac <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ffe:	e099      	b.n	8006134 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006000:	4b6f      	ldr	r3, [pc, #444]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d02d      	beq.n	8006068 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800600c:	4b6c      	ldr	r3, [pc, #432]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	08db      	lsrs	r3, r3, #3
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	4a6b      	ldr	r2, [pc, #428]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006018:	fa22 f303 	lsr.w	r3, r2, r3
 800601c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	ee07 3a90 	vmov	s15, r3
 8006024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006036:	4b62      	ldr	r3, [pc, #392]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006046:	ed97 6a02 	vldr	s12, [r7, #8]
 800604a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80061d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800604e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800605a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006062:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006066:	e087      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006072:	eddf 6a58 	vldr	s13, [pc, #352]	; 80061d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607a:	4b51      	ldr	r3, [pc, #324]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608a:	ed97 6a02 	vldr	s12, [r7, #8]
 800608e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80061d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800609e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060aa:	e065      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80061d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060be:	4b40      	ldr	r3, [pc, #256]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80060d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80061d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ee:	e043      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80061dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80060fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006102:	4b2f      	ldr	r3, [pc, #188]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006112:	ed97 6a02 	vldr	s12, [r7, #8]
 8006116:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80061d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800611a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006132:	e021      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80061d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006146:	4b1e      	ldr	r3, [pc, #120]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006156:	ed97 6a02 	vldr	s12, [r7, #8]
 800615a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80061d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800615e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800616a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006176:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006178:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	0a5b      	lsrs	r3, r3, #9
 800617e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006182:	3301      	adds	r3, #1
 8006184:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006190:	edd7 6a07 	vldr	s13, [r7, #28]
 8006194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800619c:	ee17 3a90 	vmov	r3, s15
 80061a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80061a2:	e005      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
    break;
 80061a8:	e002      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80061aa:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061ac:	61bb      	str	r3, [r7, #24]
    break;
 80061ae:	bf00      	nop
  }

  return sysclockfreq;
 80061b0:	69bb      	ldr	r3, [r7, #24]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3724      	adds	r7, #36	; 0x24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	58024400 	.word	0x58024400
 80061c4:	03d09000 	.word	0x03d09000
 80061c8:	003d0900 	.word	0x003d0900
 80061cc:	007a1200 	.word	0x007a1200
 80061d0:	46000000 	.word	0x46000000
 80061d4:	4c742400 	.word	0x4c742400
 80061d8:	4a742400 	.word	0x4a742400
 80061dc:	4af42400 	.word	0x4af42400

080061e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061e6:	f7ff fe81 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 80061ea:	4602      	mov	r2, r0
 80061ec:	4b10      	ldr	r3, [pc, #64]	; (8006230 <HAL_RCC_GetHCLKFreq+0x50>)
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	490f      	ldr	r1, [pc, #60]	; (8006234 <HAL_RCC_GetHCLKFreq+0x54>)
 80061f8:	5ccb      	ldrb	r3, [r1, r3]
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006202:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006204:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <HAL_RCC_GetHCLKFreq+0x50>)
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f003 030f 	and.w	r3, r3, #15
 800620c:	4a09      	ldr	r2, [pc, #36]	; (8006234 <HAL_RCC_GetHCLKFreq+0x54>)
 800620e:	5cd3      	ldrb	r3, [r2, r3]
 8006210:	f003 031f 	and.w	r3, r3, #31
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	fa22 f303 	lsr.w	r3, r2, r3
 800621a:	4a07      	ldr	r2, [pc, #28]	; (8006238 <HAL_RCC_GetHCLKFreq+0x58>)
 800621c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800621e:	4a07      	ldr	r2, [pc, #28]	; (800623c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <HAL_RCC_GetHCLKFreq+0x58>)
 8006226:	681b      	ldr	r3, [r3, #0]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	58024400 	.word	0x58024400
 8006234:	0800a634 	.word	0x0800a634
 8006238:	24000004 	.word	0x24000004
 800623c:	24000000 	.word	0x24000000

08006240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006244:	f7ff ffcc 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8006248:	4602      	mov	r2, r0
 800624a:	4b06      	ldr	r3, [pc, #24]	; (8006264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	091b      	lsrs	r3, r3, #4
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	4904      	ldr	r1, [pc, #16]	; (8006268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006256:	5ccb      	ldrb	r3, [r1, r3]
 8006258:	f003 031f 	and.w	r3, r3, #31
 800625c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006260:	4618      	mov	r0, r3
 8006262:	bd80      	pop	{r7, pc}
 8006264:	58024400 	.word	0x58024400
 8006268:	0800a634 	.word	0x0800a634

0800626c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006270:	f7ff ffb6 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8006274:	4602      	mov	r2, r0
 8006276:	4b06      	ldr	r3, [pc, #24]	; (8006290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	0a1b      	lsrs	r3, r3, #8
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	4904      	ldr	r1, [pc, #16]	; (8006294 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006282:	5ccb      	ldrb	r3, [r1, r3]
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800628c:	4618      	mov	r0, r3
 800628e:	bd80      	pop	{r7, pc}
 8006290:	58024400 	.word	0x58024400
 8006294:	0800a634 	.word	0x0800a634

08006298 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062a0:	2300      	movs	r3, #0
 80062a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062a4:	2300      	movs	r3, #0
 80062a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d03f      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062bc:	d02a      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80062be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062c2:	d824      	bhi.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062c8:	d018      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062ce:	d81e      	bhi.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80062d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d8:	d007      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80062da:	e018      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062dc:	4ba3      	ldr	r3, [pc, #652]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	4aa2      	ldr	r2, [pc, #648]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062e8:	e015      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3304      	adds	r3, #4
 80062ee:	2102      	movs	r1, #2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 f9d5 	bl	80076a0 <RCCEx_PLL2_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062fa:	e00c      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3324      	adds	r3, #36	; 0x24
 8006300:	2102      	movs	r1, #2
 8006302:	4618      	mov	r0, r3
 8006304:	f001 fa7e 	bl	8007804 <RCCEx_PLL3_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800630c:	e003      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	75fb      	strb	r3, [r7, #23]
      break;
 8006312:	e000      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d109      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800631c:	4b93      	ldr	r3, [pc, #588]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800631e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006328:	4990      	ldr	r1, [pc, #576]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800632a:	4313      	orrs	r3, r2
 800632c:	650b      	str	r3, [r1, #80]	; 0x50
 800632e:	e001      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633c:	2b00      	cmp	r3, #0
 800633e:	d03d      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006344:	2b04      	cmp	r3, #4
 8006346:	d826      	bhi.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006348:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	08006365 	.word	0x08006365
 8006354:	08006373 	.word	0x08006373
 8006358:	08006385 	.word	0x08006385
 800635c:	0800639d 	.word	0x0800639d
 8006360:	0800639d 	.word	0x0800639d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006364:	4b81      	ldr	r3, [pc, #516]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	4a80      	ldr	r2, [pc, #512]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800636a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800636e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006370:	e015      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3304      	adds	r3, #4
 8006376:	2100      	movs	r1, #0
 8006378:	4618      	mov	r0, r3
 800637a:	f001 f991 	bl	80076a0 <RCCEx_PLL2_Config>
 800637e:	4603      	mov	r3, r0
 8006380:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006382:	e00c      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3324      	adds	r3, #36	; 0x24
 8006388:	2100      	movs	r1, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f001 fa3a 	bl	8007804 <RCCEx_PLL3_Config>
 8006390:	4603      	mov	r3, r0
 8006392:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006394:	e003      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]
      break;
 800639a:	e000      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800639c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d109      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063a4:	4b71      	ldr	r3, [pc, #452]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a8:	f023 0207 	bic.w	r2, r3, #7
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	496e      	ldr	r1, [pc, #440]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	650b      	str	r3, [r1, #80]	; 0x50
 80063b6:	e001      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d042      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d0:	d02b      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80063d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d6:	d825      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80063d8:	2bc0      	cmp	r3, #192	; 0xc0
 80063da:	d028      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80063dc:	2bc0      	cmp	r3, #192	; 0xc0
 80063de:	d821      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80063e0:	2b80      	cmp	r3, #128	; 0x80
 80063e2:	d016      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80063e4:	2b80      	cmp	r3, #128	; 0x80
 80063e6:	d81d      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d007      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80063f0:	e018      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f2:	4b5e      	ldr	r3, [pc, #376]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	4a5d      	ldr	r2, [pc, #372]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063fe:	e017      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3304      	adds	r3, #4
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f001 f94a 	bl	80076a0 <RCCEx_PLL2_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006410:	e00e      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3324      	adds	r3, #36	; 0x24
 8006416:	2100      	movs	r1, #0
 8006418:	4618      	mov	r0, r3
 800641a:	f001 f9f3 	bl	8007804 <RCCEx_PLL3_Config>
 800641e:	4603      	mov	r3, r0
 8006420:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006422:	e005      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	75fb      	strb	r3, [r7, #23]
      break;
 8006428:	e002      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800642a:	bf00      	nop
 800642c:	e000      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800642e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006430:	7dfb      	ldrb	r3, [r7, #23]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d109      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006436:	4b4d      	ldr	r3, [pc, #308]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006442:	494a      	ldr	r1, [pc, #296]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006444:	4313      	orrs	r3, r2
 8006446:	650b      	str	r3, [r1, #80]	; 0x50
 8006448:	e001      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006456:	2b00      	cmp	r3, #0
 8006458:	d049      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006460:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006464:	d030      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006466:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800646a:	d82a      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800646c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006470:	d02c      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006472:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006476:	d824      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800647c:	d018      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800647e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006482:	d81e      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800648c:	d007      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800648e:	e018      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006490:	4b36      	ldr	r3, [pc, #216]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	4a35      	ldr	r2, [pc, #212]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800649a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800649c:	e017      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3304      	adds	r3, #4
 80064a2:	2100      	movs	r1, #0
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 f8fb 	bl	80076a0 <RCCEx_PLL2_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064ae:	e00e      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3324      	adds	r3, #36	; 0x24
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 f9a4 	bl	8007804 <RCCEx_PLL3_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064c0:	e005      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]
      break;
 80064c6:	e002      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80064c8:	bf00      	nop
 80064ca:	e000      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80064cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80064d4:	4b25      	ldr	r3, [pc, #148]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064e2:	4922      	ldr	r1, [pc, #136]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	658b      	str	r3, [r1, #88]	; 0x58
 80064e8:	e001      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d04b      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006504:	d030      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006506:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800650a:	d82a      	bhi.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800650c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006510:	d02e      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006512:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006516:	d824      	bhi.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006518:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800651c:	d018      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800651e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006522:	d81e      	bhi.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800652c:	d007      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800652e:	e018      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006530:	4b0e      	ldr	r3, [pc, #56]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	4a0d      	ldr	r2, [pc, #52]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800653a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800653c:	e019      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3304      	adds	r3, #4
 8006542:	2100      	movs	r1, #0
 8006544:	4618      	mov	r0, r3
 8006546:	f001 f8ab 	bl	80076a0 <RCCEx_PLL2_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800654e:	e010      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3324      	adds	r3, #36	; 0x24
 8006554:	2100      	movs	r1, #0
 8006556:	4618      	mov	r0, r3
 8006558:	f001 f954 	bl	8007804 <RCCEx_PLL3_Config>
 800655c:	4603      	mov	r3, r0
 800655e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006560:	e007      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	75fb      	strb	r3, [r7, #23]
      break;
 8006566:	e004      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006568:	bf00      	nop
 800656a:	e002      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800656c:	58024400 	.word	0x58024400
      break;
 8006570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006578:	4b99      	ldr	r3, [pc, #612]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800657a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006586:	4996      	ldr	r1, [pc, #600]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006588:	4313      	orrs	r3, r2
 800658a:	658b      	str	r3, [r1, #88]	; 0x58
 800658c:	e001      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d032      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065a2:	2b30      	cmp	r3, #48	; 0x30
 80065a4:	d01c      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80065a6:	2b30      	cmp	r3, #48	; 0x30
 80065a8:	d817      	bhi.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d00c      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d813      	bhi.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d016      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80065b6:	2b10      	cmp	r3, #16
 80065b8:	d10f      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ba:	4b89      	ldr	r3, [pc, #548]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	4a88      	ldr	r2, [pc, #544]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065c6:	e00e      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3304      	adds	r3, #4
 80065cc:	2102      	movs	r1, #2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f001 f866 	bl	80076a0 <RCCEx_PLL2_Config>
 80065d4:	4603      	mov	r3, r0
 80065d6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065d8:	e005      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	75fb      	strb	r3, [r7, #23]
      break;
 80065de:	e002      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80065e0:	bf00      	nop
 80065e2:	e000      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80065e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065ec:	4b7c      	ldr	r3, [pc, #496]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f8:	4979      	ldr	r1, [pc, #484]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065fe:	e001      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d047      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006618:	d030      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800661a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800661e:	d82a      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006620:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006624:	d02c      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006626:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800662a:	d824      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006630:	d018      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006636:	d81e      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800663c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006640:	d007      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006642:	e018      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006644:	4b66      	ldr	r3, [pc, #408]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	4a65      	ldr	r2, [pc, #404]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800664a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800664e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006650:	e017      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3304      	adds	r3, #4
 8006656:	2100      	movs	r1, #0
 8006658:	4618      	mov	r0, r3
 800665a:	f001 f821 	bl	80076a0 <RCCEx_PLL2_Config>
 800665e:	4603      	mov	r3, r0
 8006660:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006662:	e00e      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3324      	adds	r3, #36	; 0x24
 8006668:	2100      	movs	r1, #0
 800666a:	4618      	mov	r0, r3
 800666c:	f001 f8ca 	bl	8007804 <RCCEx_PLL3_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006674:	e005      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
      break;
 800667a:	e002      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800667c:	bf00      	nop
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006682:	7dfb      	ldrb	r3, [r7, #23]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d109      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006688:	4b55      	ldr	r3, [pc, #340]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800668a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006694:	4952      	ldr	r1, [pc, #328]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006696:	4313      	orrs	r3, r2
 8006698:	650b      	str	r3, [r1, #80]	; 0x50
 800669a:	e001      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d049      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066b4:	d02e      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80066b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066ba:	d828      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80066bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066c0:	d02a      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80066c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066c6:	d822      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80066c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066cc:	d026      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80066ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066d2:	d81c      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80066d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d8:	d010      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x464>
 80066da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066de:	d816      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01d      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80066e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e8:	d111      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3304      	adds	r3, #4
 80066ee:	2101      	movs	r1, #1
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 ffd5 	bl	80076a0 <RCCEx_PLL2_Config>
 80066f6:	4603      	mov	r3, r0
 80066f8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066fa:	e012      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3324      	adds	r3, #36	; 0x24
 8006700:	2101      	movs	r1, #1
 8006702:	4618      	mov	r0, r3
 8006704:	f001 f87e 	bl	8007804 <RCCEx_PLL3_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800670c:	e009      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	75fb      	strb	r3, [r7, #23]
      break;
 8006712:	e006      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006714:	bf00      	nop
 8006716:	e004      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006718:	bf00      	nop
 800671a:	e002      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800671c:	bf00      	nop
 800671e:	e000      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006722:	7dfb      	ldrb	r3, [r7, #23]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d109      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006728:	4b2d      	ldr	r3, [pc, #180]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800672a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006734:	492a      	ldr	r1, [pc, #168]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006736:	4313      	orrs	r3, r2
 8006738:	650b      	str	r3, [r1, #80]	; 0x50
 800673a:	e001      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d04d      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006756:	d02e      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800675c:	d828      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006762:	d02a      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006768:	d822      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800676a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800676e:	d026      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006770:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006774:	d81c      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800677a:	d010      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800677c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006780:	d816      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01d      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800678a:	d111      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3304      	adds	r3, #4
 8006790:	2101      	movs	r1, #1
 8006792:	4618      	mov	r0, r3
 8006794:	f000 ff84 	bl	80076a0 <RCCEx_PLL2_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800679c:	e012      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3324      	adds	r3, #36	; 0x24
 80067a2:	2101      	movs	r1, #1
 80067a4:	4618      	mov	r0, r3
 80067a6:	f001 f82d 	bl	8007804 <RCCEx_PLL3_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067ae:	e009      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	75fb      	strb	r3, [r7, #23]
      break;
 80067b4:	e006      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80067b6:	bf00      	nop
 80067b8:	e004      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80067ba:	bf00      	nop
 80067bc:	e002      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80067be:	bf00      	nop
 80067c0:	e000      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80067c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10c      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067ca:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80067cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067d8:	4901      	ldr	r1, [pc, #4]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	658b      	str	r3, [r1, #88]	; 0x58
 80067de:	e003      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80067e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
 80067e6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d02f      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067fc:	d00e      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x584>
 80067fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006802:	d814      	bhi.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d015      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800680c:	d10f      	bne.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800680e:	4baf      	ldr	r3, [pc, #700]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	4aae      	ldr	r2, [pc, #696]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006818:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800681a:	e00c      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	2101      	movs	r1, #1
 8006822:	4618      	mov	r0, r3
 8006824:	f000 ff3c 	bl	80076a0 <RCCEx_PLL2_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800682c:	e003      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	75fb      	strb	r3, [r7, #23]
      break;
 8006832:	e000      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d109      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800683c:	4ba3      	ldr	r3, [pc, #652]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800683e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006840:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006848:	49a0      	ldr	r1, [pc, #640]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800684a:	4313      	orrs	r3, r2
 800684c:	650b      	str	r3, [r1, #80]	; 0x50
 800684e:	e001      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d032      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006864:	2b03      	cmp	r3, #3
 8006866:	d81b      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006868:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800686a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686e:	bf00      	nop
 8006870:	080068a7 	.word	0x080068a7
 8006874:	08006881 	.word	0x08006881
 8006878:	0800688f 	.word	0x0800688f
 800687c:	080068a7 	.word	0x080068a7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006880:	4b92      	ldr	r3, [pc, #584]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	4a91      	ldr	r2, [pc, #580]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800688a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800688c:	e00c      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3304      	adds	r3, #4
 8006892:	2102      	movs	r1, #2
 8006894:	4618      	mov	r0, r3
 8006896:	f000 ff03 	bl	80076a0 <RCCEx_PLL2_Config>
 800689a:	4603      	mov	r3, r0
 800689c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800689e:	e003      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	75fb      	strb	r3, [r7, #23]
      break;
 80068a4:	e000      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80068a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068ae:	4b87      	ldr	r3, [pc, #540]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b2:	f023 0203 	bic.w	r2, r3, #3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ba:	4984      	ldr	r1, [pc, #528]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068c0:	e001      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
 80068c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 8086 	beq.w	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068d4:	4b7e      	ldr	r3, [pc, #504]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a7d      	ldr	r2, [pc, #500]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80068da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068e0:	f7fb f9cc 	bl	8001c7c <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068e6:	e009      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e8:	f7fb f9c8 	bl	8001c7c <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b64      	cmp	r3, #100	; 0x64
 80068f4:	d902      	bls.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	75fb      	strb	r3, [r7, #23]
        break;
 80068fa:	e005      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068fc:	4b74      	ldr	r3, [pc, #464]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0ef      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006908:	7dfb      	ldrb	r3, [r7, #23]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d166      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800690e:	4b6f      	ldr	r3, [pc, #444]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006910:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006918:	4053      	eors	r3, r2
 800691a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691e:	2b00      	cmp	r3, #0
 8006920:	d013      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006922:	4b6a      	ldr	r3, [pc, #424]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800692c:	4b67      	ldr	r3, [pc, #412]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800692e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006930:	4a66      	ldr	r2, [pc, #408]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006936:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006938:	4b64      	ldr	r3, [pc, #400]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693c:	4a63      	ldr	r2, [pc, #396]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800693e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006942:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006944:	4a61      	ldr	r2, [pc, #388]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006954:	d115      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006956:	f7fb f991 	bl	8001c7c <HAL_GetTick>
 800695a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800695c:	e00b      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800695e:	f7fb f98d 	bl	8001c7c <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	f241 3288 	movw	r2, #5000	; 0x1388
 800696c:	4293      	cmp	r3, r2
 800696e:	d902      	bls.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	75fb      	strb	r3, [r7, #23]
            break;
 8006974:	e005      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006976:	4b55      	ldr	r3, [pc, #340]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0ed      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d126      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800698e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006996:	d10d      	bne.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006998:	4b4c      	ldr	r3, [pc, #304]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069a6:	0919      	lsrs	r1, r3, #4
 80069a8:	4b4a      	ldr	r3, [pc, #296]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80069aa:	400b      	ands	r3, r1
 80069ac:	4947      	ldr	r1, [pc, #284]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	610b      	str	r3, [r1, #16]
 80069b2:	e005      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80069b4:	4b45      	ldr	r3, [pc, #276]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	4a44      	ldr	r2, [pc, #272]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069be:	6113      	str	r3, [r2, #16]
 80069c0:	4b42      	ldr	r3, [pc, #264]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ce:	493f      	ldr	r1, [pc, #252]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	670b      	str	r3, [r1, #112]	; 0x70
 80069d4:	e004      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
 80069d8:	75bb      	strb	r3, [r7, #22]
 80069da:	e001      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 8085 	beq.w	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069f2:	2b28      	cmp	r3, #40	; 0x28
 80069f4:	d866      	bhi.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006ad9 	.word	0x08006ad9
 8006a00:	08006ac5 	.word	0x08006ac5
 8006a04:	08006ac5 	.word	0x08006ac5
 8006a08:	08006ac5 	.word	0x08006ac5
 8006a0c:	08006ac5 	.word	0x08006ac5
 8006a10:	08006ac5 	.word	0x08006ac5
 8006a14:	08006ac5 	.word	0x08006ac5
 8006a18:	08006ac5 	.word	0x08006ac5
 8006a1c:	08006aa1 	.word	0x08006aa1
 8006a20:	08006ac5 	.word	0x08006ac5
 8006a24:	08006ac5 	.word	0x08006ac5
 8006a28:	08006ac5 	.word	0x08006ac5
 8006a2c:	08006ac5 	.word	0x08006ac5
 8006a30:	08006ac5 	.word	0x08006ac5
 8006a34:	08006ac5 	.word	0x08006ac5
 8006a38:	08006ac5 	.word	0x08006ac5
 8006a3c:	08006ab3 	.word	0x08006ab3
 8006a40:	08006ac5 	.word	0x08006ac5
 8006a44:	08006ac5 	.word	0x08006ac5
 8006a48:	08006ac5 	.word	0x08006ac5
 8006a4c:	08006ac5 	.word	0x08006ac5
 8006a50:	08006ac5 	.word	0x08006ac5
 8006a54:	08006ac5 	.word	0x08006ac5
 8006a58:	08006ac5 	.word	0x08006ac5
 8006a5c:	08006ad9 	.word	0x08006ad9
 8006a60:	08006ac5 	.word	0x08006ac5
 8006a64:	08006ac5 	.word	0x08006ac5
 8006a68:	08006ac5 	.word	0x08006ac5
 8006a6c:	08006ac5 	.word	0x08006ac5
 8006a70:	08006ac5 	.word	0x08006ac5
 8006a74:	08006ac5 	.word	0x08006ac5
 8006a78:	08006ac5 	.word	0x08006ac5
 8006a7c:	08006ad9 	.word	0x08006ad9
 8006a80:	08006ac5 	.word	0x08006ac5
 8006a84:	08006ac5 	.word	0x08006ac5
 8006a88:	08006ac5 	.word	0x08006ac5
 8006a8c:	08006ac5 	.word	0x08006ac5
 8006a90:	08006ac5 	.word	0x08006ac5
 8006a94:	08006ac5 	.word	0x08006ac5
 8006a98:	08006ac5 	.word	0x08006ac5
 8006a9c:	08006ad9 	.word	0x08006ad9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fdfa 	bl	80076a0 <RCCEx_PLL2_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ab0:	e013      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3324      	adds	r3, #36	; 0x24
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 fea3 	bl	8007804 <RCCEx_PLL3_Config>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ac2:	e00a      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac8:	e007      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006aca:	bf00      	nop
 8006acc:	58024400 	.word	0x58024400
 8006ad0:	58024800 	.word	0x58024800
 8006ad4:	00ffffcf 	.word	0x00ffffcf
      break;
 8006ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ae0:	4b96      	ldr	r3, [pc, #600]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aec:	4993      	ldr	r1, [pc, #588]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	654b      	str	r3, [r1, #84]	; 0x54
 8006af2:	e001      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
 8006af6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d038      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b08:	2b05      	cmp	r3, #5
 8006b0a:	d821      	bhi.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006b0c:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b57 	.word	0x08006b57
 8006b18:	08006b2d 	.word	0x08006b2d
 8006b1c:	08006b3f 	.word	0x08006b3f
 8006b20:	08006b57 	.word	0x08006b57
 8006b24:	08006b57 	.word	0x08006b57
 8006b28:	08006b57 	.word	0x08006b57
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	2101      	movs	r1, #1
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fdb4 	bl	80076a0 <RCCEx_PLL2_Config>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b3c:	e00c      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3324      	adds	r3, #36	; 0x24
 8006b42:	2101      	movs	r1, #1
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fe5d 	bl	8007804 <RCCEx_PLL3_Config>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b4e:	e003      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	75fb      	strb	r3, [r7, #23]
      break;
 8006b54:	e000      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006b56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b58:	7dfb      	ldrb	r3, [r7, #23]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d109      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b5e:	4b77      	ldr	r3, [pc, #476]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b62:	f023 0207 	bic.w	r2, r3, #7
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b6a:	4974      	ldr	r1, [pc, #464]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	654b      	str	r3, [r1, #84]	; 0x54
 8006b70:	e001      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
 8006b74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d03a      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b88:	2b05      	cmp	r3, #5
 8006b8a:	d821      	bhi.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006bd7 	.word	0x08006bd7
 8006b98:	08006bad 	.word	0x08006bad
 8006b9c:	08006bbf 	.word	0x08006bbf
 8006ba0:	08006bd7 	.word	0x08006bd7
 8006ba4:	08006bd7 	.word	0x08006bd7
 8006ba8:	08006bd7 	.word	0x08006bd7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fd74 	bl	80076a0 <RCCEx_PLL2_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bbc:	e00c      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3324      	adds	r3, #36	; 0x24
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fe1d 	bl	8007804 <RCCEx_PLL3_Config>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bce:	e003      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd4:	e000      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd8:	7dfb      	ldrb	r3, [r7, #23]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10a      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bde:	4b57      	ldr	r3, [pc, #348]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be2:	f023 0207 	bic.w	r2, r3, #7
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bec:	4953      	ldr	r1, [pc, #332]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	658b      	str	r3, [r1, #88]	; 0x58
 8006bf2:	e001      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d04b      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c0e:	d02e      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c14:	d828      	bhi.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1a:	d02a      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c20:	d822      	bhi.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c26:	d026      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006c28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c2c:	d81c      	bhi.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c32:	d010      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c38:	d816      	bhi.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01d      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c42:	d111      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3304      	adds	r3, #4
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fd28 	bl	80076a0 <RCCEx_PLL2_Config>
 8006c50:	4603      	mov	r3, r0
 8006c52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c54:	e012      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3324      	adds	r3, #36	; 0x24
 8006c5a:	2102      	movs	r1, #2
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fdd1 	bl	8007804 <RCCEx_PLL3_Config>
 8006c62:	4603      	mov	r3, r0
 8006c64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c66:	e009      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6c:	e006      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006c6e:	bf00      	nop
 8006c70:	e004      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006c72:	bf00      	nop
 8006c74:	e002      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006c76:	bf00      	nop
 8006c78:	e000      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10a      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c82:	4b2e      	ldr	r3, [pc, #184]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c90:	492a      	ldr	r1, [pc, #168]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	654b      	str	r3, [r1, #84]	; 0x54
 8006c96:	e001      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d04d      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cb2:	d02e      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006cb4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cb8:	d828      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cbe:	d02a      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc4:	d822      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006cc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cca:	d026      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006ccc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cd0:	d81c      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd6:	d010      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cdc:	d816      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d01d      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce6:	d111      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	3304      	adds	r3, #4
 8006cec:	2100      	movs	r1, #0
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fcd6 	bl	80076a0 <RCCEx_PLL2_Config>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cf8:	e012      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3324      	adds	r3, #36	; 0x24
 8006cfe:	2102      	movs	r1, #2
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 fd7f 	bl	8007804 <RCCEx_PLL3_Config>
 8006d06:	4603      	mov	r3, r0
 8006d08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d0a:	e009      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d10:	e006      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d12:	bf00      	nop
 8006d14:	e004      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d16:	bf00      	nop
 8006d18:	e002      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10c      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d34:	4901      	ldr	r1, [pc, #4]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	658b      	str	r3, [r1, #88]	; 0x58
 8006d3a:	e003      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d04b      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d5a:	d02e      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006d5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d60:	d828      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d66:	d02a      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6c:	d822      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006d6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d72:	d026      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006d74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d78:	d81c      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d7e:	d010      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d84:	d816      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d01d      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d8e:	d111      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3304      	adds	r3, #4
 8006d94:	2100      	movs	r1, #0
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fc82 	bl	80076a0 <RCCEx_PLL2_Config>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006da0:	e012      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3324      	adds	r3, #36	; 0x24
 8006da6:	2102      	movs	r1, #2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fd2b 	bl	8007804 <RCCEx_PLL3_Config>
 8006dae:	4603      	mov	r3, r0
 8006db0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006db2:	e009      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	75fb      	strb	r3, [r7, #23]
      break;
 8006db8:	e006      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006dba:	bf00      	nop
 8006dbc:	e004      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006dbe:	bf00      	nop
 8006dc0:	e002      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006dc2:	bf00      	nop
 8006dc4:	e000      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dce:	4b9d      	ldr	r3, [pc, #628]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ddc:	4999      	ldr	r1, [pc, #612]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	658b      	str	r3, [r1, #88]	; 0x58
 8006de2:	e001      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0308 	and.w	r3, r3, #8
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d01a      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfe:	d10a      	bne.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3324      	adds	r3, #36	; 0x24
 8006e04:	2102      	movs	r1, #2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fcfc 	bl	8007804 <RCCEx_PLL3_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e16:	4b8b      	ldr	r3, [pc, #556]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e24:	4987      	ldr	r1, [pc, #540]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d01a      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e40:	d10a      	bne.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3324      	adds	r3, #36	; 0x24
 8006e46:	2102      	movs	r1, #2
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fcdb 	bl	8007804 <RCCEx_PLL3_Config>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e58:	4b7a      	ldr	r3, [pc, #488]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e66:	4977      	ldr	r1, [pc, #476]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d034      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e82:	d01d      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006e84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e88:	d817      	bhi.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e92:	d009      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006e94:	e011      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fbff 	bl	80076a0 <RCCEx_PLL2_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ea6:	e00c      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3324      	adds	r3, #36	; 0x24
 8006eac:	2102      	movs	r1, #2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fca8 	bl	8007804 <RCCEx_PLL3_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006eb8:	e003      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ebe:	e000      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10a      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ec8:	4b5e      	ldr	r3, [pc, #376]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ecc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ed6:	495b      	ldr	r1, [pc, #364]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	658b      	str	r3, [r1, #88]	; 0x58
 8006edc:	e001      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d033      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ef8:	d01c      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006efa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006efe:	d816      	bhi.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f04:	d003      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006f06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f0a:	d007      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006f0c:	e00f      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f0e:	4b4d      	ldr	r3, [pc, #308]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f12:	4a4c      	ldr	r2, [pc, #304]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f1a:	e00c      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3324      	adds	r3, #36	; 0x24
 8006f20:	2101      	movs	r1, #1
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fc6e 	bl	8007804 <RCCEx_PLL3_Config>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f2c:	e003      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	75fb      	strb	r3, [r7, #23]
      break;
 8006f32:	e000      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f36:	7dfb      	ldrb	r3, [r7, #23]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10a      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f3c:	4b41      	ldr	r3, [pc, #260]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f4a:	493e      	ldr	r1, [pc, #248]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	654b      	str	r3, [r1, #84]	; 0x54
 8006f50:	e001      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d029      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f6e:	d007      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006f70:	e00f      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f72:	4b34      	ldr	r3, [pc, #208]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	4a33      	ldr	r2, [pc, #204]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f7e:	e00b      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3304      	adds	r3, #4
 8006f84:	2102      	movs	r1, #2
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fb8a 	bl	80076a0 <RCCEx_PLL2_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f90:	e002      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
      break;
 8006f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d109      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f9e:	4b29      	ldr	r3, [pc, #164]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006faa:	4926      	ldr	r1, [pc, #152]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fb0:	e001      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3324      	adds	r3, #36	; 0x24
 8006fc6:	2102      	movs	r1, #2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fc1b 	bl	8007804 <RCCEx_PLL3_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d033      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fec:	d017      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ff2:	d811      	bhi.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff8:	d013      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ffe:	d80b      	bhi.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007000:	2b00      	cmp	r3, #0
 8007002:	d010      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007008:	d106      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800700a:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	4a0d      	ldr	r2, [pc, #52]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007014:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007016:	e007      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	75fb      	strb	r3, [r7, #23]
      break;
 800701c:	e004      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800701e:	bf00      	nop
 8007020:	e002      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007022:	bf00      	nop
 8007024:	e000      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10c      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800702e:	4b05      	ldr	r3, [pc, #20]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800703a:	4902      	ldr	r1, [pc, #8]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800703c:	4313      	orrs	r3, r2
 800703e:	654b      	str	r3, [r1, #84]	; 0x54
 8007040:	e004      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007042:	bf00      	nop
 8007044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d008      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007058:	4b31      	ldr	r3, [pc, #196]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800705a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800705c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007064:	492e      	ldr	r1, [pc, #184]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007066:	4313      	orrs	r3, r2
 8007068:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d009      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007076:	4b2a      	ldr	r3, [pc, #168]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007084:	4926      	ldr	r1, [pc, #152]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007086:	4313      	orrs	r3, r2
 8007088:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d008      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007096:	4b22      	ldr	r3, [pc, #136]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800709a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070a2:	491f      	ldr	r1, [pc, #124]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00d      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070b4:	4b1a      	ldr	r3, [pc, #104]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	4a19      	ldr	r2, [pc, #100]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070be:	6113      	str	r3, [r2, #16]
 80070c0:	4b17      	ldr	r3, [pc, #92]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80070ca:	4915      	ldr	r1, [pc, #84]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	da08      	bge.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070d8:	4b11      	ldr	r3, [pc, #68]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e4:	490e      	ldr	r1, [pc, #56]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070f6:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007104:	4906      	ldr	r1, [pc, #24]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007106:	4313      	orrs	r3, r2
 8007108:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800710a:	7dbb      	ldrb	r3, [r7, #22]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	e000      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	58024400 	.word	0x58024400

08007124 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007128:	f7ff f85a 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 800712c:	4602      	mov	r2, r0
 800712e:	4b06      	ldr	r3, [pc, #24]	; (8007148 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	091b      	lsrs	r3, r3, #4
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	4904      	ldr	r1, [pc, #16]	; (800714c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800713a:	5ccb      	ldrb	r3, [r1, r3]
 800713c:	f003 031f 	and.w	r3, r3, #31
 8007140:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007144:	4618      	mov	r0, r3
 8007146:	bd80      	pop	{r7, pc}
 8007148:	58024400 	.word	0x58024400
 800714c:	0800a634 	.word	0x0800a634

08007150 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007150:	b480      	push	{r7}
 8007152:	b089      	sub	sp, #36	; 0x24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007158:	4ba1      	ldr	r3, [pc, #644]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007162:	4b9f      	ldr	r3, [pc, #636]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007166:	0b1b      	lsrs	r3, r3, #12
 8007168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800716c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800716e:	4b9c      	ldr	r3, [pc, #624]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	091b      	lsrs	r3, r3, #4
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800717a:	4b99      	ldr	r3, [pc, #612]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717e:	08db      	lsrs	r3, r3, #3
 8007180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	fb02 f303 	mul.w	r3, r2, r3
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007192:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8111 	beq.w	80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	f000 8083 	beq.w	80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	f200 80a1 	bhi.w	80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d056      	beq.n	8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071ba:	e099      	b.n	80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071bc:	4b88      	ldr	r3, [pc, #544]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d02d      	beq.n	8007224 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071c8:	4b85      	ldr	r3, [pc, #532]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	08db      	lsrs	r3, r3, #3
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	4a84      	ldr	r2, [pc, #528]	; (80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071d4:	fa22 f303 	lsr.w	r3, r2, r3
 80071d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	ee07 3a90 	vmov	s15, r3
 80071e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f2:	4b7b      	ldr	r3, [pc, #492]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007202:	ed97 6a03 	vldr	s12, [r7, #12]
 8007206:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800720a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007222:	e087      	b.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007236:	4b6a      	ldr	r3, [pc, #424]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007246:	ed97 6a03 	vldr	s12, [r7, #12]
 800724a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800724e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800725a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800725e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007266:	e065      	b.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007272:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727a:	4b59      	ldr	r3, [pc, #356]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728a:	ed97 6a03 	vldr	s12, [r7, #12]
 800728e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800729e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072aa:	e043      	b.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072be:	4b48      	ldr	r3, [pc, #288]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072ee:	e021      	b.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007302:	4b37      	ldr	r3, [pc, #220]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007312:	ed97 6a03 	vldr	s12, [r7, #12]
 8007316:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800731a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007332:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007334:	4b2a      	ldr	r3, [pc, #168]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	0a5b      	lsrs	r3, r3, #9
 800733a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800734a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800734e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735a:	ee17 2a90 	vmov	r2, s15
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007362:	4b1f      	ldr	r3, [pc, #124]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	0c1b      	lsrs	r3, r3, #16
 8007368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736c:	ee07 3a90 	vmov	s15, r3
 8007370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800737c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007388:	ee17 2a90 	vmov	r2, s15
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007390:	4b13      	ldr	r3, [pc, #76]	; (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	0e1b      	lsrs	r3, r3, #24
 8007396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073b6:	ee17 2a90 	vmov	r2, s15
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073be:	e008      	b.n	80073d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	609a      	str	r2, [r3, #8]
}
 80073d2:	bf00      	nop
 80073d4:	3724      	adds	r7, #36	; 0x24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	58024400 	.word	0x58024400
 80073e4:	03d09000 	.word	0x03d09000
 80073e8:	46000000 	.word	0x46000000
 80073ec:	4c742400 	.word	0x4c742400
 80073f0:	4a742400 	.word	0x4a742400
 80073f4:	4af42400 	.word	0x4af42400

080073f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b089      	sub	sp, #36	; 0x24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007400:	4ba1      	ldr	r3, [pc, #644]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800740a:	4b9f      	ldr	r3, [pc, #636]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740e:	0d1b      	lsrs	r3, r3, #20
 8007410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007414:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007416:	4b9c      	ldr	r3, [pc, #624]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007422:	4b99      	ldr	r3, [pc, #612]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	08db      	lsrs	r3, r3, #3
 8007428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	fb02 f303 	mul.w	r3, r2, r3
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 8111 	beq.w	8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	2b02      	cmp	r3, #2
 800744a:	f000 8083 	beq.w	8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b02      	cmp	r3, #2
 8007452:	f200 80a1 	bhi.w	8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d056      	beq.n	8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007462:	e099      	b.n	8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007464:	4b88      	ldr	r3, [pc, #544]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0320 	and.w	r3, r3, #32
 800746c:	2b00      	cmp	r3, #0
 800746e:	d02d      	beq.n	80074cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007470:	4b85      	ldr	r3, [pc, #532]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	08db      	lsrs	r3, r3, #3
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	4a84      	ldr	r2, [pc, #528]	; (800768c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
 8007480:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	ee07 3a90 	vmov	s15, r3
 8007488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749a:	4b7b      	ldr	r3, [pc, #492]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074ca:	e087      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007694 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074de:	4b6a      	ldr	r3, [pc, #424]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80074f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800750e:	e065      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800751e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007522:	4b59      	ldr	r3, [pc, #356]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007532:	ed97 6a03 	vldr	s12, [r7, #12]
 8007536:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800753a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007552:	e043      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800769c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007566:	4b48      	ldr	r3, [pc, #288]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007576:	ed97 6a03 	vldr	s12, [r7, #12]
 800757a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800757e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800758a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007592:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007596:	e021      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075aa:	4b37      	ldr	r3, [pc, #220]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80075be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80075dc:	4b2a      	ldr	r3, [pc, #168]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	0a5b      	lsrs	r3, r3, #9
 80075e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007602:	ee17 2a90 	vmov	r2, s15
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800760a:	4b1f      	ldr	r3, [pc, #124]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	0c1b      	lsrs	r3, r3, #16
 8007610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007614:	ee07 3a90 	vmov	s15, r3
 8007618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007620:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007624:	edd7 6a07 	vldr	s13, [r7, #28]
 8007628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800762c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007630:	ee17 2a90 	vmov	r2, s15
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007638:	4b13      	ldr	r3, [pc, #76]	; (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800763a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763c:	0e1b      	lsrs	r3, r3, #24
 800763e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800764e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007652:	edd7 6a07 	vldr	s13, [r7, #28]
 8007656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800765e:	ee17 2a90 	vmov	r2, s15
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007666:	e008      	b.n	800767a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	609a      	str	r2, [r3, #8]
}
 800767a:	bf00      	nop
 800767c:	3724      	adds	r7, #36	; 0x24
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	58024400 	.word	0x58024400
 800768c:	03d09000 	.word	0x03d09000
 8007690:	46000000 	.word	0x46000000
 8007694:	4c742400 	.word	0x4c742400
 8007698:	4a742400 	.word	0x4a742400
 800769c:	4af42400 	.word	0x4af42400

080076a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076ae:	4b53      	ldr	r3, [pc, #332]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d101      	bne.n	80076be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e099      	b.n	80077f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076be:	4b4f      	ldr	r3, [pc, #316]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a4e      	ldr	r2, [pc, #312]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ca:	f7fa fad7 	bl	8001c7c <HAL_GetTick>
 80076ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076d0:	e008      	b.n	80076e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076d2:	f7fa fad3 	bl	8001c7c <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d901      	bls.n	80076e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e086      	b.n	80077f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076e4:	4b45      	ldr	r3, [pc, #276]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1f0      	bne.n	80076d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076f0:	4b42      	ldr	r3, [pc, #264]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	031b      	lsls	r3, r3, #12
 80076fe:	493f      	ldr	r1, [pc, #252]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007700:	4313      	orrs	r3, r2
 8007702:	628b      	str	r3, [r1, #40]	; 0x28
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	3b01      	subs	r3, #1
 800770a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	3b01      	subs	r3, #1
 8007714:	025b      	lsls	r3, r3, #9
 8007716:	b29b      	uxth	r3, r3
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	3b01      	subs	r3, #1
 8007720:	041b      	lsls	r3, r3, #16
 8007722:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	3b01      	subs	r3, #1
 800772e:	061b      	lsls	r3, r3, #24
 8007730:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007734:	4931      	ldr	r1, [pc, #196]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007736:	4313      	orrs	r3, r2
 8007738:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800773a:	4b30      	ldr	r3, [pc, #192]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 800773c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	492d      	ldr	r1, [pc, #180]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007748:	4313      	orrs	r3, r2
 800774a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800774c:	4b2b      	ldr	r3, [pc, #172]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 800774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007750:	f023 0220 	bic.w	r2, r3, #32
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	4928      	ldr	r1, [pc, #160]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 800775a:	4313      	orrs	r3, r2
 800775c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800775e:	4b27      	ldr	r3, [pc, #156]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	4a26      	ldr	r2, [pc, #152]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007764:	f023 0310 	bic.w	r3, r3, #16
 8007768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800776a:	4b24      	ldr	r3, [pc, #144]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 800776c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800776e:	4b24      	ldr	r3, [pc, #144]	; (8007800 <RCCEx_PLL2_Config+0x160>)
 8007770:	4013      	ands	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	69d2      	ldr	r2, [r2, #28]
 8007776:	00d2      	lsls	r2, r2, #3
 8007778:	4920      	ldr	r1, [pc, #128]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 800777a:	4313      	orrs	r3, r2
 800777c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800777e:	4b1f      	ldr	r3, [pc, #124]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	4a1e      	ldr	r2, [pc, #120]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007784:	f043 0310 	orr.w	r3, r3, #16
 8007788:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007790:	4b1a      	ldr	r3, [pc, #104]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	4a19      	ldr	r2, [pc, #100]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007796:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800779a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800779c:	e00f      	b.n	80077be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d106      	bne.n	80077b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80077a4:	4b15      	ldr	r3, [pc, #84]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	4a14      	ldr	r2, [pc, #80]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077b0:	e005      	b.n	80077be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077b2:	4b12      	ldr	r3, [pc, #72]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	4a11      	ldr	r2, [pc, #68]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077be:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a0e      	ldr	r2, [pc, #56]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ca:	f7fa fa57 	bl	8001c7c <HAL_GetTick>
 80077ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077d0:	e008      	b.n	80077e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80077d2:	f7fa fa53 	bl	8001c7c <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e006      	b.n	80077f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077e4:	4b05      	ldr	r3, [pc, #20]	; (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	58024400 	.word	0x58024400
 8007800:	ffff0007 	.word	0xffff0007

08007804 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007812:	4b53      	ldr	r3, [pc, #332]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	2b03      	cmp	r3, #3
 800781c:	d101      	bne.n	8007822 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e099      	b.n	8007956 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007822:	4b4f      	ldr	r3, [pc, #316]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a4e      	ldr	r2, [pc, #312]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800782c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800782e:	f7fa fa25 	bl	8001c7c <HAL_GetTick>
 8007832:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007834:	e008      	b.n	8007848 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007836:	f7fa fa21 	bl	8001c7c <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e086      	b.n	8007956 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007848:	4b45      	ldr	r3, [pc, #276]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f0      	bne.n	8007836 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007854:	4b42      	ldr	r3, [pc, #264]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	051b      	lsls	r3, r3, #20
 8007862:	493f      	ldr	r1, [pc, #252]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007864:	4313      	orrs	r3, r2
 8007866:	628b      	str	r3, [r1, #40]	; 0x28
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	3b01      	subs	r3, #1
 800786e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	3b01      	subs	r3, #1
 8007878:	025b      	lsls	r3, r3, #9
 800787a:	b29b      	uxth	r3, r3
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	3b01      	subs	r3, #1
 8007884:	041b      	lsls	r3, r3, #16
 8007886:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	3b01      	subs	r3, #1
 8007892:	061b      	lsls	r3, r3, #24
 8007894:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007898:	4931      	ldr	r1, [pc, #196]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 800789a:	4313      	orrs	r3, r2
 800789c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800789e:	4b30      	ldr	r3, [pc, #192]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	492d      	ldr	r1, [pc, #180]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078b0:	4b2b      	ldr	r3, [pc, #172]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	4928      	ldr	r1, [pc, #160]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078c2:	4b27      	ldr	r3, [pc, #156]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c6:	4a26      	ldr	r2, [pc, #152]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078ce:	4b24      	ldr	r3, [pc, #144]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078d2:	4b24      	ldr	r3, [pc, #144]	; (8007964 <RCCEx_PLL3_Config+0x160>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	69d2      	ldr	r2, [r2, #28]
 80078da:	00d2      	lsls	r2, r2, #3
 80078dc:	4920      	ldr	r1, [pc, #128]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078e2:	4b1f      	ldr	r3, [pc, #124]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	4a1e      	ldr	r2, [pc, #120]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d106      	bne.n	8007902 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078f4:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	4a19      	ldr	r2, [pc, #100]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007900:	e00f      	b.n	8007922 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d106      	bne.n	8007916 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007908:	4b15      	ldr	r3, [pc, #84]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	4a14      	ldr	r2, [pc, #80]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 800790e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007912:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007914:	e005      	b.n	8007922 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007916:	4b12      	ldr	r3, [pc, #72]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	4a11      	ldr	r2, [pc, #68]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 800791c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007920:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007922:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a0e      	ldr	r2, [pc, #56]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800792c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800792e:	f7fa f9a5 	bl	8001c7c <HAL_GetTick>
 8007932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007934:	e008      	b.n	8007948 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007936:	f7fa f9a1 	bl	8001c7c <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d901      	bls.n	8007948 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e006      	b.n	8007956 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007948:	4b05      	ldr	r3, [pc, #20]	; (8007960 <RCCEx_PLL3_Config+0x15c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0f0      	beq.n	8007936 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007954:	7bfb      	ldrb	r3, [r7, #15]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	58024400 	.word	0x58024400
 8007964:	ffff0007 	.word	0xffff0007

08007968 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e0f1      	b.n	8007b5e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a78      	ldr	r2, [pc, #480]	; (8007b68 <HAL_SPI_Init+0x200>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00f      	beq.n	80079aa <HAL_SPI_Init+0x42>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a77      	ldr	r2, [pc, #476]	; (8007b6c <HAL_SPI_Init+0x204>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00a      	beq.n	80079aa <HAL_SPI_Init+0x42>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a75      	ldr	r2, [pc, #468]	; (8007b70 <HAL_SPI_Init+0x208>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d005      	beq.n	80079aa <HAL_SPI_Init+0x42>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	2b0f      	cmp	r3, #15
 80079a4:	d901      	bls.n	80079aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e0d9      	b.n	8007b5e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fdb0 	bl	8008510 <SPI_GetPacketSize>
 80079b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a6c      	ldr	r2, [pc, #432]	; (8007b68 <HAL_SPI_Init+0x200>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00c      	beq.n	80079d6 <HAL_SPI_Init+0x6e>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a6a      	ldr	r2, [pc, #424]	; (8007b6c <HAL_SPI_Init+0x204>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d007      	beq.n	80079d6 <HAL_SPI_Init+0x6e>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a69      	ldr	r2, [pc, #420]	; (8007b70 <HAL_SPI_Init+0x208>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d002      	beq.n	80079d6 <HAL_SPI_Init+0x6e>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b08      	cmp	r3, #8
 80079d4:	d811      	bhi.n	80079fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079da:	4a63      	ldr	r2, [pc, #396]	; (8007b68 <HAL_SPI_Init+0x200>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d009      	beq.n	80079f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a61      	ldr	r2, [pc, #388]	; (8007b6c <HAL_SPI_Init+0x204>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d004      	beq.n	80079f4 <HAL_SPI_Init+0x8c>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a60      	ldr	r2, [pc, #384]	; (8007b70 <HAL_SPI_Init+0x208>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d104      	bne.n	80079fe <HAL_SPI_Init+0x96>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b10      	cmp	r3, #16
 80079f8:	d901      	bls.n	80079fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e0af      	b.n	8007b5e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d106      	bne.n	8007a18 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7f9 fdf4 	bl	8001600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0201 	bic.w	r2, r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007a3a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a44:	d119      	bne.n	8007a7a <HAL_SPI_Init+0x112>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a4e:	d103      	bne.n	8007a58 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d008      	beq.n	8007a6a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10c      	bne.n	8007a7a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a68:	d107      	bne.n	8007a7a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a78:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69da      	ldr	r2, [r3, #28]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a82:	431a      	orrs	r2, r3
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	431a      	orrs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8c:	ea42 0103 	orr.w	r1, r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ada:	ea42 0103 	orr.w	r1, r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d113      	bne.n	8007b1a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b04:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b18:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0201 	bic.w	r2, r2, #1
 8007b28:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40013000 	.word	0x40013000
 8007b6c:	40003800 	.word	0x40003800
 8007b70:	40003c00 	.word	0x40003c00

08007b74 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08a      	sub	sp, #40	; 0x28
 8007b78:	af02      	add	r7, sp, #8
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	603b      	str	r3, [r7, #0]
 8007b80:	4613      	mov	r3, r2
 8007b82:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3320      	adds	r3, #32
 8007b8a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d101      	bne.n	8007b9e <HAL_SPI_Transmit+0x2a>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e1d7      	b.n	8007f4e <HAL_SPI_Transmit+0x3da>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ba6:	f7fa f869 	bl	8001c7c <HAL_GetTick>
 8007baa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d007      	beq.n	8007bc8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007bb8:	2302      	movs	r3, #2
 8007bba:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007bc4:	7efb      	ldrb	r3, [r7, #27]
 8007bc6:	e1c2      	b.n	8007f4e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <HAL_SPI_Transmit+0x60>
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d107      	bne.n	8007be4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007be0:	7efb      	ldrb	r3, [r7, #27]
 8007be2:	e1b4      	b.n	8007f4e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2203      	movs	r2, #3
 8007be8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	88fa      	ldrh	r2, [r7, #6]
 8007bfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	88fa      	ldrh	r2, [r7, #6]
 8007c06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007c34:	d107      	bne.n	8007c46 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c44:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	4b96      	ldr	r3, [pc, #600]	; (8007ea8 <HAL_SPI_Transmit+0x334>)
 8007c4e:	4013      	ands	r3, r2
 8007c50:	88f9      	ldrh	r1, [r7, #6]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	6812      	ldr	r2, [r2, #0]
 8007c56:	430b      	orrs	r3, r1
 8007c58:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0201 	orr.w	r2, r2, #1
 8007c68:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c72:	d107      	bne.n	8007c84 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	2b0f      	cmp	r3, #15
 8007c8a:	d947      	bls.n	8007d1c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007c8c:	e03f      	b.n	8007d0e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d114      	bne.n	8007cc6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cac:	1d1a      	adds	r2, r3, #4
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007cc4:	e023      	b.n	8007d0e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cc6:	f7f9 ffd9 	bl	8001c7c <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d803      	bhi.n	8007cde <HAL_SPI_Transmit+0x16a>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cdc:	d102      	bne.n	8007ce4 <HAL_SPI_Transmit+0x170>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d114      	bne.n	8007d0e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 fb45 	bl	8008374 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e11f      	b.n	8007f4e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1b9      	bne.n	8007c8e <HAL_SPI_Transmit+0x11a>
 8007d1a:	e0f2      	b.n	8007f02 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	2b07      	cmp	r3, #7
 8007d22:	f240 80e7 	bls.w	8007ef4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007d26:	e05d      	b.n	8007de4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d132      	bne.n	8007d9c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d918      	bls.n	8007d74 <HAL_SPI_Transmit+0x200>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d014      	beq.n	8007d74 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6812      	ldr	r2, [r2, #0]
 8007d54:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d5a:	1d1a      	adds	r2, r3, #4
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	3b02      	subs	r3, #2
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007d72:	e037      	b.n	8007de4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d78:	881a      	ldrh	r2, [r3, #0]
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d82:	1c9a      	adds	r2, r3, #2
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	3b01      	subs	r3, #1
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007d9a:	e023      	b.n	8007de4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d9c:	f7f9 ff6e 	bl	8001c7c <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d803      	bhi.n	8007db4 <HAL_SPI_Transmit+0x240>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db2:	d102      	bne.n	8007dba <HAL_SPI_Transmit+0x246>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d114      	bne.n	8007de4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fada 	bl	8008374 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e0b4      	b.n	8007f4e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d19b      	bne.n	8007d28 <HAL_SPI_Transmit+0x1b4>
 8007df0:	e087      	b.n	8007f02 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d155      	bne.n	8007eac <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d918      	bls.n	8007e3e <HAL_SPI_Transmit+0x2ca>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e10:	2b40      	cmp	r3, #64	; 0x40
 8007e12:	d914      	bls.n	8007e3e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6812      	ldr	r2, [r2, #0]
 8007e1e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e24:	1d1a      	adds	r2, r3, #4
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	3b04      	subs	r3, #4
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007e3c:	e05a      	b.n	8007ef4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d917      	bls.n	8007e7a <HAL_SPI_Transmit+0x306>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d013      	beq.n	8007e7a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e56:	881a      	ldrh	r2, [r3, #0]
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e60:	1c9a      	adds	r2, r3, #2
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	3b02      	subs	r3, #2
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007e78:	e03c      	b.n	8007ef4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3320      	adds	r3, #32
 8007e84:	7812      	ldrb	r2, [r2, #0]
 8007e86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8c:	1c5a      	adds	r2, r3, #1
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007ea4:	e026      	b.n	8007ef4 <HAL_SPI_Transmit+0x380>
 8007ea6:	bf00      	nop
 8007ea8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007eac:	f7f9 fee6 	bl	8001c7c <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d803      	bhi.n	8007ec4 <HAL_SPI_Transmit+0x350>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec2:	d102      	bne.n	8007eca <HAL_SPI_Transmit+0x356>
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d114      	bne.n	8007ef4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 fa52 	bl	8008374 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ede:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e02c      	b.n	8007f4e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f47f af78 	bne.w	8007df2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2108      	movs	r1, #8
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 fad1 	bl	80084b4 <SPI_WaitOnFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d007      	beq.n	8007f28 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f1e:	f043 0220 	orr.w	r2, r3, #32
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fa23 	bl	8008374 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e000      	b.n	8007f4e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007f4c:	7efb      	ldrb	r3, [r7, #27]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3720      	adds	r7, #32
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop

08007f58 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	; 0x28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007f70:	6a3a      	ldr	r2, [r7, #32]
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4013      	ands	r3, r2
 8007f76:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f8a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3330      	adds	r3, #48	; 0x30
 8007f92:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d113      	bne.n	8007fc6 <HAL_SPI_IRQHandler+0x6e>
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	f003 0320 	and.w	r3, r3, #32
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10e      	bne.n	8007fc6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
    handled = 1UL;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10f      	bne.n	8007ff0 <HAL_SPI_IRQHandler+0x98>
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d105      	bne.n	8007ff0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
    handled = 1UL;
 8007fec:	2301      	movs	r3, #1
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	f003 0320 	and.w	r3, r3, #32
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10f      	bne.n	800801a <HAL_SPI_IRQHandler+0xc2>
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00a      	beq.n	800801a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800800a:	2b00      	cmp	r3, #0
 800800c:	d105      	bne.n	800801a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3
    handled = 1UL;
 8008016:	2301      	movs	r3, #1
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	2b00      	cmp	r3, #0
 800801e:	f040 815a 	bne.w	80082d6 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	f003 0308 	and.w	r3, r3, #8
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 808b 	beq.w	8008144 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	699a      	ldr	r2, [r3, #24]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f042 0208 	orr.w	r2, r2, #8
 800803c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f042 0210 	orr.w	r2, r2, #16
 800804c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	699a      	ldr	r2, [r3, #24]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800805c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	691a      	ldr	r2, [r3, #16]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0208 	bic.w	r2, r2, #8
 800806c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d13d      	bne.n	80080f8 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800807c:	e036      	b.n	80080ec <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	2b0f      	cmp	r3, #15
 8008084:	d90b      	bls.n	800809e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800808e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008090:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008096:	1d1a      	adds	r2, r3, #4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	665a      	str	r2, [r3, #100]	; 0x64
 800809c:	e01d      	b.n	80080da <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2b07      	cmp	r3, #7
 80080a4:	d90b      	bls.n	80080be <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	8812      	ldrh	r2, [r2, #0]
 80080ae:	b292      	uxth	r2, r2
 80080b0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b6:	1c9a      	adds	r2, r3, #2
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	665a      	str	r2, [r3, #100]	; 0x64
 80080bc:	e00d      	b.n	80080da <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ca:	7812      	ldrb	r2, [r2, #0]
 80080cc:	b2d2      	uxtb	r2, r2
 80080ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1c2      	bne.n	800807e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f93b 	bl	8008374 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f90b 	bl	800832c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008116:	e0e3      	b.n	80082e0 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008118:	7cfb      	ldrb	r3, [r7, #19]
 800811a:	2b05      	cmp	r3, #5
 800811c:	d103      	bne.n	8008126 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f8fa 	bl	8008318 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008124:	e0d9      	b.n	80082da <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008126:	7cfb      	ldrb	r3, [r7, #19]
 8008128:	2b04      	cmp	r3, #4
 800812a:	d103      	bne.n	8008134 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f8e9 	bl	8008304 <HAL_SPI_RxCpltCallback>
    return;
 8008132:	e0d2      	b.n	80082da <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008134:	7cfb      	ldrb	r3, [r7, #19]
 8008136:	2b03      	cmp	r3, #3
 8008138:	f040 80cf 	bne.w	80082da <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f8d7 	bl	80082f0 <HAL_SPI_TxCpltCallback>
    return;
 8008142:	e0ca      	b.n	80082da <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00d      	beq.n	800816a <HAL_SPI_IRQHandler+0x212>
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	f003 0308 	and.w	r3, r3, #8
 8008154:	2b00      	cmp	r3, #0
 8008156:	d008      	beq.n	800816a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699a      	ldr	r2, [r3, #24]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008166:	619a      	str	r2, [r3, #24]

    return;
 8008168:	e0ba      	b.n	80082e0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 80b5 	beq.w	80082e0 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00f      	beq.n	80081a0 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008186:	f043 0204 	orr.w	r2, r3, #4
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800819e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00f      	beq.n	80081ca <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b0:	f043 0201 	orr.w	r2, r3, #1
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	699a      	ldr	r2, [r3, #24]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081c8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00f      	beq.n	80081f4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081da:	f043 0208 	orr.w	r2, r3, #8
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081f2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	f003 0320 	and.w	r3, r3, #32
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00f      	beq.n	800821e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008204:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	699a      	ldr	r2, [r3, #24]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f042 0220 	orr.w	r2, r2, #32
 800821c:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008224:	2b00      	cmp	r3, #0
 8008226:	d05a      	beq.n	80082de <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0201 	bic.w	r2, r2, #1
 8008236:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6919      	ldr	r1, [r3, #16]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	4b29      	ldr	r3, [pc, #164]	; (80082e8 <HAL_SPI_IRQHandler+0x390>)
 8008244:	400b      	ands	r3, r1
 8008246:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800824e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008252:	d138      	bne.n	80082c6 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689a      	ldr	r2, [r3, #8]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008262:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d013      	beq.n	8008294 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008270:	4a1e      	ldr	r2, [pc, #120]	; (80082ec <HAL_SPI_IRQHandler+0x394>)
 8008272:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008278:	4618      	mov	r0, r3
 800827a:	f7fa fcd9 	bl	8002c30 <HAL_DMA_Abort_IT>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d007      	beq.n	8008294 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800828a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008298:	2b00      	cmp	r3, #0
 800829a:	d020      	beq.n	80082de <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082a0:	4a12      	ldr	r2, [pc, #72]	; (80082ec <HAL_SPI_IRQHandler+0x394>)
 80082a2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fa fcc1 	bl	8002c30 <HAL_DMA_Abort_IT>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d014      	beq.n	80082de <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80082c4:	e00b      	b.n	80082de <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f82c 	bl	800832c <HAL_SPI_ErrorCallback>
    return;
 80082d4:	e003      	b.n	80082de <HAL_SPI_IRQHandler+0x386>
    return;
 80082d6:	bf00      	nop
 80082d8:	e002      	b.n	80082e0 <HAL_SPI_IRQHandler+0x388>
    return;
 80082da:	bf00      	nop
 80082dc:	e000      	b.n	80082e0 <HAL_SPI_IRQHandler+0x388>
    return;
 80082de:	bf00      	nop
  }
}
 80082e0:	3728      	adds	r7, #40	; 0x28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	fffffc94 	.word	0xfffffc94
 80082ec:	08008341 	.word	0x08008341

080082f0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7ff ffe0 	bl	800832c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800836c:	bf00      	nop
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0208 	orr.w	r2, r2, #8
 8008392:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	699a      	ldr	r2, [r3, #24]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f042 0210 	orr.w	r2, r2, #16
 80083a2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 0201 	bic.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6919      	ldr	r1, [r3, #16]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	4b3c      	ldr	r3, [pc, #240]	; (80084b0 <SPI_CloseTransfer+0x13c>)
 80083c0:	400b      	ands	r3, r1
 80083c2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689a      	ldr	r2, [r3, #8]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80083d2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d014      	beq.n	800840a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f003 0320 	and.w	r3, r3, #32
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00f      	beq.n	800840a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	699a      	ldr	r2, [r3, #24]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f042 0220 	orr.w	r2, r2, #32
 8008408:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b03      	cmp	r3, #3
 8008414:	d014      	beq.n	8008440 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00f      	beq.n	8008440 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008426:	f043 0204 	orr.w	r2, r3, #4
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	699a      	ldr	r2, [r3, #24]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800843e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00f      	beq.n	800846a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008450:	f043 0201 	orr.w	r2, r3, #1
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	699a      	ldr	r2, [r3, #24]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008468:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00f      	beq.n	8008494 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800847a:	f043 0208 	orr.w	r2, r3, #8
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	699a      	ldr	r2, [r3, #24]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008492:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80084a4:	bf00      	nop
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	fffffc90 	.word	0xfffffc90

080084b4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80084c4:	e010      	b.n	80084e8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084c6:	f7f9 fbd9 	bl	8001c7c <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d803      	bhi.n	80084de <SPI_WaitOnFlagUntilTimeout+0x2a>
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084dc:	d102      	bne.n	80084e4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e00f      	b.n	8008508 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	695a      	ldr	r2, [r3, #20]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	4013      	ands	r3, r2
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	bf0c      	ite	eq
 80084f8:	2301      	moveq	r3, #1
 80084fa:	2300      	movne	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	461a      	mov	r2, r3
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	429a      	cmp	r2, r3
 8008504:	d0df      	beq.n	80084c6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851c:	095b      	lsrs	r3, r3, #5
 800851e:	3301      	adds	r3, #1
 8008520:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	3301      	adds	r3, #1
 8008528:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	3307      	adds	r3, #7
 800852e:	08db      	lsrs	r3, r3, #3
 8008530:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	fb02 f303 	mul.w	r3, r2, r3
}
 800853a:	4618      	mov	r0, r3
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e042      	b.n	80085de <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800855e:	2b00      	cmp	r3, #0
 8008560:	d106      	bne.n	8008570 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7f9 f91e 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2224      	movs	r2, #36	; 0x24
 8008574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f022 0201 	bic.w	r2, r2, #1
 8008586:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fbeb 	bl	8008d64 <UART_SetConfig>
 800858e:	4603      	mov	r3, r0
 8008590:	2b01      	cmp	r3, #1
 8008592:	d101      	bne.n	8008598 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e022      	b.n	80085de <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 f947 	bl	8009834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f042 0201 	orr.w	r2, r2, #1
 80085d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f001 f9ce 	bl	8009978 <UART_CheckIdleState>
 80085dc:	4603      	mov	r3, r0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b0ba      	sub	sp, #232	; 0xe8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800860e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008612:	f640 030f 	movw	r3, #2063	; 0x80f
 8008616:	4013      	ands	r3, r2
 8008618:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800861c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008620:	2b00      	cmp	r3, #0
 8008622:	d11b      	bne.n	800865c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008628:	f003 0320 	and.w	r3, r3, #32
 800862c:	2b00      	cmp	r3, #0
 800862e:	d015      	beq.n	800865c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008634:	f003 0320 	and.w	r3, r3, #32
 8008638:	2b00      	cmp	r3, #0
 800863a:	d105      	bne.n	8008648 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800863c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d009      	beq.n	800865c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 835a 	beq.w	8008d06 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	4798      	blx	r3
      }
      return;
 800865a:	e354      	b.n	8008d06 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800865c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 811f 	beq.w	80088a4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008666:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800866a:	4b8b      	ldr	r3, [pc, #556]	; (8008898 <HAL_UART_IRQHandler+0x2b0>)
 800866c:	4013      	ands	r3, r2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d106      	bne.n	8008680 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008672:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008676:	4b89      	ldr	r3, [pc, #548]	; (800889c <HAL_UART_IRQHandler+0x2b4>)
 8008678:	4013      	ands	r3, r2
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 8112 	beq.w	80088a4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b00      	cmp	r3, #0
 800868a:	d011      	beq.n	80086b0 <HAL_UART_IRQHandler+0xc8>
 800868c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2201      	movs	r2, #1
 800869e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086a6:	f043 0201 	orr.w	r2, r3, #1
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b4:	f003 0302 	and.w	r3, r3, #2
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d011      	beq.n	80086e0 <HAL_UART_IRQHandler+0xf8>
 80086bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00b      	beq.n	80086e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2202      	movs	r2, #2
 80086ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086d6:	f043 0204 	orr.w	r2, r3, #4
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e4:	f003 0304 	and.w	r3, r3, #4
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d011      	beq.n	8008710 <HAL_UART_IRQHandler+0x128>
 80086ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2204      	movs	r2, #4
 80086fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008706:	f043 0202 	orr.w	r2, r3, #2
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008714:	f003 0308 	and.w	r3, r3, #8
 8008718:	2b00      	cmp	r3, #0
 800871a:	d017      	beq.n	800874c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800871c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	d105      	bne.n	8008734 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008728:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800872c:	4b5a      	ldr	r3, [pc, #360]	; (8008898 <HAL_UART_IRQHandler+0x2b0>)
 800872e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00b      	beq.n	800874c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2208      	movs	r2, #8
 800873a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008742:	f043 0208 	orr.w	r2, r3, #8
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800874c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008754:	2b00      	cmp	r3, #0
 8008756:	d012      	beq.n	800877e <HAL_UART_IRQHandler+0x196>
 8008758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800875c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00c      	beq.n	800877e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800876c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008774:	f043 0220 	orr.w	r2, r3, #32
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 82c0 	beq.w	8008d0a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800878a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b00      	cmp	r3, #0
 8008794:	d013      	beq.n	80087be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d105      	bne.n	80087ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d007      	beq.n	80087be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d2:	2b40      	cmp	r3, #64	; 0x40
 80087d4:	d005      	beq.n	80087e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d04f      	beq.n	8008882 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f001 f9dc 	bl	8009ba0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f2:	2b40      	cmp	r3, #64	; 0x40
 80087f4:	d141      	bne.n	800887a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3308      	adds	r3, #8
 80087fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008804:	e853 3f00 	ldrex	r3, [r3]
 8008808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800880c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3308      	adds	r3, #8
 800881e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800882e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800883a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1d9      	bne.n	80087f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008846:	2b00      	cmp	r3, #0
 8008848:	d013      	beq.n	8008872 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800884e:	4a14      	ldr	r2, [pc, #80]	; (80088a0 <HAL_UART_IRQHandler+0x2b8>)
 8008850:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008856:	4618      	mov	r0, r3
 8008858:	f7fa f9ea 	bl	8002c30 <HAL_DMA_Abort_IT>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d017      	beq.n	8008892 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800886c:	4610      	mov	r0, r2
 800886e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008870:	e00f      	b.n	8008892 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fa60 	bl	8008d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008878:	e00b      	b.n	8008892 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa5c 	bl	8008d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008880:	e007      	b.n	8008892 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa58 	bl	8008d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008890:	e23b      	b.n	8008d0a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008892:	bf00      	nop
    return;
 8008894:	e239      	b.n	8008d0a <HAL_UART_IRQHandler+0x722>
 8008896:	bf00      	nop
 8008898:	10000001 	.word	0x10000001
 800889c:	04000120 	.word	0x04000120
 80088a0:	08009c6d 	.word	0x08009c6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	f040 81ce 	bne.w	8008c4a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80088ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b2:	f003 0310 	and.w	r3, r3, #16
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 81c7 	beq.w	8008c4a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80088bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c0:	f003 0310 	and.w	r3, r3, #16
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 81c0 	beq.w	8008c4a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2210      	movs	r2, #16
 80088d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088dc:	2b40      	cmp	r3, #64	; 0x40
 80088de:	f040 813b 	bne.w	8008b58 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a8b      	ldr	r2, [pc, #556]	; (8008b18 <HAL_UART_IRQHandler+0x530>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d059      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a89      	ldr	r2, [pc, #548]	; (8008b1c <HAL_UART_IRQHandler+0x534>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d053      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a87      	ldr	r2, [pc, #540]	; (8008b20 <HAL_UART_IRQHandler+0x538>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d04d      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a85      	ldr	r2, [pc, #532]	; (8008b24 <HAL_UART_IRQHandler+0x53c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d047      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a83      	ldr	r2, [pc, #524]	; (8008b28 <HAL_UART_IRQHandler+0x540>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d041      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a81      	ldr	r2, [pc, #516]	; (8008b2c <HAL_UART_IRQHandler+0x544>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d03b      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a7f      	ldr	r2, [pc, #508]	; (8008b30 <HAL_UART_IRQHandler+0x548>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d035      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a7d      	ldr	r2, [pc, #500]	; (8008b34 <HAL_UART_IRQHandler+0x54c>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d02f      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a7b      	ldr	r2, [pc, #492]	; (8008b38 <HAL_UART_IRQHandler+0x550>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d029      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a79      	ldr	r2, [pc, #484]	; (8008b3c <HAL_UART_IRQHandler+0x554>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d023      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a77      	ldr	r2, [pc, #476]	; (8008b40 <HAL_UART_IRQHandler+0x558>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01d      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a75      	ldr	r2, [pc, #468]	; (8008b44 <HAL_UART_IRQHandler+0x55c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d017      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a73      	ldr	r2, [pc, #460]	; (8008b48 <HAL_UART_IRQHandler+0x560>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d011      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a71      	ldr	r2, [pc, #452]	; (8008b4c <HAL_UART_IRQHandler+0x564>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00b      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a6f      	ldr	r2, [pc, #444]	; (8008b50 <HAL_UART_IRQHandler+0x568>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d005      	beq.n	80089a2 <HAL_UART_IRQHandler+0x3ba>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a6d      	ldr	r2, [pc, #436]	; (8008b54 <HAL_UART_IRQHandler+0x56c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d105      	bne.n	80089ae <HAL_UART_IRQHandler+0x3c6>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	e004      	b.n	80089b8 <HAL_UART_IRQHandler+0x3d0>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 81a4 	beq.w	8008d0e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089d0:	429a      	cmp	r2, r3
 80089d2:	f080 819c 	bcs.w	8008d0e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ea:	f000 8086 	beq.w	8008afa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089fa:	e853 3f00 	ldrex	r3, [r3]
 80089fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008a1c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a28:	e841 2300 	strex	r3, r2, [r1]
 8008a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1da      	bne.n	80089ee <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a4a:	f023 0301 	bic.w	r3, r3, #1
 8008a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3308      	adds	r3, #8
 8008a58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a68:	e841 2300 	strex	r3, r2, [r1]
 8008a6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1e1      	bne.n	8008a38 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3308      	adds	r3, #8
 8008a7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3308      	adds	r3, #8
 8008a94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008aa0:	e841 2300 	strex	r3, r2, [r1]
 8008aa4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e3      	bne.n	8008a74 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2220      	movs	r2, #32
 8008ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac2:	e853 3f00 	ldrex	r3, [r3]
 8008ac6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aca:	f023 0310 	bic.w	r3, r3, #16
 8008ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008adc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ade:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ae4:	e841 2300 	strex	r3, r2, [r1]
 8008ae8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e4      	bne.n	8008aba <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7f9 fd7d 	bl	80025f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f91c 	bl	8008d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b14:	e0fb      	b.n	8008d0e <HAL_UART_IRQHandler+0x726>
 8008b16:	bf00      	nop
 8008b18:	40020010 	.word	0x40020010
 8008b1c:	40020028 	.word	0x40020028
 8008b20:	40020040 	.word	0x40020040
 8008b24:	40020058 	.word	0x40020058
 8008b28:	40020070 	.word	0x40020070
 8008b2c:	40020088 	.word	0x40020088
 8008b30:	400200a0 	.word	0x400200a0
 8008b34:	400200b8 	.word	0x400200b8
 8008b38:	40020410 	.word	0x40020410
 8008b3c:	40020428 	.word	0x40020428
 8008b40:	40020440 	.word	0x40020440
 8008b44:	40020458 	.word	0x40020458
 8008b48:	40020470 	.word	0x40020470
 8008b4c:	40020488 	.word	0x40020488
 8008b50:	400204a0 	.word	0x400204a0
 8008b54:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 80cc 	beq.w	8008d12 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8008b7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 80c7 	beq.w	8008d12 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ba8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e4      	bne.n	8008b84 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bca:	6a3a      	ldr	r2, [r7, #32]
 8008bcc:	4b54      	ldr	r3, [pc, #336]	; (8008d20 <HAL_UART_IRQHandler+0x738>)
 8008bce:	4013      	ands	r3, r2
 8008bd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3308      	adds	r3, #8
 8008bda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bde:	633a      	str	r2, [r7, #48]	; 0x30
 8008be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be6:	e841 2300 	strex	r3, r2, [r1]
 8008bea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1e3      	bne.n	8008bba <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0310 	bic.w	r3, r3, #16
 8008c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c28:	61fb      	str	r3, [r7, #28]
 8008c2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	69b9      	ldr	r1, [r7, #24]
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	617b      	str	r3, [r7, #20]
   return(result);
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e4      	bne.n	8008c06 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f882 	bl	8008d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c48:	e063      	b.n	8008d12 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00e      	beq.n	8008c74 <HAL_UART_IRQHandler+0x68c>
 8008c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d008      	beq.n	8008c74 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008c6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 f83e 	bl	8009cee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c72:	e051      	b.n	8008d18 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d014      	beq.n	8008caa <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d105      	bne.n	8008c98 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d008      	beq.n	8008caa <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d03a      	beq.n	8008d16 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	4798      	blx	r3
    }
    return;
 8008ca8:	e035      	b.n	8008d16 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <HAL_UART_IRQHandler+0x6e2>
 8008cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 ffe8 	bl	8009c98 <UART_EndTransmit_IT>
    return;
 8008cc8:	e026      	b.n	8008d18 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d009      	beq.n	8008cea <HAL_UART_IRQHandler+0x702>
 8008cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f001 f817 	bl	8009d16 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ce8:	e016      	b.n	8008d18 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d010      	beq.n	8008d18 <HAL_UART_IRQHandler+0x730>
 8008cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	da0c      	bge.n	8008d18 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 ffff 	bl	8009d02 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d04:	e008      	b.n	8008d18 <HAL_UART_IRQHandler+0x730>
      return;
 8008d06:	bf00      	nop
 8008d08:	e006      	b.n	8008d18 <HAL_UART_IRQHandler+0x730>
    return;
 8008d0a:	bf00      	nop
 8008d0c:	e004      	b.n	8008d18 <HAL_UART_IRQHandler+0x730>
      return;
 8008d0e:	bf00      	nop
 8008d10:	e002      	b.n	8008d18 <HAL_UART_IRQHandler+0x730>
      return;
 8008d12:	bf00      	nop
 8008d14:	e000      	b.n	8008d18 <HAL_UART_IRQHandler+0x730>
    return;
 8008d16:	bf00      	nop
  }
}
 8008d18:	37e8      	adds	r7, #232	; 0xe8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	effffffe 	.word	0xeffffffe

08008d24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d68:	b092      	sub	sp, #72	; 0x48
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	689a      	ldr	r2, [r3, #8]
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	431a      	orrs	r2, r3
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	4bbe      	ldr	r3, [pc, #760]	; (800908c <UART_SetConfig+0x328>)
 8008d94:	4013      	ands	r3, r2
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	6812      	ldr	r2, [r2, #0]
 8008d9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d9c:	430b      	orrs	r3, r1
 8008d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	68da      	ldr	r2, [r3, #12]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4ab3      	ldr	r2, [pc, #716]	; (8009090 <UART_SetConfig+0x32c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d004      	beq.n	8008dd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	4baf      	ldr	r3, [pc, #700]	; (8009094 <UART_SetConfig+0x330>)
 8008dd8:	4013      	ands	r3, r2
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	6812      	ldr	r2, [r2, #0]
 8008dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008de0:	430b      	orrs	r3, r1
 8008de2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dea:	f023 010f 	bic.w	r1, r3, #15
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4aa6      	ldr	r2, [pc, #664]	; (8009098 <UART_SetConfig+0x334>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d177      	bne.n	8008ef4 <UART_SetConfig+0x190>
 8008e04:	4ba5      	ldr	r3, [pc, #660]	; (800909c <UART_SetConfig+0x338>)
 8008e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e0c:	2b28      	cmp	r3, #40	; 0x28
 8008e0e:	d86d      	bhi.n	8008eec <UART_SetConfig+0x188>
 8008e10:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <UART_SetConfig+0xb4>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008ebd 	.word	0x08008ebd
 8008e1c:	08008eed 	.word	0x08008eed
 8008e20:	08008eed 	.word	0x08008eed
 8008e24:	08008eed 	.word	0x08008eed
 8008e28:	08008eed 	.word	0x08008eed
 8008e2c:	08008eed 	.word	0x08008eed
 8008e30:	08008eed 	.word	0x08008eed
 8008e34:	08008eed 	.word	0x08008eed
 8008e38:	08008ec5 	.word	0x08008ec5
 8008e3c:	08008eed 	.word	0x08008eed
 8008e40:	08008eed 	.word	0x08008eed
 8008e44:	08008eed 	.word	0x08008eed
 8008e48:	08008eed 	.word	0x08008eed
 8008e4c:	08008eed 	.word	0x08008eed
 8008e50:	08008eed 	.word	0x08008eed
 8008e54:	08008eed 	.word	0x08008eed
 8008e58:	08008ecd 	.word	0x08008ecd
 8008e5c:	08008eed 	.word	0x08008eed
 8008e60:	08008eed 	.word	0x08008eed
 8008e64:	08008eed 	.word	0x08008eed
 8008e68:	08008eed 	.word	0x08008eed
 8008e6c:	08008eed 	.word	0x08008eed
 8008e70:	08008eed 	.word	0x08008eed
 8008e74:	08008eed 	.word	0x08008eed
 8008e78:	08008ed5 	.word	0x08008ed5
 8008e7c:	08008eed 	.word	0x08008eed
 8008e80:	08008eed 	.word	0x08008eed
 8008e84:	08008eed 	.word	0x08008eed
 8008e88:	08008eed 	.word	0x08008eed
 8008e8c:	08008eed 	.word	0x08008eed
 8008e90:	08008eed 	.word	0x08008eed
 8008e94:	08008eed 	.word	0x08008eed
 8008e98:	08008edd 	.word	0x08008edd
 8008e9c:	08008eed 	.word	0x08008eed
 8008ea0:	08008eed 	.word	0x08008eed
 8008ea4:	08008eed 	.word	0x08008eed
 8008ea8:	08008eed 	.word	0x08008eed
 8008eac:	08008eed 	.word	0x08008eed
 8008eb0:	08008eed 	.word	0x08008eed
 8008eb4:	08008eed 	.word	0x08008eed
 8008eb8:	08008ee5 	.word	0x08008ee5
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ec2:	e222      	b.n	800930a <UART_SetConfig+0x5a6>
 8008ec4:	2304      	movs	r3, #4
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eca:	e21e      	b.n	800930a <UART_SetConfig+0x5a6>
 8008ecc:	2308      	movs	r3, #8
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ed2:	e21a      	b.n	800930a <UART_SetConfig+0x5a6>
 8008ed4:	2310      	movs	r3, #16
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eda:	e216      	b.n	800930a <UART_SetConfig+0x5a6>
 8008edc:	2320      	movs	r3, #32
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ee2:	e212      	b.n	800930a <UART_SetConfig+0x5a6>
 8008ee4:	2340      	movs	r3, #64	; 0x40
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eea:	e20e      	b.n	800930a <UART_SetConfig+0x5a6>
 8008eec:	2380      	movs	r3, #128	; 0x80
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef2:	e20a      	b.n	800930a <UART_SetConfig+0x5a6>
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a69      	ldr	r2, [pc, #420]	; (80090a0 <UART_SetConfig+0x33c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d130      	bne.n	8008f60 <UART_SetConfig+0x1fc>
 8008efe:	4b67      	ldr	r3, [pc, #412]	; (800909c <UART_SetConfig+0x338>)
 8008f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	2b05      	cmp	r3, #5
 8008f08:	d826      	bhi.n	8008f58 <UART_SetConfig+0x1f4>
 8008f0a:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <UART_SetConfig+0x1ac>)
 8008f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f10:	08008f29 	.word	0x08008f29
 8008f14:	08008f31 	.word	0x08008f31
 8008f18:	08008f39 	.word	0x08008f39
 8008f1c:	08008f41 	.word	0x08008f41
 8008f20:	08008f49 	.word	0x08008f49
 8008f24:	08008f51 	.word	0x08008f51
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f2e:	e1ec      	b.n	800930a <UART_SetConfig+0x5a6>
 8008f30:	2304      	movs	r3, #4
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f36:	e1e8      	b.n	800930a <UART_SetConfig+0x5a6>
 8008f38:	2308      	movs	r3, #8
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f3e:	e1e4      	b.n	800930a <UART_SetConfig+0x5a6>
 8008f40:	2310      	movs	r3, #16
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f46:	e1e0      	b.n	800930a <UART_SetConfig+0x5a6>
 8008f48:	2320      	movs	r3, #32
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f4e:	e1dc      	b.n	800930a <UART_SetConfig+0x5a6>
 8008f50:	2340      	movs	r3, #64	; 0x40
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f56:	e1d8      	b.n	800930a <UART_SetConfig+0x5a6>
 8008f58:	2380      	movs	r3, #128	; 0x80
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f5e:	e1d4      	b.n	800930a <UART_SetConfig+0x5a6>
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a4f      	ldr	r2, [pc, #316]	; (80090a4 <UART_SetConfig+0x340>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d130      	bne.n	8008fcc <UART_SetConfig+0x268>
 8008f6a:	4b4c      	ldr	r3, [pc, #304]	; (800909c <UART_SetConfig+0x338>)
 8008f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6e:	f003 0307 	and.w	r3, r3, #7
 8008f72:	2b05      	cmp	r3, #5
 8008f74:	d826      	bhi.n	8008fc4 <UART_SetConfig+0x260>
 8008f76:	a201      	add	r2, pc, #4	; (adr r2, 8008f7c <UART_SetConfig+0x218>)
 8008f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7c:	08008f95 	.word	0x08008f95
 8008f80:	08008f9d 	.word	0x08008f9d
 8008f84:	08008fa5 	.word	0x08008fa5
 8008f88:	08008fad 	.word	0x08008fad
 8008f8c:	08008fb5 	.word	0x08008fb5
 8008f90:	08008fbd 	.word	0x08008fbd
 8008f94:	2300      	movs	r3, #0
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f9a:	e1b6      	b.n	800930a <UART_SetConfig+0x5a6>
 8008f9c:	2304      	movs	r3, #4
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fa2:	e1b2      	b.n	800930a <UART_SetConfig+0x5a6>
 8008fa4:	2308      	movs	r3, #8
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008faa:	e1ae      	b.n	800930a <UART_SetConfig+0x5a6>
 8008fac:	2310      	movs	r3, #16
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fb2:	e1aa      	b.n	800930a <UART_SetConfig+0x5a6>
 8008fb4:	2320      	movs	r3, #32
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fba:	e1a6      	b.n	800930a <UART_SetConfig+0x5a6>
 8008fbc:	2340      	movs	r3, #64	; 0x40
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fc2:	e1a2      	b.n	800930a <UART_SetConfig+0x5a6>
 8008fc4:	2380      	movs	r3, #128	; 0x80
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fca:	e19e      	b.n	800930a <UART_SetConfig+0x5a6>
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a35      	ldr	r2, [pc, #212]	; (80090a8 <UART_SetConfig+0x344>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d130      	bne.n	8009038 <UART_SetConfig+0x2d4>
 8008fd6:	4b31      	ldr	r3, [pc, #196]	; (800909c <UART_SetConfig+0x338>)
 8008fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fda:	f003 0307 	and.w	r3, r3, #7
 8008fde:	2b05      	cmp	r3, #5
 8008fe0:	d826      	bhi.n	8009030 <UART_SetConfig+0x2cc>
 8008fe2:	a201      	add	r2, pc, #4	; (adr r2, 8008fe8 <UART_SetConfig+0x284>)
 8008fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe8:	08009001 	.word	0x08009001
 8008fec:	08009009 	.word	0x08009009
 8008ff0:	08009011 	.word	0x08009011
 8008ff4:	08009019 	.word	0x08009019
 8008ff8:	08009021 	.word	0x08009021
 8008ffc:	08009029 	.word	0x08009029
 8009000:	2300      	movs	r3, #0
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009006:	e180      	b.n	800930a <UART_SetConfig+0x5a6>
 8009008:	2304      	movs	r3, #4
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800900e:	e17c      	b.n	800930a <UART_SetConfig+0x5a6>
 8009010:	2308      	movs	r3, #8
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009016:	e178      	b.n	800930a <UART_SetConfig+0x5a6>
 8009018:	2310      	movs	r3, #16
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901e:	e174      	b.n	800930a <UART_SetConfig+0x5a6>
 8009020:	2320      	movs	r3, #32
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009026:	e170      	b.n	800930a <UART_SetConfig+0x5a6>
 8009028:	2340      	movs	r3, #64	; 0x40
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902e:	e16c      	b.n	800930a <UART_SetConfig+0x5a6>
 8009030:	2380      	movs	r3, #128	; 0x80
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009036:	e168      	b.n	800930a <UART_SetConfig+0x5a6>
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a1b      	ldr	r2, [pc, #108]	; (80090ac <UART_SetConfig+0x348>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d142      	bne.n	80090c8 <UART_SetConfig+0x364>
 8009042:	4b16      	ldr	r3, [pc, #88]	; (800909c <UART_SetConfig+0x338>)
 8009044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009046:	f003 0307 	and.w	r3, r3, #7
 800904a:	2b05      	cmp	r3, #5
 800904c:	d838      	bhi.n	80090c0 <UART_SetConfig+0x35c>
 800904e:	a201      	add	r2, pc, #4	; (adr r2, 8009054 <UART_SetConfig+0x2f0>)
 8009050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009054:	0800906d 	.word	0x0800906d
 8009058:	08009075 	.word	0x08009075
 800905c:	0800907d 	.word	0x0800907d
 8009060:	08009085 	.word	0x08009085
 8009064:	080090b1 	.word	0x080090b1
 8009068:	080090b9 	.word	0x080090b9
 800906c:	2300      	movs	r3, #0
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009072:	e14a      	b.n	800930a <UART_SetConfig+0x5a6>
 8009074:	2304      	movs	r3, #4
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907a:	e146      	b.n	800930a <UART_SetConfig+0x5a6>
 800907c:	2308      	movs	r3, #8
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009082:	e142      	b.n	800930a <UART_SetConfig+0x5a6>
 8009084:	2310      	movs	r3, #16
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908a:	e13e      	b.n	800930a <UART_SetConfig+0x5a6>
 800908c:	cfff69f3 	.word	0xcfff69f3
 8009090:	58000c00 	.word	0x58000c00
 8009094:	11fff4ff 	.word	0x11fff4ff
 8009098:	40011000 	.word	0x40011000
 800909c:	58024400 	.word	0x58024400
 80090a0:	40004400 	.word	0x40004400
 80090a4:	40004800 	.word	0x40004800
 80090a8:	40004c00 	.word	0x40004c00
 80090ac:	40005000 	.word	0x40005000
 80090b0:	2320      	movs	r3, #32
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090b6:	e128      	b.n	800930a <UART_SetConfig+0x5a6>
 80090b8:	2340      	movs	r3, #64	; 0x40
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090be:	e124      	b.n	800930a <UART_SetConfig+0x5a6>
 80090c0:	2380      	movs	r3, #128	; 0x80
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c6:	e120      	b.n	800930a <UART_SetConfig+0x5a6>
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4acb      	ldr	r2, [pc, #812]	; (80093fc <UART_SetConfig+0x698>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d176      	bne.n	80091c0 <UART_SetConfig+0x45c>
 80090d2:	4bcb      	ldr	r3, [pc, #812]	; (8009400 <UART_SetConfig+0x69c>)
 80090d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090da:	2b28      	cmp	r3, #40	; 0x28
 80090dc:	d86c      	bhi.n	80091b8 <UART_SetConfig+0x454>
 80090de:	a201      	add	r2, pc, #4	; (adr r2, 80090e4 <UART_SetConfig+0x380>)
 80090e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e4:	08009189 	.word	0x08009189
 80090e8:	080091b9 	.word	0x080091b9
 80090ec:	080091b9 	.word	0x080091b9
 80090f0:	080091b9 	.word	0x080091b9
 80090f4:	080091b9 	.word	0x080091b9
 80090f8:	080091b9 	.word	0x080091b9
 80090fc:	080091b9 	.word	0x080091b9
 8009100:	080091b9 	.word	0x080091b9
 8009104:	08009191 	.word	0x08009191
 8009108:	080091b9 	.word	0x080091b9
 800910c:	080091b9 	.word	0x080091b9
 8009110:	080091b9 	.word	0x080091b9
 8009114:	080091b9 	.word	0x080091b9
 8009118:	080091b9 	.word	0x080091b9
 800911c:	080091b9 	.word	0x080091b9
 8009120:	080091b9 	.word	0x080091b9
 8009124:	08009199 	.word	0x08009199
 8009128:	080091b9 	.word	0x080091b9
 800912c:	080091b9 	.word	0x080091b9
 8009130:	080091b9 	.word	0x080091b9
 8009134:	080091b9 	.word	0x080091b9
 8009138:	080091b9 	.word	0x080091b9
 800913c:	080091b9 	.word	0x080091b9
 8009140:	080091b9 	.word	0x080091b9
 8009144:	080091a1 	.word	0x080091a1
 8009148:	080091b9 	.word	0x080091b9
 800914c:	080091b9 	.word	0x080091b9
 8009150:	080091b9 	.word	0x080091b9
 8009154:	080091b9 	.word	0x080091b9
 8009158:	080091b9 	.word	0x080091b9
 800915c:	080091b9 	.word	0x080091b9
 8009160:	080091b9 	.word	0x080091b9
 8009164:	080091a9 	.word	0x080091a9
 8009168:	080091b9 	.word	0x080091b9
 800916c:	080091b9 	.word	0x080091b9
 8009170:	080091b9 	.word	0x080091b9
 8009174:	080091b9 	.word	0x080091b9
 8009178:	080091b9 	.word	0x080091b9
 800917c:	080091b9 	.word	0x080091b9
 8009180:	080091b9 	.word	0x080091b9
 8009184:	080091b1 	.word	0x080091b1
 8009188:	2301      	movs	r3, #1
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800918e:	e0bc      	b.n	800930a <UART_SetConfig+0x5a6>
 8009190:	2304      	movs	r3, #4
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009196:	e0b8      	b.n	800930a <UART_SetConfig+0x5a6>
 8009198:	2308      	movs	r3, #8
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800919e:	e0b4      	b.n	800930a <UART_SetConfig+0x5a6>
 80091a0:	2310      	movs	r3, #16
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091a6:	e0b0      	b.n	800930a <UART_SetConfig+0x5a6>
 80091a8:	2320      	movs	r3, #32
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ae:	e0ac      	b.n	800930a <UART_SetConfig+0x5a6>
 80091b0:	2340      	movs	r3, #64	; 0x40
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091b6:	e0a8      	b.n	800930a <UART_SetConfig+0x5a6>
 80091b8:	2380      	movs	r3, #128	; 0x80
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091be:	e0a4      	b.n	800930a <UART_SetConfig+0x5a6>
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a8f      	ldr	r2, [pc, #572]	; (8009404 <UART_SetConfig+0x6a0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d130      	bne.n	800922c <UART_SetConfig+0x4c8>
 80091ca:	4b8d      	ldr	r3, [pc, #564]	; (8009400 <UART_SetConfig+0x69c>)
 80091cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ce:	f003 0307 	and.w	r3, r3, #7
 80091d2:	2b05      	cmp	r3, #5
 80091d4:	d826      	bhi.n	8009224 <UART_SetConfig+0x4c0>
 80091d6:	a201      	add	r2, pc, #4	; (adr r2, 80091dc <UART_SetConfig+0x478>)
 80091d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091dc:	080091f5 	.word	0x080091f5
 80091e0:	080091fd 	.word	0x080091fd
 80091e4:	08009205 	.word	0x08009205
 80091e8:	0800920d 	.word	0x0800920d
 80091ec:	08009215 	.word	0x08009215
 80091f0:	0800921d 	.word	0x0800921d
 80091f4:	2300      	movs	r3, #0
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091fa:	e086      	b.n	800930a <UART_SetConfig+0x5a6>
 80091fc:	2304      	movs	r3, #4
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009202:	e082      	b.n	800930a <UART_SetConfig+0x5a6>
 8009204:	2308      	movs	r3, #8
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800920a:	e07e      	b.n	800930a <UART_SetConfig+0x5a6>
 800920c:	2310      	movs	r3, #16
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009212:	e07a      	b.n	800930a <UART_SetConfig+0x5a6>
 8009214:	2320      	movs	r3, #32
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800921a:	e076      	b.n	800930a <UART_SetConfig+0x5a6>
 800921c:	2340      	movs	r3, #64	; 0x40
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009222:	e072      	b.n	800930a <UART_SetConfig+0x5a6>
 8009224:	2380      	movs	r3, #128	; 0x80
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800922a:	e06e      	b.n	800930a <UART_SetConfig+0x5a6>
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a75      	ldr	r2, [pc, #468]	; (8009408 <UART_SetConfig+0x6a4>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d130      	bne.n	8009298 <UART_SetConfig+0x534>
 8009236:	4b72      	ldr	r3, [pc, #456]	; (8009400 <UART_SetConfig+0x69c>)
 8009238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923a:	f003 0307 	and.w	r3, r3, #7
 800923e:	2b05      	cmp	r3, #5
 8009240:	d826      	bhi.n	8009290 <UART_SetConfig+0x52c>
 8009242:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <UART_SetConfig+0x4e4>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	08009261 	.word	0x08009261
 800924c:	08009269 	.word	0x08009269
 8009250:	08009271 	.word	0x08009271
 8009254:	08009279 	.word	0x08009279
 8009258:	08009281 	.word	0x08009281
 800925c:	08009289 	.word	0x08009289
 8009260:	2300      	movs	r3, #0
 8009262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009266:	e050      	b.n	800930a <UART_SetConfig+0x5a6>
 8009268:	2304      	movs	r3, #4
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800926e:	e04c      	b.n	800930a <UART_SetConfig+0x5a6>
 8009270:	2308      	movs	r3, #8
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009276:	e048      	b.n	800930a <UART_SetConfig+0x5a6>
 8009278:	2310      	movs	r3, #16
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800927e:	e044      	b.n	800930a <UART_SetConfig+0x5a6>
 8009280:	2320      	movs	r3, #32
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009286:	e040      	b.n	800930a <UART_SetConfig+0x5a6>
 8009288:	2340      	movs	r3, #64	; 0x40
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800928e:	e03c      	b.n	800930a <UART_SetConfig+0x5a6>
 8009290:	2380      	movs	r3, #128	; 0x80
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009296:	e038      	b.n	800930a <UART_SetConfig+0x5a6>
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a5b      	ldr	r2, [pc, #364]	; (800940c <UART_SetConfig+0x6a8>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d130      	bne.n	8009304 <UART_SetConfig+0x5a0>
 80092a2:	4b57      	ldr	r3, [pc, #348]	; (8009400 <UART_SetConfig+0x69c>)
 80092a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a6:	f003 0307 	and.w	r3, r3, #7
 80092aa:	2b05      	cmp	r3, #5
 80092ac:	d826      	bhi.n	80092fc <UART_SetConfig+0x598>
 80092ae:	a201      	add	r2, pc, #4	; (adr r2, 80092b4 <UART_SetConfig+0x550>)
 80092b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b4:	080092cd 	.word	0x080092cd
 80092b8:	080092d5 	.word	0x080092d5
 80092bc:	080092dd 	.word	0x080092dd
 80092c0:	080092e5 	.word	0x080092e5
 80092c4:	080092ed 	.word	0x080092ed
 80092c8:	080092f5 	.word	0x080092f5
 80092cc:	2302      	movs	r3, #2
 80092ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092d2:	e01a      	b.n	800930a <UART_SetConfig+0x5a6>
 80092d4:	2304      	movs	r3, #4
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092da:	e016      	b.n	800930a <UART_SetConfig+0x5a6>
 80092dc:	2308      	movs	r3, #8
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092e2:	e012      	b.n	800930a <UART_SetConfig+0x5a6>
 80092e4:	2310      	movs	r3, #16
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ea:	e00e      	b.n	800930a <UART_SetConfig+0x5a6>
 80092ec:	2320      	movs	r3, #32
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092f2:	e00a      	b.n	800930a <UART_SetConfig+0x5a6>
 80092f4:	2340      	movs	r3, #64	; 0x40
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092fa:	e006      	b.n	800930a <UART_SetConfig+0x5a6>
 80092fc:	2380      	movs	r3, #128	; 0x80
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009302:	e002      	b.n	800930a <UART_SetConfig+0x5a6>
 8009304:	2380      	movs	r3, #128	; 0x80
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a3f      	ldr	r2, [pc, #252]	; (800940c <UART_SetConfig+0x6a8>)
 8009310:	4293      	cmp	r3, r2
 8009312:	f040 80f8 	bne.w	8009506 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009316:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800931a:	2b20      	cmp	r3, #32
 800931c:	dc46      	bgt.n	80093ac <UART_SetConfig+0x648>
 800931e:	2b02      	cmp	r3, #2
 8009320:	f2c0 8082 	blt.w	8009428 <UART_SetConfig+0x6c4>
 8009324:	3b02      	subs	r3, #2
 8009326:	2b1e      	cmp	r3, #30
 8009328:	d87e      	bhi.n	8009428 <UART_SetConfig+0x6c4>
 800932a:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <UART_SetConfig+0x5cc>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	080093b3 	.word	0x080093b3
 8009334:	08009429 	.word	0x08009429
 8009338:	080093bb 	.word	0x080093bb
 800933c:	08009429 	.word	0x08009429
 8009340:	08009429 	.word	0x08009429
 8009344:	08009429 	.word	0x08009429
 8009348:	080093cb 	.word	0x080093cb
 800934c:	08009429 	.word	0x08009429
 8009350:	08009429 	.word	0x08009429
 8009354:	08009429 	.word	0x08009429
 8009358:	08009429 	.word	0x08009429
 800935c:	08009429 	.word	0x08009429
 8009360:	08009429 	.word	0x08009429
 8009364:	08009429 	.word	0x08009429
 8009368:	080093db 	.word	0x080093db
 800936c:	08009429 	.word	0x08009429
 8009370:	08009429 	.word	0x08009429
 8009374:	08009429 	.word	0x08009429
 8009378:	08009429 	.word	0x08009429
 800937c:	08009429 	.word	0x08009429
 8009380:	08009429 	.word	0x08009429
 8009384:	08009429 	.word	0x08009429
 8009388:	08009429 	.word	0x08009429
 800938c:	08009429 	.word	0x08009429
 8009390:	08009429 	.word	0x08009429
 8009394:	08009429 	.word	0x08009429
 8009398:	08009429 	.word	0x08009429
 800939c:	08009429 	.word	0x08009429
 80093a0:	08009429 	.word	0x08009429
 80093a4:	08009429 	.word	0x08009429
 80093a8:	0800941b 	.word	0x0800941b
 80093ac:	2b40      	cmp	r3, #64	; 0x40
 80093ae:	d037      	beq.n	8009420 <UART_SetConfig+0x6bc>
 80093b0:	e03a      	b.n	8009428 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093b2:	f7fd feb7 	bl	8007124 <HAL_RCCEx_GetD3PCLK1Freq>
 80093b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093b8:	e03c      	b.n	8009434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fd fec6 	bl	8007150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093c8:	e034      	b.n	8009434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ca:	f107 0318 	add.w	r3, r7, #24
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe f812 	bl	80073f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d8:	e02c      	b.n	8009434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093da:	4b09      	ldr	r3, [pc, #36]	; (8009400 <UART_SetConfig+0x69c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0320 	and.w	r3, r3, #32
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d016      	beq.n	8009414 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093e6:	4b06      	ldr	r3, [pc, #24]	; (8009400 <UART_SetConfig+0x69c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	08db      	lsrs	r3, r3, #3
 80093ec:	f003 0303 	and.w	r3, r3, #3
 80093f0:	4a07      	ldr	r2, [pc, #28]	; (8009410 <UART_SetConfig+0x6ac>)
 80093f2:	fa22 f303 	lsr.w	r3, r2, r3
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093f8:	e01c      	b.n	8009434 <UART_SetConfig+0x6d0>
 80093fa:	bf00      	nop
 80093fc:	40011400 	.word	0x40011400
 8009400:	58024400 	.word	0x58024400
 8009404:	40007800 	.word	0x40007800
 8009408:	40007c00 	.word	0x40007c00
 800940c:	58000c00 	.word	0x58000c00
 8009410:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009414:	4b9d      	ldr	r3, [pc, #628]	; (800968c <UART_SetConfig+0x928>)
 8009416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009418:	e00c      	b.n	8009434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800941a:	4b9d      	ldr	r3, [pc, #628]	; (8009690 <UART_SetConfig+0x92c>)
 800941c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800941e:	e009      	b.n	8009434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009426:	e005      	b.n	8009434 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009428:	2300      	movs	r3, #0
 800942a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009432:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009436:	2b00      	cmp	r3, #0
 8009438:	f000 81de 	beq.w	80097f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	4a94      	ldr	r2, [pc, #592]	; (8009694 <UART_SetConfig+0x930>)
 8009442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009446:	461a      	mov	r2, r3
 8009448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944a:	fbb3 f3f2 	udiv	r3, r3, r2
 800944e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	4613      	mov	r3, r2
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	4413      	add	r3, r2
 800945a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800945c:	429a      	cmp	r2, r3
 800945e:	d305      	bcc.n	800946c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009468:	429a      	cmp	r2, r3
 800946a:	d903      	bls.n	8009474 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009472:	e1c1      	b.n	80097f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009476:	2200      	movs	r2, #0
 8009478:	60bb      	str	r3, [r7, #8]
 800947a:	60fa      	str	r2, [r7, #12]
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	4a84      	ldr	r2, [pc, #528]	; (8009694 <UART_SetConfig+0x930>)
 8009482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009486:	b29b      	uxth	r3, r3
 8009488:	2200      	movs	r2, #0
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	607a      	str	r2, [r7, #4]
 800948e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009492:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009496:	f7f6 ff1f 	bl	80002d8 <__aeabi_uldivmod>
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	4610      	mov	r0, r2
 80094a0:	4619      	mov	r1, r3
 80094a2:	f04f 0200 	mov.w	r2, #0
 80094a6:	f04f 0300 	mov.w	r3, #0
 80094aa:	020b      	lsls	r3, r1, #8
 80094ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094b0:	0202      	lsls	r2, r0, #8
 80094b2:	6979      	ldr	r1, [r7, #20]
 80094b4:	6849      	ldr	r1, [r1, #4]
 80094b6:	0849      	lsrs	r1, r1, #1
 80094b8:	2000      	movs	r0, #0
 80094ba:	460c      	mov	r4, r1
 80094bc:	4605      	mov	r5, r0
 80094be:	eb12 0804 	adds.w	r8, r2, r4
 80094c2:	eb43 0905 	adc.w	r9, r3, r5
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	469a      	mov	sl, r3
 80094ce:	4693      	mov	fp, r2
 80094d0:	4652      	mov	r2, sl
 80094d2:	465b      	mov	r3, fp
 80094d4:	4640      	mov	r0, r8
 80094d6:	4649      	mov	r1, r9
 80094d8:	f7f6 fefe 	bl	80002d8 <__aeabi_uldivmod>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4613      	mov	r3, r2
 80094e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094ea:	d308      	bcc.n	80094fe <UART_SetConfig+0x79a>
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094f2:	d204      	bcs.n	80094fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094fa:	60da      	str	r2, [r3, #12]
 80094fc:	e17c      	b.n	80097f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009504:	e178      	b.n	80097f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	69db      	ldr	r3, [r3, #28]
 800950a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800950e:	f040 80c5 	bne.w	800969c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009512:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009516:	2b20      	cmp	r3, #32
 8009518:	dc48      	bgt.n	80095ac <UART_SetConfig+0x848>
 800951a:	2b00      	cmp	r3, #0
 800951c:	db7b      	blt.n	8009616 <UART_SetConfig+0x8b2>
 800951e:	2b20      	cmp	r3, #32
 8009520:	d879      	bhi.n	8009616 <UART_SetConfig+0x8b2>
 8009522:	a201      	add	r2, pc, #4	; (adr r2, 8009528 <UART_SetConfig+0x7c4>)
 8009524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009528:	080095b3 	.word	0x080095b3
 800952c:	080095bb 	.word	0x080095bb
 8009530:	08009617 	.word	0x08009617
 8009534:	08009617 	.word	0x08009617
 8009538:	080095c3 	.word	0x080095c3
 800953c:	08009617 	.word	0x08009617
 8009540:	08009617 	.word	0x08009617
 8009544:	08009617 	.word	0x08009617
 8009548:	080095d3 	.word	0x080095d3
 800954c:	08009617 	.word	0x08009617
 8009550:	08009617 	.word	0x08009617
 8009554:	08009617 	.word	0x08009617
 8009558:	08009617 	.word	0x08009617
 800955c:	08009617 	.word	0x08009617
 8009560:	08009617 	.word	0x08009617
 8009564:	08009617 	.word	0x08009617
 8009568:	080095e3 	.word	0x080095e3
 800956c:	08009617 	.word	0x08009617
 8009570:	08009617 	.word	0x08009617
 8009574:	08009617 	.word	0x08009617
 8009578:	08009617 	.word	0x08009617
 800957c:	08009617 	.word	0x08009617
 8009580:	08009617 	.word	0x08009617
 8009584:	08009617 	.word	0x08009617
 8009588:	08009617 	.word	0x08009617
 800958c:	08009617 	.word	0x08009617
 8009590:	08009617 	.word	0x08009617
 8009594:	08009617 	.word	0x08009617
 8009598:	08009617 	.word	0x08009617
 800959c:	08009617 	.word	0x08009617
 80095a0:	08009617 	.word	0x08009617
 80095a4:	08009617 	.word	0x08009617
 80095a8:	08009609 	.word	0x08009609
 80095ac:	2b40      	cmp	r3, #64	; 0x40
 80095ae:	d02e      	beq.n	800960e <UART_SetConfig+0x8aa>
 80095b0:	e031      	b.n	8009616 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095b2:	f7fc fe45 	bl	8006240 <HAL_RCC_GetPCLK1Freq>
 80095b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095b8:	e033      	b.n	8009622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095ba:	f7fc fe57 	bl	800626c <HAL_RCC_GetPCLK2Freq>
 80095be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095c0:	e02f      	b.n	8009622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fd fdc2 	bl	8007150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095d0:	e027      	b.n	8009622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095d2:	f107 0318 	add.w	r3, r7, #24
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fd ff0e 	bl	80073f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095e0:	e01f      	b.n	8009622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095e2:	4b2d      	ldr	r3, [pc, #180]	; (8009698 <UART_SetConfig+0x934>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0320 	and.w	r3, r3, #32
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d009      	beq.n	8009602 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095ee:	4b2a      	ldr	r3, [pc, #168]	; (8009698 <UART_SetConfig+0x934>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	08db      	lsrs	r3, r3, #3
 80095f4:	f003 0303 	and.w	r3, r3, #3
 80095f8:	4a24      	ldr	r2, [pc, #144]	; (800968c <UART_SetConfig+0x928>)
 80095fa:	fa22 f303 	lsr.w	r3, r2, r3
 80095fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009600:	e00f      	b.n	8009622 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009602:	4b22      	ldr	r3, [pc, #136]	; (800968c <UART_SetConfig+0x928>)
 8009604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009606:	e00c      	b.n	8009622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009608:	4b21      	ldr	r3, [pc, #132]	; (8009690 <UART_SetConfig+0x92c>)
 800960a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800960c:	e009      	b.n	8009622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800960e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009614:	e005      	b.n	8009622 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 80e7 	beq.w	80097f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	4a19      	ldr	r2, [pc, #100]	; (8009694 <UART_SetConfig+0x930>)
 8009630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009634:	461a      	mov	r2, r3
 8009636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009638:	fbb3 f3f2 	udiv	r3, r3, r2
 800963c:	005a      	lsls	r2, r3, #1
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	085b      	lsrs	r3, r3, #1
 8009644:	441a      	add	r2, r3
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	fbb2 f3f3 	udiv	r3, r2, r3
 800964e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	2b0f      	cmp	r3, #15
 8009654:	d916      	bls.n	8009684 <UART_SetConfig+0x920>
 8009656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800965c:	d212      	bcs.n	8009684 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	b29b      	uxth	r3, r3
 8009662:	f023 030f 	bic.w	r3, r3, #15
 8009666:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	085b      	lsrs	r3, r3, #1
 800966c:	b29b      	uxth	r3, r3
 800966e:	f003 0307 	and.w	r3, r3, #7
 8009672:	b29a      	uxth	r2, r3
 8009674:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009676:	4313      	orrs	r3, r2
 8009678:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009680:	60da      	str	r2, [r3, #12]
 8009682:	e0b9      	b.n	80097f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800968a:	e0b5      	b.n	80097f8 <UART_SetConfig+0xa94>
 800968c:	03d09000 	.word	0x03d09000
 8009690:	003d0900 	.word	0x003d0900
 8009694:	0801ced8 	.word	0x0801ced8
 8009698:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800969c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80096a0:	2b20      	cmp	r3, #32
 80096a2:	dc49      	bgt.n	8009738 <UART_SetConfig+0x9d4>
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	db7c      	blt.n	80097a2 <UART_SetConfig+0xa3e>
 80096a8:	2b20      	cmp	r3, #32
 80096aa:	d87a      	bhi.n	80097a2 <UART_SetConfig+0xa3e>
 80096ac:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <UART_SetConfig+0x950>)
 80096ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b2:	bf00      	nop
 80096b4:	0800973f 	.word	0x0800973f
 80096b8:	08009747 	.word	0x08009747
 80096bc:	080097a3 	.word	0x080097a3
 80096c0:	080097a3 	.word	0x080097a3
 80096c4:	0800974f 	.word	0x0800974f
 80096c8:	080097a3 	.word	0x080097a3
 80096cc:	080097a3 	.word	0x080097a3
 80096d0:	080097a3 	.word	0x080097a3
 80096d4:	0800975f 	.word	0x0800975f
 80096d8:	080097a3 	.word	0x080097a3
 80096dc:	080097a3 	.word	0x080097a3
 80096e0:	080097a3 	.word	0x080097a3
 80096e4:	080097a3 	.word	0x080097a3
 80096e8:	080097a3 	.word	0x080097a3
 80096ec:	080097a3 	.word	0x080097a3
 80096f0:	080097a3 	.word	0x080097a3
 80096f4:	0800976f 	.word	0x0800976f
 80096f8:	080097a3 	.word	0x080097a3
 80096fc:	080097a3 	.word	0x080097a3
 8009700:	080097a3 	.word	0x080097a3
 8009704:	080097a3 	.word	0x080097a3
 8009708:	080097a3 	.word	0x080097a3
 800970c:	080097a3 	.word	0x080097a3
 8009710:	080097a3 	.word	0x080097a3
 8009714:	080097a3 	.word	0x080097a3
 8009718:	080097a3 	.word	0x080097a3
 800971c:	080097a3 	.word	0x080097a3
 8009720:	080097a3 	.word	0x080097a3
 8009724:	080097a3 	.word	0x080097a3
 8009728:	080097a3 	.word	0x080097a3
 800972c:	080097a3 	.word	0x080097a3
 8009730:	080097a3 	.word	0x080097a3
 8009734:	08009795 	.word	0x08009795
 8009738:	2b40      	cmp	r3, #64	; 0x40
 800973a:	d02e      	beq.n	800979a <UART_SetConfig+0xa36>
 800973c:	e031      	b.n	80097a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800973e:	f7fc fd7f 	bl	8006240 <HAL_RCC_GetPCLK1Freq>
 8009742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009744:	e033      	b.n	80097ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009746:	f7fc fd91 	bl	800626c <HAL_RCC_GetPCLK2Freq>
 800974a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800974c:	e02f      	b.n	80097ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800974e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009752:	4618      	mov	r0, r3
 8009754:	f7fd fcfc 	bl	8007150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800975c:	e027      	b.n	80097ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800975e:	f107 0318 	add.w	r3, r7, #24
 8009762:	4618      	mov	r0, r3
 8009764:	f7fd fe48 	bl	80073f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800976c:	e01f      	b.n	80097ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800976e:	4b2d      	ldr	r3, [pc, #180]	; (8009824 <UART_SetConfig+0xac0>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 0320 	and.w	r3, r3, #32
 8009776:	2b00      	cmp	r3, #0
 8009778:	d009      	beq.n	800978e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800977a:	4b2a      	ldr	r3, [pc, #168]	; (8009824 <UART_SetConfig+0xac0>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	08db      	lsrs	r3, r3, #3
 8009780:	f003 0303 	and.w	r3, r3, #3
 8009784:	4a28      	ldr	r2, [pc, #160]	; (8009828 <UART_SetConfig+0xac4>)
 8009786:	fa22 f303 	lsr.w	r3, r2, r3
 800978a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800978c:	e00f      	b.n	80097ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800978e:	4b26      	ldr	r3, [pc, #152]	; (8009828 <UART_SetConfig+0xac4>)
 8009790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009792:	e00c      	b.n	80097ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009794:	4b25      	ldr	r3, [pc, #148]	; (800982c <UART_SetConfig+0xac8>)
 8009796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009798:	e009      	b.n	80097ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800979a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a0:	e005      	b.n	80097ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80097a2:	2300      	movs	r3, #0
 80097a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80097ac:	bf00      	nop
    }

    if (pclk != 0U)
 80097ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d021      	beq.n	80097f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	4a1d      	ldr	r2, [pc, #116]	; (8009830 <UART_SetConfig+0xacc>)
 80097ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097be:	461a      	mov	r2, r3
 80097c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	085b      	lsrs	r3, r3, #1
 80097cc:	441a      	add	r2, r3
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	2b0f      	cmp	r3, #15
 80097dc:	d909      	bls.n	80097f2 <UART_SetConfig+0xa8e>
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097e4:	d205      	bcs.n	80097f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	60da      	str	r2, [r3, #12]
 80097f0:	e002      	b.n	80097f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	2201      	movs	r2, #1
 8009804:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2200      	movs	r2, #0
 800980c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2200      	movs	r2, #0
 8009812:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009814:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009818:	4618      	mov	r0, r3
 800981a:	3748      	adds	r7, #72	; 0x48
 800981c:	46bd      	mov	sp, r7
 800981e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009822:	bf00      	nop
 8009824:	58024400 	.word	0x58024400
 8009828:	03d09000 	.word	0x03d09000
 800982c:	003d0900 	.word	0x003d0900
 8009830:	0801ced8 	.word	0x0801ced8

08009834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00a      	beq.n	800985e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	430a      	orrs	r2, r1
 800987e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009884:	f003 0304 	and.w	r3, r3, #4
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00a      	beq.n	80098a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	430a      	orrs	r2, r1
 80098a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a6:	f003 0308 	and.w	r3, r3, #8
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00a      	beq.n	80098c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	430a      	orrs	r2, r1
 80098c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c8:	f003 0310 	and.w	r3, r3, #16
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00a      	beq.n	80098e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ea:	f003 0320 	and.w	r3, r3, #32
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	430a      	orrs	r2, r1
 8009906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01a      	beq.n	800994a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009932:	d10a      	bne.n	800994a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00a      	beq.n	800996c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	605a      	str	r2, [r3, #4]
  }
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af02      	add	r7, sp, #8
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009988:	f7f8 f978 	bl	8001c7c <HAL_GetTick>
 800998c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 0308 	and.w	r3, r3, #8
 8009998:	2b08      	cmp	r3, #8
 800999a:	d10e      	bne.n	80099ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800999c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f82f 	bl	8009a0e <UART_WaitOnFlagUntilTimeout>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e025      	b.n	8009a06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d10e      	bne.n	80099e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f819 	bl	8009a0e <UART_WaitOnFlagUntilTimeout>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e00f      	b.n	8009a06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2220      	movs	r2, #32
 80099ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b09c      	sub	sp, #112	; 0x70
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	603b      	str	r3, [r7, #0]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a1e:	e0a9      	b.n	8009b74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a26:	f000 80a5 	beq.w	8009b74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a2a:	f7f8 f927 	bl	8001c7c <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d302      	bcc.n	8009a40 <UART_WaitOnFlagUntilTimeout+0x32>
 8009a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d140      	bne.n	8009ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a48:	e853 3f00 	ldrex	r3, [r3]
 8009a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a54:	667b      	str	r3, [r7, #100]	; 0x64
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a66:	e841 2300 	strex	r3, r2, [r1]
 8009a6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1e6      	bne.n	8009a40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3308      	adds	r3, #8
 8009a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a7c:	e853 3f00 	ldrex	r3, [r3]
 8009a80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a84:	f023 0301 	bic.w	r3, r3, #1
 8009a88:	663b      	str	r3, [r7, #96]	; 0x60
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3308      	adds	r3, #8
 8009a90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a92:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a9a:	e841 2300 	strex	r3, r2, [r1]
 8009a9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1e5      	bne.n	8009a72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e069      	b.n	8009b96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 0304 	and.w	r3, r3, #4
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d051      	beq.n	8009b74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ade:	d149      	bne.n	8009b74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ae8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	e853 3f00 	ldrex	r3, [r3]
 8009af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b08:	637b      	str	r3, [r7, #52]	; 0x34
 8009b0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e6      	bne.n	8009aea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3308      	adds	r3, #8
 8009b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	f023 0301 	bic.w	r3, r3, #1
 8009b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3308      	adds	r3, #8
 8009b3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b3c:	623a      	str	r2, [r7, #32]
 8009b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b40:	69f9      	ldr	r1, [r7, #28]
 8009b42:	6a3a      	ldr	r2, [r7, #32]
 8009b44:	e841 2300 	strex	r3, r2, [r1]
 8009b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e5      	bne.n	8009b1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2220      	movs	r2, #32
 8009b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e010      	b.n	8009b96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	69da      	ldr	r2, [r3, #28]
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	bf0c      	ite	eq
 8009b84:	2301      	moveq	r3, #1
 8009b86:	2300      	movne	r3, #0
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	f43f af46 	beq.w	8009a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3770      	adds	r7, #112	; 0x70
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
	...

08009ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b095      	sub	sp, #84	; 0x54
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb0:	e853 3f00 	ldrex	r3, [r3]
 8009bb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8009bc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bce:	e841 2300 	strex	r3, r2, [r1]
 8009bd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1e6      	bne.n	8009ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3308      	adds	r3, #8
 8009be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	e853 3f00 	ldrex	r3, [r3]
 8009be8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bea:	69fa      	ldr	r2, [r7, #28]
 8009bec:	4b1e      	ldr	r3, [pc, #120]	; (8009c68 <UART_EndRxTransfer+0xc8>)
 8009bee:	4013      	ands	r3, r2
 8009bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3308      	adds	r3, #8
 8009bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1e5      	bne.n	8009bda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d118      	bne.n	8009c48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	e853 3f00 	ldrex	r3, [r3]
 8009c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	f023 0310 	bic.w	r3, r3, #16
 8009c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	461a      	mov	r2, r3
 8009c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c34:	61bb      	str	r3, [r7, #24]
 8009c36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c38:	6979      	ldr	r1, [r7, #20]
 8009c3a:	69ba      	ldr	r2, [r7, #24]
 8009c3c:	e841 2300 	strex	r3, r2, [r1]
 8009c40:	613b      	str	r3, [r7, #16]
   return(result);
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1e6      	bne.n	8009c16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009c5c:	bf00      	nop
 8009c5e:	3754      	adds	r7, #84	; 0x54
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	effffffe 	.word	0xeffffffe

08009c6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f7ff f854 	bl	8008d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c90:	bf00      	nop
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b088      	sub	sp, #32
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	e853 3f00 	ldrex	r3, [r3]
 8009cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cb4:	61fb      	str	r3, [r7, #28]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	61bb      	str	r3, [r7, #24]
 8009cc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc2:	6979      	ldr	r1, [r7, #20]
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	e841 2300 	strex	r3, r2, [r1]
 8009cca:	613b      	str	r3, [r7, #16]
   return(result);
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1e6      	bne.n	8009ca0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7ff f81f 	bl	8008d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ce6:	bf00      	nop
 8009ce8:	3720      	adds	r7, #32
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d0a:	bf00      	nop
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr

08009d16 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d16:	b480      	push	{r7}
 8009d18:	b083      	sub	sp, #12
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d1e:	bf00      	nop
 8009d20:	370c      	adds	r7, #12
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b085      	sub	sp, #20
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d101      	bne.n	8009d40 <HAL_UARTEx_DisableFifoMode+0x16>
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	e027      	b.n	8009d90 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2224      	movs	r2, #36	; 0x24
 8009d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f022 0201 	bic.w	r2, r2, #1
 8009d66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2220      	movs	r2, #32
 8009d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d101      	bne.n	8009db4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009db0:	2302      	movs	r3, #2
 8009db2:	e02d      	b.n	8009e10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2224      	movs	r2, #36	; 0x24
 8009dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f022 0201 	bic.w	r2, r2, #1
 8009dda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	430a      	orrs	r2, r1
 8009dee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f84f 	bl	8009e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2220      	movs	r2, #32
 8009e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d101      	bne.n	8009e30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	e02d      	b.n	8009e8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2224      	movs	r2, #36	; 0x24
 8009e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f022 0201 	bic.w	r2, r2, #1
 8009e56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f811 	bl	8009e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2220      	movs	r2, #32
 8009e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d108      	bne.n	8009eb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009eb4:	e031      	b.n	8009f1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009eb6:	2310      	movs	r3, #16
 8009eb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009eba:	2310      	movs	r3, #16
 8009ebc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	0e5b      	lsrs	r3, r3, #25
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	f003 0307 	and.w	r3, r3, #7
 8009ecc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	0f5b      	lsrs	r3, r3, #29
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	f003 0307 	and.w	r3, r3, #7
 8009edc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	7b3a      	ldrb	r2, [r7, #12]
 8009ee2:	4911      	ldr	r1, [pc, #68]	; (8009f28 <UARTEx_SetNbDataToProcess+0x94>)
 8009ee4:	5c8a      	ldrb	r2, [r1, r2]
 8009ee6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009eea:	7b3a      	ldrb	r2, [r7, #12]
 8009eec:	490f      	ldr	r1, [pc, #60]	; (8009f2c <UARTEx_SetNbDataToProcess+0x98>)
 8009eee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	7b7a      	ldrb	r2, [r7, #13]
 8009f00:	4909      	ldr	r1, [pc, #36]	; (8009f28 <UARTEx_SetNbDataToProcess+0x94>)
 8009f02:	5c8a      	ldrb	r2, [r1, r2]
 8009f04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f08:	7b7a      	ldrb	r2, [r7, #13]
 8009f0a:	4908      	ldr	r1, [pc, #32]	; (8009f2c <UARTEx_SetNbDataToProcess+0x98>)
 8009f0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f1a:	bf00      	nop
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	0801cef0 	.word	0x0801cef0
 8009f2c:	0801cef8 	.word	0x0801cef8

08009f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f30:	b084      	sub	sp, #16
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	f107 001c 	add.w	r0, r7, #28
 8009f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d120      	bne.n	8009f8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68da      	ldr	r2, [r3, #12]
 8009f58:	4b2a      	ldr	r3, [pc, #168]	; (800a004 <USB_CoreInit+0xd4>)
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d105      	bne.n	8009f7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 faac 	bl	800a4dc <USB_CoreReset>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]
 8009f88:	e01a      	b.n	8009fc0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 faa0 	bl	800a4dc <USB_CoreReset>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d106      	bne.n	8009fb4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	639a      	str	r2, [r3, #56]	; 0x38
 8009fb2:	e005      	b.n	8009fc0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d116      	bne.n	8009ff4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009fd4:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <USB_CoreInit+0xd8>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	f043 0206 	orr.w	r2, r3, #6
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	f043 0220 	orr.w	r2, r3, #32
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a000:	b004      	add	sp, #16
 800a002:	4770      	bx	lr
 800a004:	ffbdffbf 	.word	0xffbdffbf
 800a008:	03ee0000 	.word	0x03ee0000

0800a00c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	f023 0201 	bic.w	r2, r3, #1
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	460b      	mov	r3, r1
 800a038:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a04a:	78fb      	ldrb	r3, [r7, #3]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d115      	bne.n	800a07c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a05c:	2001      	movs	r0, #1
 800a05e:	f7f7 fe19 	bl	8001c94 <HAL_Delay>
      ms++;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3301      	adds	r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fa29 	bl	800a4c0 <USB_GetMode>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b01      	cmp	r3, #1
 800a072:	d01e      	beq.n	800a0b2 <USB_SetCurrentMode+0x84>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b31      	cmp	r3, #49	; 0x31
 800a078:	d9f0      	bls.n	800a05c <USB_SetCurrentMode+0x2e>
 800a07a:	e01a      	b.n	800a0b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a07c:	78fb      	ldrb	r3, [r7, #3]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d115      	bne.n	800a0ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a08e:	2001      	movs	r0, #1
 800a090:	f7f7 fe00 	bl	8001c94 <HAL_Delay>
      ms++;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	3301      	adds	r3, #1
 800a098:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fa10 	bl	800a4c0 <USB_GetMode>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d005      	beq.n	800a0b2 <USB_SetCurrentMode+0x84>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b31      	cmp	r3, #49	; 0x31
 800a0aa:	d9f0      	bls.n	800a08e <USB_SetCurrentMode+0x60>
 800a0ac:	e001      	b.n	800a0b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e005      	b.n	800a0be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b32      	cmp	r3, #50	; 0x32
 800a0b6:	d101      	bne.n	800a0bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e000      	b.n	800a0be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b086      	sub	sp, #24
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a0d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	613b      	str	r3, [r7, #16]
 800a0e6:	e009      	b.n	800a0fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	3340      	adds	r3, #64	; 0x40
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	613b      	str	r3, [r7, #16]
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	2b0e      	cmp	r3, #14
 800a100:	d9f2      	bls.n	800a0e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a104:	2b00      	cmp	r3, #0
 800a106:	d11c      	bne.n	800a142 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a116:	f043 0302 	orr.w	r3, r3, #2
 800a11a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a120:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	e005      	b.n	800a14e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a146:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a154:	461a      	mov	r2, r3
 800a156:	2300      	movs	r3, #0
 800a158:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a160:	4619      	mov	r1, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a168:	461a      	mov	r2, r3
 800a16a:	680b      	ldr	r3, [r1, #0]
 800a16c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a170:	2b01      	cmp	r3, #1
 800a172:	d10c      	bne.n	800a18e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a176:	2b00      	cmp	r3, #0
 800a178:	d104      	bne.n	800a184 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a17a:	2100      	movs	r1, #0
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f965 	bl	800a44c <USB_SetDevSpeed>
 800a182:	e008      	b.n	800a196 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a184:	2101      	movs	r1, #1
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f960 	bl	800a44c <USB_SetDevSpeed>
 800a18c:	e003      	b.n	800a196 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a18e:	2103      	movs	r1, #3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f95b 	bl	800a44c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a196:	2110      	movs	r1, #16
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f8f3 	bl	800a384 <USB_FlushTxFifo>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f91f 	bl	800a3ec <USB_FlushRxFifo>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1be:	461a      	mov	r2, r3
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	2300      	movs	r3, #0
 800a1da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	613b      	str	r3, [r7, #16]
 800a1e0:	e043      	b.n	800a26a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	015a      	lsls	r2, r3, #5
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1f8:	d118      	bne.n	800a22c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4413      	add	r3, r2
 800a208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a20c:	461a      	mov	r2, r3
 800a20e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a212:	6013      	str	r3, [r2, #0]
 800a214:	e013      	b.n	800a23e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	015a      	lsls	r2, r3, #5
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	4413      	add	r3, r2
 800a21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a222:	461a      	mov	r2, r3
 800a224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a228:	6013      	str	r3, [r2, #0]
 800a22a:	e008      	b.n	800a23e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a238:	461a      	mov	r2, r3
 800a23a:	2300      	movs	r3, #0
 800a23c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a24a:	461a      	mov	r2, r3
 800a24c:	2300      	movs	r3, #0
 800a24e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	015a      	lsls	r2, r3, #5
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	4413      	add	r3, r2
 800a258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a25c:	461a      	mov	r2, r3
 800a25e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a262:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	3301      	adds	r3, #1
 800a268:	613b      	str	r3, [r7, #16]
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d3b7      	bcc.n	800a1e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a272:	2300      	movs	r3, #0
 800a274:	613b      	str	r3, [r7, #16]
 800a276:	e043      	b.n	800a300 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	015a      	lsls	r2, r3, #5
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	4413      	add	r3, r2
 800a280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a28a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a28e:	d118      	bne.n	800a2c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10a      	bne.n	800a2ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	015a      	lsls	r2, r3, #5
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	4413      	add	r3, r2
 800a29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a2a8:	6013      	str	r3, [r2, #0]
 800a2aa:	e013      	b.n	800a2d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	e008      	b.n	800a2d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	015a      	lsls	r2, r3, #5
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	015a      	lsls	r2, r3, #5
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	4413      	add	r3, r2
 800a2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	015a      	lsls	r2, r3, #5
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a2f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	613b      	str	r3, [r7, #16]
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	429a      	cmp	r2, r3
 800a306:	d3b7      	bcc.n	800a278 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a31a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a328:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d105      	bne.n	800a33c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	f043 0210 	orr.w	r2, r3, #16
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	699a      	ldr	r2, [r3, #24]
 800a340:	4b0e      	ldr	r3, [pc, #56]	; (800a37c <USB_DevInit+0x2b4>)
 800a342:	4313      	orrs	r3, r2
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d005      	beq.n	800a35a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	f043 0208 	orr.w	r2, r3, #8
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a35a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d105      	bne.n	800a36c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	699a      	ldr	r2, [r3, #24]
 800a364:	4b06      	ldr	r3, [pc, #24]	; (800a380 <USB_DevInit+0x2b8>)
 800a366:	4313      	orrs	r3, r2
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a378:	b004      	add	sp, #16
 800a37a:	4770      	bx	lr
 800a37c:	803c3800 	.word	0x803c3800
 800a380:	40000004 	.word	0x40000004

0800a384 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3301      	adds	r3, #1
 800a396:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4a13      	ldr	r2, [pc, #76]	; (800a3e8 <USB_FlushTxFifo+0x64>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d901      	bls.n	800a3a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e01b      	b.n	800a3dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	daf2      	bge.n	800a392 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	019b      	lsls	r3, r3, #6
 800a3b4:	f043 0220 	orr.w	r2, r3, #32
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	4a08      	ldr	r2, [pc, #32]	; (800a3e8 <USB_FlushTxFifo+0x64>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d901      	bls.n	800a3ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e006      	b.n	800a3dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	f003 0320 	and.w	r3, r3, #32
 800a3d6:	2b20      	cmp	r3, #32
 800a3d8:	d0f0      	beq.n	800a3bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr
 800a3e8:	00030d40 	.word	0x00030d40

0800a3ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	4a11      	ldr	r2, [pc, #68]	; (800a448 <USB_FlushRxFifo+0x5c>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d901      	bls.n	800a40a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a406:	2303      	movs	r3, #3
 800a408:	e018      	b.n	800a43c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	daf2      	bge.n	800a3f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a412:	2300      	movs	r3, #0
 800a414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2210      	movs	r2, #16
 800a41a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3301      	adds	r3, #1
 800a420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	4a08      	ldr	r2, [pc, #32]	; (800a448 <USB_FlushRxFifo+0x5c>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d901      	bls.n	800a42e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e006      	b.n	800a43c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	f003 0310 	and.w	r3, r3, #16
 800a436:	2b10      	cmp	r3, #16
 800a438:	d0f0      	beq.n	800a41c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3714      	adds	r7, #20
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr
 800a448:	00030d40 	.word	0x00030d40

0800a44c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	78fb      	ldrb	r3, [r7, #3]
 800a466:	68f9      	ldr	r1, [r7, #12]
 800a468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a46c:	4313      	orrs	r3, r2
 800a46e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a498:	f023 0303 	bic.w	r3, r3, #3
 800a49c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4ac:	f043 0302 	orr.w	r3, r3, #2
 800a4b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	f003 0301 	and.w	r3, r3, #1
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	4a13      	ldr	r2, [pc, #76]	; (800a540 <USB_CoreReset+0x64>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d901      	bls.n	800a4fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e01b      	b.n	800a532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	daf2      	bge.n	800a4e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a502:	2300      	movs	r3, #0
 800a504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	f043 0201 	orr.w	r2, r3, #1
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3301      	adds	r3, #1
 800a516:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4a09      	ldr	r2, [pc, #36]	; (800a540 <USB_CoreReset+0x64>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d901      	bls.n	800a524 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a520:	2303      	movs	r3, #3
 800a522:	e006      	b.n	800a532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d0f0      	beq.n	800a512 <USB_CoreReset+0x36>

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	00030d40 	.word	0x00030d40

0800a544 <__libc_init_array>:
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	4d0d      	ldr	r5, [pc, #52]	; (800a57c <__libc_init_array+0x38>)
 800a548:	4c0d      	ldr	r4, [pc, #52]	; (800a580 <__libc_init_array+0x3c>)
 800a54a:	1b64      	subs	r4, r4, r5
 800a54c:	10a4      	asrs	r4, r4, #2
 800a54e:	2600      	movs	r6, #0
 800a550:	42a6      	cmp	r6, r4
 800a552:	d109      	bne.n	800a568 <__libc_init_array+0x24>
 800a554:	4d0b      	ldr	r5, [pc, #44]	; (800a584 <__libc_init_array+0x40>)
 800a556:	4c0c      	ldr	r4, [pc, #48]	; (800a588 <__libc_init_array+0x44>)
 800a558:	f000 f820 	bl	800a59c <_init>
 800a55c:	1b64      	subs	r4, r4, r5
 800a55e:	10a4      	asrs	r4, r4, #2
 800a560:	2600      	movs	r6, #0
 800a562:	42a6      	cmp	r6, r4
 800a564:	d105      	bne.n	800a572 <__libc_init_array+0x2e>
 800a566:	bd70      	pop	{r4, r5, r6, pc}
 800a568:	f855 3b04 	ldr.w	r3, [r5], #4
 800a56c:	4798      	blx	r3
 800a56e:	3601      	adds	r6, #1
 800a570:	e7ee      	b.n	800a550 <__libc_init_array+0xc>
 800a572:	f855 3b04 	ldr.w	r3, [r5], #4
 800a576:	4798      	blx	r3
 800a578:	3601      	adds	r6, #1
 800a57a:	e7f2      	b.n	800a562 <__libc_init_array+0x1e>
 800a57c:	0801cf08 	.word	0x0801cf08
 800a580:	0801cf08 	.word	0x0801cf08
 800a584:	0801cf08 	.word	0x0801cf08
 800a588:	0801cf0c 	.word	0x0801cf0c

0800a58c <memset>:
 800a58c:	4402      	add	r2, r0
 800a58e:	4603      	mov	r3, r0
 800a590:	4293      	cmp	r3, r2
 800a592:	d100      	bne.n	800a596 <memset+0xa>
 800a594:	4770      	bx	lr
 800a596:	f803 1b01 	strb.w	r1, [r3], #1
 800a59a:	e7f9      	b.n	800a590 <memset+0x4>

0800a59c <_init>:
 800a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59e:	bf00      	nop
 800a5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a2:	bc08      	pop	{r3}
 800a5a4:	469e      	mov	lr, r3
 800a5a6:	4770      	bx	lr

0800a5a8 <_fini>:
 800a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5aa:	bf00      	nop
 800a5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ae:	bc08      	pop	{r3}
 800a5b0:	469e      	mov	lr, r3
 800a5b2:	4770      	bx	lr
