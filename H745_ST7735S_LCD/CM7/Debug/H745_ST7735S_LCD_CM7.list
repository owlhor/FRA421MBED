
H745_ST7735S_LCD_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b59c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b834  0800b834  0001b834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b874  0800b874  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800b874  0800b874  0001b874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b87c  0800b87c  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b87c  0800b87c  0001b87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b880  0800b880  0001b880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800b884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800b908  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800b968  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c908  24000144  0800b9c8  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400ca4c  0800b9c8  0002ca4c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ecf5  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003450  00000000  00000000  0003ee67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001380  00000000  00000000  000422b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001238  00000000  00000000  00043638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bdb1  00000000  00000000  00044870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b7e6  00000000  00000000  00080621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018532b  00000000  00000000  0009be07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00221132  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005420  00000000  00000000  00221184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000144 	.word	0x24000144
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b81c 	.word	0x0800b81c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000148 	.word	0x24000148
 80002d4:	0800b81c 	.word	0x0800b81c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <BMPDecoder>:
static stateBMP State = 0;
/*
 * BMP_idle & BMP_Header_2 => find 0x42 0x4D that is .bmp standard // if not find -> no continue
 * Then gradually keep data from .bmp header
 * */
void BMPDecoder(uint8_t dataIn, uint8_t *array) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
	static uint32_t Substate, offset; //// , imageSize
	/* Substate -> General purpose counter ex. 4-byte counter for data collect
	 * offset -> number of byte (that has read) counter
	 * */

	switch (State) {
 8000714:	4b98      	ldr	r3, [pc, #608]	; (8000978 <BMPDecoder+0x270>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b0c      	cmp	r3, #12
 800071a:	f200 81ac 	bhi.w	8000a76 <BMPDecoder+0x36e>
 800071e:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <BMPDecoder+0x1c>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	08000759 	.word	0x08000759
 8000728:	08000773 	.word	0x08000773
 800072c:	0800078f 	.word	0x0800078f
 8000730:	080007bb 	.word	0x080007bb
 8000734:	080007dd 	.word	0x080007dd
 8000738:	08000809 	.word	0x08000809
 800073c:	08000845 	.word	0x08000845
 8000740:	08000871 	.word	0x08000871
 8000744:	0800089d 	.word	0x0800089d
 8000748:	080008bf 	.word	0x080008bf
 800074c:	080008eb 	.word	0x080008eb
 8000750:	0800090d 	.word	0x0800090d
 8000754:	08000a37 	.word	0x08000a37
	case BMP_idle:

		if (dataIn == 0x42) {
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2b42      	cmp	r3, #66	; 0x42
 800075c:	d102      	bne.n	8000764 <BMPDecoder+0x5c>
			State = BMP_Header_2;
 800075e:	4b86      	ldr	r3, [pc, #536]	; (8000978 <BMPDecoder+0x270>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
		}
		Substate = 0;
 8000764:	4b85      	ldr	r3, [pc, #532]	; (800097c <BMPDecoder+0x274>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
		offset = 0;
 800076a:	4b85      	ldr	r3, [pc, #532]	; (8000980 <BMPDecoder+0x278>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
		break;
 8000770:	e181      	b.n	8000a76 <BMPDecoder+0x36e>

	case BMP_Header_2:
		if (dataIn == 0x4D) {
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b4d      	cmp	r3, #77	; 0x4d
 8000776:	d106      	bne.n	8000786 <BMPDecoder+0x7e>
			State = BMP_Size_4;
 8000778:	4b7f      	ldr	r3, [pc, #508]	; (8000978 <BMPDecoder+0x270>)
 800077a:	2202      	movs	r2, #2
 800077c:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 800077e:	4b7f      	ldr	r3, [pc, #508]	; (800097c <BMPDecoder+0x274>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
		} else {
			State = BMP_idle;
		}
		break;
 8000784:	e177      	b.n	8000a76 <BMPDecoder+0x36e>
			State = BMP_idle;
 8000786:	4b7c      	ldr	r3, [pc, #496]	; (8000978 <BMPDecoder+0x270>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
		break;
 800078c:	e173      	b.n	8000a76 <BMPDecoder+0x36e>

	//// keep .bmp file size at header
	case BMP_Size_4:
		size.U8[Substate] = dataIn;
 800078e:	4b7b      	ldr	r3, [pc, #492]	; (800097c <BMPDecoder+0x274>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	497c      	ldr	r1, [pc, #496]	; (8000984 <BMPDecoder+0x27c>)
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	54ca      	strb	r2, [r1, r3]
		Substate++;
 8000798:	4b78      	ldr	r3, [pc, #480]	; (800097c <BMPDecoder+0x274>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	4a77      	ldr	r2, [pc, #476]	; (800097c <BMPDecoder+0x274>)
 80007a0:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007a2:	4b76      	ldr	r3, [pc, #472]	; (800097c <BMPDecoder+0x274>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	f040 8150 	bne.w	8000a4c <BMPDecoder+0x344>
			State = BMP_Reserved0_4;
 80007ac:	4b72      	ldr	r3, [pc, #456]	; (8000978 <BMPDecoder+0x270>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80007b2:	4b72      	ldr	r3, [pc, #456]	; (800097c <BMPDecoder+0x274>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
		}
		break;
 80007b8:	e148      	b.n	8000a4c <BMPDecoder+0x344>
	case BMP_Reserved0_4:
		Substate++;
 80007ba:	4b70      	ldr	r3, [pc, #448]	; (800097c <BMPDecoder+0x274>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	4a6e      	ldr	r2, [pc, #440]	; (800097c <BMPDecoder+0x274>)
 80007c2:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007c4:	4b6d      	ldr	r3, [pc, #436]	; (800097c <BMPDecoder+0x274>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	f040 8141 	bne.w	8000a50 <BMPDecoder+0x348>
			State = BMP_Imagestartpoint_4;
 80007ce:	4b6a      	ldr	r3, [pc, #424]	; (8000978 <BMPDecoder+0x270>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80007d4:	4b69      	ldr	r3, [pc, #420]	; (800097c <BMPDecoder+0x274>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
		}
		break;
 80007da:	e139      	b.n	8000a50 <BMPDecoder+0x348>

	case BMP_Imagestartpoint_4:
		StartPoint.U8[Substate] = dataIn;
 80007dc:	4b67      	ldr	r3, [pc, #412]	; (800097c <BMPDecoder+0x274>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4969      	ldr	r1, [pc, #420]	; (8000988 <BMPDecoder+0x280>)
 80007e2:	79fa      	ldrb	r2, [r7, #7]
 80007e4:	54ca      	strb	r2, [r1, r3]
		Substate++;
 80007e6:	4b65      	ldr	r3, [pc, #404]	; (800097c <BMPDecoder+0x274>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	4a63      	ldr	r2, [pc, #396]	; (800097c <BMPDecoder+0x274>)
 80007ee:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007f0:	4b62      	ldr	r3, [pc, #392]	; (800097c <BMPDecoder+0x274>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	f040 812d 	bne.w	8000a54 <BMPDecoder+0x34c>
			State = BMP_SizeHeader_4;
 80007fa:	4b5f      	ldr	r3, [pc, #380]	; (8000978 <BMPDecoder+0x270>)
 80007fc:	2205      	movs	r2, #5
 80007fe:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000800:	4b5e      	ldr	r3, [pc, #376]	; (800097c <BMPDecoder+0x274>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
		}
		break;
 8000806:	e125      	b.n	8000a54 <BMPDecoder+0x34c>

	case BMP_SizeHeader_4:
		HeaderSize.U8[Substate] = dataIn;
 8000808:	4b5c      	ldr	r3, [pc, #368]	; (800097c <BMPDecoder+0x274>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	495f      	ldr	r1, [pc, #380]	; (800098c <BMPDecoder+0x284>)
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	54ca      	strb	r2, [r1, r3]
		Substate++;
 8000812:	4b5a      	ldr	r3, [pc, #360]	; (800097c <BMPDecoder+0x274>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a58      	ldr	r2, [pc, #352]	; (800097c <BMPDecoder+0x274>)
 800081a:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 800081c:	4b57      	ldr	r3, [pc, #348]	; (800097c <BMPDecoder+0x274>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b04      	cmp	r3, #4
 8000822:	f040 8119 	bne.w	8000a58 <BMPDecoder+0x350>
			//// Check header size 40 or not
			if (HeaderSize.U32 == 40) {
 8000826:	4b59      	ldr	r3, [pc, #356]	; (800098c <BMPDecoder+0x284>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b28      	cmp	r3, #40	; 0x28
 800082c:	d106      	bne.n	800083c <BMPDecoder+0x134>
				State = BMP_PicWidth_4;
 800082e:	4b52      	ldr	r3, [pc, #328]	; (8000978 <BMPDecoder+0x270>)
 8000830:	2206      	movs	r2, #6
 8000832:	701a      	strb	r2, [r3, #0]
				Substate = 0;
 8000834:	4b51      	ldr	r3, [pc, #324]	; (800097c <BMPDecoder+0x274>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
			} else {
				State = BMP_idle;
			}
		}
		break;
 800083a:	e10d      	b.n	8000a58 <BMPDecoder+0x350>
				State = BMP_idle;
 800083c:	4b4e      	ldr	r3, [pc, #312]	; (8000978 <BMPDecoder+0x270>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
		break;
 8000842:	e109      	b.n	8000a58 <BMPDecoder+0x350>
	case BMP_PicWidth_4:
		PW.U8[Substate] = dataIn;
 8000844:	4b4d      	ldr	r3, [pc, #308]	; (800097c <BMPDecoder+0x274>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4951      	ldr	r1, [pc, #324]	; (8000990 <BMPDecoder+0x288>)
 800084a:	79fa      	ldrb	r2, [r7, #7]
 800084c:	54ca      	strb	r2, [r1, r3]
		Substate++;
 800084e:	4b4b      	ldr	r3, [pc, #300]	; (800097c <BMPDecoder+0x274>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	4a49      	ldr	r2, [pc, #292]	; (800097c <BMPDecoder+0x274>)
 8000856:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 8000858:	4b48      	ldr	r3, [pc, #288]	; (800097c <BMPDecoder+0x274>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b04      	cmp	r3, #4
 800085e:	f040 80fd 	bne.w	8000a5c <BMPDecoder+0x354>
			State = BMP_PicHeight_4;
 8000862:	4b45      	ldr	r3, [pc, #276]	; (8000978 <BMPDecoder+0x270>)
 8000864:	2207      	movs	r2, #7
 8000866:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000868:	4b44      	ldr	r3, [pc, #272]	; (800097c <BMPDecoder+0x274>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
		}
		break;
 800086e:	e0f5      	b.n	8000a5c <BMPDecoder+0x354>
	case BMP_PicHeight_4:
		PH.U8[Substate] = dataIn;
 8000870:	4b42      	ldr	r3, [pc, #264]	; (800097c <BMPDecoder+0x274>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4947      	ldr	r1, [pc, #284]	; (8000994 <BMPDecoder+0x28c>)
 8000876:	79fa      	ldrb	r2, [r7, #7]
 8000878:	54ca      	strb	r2, [r1, r3]
		Substate++;
 800087a:	4b40      	ldr	r3, [pc, #256]	; (800097c <BMPDecoder+0x274>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	4a3e      	ldr	r2, [pc, #248]	; (800097c <BMPDecoder+0x274>)
 8000882:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 8000884:	4b3d      	ldr	r3, [pc, #244]	; (800097c <BMPDecoder+0x274>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b04      	cmp	r3, #4
 800088a:	f040 80e9 	bne.w	8000a60 <BMPDecoder+0x358>
			State = BMP_ColorPlanes_2;
 800088e:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <BMPDecoder+0x270>)
 8000890:	2208      	movs	r2, #8
 8000892:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000894:	4b39      	ldr	r3, [pc, #228]	; (800097c <BMPDecoder+0x274>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
		}
		break;
 800089a:	e0e1      	b.n	8000a60 <BMPDecoder+0x358>
	case BMP_ColorPlanes_2:

		Substate++;
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <BMPDecoder+0x274>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	4a36      	ldr	r2, [pc, #216]	; (800097c <BMPDecoder+0x274>)
 80008a4:	6013      	str	r3, [r2, #0]
		if (Substate == 2) {
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <BMPDecoder+0x274>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	f040 80da 	bne.w	8000a64 <BMPDecoder+0x35c>
			State = BMP_BitPerPixel_2;
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <BMPDecoder+0x270>)
 80008b2:	2209      	movs	r2, #9
 80008b4:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <BMPDecoder+0x274>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
		}
		break;
 80008bc:	e0d2      	b.n	8000a64 <BMPDecoder+0x35c>
	case BMP_BitPerPixel_2:
		BPS.U8[Substate] = dataIn;
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <BMPDecoder+0x274>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4935      	ldr	r1, [pc, #212]	; (8000998 <BMPDecoder+0x290>)
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	54ca      	strb	r2, [r1, r3]
		Substate++;
 80008c8:	4b2c      	ldr	r3, [pc, #176]	; (800097c <BMPDecoder+0x274>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	4a2b      	ldr	r2, [pc, #172]	; (800097c <BMPDecoder+0x274>)
 80008d0:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <BMPDecoder+0x274>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	f040 80c6 	bne.w	8000a68 <BMPDecoder+0x360>
			State = BMP_Notused1_n;
 80008dc:	4b26      	ldr	r3, [pc, #152]	; (8000978 <BMPDecoder+0x270>)
 80008de:	220a      	movs	r2, #10
 80008e0:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <BMPDecoder+0x274>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
		}
		break;
 80008e8:	e0be      	b.n	8000a68 <BMPDecoder+0x360>
	case BMP_Notused1_n:
		//// if reach first bit of picture data(0x36 == StartPoint.U32)
		//// Then start read .bmp
		if (offset == StartPoint.U32) {
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <BMPDecoder+0x280>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <BMPDecoder+0x278>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	f040 80ba 	bne.w	8000a6c <BMPDecoder+0x364>
			State = BMP_Pixeldata_n;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <BMPDecoder+0x270>)
 80008fa:	220b      	movs	r2, #11
 80008fc:	701a      	strb	r2, [r3, #0]
			array[0] = dataIn;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	79fa      	ldrb	r2, [r7, #7]
 8000902:	701a      	strb	r2, [r3, #0]
			Substate = 1;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <BMPDecoder+0x274>)
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
		}
		break;
 800090a:	e0af      	b.n	8000a6c <BMPDecoder+0x364>
	//////// Pixel read state
		//// 32-bit alignment
	case BMP_Pixeldata_n:
		if ((Substate / (IMG_W * 3)) < PH.U32) {
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <BMPDecoder+0x274>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a22      	ldr	r2, [pc, #136]	; (800099c <BMPDecoder+0x294>)
 8000912:	fba2 2303 	umull	r2, r3, r2, r3
 8000916:	0a1a      	lsrs	r2, r3, #8
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <BMPDecoder+0x28c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	d268      	bcs.n	80009f2 <BMPDecoder+0x2ea>

			if ((Substate % (IMG_W * 3)) < (PW.U32 * 3)) {
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <BMPDecoder+0x274>)
 8000922:	6819      	ldr	r1, [r3, #0]
 8000924:	4b1d      	ldr	r3, [pc, #116]	; (800099c <BMPDecoder+0x294>)
 8000926:	fba3 2301 	umull	r2, r3, r3, r1
 800092a:	0a1a      	lsrs	r2, r3, #8
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	01db      	lsls	r3, r3, #7
 8000934:	1aca      	subs	r2, r1, r3
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <BMPDecoder+0x288>)
 8000938:	6819      	ldr	r1, [r3, #0]
 800093a:	460b      	mov	r3, r1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	440b      	add	r3, r1
 8000940:	429a      	cmp	r2, r3
 8000942:	d209      	bcs.n	8000958 <BMPDecoder+0x250>
				array[Substate++] = dataIn;
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <BMPDecoder+0x274>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	490c      	ldr	r1, [pc, #48]	; (800097c <BMPDecoder+0x274>)
 800094c:	600a      	str	r2, [r1, #0]
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	79fa      	ldrb	r2, [r7, #7]
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	e054      	b.n	8000a02 <BMPDecoder+0x2fa>
			}
			else if(((Substate) % 4))
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <BMPDecoder+0x274>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f003 0303 	and.w	r3, r3, #3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d026      	beq.n	80009b2 <BMPDecoder+0x2aa>
			{
				array[Substate++] = dataIn;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <BMPDecoder+0x274>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	4904      	ldr	r1, [pc, #16]	; (800097c <BMPDecoder+0x274>)
 800096c:	600a      	str	r2, [r1, #0]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	4413      	add	r3, r2
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	e044      	b.n	8000a02 <BMPDecoder+0x2fa>
 8000978:	24000160 	.word	0x24000160
 800097c:	24000164 	.word	0x24000164
 8000980:	24000168 	.word	0x24000168
 8000984:	2400016c 	.word	0x2400016c
 8000988:	24000170 	.word	0x24000170
 800098c:	24000174 	.word	0x24000174
 8000990:	24000178 	.word	0x24000178
 8000994:	2400017c 	.word	0x2400017c
 8000998:	24000180 	.word	0x24000180
 800099c:	aaaaaaab 	.word	0xaaaaaaab
			}
			else
			{  //// if .bmp data has finished -> write the rest of array with black -> clear previous photo
				while ((Substate % (IMG_W * 3)) != 0) {
					array[Substate++] = 0; 	//fill blankdata with black
 80009a0:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <BMPDecoder+0x384>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	4939      	ldr	r1, [pc, #228]	; (8000a8c <BMPDecoder+0x384>)
 80009a8:	600a      	str	r2, [r1, #0]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
				while ((Substate % (IMG_W * 3)) != 0) {
 80009b2:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <BMPDecoder+0x384>)
 80009b4:	6819      	ldr	r1, [r3, #0]
 80009b6:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <BMPDecoder+0x388>)
 80009b8:	fba3 2301 	umull	r2, r3, r3, r1
 80009bc:	0a1a      	lsrs	r2, r3, #8
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	01db      	lsls	r3, r3, #7
 80009c6:	1aca      	subs	r2, r1, r3
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d1e9      	bne.n	80009a0 <BMPDecoder+0x298>
				}
				array[Substate++] = dataIn;
 80009cc:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <BMPDecoder+0x384>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	492e      	ldr	r1, [pc, #184]	; (8000a8c <BMPDecoder+0x384>)
 80009d4:	600a      	str	r2, [r1, #0]
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	4413      	add	r3, r2
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e010      	b.n	8000a02 <BMPDecoder+0x2fa>
			}
		} else {
			while (Substate / (IMG_W * 3) < IMG_H) {
				array[Substate++] = 0; 	//fill blankdata with black
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <BMPDecoder+0x384>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	4929      	ldr	r1, [pc, #164]	; (8000a8c <BMPDecoder+0x384>)
 80009e8:	600a      	str	r2, [r1, #0]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
			while (Substate / (IMG_W * 3) < IMG_H) {
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <BMPDecoder+0x384>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80009fa:	d3f1      	bcc.n	80009e0 <BMPDecoder+0x2d8>
			}

			State = BMP_Notused2_n;
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <BMPDecoder+0x38c>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	701a      	strb	r2, [r3, #0]

		}
		if (offset >= size.U32-1) {
 8000a02:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <BMPDecoder+0x390>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	1e5a      	subs	r2, r3, #1
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <BMPDecoder+0x394>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d82f      	bhi.n	8000a70 <BMPDecoder+0x368>
							State = BMP_idle;
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <BMPDecoder+0x38c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
							while (Substate / (IMG_W * 3) < IMG_H) {
 8000a16:	e008      	b.n	8000a2a <BMPDecoder+0x322>
										array[Substate++] = 0; 	//fill blankdata with black
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <BMPDecoder+0x384>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	491b      	ldr	r1, [pc, #108]	; (8000a8c <BMPDecoder+0x384>)
 8000a20:	600a      	str	r2, [r1, #0]
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	4413      	add	r3, r2
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
							while (Substate / (IMG_W * 3) < IMG_H) {
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <BMPDecoder+0x384>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000a32:	d3f1      	bcc.n	8000a18 <BMPDecoder+0x310>
									}
						}
		break;
 8000a34:	e01c      	b.n	8000a70 <BMPDecoder+0x368>
	case BMP_Notused2_n:
		if (offset >= size.U32-1) {
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <BMPDecoder+0x390>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	1e5a      	subs	r2, r3, #1
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <BMPDecoder+0x394>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d817      	bhi.n	8000a74 <BMPDecoder+0x36c>
			State = BMP_idle;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <BMPDecoder+0x38c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]

		}
		break;
 8000a4a:	e013      	b.n	8000a74 <BMPDecoder+0x36c>
		break;
 8000a4c:	bf00      	nop
 8000a4e:	e012      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a50:	bf00      	nop
 8000a52:	e010      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a54:	bf00      	nop
 8000a56:	e00e      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a58:	bf00      	nop
 8000a5a:	e00c      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a5c:	bf00      	nop
 8000a5e:	e00a      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a60:	bf00      	nop
 8000a62:	e008      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a64:	bf00      	nop
 8000a66:	e006      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a68:	bf00      	nop
 8000a6a:	e004      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a6c:	bf00      	nop
 8000a6e:	e002      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a74:	bf00      	nop

	}
	offset++;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <BMPDecoder+0x394>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <BMPDecoder+0x394>)
 8000a7e:	6013      	str	r3, [r2, #0]

}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	24000164 	.word	0x24000164
 8000a90:	aaaaaaab 	.word	0xaaaaaaab
 8000a94:	24000160 	.word	0x24000160
 8000a98:	2400016c 	.word	0x2400016c
 8000a9c:	24000168 	.word	0x24000168

08000aa0 <LCD_init>:
		0x2b,0x00,0x00,0x00,127,	//Set Row Area    [0,127] Pixel
		0x2c						//Write Memory
		//// Then, DMA data to display
};

void LCD_init(LCDHandle *lcd){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	////reset lcd
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6858      	ldr	r0, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f004 febb 	bl	8005830 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000aba:	200a      	movs	r0, #10
 8000abc:	f001 f948 	bl	8001d50 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6858      	ldr	r0, [r3, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	2201      	movs	r2, #1
 8000acc:	4619      	mov	r1, r3
 8000ace:	f004 feaf 	bl	8005830 <HAL_GPIO_WritePin>
	/// SPI Pin Select
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6898      	ldr	r0, [r3, #8]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	2201      	movs	r2, #1
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f004 fea6 	bl	8005830 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ae4:	200a      	movs	r0, #10
 8000ae6:	f001 f933 	bl	8001d50 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6898      	ldr	r0, [r3, #8]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	2200      	movs	r2, #0
 8000af6:	4619      	mov	r1, r3
 8000af8:	f004 fe9a 	bl	8005830 <HAL_GPIO_WritePin>


	//// Write Reset, Sleepout display on scan order
	//HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
	LCD_CMD_SPI_set(lcd);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f875 	bl	8000bec <LCD_CMD_SPI_set>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	2364      	movs	r3, #100	; 0x64
 8000b08:	2204      	movs	r2, #4
 8000b0a:	4923      	ldr	r1, [pc, #140]	; (8000b98 <LCD_init+0xf8>)
 8000b0c:	f007 fcb2 	bl	8008474 <HAL_SPI_Transmit>

	//// Write param of Scan order
	//HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
	LCD_DATA_SPI_set(lcd);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 f87c 	bl	8000c0e <LCD_DATA_SPI_set>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	2364      	movs	r3, #100	; 0x64
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	491f      	ldr	r1, [pc, #124]	; (8000b9c <LCD_init+0xfc>)
 8000b20:	f007 fca8 	bl	8008474 <HAL_SPI_Transmit>

	////CMD => Set C area
	//HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
	LCD_CMD_SPI_set(lcd);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 f861 	bl	8000bec <LCD_CMD_SPI_set>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	2201      	movs	r2, #1
 8000b32:	491b      	ldr	r1, [pc, #108]	; (8000ba0 <LCD_init+0x100>)
 8000b34:	f007 fc9e 	bl	8008474 <HAL_SPI_Transmit>

	////DATA => Set C area
	//HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
	LCD_DATA_SPI_set(lcd);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f868 	bl	8000c0e <LCD_DATA_SPI_set>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	2364      	movs	r3, #100	; 0x64
 8000b44:	2204      	movs	r2, #4
 8000b46:	4917      	ldr	r1, [pc, #92]	; (8000ba4 <LCD_init+0x104>)
 8000b48:	f007 fc94 	bl	8008474 <HAL_SPI_Transmit>

	////CMD => Set R area
	//HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
	LCD_CMD_SPI_set(lcd);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f000 f84d 	bl	8000bec <LCD_CMD_SPI_set>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6818      	ldr	r0, [r3, #0]
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4913      	ldr	r1, [pc, #76]	; (8000ba8 <LCD_init+0x108>)
 8000b5c:	f007 fc8a 	bl	8008474 <HAL_SPI_Transmit>

	////DATA => Set R area
	//HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
	LCD_DATA_SPI_set(lcd);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 f854 	bl	8000c0e <LCD_DATA_SPI_set>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	2364      	movs	r3, #100	; 0x64
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	490f      	ldr	r1, [pc, #60]	; (8000bac <LCD_init+0x10c>)
 8000b70:	f007 fc80 	bl	8008474 <HAL_SPI_Transmit>

	////CMD => Write to graphic memory
	//HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
	LCD_CMD_SPI_set(lcd);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f839 	bl	8000bec <LCD_CMD_SPI_set>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6818      	ldr	r0, [r3, #0]
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	2201      	movs	r2, #1
 8000b82:	490b      	ldr	r1, [pc, #44]	; (8000bb0 <LCD_init+0x110>)
 8000b84:	f007 fc76 	bl	8008474 <HAL_SPI_Transmit>

	////DATA => Set prepare image data.
	//HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
	LCD_DATA_SPI_set(lcd);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f000 f840 	bl	8000c0e <LCD_DATA_SPI_set>

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	24000008 	.word	0x24000008
 8000b9c:	2400000c 	.word	0x2400000c
 8000ba0:	2400000d 	.word	0x2400000d
 8000ba4:	2400000e 	.word	0x2400000e
 8000ba8:	24000012 	.word	0x24000012
 8000bac:	24000013 	.word	0x24000013
 8000bb0:	24000017 	.word	0x24000017

08000bb4 <LCD_flush>:

void LCD_flush(LCDHandle *lcd)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	//// Circular flush DMA
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000bc4:	4903      	ldr	r1, [pc, #12]	; (8000bd4 <LCD_flush+0x20>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f007 fe46 	bl	8008858 <HAL_SPI_Transmit_DMA>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	24000184 	.word	0x24000184

08000bd8 <LCDBufferAddr>:

uint8_t* LCDBufferAddr()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	return Framememory;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <LCDBufferAddr+0x10>)
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	24000184 	.word	0x24000184

08000bec <LCD_CMD_SPI_set>:

void LCD_CMD_SPI_set(LCDHandle *lcd){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	//Write D/CX, A0 pin
	// 0 => Control, Command address sent
	// 1 => Data sent
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68d8      	ldr	r0, [r3, #12]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	f004 fe15 	bl	8005830 <HAL_GPIO_WritePin>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <LCD_DATA_SPI_set>:

void LCD_DATA_SPI_set(LCDHandle *lcd){
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
	//Write D/CX, A0 pin
	// 0 => Control, Command address sent
	// 1 => Data sent
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68d8      	ldr	r0, [r3, #12]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	2201      	movs	r2, #1
 8000c22:	4619      	mov	r1, r3
 8000c24:	f004 fe04 	bl	8005830 <HAL_GPIO_WritePin>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <UARTInit>:
#include "stm32h7xx_hal.h"
#include "UART_LCD.h"


void UARTInit(UARTStucrture *uart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->RxLen);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	88db      	ldrh	r3, [r3, #6]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f00a fcea 	bl	800b618 <calloc>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->TxLen);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	889b      	ldrh	r3, [r3, #4]
 8000c50:	4619      	mov	r1, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	f00a fce0 	bl	800b618 <calloc>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	81da      	strh	r2, [r3, #14]

}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6919      	ldr	r1, [r3, #16]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	88db      	ldrh	r3, [r3, #6]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	f008 fad2 	bl	8009238 <HAL_UART_Receive_DMA>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	88db      	ldrh	r3, [r3, #6]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a3f      	ldr	r2, [pc, #252]	; (8000db0 <UARTGetRxHead+0x114>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d068      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a3c      	ldr	r2, [pc, #240]	; (8000db4 <UARTGetRxHead+0x118>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d061      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a3a      	ldr	r2, [pc, #232]	; (8000db8 <UARTGetRxHead+0x11c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d05a      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <UARTGetRxHead+0x120>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d053      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a35      	ldr	r2, [pc, #212]	; (8000dc0 <UARTGetRxHead+0x124>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d04c      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a32      	ldr	r2, [pc, #200]	; (8000dc4 <UARTGetRxHead+0x128>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d045      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a30      	ldr	r2, [pc, #192]	; (8000dc8 <UARTGetRxHead+0x12c>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d03e      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <UARTGetRxHead+0x130>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d037      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a2b      	ldr	r2, [pc, #172]	; (8000dd0 <UARTGetRxHead+0x134>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d030      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <UARTGetRxHead+0x138>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d029      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <UARTGetRxHead+0x13c>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d022      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <UARTGetRxHead+0x140>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d01b      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <UARTGetRxHead+0x144>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d014      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <UARTGetRxHead+0x148>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d00d      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <UARTGetRxHead+0x14c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d006      	beq.n	8000d8a <UARTGetRxHead+0xee>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a19      	ldr	r2, [pc, #100]	; (8000dec <UARTGetRxHead+0x150>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d105      	bne.n	8000d96 <UARTGetRxHead+0xfa>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	e004      	b.n	8000da0 <UARTGetRxHead+0x104>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	1acb      	subs	r3, r1, r3
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40020010 	.word	0x40020010
 8000db4:	40020028 	.word	0x40020028
 8000db8:	40020040 	.word	0x40020040
 8000dbc:	40020058 	.word	0x40020058
 8000dc0:	40020070 	.word	0x40020070
 8000dc4:	40020088 	.word	0x40020088
 8000dc8:	400200a0 	.word	0x400200a0
 8000dcc:	400200b8 	.word	0x400200b8
 8000dd0:	40020410 	.word	0x40020410
 8000dd4:	40020428 	.word	0x40020428
 8000dd8:	40020440 	.word	0x40020440
 8000ddc:	40020458 	.word	0x40020458
 8000de0:	40020470 	.word	0x40020470
 8000de4:	40020488 	.word	0x40020488
 8000de8:	400204a0 	.word	0x400204a0
 8000dec:	400204b8 	.word	0x400204b8

08000df0 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dfc:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	8a9b      	ldrh	r3, [r3, #20]
 8000e02:	461c      	mov	r4, r3
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff49 	bl	8000c9c <UARTGetRxHead>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	d013      	beq.n	8000e38 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	8a92      	ldrh	r2, [r2, #20]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	8a9b      	ldrh	r3, [r3, #20]
 8000e22:	3301      	adds	r3, #1
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	88d2      	ldrh	r2, [r2, #6]
 8000e28:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e2c:	fb01 f202 	mul.w	r2, r1, r2
 8000e30:	1a9b      	subs	r3, r3, r2
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8000e38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd90      	pop	{r4, r7, pc}

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e4e:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e50:	bf00      	nop
 8000e52:	4b45      	ldr	r3, [pc, #276]	; (8000f68 <main+0x124>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d004      	beq.n	8000e68 <main+0x24>
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	60fa      	str	r2, [r7, #12]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	dcf4      	bgt.n	8000e52 <main+0xe>
  if ( timeout < 0 )
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	da01      	bge.n	8000e72 <main+0x2e>
  {
  Error_Handler();
 8000e6e:	f000 fb01 	bl	8001474 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e72:	f000 fedb 	bl	8001c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e76:	f000 f885 	bl	8000f84 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e7a:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <main+0x124>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	4a39      	ldr	r2, [pc, #228]	; (8000f68 <main+0x124>)
 8000e82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8a:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <main+0x124>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f004 fce3 	bl	8005864 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f004 fcf9 	bl	8005898 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eaa:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000eac:	bf00      	nop
 8000eae:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <main+0x124>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d104      	bne.n	8000ec4 <main+0x80>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	60fa      	str	r2, [r7, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dcf4      	bgt.n	8000eae <main+0x6a>
if ( timeout < 0 )
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da01      	bge.n	8000ece <main+0x8a>
{
Error_Handler();
 8000eca:	f000 fad3 	bl	8001474 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ece:	f000 fa31 	bl	8001334 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ed2:	f000 f8dd 	bl	8001090 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ed6:	f000 f97f 	bl	80011d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000eda:	f000 f9c9 	bl	8001270 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000ede:	f000 f923 	bl	8001128 <MX_SPI1_Init>
  MX_DMA_Init();
 8000ee2:	f000 f9f7 	bl	80012d4 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  	ST7735S.hspi = &hspi1;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <main+0x128>)
 8000ee8:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <main+0x12c>)
 8000eea:	601a      	str	r2, [r3, #0]
  	ST7735S.CSPort = GPIOD;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <main+0x128>)
 8000eee:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <main+0x130>)
 8000ef0:	609a      	str	r2, [r3, #8]
  	ST7735S.CSPin = GPIO_PIN_14;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <main+0x128>)
 8000ef4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef8:	615a      	str	r2, [r3, #20]
  	ST7735S.DCPort = GPIOD;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <main+0x128>)
 8000efc:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <main+0x130>)
 8000efe:	60da      	str	r2, [r3, #12]
  	ST7735S.DCPin = GPIO_PIN_15;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <main+0x128>)
 8000f02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f06:	619a      	str	r2, [r3, #24]
  	ST7735S.RstPort = GPIOG;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <main+0x128>)
 8000f0a:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <main+0x134>)
 8000f0c:	605a      	str	r2, [r3, #4]
  	ST7735S.RstPin = GPIO_PIN_9;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <main+0x128>)
 8000f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f14:	611a      	str	r2, [r3, #16]
  	LCD_init(&ST7735S);
 8000f16:	4815      	ldr	r0, [pc, #84]	; (8000f6c <main+0x128>)
 8000f18:	f7ff fdc2 	bl	8000aa0 <LCD_init>
  	LCD_flush(&ST7735S);
 8000f1c:	4813      	ldr	r0, [pc, #76]	; (8000f6c <main+0x128>)
 8000f1e:	f7ff fe49 	bl	8000bb4 <LCD_flush>
  	UART2.huart = &huart3;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <main+0x138>)
 8000f24:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <main+0x13c>)
 8000f26:	601a      	str	r2, [r3, #0]
  	UART2.RxLen =255;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <main+0x138>)
 8000f2a:	22ff      	movs	r2, #255	; 0xff
 8000f2c:	80da      	strh	r2, [r3, #6]
  	UART2.TxLen =255;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <main+0x138>)
 8000f30:	22ff      	movs	r2, #255	; 0xff
 8000f32:	809a      	strh	r2, [r3, #4]
  	UARTInit(&UART2);
 8000f34:	4811      	ldr	r0, [pc, #68]	; (8000f7c <main+0x138>)
 8000f36:	f7ff fe7b 	bl	8000c30 <UARTInit>
  	UARTResetStart(&UART2);
 8000f3a:	4810      	ldr	r0, [pc, #64]	; (8000f7c <main+0x138>)
 8000f3c:	f7ff fe9d 	bl	8000c7a <UARTResetStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int16_t read = UARTReadChar(&UART2) ;
 8000f40:	480e      	ldr	r0, [pc, #56]	; (8000f7c <main+0x138>)
 8000f42:	f7ff ff55 	bl	8000df0 <UARTReadChar>
 8000f46:	4603      	mov	r3, r0
 8000f48:	817b      	strh	r3, [r7, #10]
	  		if(read != -1)
 8000f4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f52:	d0f5      	beq.n	8000f40 <main+0xfc>
	  			{
	  				BMPDecoder(read, LCDBufferAddr());
 8000f54:	897b      	ldrh	r3, [r7, #10]
 8000f56:	b2dc      	uxtb	r4, r3
 8000f58:	f7ff fe3e 	bl	8000bd8 <LCDBufferAddr>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4620      	mov	r0, r4
 8000f62:	f7ff fbd1 	bl	8000708 <BMPDecoder>
  {
 8000f66:	e7eb      	b.n	8000f40 <main+0xfc>
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	2400c9f8 	.word	0x2400c9f8
 8000f70:	2400c26c 	.word	0x2400c26c
 8000f74:	58020c00 	.word	0x58020c00
 8000f78:	58021800 	.word	0x58021800
 8000f7c:	2400ca14 	.word	0x2400ca14
 8000f80:	2400c36c 	.word	0x2400c36c

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b09c      	sub	sp, #112	; 0x70
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	224c      	movs	r2, #76	; 0x4c
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00a fb72 	bl	800b67c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00a fb6c 	bl	800b67c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000fa4:	2004      	movs	r0, #4
 8000fa6:	f004 fdd3 	bl	8005b50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <SystemClock_Config+0x100>)
 8000fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb2:	4a34      	ldr	r2, [pc, #208]	; (8001084 <SystemClock_Config+0x100>)
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <SystemClock_Config+0x100>)
 8000fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	4b30      	ldr	r3, [pc, #192]	; (8001088 <SystemClock_Config+0x104>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fcc:	4a2e      	ldr	r2, [pc, #184]	; (8001088 <SystemClock_Config+0x104>)
 8000fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <SystemClock_Config+0x104>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fe0:	bf00      	nop
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <SystemClock_Config+0x104>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fee:	d1f8      	bne.n	8000fe2 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <SystemClock_Config+0x108>)
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff4:	f023 0303 	bic.w	r3, r3, #3
 8000ff8:	4a24      	ldr	r2, [pc, #144]	; (800108c <SystemClock_Config+0x108>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001000:	2301      	movs	r3, #1
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001004:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2302      	movs	r3, #2
 800100c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100e:	2302      	movs	r3, #2
 8001010:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001012:	2301      	movs	r3, #1
 8001014:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001016:	2332      	movs	r3, #50	; 0x32
 8001018:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800101a:	2302      	movs	r3, #2
 800101c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001022:	2302      	movs	r3, #2
 8001024:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001026:	230c      	movs	r3, #12
 8001028:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800102a:	2300      	movs	r3, #0
 800102c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800102e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001032:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	4618      	mov	r0, r3
 800103a:	f004 fdf3 	bl	8005c24 <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001044:	f000 fa16 	bl	8001474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001048:	233f      	movs	r3, #63	; 0x3f
 800104a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104c:	2303      	movs	r3, #3
 800104e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001054:	2308      	movs	r3, #8
 8001056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800105c:	2340      	movs	r3, #64	; 0x40
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f005 fa07 	bl	8006480 <HAL_RCC_ClockConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001078:	f000 f9fc 	bl	8001474 <Error_Handler>
  }
}
 800107c:	bf00      	nop
 800107e:	3770      	adds	r7, #112	; 0x70
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	58000400 	.word	0x58000400
 8001088:	58024800 	.word	0x58024800
 800108c:	58024400 	.word	0x58024400

08001090 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <MX_ETH_Init+0x80>)
 8001096:	4a1f      	ldr	r2, [pc, #124]	; (8001114 <MX_ETH_Init+0x84>)
 8001098:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_ETH_Init+0x88>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <MX_ETH_Init+0x88>)
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_ETH_Init+0x88>)
 80010a8:	22e1      	movs	r2, #225	; 0xe1
 80010aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_ETH_Init+0x88>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_ETH_Init+0x88>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_ETH_Init+0x88>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_ETH_Init+0x80>)
 80010c0:	4a15      	ldr	r2, [pc, #84]	; (8001118 <MX_ETH_Init+0x88>)
 80010c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_ETH_Init+0x80>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_ETH_Init+0x80>)
 80010cc:	4a13      	ldr	r2, [pc, #76]	; (800111c <MX_ETH_Init+0x8c>)
 80010ce:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_ETH_Init+0x80>)
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <MX_ETH_Init+0x90>)
 80010d4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_ETH_Init+0x80>)
 80010d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010dc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010de:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_ETH_Init+0x80>)
 80010e0:	f003 fdd2 	bl	8004c88 <HAL_ETH_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80010ea:	f000 f9c3 	bl	8001474 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010ee:	2238      	movs	r2, #56	; 0x38
 80010f0:	2100      	movs	r1, #0
 80010f2:	480c      	ldr	r0, [pc, #48]	; (8001124 <MX_ETH_Init+0x94>)
 80010f4:	f00a fac2 	bl	800b67c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_ETH_Init+0x94>)
 80010fa:	2221      	movs	r2, #33	; 0x21
 80010fc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_ETH_Init+0x94>)
 8001100:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001104:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_ETH_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2400c1bc 	.word	0x2400c1bc
 8001114:	40028000 	.word	0x40028000
 8001118:	2400ca2c 	.word	0x2400ca2c
 800111c:	240000e4 	.word	0x240000e4
 8001120:	24000084 	.word	0x24000084
 8001124:	2400c184 	.word	0x2400c184

08001128 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <MX_SPI1_Init+0xa8>)
 800112e:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <MX_SPI1_Init+0xac>)
 8001130:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <MX_SPI1_Init+0xa8>)
 8001134:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001138:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_SPI1_Init+0xa8>)
 800113c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001140:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_SPI1_Init+0xa8>)
 8001144:	2207      	movs	r2, #7
 8001146:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_SPI1_Init+0xa8>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_SPI1_Init+0xa8>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_SPI1_Init+0xa8>)
 8001156:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800115a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_SPI1_Init+0xa8>)
 800115e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001162:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_SPI1_Init+0xa8>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_SPI1_Init+0xa8>)
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_SPI1_Init+0xa8>)
 8001172:	2200      	movs	r2, #0
 8001174:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_SPI1_Init+0xa8>)
 8001178:	2200      	movs	r2, #0
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_SPI1_Init+0xa8>)
 800117e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_SPI1_Init+0xa8>)
 8001186:	2200      	movs	r2, #0
 8001188:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_SPI1_Init+0xa8>)
 800118c:	2200      	movs	r2, #0
 800118e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_SPI1_Init+0xa8>)
 8001192:	2200      	movs	r2, #0
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_SPI1_Init+0xa8>)
 8001198:	2200      	movs	r2, #0
 800119a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_SPI1_Init+0xa8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_SPI1_Init+0xa8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_SPI1_Init+0xa8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_SPI1_Init+0xa8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_SPI1_Init+0xa8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_SPI1_Init+0xa8>)
 80011bc:	f007 f854 	bl	8008268 <HAL_SPI_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80011c6:	f000 f955 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2400c26c 	.word	0x2400c26c
 80011d4:	40013000 	.word	0x40013000

080011d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011de:	4a23      	ldr	r2, [pc, #140]	; (800126c <MX_USART3_UART_Init+0x94>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011e4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80011e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_USART3_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_USART3_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001220:	4811      	ldr	r0, [pc, #68]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001222:	f007 ffb8 	bl	8009196 <HAL_UART_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800122c:	f000 f922 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001230:	2100      	movs	r1, #0
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001234:	f009 fe1b 	bl	800ae6e <HAL_UARTEx_SetTxFifoThreshold>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800123e:	f000 f919 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001242:	2100      	movs	r1, #0
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001246:	f009 fe50 	bl	800aeea <HAL_UARTEx_SetRxFifoThreshold>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001250:	f000 f910 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001256:	f009 fdd1 	bl	800adfc <HAL_UARTEx_DisableFifoMode>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001260:	f000 f908 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2400c36c 	.word	0x2400c36c
 800126c:	40004800 	.word	0x40004800

08001270 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001278:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800127c:	2209      	movs	r2, #9
 800127e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001282:	2202      	movs	r2, #2
 8001284:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800128e:	2202      	movs	r2, #2
 8001290:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001294:	2200      	movs	r2, #0
 8001296:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800129a:	2200      	movs	r2, #0
 800129c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012b8:	f004 fb02 	bl	80058c0 <HAL_PCD_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80012c2:	f000 f8d7 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2400c4ec 	.word	0x2400c4ec
 80012d0:	40080000 	.word	0x40080000

080012d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_DMA_Init+0x5c>)
 80012dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012e0:	4a13      	ldr	r2, [pc, #76]	; (8001330 <MX_DMA_Init+0x5c>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_DMA_Init+0x5c>)
 80012ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	200b      	movs	r0, #11
 80012fe:	f000 fe46 	bl	8001f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001302:	200b      	movs	r0, #11
 8001304:	f000 fe5d 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	200c      	movs	r0, #12
 800130e:	f000 fe3e 	bl	8001f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001312:	200c      	movs	r0, #12
 8001314:	f000 fe55 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	200d      	movs	r0, #13
 800131e:	f000 fe36 	bl	8001f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001322:	200d      	movs	r0, #13
 8001324:	f000 fe4d 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	58024400 	.word	0x58024400

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <MX_GPIO_Init+0x134>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	4a45      	ldr	r2, [pc, #276]	; (8001468 <MX_GPIO_Init+0x134>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135a:	4b43      	ldr	r3, [pc, #268]	; (8001468 <MX_GPIO_Init+0x134>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001368:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <MX_GPIO_Init+0x134>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136e:	4a3e      	ldr	r2, [pc, #248]	; (8001468 <MX_GPIO_Init+0x134>)
 8001370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001374:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001378:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <MX_GPIO_Init+0x134>)
 800137a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b38      	ldr	r3, [pc, #224]	; (8001468 <MX_GPIO_Init+0x134>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138c:	4a36      	ldr	r2, [pc, #216]	; (8001468 <MX_GPIO_Init+0x134>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001396:	4b34      	ldr	r3, [pc, #208]	; (8001468 <MX_GPIO_Init+0x134>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b30      	ldr	r3, [pc, #192]	; (8001468 <MX_GPIO_Init+0x134>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013aa:	4a2f      	ldr	r2, [pc, #188]	; (8001468 <MX_GPIO_Init+0x134>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b4:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <MX_GPIO_Init+0x134>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	4b29      	ldr	r3, [pc, #164]	; (8001468 <MX_GPIO_Init+0x134>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c8:	4a27      	ldr	r2, [pc, #156]	; (8001468 <MX_GPIO_Init+0x134>)
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d2:	4b25      	ldr	r3, [pc, #148]	; (8001468 <MX_GPIO_Init+0x134>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_GPIO_Init+0x134>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e6:	4a20      	ldr	r2, [pc, #128]	; (8001468 <MX_GPIO_Init+0x134>)
 80013e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_GPIO_Init+0x134>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001404:	4819      	ldr	r0, [pc, #100]	; (800146c <MX_GPIO_Init+0x138>)
 8001406:	f004 fa13 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001410:	4816      	ldr	r0, [pc, #88]	; (800146c <MX_GPIO_Init+0x138>)
 8001412:	f004 fa0d 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141c:	4814      	ldr	r0, [pc, #80]	; (8001470 <MX_GPIO_Init+0x13c>)
 800141e:	f004 fa07 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 8001422:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_GPIO_Init+0x138>)
 800143c:	f004 f848 	bl	80054d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_GPIO_Init+0x13c>)
 800145a:	f004 f839 	bl	80054d0 <HAL_GPIO_Init>

}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	; 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	58024400 	.word	0x58024400
 800146c:	58020c00 	.word	0x58020c00
 8001470:	58021800 	.word	0x58021800

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	e7fe      	b.n	800147c <Error_Handler+0x8>
	...

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_MspInit+0x30>)
 8001488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_MspInit+0x30>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_MspInit+0x30>)
 8001498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	58024400 	.word	0x58024400

080014b4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	; 0x38
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a59      	ldr	r2, [pc, #356]	; (8001638 <HAL_ETH_MspInit+0x184>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	f040 80ab 	bne.w	800162e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80014d8:	4b58      	ldr	r3, [pc, #352]	; (800163c <HAL_ETH_MspInit+0x188>)
 80014da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014de:	4a57      	ldr	r2, [pc, #348]	; (800163c <HAL_ETH_MspInit+0x188>)
 80014e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014e4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014e8:	4b54      	ldr	r3, [pc, #336]	; (800163c <HAL_ETH_MspInit+0x188>)
 80014ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014f2:	623b      	str	r3, [r7, #32]
 80014f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80014f6:	4b51      	ldr	r3, [pc, #324]	; (800163c <HAL_ETH_MspInit+0x188>)
 80014f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014fc:	4a4f      	ldr	r2, [pc, #316]	; (800163c <HAL_ETH_MspInit+0x188>)
 80014fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001502:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001506:	4b4d      	ldr	r3, [pc, #308]	; (800163c <HAL_ETH_MspInit+0x188>)
 8001508:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800150c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001514:	4b49      	ldr	r3, [pc, #292]	; (800163c <HAL_ETH_MspInit+0x188>)
 8001516:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800151a:	4a48      	ldr	r2, [pc, #288]	; (800163c <HAL_ETH_MspInit+0x188>)
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001524:	4b45      	ldr	r3, [pc, #276]	; (800163c <HAL_ETH_MspInit+0x188>)
 8001526:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	4b42      	ldr	r3, [pc, #264]	; (800163c <HAL_ETH_MspInit+0x188>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001538:	4a40      	ldr	r2, [pc, #256]	; (800163c <HAL_ETH_MspInit+0x188>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001542:	4b3e      	ldr	r3, [pc, #248]	; (800163c <HAL_ETH_MspInit+0x188>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b3a      	ldr	r3, [pc, #232]	; (800163c <HAL_ETH_MspInit+0x188>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001556:	4a39      	ldr	r2, [pc, #228]	; (800163c <HAL_ETH_MspInit+0x188>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_ETH_MspInit+0x188>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_ETH_MspInit+0x188>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001574:	4a31      	ldr	r2, [pc, #196]	; (800163c <HAL_ETH_MspInit+0x188>)
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157e:	4b2f      	ldr	r3, [pc, #188]	; (800163c <HAL_ETH_MspInit+0x188>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800158c:	4b2b      	ldr	r3, [pc, #172]	; (800163c <HAL_ETH_MspInit+0x188>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001592:	4a2a      	ldr	r2, [pc, #168]	; (800163c <HAL_ETH_MspInit+0x188>)
 8001594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001598:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <HAL_ETH_MspInit+0x188>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80015aa:	2332      	movs	r3, #50	; 0x32
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ba:	230b      	movs	r3, #11
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	4619      	mov	r1, r3
 80015c4:	481e      	ldr	r0, [pc, #120]	; (8001640 <HAL_ETH_MspInit+0x18c>)
 80015c6:	f003 ff83 	bl	80054d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80015ca:	2386      	movs	r3, #134	; 0x86
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015da:	230b      	movs	r3, #11
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	4817      	ldr	r0, [pc, #92]	; (8001644 <HAL_ETH_MspInit+0x190>)
 80015e6:	f003 ff73 	bl	80054d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fc:	230b      	movs	r3, #11
 80015fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	4810      	ldr	r0, [pc, #64]	; (8001648 <HAL_ETH_MspInit+0x194>)
 8001608:	f003 ff62 	bl	80054d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800160c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800161e:	230b      	movs	r3, #11
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	4808      	ldr	r0, [pc, #32]	; (800164c <HAL_ETH_MspInit+0x198>)
 800162a:	f003 ff51 	bl	80054d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	3738      	adds	r7, #56	; 0x38
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40028000 	.word	0x40028000
 800163c:	58024400 	.word	0x58024400
 8001640:	58020800 	.word	0x58020800
 8001644:	58020000 	.word	0x58020000
 8001648:	58020400 	.word	0x58020400
 800164c:	58021800 	.word	0x58021800

08001650 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b0ba      	sub	sp, #232	; 0xe8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	22bc      	movs	r2, #188	; 0xbc
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f00a f803 	bl	800b67c <memset>
  if(hspi->Instance==SPI1)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a5a      	ldr	r2, [pc, #360]	; (80017e4 <HAL_SPI_MspInit+0x194>)
 800167c:	4293      	cmp	r3, r2
 800167e:	f040 80ad 	bne.w	80017dc <HAL_SPI_MspInit+0x18c>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001686:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001688:	2304      	movs	r3, #4
 800168a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 80;
 800168c:	2350      	movs	r3, #80	; 0x50
 800168e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001690:	2302      	movs	r3, #2
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001694:	2302      	movs	r3, #2
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001698:	2302      	movs	r3, #2
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800169c:	2340      	movs	r3, #64	; 0x40
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80016a0:	2320      	movs	r3, #32
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80016a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ac:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	4618      	mov	r0, r3
 80016b4:	f005 fa70 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 80016be:	f7ff fed9 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016c2:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <HAL_SPI_MspInit+0x198>)
 80016c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016c8:	4a47      	ldr	r2, [pc, #284]	; (80017e8 <HAL_SPI_MspInit+0x198>)
 80016ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016d2:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <HAL_SPI_MspInit+0x198>)
 80016d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_SPI_MspInit+0x198>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	4a40      	ldr	r2, [pc, #256]	; (80017e8 <HAL_SPI_MspInit+0x198>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f0:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_SPI_MspInit+0x198>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <HAL_SPI_MspInit+0x198>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	4a38      	ldr	r2, [pc, #224]	; (80017e8 <HAL_SPI_MspInit+0x198>)
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800170e:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <HAL_SPI_MspInit+0x198>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800171c:	2320      	movs	r3, #32
 800171e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001734:	2305      	movs	r3, #5
 8001736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800173e:	4619      	mov	r1, r3
 8001740:	482a      	ldr	r0, [pc, #168]	; (80017ec <HAL_SPI_MspInit+0x19c>)
 8001742:	f003 fec5 	bl	80054d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001746:	2320      	movs	r3, #32
 8001748:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800175e:	2305      	movs	r3, #5
 8001760:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001768:	4619      	mov	r1, r3
 800176a:	4821      	ldr	r0, [pc, #132]	; (80017f0 <HAL_SPI_MspInit+0x1a0>)
 800176c:	f003 feb0 	bl	80054d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 8001772:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <HAL_SPI_MspInit+0x1a8>)
 8001774:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 8001778:	2226      	movs	r2, #38	; 0x26
 800177a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 800177e:	2240      	movs	r2, #64	; 0x40
 8001780:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 800178a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 800179e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017b0:	4810      	ldr	r0, [pc, #64]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 80017b2:	f000 fc21 	bl	8001ff8 <HAL_DMA_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_SPI_MspInit+0x170>
    {
      Error_Handler();
 80017bc:	f7ff fe5a 	bl	8001474 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a0c      	ldr	r2, [pc, #48]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 80017c4:	679a      	str	r2, [r3, #120]	; 0x78
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_SPI_MspInit+0x1a4>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2023      	movs	r0, #35	; 0x23
 80017d2:	f000 fbdc 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017d6:	2023      	movs	r0, #35	; 0x23
 80017d8:	f000 fbf3 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	37e8      	adds	r7, #232	; 0xe8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40013000 	.word	0x40013000
 80017e8:	58024400 	.word	0x58024400
 80017ec:	58020000 	.word	0x58020000
 80017f0:	58020400 	.word	0x58020400
 80017f4:	2400c2f4 	.word	0x2400c2f4
 80017f8:	40020010 	.word	0x40020010

080017fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0b8      	sub	sp, #224	; 0xe0
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	22bc      	movs	r2, #188	; 0xbc
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f009 ff2d 	bl	800b67c <memset>
  if(huart->Instance==USART3)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a57      	ldr	r2, [pc, #348]	; (8001984 <HAL_UART_MspInit+0x188>)
 8001828:	4293      	cmp	r3, r2
 800182a:	f040 80a7 	bne.w	800197c <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800182e:	2302      	movs	r3, #2
 8001830:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4618      	mov	r0, r3
 800183e:	f005 f9ab 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001848:	f7ff fe14 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800184c:	4b4e      	ldr	r3, [pc, #312]	; (8001988 <HAL_UART_MspInit+0x18c>)
 800184e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001852:	4a4d      	ldr	r2, [pc, #308]	; (8001988 <HAL_UART_MspInit+0x18c>)
 8001854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001858:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800185c:	4b4a      	ldr	r3, [pc, #296]	; (8001988 <HAL_UART_MspInit+0x18c>)
 800185e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <HAL_UART_MspInit+0x18c>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	4a45      	ldr	r2, [pc, #276]	; (8001988 <HAL_UART_MspInit+0x18c>)
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187a:	4b43      	ldr	r3, [pc, #268]	; (8001988 <HAL_UART_MspInit+0x18c>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001888:	f44f 7340 	mov.w	r3, #768	; 0x300
 800188c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018a2:	2307      	movs	r3, #7
 80018a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018ac:	4619      	mov	r1, r3
 80018ae:	4837      	ldr	r0, [pc, #220]	; (800198c <HAL_UART_MspInit+0x190>)
 80018b0:	f003 fe0e 	bl	80054d0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80018b4:	4b36      	ldr	r3, [pc, #216]	; (8001990 <HAL_UART_MspInit+0x194>)
 80018b6:	4a37      	ldr	r2, [pc, #220]	; (8001994 <HAL_UART_MspInit+0x198>)
 80018b8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80018ba:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_UART_MspInit+0x194>)
 80018bc:	222d      	movs	r2, #45	; 0x2d
 80018be:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c0:	4b33      	ldr	r3, [pc, #204]	; (8001990 <HAL_UART_MspInit+0x194>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c6:	4b32      	ldr	r3, [pc, #200]	; (8001990 <HAL_UART_MspInit+0x194>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018cc:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_UART_MspInit+0x194>)
 80018ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d4:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <HAL_UART_MspInit+0x194>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018da:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_UART_MspInit+0x194>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_UART_MspInit+0x194>)
 80018e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018e8:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_UART_MspInit+0x194>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ee:	4b28      	ldr	r3, [pc, #160]	; (8001990 <HAL_UART_MspInit+0x194>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80018f4:	4826      	ldr	r0, [pc, #152]	; (8001990 <HAL_UART_MspInit+0x194>)
 80018f6:	f000 fb7f 	bl	8001ff8 <HAL_DMA_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001900:	f7ff fdb8 	bl	8001474 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a22      	ldr	r2, [pc, #136]	; (8001990 <HAL_UART_MspInit+0x194>)
 8001908:	67da      	str	r2, [r3, #124]	; 0x7c
 800190a:	4a21      	ldr	r2, [pc, #132]	; (8001990 <HAL_UART_MspInit+0x194>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_UART_MspInit+0x19c>)
 8001912:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_UART_MspInit+0x1a0>)
 8001914:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <HAL_UART_MspInit+0x19c>)
 8001918:	222e      	movs	r2, #46	; 0x2e
 800191a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_UART_MspInit+0x19c>)
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_UART_MspInit+0x19c>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_UART_MspInit+0x19c>)
 800192a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_UART_MspInit+0x19c>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_UART_MspInit+0x19c>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_UART_MspInit+0x19c>)
 800193e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001942:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_UART_MspInit+0x19c>)
 8001946:	2200      	movs	r2, #0
 8001948:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_UART_MspInit+0x19c>)
 800194c:	2200      	movs	r2, #0
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001950:	4811      	ldr	r0, [pc, #68]	; (8001998 <HAL_UART_MspInit+0x19c>)
 8001952:	f000 fb51 	bl	8001ff8 <HAL_DMA_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 800195c:	f7ff fd8a 	bl	8001474 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <HAL_UART_MspInit+0x19c>)
 8001964:	679a      	str	r2, [r3, #120]	; 0x78
 8001966:	4a0c      	ldr	r2, [pc, #48]	; (8001998 <HAL_UART_MspInit+0x19c>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	2027      	movs	r0, #39	; 0x27
 8001972:	f000 fb0c 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001976:	2027      	movs	r0, #39	; 0x27
 8001978:	f000 fb23 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800197c:	bf00      	nop
 800197e:	37e0      	adds	r7, #224	; 0xe0
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40004800 	.word	0x40004800
 8001988:	58024400 	.word	0x58024400
 800198c:	58020c00 	.word	0x58020c00
 8001990:	2400c3fc 	.word	0x2400c3fc
 8001994:	40020028 	.word	0x40020028
 8001998:	2400c474 	.word	0x2400c474
 800199c:	40020040 	.word	0x40020040

080019a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b0b8      	sub	sp, #224	; 0xe0
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	22bc      	movs	r2, #188	; 0xbc
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f009 fe5b 	bl	800b67c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a37      	ldr	r2, [pc, #220]	; (8001aa8 <HAL_PCD_MspInit+0x108>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d166      	bne.n	8001a9e <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80019d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80019da:	2312      	movs	r3, #18
 80019dc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80019de:	2302      	movs	r3, #2
 80019e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80019e2:	2303      	movs	r3, #3
 80019e4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80019ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80019f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019f4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80019f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	4618      	mov	r0, r3
 8001a04:	f005 f8c8 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001a0e:	f7ff fd31 	bl	8001474 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001a12:	f004 f8f7 	bl	8005c04 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <HAL_PCD_MspInit+0x10c>)
 8001a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1c:	4a23      	ldr	r2, [pc, #140]	; (8001aac <HAL_PCD_MspInit+0x10c>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <HAL_PCD_MspInit+0x10c>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001a34:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001a38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001a4e:	230a      	movs	r3, #10
 8001a50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4815      	ldr	r0, [pc, #84]	; (8001ab0 <HAL_PCD_MspInit+0x110>)
 8001a5c:	f003 fd38 	bl	80054d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <HAL_PCD_MspInit+0x110>)
 8001a7c:	f003 fd28 	bl	80054d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_PCD_MspInit+0x10c>)
 8001a82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_PCD_MspInit+0x10c>)
 8001a88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a8c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_PCD_MspInit+0x10c>)
 8001a92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	37e0      	adds	r7, #224	; 0xe0
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40080000 	.word	0x40080000
 8001aac:	58024400 	.word	0x58024400
 8001ab0:	58020000 	.word	0x58020000

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b00:	f000 f906 	bl	8001d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <DMA1_Stream0_IRQHandler+0x10>)
 8001b0e:	f001 fd9d 	bl	800364c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2400c2f4 	.word	0x2400c2f4

08001b1c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <DMA1_Stream1_IRQHandler+0x10>)
 8001b22:	f001 fd93 	bl	800364c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2400c3fc 	.word	0x2400c3fc

08001b30 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <DMA1_Stream2_IRQHandler+0x10>)
 8001b36:	f001 fd89 	bl	800364c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2400c474 	.word	0x2400c474

08001b44 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <SPI1_IRQHandler+0x10>)
 8001b4a:	f006 ffcf 	bl	8008aec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2400c26c 	.word	0x2400c26c

08001b58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <USART3_IRQHandler+0x10>)
 8001b5e:	f007 fbc1 	bl	80092e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2400c36c 	.word	0x2400c36c

08001b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <_sbrk+0x5c>)
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <_sbrk+0x60>)
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <_sbrk+0x64>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <_sbrk+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d207      	bcs.n	8001bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b9c:	f009 fd44 	bl	800b628 <__errno>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	e009      	b.n	8001bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <_sbrk+0x64>)
 8001bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	24080000 	.word	0x24080000
 8001bcc:	00000400 	.word	0x00000400
 8001bd0:	2400ca34 	.word	0x2400ca34
 8001bd4:	2400ca50 	.word	0x2400ca50

08001bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bdc:	f7fe fcfe 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001be2:	490d      	ldr	r1, [pc, #52]	; (8001c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bf8:	4c0a      	ldr	r4, [pc, #40]	; (8001c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c06:	f009 fd15 	bl	800b634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0a:	f7ff f91b 	bl	8000e44 <main>
  bx  lr
 8001c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c10:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c14:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c18:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8001c1c:	0800b884 	.word	0x0800b884
  ldr r2, =_sbss
 8001c20:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8001c24:	2400ca4c 	.word	0x2400ca4c

08001c28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC3_IRQHandler>
	...

08001c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c32:	2003      	movs	r0, #3
 8001c34:	f000 f9a0 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c38:	f004 fdd8 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_Init+0x68>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	4913      	ldr	r1, [pc, #76]	; (8001c98 <HAL_Init+0x6c>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_Init+0x68>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_Init+0x6c>)
 8001c60:	5cd3      	ldrb	r3, [r2, r3]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_Init+0x70>)
 8001c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <HAL_Init+0x74>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c76:	2000      	movs	r0, #0
 8001c78:	f000 f814 	bl	8001ca4 <HAL_InitTick>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e002      	b.n	8001c8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c86:	f7ff fbfb 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	58024400 	.word	0x58024400
 8001c98:	0800b834 	.word	0x0800b834
 8001c9c:	24000004 	.word	0x24000004
 8001ca0:	24000000 	.word	0x24000000

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_InitTick+0x60>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e021      	b.n	8001cfc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_InitTick+0x64>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_InitTick+0x60>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f985 	bl	8001fde <HAL_SYSTICK_Config>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00e      	b.n	8001cfc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d80a      	bhi.n	8001cfa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f000 f94f 	bl	8001f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_InitTick+0x68>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2400001c 	.word	0x2400001c
 8001d08:	24000000 	.word	0x24000000
 8001d0c:	24000018 	.word	0x24000018

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2400001c 	.word	0x2400001c
 8001d34:	2400ca38 	.word	0x2400ca38

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	2400ca38 	.word	0x2400ca38

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff ffee 	bl	8001d38 <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d005      	beq.n	8001d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_Delay+0x44>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d76:	bf00      	nop
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8f7      	bhi.n	8001d78 <HAL_Delay+0x28>
  {
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2400001c 	.word	0x2400001c

08001d98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetREVID+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0c1b      	lsrs	r3, r3, #16
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	5c001000 	.word	0x5c001000

08001db0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001dc0:	4904      	ldr	r1, [pc, #16]	; (8001dd4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	58000400 	.word	0x58000400

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <__NVIC_SetPriorityGrouping+0x40>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <__NVIC_SetPriorityGrouping+0x40>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00
 8001e1c:	05fa0000 	.word	0x05fa0000

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	db0b      	blt.n	8001e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	4907      	ldr	r1, [pc, #28]	; (8001e74 <__NVIC_EnableIRQ+0x38>)
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db0a      	blt.n	8001ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	490c      	ldr	r1, [pc, #48]	; (8001ec4 <__NVIC_SetPriority+0x4c>)
 8001e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea0:	e00a      	b.n	8001eb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4908      	ldr	r1, [pc, #32]	; (8001ec8 <__NVIC_SetPriority+0x50>)
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	3b04      	subs	r3, #4
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	761a      	strb	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000e100 	.word	0xe000e100
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f1c3 0307 	rsb	r3, r3, #7
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	bf28      	it	cs
 8001eea:	2304      	movcs	r3, #4
 8001eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d902      	bls.n	8001efc <NVIC_EncodePriority+0x30>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3b03      	subs	r3, #3
 8001efa:	e000      	b.n	8001efe <NVIC_EncodePriority+0x32>
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	f04f 32ff 	mov.w	r2, #4294967295
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	401a      	ands	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43d9      	mvns	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	4313      	orrs	r3, r2
         );
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f44:	d301      	bcc.n	8001f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00f      	b.n	8001f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <SysTick_Config+0x40>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f52:	210f      	movs	r1, #15
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f7ff ff8e 	bl	8001e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <SysTick_Config+0x40>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <SysTick_Config+0x40>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff29 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff40 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff90 	bl	8001ecc <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5f 	bl	8001e78 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff33 	bl	8001e3c <__NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffa4 	bl	8001f34 <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff fe9a 	bl	8001d38 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e316      	b.n	800263e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a66      	ldr	r2, [pc, #408]	; (80021b0 <HAL_DMA_Init+0x1b8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d04a      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a65      	ldr	r2, [pc, #404]	; (80021b4 <HAL_DMA_Init+0x1bc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d045      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a63      	ldr	r2, [pc, #396]	; (80021b8 <HAL_DMA_Init+0x1c0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d040      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a62      	ldr	r2, [pc, #392]	; (80021bc <HAL_DMA_Init+0x1c4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d03b      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a60      	ldr	r2, [pc, #384]	; (80021c0 <HAL_DMA_Init+0x1c8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d036      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a5f      	ldr	r2, [pc, #380]	; (80021c4 <HAL_DMA_Init+0x1cc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d031      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a5d      	ldr	r2, [pc, #372]	; (80021c8 <HAL_DMA_Init+0x1d0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02c      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a5c      	ldr	r2, [pc, #368]	; (80021cc <HAL_DMA_Init+0x1d4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d027      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a5a      	ldr	r2, [pc, #360]	; (80021d0 <HAL_DMA_Init+0x1d8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d022      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a59      	ldr	r2, [pc, #356]	; (80021d4 <HAL_DMA_Init+0x1dc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d01d      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <HAL_DMA_Init+0x1e0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d018      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a56      	ldr	r2, [pc, #344]	; (80021dc <HAL_DMA_Init+0x1e4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a54      	ldr	r2, [pc, #336]	; (80021e0 <HAL_DMA_Init+0x1e8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00e      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a53      	ldr	r2, [pc, #332]	; (80021e4 <HAL_DMA_Init+0x1ec>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d009      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a51      	ldr	r2, [pc, #324]	; (80021e8 <HAL_DMA_Init+0x1f0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d004      	beq.n	80020b0 <HAL_DMA_Init+0xb8>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a50      	ldr	r2, [pc, #320]	; (80021ec <HAL_DMA_Init+0x1f4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <HAL_DMA_Init+0xbc>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_DMA_Init+0xbe>
 80020b4:	2300      	movs	r3, #0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 813b 	beq.w	8002332 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a37      	ldr	r2, [pc, #220]	; (80021b0 <HAL_DMA_Init+0x1b8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d04a      	beq.n	800216c <HAL_DMA_Init+0x174>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a36      	ldr	r2, [pc, #216]	; (80021b4 <HAL_DMA_Init+0x1bc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d045      	beq.n	800216c <HAL_DMA_Init+0x174>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a34      	ldr	r2, [pc, #208]	; (80021b8 <HAL_DMA_Init+0x1c0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d040      	beq.n	800216c <HAL_DMA_Init+0x174>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a33      	ldr	r2, [pc, #204]	; (80021bc <HAL_DMA_Init+0x1c4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d03b      	beq.n	800216c <HAL_DMA_Init+0x174>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a31      	ldr	r2, [pc, #196]	; (80021c0 <HAL_DMA_Init+0x1c8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d036      	beq.n	800216c <HAL_DMA_Init+0x174>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a30      	ldr	r2, [pc, #192]	; (80021c4 <HAL_DMA_Init+0x1cc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d031      	beq.n	800216c <HAL_DMA_Init+0x174>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a2e      	ldr	r2, [pc, #184]	; (80021c8 <HAL_DMA_Init+0x1d0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d02c      	beq.n	800216c <HAL_DMA_Init+0x174>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2d      	ldr	r2, [pc, #180]	; (80021cc <HAL_DMA_Init+0x1d4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d027      	beq.n	800216c <HAL_DMA_Init+0x174>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <HAL_DMA_Init+0x1d8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d022      	beq.n	800216c <HAL_DMA_Init+0x174>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2a      	ldr	r2, [pc, #168]	; (80021d4 <HAL_DMA_Init+0x1dc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d01d      	beq.n	800216c <HAL_DMA_Init+0x174>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <HAL_DMA_Init+0x1e0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d018      	beq.n	800216c <HAL_DMA_Init+0x174>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a27      	ldr	r2, [pc, #156]	; (80021dc <HAL_DMA_Init+0x1e4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <HAL_DMA_Init+0x174>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a25      	ldr	r2, [pc, #148]	; (80021e0 <HAL_DMA_Init+0x1e8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00e      	beq.n	800216c <HAL_DMA_Init+0x174>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <HAL_DMA_Init+0x1ec>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_DMA_Init+0x174>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_DMA_Init+0x1f0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d004      	beq.n	800216c <HAL_DMA_Init+0x174>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a21      	ldr	r2, [pc, #132]	; (80021ec <HAL_DMA_Init+0x1f4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d108      	bne.n	800217e <HAL_DMA_Init+0x186>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e007      	b.n	800218e <HAL_DMA_Init+0x196>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800218e:	e02f      	b.n	80021f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002190:	f7ff fdd2 	bl	8001d38 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b05      	cmp	r3, #5
 800219c:	d928      	bls.n	80021f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2220      	movs	r2, #32
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2203      	movs	r2, #3
 80021a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e246      	b.n	800263e <HAL_DMA_Init+0x646>
 80021b0:	40020010 	.word	0x40020010
 80021b4:	40020028 	.word	0x40020028
 80021b8:	40020040 	.word	0x40020040
 80021bc:	40020058 	.word	0x40020058
 80021c0:	40020070 	.word	0x40020070
 80021c4:	40020088 	.word	0x40020088
 80021c8:	400200a0 	.word	0x400200a0
 80021cc:	400200b8 	.word	0x400200b8
 80021d0:	40020410 	.word	0x40020410
 80021d4:	40020428 	.word	0x40020428
 80021d8:	40020440 	.word	0x40020440
 80021dc:	40020458 	.word	0x40020458
 80021e0:	40020470 	.word	0x40020470
 80021e4:	40020488 	.word	0x40020488
 80021e8:	400204a0 	.word	0x400204a0
 80021ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1c8      	bne.n	8002190 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4b83      	ldr	r3, [pc, #524]	; (8002418 <HAL_DMA_Init+0x420>)
 800220a:	4013      	ands	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002216:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002222:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800222e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	2b04      	cmp	r3, #4
 8002242:	d107      	bne.n	8002254 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4313      	orrs	r3, r2
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4313      	orrs	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002254:	4b71      	ldr	r3, [pc, #452]	; (800241c <HAL_DMA_Init+0x424>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b71      	ldr	r3, [pc, #452]	; (8002420 <HAL_DMA_Init+0x428>)
 800225a:	4013      	ands	r3, r2
 800225c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002260:	d328      	bcc.n	80022b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b28      	cmp	r3, #40	; 0x28
 8002268:	d903      	bls.n	8002272 <HAL_DMA_Init+0x27a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b2e      	cmp	r3, #46	; 0x2e
 8002270:	d917      	bls.n	80022a2 <HAL_DMA_Init+0x2aa>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b3e      	cmp	r3, #62	; 0x3e
 8002278:	d903      	bls.n	8002282 <HAL_DMA_Init+0x28a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b42      	cmp	r3, #66	; 0x42
 8002280:	d90f      	bls.n	80022a2 <HAL_DMA_Init+0x2aa>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b46      	cmp	r3, #70	; 0x46
 8002288:	d903      	bls.n	8002292 <HAL_DMA_Init+0x29a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b48      	cmp	r3, #72	; 0x48
 8002290:	d907      	bls.n	80022a2 <HAL_DMA_Init+0x2aa>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b4e      	cmp	r3, #78	; 0x4e
 8002298:	d905      	bls.n	80022a6 <HAL_DMA_Init+0x2ae>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b52      	cmp	r3, #82	; 0x52
 80022a0:	d801      	bhi.n	80022a6 <HAL_DMA_Init+0x2ae>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_DMA_Init+0x2b0>
 80022a6:	2300      	movs	r3, #0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f023 0307 	bic.w	r3, r3, #7
 80022ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d117      	bne.n	800230e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00e      	beq.n	800230e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f002 fb3f 	bl	8004974 <DMA_CheckFifoParam>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2240      	movs	r2, #64	; 0x40
 8002300:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e197      	b.n	800263e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f002 fa7a 	bl	8004810 <DMA_CalcBaseAndBitshift>
 800231c:	4603      	mov	r3, r0
 800231e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	223f      	movs	r2, #63	; 0x3f
 800232a:	409a      	lsls	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	e0cd      	b.n	80024ce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a3b      	ldr	r2, [pc, #236]	; (8002424 <HAL_DMA_Init+0x42c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d022      	beq.n	8002382 <HAL_DMA_Init+0x38a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a39      	ldr	r2, [pc, #228]	; (8002428 <HAL_DMA_Init+0x430>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01d      	beq.n	8002382 <HAL_DMA_Init+0x38a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a38      	ldr	r2, [pc, #224]	; (800242c <HAL_DMA_Init+0x434>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d018      	beq.n	8002382 <HAL_DMA_Init+0x38a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a36      	ldr	r2, [pc, #216]	; (8002430 <HAL_DMA_Init+0x438>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_DMA_Init+0x38a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a35      	ldr	r2, [pc, #212]	; (8002434 <HAL_DMA_Init+0x43c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00e      	beq.n	8002382 <HAL_DMA_Init+0x38a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a33      	ldr	r2, [pc, #204]	; (8002438 <HAL_DMA_Init+0x440>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d009      	beq.n	8002382 <HAL_DMA_Init+0x38a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a32      	ldr	r2, [pc, #200]	; (800243c <HAL_DMA_Init+0x444>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d004      	beq.n	8002382 <HAL_DMA_Init+0x38a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a30      	ldr	r2, [pc, #192]	; (8002440 <HAL_DMA_Init+0x448>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d101      	bne.n	8002386 <HAL_DMA_Init+0x38e>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_DMA_Init+0x390>
 8002386:	2300      	movs	r3, #0
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8097 	beq.w	80024bc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a24      	ldr	r2, [pc, #144]	; (8002424 <HAL_DMA_Init+0x42c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d021      	beq.n	80023dc <HAL_DMA_Init+0x3e4>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a22      	ldr	r2, [pc, #136]	; (8002428 <HAL_DMA_Init+0x430>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01c      	beq.n	80023dc <HAL_DMA_Init+0x3e4>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a21      	ldr	r2, [pc, #132]	; (800242c <HAL_DMA_Init+0x434>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d017      	beq.n	80023dc <HAL_DMA_Init+0x3e4>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1f      	ldr	r2, [pc, #124]	; (8002430 <HAL_DMA_Init+0x438>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d012      	beq.n	80023dc <HAL_DMA_Init+0x3e4>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1e      	ldr	r2, [pc, #120]	; (8002434 <HAL_DMA_Init+0x43c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00d      	beq.n	80023dc <HAL_DMA_Init+0x3e4>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <HAL_DMA_Init+0x440>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d008      	beq.n	80023dc <HAL_DMA_Init+0x3e4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1b      	ldr	r2, [pc, #108]	; (800243c <HAL_DMA_Init+0x444>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d003      	beq.n	80023dc <HAL_DMA_Init+0x3e4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a19      	ldr	r2, [pc, #100]	; (8002440 <HAL_DMA_Init+0x448>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2202      	movs	r2, #2
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_DMA_Init+0x44c>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b40      	cmp	r3, #64	; 0x40
 8002404:	d020      	beq.n	8002448 <HAL_DMA_Init+0x450>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b80      	cmp	r3, #128	; 0x80
 800240c:	d102      	bne.n	8002414 <HAL_DMA_Init+0x41c>
 800240e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002412:	e01a      	b.n	800244a <HAL_DMA_Init+0x452>
 8002414:	2300      	movs	r3, #0
 8002416:	e018      	b.n	800244a <HAL_DMA_Init+0x452>
 8002418:	fe10803f 	.word	0xfe10803f
 800241c:	5c001000 	.word	0x5c001000
 8002420:	ffff0000 	.word	0xffff0000
 8002424:	58025408 	.word	0x58025408
 8002428:	5802541c 	.word	0x5802541c
 800242c:	58025430 	.word	0x58025430
 8002430:	58025444 	.word	0x58025444
 8002434:	58025458 	.word	0x58025458
 8002438:	5802546c 	.word	0x5802546c
 800243c:	58025480 	.word	0x58025480
 8002440:	58025494 	.word	0x58025494
 8002444:	fffe000f 	.word	0xfffe000f
 8002448:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68d2      	ldr	r2, [r2, #12]
 800244e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002450:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002458:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002460:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002468:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002470:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002478:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b6e      	ldr	r3, [pc, #440]	; (8002648 <HAL_DMA_Init+0x650>)
 8002490:	4413      	add	r3, r2
 8002492:	4a6e      	ldr	r2, [pc, #440]	; (800264c <HAL_DMA_Init+0x654>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	009a      	lsls	r2, r3, #2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f002 f9b5 	bl	8004810 <DMA_CalcBaseAndBitshift>
 80024a6:	4603      	mov	r3, r0
 80024a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2201      	movs	r2, #1
 80024b4:	409a      	lsls	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	e008      	b.n	80024ce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2203      	movs	r2, #3
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e0b7      	b.n	800263e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a5f      	ldr	r2, [pc, #380]	; (8002650 <HAL_DMA_Init+0x658>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d072      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a5d      	ldr	r2, [pc, #372]	; (8002654 <HAL_DMA_Init+0x65c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d06d      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a5c      	ldr	r2, [pc, #368]	; (8002658 <HAL_DMA_Init+0x660>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d068      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5a      	ldr	r2, [pc, #360]	; (800265c <HAL_DMA_Init+0x664>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d063      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a59      	ldr	r2, [pc, #356]	; (8002660 <HAL_DMA_Init+0x668>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d05e      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a57      	ldr	r2, [pc, #348]	; (8002664 <HAL_DMA_Init+0x66c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d059      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a56      	ldr	r2, [pc, #344]	; (8002668 <HAL_DMA_Init+0x670>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d054      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a54      	ldr	r2, [pc, #336]	; (800266c <HAL_DMA_Init+0x674>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d04f      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a53      	ldr	r2, [pc, #332]	; (8002670 <HAL_DMA_Init+0x678>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d04a      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a51      	ldr	r2, [pc, #324]	; (8002674 <HAL_DMA_Init+0x67c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d045      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a50      	ldr	r2, [pc, #320]	; (8002678 <HAL_DMA_Init+0x680>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d040      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a4e      	ldr	r2, [pc, #312]	; (800267c <HAL_DMA_Init+0x684>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d03b      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a4d      	ldr	r2, [pc, #308]	; (8002680 <HAL_DMA_Init+0x688>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d036      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a4b      	ldr	r2, [pc, #300]	; (8002684 <HAL_DMA_Init+0x68c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d031      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a4a      	ldr	r2, [pc, #296]	; (8002688 <HAL_DMA_Init+0x690>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d02c      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a48      	ldr	r2, [pc, #288]	; (800268c <HAL_DMA_Init+0x694>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d027      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a47      	ldr	r2, [pc, #284]	; (8002690 <HAL_DMA_Init+0x698>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d022      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a45      	ldr	r2, [pc, #276]	; (8002694 <HAL_DMA_Init+0x69c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01d      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a44      	ldr	r2, [pc, #272]	; (8002698 <HAL_DMA_Init+0x6a0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d018      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a42      	ldr	r2, [pc, #264]	; (800269c <HAL_DMA_Init+0x6a4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d013      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a41      	ldr	r2, [pc, #260]	; (80026a0 <HAL_DMA_Init+0x6a8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00e      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a3f      	ldr	r2, [pc, #252]	; (80026a4 <HAL_DMA_Init+0x6ac>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d009      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a3e      	ldr	r2, [pc, #248]	; (80026a8 <HAL_DMA_Init+0x6b0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d004      	beq.n	80025be <HAL_DMA_Init+0x5c6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a3c      	ldr	r2, [pc, #240]	; (80026ac <HAL_DMA_Init+0x6b4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_DMA_Init+0x5ca>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_DMA_Init+0x5cc>
 80025c2:	2300      	movs	r3, #0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d032      	beq.n	800262e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f002 fa4f 	bl	8004a6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b80      	cmp	r3, #128	; 0x80
 80025d4:	d102      	bne.n	80025dc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d010      	beq.n	800261c <HAL_DMA_Init+0x624>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d80c      	bhi.n	800261c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f002 facc 	bl	8004ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	e008      	b.n	800262e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	a7fdabf8 	.word	0xa7fdabf8
 800264c:	cccccccd 	.word	0xcccccccd
 8002650:	40020010 	.word	0x40020010
 8002654:	40020028 	.word	0x40020028
 8002658:	40020040 	.word	0x40020040
 800265c:	40020058 	.word	0x40020058
 8002660:	40020070 	.word	0x40020070
 8002664:	40020088 	.word	0x40020088
 8002668:	400200a0 	.word	0x400200a0
 800266c:	400200b8 	.word	0x400200b8
 8002670:	40020410 	.word	0x40020410
 8002674:	40020428 	.word	0x40020428
 8002678:	40020440 	.word	0x40020440
 800267c:	40020458 	.word	0x40020458
 8002680:	40020470 	.word	0x40020470
 8002684:	40020488 	.word	0x40020488
 8002688:	400204a0 	.word	0x400204a0
 800268c:	400204b8 	.word	0x400204b8
 8002690:	58025408 	.word	0x58025408
 8002694:	5802541c 	.word	0x5802541c
 8002698:	58025430 	.word	0x58025430
 800269c:	58025444 	.word	0x58025444
 80026a0:	58025458 	.word	0x58025458
 80026a4:	5802546c 	.word	0x5802546c
 80026a8:	58025480 	.word	0x58025480
 80026ac:	58025494 	.word	0x58025494

080026b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e226      	b.n	8002b1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_DMA_Start_IT+0x2a>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e21f      	b.n	8002b1a <HAL_DMA_Start_IT+0x46a>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	f040 820a 	bne.w	8002b04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a68      	ldr	r2, [pc, #416]	; (80028a4 <HAL_DMA_Start_IT+0x1f4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d04a      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a66      	ldr	r2, [pc, #408]	; (80028a8 <HAL_DMA_Start_IT+0x1f8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d045      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a65      	ldr	r2, [pc, #404]	; (80028ac <HAL_DMA_Start_IT+0x1fc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d040      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a63      	ldr	r2, [pc, #396]	; (80028b0 <HAL_DMA_Start_IT+0x200>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d03b      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a62      	ldr	r2, [pc, #392]	; (80028b4 <HAL_DMA_Start_IT+0x204>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d036      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a60      	ldr	r2, [pc, #384]	; (80028b8 <HAL_DMA_Start_IT+0x208>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d031      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a5f      	ldr	r2, [pc, #380]	; (80028bc <HAL_DMA_Start_IT+0x20c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d02c      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a5d      	ldr	r2, [pc, #372]	; (80028c0 <HAL_DMA_Start_IT+0x210>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d027      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a5c      	ldr	r2, [pc, #368]	; (80028c4 <HAL_DMA_Start_IT+0x214>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d022      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a5a      	ldr	r2, [pc, #360]	; (80028c8 <HAL_DMA_Start_IT+0x218>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01d      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a59      	ldr	r2, [pc, #356]	; (80028cc <HAL_DMA_Start_IT+0x21c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d018      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a57      	ldr	r2, [pc, #348]	; (80028d0 <HAL_DMA_Start_IT+0x220>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a56      	ldr	r2, [pc, #344]	; (80028d4 <HAL_DMA_Start_IT+0x224>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a54      	ldr	r2, [pc, #336]	; (80028d8 <HAL_DMA_Start_IT+0x228>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d009      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a53      	ldr	r2, [pc, #332]	; (80028dc <HAL_DMA_Start_IT+0x22c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_DMA_Start_IT+0xee>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a51      	ldr	r2, [pc, #324]	; (80028e0 <HAL_DMA_Start_IT+0x230>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d108      	bne.n	80027b0 <HAL_DMA_Start_IT+0x100>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0201 	bic.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e007      	b.n	80027c0 <HAL_DMA_Start_IT+0x110>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f001 fe76 	bl	80044b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a34      	ldr	r2, [pc, #208]	; (80028a4 <HAL_DMA_Start_IT+0x1f4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d04a      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a33      	ldr	r2, [pc, #204]	; (80028a8 <HAL_DMA_Start_IT+0x1f8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d045      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a31      	ldr	r2, [pc, #196]	; (80028ac <HAL_DMA_Start_IT+0x1fc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d040      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a30      	ldr	r2, [pc, #192]	; (80028b0 <HAL_DMA_Start_IT+0x200>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d03b      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a2e      	ldr	r2, [pc, #184]	; (80028b4 <HAL_DMA_Start_IT+0x204>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d036      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2d      	ldr	r2, [pc, #180]	; (80028b8 <HAL_DMA_Start_IT+0x208>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d031      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2b      	ldr	r2, [pc, #172]	; (80028bc <HAL_DMA_Start_IT+0x20c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02c      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <HAL_DMA_Start_IT+0x210>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d027      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a28      	ldr	r2, [pc, #160]	; (80028c4 <HAL_DMA_Start_IT+0x214>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d022      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a27      	ldr	r2, [pc, #156]	; (80028c8 <HAL_DMA_Start_IT+0x218>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d01d      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a25      	ldr	r2, [pc, #148]	; (80028cc <HAL_DMA_Start_IT+0x21c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d018      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <HAL_DMA_Start_IT+0x220>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <HAL_DMA_Start_IT+0x224>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00e      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a21      	ldr	r2, [pc, #132]	; (80028d8 <HAL_DMA_Start_IT+0x228>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_DMA_Start_IT+0x22c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_DMA_Start_IT+0x1bc>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <HAL_DMA_Start_IT+0x230>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_DMA_Start_IT+0x1c0>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_DMA_Start_IT+0x1c2>
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d036      	beq.n	80028e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 021e 	bic.w	r2, r3, #30
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0216 	orr.w	r2, r2, #22
 8002888:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d03e      	beq.n	8002910 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0208 	orr.w	r2, r2, #8
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e035      	b.n	8002910 <HAL_DMA_Start_IT+0x260>
 80028a4:	40020010 	.word	0x40020010
 80028a8:	40020028 	.word	0x40020028
 80028ac:	40020040 	.word	0x40020040
 80028b0:	40020058 	.word	0x40020058
 80028b4:	40020070 	.word	0x40020070
 80028b8:	40020088 	.word	0x40020088
 80028bc:	400200a0 	.word	0x400200a0
 80028c0:	400200b8 	.word	0x400200b8
 80028c4:	40020410 	.word	0x40020410
 80028c8:	40020428 	.word	0x40020428
 80028cc:	40020440 	.word	0x40020440
 80028d0:	40020458 	.word	0x40020458
 80028d4:	40020470 	.word	0x40020470
 80028d8:	40020488 	.word	0x40020488
 80028dc:	400204a0 	.word	0x400204a0
 80028e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 020e 	bic.w	r2, r3, #14
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 020a 	orr.w	r2, r2, #10
 80028f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0204 	orr.w	r2, r2, #4
 800290e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a83      	ldr	r2, [pc, #524]	; (8002b24 <HAL_DMA_Start_IT+0x474>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d072      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a82      	ldr	r2, [pc, #520]	; (8002b28 <HAL_DMA_Start_IT+0x478>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d06d      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a80      	ldr	r2, [pc, #512]	; (8002b2c <HAL_DMA_Start_IT+0x47c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d068      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a7f      	ldr	r2, [pc, #508]	; (8002b30 <HAL_DMA_Start_IT+0x480>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d063      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a7d      	ldr	r2, [pc, #500]	; (8002b34 <HAL_DMA_Start_IT+0x484>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d05e      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a7c      	ldr	r2, [pc, #496]	; (8002b38 <HAL_DMA_Start_IT+0x488>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d059      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a7a      	ldr	r2, [pc, #488]	; (8002b3c <HAL_DMA_Start_IT+0x48c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d054      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a79      	ldr	r2, [pc, #484]	; (8002b40 <HAL_DMA_Start_IT+0x490>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d04f      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a77      	ldr	r2, [pc, #476]	; (8002b44 <HAL_DMA_Start_IT+0x494>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d04a      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a76      	ldr	r2, [pc, #472]	; (8002b48 <HAL_DMA_Start_IT+0x498>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d045      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a74      	ldr	r2, [pc, #464]	; (8002b4c <HAL_DMA_Start_IT+0x49c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d040      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a73      	ldr	r2, [pc, #460]	; (8002b50 <HAL_DMA_Start_IT+0x4a0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d03b      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a71      	ldr	r2, [pc, #452]	; (8002b54 <HAL_DMA_Start_IT+0x4a4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d036      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a70      	ldr	r2, [pc, #448]	; (8002b58 <HAL_DMA_Start_IT+0x4a8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d031      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a6e      	ldr	r2, [pc, #440]	; (8002b5c <HAL_DMA_Start_IT+0x4ac>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d02c      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6d      	ldr	r2, [pc, #436]	; (8002b60 <HAL_DMA_Start_IT+0x4b0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d027      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a6b      	ldr	r2, [pc, #428]	; (8002b64 <HAL_DMA_Start_IT+0x4b4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d022      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a6a      	ldr	r2, [pc, #424]	; (8002b68 <HAL_DMA_Start_IT+0x4b8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d01d      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a68      	ldr	r2, [pc, #416]	; (8002b6c <HAL_DMA_Start_IT+0x4bc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d018      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a67      	ldr	r2, [pc, #412]	; (8002b70 <HAL_DMA_Start_IT+0x4c0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a65      	ldr	r2, [pc, #404]	; (8002b74 <HAL_DMA_Start_IT+0x4c4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00e      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a64      	ldr	r2, [pc, #400]	; (8002b78 <HAL_DMA_Start_IT+0x4c8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d009      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a62      	ldr	r2, [pc, #392]	; (8002b7c <HAL_DMA_Start_IT+0x4cc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_DMA_Start_IT+0x350>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a61      	ldr	r2, [pc, #388]	; (8002b80 <HAL_DMA_Start_IT+0x4d0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_DMA_Start_IT+0x354>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_DMA_Start_IT+0x356>
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01a      	beq.n	8002a40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a37      	ldr	r2, [pc, #220]	; (8002b24 <HAL_DMA_Start_IT+0x474>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d04a      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a36      	ldr	r2, [pc, #216]	; (8002b28 <HAL_DMA_Start_IT+0x478>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d045      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a34      	ldr	r2, [pc, #208]	; (8002b2c <HAL_DMA_Start_IT+0x47c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d040      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a33      	ldr	r2, [pc, #204]	; (8002b30 <HAL_DMA_Start_IT+0x480>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d03b      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a31      	ldr	r2, [pc, #196]	; (8002b34 <HAL_DMA_Start_IT+0x484>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d036      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a30      	ldr	r2, [pc, #192]	; (8002b38 <HAL_DMA_Start_IT+0x488>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d031      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2e      	ldr	r2, [pc, #184]	; (8002b3c <HAL_DMA_Start_IT+0x48c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d02c      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <HAL_DMA_Start_IT+0x490>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d027      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a2b      	ldr	r2, [pc, #172]	; (8002b44 <HAL_DMA_Start_IT+0x494>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d022      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <HAL_DMA_Start_IT+0x498>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d01d      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a28      	ldr	r2, [pc, #160]	; (8002b4c <HAL_DMA_Start_IT+0x49c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d018      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <HAL_DMA_Start_IT+0x4a0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a25      	ldr	r2, [pc, #148]	; (8002b54 <HAL_DMA_Start_IT+0x4a4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <HAL_DMA_Start_IT+0x4a8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a22      	ldr	r2, [pc, #136]	; (8002b5c <HAL_DMA_Start_IT+0x4ac>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_DMA_Start_IT+0x430>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a21      	ldr	r2, [pc, #132]	; (8002b60 <HAL_DMA_Start_IT+0x4b0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d108      	bne.n	8002af2 <HAL_DMA_Start_IT+0x442>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e012      	b.n	8002b18 <HAL_DMA_Start_IT+0x468>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	e009      	b.n	8002b18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40020010 	.word	0x40020010
 8002b28:	40020028 	.word	0x40020028
 8002b2c:	40020040 	.word	0x40020040
 8002b30:	40020058 	.word	0x40020058
 8002b34:	40020070 	.word	0x40020070
 8002b38:	40020088 	.word	0x40020088
 8002b3c:	400200a0 	.word	0x400200a0
 8002b40:	400200b8 	.word	0x400200b8
 8002b44:	40020410 	.word	0x40020410
 8002b48:	40020428 	.word	0x40020428
 8002b4c:	40020440 	.word	0x40020440
 8002b50:	40020458 	.word	0x40020458
 8002b54:	40020470 	.word	0x40020470
 8002b58:	40020488 	.word	0x40020488
 8002b5c:	400204a0 	.word	0x400204a0
 8002b60:	400204b8 	.word	0x400204b8
 8002b64:	58025408 	.word	0x58025408
 8002b68:	5802541c 	.word	0x5802541c
 8002b6c:	58025430 	.word	0x58025430
 8002b70:	58025444 	.word	0x58025444
 8002b74:	58025458 	.word	0x58025458
 8002b78:	5802546c 	.word	0x5802546c
 8002b7c:	58025480 	.word	0x58025480
 8002b80:	58025494 	.word	0x58025494

08002b84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002b8c:	f7ff f8d4 	bl	8001d38 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e2dc      	b.n	8003156 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d008      	beq.n	8002bba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e2cd      	b.n	8003156 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a76      	ldr	r2, [pc, #472]	; (8002d98 <HAL_DMA_Abort+0x214>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d04a      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a74      	ldr	r2, [pc, #464]	; (8002d9c <HAL_DMA_Abort+0x218>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d045      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a73      	ldr	r2, [pc, #460]	; (8002da0 <HAL_DMA_Abort+0x21c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d040      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a71      	ldr	r2, [pc, #452]	; (8002da4 <HAL_DMA_Abort+0x220>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d03b      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a70      	ldr	r2, [pc, #448]	; (8002da8 <HAL_DMA_Abort+0x224>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d036      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a6e      	ldr	r2, [pc, #440]	; (8002dac <HAL_DMA_Abort+0x228>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d031      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a6d      	ldr	r2, [pc, #436]	; (8002db0 <HAL_DMA_Abort+0x22c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d02c      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a6b      	ldr	r2, [pc, #428]	; (8002db4 <HAL_DMA_Abort+0x230>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d027      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6a      	ldr	r2, [pc, #424]	; (8002db8 <HAL_DMA_Abort+0x234>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a68      	ldr	r2, [pc, #416]	; (8002dbc <HAL_DMA_Abort+0x238>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01d      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a67      	ldr	r2, [pc, #412]	; (8002dc0 <HAL_DMA_Abort+0x23c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d018      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a65      	ldr	r2, [pc, #404]	; (8002dc4 <HAL_DMA_Abort+0x240>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a64      	ldr	r2, [pc, #400]	; (8002dc8 <HAL_DMA_Abort+0x244>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a62      	ldr	r2, [pc, #392]	; (8002dcc <HAL_DMA_Abort+0x248>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a61      	ldr	r2, [pc, #388]	; (8002dd0 <HAL_DMA_Abort+0x24c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_DMA_Abort+0xd6>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a5f      	ldr	r2, [pc, #380]	; (8002dd4 <HAL_DMA_Abort+0x250>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_DMA_Abort+0xda>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_DMA_Abort+0xdc>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 021e 	bic.w	r2, r2, #30
 8002c72:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c82:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e00a      	b.n	8002ca2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 020e 	bic.w	r2, r2, #14
 8002c9a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a3c      	ldr	r2, [pc, #240]	; (8002d98 <HAL_DMA_Abort+0x214>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d072      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a3a      	ldr	r2, [pc, #232]	; (8002d9c <HAL_DMA_Abort+0x218>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d06d      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a39      	ldr	r2, [pc, #228]	; (8002da0 <HAL_DMA_Abort+0x21c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d068      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a37      	ldr	r2, [pc, #220]	; (8002da4 <HAL_DMA_Abort+0x220>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d063      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a36      	ldr	r2, [pc, #216]	; (8002da8 <HAL_DMA_Abort+0x224>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d05e      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a34      	ldr	r2, [pc, #208]	; (8002dac <HAL_DMA_Abort+0x228>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d059      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a33      	ldr	r2, [pc, #204]	; (8002db0 <HAL_DMA_Abort+0x22c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d054      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a31      	ldr	r2, [pc, #196]	; (8002db4 <HAL_DMA_Abort+0x230>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d04f      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a30      	ldr	r2, [pc, #192]	; (8002db8 <HAL_DMA_Abort+0x234>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d04a      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a2e      	ldr	r2, [pc, #184]	; (8002dbc <HAL_DMA_Abort+0x238>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d045      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a2d      	ldr	r2, [pc, #180]	; (8002dc0 <HAL_DMA_Abort+0x23c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d040      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2b      	ldr	r2, [pc, #172]	; (8002dc4 <HAL_DMA_Abort+0x240>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d03b      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a2a      	ldr	r2, [pc, #168]	; (8002dc8 <HAL_DMA_Abort+0x244>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d036      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a28      	ldr	r2, [pc, #160]	; (8002dcc <HAL_DMA_Abort+0x248>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d031      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a27      	ldr	r2, [pc, #156]	; (8002dd0 <HAL_DMA_Abort+0x24c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d02c      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <HAL_DMA_Abort+0x250>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d027      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a24      	ldr	r2, [pc, #144]	; (8002dd8 <HAL_DMA_Abort+0x254>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d022      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <HAL_DMA_Abort+0x258>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01d      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <HAL_DMA_Abort+0x25c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d018      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <HAL_DMA_Abort+0x260>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <HAL_DMA_Abort+0x264>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00e      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_DMA_Abort+0x268>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d009      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <HAL_DMA_Abort+0x26c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d004      	beq.n	8002d92 <HAL_DMA_Abort+0x20e>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_DMA_Abort+0x270>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d132      	bne.n	8002df8 <HAL_DMA_Abort+0x274>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e031      	b.n	8002dfa <HAL_DMA_Abort+0x276>
 8002d96:	bf00      	nop
 8002d98:	40020010 	.word	0x40020010
 8002d9c:	40020028 	.word	0x40020028
 8002da0:	40020040 	.word	0x40020040
 8002da4:	40020058 	.word	0x40020058
 8002da8:	40020070 	.word	0x40020070
 8002dac:	40020088 	.word	0x40020088
 8002db0:	400200a0 	.word	0x400200a0
 8002db4:	400200b8 	.word	0x400200b8
 8002db8:	40020410 	.word	0x40020410
 8002dbc:	40020428 	.word	0x40020428
 8002dc0:	40020440 	.word	0x40020440
 8002dc4:	40020458 	.word	0x40020458
 8002dc8:	40020470 	.word	0x40020470
 8002dcc:	40020488 	.word	0x40020488
 8002dd0:	400204a0 	.word	0x400204a0
 8002dd4:	400204b8 	.word	0x400204b8
 8002dd8:	58025408 	.word	0x58025408
 8002ddc:	5802541c 	.word	0x5802541c
 8002de0:	58025430 	.word	0x58025430
 8002de4:	58025444 	.word	0x58025444
 8002de8:	58025458 	.word	0x58025458
 8002dec:	5802546c 	.word	0x5802546c
 8002df0:	58025480 	.word	0x58025480
 8002df4:	58025494 	.word	0x58025494
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6d      	ldr	r2, [pc, #436]	; (8002fc8 <HAL_DMA_Abort+0x444>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04a      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6b      	ldr	r2, [pc, #428]	; (8002fcc <HAL_DMA_Abort+0x448>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d045      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6a      	ldr	r2, [pc, #424]	; (8002fd0 <HAL_DMA_Abort+0x44c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d040      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a68      	ldr	r2, [pc, #416]	; (8002fd4 <HAL_DMA_Abort+0x450>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d03b      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a67      	ldr	r2, [pc, #412]	; (8002fd8 <HAL_DMA_Abort+0x454>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d036      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a65      	ldr	r2, [pc, #404]	; (8002fdc <HAL_DMA_Abort+0x458>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d031      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a64      	ldr	r2, [pc, #400]	; (8002fe0 <HAL_DMA_Abort+0x45c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d02c      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a62      	ldr	r2, [pc, #392]	; (8002fe4 <HAL_DMA_Abort+0x460>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d027      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a61      	ldr	r2, [pc, #388]	; (8002fe8 <HAL_DMA_Abort+0x464>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a5f      	ldr	r2, [pc, #380]	; (8002fec <HAL_DMA_Abort+0x468>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a5e      	ldr	r2, [pc, #376]	; (8002ff0 <HAL_DMA_Abort+0x46c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d018      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a5c      	ldr	r2, [pc, #368]	; (8002ff4 <HAL_DMA_Abort+0x470>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a5b      	ldr	r2, [pc, #364]	; (8002ff8 <HAL_DMA_Abort+0x474>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a59      	ldr	r2, [pc, #356]	; (8002ffc <HAL_DMA_Abort+0x478>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a58      	ldr	r2, [pc, #352]	; (8003000 <HAL_DMA_Abort+0x47c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_DMA_Abort+0x32a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a56      	ldr	r2, [pc, #344]	; (8003004 <HAL_DMA_Abort+0x480>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d108      	bne.n	8002ec0 <HAL_DMA_Abort+0x33c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e007      	b.n	8002ed0 <HAL_DMA_Abort+0x34c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ed0:	e013      	b.n	8002efa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ed2:	f7fe ff31 	bl	8001d38 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d90c      	bls.n	8002efa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e12d      	b.n	8003156 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e5      	bne.n	8002ed2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2f      	ldr	r2, [pc, #188]	; (8002fc8 <HAL_DMA_Abort+0x444>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d04a      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2d      	ldr	r2, [pc, #180]	; (8002fcc <HAL_DMA_Abort+0x448>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d045      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2c      	ldr	r2, [pc, #176]	; (8002fd0 <HAL_DMA_Abort+0x44c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d040      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2a      	ldr	r2, [pc, #168]	; (8002fd4 <HAL_DMA_Abort+0x450>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d03b      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a29      	ldr	r2, [pc, #164]	; (8002fd8 <HAL_DMA_Abort+0x454>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d036      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <HAL_DMA_Abort+0x458>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d031      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a26      	ldr	r2, [pc, #152]	; (8002fe0 <HAL_DMA_Abort+0x45c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d02c      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a24      	ldr	r2, [pc, #144]	; (8002fe4 <HAL_DMA_Abort+0x460>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d027      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a23      	ldr	r2, [pc, #140]	; (8002fe8 <HAL_DMA_Abort+0x464>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a21      	ldr	r2, [pc, #132]	; (8002fec <HAL_DMA_Abort+0x468>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01d      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <HAL_DMA_Abort+0x46c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d018      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1e      	ldr	r2, [pc, #120]	; (8002ff4 <HAL_DMA_Abort+0x470>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <HAL_DMA_Abort+0x474>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1b      	ldr	r2, [pc, #108]	; (8002ffc <HAL_DMA_Abort+0x478>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <HAL_DMA_Abort+0x47c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_DMA_Abort+0x422>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a18      	ldr	r2, [pc, #96]	; (8003004 <HAL_DMA_Abort+0x480>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_DMA_Abort+0x426>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_DMA_Abort+0x428>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d02b      	beq.n	8003008 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	223f      	movs	r2, #63	; 0x3f
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	e02a      	b.n	800301e <HAL_DMA_Abort+0x49a>
 8002fc8:	40020010 	.word	0x40020010
 8002fcc:	40020028 	.word	0x40020028
 8002fd0:	40020040 	.word	0x40020040
 8002fd4:	40020058 	.word	0x40020058
 8002fd8:	40020070 	.word	0x40020070
 8002fdc:	40020088 	.word	0x40020088
 8002fe0:	400200a0 	.word	0x400200a0
 8002fe4:	400200b8 	.word	0x400200b8
 8002fe8:	40020410 	.word	0x40020410
 8002fec:	40020428 	.word	0x40020428
 8002ff0:	40020440 	.word	0x40020440
 8002ff4:	40020458 	.word	0x40020458
 8002ff8:	40020470 	.word	0x40020470
 8002ffc:	40020488 	.word	0x40020488
 8003000:	400204a0 	.word	0x400204a0
 8003004:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2201      	movs	r2, #1
 8003018:	409a      	lsls	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a4f      	ldr	r2, [pc, #316]	; (8003160 <HAL_DMA_Abort+0x5dc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d072      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a4d      	ldr	r2, [pc, #308]	; (8003164 <HAL_DMA_Abort+0x5e0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d06d      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a4c      	ldr	r2, [pc, #304]	; (8003168 <HAL_DMA_Abort+0x5e4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d068      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a4a      	ldr	r2, [pc, #296]	; (800316c <HAL_DMA_Abort+0x5e8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d063      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a49      	ldr	r2, [pc, #292]	; (8003170 <HAL_DMA_Abort+0x5ec>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d05e      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a47      	ldr	r2, [pc, #284]	; (8003174 <HAL_DMA_Abort+0x5f0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d059      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a46      	ldr	r2, [pc, #280]	; (8003178 <HAL_DMA_Abort+0x5f4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d054      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a44      	ldr	r2, [pc, #272]	; (800317c <HAL_DMA_Abort+0x5f8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d04f      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a43      	ldr	r2, [pc, #268]	; (8003180 <HAL_DMA_Abort+0x5fc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d04a      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a41      	ldr	r2, [pc, #260]	; (8003184 <HAL_DMA_Abort+0x600>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d045      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a40      	ldr	r2, [pc, #256]	; (8003188 <HAL_DMA_Abort+0x604>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d040      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a3e      	ldr	r2, [pc, #248]	; (800318c <HAL_DMA_Abort+0x608>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d03b      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a3d      	ldr	r2, [pc, #244]	; (8003190 <HAL_DMA_Abort+0x60c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d036      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a3b      	ldr	r2, [pc, #236]	; (8003194 <HAL_DMA_Abort+0x610>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d031      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a3a      	ldr	r2, [pc, #232]	; (8003198 <HAL_DMA_Abort+0x614>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d02c      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a38      	ldr	r2, [pc, #224]	; (800319c <HAL_DMA_Abort+0x618>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d027      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a37      	ldr	r2, [pc, #220]	; (80031a0 <HAL_DMA_Abort+0x61c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d022      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a35      	ldr	r2, [pc, #212]	; (80031a4 <HAL_DMA_Abort+0x620>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01d      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a34      	ldr	r2, [pc, #208]	; (80031a8 <HAL_DMA_Abort+0x624>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d018      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a32      	ldr	r2, [pc, #200]	; (80031ac <HAL_DMA_Abort+0x628>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a31      	ldr	r2, [pc, #196]	; (80031b0 <HAL_DMA_Abort+0x62c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00e      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2f      	ldr	r2, [pc, #188]	; (80031b4 <HAL_DMA_Abort+0x630>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2e      	ldr	r2, [pc, #184]	; (80031b8 <HAL_DMA_Abort+0x634>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d004      	beq.n	800310e <HAL_DMA_Abort+0x58a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a2c      	ldr	r2, [pc, #176]	; (80031bc <HAL_DMA_Abort+0x638>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <HAL_DMA_Abort+0x58e>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_DMA_Abort+0x590>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d015      	beq.n	8003144 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003120:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003138:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003142:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40020010 	.word	0x40020010
 8003164:	40020028 	.word	0x40020028
 8003168:	40020040 	.word	0x40020040
 800316c:	40020058 	.word	0x40020058
 8003170:	40020070 	.word	0x40020070
 8003174:	40020088 	.word	0x40020088
 8003178:	400200a0 	.word	0x400200a0
 800317c:	400200b8 	.word	0x400200b8
 8003180:	40020410 	.word	0x40020410
 8003184:	40020428 	.word	0x40020428
 8003188:	40020440 	.word	0x40020440
 800318c:	40020458 	.word	0x40020458
 8003190:	40020470 	.word	0x40020470
 8003194:	40020488 	.word	0x40020488
 8003198:	400204a0 	.word	0x400204a0
 800319c:	400204b8 	.word	0x400204b8
 80031a0:	58025408 	.word	0x58025408
 80031a4:	5802541c 	.word	0x5802541c
 80031a8:	58025430 	.word	0x58025430
 80031ac:	58025444 	.word	0x58025444
 80031b0:	58025458 	.word	0x58025458
 80031b4:	5802546c 	.word	0x5802546c
 80031b8:	58025480 	.word	0x58025480
 80031bc:	58025494 	.word	0x58025494

080031c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e237      	b.n	8003642 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d004      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e22c      	b.n	8003642 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a5c      	ldr	r2, [pc, #368]	; (8003360 <HAL_DMA_Abort_IT+0x1a0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d04a      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a5b      	ldr	r2, [pc, #364]	; (8003364 <HAL_DMA_Abort_IT+0x1a4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d045      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a59      	ldr	r2, [pc, #356]	; (8003368 <HAL_DMA_Abort_IT+0x1a8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d040      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a58      	ldr	r2, [pc, #352]	; (800336c <HAL_DMA_Abort_IT+0x1ac>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d03b      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a56      	ldr	r2, [pc, #344]	; (8003370 <HAL_DMA_Abort_IT+0x1b0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d036      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a55      	ldr	r2, [pc, #340]	; (8003374 <HAL_DMA_Abort_IT+0x1b4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d031      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a53      	ldr	r2, [pc, #332]	; (8003378 <HAL_DMA_Abort_IT+0x1b8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d02c      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a52      	ldr	r2, [pc, #328]	; (800337c <HAL_DMA_Abort_IT+0x1bc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d027      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a50      	ldr	r2, [pc, #320]	; (8003380 <HAL_DMA_Abort_IT+0x1c0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d022      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a4f      	ldr	r2, [pc, #316]	; (8003384 <HAL_DMA_Abort_IT+0x1c4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d01d      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a4d      	ldr	r2, [pc, #308]	; (8003388 <HAL_DMA_Abort_IT+0x1c8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d018      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a4c      	ldr	r2, [pc, #304]	; (800338c <HAL_DMA_Abort_IT+0x1cc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a4a      	ldr	r2, [pc, #296]	; (8003390 <HAL_DMA_Abort_IT+0x1d0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00e      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a49      	ldr	r2, [pc, #292]	; (8003394 <HAL_DMA_Abort_IT+0x1d4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d009      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a47      	ldr	r2, [pc, #284]	; (8003398 <HAL_DMA_Abort_IT+0x1d8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_DMA_Abort_IT+0xc8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a46      	ldr	r2, [pc, #280]	; (800339c <HAL_DMA_Abort_IT+0x1dc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_DMA_Abort_IT+0xcc>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_DMA_Abort_IT+0xce>
 800328c:	2300      	movs	r3, #0
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8086 	beq.w	80033a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2204      	movs	r2, #4
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2f      	ldr	r2, [pc, #188]	; (8003360 <HAL_DMA_Abort_IT+0x1a0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d04a      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2e      	ldr	r2, [pc, #184]	; (8003364 <HAL_DMA_Abort_IT+0x1a4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d045      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <HAL_DMA_Abort_IT+0x1a8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d040      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a2b      	ldr	r2, [pc, #172]	; (800336c <HAL_DMA_Abort_IT+0x1ac>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d03b      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a29      	ldr	r2, [pc, #164]	; (8003370 <HAL_DMA_Abort_IT+0x1b0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d036      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a28      	ldr	r2, [pc, #160]	; (8003374 <HAL_DMA_Abort_IT+0x1b4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d031      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a26      	ldr	r2, [pc, #152]	; (8003378 <HAL_DMA_Abort_IT+0x1b8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d02c      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a25      	ldr	r2, [pc, #148]	; (800337c <HAL_DMA_Abort_IT+0x1bc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d027      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a23      	ldr	r2, [pc, #140]	; (8003380 <HAL_DMA_Abort_IT+0x1c0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d022      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a22      	ldr	r2, [pc, #136]	; (8003384 <HAL_DMA_Abort_IT+0x1c4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01d      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a20      	ldr	r2, [pc, #128]	; (8003388 <HAL_DMA_Abort_IT+0x1c8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d018      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1f      	ldr	r2, [pc, #124]	; (800338c <HAL_DMA_Abort_IT+0x1cc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d013      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1d      	ldr	r2, [pc, #116]	; (8003390 <HAL_DMA_Abort_IT+0x1d0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00e      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1c      	ldr	r2, [pc, #112]	; (8003394 <HAL_DMA_Abort_IT+0x1d4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d009      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1a      	ldr	r2, [pc, #104]	; (8003398 <HAL_DMA_Abort_IT+0x1d8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_DMA_Abort_IT+0x17c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a19      	ldr	r2, [pc, #100]	; (800339c <HAL_DMA_Abort_IT+0x1dc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d108      	bne.n	800334e <HAL_DMA_Abort_IT+0x18e>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e178      	b.n	8003640 <HAL_DMA_Abort_IT+0x480>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e16f      	b.n	8003640 <HAL_DMA_Abort_IT+0x480>
 8003360:	40020010 	.word	0x40020010
 8003364:	40020028 	.word	0x40020028
 8003368:	40020040 	.word	0x40020040
 800336c:	40020058 	.word	0x40020058
 8003370:	40020070 	.word	0x40020070
 8003374:	40020088 	.word	0x40020088
 8003378:	400200a0 	.word	0x400200a0
 800337c:	400200b8 	.word	0x400200b8
 8003380:	40020410 	.word	0x40020410
 8003384:	40020428 	.word	0x40020428
 8003388:	40020440 	.word	0x40020440
 800338c:	40020458 	.word	0x40020458
 8003390:	40020470 	.word	0x40020470
 8003394:	40020488 	.word	0x40020488
 8003398:	400204a0 	.word	0x400204a0
 800339c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 020e 	bic.w	r2, r2, #14
 80033ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a6c      	ldr	r2, [pc, #432]	; (8003568 <HAL_DMA_Abort_IT+0x3a8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d04a      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6b      	ldr	r2, [pc, #428]	; (800356c <HAL_DMA_Abort_IT+0x3ac>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d045      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a69      	ldr	r2, [pc, #420]	; (8003570 <HAL_DMA_Abort_IT+0x3b0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d040      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a68      	ldr	r2, [pc, #416]	; (8003574 <HAL_DMA_Abort_IT+0x3b4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d03b      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a66      	ldr	r2, [pc, #408]	; (8003578 <HAL_DMA_Abort_IT+0x3b8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d036      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a65      	ldr	r2, [pc, #404]	; (800357c <HAL_DMA_Abort_IT+0x3bc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d031      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a63      	ldr	r2, [pc, #396]	; (8003580 <HAL_DMA_Abort_IT+0x3c0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d02c      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a62      	ldr	r2, [pc, #392]	; (8003584 <HAL_DMA_Abort_IT+0x3c4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d027      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a60      	ldr	r2, [pc, #384]	; (8003588 <HAL_DMA_Abort_IT+0x3c8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d022      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a5f      	ldr	r2, [pc, #380]	; (800358c <HAL_DMA_Abort_IT+0x3cc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d01d      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a5d      	ldr	r2, [pc, #372]	; (8003590 <HAL_DMA_Abort_IT+0x3d0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d018      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a5c      	ldr	r2, [pc, #368]	; (8003594 <HAL_DMA_Abort_IT+0x3d4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a5a      	ldr	r2, [pc, #360]	; (8003598 <HAL_DMA_Abort_IT+0x3d8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00e      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a59      	ldr	r2, [pc, #356]	; (800359c <HAL_DMA_Abort_IT+0x3dc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d009      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a57      	ldr	r2, [pc, #348]	; (80035a0 <HAL_DMA_Abort_IT+0x3e0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <HAL_DMA_Abort_IT+0x290>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a56      	ldr	r2, [pc, #344]	; (80035a4 <HAL_DMA_Abort_IT+0x3e4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d108      	bne.n	8003462 <HAL_DMA_Abort_IT+0x2a2>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e007      	b.n	8003472 <HAL_DMA_Abort_IT+0x2b2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a3c      	ldr	r2, [pc, #240]	; (8003568 <HAL_DMA_Abort_IT+0x3a8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d072      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a3a      	ldr	r2, [pc, #232]	; (800356c <HAL_DMA_Abort_IT+0x3ac>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d06d      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a39      	ldr	r2, [pc, #228]	; (8003570 <HAL_DMA_Abort_IT+0x3b0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d068      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a37      	ldr	r2, [pc, #220]	; (8003574 <HAL_DMA_Abort_IT+0x3b4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d063      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a36      	ldr	r2, [pc, #216]	; (8003578 <HAL_DMA_Abort_IT+0x3b8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d05e      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a34      	ldr	r2, [pc, #208]	; (800357c <HAL_DMA_Abort_IT+0x3bc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d059      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a33      	ldr	r2, [pc, #204]	; (8003580 <HAL_DMA_Abort_IT+0x3c0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d054      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a31      	ldr	r2, [pc, #196]	; (8003584 <HAL_DMA_Abort_IT+0x3c4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d04f      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a30      	ldr	r2, [pc, #192]	; (8003588 <HAL_DMA_Abort_IT+0x3c8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d04a      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a2e      	ldr	r2, [pc, #184]	; (800358c <HAL_DMA_Abort_IT+0x3cc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d045      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a2d      	ldr	r2, [pc, #180]	; (8003590 <HAL_DMA_Abort_IT+0x3d0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d040      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2b      	ldr	r2, [pc, #172]	; (8003594 <HAL_DMA_Abort_IT+0x3d4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d03b      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <HAL_DMA_Abort_IT+0x3d8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d036      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a28      	ldr	r2, [pc, #160]	; (800359c <HAL_DMA_Abort_IT+0x3dc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d031      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a27      	ldr	r2, [pc, #156]	; (80035a0 <HAL_DMA_Abort_IT+0x3e0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d02c      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a25      	ldr	r2, [pc, #148]	; (80035a4 <HAL_DMA_Abort_IT+0x3e4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d027      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a24      	ldr	r2, [pc, #144]	; (80035a8 <HAL_DMA_Abort_IT+0x3e8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d022      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a22      	ldr	r2, [pc, #136]	; (80035ac <HAL_DMA_Abort_IT+0x3ec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01d      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a21      	ldr	r2, [pc, #132]	; (80035b0 <HAL_DMA_Abort_IT+0x3f0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d018      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <HAL_DMA_Abort_IT+0x3f4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <HAL_DMA_Abort_IT+0x3f8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <HAL_DMA_Abort_IT+0x3fc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d009      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <HAL_DMA_Abort_IT+0x400>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_DMA_Abort_IT+0x3a2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <HAL_DMA_Abort_IT+0x404>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d132      	bne.n	80035c8 <HAL_DMA_Abort_IT+0x408>
 8003562:	2301      	movs	r3, #1
 8003564:	e031      	b.n	80035ca <HAL_DMA_Abort_IT+0x40a>
 8003566:	bf00      	nop
 8003568:	40020010 	.word	0x40020010
 800356c:	40020028 	.word	0x40020028
 8003570:	40020040 	.word	0x40020040
 8003574:	40020058 	.word	0x40020058
 8003578:	40020070 	.word	0x40020070
 800357c:	40020088 	.word	0x40020088
 8003580:	400200a0 	.word	0x400200a0
 8003584:	400200b8 	.word	0x400200b8
 8003588:	40020410 	.word	0x40020410
 800358c:	40020428 	.word	0x40020428
 8003590:	40020440 	.word	0x40020440
 8003594:	40020458 	.word	0x40020458
 8003598:	40020470 	.word	0x40020470
 800359c:	40020488 	.word	0x40020488
 80035a0:	400204a0 	.word	0x400204a0
 80035a4:	400204b8 	.word	0x400204b8
 80035a8:	58025408 	.word	0x58025408
 80035ac:	5802541c 	.word	0x5802541c
 80035b0:	58025430 	.word	0x58025430
 80035b4:	58025444 	.word	0x58025444
 80035b8:	58025458 	.word	0x58025458
 80035bc:	5802546c 	.word	0x5802546c
 80035c0:	58025480 	.word	0x58025480
 80035c4:	58025494 	.word	0x58025494
 80035c8:	2300      	movs	r3, #0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d028      	beq.n	8003620 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2201      	movs	r2, #1
 80035ee:	409a      	lsls	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003614:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800361e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop

0800364c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003658:	4b67      	ldr	r3, [pc, #412]	; (80037f8 <HAL_DMA_IRQHandler+0x1ac>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a67      	ldr	r2, [pc, #412]	; (80037fc <HAL_DMA_IRQHandler+0x1b0>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	0a9b      	lsrs	r3, r3, #10
 8003664:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a5f      	ldr	r2, [pc, #380]	; (8003800 <HAL_DMA_IRQHandler+0x1b4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d04a      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a5d      	ldr	r2, [pc, #372]	; (8003804 <HAL_DMA_IRQHandler+0x1b8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d045      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a5c      	ldr	r2, [pc, #368]	; (8003808 <HAL_DMA_IRQHandler+0x1bc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d040      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a5a      	ldr	r2, [pc, #360]	; (800380c <HAL_DMA_IRQHandler+0x1c0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d03b      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a59      	ldr	r2, [pc, #356]	; (8003810 <HAL_DMA_IRQHandler+0x1c4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d036      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a57      	ldr	r2, [pc, #348]	; (8003814 <HAL_DMA_IRQHandler+0x1c8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d031      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a56      	ldr	r2, [pc, #344]	; (8003818 <HAL_DMA_IRQHandler+0x1cc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d02c      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a54      	ldr	r2, [pc, #336]	; (800381c <HAL_DMA_IRQHandler+0x1d0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d027      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a53      	ldr	r2, [pc, #332]	; (8003820 <HAL_DMA_IRQHandler+0x1d4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d022      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a51      	ldr	r2, [pc, #324]	; (8003824 <HAL_DMA_IRQHandler+0x1d8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01d      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a50      	ldr	r2, [pc, #320]	; (8003828 <HAL_DMA_IRQHandler+0x1dc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d018      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a4e      	ldr	r2, [pc, #312]	; (800382c <HAL_DMA_IRQHandler+0x1e0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a4d      	ldr	r2, [pc, #308]	; (8003830 <HAL_DMA_IRQHandler+0x1e4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a4b      	ldr	r2, [pc, #300]	; (8003834 <HAL_DMA_IRQHandler+0x1e8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a4a      	ldr	r2, [pc, #296]	; (8003838 <HAL_DMA_IRQHandler+0x1ec>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_DMA_IRQHandler+0xd2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a48      	ldr	r2, [pc, #288]	; (800383c <HAL_DMA_IRQHandler+0x1f0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_DMA_IRQHandler+0xd6>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_DMA_IRQHandler+0xd8>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 842b 	beq.w	8003f80 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	2208      	movs	r2, #8
 8003734:	409a      	lsls	r2, r3
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80a2 	beq.w	8003884 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2e      	ldr	r2, [pc, #184]	; (8003800 <HAL_DMA_IRQHandler+0x1b4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d04a      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2d      	ldr	r2, [pc, #180]	; (8003804 <HAL_DMA_IRQHandler+0x1b8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d045      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2b      	ldr	r2, [pc, #172]	; (8003808 <HAL_DMA_IRQHandler+0x1bc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d040      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2a      	ldr	r2, [pc, #168]	; (800380c <HAL_DMA_IRQHandler+0x1c0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d03b      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a28      	ldr	r2, [pc, #160]	; (8003810 <HAL_DMA_IRQHandler+0x1c4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d036      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a27      	ldr	r2, [pc, #156]	; (8003814 <HAL_DMA_IRQHandler+0x1c8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d031      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a25      	ldr	r2, [pc, #148]	; (8003818 <HAL_DMA_IRQHandler+0x1cc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d02c      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a24      	ldr	r2, [pc, #144]	; (800381c <HAL_DMA_IRQHandler+0x1d0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d027      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_DMA_IRQHandler+0x1d4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d022      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_DMA_IRQHandler+0x1d8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d01d      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1f      	ldr	r2, [pc, #124]	; (8003828 <HAL_DMA_IRQHandler+0x1dc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d018      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1e      	ldr	r2, [pc, #120]	; (800382c <HAL_DMA_IRQHandler+0x1e0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d013      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <HAL_DMA_IRQHandler+0x1e4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00e      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1b      	ldr	r2, [pc, #108]	; (8003834 <HAL_DMA_IRQHandler+0x1e8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d009      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a19      	ldr	r2, [pc, #100]	; (8003838 <HAL_DMA_IRQHandler+0x1ec>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x194>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a18      	ldr	r2, [pc, #96]	; (800383c <HAL_DMA_IRQHandler+0x1f0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d12f      	bne.n	8003840 <HAL_DMA_IRQHandler+0x1f4>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	bf14      	ite	ne
 80037ee:	2301      	movne	r3, #1
 80037f0:	2300      	moveq	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	e02e      	b.n	8003854 <HAL_DMA_IRQHandler+0x208>
 80037f6:	bf00      	nop
 80037f8:	24000000 	.word	0x24000000
 80037fc:	1b4e81b5 	.word	0x1b4e81b5
 8003800:	40020010 	.word	0x40020010
 8003804:	40020028 	.word	0x40020028
 8003808:	40020040 	.word	0x40020040
 800380c:	40020058 	.word	0x40020058
 8003810:	40020070 	.word	0x40020070
 8003814:	40020088 	.word	0x40020088
 8003818:	400200a0 	.word	0x400200a0
 800381c:	400200b8 	.word	0x400200b8
 8003820:	40020410 	.word	0x40020410
 8003824:	40020428 	.word	0x40020428
 8003828:	40020440 	.word	0x40020440
 800382c:	40020458 	.word	0x40020458
 8003830:	40020470 	.word	0x40020470
 8003834:	40020488 	.word	0x40020488
 8003838:	400204a0 	.word	0x400204a0
 800383c:	400204b8 	.word	0x400204b8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	bf14      	ite	ne
 800384e:	2301      	movne	r3, #1
 8003850:	2300      	moveq	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d015      	beq.n	8003884 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0204 	bic.w	r2, r2, #4
 8003866:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	2208      	movs	r2, #8
 8003872:	409a      	lsls	r2, r3
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d06e      	beq.n	8003978 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a69      	ldr	r2, [pc, #420]	; (8003a44 <HAL_DMA_IRQHandler+0x3f8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d04a      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a67      	ldr	r2, [pc, #412]	; (8003a48 <HAL_DMA_IRQHandler+0x3fc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d045      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a66      	ldr	r2, [pc, #408]	; (8003a4c <HAL_DMA_IRQHandler+0x400>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d040      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a64      	ldr	r2, [pc, #400]	; (8003a50 <HAL_DMA_IRQHandler+0x404>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d03b      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a63      	ldr	r2, [pc, #396]	; (8003a54 <HAL_DMA_IRQHandler+0x408>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d036      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a61      	ldr	r2, [pc, #388]	; (8003a58 <HAL_DMA_IRQHandler+0x40c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d031      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a60      	ldr	r2, [pc, #384]	; (8003a5c <HAL_DMA_IRQHandler+0x410>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d02c      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5e      	ldr	r2, [pc, #376]	; (8003a60 <HAL_DMA_IRQHandler+0x414>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d027      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a5d      	ldr	r2, [pc, #372]	; (8003a64 <HAL_DMA_IRQHandler+0x418>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d022      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a5b      	ldr	r2, [pc, #364]	; (8003a68 <HAL_DMA_IRQHandler+0x41c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01d      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a5a      	ldr	r2, [pc, #360]	; (8003a6c <HAL_DMA_IRQHandler+0x420>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d018      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a58      	ldr	r2, [pc, #352]	; (8003a70 <HAL_DMA_IRQHandler+0x424>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a57      	ldr	r2, [pc, #348]	; (8003a74 <HAL_DMA_IRQHandler+0x428>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a55      	ldr	r2, [pc, #340]	; (8003a78 <HAL_DMA_IRQHandler+0x42c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a54      	ldr	r2, [pc, #336]	; (8003a7c <HAL_DMA_IRQHandler+0x430>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_DMA_IRQHandler+0x2ee>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a52      	ldr	r2, [pc, #328]	; (8003a80 <HAL_DMA_IRQHandler+0x434>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d10a      	bne.n	8003950 <HAL_DMA_IRQHandler+0x304>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e003      	b.n	8003958 <HAL_DMA_IRQHandler+0x30c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2300      	movs	r3, #0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00d      	beq.n	8003978 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	2201      	movs	r2, #1
 8003966:	409a      	lsls	r2, r3
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003970:	f043 0202 	orr.w	r2, r3, #2
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	2204      	movs	r2, #4
 8003982:	409a      	lsls	r2, r3
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 808f 	beq.w	8003aac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a2c      	ldr	r2, [pc, #176]	; (8003a44 <HAL_DMA_IRQHandler+0x3f8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d04a      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <HAL_DMA_IRQHandler+0x3fc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d045      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a29      	ldr	r2, [pc, #164]	; (8003a4c <HAL_DMA_IRQHandler+0x400>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d040      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <HAL_DMA_IRQHandler+0x404>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d03b      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <HAL_DMA_IRQHandler+0x408>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d036      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <HAL_DMA_IRQHandler+0x40c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d031      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a23      	ldr	r2, [pc, #140]	; (8003a5c <HAL_DMA_IRQHandler+0x410>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d02c      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <HAL_DMA_IRQHandler+0x414>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d027      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a20      	ldr	r2, [pc, #128]	; (8003a64 <HAL_DMA_IRQHandler+0x418>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d022      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <HAL_DMA_IRQHandler+0x41c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01d      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <HAL_DMA_IRQHandler+0x420>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <HAL_DMA_IRQHandler+0x424>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1a      	ldr	r2, [pc, #104]	; (8003a74 <HAL_DMA_IRQHandler+0x428>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <HAL_DMA_IRQHandler+0x42c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <HAL_DMA_IRQHandler+0x430>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x3e2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <HAL_DMA_IRQHandler+0x434>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d12a      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x438>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e023      	b.n	8003a8c <HAL_DMA_IRQHandler+0x440>
 8003a44:	40020010 	.word	0x40020010
 8003a48:	40020028 	.word	0x40020028
 8003a4c:	40020040 	.word	0x40020040
 8003a50:	40020058 	.word	0x40020058
 8003a54:	40020070 	.word	0x40020070
 8003a58:	40020088 	.word	0x40020088
 8003a5c:	400200a0 	.word	0x400200a0
 8003a60:	400200b8 	.word	0x400200b8
 8003a64:	40020410 	.word	0x40020410
 8003a68:	40020428 	.word	0x40020428
 8003a6c:	40020440 	.word	0x40020440
 8003a70:	40020458 	.word	0x40020458
 8003a74:	40020470 	.word	0x40020470
 8003a78:	40020488 	.word	0x40020488
 8003a7c:	400204a0 	.word	0x400204a0
 8003a80:	400204b8 	.word	0x400204b8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2204      	movs	r2, #4
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f043 0204 	orr.w	r2, r3, #4
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80a6 	beq.w	8003c0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a85      	ldr	r2, [pc, #532]	; (8003cdc <HAL_DMA_IRQHandler+0x690>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d04a      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a83      	ldr	r2, [pc, #524]	; (8003ce0 <HAL_DMA_IRQHandler+0x694>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d045      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a82      	ldr	r2, [pc, #520]	; (8003ce4 <HAL_DMA_IRQHandler+0x698>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d040      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a80      	ldr	r2, [pc, #512]	; (8003ce8 <HAL_DMA_IRQHandler+0x69c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d03b      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a7f      	ldr	r2, [pc, #508]	; (8003cec <HAL_DMA_IRQHandler+0x6a0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d036      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a7d      	ldr	r2, [pc, #500]	; (8003cf0 <HAL_DMA_IRQHandler+0x6a4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d031      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7c      	ldr	r2, [pc, #496]	; (8003cf4 <HAL_DMA_IRQHandler+0x6a8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d02c      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a7a      	ldr	r2, [pc, #488]	; (8003cf8 <HAL_DMA_IRQHandler+0x6ac>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d027      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a79      	ldr	r2, [pc, #484]	; (8003cfc <HAL_DMA_IRQHandler+0x6b0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d022      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a77      	ldr	r2, [pc, #476]	; (8003d00 <HAL_DMA_IRQHandler+0x6b4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a76      	ldr	r2, [pc, #472]	; (8003d04 <HAL_DMA_IRQHandler+0x6b8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d018      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a74      	ldr	r2, [pc, #464]	; (8003d08 <HAL_DMA_IRQHandler+0x6bc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a73      	ldr	r2, [pc, #460]	; (8003d0c <HAL_DMA_IRQHandler+0x6c0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00e      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a71      	ldr	r2, [pc, #452]	; (8003d10 <HAL_DMA_IRQHandler+0x6c4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a70      	ldr	r2, [pc, #448]	; (8003d14 <HAL_DMA_IRQHandler+0x6c8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x516>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a6e      	ldr	r2, [pc, #440]	; (8003d18 <HAL_DMA_IRQHandler+0x6cc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10a      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x52c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf14      	ite	ne
 8003b70:	2301      	movne	r3, #1
 8003b72:	2300      	moveq	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e009      	b.n	8003b8c <HAL_DMA_IRQHandler+0x540>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bf14      	ite	ne
 8003b86:	2301      	movne	r3, #1
 8003b88:	2300      	moveq	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d03e      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2210      	movs	r2, #16
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d018      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d108      	bne.n	8003bce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d024      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e01f      	b.n	8003c0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d01b      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
 8003bde:	e016      	b.n	8003c0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d107      	bne.n	8003bfe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0208 	bic.w	r2, r2, #8
 8003bfc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	2220      	movs	r2, #32
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8110 	beq.w	8003e44 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2c      	ldr	r2, [pc, #176]	; (8003cdc <HAL_DMA_IRQHandler+0x690>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d04a      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2b      	ldr	r2, [pc, #172]	; (8003ce0 <HAL_DMA_IRQHandler+0x694>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d045      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <HAL_DMA_IRQHandler+0x698>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d040      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a28      	ldr	r2, [pc, #160]	; (8003ce8 <HAL_DMA_IRQHandler+0x69c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d03b      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a26      	ldr	r2, [pc, #152]	; (8003cec <HAL_DMA_IRQHandler+0x6a0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d036      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <HAL_DMA_IRQHandler+0x6a4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d031      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a23      	ldr	r2, [pc, #140]	; (8003cf4 <HAL_DMA_IRQHandler+0x6a8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d02c      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <HAL_DMA_IRQHandler+0x6ac>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d027      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a20      	ldr	r2, [pc, #128]	; (8003cfc <HAL_DMA_IRQHandler+0x6b0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d022      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1f      	ldr	r2, [pc, #124]	; (8003d00 <HAL_DMA_IRQHandler+0x6b4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d01d      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <HAL_DMA_IRQHandler+0x6b8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d018      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_DMA_IRQHandler+0x6bc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d013      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <HAL_DMA_IRQHandler+0x6c0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00e      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <HAL_DMA_IRQHandler+0x6c4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d009      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <HAL_DMA_IRQHandler+0x6c8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x678>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <HAL_DMA_IRQHandler+0x6cc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d12b      	bne.n	8003d1c <HAL_DMA_IRQHandler+0x6d0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	e02a      	b.n	8003d30 <HAL_DMA_IRQHandler+0x6e4>
 8003cda:	bf00      	nop
 8003cdc:	40020010 	.word	0x40020010
 8003ce0:	40020028 	.word	0x40020028
 8003ce4:	40020040 	.word	0x40020040
 8003ce8:	40020058 	.word	0x40020058
 8003cec:	40020070 	.word	0x40020070
 8003cf0:	40020088 	.word	0x40020088
 8003cf4:	400200a0 	.word	0x400200a0
 8003cf8:	400200b8 	.word	0x400200b8
 8003cfc:	40020410 	.word	0x40020410
 8003d00:	40020428 	.word	0x40020428
 8003d04:	40020440 	.word	0x40020440
 8003d08:	40020458 	.word	0x40020458
 8003d0c:	40020470 	.word	0x40020470
 8003d10:	40020488 	.word	0x40020488
 8003d14:	400204a0 	.word	0x400204a0
 8003d18:	400204b8 	.word	0x400204b8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	bf14      	ite	ne
 8003d2a:	2301      	movne	r3, #1
 8003d2c:	2300      	moveq	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8087 	beq.w	8003e44 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2220      	movs	r2, #32
 8003d40:	409a      	lsls	r2, r3
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d139      	bne.n	8003dc6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0216 	bic.w	r2, r2, #22
 8003d60:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d70:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d103      	bne.n	8003d82 <HAL_DMA_IRQHandler+0x736>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0208 	bic.w	r2, r2, #8
 8003d90:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	223f      	movs	r2, #63	; 0x3f
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 834a 	beq.w	8004450 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	4798      	blx	r3
          }
          return;
 8003dc4:	e344      	b.n	8004450 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d018      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d108      	bne.n	8003df4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d02c      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
 8003df2:	e027      	b.n	8003e44 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d023      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
 8003e04:	e01e      	b.n	8003e44 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10f      	bne.n	8003e34 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0210 	bic.w	r2, r2, #16
 8003e22:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8306 	beq.w	800445a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8088 	beq.w	8003f6c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a7a      	ldr	r2, [pc, #488]	; (8004054 <HAL_DMA_IRQHandler+0xa08>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d04a      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a79      	ldr	r2, [pc, #484]	; (8004058 <HAL_DMA_IRQHandler+0xa0c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d045      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a77      	ldr	r2, [pc, #476]	; (800405c <HAL_DMA_IRQHandler+0xa10>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d040      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a76      	ldr	r2, [pc, #472]	; (8004060 <HAL_DMA_IRQHandler+0xa14>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d03b      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a74      	ldr	r2, [pc, #464]	; (8004064 <HAL_DMA_IRQHandler+0xa18>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d036      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a73      	ldr	r2, [pc, #460]	; (8004068 <HAL_DMA_IRQHandler+0xa1c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d031      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a71      	ldr	r2, [pc, #452]	; (800406c <HAL_DMA_IRQHandler+0xa20>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d02c      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a70      	ldr	r2, [pc, #448]	; (8004070 <HAL_DMA_IRQHandler+0xa24>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d027      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a6e      	ldr	r2, [pc, #440]	; (8004074 <HAL_DMA_IRQHandler+0xa28>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d022      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a6d      	ldr	r2, [pc, #436]	; (8004078 <HAL_DMA_IRQHandler+0xa2c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d01d      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a6b      	ldr	r2, [pc, #428]	; (800407c <HAL_DMA_IRQHandler+0xa30>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d018      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a6a      	ldr	r2, [pc, #424]	; (8004080 <HAL_DMA_IRQHandler+0xa34>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a68      	ldr	r2, [pc, #416]	; (8004084 <HAL_DMA_IRQHandler+0xa38>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a67      	ldr	r2, [pc, #412]	; (8004088 <HAL_DMA_IRQHandler+0xa3c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d009      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a65      	ldr	r2, [pc, #404]	; (800408c <HAL_DMA_IRQHandler+0xa40>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x8b8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a64      	ldr	r2, [pc, #400]	; (8004090 <HAL_DMA_IRQHandler+0xa44>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d108      	bne.n	8003f16 <HAL_DMA_IRQHandler+0x8ca>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0201 	bic.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e007      	b.n	8003f26 <HAL_DMA_IRQHandler+0x8da>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d307      	bcc.n	8003f42 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f2      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x8da>
 8003f40:	e000      	b.n	8003f44 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003f42:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2203      	movs	r2, #3
 8003f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003f5a:	e003      	b.n	8003f64 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8272 	beq.w	800445a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
 8003f7e:	e26c      	b.n	800445a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a43      	ldr	r2, [pc, #268]	; (8004094 <HAL_DMA_IRQHandler+0xa48>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d022      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x984>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a42      	ldr	r2, [pc, #264]	; (8004098 <HAL_DMA_IRQHandler+0xa4c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d01d      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x984>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a40      	ldr	r2, [pc, #256]	; (800409c <HAL_DMA_IRQHandler+0xa50>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d018      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x984>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a3f      	ldr	r2, [pc, #252]	; (80040a0 <HAL_DMA_IRQHandler+0xa54>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x984>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a3d      	ldr	r2, [pc, #244]	; (80040a4 <HAL_DMA_IRQHandler+0xa58>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x984>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a3c      	ldr	r2, [pc, #240]	; (80040a8 <HAL_DMA_IRQHandler+0xa5c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x984>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a3a      	ldr	r2, [pc, #232]	; (80040ac <HAL_DMA_IRQHandler+0xa60>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x984>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a39      	ldr	r2, [pc, #228]	; (80040b0 <HAL_DMA_IRQHandler+0xa64>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <HAL_DMA_IRQHandler+0x988>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x98a>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 823f 	beq.w	800445a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2204      	movs	r2, #4
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80cd 	beq.w	8004194 <HAL_DMA_IRQHandler+0xb48>
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80c7 	beq.w	8004194 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2204      	movs	r2, #4
 8004010:	409a      	lsls	r2, r3
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d049      	beq.n	80040b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 8210 	beq.w	8004454 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800403c:	e20a      	b.n	8004454 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8206 	beq.w	8004454 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004050:	e200      	b.n	8004454 <HAL_DMA_IRQHandler+0xe08>
 8004052:	bf00      	nop
 8004054:	40020010 	.word	0x40020010
 8004058:	40020028 	.word	0x40020028
 800405c:	40020040 	.word	0x40020040
 8004060:	40020058 	.word	0x40020058
 8004064:	40020070 	.word	0x40020070
 8004068:	40020088 	.word	0x40020088
 800406c:	400200a0 	.word	0x400200a0
 8004070:	400200b8 	.word	0x400200b8
 8004074:	40020410 	.word	0x40020410
 8004078:	40020428 	.word	0x40020428
 800407c:	40020440 	.word	0x40020440
 8004080:	40020458 	.word	0x40020458
 8004084:	40020470 	.word	0x40020470
 8004088:	40020488 	.word	0x40020488
 800408c:	400204a0 	.word	0x400204a0
 8004090:	400204b8 	.word	0x400204b8
 8004094:	58025408 	.word	0x58025408
 8004098:	5802541c 	.word	0x5802541c
 800409c:	58025430 	.word	0x58025430
 80040a0:	58025444 	.word	0x58025444
 80040a4:	58025458 	.word	0x58025458
 80040a8:	5802546c 	.word	0x5802546c
 80040ac:	58025480 	.word	0x58025480
 80040b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d160      	bne.n	8004180 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a7f      	ldr	r2, [pc, #508]	; (80042c0 <HAL_DMA_IRQHandler+0xc74>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d04a      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a7d      	ldr	r2, [pc, #500]	; (80042c4 <HAL_DMA_IRQHandler+0xc78>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d045      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a7c      	ldr	r2, [pc, #496]	; (80042c8 <HAL_DMA_IRQHandler+0xc7c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d040      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a7a      	ldr	r2, [pc, #488]	; (80042cc <HAL_DMA_IRQHandler+0xc80>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d03b      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a79      	ldr	r2, [pc, #484]	; (80042d0 <HAL_DMA_IRQHandler+0xc84>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d036      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a77      	ldr	r2, [pc, #476]	; (80042d4 <HAL_DMA_IRQHandler+0xc88>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d031      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a76      	ldr	r2, [pc, #472]	; (80042d8 <HAL_DMA_IRQHandler+0xc8c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d02c      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a74      	ldr	r2, [pc, #464]	; (80042dc <HAL_DMA_IRQHandler+0xc90>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d027      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a73      	ldr	r2, [pc, #460]	; (80042e0 <HAL_DMA_IRQHandler+0xc94>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d022      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a71      	ldr	r2, [pc, #452]	; (80042e4 <HAL_DMA_IRQHandler+0xc98>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01d      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a70      	ldr	r2, [pc, #448]	; (80042e8 <HAL_DMA_IRQHandler+0xc9c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d018      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a6e      	ldr	r2, [pc, #440]	; (80042ec <HAL_DMA_IRQHandler+0xca0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a6d      	ldr	r2, [pc, #436]	; (80042f0 <HAL_DMA_IRQHandler+0xca4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00e      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6b      	ldr	r2, [pc, #428]	; (80042f4 <HAL_DMA_IRQHandler+0xca8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d009      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a6a      	ldr	r2, [pc, #424]	; (80042f8 <HAL_DMA_IRQHandler+0xcac>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_DMA_IRQHandler+0xb12>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a68      	ldr	r2, [pc, #416]	; (80042fc <HAL_DMA_IRQHandler+0xcb0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d108      	bne.n	8004170 <HAL_DMA_IRQHandler+0xb24>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0208 	bic.w	r2, r2, #8
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e007      	b.n	8004180 <HAL_DMA_IRQHandler+0xb34>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0204 	bic.w	r2, r2, #4
 800417e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8165 	beq.w	8004454 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004192:	e15f      	b.n	8004454 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2202      	movs	r2, #2
 800419e:	409a      	lsls	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80c5 	beq.w	8004334 <HAL_DMA_IRQHandler+0xce8>
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80bf 	beq.w	8004334 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2202      	movs	r2, #2
 80041c0:	409a      	lsls	r2, r3
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d018      	beq.n	8004202 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 813a 	beq.w	8004458 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041ec:	e134      	b.n	8004458 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8130 	beq.w	8004458 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004200:	e12a      	b.n	8004458 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	f040 8089 	bne.w	8004320 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a2b      	ldr	r2, [pc, #172]	; (80042c0 <HAL_DMA_IRQHandler+0xc74>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d04a      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a29      	ldr	r2, [pc, #164]	; (80042c4 <HAL_DMA_IRQHandler+0xc78>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d045      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a28      	ldr	r2, [pc, #160]	; (80042c8 <HAL_DMA_IRQHandler+0xc7c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d040      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a26      	ldr	r2, [pc, #152]	; (80042cc <HAL_DMA_IRQHandler+0xc80>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d03b      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a25      	ldr	r2, [pc, #148]	; (80042d0 <HAL_DMA_IRQHandler+0xc84>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d036      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a23      	ldr	r2, [pc, #140]	; (80042d4 <HAL_DMA_IRQHandler+0xc88>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d031      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a22      	ldr	r2, [pc, #136]	; (80042d8 <HAL_DMA_IRQHandler+0xc8c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d02c      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a20      	ldr	r2, [pc, #128]	; (80042dc <HAL_DMA_IRQHandler+0xc90>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d027      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1f      	ldr	r2, [pc, #124]	; (80042e0 <HAL_DMA_IRQHandler+0xc94>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d022      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1d      	ldr	r2, [pc, #116]	; (80042e4 <HAL_DMA_IRQHandler+0xc98>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01d      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <HAL_DMA_IRQHandler+0xc9c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d018      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1a      	ldr	r2, [pc, #104]	; (80042ec <HAL_DMA_IRQHandler+0xca0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a19      	ldr	r2, [pc, #100]	; (80042f0 <HAL_DMA_IRQHandler+0xca4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a17      	ldr	r2, [pc, #92]	; (80042f4 <HAL_DMA_IRQHandler+0xca8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d009      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <HAL_DMA_IRQHandler+0xcac>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_DMA_IRQHandler+0xc62>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <HAL_DMA_IRQHandler+0xcb0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d128      	bne.n	8004300 <HAL_DMA_IRQHandler+0xcb4>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0214 	bic.w	r2, r2, #20
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e027      	b.n	8004310 <HAL_DMA_IRQHandler+0xcc4>
 80042c0:	40020010 	.word	0x40020010
 80042c4:	40020028 	.word	0x40020028
 80042c8:	40020040 	.word	0x40020040
 80042cc:	40020058 	.word	0x40020058
 80042d0:	40020070 	.word	0x40020070
 80042d4:	40020088 	.word	0x40020088
 80042d8:	400200a0 	.word	0x400200a0
 80042dc:	400200b8 	.word	0x400200b8
 80042e0:	40020410 	.word	0x40020410
 80042e4:	40020428 	.word	0x40020428
 80042e8:	40020440 	.word	0x40020440
 80042ec:	40020458 	.word	0x40020458
 80042f0:	40020470 	.word	0x40020470
 80042f4:	40020488 	.word	0x40020488
 80042f8:	400204a0 	.word	0x400204a0
 80042fc:	400204b8 	.word	0x400204b8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 020a 	bic.w	r2, r2, #10
 800430e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8097 	beq.w	8004458 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004332:	e091      	b.n	8004458 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	2208      	movs	r2, #8
 800433e:	409a      	lsls	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8088 	beq.w	800445a <HAL_DMA_IRQHandler+0xe0e>
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8082 	beq.w	800445a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a41      	ldr	r2, [pc, #260]	; (8004460 <HAL_DMA_IRQHandler+0xe14>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d04a      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a3f      	ldr	r2, [pc, #252]	; (8004464 <HAL_DMA_IRQHandler+0xe18>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d045      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a3e      	ldr	r2, [pc, #248]	; (8004468 <HAL_DMA_IRQHandler+0xe1c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d040      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a3c      	ldr	r2, [pc, #240]	; (800446c <HAL_DMA_IRQHandler+0xe20>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d03b      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a3b      	ldr	r2, [pc, #236]	; (8004470 <HAL_DMA_IRQHandler+0xe24>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d036      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a39      	ldr	r2, [pc, #228]	; (8004474 <HAL_DMA_IRQHandler+0xe28>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d031      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a38      	ldr	r2, [pc, #224]	; (8004478 <HAL_DMA_IRQHandler+0xe2c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d02c      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a36      	ldr	r2, [pc, #216]	; (800447c <HAL_DMA_IRQHandler+0xe30>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d027      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a35      	ldr	r2, [pc, #212]	; (8004480 <HAL_DMA_IRQHandler+0xe34>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d022      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a33      	ldr	r2, [pc, #204]	; (8004484 <HAL_DMA_IRQHandler+0xe38>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01d      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a32      	ldr	r2, [pc, #200]	; (8004488 <HAL_DMA_IRQHandler+0xe3c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d018      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a30      	ldr	r2, [pc, #192]	; (800448c <HAL_DMA_IRQHandler+0xe40>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a2f      	ldr	r2, [pc, #188]	; (8004490 <HAL_DMA_IRQHandler+0xe44>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00e      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a2d      	ldr	r2, [pc, #180]	; (8004494 <HAL_DMA_IRQHandler+0xe48>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a2c      	ldr	r2, [pc, #176]	; (8004498 <HAL_DMA_IRQHandler+0xe4c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xdaa>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a2a      	ldr	r2, [pc, #168]	; (800449c <HAL_DMA_IRQHandler+0xe50>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d108      	bne.n	8004408 <HAL_DMA_IRQHandler+0xdbc>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 021c 	bic.w	r2, r2, #28
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e007      	b.n	8004418 <HAL_DMA_IRQHandler+0xdcc>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 020e 	bic.w	r2, r2, #14
 8004416:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2201      	movs	r2, #1
 8004422:	409a      	lsls	r2, r3
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
 800444e:	e004      	b.n	800445a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004450:	bf00      	nop
 8004452:	e002      	b.n	800445a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004454:	bf00      	nop
 8004456:	e000      	b.n	800445a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004458:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800445a:	3728      	adds	r7, #40	; 0x28
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40020010 	.word	0x40020010
 8004464:	40020028 	.word	0x40020028
 8004468:	40020040 	.word	0x40020040
 800446c:	40020058 	.word	0x40020058
 8004470:	40020070 	.word	0x40020070
 8004474:	40020088 	.word	0x40020088
 8004478:	400200a0 	.word	0x400200a0
 800447c:	400200b8 	.word	0x400200b8
 8004480:	40020410 	.word	0x40020410
 8004484:	40020428 	.word	0x40020428
 8004488:	40020440 	.word	0x40020440
 800448c:	40020458 	.word	0x40020458
 8004490:	40020470 	.word	0x40020470
 8004494:	40020488 	.word	0x40020488
 8004498:	400204a0 	.word	0x400204a0
 800449c:	400204b8 	.word	0x400204b8

080044a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a7f      	ldr	r2, [pc, #508]	; (80046d4 <DMA_SetConfig+0x21c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d072      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a7d      	ldr	r2, [pc, #500]	; (80046d8 <DMA_SetConfig+0x220>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d06d      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a7c      	ldr	r2, [pc, #496]	; (80046dc <DMA_SetConfig+0x224>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d068      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a7a      	ldr	r2, [pc, #488]	; (80046e0 <DMA_SetConfig+0x228>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d063      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a79      	ldr	r2, [pc, #484]	; (80046e4 <DMA_SetConfig+0x22c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d05e      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a77      	ldr	r2, [pc, #476]	; (80046e8 <DMA_SetConfig+0x230>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d059      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a76      	ldr	r2, [pc, #472]	; (80046ec <DMA_SetConfig+0x234>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d054      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a74      	ldr	r2, [pc, #464]	; (80046f0 <DMA_SetConfig+0x238>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d04f      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a73      	ldr	r2, [pc, #460]	; (80046f4 <DMA_SetConfig+0x23c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d04a      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a71      	ldr	r2, [pc, #452]	; (80046f8 <DMA_SetConfig+0x240>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d045      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a70      	ldr	r2, [pc, #448]	; (80046fc <DMA_SetConfig+0x244>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d040      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a6e      	ldr	r2, [pc, #440]	; (8004700 <DMA_SetConfig+0x248>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d03b      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a6d      	ldr	r2, [pc, #436]	; (8004704 <DMA_SetConfig+0x24c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d036      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a6b      	ldr	r2, [pc, #428]	; (8004708 <DMA_SetConfig+0x250>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d031      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6a      	ldr	r2, [pc, #424]	; (800470c <DMA_SetConfig+0x254>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d02c      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a68      	ldr	r2, [pc, #416]	; (8004710 <DMA_SetConfig+0x258>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d027      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a67      	ldr	r2, [pc, #412]	; (8004714 <DMA_SetConfig+0x25c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d022      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a65      	ldr	r2, [pc, #404]	; (8004718 <DMA_SetConfig+0x260>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01d      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a64      	ldr	r2, [pc, #400]	; (800471c <DMA_SetConfig+0x264>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d018      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a62      	ldr	r2, [pc, #392]	; (8004720 <DMA_SetConfig+0x268>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a61      	ldr	r2, [pc, #388]	; (8004724 <DMA_SetConfig+0x26c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00e      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a5f      	ldr	r2, [pc, #380]	; (8004728 <DMA_SetConfig+0x270>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d009      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a5e      	ldr	r2, [pc, #376]	; (800472c <DMA_SetConfig+0x274>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <DMA_SetConfig+0x10a>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a5c      	ldr	r2, [pc, #368]	; (8004730 <DMA_SetConfig+0x278>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d101      	bne.n	80045c6 <DMA_SetConfig+0x10e>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <DMA_SetConfig+0x110>
 80045c6:	2300      	movs	r3, #0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00d      	beq.n	80045e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d004      	beq.n	80045e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a39      	ldr	r2, [pc, #228]	; (80046d4 <DMA_SetConfig+0x21c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d04a      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a38      	ldr	r2, [pc, #224]	; (80046d8 <DMA_SetConfig+0x220>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d045      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a36      	ldr	r2, [pc, #216]	; (80046dc <DMA_SetConfig+0x224>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d040      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a35      	ldr	r2, [pc, #212]	; (80046e0 <DMA_SetConfig+0x228>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d03b      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a33      	ldr	r2, [pc, #204]	; (80046e4 <DMA_SetConfig+0x22c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d036      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a32      	ldr	r2, [pc, #200]	; (80046e8 <DMA_SetConfig+0x230>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d031      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a30      	ldr	r2, [pc, #192]	; (80046ec <DMA_SetConfig+0x234>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d02c      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2f      	ldr	r2, [pc, #188]	; (80046f0 <DMA_SetConfig+0x238>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d027      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2d      	ldr	r2, [pc, #180]	; (80046f4 <DMA_SetConfig+0x23c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2c      	ldr	r2, [pc, #176]	; (80046f8 <DMA_SetConfig+0x240>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d01d      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a2a      	ldr	r2, [pc, #168]	; (80046fc <DMA_SetConfig+0x244>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a29      	ldr	r2, [pc, #164]	; (8004700 <DMA_SetConfig+0x248>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a27      	ldr	r2, [pc, #156]	; (8004704 <DMA_SetConfig+0x24c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a26      	ldr	r2, [pc, #152]	; (8004708 <DMA_SetConfig+0x250>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a24      	ldr	r2, [pc, #144]	; (800470c <DMA_SetConfig+0x254>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <DMA_SetConfig+0x1d0>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a23      	ldr	r2, [pc, #140]	; (8004710 <DMA_SetConfig+0x258>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <DMA_SetConfig+0x1d4>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <DMA_SetConfig+0x1d6>
 800468c:	2300      	movs	r3, #0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d059      	beq.n	8004746 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	223f      	movs	r2, #63	; 0x3f
 800469c:	409a      	lsls	r2, r3
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b40      	cmp	r3, #64	; 0x40
 80046c0:	d138      	bne.n	8004734 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046d2:	e086      	b.n	80047e2 <DMA_SetConfig+0x32a>
 80046d4:	40020010 	.word	0x40020010
 80046d8:	40020028 	.word	0x40020028
 80046dc:	40020040 	.word	0x40020040
 80046e0:	40020058 	.word	0x40020058
 80046e4:	40020070 	.word	0x40020070
 80046e8:	40020088 	.word	0x40020088
 80046ec:	400200a0 	.word	0x400200a0
 80046f0:	400200b8 	.word	0x400200b8
 80046f4:	40020410 	.word	0x40020410
 80046f8:	40020428 	.word	0x40020428
 80046fc:	40020440 	.word	0x40020440
 8004700:	40020458 	.word	0x40020458
 8004704:	40020470 	.word	0x40020470
 8004708:	40020488 	.word	0x40020488
 800470c:	400204a0 	.word	0x400204a0
 8004710:	400204b8 	.word	0x400204b8
 8004714:	58025408 	.word	0x58025408
 8004718:	5802541c 	.word	0x5802541c
 800471c:	58025430 	.word	0x58025430
 8004720:	58025444 	.word	0x58025444
 8004724:	58025458 	.word	0x58025458
 8004728:	5802546c 	.word	0x5802546c
 800472c:	58025480 	.word	0x58025480
 8004730:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]
}
 8004744:	e04d      	b.n	80047e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <DMA_SetConfig+0x338>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d022      	beq.n	8004796 <DMA_SetConfig+0x2de>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a27      	ldr	r2, [pc, #156]	; (80047f4 <DMA_SetConfig+0x33c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d01d      	beq.n	8004796 <DMA_SetConfig+0x2de>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a26      	ldr	r2, [pc, #152]	; (80047f8 <DMA_SetConfig+0x340>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d018      	beq.n	8004796 <DMA_SetConfig+0x2de>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a24      	ldr	r2, [pc, #144]	; (80047fc <DMA_SetConfig+0x344>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <DMA_SetConfig+0x2de>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a23      	ldr	r2, [pc, #140]	; (8004800 <DMA_SetConfig+0x348>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00e      	beq.n	8004796 <DMA_SetConfig+0x2de>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a21      	ldr	r2, [pc, #132]	; (8004804 <DMA_SetConfig+0x34c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d009      	beq.n	8004796 <DMA_SetConfig+0x2de>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a20      	ldr	r2, [pc, #128]	; (8004808 <DMA_SetConfig+0x350>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d004      	beq.n	8004796 <DMA_SetConfig+0x2de>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1e      	ldr	r2, [pc, #120]	; (800480c <DMA_SetConfig+0x354>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d101      	bne.n	800479a <DMA_SetConfig+0x2e2>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <DMA_SetConfig+0x2e4>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d020      	beq.n	80047e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2201      	movs	r2, #1
 80047aa:	409a      	lsls	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b40      	cmp	r3, #64	; 0x40
 80047be:	d108      	bne.n	80047d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	60da      	str	r2, [r3, #12]
}
 80047d0:	e007      	b.n	80047e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	60da      	str	r2, [r3, #12]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	58025408 	.word	0x58025408
 80047f4:	5802541c 	.word	0x5802541c
 80047f8:	58025430 	.word	0x58025430
 80047fc:	58025444 	.word	0x58025444
 8004800:	58025458 	.word	0x58025458
 8004804:	5802546c 	.word	0x5802546c
 8004808:	58025480 	.word	0x58025480
 800480c:	58025494 	.word	0x58025494

08004810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a42      	ldr	r2, [pc, #264]	; (8004928 <DMA_CalcBaseAndBitshift+0x118>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d04a      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a41      	ldr	r2, [pc, #260]	; (800492c <DMA_CalcBaseAndBitshift+0x11c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d045      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a3f      	ldr	r2, [pc, #252]	; (8004930 <DMA_CalcBaseAndBitshift+0x120>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d040      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a3e      	ldr	r2, [pc, #248]	; (8004934 <DMA_CalcBaseAndBitshift+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d03b      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a3c      	ldr	r2, [pc, #240]	; (8004938 <DMA_CalcBaseAndBitshift+0x128>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d036      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a3b      	ldr	r2, [pc, #236]	; (800493c <DMA_CalcBaseAndBitshift+0x12c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d031      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a39      	ldr	r2, [pc, #228]	; (8004940 <DMA_CalcBaseAndBitshift+0x130>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d02c      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a38      	ldr	r2, [pc, #224]	; (8004944 <DMA_CalcBaseAndBitshift+0x134>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d027      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a36      	ldr	r2, [pc, #216]	; (8004948 <DMA_CalcBaseAndBitshift+0x138>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d022      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a35      	ldr	r2, [pc, #212]	; (800494c <DMA_CalcBaseAndBitshift+0x13c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d01d      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a33      	ldr	r2, [pc, #204]	; (8004950 <DMA_CalcBaseAndBitshift+0x140>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d018      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a32      	ldr	r2, [pc, #200]	; (8004954 <DMA_CalcBaseAndBitshift+0x144>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d013      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a30      	ldr	r2, [pc, #192]	; (8004958 <DMA_CalcBaseAndBitshift+0x148>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00e      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a2f      	ldr	r2, [pc, #188]	; (800495c <DMA_CalcBaseAndBitshift+0x14c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d009      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2d      	ldr	r2, [pc, #180]	; (8004960 <DMA_CalcBaseAndBitshift+0x150>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <DMA_CalcBaseAndBitshift+0xa8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a2c      	ldr	r2, [pc, #176]	; (8004964 <DMA_CalcBaseAndBitshift+0x154>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d101      	bne.n	80048bc <DMA_CalcBaseAndBitshift+0xac>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <DMA_CalcBaseAndBitshift+0xae>
 80048bc:	2300      	movs	r3, #0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d024      	beq.n	800490c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	3b10      	subs	r3, #16
 80048ca:	4a27      	ldr	r2, [pc, #156]	; (8004968 <DMA_CalcBaseAndBitshift+0x158>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	4a24      	ldr	r2, [pc, #144]	; (800496c <DMA_CalcBaseAndBitshift+0x15c>)
 80048dc:	5cd3      	ldrb	r3, [r2, r3]
 80048de:	461a      	mov	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d908      	bls.n	80048fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	4b1f      	ldr	r3, [pc, #124]	; (8004970 <DMA_CalcBaseAndBitshift+0x160>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	1d1a      	adds	r2, r3, #4
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	659a      	str	r2, [r3, #88]	; 0x58
 80048fa:	e00d      	b.n	8004918 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <DMA_CalcBaseAndBitshift+0x160>)
 8004904:	4013      	ands	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6593      	str	r3, [r2, #88]	; 0x58
 800490a:	e005      	b.n	8004918 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	40020010 	.word	0x40020010
 800492c:	40020028 	.word	0x40020028
 8004930:	40020040 	.word	0x40020040
 8004934:	40020058 	.word	0x40020058
 8004938:	40020070 	.word	0x40020070
 800493c:	40020088 	.word	0x40020088
 8004940:	400200a0 	.word	0x400200a0
 8004944:	400200b8 	.word	0x400200b8
 8004948:	40020410 	.word	0x40020410
 800494c:	40020428 	.word	0x40020428
 8004950:	40020440 	.word	0x40020440
 8004954:	40020458 	.word	0x40020458
 8004958:	40020470 	.word	0x40020470
 800495c:	40020488 	.word	0x40020488
 8004960:	400204a0 	.word	0x400204a0
 8004964:	400204b8 	.word	0x400204b8
 8004968:	aaaaaaab 	.word	0xaaaaaaab
 800496c:	0800b844 	.word	0x0800b844
 8004970:	fffffc00 	.word	0xfffffc00

08004974 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d120      	bne.n	80049ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	2b03      	cmp	r3, #3
 800498e:	d858      	bhi.n	8004a42 <DMA_CheckFifoParam+0xce>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <DMA_CheckFifoParam+0x24>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049a9 	.word	0x080049a9
 800499c:	080049bb 	.word	0x080049bb
 80049a0:	080049a9 	.word	0x080049a9
 80049a4:	08004a43 	.word	0x08004a43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d048      	beq.n	8004a46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049b8:	e045      	b.n	8004a46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049c2:	d142      	bne.n	8004a4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049c8:	e03f      	b.n	8004a4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d2:	d123      	bne.n	8004a1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d838      	bhi.n	8004a4e <DMA_CheckFifoParam+0xda>
 80049dc:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <DMA_CheckFifoParam+0x70>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	080049f5 	.word	0x080049f5
 80049e8:	080049fb 	.word	0x080049fb
 80049ec:	080049f5 	.word	0x080049f5
 80049f0:	08004a0d 	.word	0x08004a0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
        break;
 80049f8:	e030      	b.n	8004a5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d025      	beq.n	8004a52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a0a:	e022      	b.n	8004a52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a14:	d11f      	bne.n	8004a56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a1a:	e01c      	b.n	8004a56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d902      	bls.n	8004a2a <DMA_CheckFifoParam+0xb6>
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d003      	beq.n	8004a30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a28:	e018      	b.n	8004a5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a2e:	e015      	b.n	8004a5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00e      	beq.n	8004a5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8004a40:	e00b      	b.n	8004a5a <DMA_CheckFifoParam+0xe6>
        break;
 8004a42:	bf00      	nop
 8004a44:	e00a      	b.n	8004a5c <DMA_CheckFifoParam+0xe8>
        break;
 8004a46:	bf00      	nop
 8004a48:	e008      	b.n	8004a5c <DMA_CheckFifoParam+0xe8>
        break;
 8004a4a:	bf00      	nop
 8004a4c:	e006      	b.n	8004a5c <DMA_CheckFifoParam+0xe8>
        break;
 8004a4e:	bf00      	nop
 8004a50:	e004      	b.n	8004a5c <DMA_CheckFifoParam+0xe8>
        break;
 8004a52:	bf00      	nop
 8004a54:	e002      	b.n	8004a5c <DMA_CheckFifoParam+0xe8>
        break;
 8004a56:	bf00      	nop
 8004a58:	e000      	b.n	8004a5c <DMA_CheckFifoParam+0xe8>
    break;
 8004a5a:	bf00      	nop
    }
  }

  return status;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop

08004a6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a38      	ldr	r2, [pc, #224]	; (8004b60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d022      	beq.n	8004aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a36      	ldr	r2, [pc, #216]	; (8004b64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d01d      	beq.n	8004aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a35      	ldr	r2, [pc, #212]	; (8004b68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d018      	beq.n	8004aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a33      	ldr	r2, [pc, #204]	; (8004b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a32      	ldr	r2, [pc, #200]	; (8004b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00e      	beq.n	8004aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a30      	ldr	r2, [pc, #192]	; (8004b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d009      	beq.n	8004aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2f      	ldr	r2, [pc, #188]	; (8004b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2d      	ldr	r2, [pc, #180]	; (8004b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d101      	bne.n	8004ace <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01a      	beq.n	8004b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	3b08      	subs	r3, #8
 8004adc:	4a28      	ldr	r2, [pc, #160]	; (8004b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4b26      	ldr	r3, [pc, #152]	; (8004b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	461a      	mov	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a24      	ldr	r2, [pc, #144]	; (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004af8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	2201      	movs	r2, #1
 8004b02:	409a      	lsls	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b08:	e024      	b.n	8004b54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	3b10      	subs	r3, #16
 8004b12:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4a1c      	ldr	r2, [pc, #112]	; (8004b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d806      	bhi.n	8004b32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4a1b      	ldr	r2, [pc, #108]	; (8004b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d902      	bls.n	8004b32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3308      	adds	r3, #8
 8004b30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4b18      	ldr	r3, [pc, #96]	; (8004b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004b44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	58025408 	.word	0x58025408
 8004b64:	5802541c 	.word	0x5802541c
 8004b68:	58025430 	.word	0x58025430
 8004b6c:	58025444 	.word	0x58025444
 8004b70:	58025458 	.word	0x58025458
 8004b74:	5802546c 	.word	0x5802546c
 8004b78:	58025480 	.word	0x58025480
 8004b7c:	58025494 	.word	0x58025494
 8004b80:	cccccccd 	.word	0xcccccccd
 8004b84:	16009600 	.word	0x16009600
 8004b88:	58025880 	.word	0x58025880
 8004b8c:	aaaaaaab 	.word	0xaaaaaaab
 8004b90:	400204b8 	.word	0x400204b8
 8004b94:	4002040f 	.word	0x4002040f
 8004b98:	10008200 	.word	0x10008200
 8004b9c:	40020880 	.word	0x40020880

08004ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d04a      	beq.n	8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d847      	bhi.n	8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a25      	ldr	r2, [pc, #148]	; (8004c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d022      	beq.n	8004c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a24      	ldr	r2, [pc, #144]	; (8004c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d01d      	beq.n	8004c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d018      	beq.n	8004c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d013      	beq.n	8004c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1f      	ldr	r2, [pc, #124]	; (8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00e      	beq.n	8004c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	; (8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1c      	ldr	r2, [pc, #112]	; (8004c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d004      	beq.n	8004c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d101      	bne.n	8004c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c10:	2300      	movs	r3, #0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	461a      	mov	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c28:	671a      	str	r2, [r3, #112]	; 0x70
 8004c2a:	e009      	b.n	8004c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4b14      	ldr	r3, [pc, #80]	; (8004c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	461a      	mov	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c3e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	2201      	movs	r2, #1
 8004c46:	409a      	lsls	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	58025408 	.word	0x58025408
 8004c5c:	5802541c 	.word	0x5802541c
 8004c60:	58025430 	.word	0x58025430
 8004c64:	58025444 	.word	0x58025444
 8004c68:	58025458 	.word	0x58025458
 8004c6c:	5802546c 	.word	0x5802546c
 8004c70:	58025480 	.word	0x58025480
 8004c74:	58025494 	.word	0x58025494
 8004c78:	1600963f 	.word	0x1600963f
 8004c7c:	58025940 	.word	0x58025940
 8004c80:	1000823f 	.word	0x1000823f
 8004c84:	40020940 	.word	0x40020940

08004c88 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e0cf      	b.n	8004e3a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2223      	movs	r2, #35	; 0x23
 8004ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7fc fc01 	bl	80014b4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cb2:	4b64      	ldr	r3, [pc, #400]	; (8004e44 <HAL_ETH_Init+0x1bc>)
 8004cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cb8:	4a62      	ldr	r2, [pc, #392]	; (8004e44 <HAL_ETH_Init+0x1bc>)
 8004cba:	f043 0302 	orr.w	r3, r3, #2
 8004cbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004cc2:	4b60      	ldr	r3, [pc, #384]	; (8004e44 <HAL_ETH_Init+0x1bc>)
 8004cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	7a1b      	ldrb	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f7fd f869 	bl	8001db0 <HAL_SYSCFG_ETHInterfaceSelect>
 8004cde:	e003      	b.n	8004ce8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004ce0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004ce4:	f7fd f864 	bl	8001db0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004ce8:	4b57      	ldr	r3, [pc, #348]	; (8004e48 <HAL_ETH_Init+0x1c0>)
 8004cea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d04:	f7fd f818 	bl	8001d38 <HAL_GetTick>
 8004d08:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004d0a:	e011      	b.n	8004d30 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004d0c:	f7fd f814 	bl	8001d38 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d1a:	d909      	bls.n	8004d30 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2204      	movs	r2, #4
 8004d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	22e0      	movs	r2, #224	; 0xe0
 8004d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e084      	b.n	8004e3a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e4      	bne.n	8004d0c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f886 	bl	8004e54 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004d48:	f001 feca 	bl	8006ae0 <HAL_RCC_GetHCLKFreq>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4a3f      	ldr	r2, [pc, #252]	; (8004e4c <HAL_ETH_Init+0x1c4>)
 8004d50:	fba2 2303 	umull	r2, r3, r2, r3
 8004d54:	0c9a      	lsrs	r2, r3, #18
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3a01      	subs	r2, #1
 8004d5c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fa71 	bl	8005248 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d72:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d82:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	22e0      	movs	r2, #224	; 0xe0
 8004d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e049      	b.n	8004e3a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004db2:	4b27      	ldr	r3, [pc, #156]	; (8004e50 <HAL_ETH_Init+0x1c8>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6952      	ldr	r2, [r2, #20]
 8004dba:	0051      	lsls	r1, r2, #1
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dc6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fad9 	bl	8005382 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fb1f 	bl	8005414 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	3305      	adds	r3, #5
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	021a      	lsls	r2, r3, #8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	3304      	adds	r3, #4
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	4619      	mov	r1, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	3303      	adds	r3, #3
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	061a      	lsls	r2, r3, #24
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	3302      	adds	r3, #2
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	041b      	lsls	r3, r3, #16
 8004e08:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e22:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2210      	movs	r2, #16
 8004e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	58024400 	.word	0x58024400
 8004e48:	58000400 	.word	0x58000400
 8004e4c:	431bde83 	.word	0x431bde83
 8004e50:	ffff8001 	.word	0xffff8001

08004e54 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e6e:	f001 fe37 	bl	8006ae0 <HAL_RCC_GetHCLKFreq>
 8004e72:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4a1e      	ldr	r2, [pc, #120]	; (8004ef0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d908      	bls.n	8004e8e <HAL_ETH_SetMDIOClockRange+0x3a>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d804      	bhi.n	8004e8e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	e027      	b.n	8004ede <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d908      	bls.n	8004ea8 <HAL_ETH_SetMDIOClockRange+0x54>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d204      	bcs.n	8004ea8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e01a      	b.n	8004ede <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4a13      	ldr	r2, [pc, #76]	; (8004ef8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d303      	bcc.n	8004eb8 <HAL_ETH_SetMDIOClockRange+0x64>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4a12      	ldr	r2, [pc, #72]	; (8004efc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d911      	bls.n	8004edc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a10      	ldr	r2, [pc, #64]	; (8004efc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d908      	bls.n	8004ed2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d804      	bhi.n	8004ed2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e005      	b.n	8004ede <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e000      	b.n	8004ede <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004edc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	01312cff 	.word	0x01312cff
 8004ef4:	02160ebf 	.word	0x02160ebf
 8004ef8:	03938700 	.word	0x03938700
 8004efc:	05f5e0ff 	.word	0x05f5e0ff
 8004f00:	08f0d17f 	.word	0x08f0d17f

08004f04 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004f16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	791b      	ldrb	r3, [r3, #4]
 8004f1c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004f1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	7b1b      	ldrb	r3, [r3, #12]
 8004f24:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	7b5b      	ldrb	r3, [r3, #13]
 8004f2c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	7b9b      	ldrb	r3, [r3, #14]
 8004f34:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	7bdb      	ldrb	r3, [r3, #15]
 8004f3c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f3e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	7c12      	ldrb	r2, [r2, #16]
 8004f44:	2a00      	cmp	r2, #0
 8004f46:	d102      	bne.n	8004f4e <ETH_SetMACConfig+0x4a>
 8004f48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004f4c:	e000      	b.n	8004f50 <ETH_SetMACConfig+0x4c>
 8004f4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f50:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	7c52      	ldrb	r2, [r2, #17]
 8004f56:	2a00      	cmp	r2, #0
 8004f58:	d102      	bne.n	8004f60 <ETH_SetMACConfig+0x5c>
 8004f5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f5e:	e000      	b.n	8004f62 <ETH_SetMACConfig+0x5e>
 8004f60:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	7c9b      	ldrb	r3, [r3, #18]
 8004f68:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f6a:	431a      	orrs	r2, r3
               macconf->Speed |
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004f70:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004f76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	7f1b      	ldrb	r3, [r3, #28]
 8004f7c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004f7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	7f5b      	ldrb	r3, [r3, #29]
 8004f84:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004f86:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	7f92      	ldrb	r2, [r2, #30]
 8004f8c:	2a00      	cmp	r2, #0
 8004f8e:	d102      	bne.n	8004f96 <ETH_SetMACConfig+0x92>
 8004f90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f94:	e000      	b.n	8004f98 <ETH_SetMACConfig+0x94>
 8004f96:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004f98:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	7fdb      	ldrb	r3, [r3, #31]
 8004f9e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004fa0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004fa8:	2a00      	cmp	r2, #0
 8004faa:	d102      	bne.n	8004fb2 <ETH_SetMACConfig+0xae>
 8004fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fb0:	e000      	b.n	8004fb4 <ETH_SetMACConfig+0xb0>
 8004fb2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004fb4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004fba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fc2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004fc4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4b56      	ldr	r3, [pc, #344]	; (8005130 <ETH_SetMACConfig+0x22c>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	68f9      	ldr	r1, [r7, #12]
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fee:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004ff0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ff8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004ffa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005002:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005004:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800500c:	2a00      	cmp	r2, #0
 800500e:	d102      	bne.n	8005016 <ETH_SetMACConfig+0x112>
 8005010:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005014:	e000      	b.n	8005018 <ETH_SetMACConfig+0x114>
 8005016:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005018:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	4b42      	ldr	r3, [pc, #264]	; (8005134 <ETH_SetMACConfig+0x230>)
 800502a:	4013      	ands	r3, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	68f9      	ldr	r1, [r7, #12]
 8005032:	430b      	orrs	r3, r1
 8005034:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800503c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	4b3a      	ldr	r3, [pc, #232]	; (8005138 <ETH_SetMACConfig+0x234>)
 800504e:	4013      	ands	r3, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	68f9      	ldr	r1, [r7, #12]
 8005056:	430b      	orrs	r3, r1
 8005058:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005060:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005066:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800506e:	2a00      	cmp	r2, #0
 8005070:	d101      	bne.n	8005076 <ETH_SetMACConfig+0x172>
 8005072:	2280      	movs	r2, #128	; 0x80
 8005074:	e000      	b.n	8005078 <ETH_SetMACConfig+0x174>
 8005076:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005078:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800508a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800508e:	4013      	ands	r3, r2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	68f9      	ldr	r1, [r7, #12]
 8005096:	430b      	orrs	r3, r1
 8005098:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80050a0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80050a8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	f023 0103 	bic.w	r1, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80050ce:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80050ea:	2a00      	cmp	r2, #0
 80050ec:	d101      	bne.n	80050f2 <ETH_SetMACConfig+0x1ee>
 80050ee:	2240      	movs	r2, #64	; 0x40
 80050f0:	e000      	b.n	80050f4 <ETH_SetMACConfig+0x1f0>
 80050f2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80050f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80050fc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80050fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005106:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005114:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	430a      	orrs	r2, r1
 8005120:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	00048083 	.word	0x00048083
 8005134:	c0f88000 	.word	0xc0f88000
 8005138:	fffffef0 	.word	0xfffffef0

0800513c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	4b38      	ldr	r3, [pc, #224]	; (8005234 <ETH_SetDMAConfig+0xf8>)
 8005152:	4013      	ands	r3, r2
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	6811      	ldr	r1, [r2, #0]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	430b      	orrs	r3, r1
 800515e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005162:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	791b      	ldrb	r3, [r3, #4]
 8005168:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800516e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	7b1b      	ldrb	r3, [r3, #12]
 8005174:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	4b2c      	ldr	r3, [pc, #176]	; (8005238 <ETH_SetDMAConfig+0xfc>)
 8005186:	4013      	ands	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	68f9      	ldr	r1, [r7, #12]
 800518e:	430b      	orrs	r3, r1
 8005190:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005194:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	7b5b      	ldrb	r3, [r3, #13]
 800519a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80051b0:	4b22      	ldr	r3, [pc, #136]	; (800523c <ETH_SetDMAConfig+0x100>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	68f9      	ldr	r1, [r7, #12]
 80051ba:	430b      	orrs	r3, r1
 80051bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051c0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	7d1b      	ldrb	r3, [r3, #20]
 80051cc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80051ce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	7f5b      	ldrb	r3, [r3, #29]
 80051d4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80051e6:	4b16      	ldr	r3, [pc, #88]	; (8005240 <ETH_SetDMAConfig+0x104>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	68f9      	ldr	r1, [r7, #12]
 80051f0:	430b      	orrs	r3, r1
 80051f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051f6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	7f1b      	ldrb	r3, [r3, #28]
 80051fe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005210:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005214:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <ETH_SetDMAConfig+0x108>)
 8005216:	4013      	ands	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	68f9      	ldr	r1, [r7, #12]
 800521e:	430b      	orrs	r3, r1
 8005220:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005224:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	ffff87fd 	.word	0xffff87fd
 8005238:	ffff2ffe 	.word	0xffff2ffe
 800523c:	fffec000 	.word	0xfffec000
 8005240:	ffc0efef 	.word	0xffc0efef
 8005244:	7fc0ffff 	.word	0x7fc0ffff

08005248 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b0a4      	sub	sp, #144	; 0x90
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005250:	2301      	movs	r3, #1
 8005252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005256:	2300      	movs	r3, #0
 8005258:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800525a:	2300      	movs	r3, #0
 800525c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005260:	2300      	movs	r3, #0
 8005262:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005272:	2301      	movs	r3, #1
 8005274:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005278:	2300      	movs	r3, #0
 800527a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005288:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800528a:	2300      	movs	r3, #0
 800528c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005290:	2300      	movs	r3, #0
 8005292:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005294:	2300      	movs	r3, #0
 8005296:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80052a0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80052a4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80052ac:	2300      	movs	r3, #0
 80052ae:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80052b0:	2301      	movs	r3, #1
 80052b2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80052bc:	2300      	movs	r3, #0
 80052be:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80052c2:	2300      	movs	r3, #0
 80052c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80052ca:	2300      	movs	r3, #0
 80052cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80052e0:	2320      	movs	r3, #32
 80052e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80052f2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80052f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052fc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80052fe:	2300      	movs	r3, #0
 8005300:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005304:	2302      	movs	r3, #2
 8005306:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800530a:	2300      	movs	r3, #0
 800530c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005310:	2300      	movs	r3, #0
 8005312:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005316:	2300      	movs	r3, #0
 8005318:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005322:	2300      	movs	r3, #0
 8005324:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800532c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff fde6 	bl	8004f04 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005338:	2301      	movs	r3, #1
 800533a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800533c:	2301      	movs	r3, #1
 800533e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005340:	2300      	movs	r3, #0
 8005342:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005344:	2300      	movs	r3, #0
 8005346:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800534a:	2300      	movs	r3, #0
 800534c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800534e:	2300      	movs	r3, #0
 8005350:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005352:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005356:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005358:	2300      	movs	r3, #0
 800535a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800535c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005360:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005362:	2300      	movs	r3, #0
 8005364:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005368:	f44f 7306 	mov.w	r3, #536	; 0x218
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800536e:	f107 0308 	add.w	r3, r7, #8
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fee1 	bl	800513c <ETH_SetDMAConfig>
}
 800537a:	bf00      	nop
 800537c:	3790      	adds	r7, #144	; 0x90
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e01d      	b.n	80053cc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68d9      	ldr	r1, [r3, #12]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4613      	mov	r3, r2
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	4413      	add	r3, r2
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	440b      	add	r3, r1
 80053a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2200      	movs	r2, #0
 80053ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2200      	movs	r2, #0
 80053b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2200      	movs	r2, #0
 80053b8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	3206      	adds	r2, #6
 80053c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3301      	adds	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d9de      	bls.n	8005390 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e0:	461a      	mov	r2, r3
 80053e2:	2303      	movs	r3, #3
 80053e4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005404:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e023      	b.n	800546a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6919      	ldr	r1, [r3, #16]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4613      	mov	r3, r2
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	4413      	add	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	440b      	add	r3, r1
 8005432:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2200      	movs	r2, #0
 800543e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2200      	movs	r2, #0
 8005444:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2200      	movs	r2, #0
 800544a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2200      	movs	r2, #0
 8005450:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2200      	movs	r2, #0
 8005456:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	3212      	adds	r2, #18
 8005460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3301      	adds	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b03      	cmp	r3, #3
 800546e:	d9d8      	bls.n	8005422 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005496:	461a      	mov	r2, r3
 8005498:	2303      	movs	r3, #3
 800549a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054aa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054be:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b089      	sub	sp, #36	; 0x24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054da:	2300      	movs	r3, #0
 80054dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054de:	4b89      	ldr	r3, [pc, #548]	; (8005704 <HAL_GPIO_Init+0x234>)
 80054e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054e2:	e194      	b.n	800580e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	2101      	movs	r1, #1
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	4013      	ands	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 8186 	beq.w	8005808 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	2b01      	cmp	r3, #1
 8005506:	d005      	beq.n	8005514 <HAL_GPIO_Init+0x44>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d130      	bne.n	8005576 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	2203      	movs	r2, #3
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4013      	ands	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800554a:	2201      	movs	r2, #1
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43db      	mvns	r3, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4013      	ands	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	f003 0201 	and.w	r2, r3, #1
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4313      	orrs	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d017      	beq.n	80055b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	2203      	movs	r2, #3
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43db      	mvns	r3, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4013      	ands	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d123      	bne.n	8005606 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	08da      	lsrs	r2, r3, #3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3208      	adds	r2, #8
 80055c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	220f      	movs	r2, #15
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4013      	ands	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	08da      	lsrs	r2, r3, #3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3208      	adds	r2, #8
 8005600:	69b9      	ldr	r1, [r7, #24]
 8005602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	2203      	movs	r2, #3
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4013      	ands	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f003 0203 	and.w	r2, r3, #3
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4313      	orrs	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80e0 	beq.w	8005808 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005648:	4b2f      	ldr	r3, [pc, #188]	; (8005708 <HAL_GPIO_Init+0x238>)
 800564a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800564e:	4a2e      	ldr	r2, [pc, #184]	; (8005708 <HAL_GPIO_Init+0x238>)
 8005650:	f043 0302 	orr.w	r3, r3, #2
 8005654:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005658:	4b2b      	ldr	r3, [pc, #172]	; (8005708 <HAL_GPIO_Init+0x238>)
 800565a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005666:	4a29      	ldr	r2, [pc, #164]	; (800570c <HAL_GPIO_Init+0x23c>)
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	089b      	lsrs	r3, r3, #2
 800566c:	3302      	adds	r3, #2
 800566e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	220f      	movs	r2, #15
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43db      	mvns	r3, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	4013      	ands	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a20      	ldr	r2, [pc, #128]	; (8005710 <HAL_GPIO_Init+0x240>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d052      	beq.n	8005738 <HAL_GPIO_Init+0x268>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <HAL_GPIO_Init+0x244>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d031      	beq.n	80056fe <HAL_GPIO_Init+0x22e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <HAL_GPIO_Init+0x248>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d02b      	beq.n	80056fa <HAL_GPIO_Init+0x22a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a1d      	ldr	r2, [pc, #116]	; (800571c <HAL_GPIO_Init+0x24c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d025      	beq.n	80056f6 <HAL_GPIO_Init+0x226>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <HAL_GPIO_Init+0x250>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01f      	beq.n	80056f2 <HAL_GPIO_Init+0x222>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1b      	ldr	r2, [pc, #108]	; (8005724 <HAL_GPIO_Init+0x254>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d019      	beq.n	80056ee <HAL_GPIO_Init+0x21e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1a      	ldr	r2, [pc, #104]	; (8005728 <HAL_GPIO_Init+0x258>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_GPIO_Init+0x21a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a19      	ldr	r2, [pc, #100]	; (800572c <HAL_GPIO_Init+0x25c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00d      	beq.n	80056e6 <HAL_GPIO_Init+0x216>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a18      	ldr	r2, [pc, #96]	; (8005730 <HAL_GPIO_Init+0x260>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d007      	beq.n	80056e2 <HAL_GPIO_Init+0x212>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a17      	ldr	r2, [pc, #92]	; (8005734 <HAL_GPIO_Init+0x264>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <HAL_GPIO_Init+0x20e>
 80056da:	2309      	movs	r3, #9
 80056dc:	e02d      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056de:	230a      	movs	r3, #10
 80056e0:	e02b      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056e2:	2308      	movs	r3, #8
 80056e4:	e029      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056e6:	2307      	movs	r3, #7
 80056e8:	e027      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056ea:	2306      	movs	r3, #6
 80056ec:	e025      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056ee:	2305      	movs	r3, #5
 80056f0:	e023      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056f2:	2304      	movs	r3, #4
 80056f4:	e021      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056f6:	2303      	movs	r3, #3
 80056f8:	e01f      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e01d      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056fe:	2301      	movs	r3, #1
 8005700:	e01b      	b.n	800573a <HAL_GPIO_Init+0x26a>
 8005702:	bf00      	nop
 8005704:	58000080 	.word	0x58000080
 8005708:	58024400 	.word	0x58024400
 800570c:	58000400 	.word	0x58000400
 8005710:	58020000 	.word	0x58020000
 8005714:	58020400 	.word	0x58020400
 8005718:	58020800 	.word	0x58020800
 800571c:	58020c00 	.word	0x58020c00
 8005720:	58021000 	.word	0x58021000
 8005724:	58021400 	.word	0x58021400
 8005728:	58021800 	.word	0x58021800
 800572c:	58021c00 	.word	0x58021c00
 8005730:	58022000 	.word	0x58022000
 8005734:	58022400 	.word	0x58022400
 8005738:	2300      	movs	r3, #0
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	f002 0203 	and.w	r2, r2, #3
 8005740:	0092      	lsls	r2, r2, #2
 8005742:	4093      	lsls	r3, r2
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4313      	orrs	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800574a:	4938      	ldr	r1, [pc, #224]	; (800582c <HAL_GPIO_Init+0x35c>)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	089b      	lsrs	r3, r3, #2
 8005750:	3302      	adds	r3, #2
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	43db      	mvns	r3, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4013      	ands	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800577e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	43db      	mvns	r3, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4013      	ands	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	43db      	mvns	r3, r3
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4013      	ands	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	43db      	mvns	r3, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4013      	ands	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	3301      	adds	r3, #1
 800580c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	f47f ae63 	bne.w	80054e4 <HAL_GPIO_Init+0x14>
  }
}
 800581e:	bf00      	nop
 8005820:	bf00      	nop
 8005822:	3724      	adds	r7, #36	; 0x24
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	58000400 	.word	0x58000400

08005830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
 800583c:	4613      	mov	r3, r2
 800583e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005840:	787b      	ldrb	r3, [r7, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005846:	887a      	ldrh	r2, [r7, #2]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800584c:	e003      	b.n	8005856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800584e:	887b      	ldrh	r3, [r7, #2]
 8005850:	041a      	lsls	r2, r3, #16
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	619a      	str	r2, [r3, #24]
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800586c:	4a08      	ldr	r2, [pc, #32]	; (8005890 <HAL_HSEM_FastTake+0x2c>)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3320      	adds	r3, #32
 8005872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005876:	4a07      	ldr	r2, [pc, #28]	; (8005894 <HAL_HSEM_FastTake+0x30>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d101      	bne.n	8005880 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e000      	b.n	8005882 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
}
 8005882:	4618      	mov	r0, r3
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	58026400 	.word	0x58026400
 8005894:	80000300 	.word	0x80000300

08005898 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80058a2:	4906      	ldr	r1, [pc, #24]	; (80058bc <HAL_HSEM_Release+0x24>)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	58026400 	.word	0x58026400

080058c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c2:	b08f      	sub	sp, #60	; 0x3c
 80058c4:	af0a      	add	r7, sp, #40	; 0x28
 80058c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e116      	b.n	8005b00 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7fc f857 	bl	80019a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2203      	movs	r2, #3
 80058f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d102      	bne.n	800590c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f005 fbe5 	bl	800b0e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	687e      	ldr	r6, [r7, #4]
 800591e:	466d      	mov	r5, sp
 8005920:	f106 0410 	add.w	r4, r6, #16
 8005924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800592a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800592c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005930:	e885 0003 	stmia.w	r5, {r0, r1}
 8005934:	1d33      	adds	r3, r6, #4
 8005936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005938:	6838      	ldr	r0, [r7, #0]
 800593a:	f005 fb63 	bl	800b004 <USB_CoreInit>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0d7      	b.n	8005b00 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2100      	movs	r1, #0
 8005956:	4618      	mov	r0, r3
 8005958:	f005 fbd3 	bl	800b102 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]
 8005960:	e04a      	b.n	80059f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005962:	7bfa      	ldrb	r2, [r7, #15]
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	333d      	adds	r3, #61	; 0x3d
 8005972:	2201      	movs	r2, #1
 8005974:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005976:	7bfa      	ldrb	r2, [r7, #15]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	333c      	adds	r3, #60	; 0x3c
 8005986:	7bfa      	ldrb	r2, [r7, #15]
 8005988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800598a:	7bfa      	ldrb	r2, [r7, #15]
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	b298      	uxth	r0, r3
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	4613      	mov	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	440b      	add	r3, r1
 800599c:	3344      	adds	r3, #68	; 0x44
 800599e:	4602      	mov	r2, r0
 80059a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80059a2:	7bfa      	ldrb	r2, [r7, #15]
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	3340      	adds	r3, #64	; 0x40
 80059b2:	2200      	movs	r2, #0
 80059b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80059b6:	7bfa      	ldrb	r2, [r7, #15]
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	3348      	adds	r3, #72	; 0x48
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059ca:	7bfa      	ldrb	r2, [r7, #15]
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	334c      	adds	r3, #76	; 0x4c
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059de:	7bfa      	ldrb	r2, [r7, #15]
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	440b      	add	r3, r1
 80059ec:	3354      	adds	r3, #84	; 0x54
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	3301      	adds	r3, #1
 80059f6:	73fb      	strb	r3, [r7, #15]
 80059f8:	7bfa      	ldrb	r2, [r7, #15]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d3af      	bcc.n	8005962 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a02:	2300      	movs	r3, #0
 8005a04:	73fb      	strb	r3, [r7, #15]
 8005a06:	e044      	b.n	8005a92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a08:	7bfa      	ldrb	r2, [r7, #15]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a1e:	7bfa      	ldrb	r2, [r7, #15]
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005a30:	7bfa      	ldrb	r2, [r7, #15]
 8005a32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a34:	7bfa      	ldrb	r2, [r7, #15]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a4a:	7bfa      	ldrb	r2, [r7, #15]
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a60:	7bfa      	ldrb	r2, [r7, #15]
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a76:	7bfa      	ldrb	r2, [r7, #15]
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	73fb      	strb	r3, [r7, #15]
 8005a92:	7bfa      	ldrb	r2, [r7, #15]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d3b5      	bcc.n	8005a08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	603b      	str	r3, [r7, #0]
 8005aa2:	687e      	ldr	r6, [r7, #4]
 8005aa4:	466d      	mov	r5, sp
 8005aa6:	f106 0410 	add.w	r4, r6, #16
 8005aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ab2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ab6:	e885 0003 	stmia.w	r5, {r0, r1}
 8005aba:	1d33      	adds	r3, r6, #4
 8005abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005abe:	6838      	ldr	r0, [r7, #0]
 8005ac0:	f005 fb6c 	bl	800b19c <USB_DevInit>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2202      	movs	r2, #2
 8005ace:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e014      	b.n	8005b00 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d102      	bne.n	8005af4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f80a 	bl	8005b08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f005 fd2a 	bl	800b552 <USB_DevDisconnect>

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b36:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <HAL_PCDEx_ActivateLPM+0x44>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	10000003 	.word	0x10000003

08005b50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005b58:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	2b06      	cmp	r3, #6
 8005b62:	d00a      	beq.n	8005b7a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b64:	4b26      	ldr	r3, [pc, #152]	; (8005c00 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d001      	beq.n	8005b76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e040      	b.n	8005bf8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e03e      	b.n	8005bf8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b7a:	4b21      	ldr	r3, [pc, #132]	; (8005c00 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005b82:	491f      	ldr	r1, [pc, #124]	; (8005c00 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b8a:	f7fc f8d5 	bl	8001d38 <HAL_GetTick>
 8005b8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b90:	e009      	b.n	8005ba6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b92:	f7fc f8d1 	bl	8001d38 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ba0:	d901      	bls.n	8005ba6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e028      	b.n	8005bf8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ba6:	4b16      	ldr	r3, [pc, #88]	; (8005c00 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb2:	d1ee      	bne.n	8005b92 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b1e      	cmp	r3, #30
 8005bb8:	d008      	beq.n	8005bcc <HAL_PWREx_ConfigSupply+0x7c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8005bbe:	d005      	beq.n	8005bcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b1d      	cmp	r3, #29
 8005bc4:	d002      	beq.n	8005bcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b2d      	cmp	r3, #45	; 0x2d
 8005bca:	d114      	bne.n	8005bf6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005bcc:	f7fc f8b4 	bl	8001d38 <HAL_GetTick>
 8005bd0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005bd2:	e009      	b.n	8005be8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005bd4:	f7fc f8b0 	bl	8001d38 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005be2:	d901      	bls.n	8005be8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e007      	b.n	8005bf8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <HAL_PWREx_ConfigSupply+0xb0>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf4:	d1ee      	bne.n	8005bd4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	58024800 	.word	0x58024800

08005c04 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4a04      	ldr	r2, [pc, #16]	; (8005c20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c12:	60d3      	str	r3, [r2, #12]
}
 8005c14:	bf00      	nop
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	58024800 	.word	0x58024800

08005c24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08c      	sub	sp, #48	; 0x30
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d102      	bne.n	8005c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f000 bc1d 	b.w	8006472 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 8087 	beq.w	8005d54 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c46:	4b99      	ldr	r3, [pc, #612]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c50:	4b96      	ldr	r3, [pc, #600]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	2b10      	cmp	r3, #16
 8005c5a:	d007      	beq.n	8005c6c <HAL_RCC_OscConfig+0x48>
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	2b18      	cmp	r3, #24
 8005c60:	d110      	bne.n	8005c84 <HAL_RCC_OscConfig+0x60>
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d10b      	bne.n	8005c84 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c6c:	4b8f      	ldr	r3, [pc, #572]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d06c      	beq.n	8005d52 <HAL_RCC_OscConfig+0x12e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d168      	bne.n	8005d52 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e3f6      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8c:	d106      	bne.n	8005c9c <HAL_RCC_OscConfig+0x78>
 8005c8e:	4b87      	ldr	r3, [pc, #540]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a86      	ldr	r2, [pc, #536]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	e02e      	b.n	8005cfa <HAL_RCC_OscConfig+0xd6>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10c      	bne.n	8005cbe <HAL_RCC_OscConfig+0x9a>
 8005ca4:	4b81      	ldr	r3, [pc, #516]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a80      	ldr	r2, [pc, #512]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b7e      	ldr	r3, [pc, #504]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a7d      	ldr	r2, [pc, #500]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	e01d      	b.n	8005cfa <HAL_RCC_OscConfig+0xd6>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cc6:	d10c      	bne.n	8005ce2 <HAL_RCC_OscConfig+0xbe>
 8005cc8:	4b78      	ldr	r3, [pc, #480]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a77      	ldr	r2, [pc, #476]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005cce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	4b75      	ldr	r3, [pc, #468]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a74      	ldr	r2, [pc, #464]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	e00b      	b.n	8005cfa <HAL_RCC_OscConfig+0xd6>
 8005ce2:	4b72      	ldr	r3, [pc, #456]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a71      	ldr	r2, [pc, #452]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b6f      	ldr	r3, [pc, #444]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a6e      	ldr	r2, [pc, #440]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cf8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d013      	beq.n	8005d2a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d02:	f7fc f819 	bl	8001d38 <HAL_GetTick>
 8005d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d08:	e008      	b.n	8005d1c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d0a:	f7fc f815 	bl	8001d38 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b64      	cmp	r3, #100	; 0x64
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e3aa      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d1c:	4b63      	ldr	r3, [pc, #396]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0f0      	beq.n	8005d0a <HAL_RCC_OscConfig+0xe6>
 8005d28:	e014      	b.n	8005d54 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2a:	f7fc f805 	bl	8001d38 <HAL_GetTick>
 8005d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d32:	f7fc f801 	bl	8001d38 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b64      	cmp	r3, #100	; 0x64
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e396      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d44:	4b59      	ldr	r3, [pc, #356]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1f0      	bne.n	8005d32 <HAL_RCC_OscConfig+0x10e>
 8005d50:	e000      	b.n	8005d54 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80cb 	beq.w	8005ef8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d62:	4b52      	ldr	r3, [pc, #328]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d6a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d6c:	4b4f      	ldr	r3, [pc, #316]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <HAL_RCC_OscConfig+0x164>
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	2b18      	cmp	r3, #24
 8005d7c:	d156      	bne.n	8005e2c <HAL_RCC_OscConfig+0x208>
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d151      	bne.n	8005e2c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d88:	4b48      	ldr	r3, [pc, #288]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <HAL_RCC_OscConfig+0x17c>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e368      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005da0:	4b42      	ldr	r3, [pc, #264]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f023 0219 	bic.w	r2, r3, #25
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	493f      	ldr	r1, [pc, #252]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005db2:	f7fb ffc1 	bl	8001d38 <HAL_GetTick>
 8005db6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005db8:	e008      	b.n	8005dcc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dba:	f7fb ffbd 	bl	8001d38 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e352      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dcc:	4b37      	ldr	r3, [pc, #220]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0f0      	beq.n	8005dba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd8:	f7fb ffde 	bl	8001d98 <HAL_GetREVID>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	f241 0203 	movw	r2, #4099	; 0x1003
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d817      	bhi.n	8005e16 <HAL_RCC_OscConfig+0x1f2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d108      	bne.n	8005e00 <HAL_RCC_OscConfig+0x1dc>
 8005dee:	4b2f      	ldr	r3, [pc, #188]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005df6:	4a2d      	ldr	r2, [pc, #180]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dfc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dfe:	e07b      	b.n	8005ef8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e00:	4b2a      	ldr	r3, [pc, #168]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	031b      	lsls	r3, r3, #12
 8005e0e:	4927      	ldr	r1, [pc, #156]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e14:	e070      	b.n	8005ef8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e16:	4b25      	ldr	r3, [pc, #148]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	061b      	lsls	r3, r3, #24
 8005e24:	4921      	ldr	r1, [pc, #132]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e2a:	e065      	b.n	8005ef8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d048      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e34:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f023 0219 	bic.w	r2, r3, #25
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	491a      	ldr	r1, [pc, #104]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e46:	f7fb ff77 	bl	8001d38 <HAL_GetTick>
 8005e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e4e:	f7fb ff73 	bl	8001d38 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e308      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e60:	4b12      	ldr	r3, [pc, #72]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0f0      	beq.n	8005e4e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6c:	f7fb ff94 	bl	8001d98 <HAL_GetREVID>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d81a      	bhi.n	8005eb0 <HAL_RCC_OscConfig+0x28c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	d108      	bne.n	8005e94 <HAL_RCC_OscConfig+0x270>
 8005e82:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e8a:	4a08      	ldr	r2, [pc, #32]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e90:	6053      	str	r3, [r2, #4]
 8005e92:	e031      	b.n	8005ef8 <HAL_RCC_OscConfig+0x2d4>
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	031b      	lsls	r3, r3, #12
 8005ea2:	4902      	ldr	r1, [pc, #8]	; (8005eac <HAL_RCC_OscConfig+0x288>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	604b      	str	r3, [r1, #4]
 8005ea8:	e026      	b.n	8005ef8 <HAL_RCC_OscConfig+0x2d4>
 8005eaa:	bf00      	nop
 8005eac:	58024400 	.word	0x58024400
 8005eb0:	4b9a      	ldr	r3, [pc, #616]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	061b      	lsls	r3, r3, #24
 8005ebe:	4997      	ldr	r1, [pc, #604]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	604b      	str	r3, [r1, #4]
 8005ec4:	e018      	b.n	8005ef8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ec6:	4b95      	ldr	r3, [pc, #596]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a94      	ldr	r2, [pc, #592]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005ecc:	f023 0301 	bic.w	r3, r3, #1
 8005ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed2:	f7fb ff31 	bl	8001d38 <HAL_GetTick>
 8005ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eda:	f7fb ff2d 	bl	8001d38 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e2c2      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005eec:	4b8b      	ldr	r3, [pc, #556]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f0      	bne.n	8005eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80a9 	beq.w	8006058 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f06:	4b85      	ldr	r3, [pc, #532]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f10:	4b82      	ldr	r3, [pc, #520]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f14:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d007      	beq.n	8005f2c <HAL_RCC_OscConfig+0x308>
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b18      	cmp	r3, #24
 8005f20:	d13a      	bne.n	8005f98 <HAL_RCC_OscConfig+0x374>
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d135      	bne.n	8005f98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f2c:	4b7b      	ldr	r3, [pc, #492]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_RCC_OscConfig+0x320>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	2b80      	cmp	r3, #128	; 0x80
 8005f3e:	d001      	beq.n	8005f44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e296      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f44:	f7fb ff28 	bl	8001d98 <HAL_GetREVID>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d817      	bhi.n	8005f82 <HAL_RCC_OscConfig+0x35e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d108      	bne.n	8005f6c <HAL_RCC_OscConfig+0x348>
 8005f5a:	4b70      	ldr	r3, [pc, #448]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005f62:	4a6e      	ldr	r2, [pc, #440]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f68:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f6a:	e075      	b.n	8006058 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f6c:	4b6b      	ldr	r3, [pc, #428]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	069b      	lsls	r3, r3, #26
 8005f7a:	4968      	ldr	r1, [pc, #416]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f80:	e06a      	b.n	8006058 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f82:	4b66      	ldr	r3, [pc, #408]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	061b      	lsls	r3, r3, #24
 8005f90:	4962      	ldr	r1, [pc, #392]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f96:	e05f      	b.n	8006058 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d042      	beq.n	8006026 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005fa0:	4b5e      	ldr	r3, [pc, #376]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a5d      	ldr	r2, [pc, #372]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fac:	f7fb fec4 	bl	8001d38 <HAL_GetTick>
 8005fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005fb4:	f7fb fec0 	bl	8001d38 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e255      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fc6:	4b55      	ldr	r3, [pc, #340]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fd2:	f7fb fee1 	bl	8001d98 <HAL_GetREVID>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d817      	bhi.n	8006010 <HAL_RCC_OscConfig+0x3ec>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d108      	bne.n	8005ffa <HAL_RCC_OscConfig+0x3d6>
 8005fe8:	4b4c      	ldr	r3, [pc, #304]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005ff0:	4a4a      	ldr	r2, [pc, #296]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ff6:	6053      	str	r3, [r2, #4]
 8005ff8:	e02e      	b.n	8006058 <HAL_RCC_OscConfig+0x434>
 8005ffa:	4b48      	ldr	r3, [pc, #288]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	069b      	lsls	r3, r3, #26
 8006008:	4944      	ldr	r1, [pc, #272]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 800600a:	4313      	orrs	r3, r2
 800600c:	604b      	str	r3, [r1, #4]
 800600e:	e023      	b.n	8006058 <HAL_RCC_OscConfig+0x434>
 8006010:	4b42      	ldr	r3, [pc, #264]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	061b      	lsls	r3, r3, #24
 800601e:	493f      	ldr	r1, [pc, #252]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8006020:	4313      	orrs	r3, r2
 8006022:	60cb      	str	r3, [r1, #12]
 8006024:	e018      	b.n	8006058 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006026:	4b3d      	ldr	r3, [pc, #244]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a3c      	ldr	r2, [pc, #240]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 800602c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006032:	f7fb fe81 	bl	8001d38 <HAL_GetTick>
 8006036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006038:	e008      	b.n	800604c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800603a:	f7fb fe7d 	bl	8001d38 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e212      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800604c:	4b33      	ldr	r3, [pc, #204]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1f0      	bne.n	800603a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d036      	beq.n	80060d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d019      	beq.n	80060a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800606c:	4b2b      	ldr	r3, [pc, #172]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 800606e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006070:	4a2a      	ldr	r2, [pc, #168]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8006072:	f043 0301 	orr.w	r3, r3, #1
 8006076:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006078:	f7fb fe5e 	bl	8001d38 <HAL_GetTick>
 800607c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006080:	f7fb fe5a 	bl	8001d38 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e1ef      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006092:	4b22      	ldr	r3, [pc, #136]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 8006094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCC_OscConfig+0x45c>
 800609e:	e018      	b.n	80060d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060a0:	4b1e      	ldr	r3, [pc, #120]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 80060a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a4:	4a1d      	ldr	r2, [pc, #116]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ac:	f7fb fe44 	bl	8001d38 <HAL_GetTick>
 80060b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060b4:	f7fb fe40 	bl	8001d38 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e1d5      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060c6:	4b15      	ldr	r3, [pc, #84]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 80060c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f0      	bne.n	80060b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d039      	beq.n	8006152 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d01c      	beq.n	8006120 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060e6:	4b0d      	ldr	r3, [pc, #52]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a0c      	ldr	r2, [pc, #48]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 80060ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060f2:	f7fb fe21 	bl	8001d38 <HAL_GetTick>
 80060f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80060fa:	f7fb fe1d 	bl	8001d38 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e1b2      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800610c:	4b03      	ldr	r3, [pc, #12]	; (800611c <HAL_RCC_OscConfig+0x4f8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0f0      	beq.n	80060fa <HAL_RCC_OscConfig+0x4d6>
 8006118:	e01b      	b.n	8006152 <HAL_RCC_OscConfig+0x52e>
 800611a:	bf00      	nop
 800611c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006120:	4b9b      	ldr	r3, [pc, #620]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a9a      	ldr	r2, [pc, #616]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800612a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800612c:	f7fb fe04 	bl	8001d38 <HAL_GetTick>
 8006130:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006134:	f7fb fe00 	bl	8001d38 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e195      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006146:	4b92      	ldr	r3, [pc, #584]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 8081 	beq.w	8006262 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006160:	4b8c      	ldr	r3, [pc, #560]	; (8006394 <HAL_RCC_OscConfig+0x770>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a8b      	ldr	r2, [pc, #556]	; (8006394 <HAL_RCC_OscConfig+0x770>)
 8006166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800616c:	f7fb fde4 	bl	8001d38 <HAL_GetTick>
 8006170:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006174:	f7fb fde0 	bl	8001d38 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b64      	cmp	r3, #100	; 0x64
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e175      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006186:	4b83      	ldr	r3, [pc, #524]	; (8006394 <HAL_RCC_OscConfig+0x770>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0f0      	beq.n	8006174 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d106      	bne.n	80061a8 <HAL_RCC_OscConfig+0x584>
 800619a:	4b7d      	ldr	r3, [pc, #500]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 800619c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619e:	4a7c      	ldr	r2, [pc, #496]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061a0:	f043 0301 	orr.w	r3, r3, #1
 80061a4:	6713      	str	r3, [r2, #112]	; 0x70
 80061a6:	e02d      	b.n	8006204 <HAL_RCC_OscConfig+0x5e0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10c      	bne.n	80061ca <HAL_RCC_OscConfig+0x5a6>
 80061b0:	4b77      	ldr	r3, [pc, #476]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b4:	4a76      	ldr	r2, [pc, #472]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	6713      	str	r3, [r2, #112]	; 0x70
 80061bc:	4b74      	ldr	r3, [pc, #464]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c0:	4a73      	ldr	r2, [pc, #460]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061c2:	f023 0304 	bic.w	r3, r3, #4
 80061c6:	6713      	str	r3, [r2, #112]	; 0x70
 80061c8:	e01c      	b.n	8006204 <HAL_RCC_OscConfig+0x5e0>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	d10c      	bne.n	80061ec <HAL_RCC_OscConfig+0x5c8>
 80061d2:	4b6f      	ldr	r3, [pc, #444]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d6:	4a6e      	ldr	r2, [pc, #440]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061d8:	f043 0304 	orr.w	r3, r3, #4
 80061dc:	6713      	str	r3, [r2, #112]	; 0x70
 80061de:	4b6c      	ldr	r3, [pc, #432]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	4a6b      	ldr	r2, [pc, #428]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	6713      	str	r3, [r2, #112]	; 0x70
 80061ea:	e00b      	b.n	8006204 <HAL_RCC_OscConfig+0x5e0>
 80061ec:	4b68      	ldr	r3, [pc, #416]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f0:	4a67      	ldr	r2, [pc, #412]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061f2:	f023 0301 	bic.w	r3, r3, #1
 80061f6:	6713      	str	r3, [r2, #112]	; 0x70
 80061f8:	4b65      	ldr	r3, [pc, #404]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fc:	4a64      	ldr	r2, [pc, #400]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80061fe:	f023 0304 	bic.w	r3, r3, #4
 8006202:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d015      	beq.n	8006238 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800620c:	f7fb fd94 	bl	8001d38 <HAL_GetTick>
 8006210:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006212:	e00a      	b.n	800622a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006214:	f7fb fd90 	bl	8001d38 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006222:	4293      	cmp	r3, r2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e123      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800622a:	4b59      	ldr	r3, [pc, #356]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0ee      	beq.n	8006214 <HAL_RCC_OscConfig+0x5f0>
 8006236:	e014      	b.n	8006262 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006238:	f7fb fd7e 	bl	8001d38 <HAL_GetTick>
 800623c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800623e:	e00a      	b.n	8006256 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006240:	f7fb fd7a 	bl	8001d38 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	f241 3288 	movw	r2, #5000	; 0x1388
 800624e:	4293      	cmp	r3, r2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e10d      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006256:	4b4e      	ldr	r3, [pc, #312]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1ee      	bne.n	8006240 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 8102 	beq.w	8006470 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800626c:	4b48      	ldr	r3, [pc, #288]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006274:	2b18      	cmp	r3, #24
 8006276:	f000 80bd 	beq.w	80063f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	2b02      	cmp	r3, #2
 8006280:	f040 809e 	bne.w	80063c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006284:	4b42      	ldr	r3, [pc, #264]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a41      	ldr	r2, [pc, #260]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 800628a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800628e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fb fd52 	bl	8001d38 <HAL_GetTick>
 8006294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006298:	f7fb fd4e 	bl	8001d38 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e0e3      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062aa:	4b39      	ldr	r3, [pc, #228]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f0      	bne.n	8006298 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062b6:	4b36      	ldr	r3, [pc, #216]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80062b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ba:	4b37      	ldr	r3, [pc, #220]	; (8006398 <HAL_RCC_OscConfig+0x774>)
 80062bc:	4013      	ands	r3, r2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062c6:	0112      	lsls	r2, r2, #4
 80062c8:	430a      	orrs	r2, r1
 80062ca:	4931      	ldr	r1, [pc, #196]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	628b      	str	r3, [r1, #40]	; 0x28
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d4:	3b01      	subs	r3, #1
 80062d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062de:	3b01      	subs	r3, #1
 80062e0:	025b      	lsls	r3, r3, #9
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	3b01      	subs	r3, #1
 80062ec:	041b      	lsls	r3, r3, #16
 80062ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f8:	3b01      	subs	r3, #1
 80062fa:	061b      	lsls	r3, r3, #24
 80062fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006300:	4923      	ldr	r1, [pc, #140]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006302:	4313      	orrs	r3, r2
 8006304:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006306:	4b22      	ldr	r3, [pc, #136]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	4a21      	ldr	r2, [pc, #132]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 800630c:	f023 0301 	bic.w	r3, r3, #1
 8006310:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006312:	4b1f      	ldr	r3, [pc, #124]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006316:	4b21      	ldr	r3, [pc, #132]	; (800639c <HAL_RCC_OscConfig+0x778>)
 8006318:	4013      	ands	r3, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800631e:	00d2      	lsls	r2, r2, #3
 8006320:	491b      	ldr	r1, [pc, #108]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006322:	4313      	orrs	r3, r2
 8006324:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006326:	4b1a      	ldr	r3, [pc, #104]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	f023 020c 	bic.w	r2, r3, #12
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	4917      	ldr	r1, [pc, #92]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006334:	4313      	orrs	r3, r2
 8006336:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006338:	4b15      	ldr	r3, [pc, #84]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	f023 0202 	bic.w	r2, r3, #2
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006344:	4912      	ldr	r1, [pc, #72]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006346:	4313      	orrs	r3, r2
 8006348:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800634a:	4b11      	ldr	r3, [pc, #68]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	4a10      	ldr	r2, [pc, #64]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006354:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006356:	4b0e      	ldr	r3, [pc, #56]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635a:	4a0d      	ldr	r2, [pc, #52]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 800635c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006360:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006362:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	4a0a      	ldr	r2, [pc, #40]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800636c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800636e:	4b08      	ldr	r3, [pc, #32]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	4a07      	ldr	r2, [pc, #28]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800637a:	4b05      	ldr	r3, [pc, #20]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a04      	ldr	r2, [pc, #16]	; (8006390 <HAL_RCC_OscConfig+0x76c>)
 8006380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006386:	f7fb fcd7 	bl	8001d38 <HAL_GetTick>
 800638a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800638c:	e011      	b.n	80063b2 <HAL_RCC_OscConfig+0x78e>
 800638e:	bf00      	nop
 8006390:	58024400 	.word	0x58024400
 8006394:	58024800 	.word	0x58024800
 8006398:	fffffc0c 	.word	0xfffffc0c
 800639c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a0:	f7fb fcca 	bl	8001d38 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e05f      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063b2:	4b32      	ldr	r3, [pc, #200]	; (800647c <HAL_RCC_OscConfig+0x858>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0f0      	beq.n	80063a0 <HAL_RCC_OscConfig+0x77c>
 80063be:	e057      	b.n	8006470 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c0:	4b2e      	ldr	r3, [pc, #184]	; (800647c <HAL_RCC_OscConfig+0x858>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2d      	ldr	r2, [pc, #180]	; (800647c <HAL_RCC_OscConfig+0x858>)
 80063c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063cc:	f7fb fcb4 	bl	8001d38 <HAL_GetTick>
 80063d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063d4:	f7fb fcb0 	bl	8001d38 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e045      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063e6:	4b25      	ldr	r3, [pc, #148]	; (800647c <HAL_RCC_OscConfig+0x858>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f0      	bne.n	80063d4 <HAL_RCC_OscConfig+0x7b0>
 80063f2:	e03d      	b.n	8006470 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80063f4:	4b21      	ldr	r3, [pc, #132]	; (800647c <HAL_RCC_OscConfig+0x858>)
 80063f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80063fa:	4b20      	ldr	r3, [pc, #128]	; (800647c <HAL_RCC_OscConfig+0x858>)
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	2b01      	cmp	r3, #1
 8006406:	d031      	beq.n	800646c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f003 0203 	and.w	r2, r3, #3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006412:	429a      	cmp	r2, r3
 8006414:	d12a      	bne.n	800646c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	091b      	lsrs	r3, r3, #4
 800641a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006422:	429a      	cmp	r2, r3
 8006424:	d122      	bne.n	800646c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006432:	429a      	cmp	r2, r3
 8006434:	d11a      	bne.n	800646c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	0a5b      	lsrs	r3, r3, #9
 800643a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006442:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006444:	429a      	cmp	r2, r3
 8006446:	d111      	bne.n	800646c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	0c1b      	lsrs	r3, r3, #16
 800644c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006456:	429a      	cmp	r2, r3
 8006458:	d108      	bne.n	800646c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	0e1b      	lsrs	r3, r3, #24
 800645e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006468:	429a      	cmp	r2, r3
 800646a:	d001      	beq.n	8006470 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3730      	adds	r7, #48	; 0x30
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	58024400 	.word	0x58024400

08006480 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e19c      	b.n	80067ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006494:	4b8a      	ldr	r3, [pc, #552]	; (80066c0 <HAL_RCC_ClockConfig+0x240>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 030f 	and.w	r3, r3, #15
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d910      	bls.n	80064c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064a2:	4b87      	ldr	r3, [pc, #540]	; (80066c0 <HAL_RCC_ClockConfig+0x240>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f023 020f 	bic.w	r2, r3, #15
 80064aa:	4985      	ldr	r1, [pc, #532]	; (80066c0 <HAL_RCC_ClockConfig+0x240>)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b2:	4b83      	ldr	r3, [pc, #524]	; (80066c0 <HAL_RCC_ClockConfig+0x240>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d001      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e184      	b.n	80067ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d010      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	4b7b      	ldr	r3, [pc, #492]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064dc:	429a      	cmp	r2, r3
 80064de:	d908      	bls.n	80064f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064e0:	4b78      	ldr	r3, [pc, #480]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	4975      	ldr	r1, [pc, #468]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d010      	beq.n	8006520 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695a      	ldr	r2, [r3, #20]
 8006502:	4b70      	ldr	r3, [pc, #448]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800650a:	429a      	cmp	r2, r3
 800650c:	d908      	bls.n	8006520 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800650e:	4b6d      	ldr	r3, [pc, #436]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	496a      	ldr	r1, [pc, #424]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 800651c:	4313      	orrs	r3, r2
 800651e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	d010      	beq.n	800654e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699a      	ldr	r2, [r3, #24]
 8006530:	4b64      	ldr	r3, [pc, #400]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006538:	429a      	cmp	r2, r3
 800653a:	d908      	bls.n	800654e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800653c:	4b61      	ldr	r3, [pc, #388]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	495e      	ldr	r1, [pc, #376]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 800654a:	4313      	orrs	r3, r2
 800654c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d010      	beq.n	800657c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69da      	ldr	r2, [r3, #28]
 800655e:	4b59      	ldr	r3, [pc, #356]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006566:	429a      	cmp	r2, r3
 8006568:	d908      	bls.n	800657c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800656a:	4b56      	ldr	r3, [pc, #344]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	4953      	ldr	r1, [pc, #332]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 8006578:	4313      	orrs	r3, r2
 800657a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d010      	beq.n	80065aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68da      	ldr	r2, [r3, #12]
 800658c:	4b4d      	ldr	r3, [pc, #308]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	429a      	cmp	r2, r3
 8006596:	d908      	bls.n	80065aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006598:	4b4a      	ldr	r3, [pc, #296]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	f023 020f 	bic.w	r2, r3, #15
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4947      	ldr	r1, [pc, #284]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d055      	beq.n	8006662 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80065b6:	4b43      	ldr	r3, [pc, #268]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	4940      	ldr	r1, [pc, #256]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d107      	bne.n	80065e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065d0:	4b3c      	ldr	r3, [pc, #240]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d121      	bne.n	8006620 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e0f6      	b.n	80067ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d107      	bne.n	80065f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065e8:	4b36      	ldr	r3, [pc, #216]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d115      	bne.n	8006620 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0ea      	b.n	80067ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d107      	bne.n	8006610 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006600:	4b30      	ldr	r3, [pc, #192]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006608:	2b00      	cmp	r3, #0
 800660a:	d109      	bne.n	8006620 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e0de      	b.n	80067ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006610:	4b2c      	ldr	r3, [pc, #176]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e0d6      	b.n	80067ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006620:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f023 0207 	bic.w	r2, r3, #7
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	4925      	ldr	r1, [pc, #148]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 800662e:	4313      	orrs	r3, r2
 8006630:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006632:	f7fb fb81 	bl	8001d38 <HAL_GetTick>
 8006636:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006638:	e00a      	b.n	8006650 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800663a:	f7fb fb7d 	bl	8001d38 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f241 3288 	movw	r2, #5000	; 0x1388
 8006648:	4293      	cmp	r3, r2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e0be      	b.n	80067ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006650:	4b1c      	ldr	r3, [pc, #112]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	429a      	cmp	r2, r3
 8006660:	d1eb      	bne.n	800663a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d010      	beq.n	8006690 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	429a      	cmp	r2, r3
 800667c:	d208      	bcs.n	8006690 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800667e:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f023 020f 	bic.w	r2, r3, #15
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	490e      	ldr	r1, [pc, #56]	; (80066c4 <HAL_RCC_ClockConfig+0x244>)
 800668c:	4313      	orrs	r3, r2
 800668e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006690:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <HAL_RCC_ClockConfig+0x240>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 030f 	and.w	r3, r3, #15
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d214      	bcs.n	80066c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800669e:	4b08      	ldr	r3, [pc, #32]	; (80066c0 <HAL_RCC_ClockConfig+0x240>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f023 020f 	bic.w	r2, r3, #15
 80066a6:	4906      	ldr	r1, [pc, #24]	; (80066c0 <HAL_RCC_ClockConfig+0x240>)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ae:	4b04      	ldr	r3, [pc, #16]	; (80066c0 <HAL_RCC_ClockConfig+0x240>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d005      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e086      	b.n	80067ce <HAL_RCC_ClockConfig+0x34e>
 80066c0:	52002000 	.word	0x52002000
 80066c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d010      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	4b3f      	ldr	r3, [pc, #252]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d208      	bcs.n	80066f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066e4:	4b3c      	ldr	r3, [pc, #240]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	4939      	ldr	r1, [pc, #228]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d010      	beq.n	8006724 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695a      	ldr	r2, [r3, #20]
 8006706:	4b34      	ldr	r3, [pc, #208]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800670e:	429a      	cmp	r2, r3
 8006710:	d208      	bcs.n	8006724 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006712:	4b31      	ldr	r3, [pc, #196]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	492e      	ldr	r1, [pc, #184]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 8006720:	4313      	orrs	r3, r2
 8006722:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0310 	and.w	r3, r3, #16
 800672c:	2b00      	cmp	r3, #0
 800672e:	d010      	beq.n	8006752 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699a      	ldr	r2, [r3, #24]
 8006734:	4b28      	ldr	r3, [pc, #160]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800673c:	429a      	cmp	r2, r3
 800673e:	d208      	bcs.n	8006752 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006740:	4b25      	ldr	r3, [pc, #148]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	4922      	ldr	r1, [pc, #136]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 800674e:	4313      	orrs	r3, r2
 8006750:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d010      	beq.n	8006780 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69da      	ldr	r2, [r3, #28]
 8006762:	4b1d      	ldr	r3, [pc, #116]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800676a:	429a      	cmp	r2, r3
 800676c:	d208      	bcs.n	8006780 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800676e:	4b1a      	ldr	r3, [pc, #104]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	4917      	ldr	r1, [pc, #92]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 800677c:	4313      	orrs	r3, r2
 800677e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006780:	f000 f834 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 8006784:	4602      	mov	r2, r0
 8006786:	4b14      	ldr	r3, [pc, #80]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	0a1b      	lsrs	r3, r3, #8
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	4912      	ldr	r1, [pc, #72]	; (80067dc <HAL_RCC_ClockConfig+0x35c>)
 8006792:	5ccb      	ldrb	r3, [r1, r3]
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	fa22 f303 	lsr.w	r3, r2, r3
 800679c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800679e:	4b0e      	ldr	r3, [pc, #56]	; (80067d8 <HAL_RCC_ClockConfig+0x358>)
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	4a0d      	ldr	r2, [pc, #52]	; (80067dc <HAL_RCC_ClockConfig+0x35c>)
 80067a8:	5cd3      	ldrb	r3, [r2, r3]
 80067aa:	f003 031f 	and.w	r3, r3, #31
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	fa22 f303 	lsr.w	r3, r2, r3
 80067b4:	4a0a      	ldr	r2, [pc, #40]	; (80067e0 <HAL_RCC_ClockConfig+0x360>)
 80067b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80067b8:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <HAL_RCC_ClockConfig+0x364>)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80067be:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <HAL_RCC_ClockConfig+0x368>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fb fa6e 	bl	8001ca4 <HAL_InitTick>
 80067c8:	4603      	mov	r3, r0
 80067ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	58024400 	.word	0x58024400
 80067dc:	0800b834 	.word	0x0800b834
 80067e0:	24000004 	.word	0x24000004
 80067e4:	24000000 	.word	0x24000000
 80067e8:	24000018 	.word	0x24000018

080067ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b089      	sub	sp, #36	; 0x24
 80067f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067f2:	4bb3      	ldr	r3, [pc, #716]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067fa:	2b18      	cmp	r3, #24
 80067fc:	f200 8155 	bhi.w	8006aaa <HAL_RCC_GetSysClockFreq+0x2be>
 8006800:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	0800686d 	.word	0x0800686d
 800680c:	08006aab 	.word	0x08006aab
 8006810:	08006aab 	.word	0x08006aab
 8006814:	08006aab 	.word	0x08006aab
 8006818:	08006aab 	.word	0x08006aab
 800681c:	08006aab 	.word	0x08006aab
 8006820:	08006aab 	.word	0x08006aab
 8006824:	08006aab 	.word	0x08006aab
 8006828:	08006893 	.word	0x08006893
 800682c:	08006aab 	.word	0x08006aab
 8006830:	08006aab 	.word	0x08006aab
 8006834:	08006aab 	.word	0x08006aab
 8006838:	08006aab 	.word	0x08006aab
 800683c:	08006aab 	.word	0x08006aab
 8006840:	08006aab 	.word	0x08006aab
 8006844:	08006aab 	.word	0x08006aab
 8006848:	08006899 	.word	0x08006899
 800684c:	08006aab 	.word	0x08006aab
 8006850:	08006aab 	.word	0x08006aab
 8006854:	08006aab 	.word	0x08006aab
 8006858:	08006aab 	.word	0x08006aab
 800685c:	08006aab 	.word	0x08006aab
 8006860:	08006aab 	.word	0x08006aab
 8006864:	08006aab 	.word	0x08006aab
 8006868:	0800689f 	.word	0x0800689f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800686c:	4b94      	ldr	r3, [pc, #592]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d009      	beq.n	800688c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006878:	4b91      	ldr	r3, [pc, #580]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	08db      	lsrs	r3, r3, #3
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	4a90      	ldr	r2, [pc, #576]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
 8006888:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800688a:	e111      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800688c:	4b8d      	ldr	r3, [pc, #564]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800688e:	61bb      	str	r3, [r7, #24]
    break;
 8006890:	e10e      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006892:	4b8d      	ldr	r3, [pc, #564]	; (8006ac8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006894:	61bb      	str	r3, [r7, #24]
    break;
 8006896:	e10b      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006898:	4b8c      	ldr	r3, [pc, #560]	; (8006acc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800689a:	61bb      	str	r3, [r7, #24]
    break;
 800689c:	e108      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800689e:	4b88      	ldr	r3, [pc, #544]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80068a8:	4b85      	ldr	r3, [pc, #532]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	091b      	lsrs	r3, r3, #4
 80068ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80068b4:	4b82      	ldr	r3, [pc, #520]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80068be:	4b80      	ldr	r3, [pc, #512]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c2:	08db      	lsrs	r3, r3, #3
 80068c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	fb02 f303 	mul.w	r3, r2, r3
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 80e1 	beq.w	8006aa4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	f000 8083 	beq.w	80069f0 <HAL_RCC_GetSysClockFreq+0x204>
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	f200 80a1 	bhi.w	8006a34 <HAL_RCC_GetSysClockFreq+0x248>
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <HAL_RCC_GetSysClockFreq+0x114>
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d056      	beq.n	80069ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80068fe:	e099      	b.n	8006a34 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006900:	4b6f      	ldr	r3, [pc, #444]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d02d      	beq.n	8006968 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800690c:	4b6c      	ldr	r3, [pc, #432]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	08db      	lsrs	r3, r3, #3
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	4a6b      	ldr	r2, [pc, #428]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006918:	fa22 f303 	lsr.w	r3, r2, r3
 800691c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	ee07 3a90 	vmov	s15, r3
 8006924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006936:	4b62      	ldr	r3, [pc, #392]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006946:	ed97 6a02 	vldr	s12, [r7, #8]
 800694a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800694e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800695a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006962:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006966:	e087      	b.n	8006a78 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006972:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006ad4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697a:	4b51      	ldr	r3, [pc, #324]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800697c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698a:	ed97 6a02 	vldr	s12, [r7, #8]
 800698e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800699e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069aa:	e065      	b.n	8006a78 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006ad8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80069ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069be:	4b40      	ldr	r3, [pc, #256]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80069d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ee:	e043      	b.n	8006a78 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006adc <HAL_RCC_GetSysClockFreq+0x2f0>
 80069fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a02:	4b2f      	ldr	r3, [pc, #188]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a16:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a32:	e021      	b.n	8006a78 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006ad8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a46:	4b1e      	ldr	r3, [pc, #120]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a76:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006a78:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	0a5b      	lsrs	r3, r3, #9
 8006a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a82:	3301      	adds	r3, #1
 8006a84:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	ee07 3a90 	vmov	s15, r3
 8006a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a9c:	ee17 3a90 	vmov	r3, s15
 8006aa0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006aa2:	e005      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61bb      	str	r3, [r7, #24]
    break;
 8006aa8:	e002      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006aaa:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006aac:	61bb      	str	r3, [r7, #24]
    break;
 8006aae:	bf00      	nop
  }

  return sysclockfreq;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3724      	adds	r7, #36	; 0x24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	58024400 	.word	0x58024400
 8006ac4:	03d09000 	.word	0x03d09000
 8006ac8:	003d0900 	.word	0x003d0900
 8006acc:	007a1200 	.word	0x007a1200
 8006ad0:	46000000 	.word	0x46000000
 8006ad4:	4c742400 	.word	0x4c742400
 8006ad8:	4a742400 	.word	0x4a742400
 8006adc:	4af42400 	.word	0x4af42400

08006ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ae6:	f7ff fe81 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 8006aea:	4602      	mov	r2, r0
 8006aec:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <HAL_RCC_GetHCLKFreq+0x50>)
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	0a1b      	lsrs	r3, r3, #8
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	490f      	ldr	r1, [pc, #60]	; (8006b34 <HAL_RCC_GetHCLKFreq+0x54>)
 8006af8:	5ccb      	ldrb	r3, [r1, r3]
 8006afa:	f003 031f 	and.w	r3, r3, #31
 8006afe:	fa22 f303 	lsr.w	r3, r2, r3
 8006b02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b04:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b0e:	5cd3      	ldrb	r3, [r2, r3]
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1a:	4a07      	ldr	r2, [pc, #28]	; (8006b38 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b1e:	4a07      	ldr	r2, [pc, #28]	; (8006b3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b24:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b26:	681b      	ldr	r3, [r3, #0]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	58024400 	.word	0x58024400
 8006b34:	0800b834 	.word	0x0800b834
 8006b38:	24000004 	.word	0x24000004
 8006b3c:	24000000 	.word	0x24000000

08006b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006b44:	f7ff ffcc 	bl	8006ae0 <HAL_RCC_GetHCLKFreq>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	091b      	lsrs	r3, r3, #4
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	4904      	ldr	r1, [pc, #16]	; (8006b68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b56:	5ccb      	ldrb	r3, [r1, r3]
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	58024400 	.word	0x58024400
 8006b68:	0800b834 	.word	0x0800b834

08006b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006b70:	f7ff ffb6 	bl	8006ae0 <HAL_RCC_GetHCLKFreq>
 8006b74:	4602      	mov	r2, r0
 8006b76:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	4904      	ldr	r1, [pc, #16]	; (8006b94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b82:	5ccb      	ldrb	r3, [r1, r3]
 8006b84:	f003 031f 	and.w	r3, r3, #31
 8006b88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	58024400 	.word	0x58024400
 8006b94:	0800b834 	.word	0x0800b834

08006b98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d03f      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bbc:	d02a      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006bbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bc2:	d824      	bhi.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bc8:	d018      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bce:	d81e      	bhi.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd8:	d007      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006bda:	e018      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bdc:	4ba3      	ldr	r3, [pc, #652]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	4aa2      	ldr	r2, [pc, #648]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006be8:	e015      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3304      	adds	r3, #4
 8006bee:	2102      	movs	r1, #2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f001 f9d5 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006bfa:	e00c      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3324      	adds	r3, #36	; 0x24
 8006c00:	2102      	movs	r1, #2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 fa7e 	bl	8008104 <RCCEx_PLL3_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c0c:	e003      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	75fb      	strb	r3, [r7, #23]
      break;
 8006c12:	e000      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d109      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c1c:	4b93      	ldr	r3, [pc, #588]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c28:	4990      	ldr	r1, [pc, #576]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	650b      	str	r3, [r1, #80]	; 0x50
 8006c2e:	e001      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d03d      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d826      	bhi.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006c48:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4e:	bf00      	nop
 8006c50:	08006c65 	.word	0x08006c65
 8006c54:	08006c73 	.word	0x08006c73
 8006c58:	08006c85 	.word	0x08006c85
 8006c5c:	08006c9d 	.word	0x08006c9d
 8006c60:	08006c9d 	.word	0x08006c9d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c64:	4b81      	ldr	r3, [pc, #516]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	4a80      	ldr	r2, [pc, #512]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c70:	e015      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3304      	adds	r3, #4
 8006c76:	2100      	movs	r1, #0
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 f991 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c82:	e00c      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3324      	adds	r3, #36	; 0x24
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 fa3a 	bl	8008104 <RCCEx_PLL3_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c94:	e003      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9a:	e000      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d109      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ca4:	4b71      	ldr	r3, [pc, #452]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca8:	f023 0207 	bic.w	r2, r3, #7
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb0:	496e      	ldr	r1, [pc, #440]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	650b      	str	r3, [r1, #80]	; 0x50
 8006cb6:	e001      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d042      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd0:	d02b      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd6:	d825      	bhi.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006cd8:	2bc0      	cmp	r3, #192	; 0xc0
 8006cda:	d028      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006cdc:	2bc0      	cmp	r3, #192	; 0xc0
 8006cde:	d821      	bhi.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ce0:	2b80      	cmp	r3, #128	; 0x80
 8006ce2:	d016      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006ce4:	2b80      	cmp	r3, #128	; 0x80
 8006ce6:	d81d      	bhi.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d007      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006cf0:	e018      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cf2:	4b5e      	ldr	r3, [pc, #376]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	4a5d      	ldr	r2, [pc, #372]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006cfe:	e017      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3304      	adds	r3, #4
 8006d04:	2100      	movs	r1, #0
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 f94a 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d10:	e00e      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3324      	adds	r3, #36	; 0x24
 8006d16:	2100      	movs	r1, #0
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f001 f9f3 	bl	8008104 <RCCEx_PLL3_Config>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d22:	e005      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	75fb      	strb	r3, [r7, #23]
      break;
 8006d28:	e002      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006d2a:	bf00      	nop
 8006d2c:	e000      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d109      	bne.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d36:	4b4d      	ldr	r3, [pc, #308]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d42:	494a      	ldr	r1, [pc, #296]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	650b      	str	r3, [r1, #80]	; 0x50
 8006d48:	e001      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
 8006d4c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d049      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d64:	d030      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006d66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d6a:	d82a      	bhi.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d70:	d02c      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006d72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d76:	d824      	bhi.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d7c:	d018      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d82:	d81e      	bhi.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d8c:	d007      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006d8e:	e018      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d90:	4b36      	ldr	r3, [pc, #216]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	4a35      	ldr	r2, [pc, #212]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d9c:	e017      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3304      	adds	r3, #4
 8006da2:	2100      	movs	r1, #0
 8006da4:	4618      	mov	r0, r3
 8006da6:	f001 f8fb 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006dae:	e00e      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3324      	adds	r3, #36	; 0x24
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 f9a4 	bl	8008104 <RCCEx_PLL3_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dc0:	e005      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc6:	e002      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006dc8:	bf00      	nop
 8006dca:	e000      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10a      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006dd4:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006de2:	4922      	ldr	r1, [pc, #136]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	658b      	str	r3, [r1, #88]	; 0x58
 8006de8:	e001      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d04b      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e04:	d030      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e0a:	d82a      	bhi.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e10:	d02e      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006e12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e16:	d824      	bhi.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e1c:	d018      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e22:	d81e      	bhi.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e2c:	d007      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006e2e:	e018      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e30:	4b0e      	ldr	r3, [pc, #56]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	4a0d      	ldr	r2, [pc, #52]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e3c:	e019      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3304      	adds	r3, #4
 8006e42:	2100      	movs	r1, #0
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 f8ab 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e4e:	e010      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3324      	adds	r3, #36	; 0x24
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 f954 	bl	8008104 <RCCEx_PLL3_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e60:	e007      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	75fb      	strb	r3, [r7, #23]
      break;
 8006e66:	e004      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006e68:	bf00      	nop
 8006e6a:	e002      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006e6c:	58024400 	.word	0x58024400
      break;
 8006e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006e78:	4b99      	ldr	r3, [pc, #612]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e86:	4996      	ldr	r1, [pc, #600]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	658b      	str	r3, [r1, #88]	; 0x58
 8006e8c:	e001      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d032      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea2:	2b30      	cmp	r3, #48	; 0x30
 8006ea4:	d01c      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006ea6:	2b30      	cmp	r3, #48	; 0x30
 8006ea8:	d817      	bhi.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d00c      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	d813      	bhi.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d016      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006eb6:	2b10      	cmp	r3, #16
 8006eb8:	d10f      	bne.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eba:	4b89      	ldr	r3, [pc, #548]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebe:	4a88      	ldr	r2, [pc, #544]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006ec6:	e00e      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	2102      	movs	r1, #2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f001 f866 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006ed8:	e005      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ede:	e002      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006ee0:	bf00      	nop
 8006ee2:	e000      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d109      	bne.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006eec:	4b7c      	ldr	r3, [pc, #496]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef8:	4979      	ldr	r1, [pc, #484]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006efe:	e001      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d047      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f18:	d030      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f1e:	d82a      	bhi.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006f20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f24:	d02c      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006f26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f2a:	d824      	bhi.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f30:	d018      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f36:	d81e      	bhi.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f40:	d007      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006f42:	e018      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f44:	4b66      	ldr	r3, [pc, #408]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	4a65      	ldr	r2, [pc, #404]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f50:	e017      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3304      	adds	r3, #4
 8006f56:	2100      	movs	r1, #0
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f001 f821 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f62:	e00e      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3324      	adds	r3, #36	; 0x24
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f001 f8ca 	bl	8008104 <RCCEx_PLL3_Config>
 8006f70:	4603      	mov	r3, r0
 8006f72:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f74:	e005      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	75fb      	strb	r3, [r7, #23]
      break;
 8006f7a:	e002      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006f7c:	bf00      	nop
 8006f7e:	e000      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f88:	4b55      	ldr	r3, [pc, #340]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f8c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f94:	4952      	ldr	r1, [pc, #328]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	650b      	str	r3, [r1, #80]	; 0x50
 8006f9a:	e001      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
 8006f9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d049      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fb4:	d02e      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006fb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fba:	d828      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006fbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fc0:	d02a      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006fc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fc6:	d822      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006fc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fcc:	d026      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006fce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fd2:	d81c      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006fd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fd8:	d010      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006fda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fde:	d816      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d01d      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe8:	d111      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3304      	adds	r3, #4
 8006fee:	2101      	movs	r1, #1
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 ffd5 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006ffa:	e012      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3324      	adds	r3, #36	; 0x24
 8007000:	2101      	movs	r1, #1
 8007002:	4618      	mov	r0, r3
 8007004:	f001 f87e 	bl	8008104 <RCCEx_PLL3_Config>
 8007008:	4603      	mov	r3, r0
 800700a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800700c:	e009      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	75fb      	strb	r3, [r7, #23]
      break;
 8007012:	e006      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007014:	bf00      	nop
 8007016:	e004      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007018:	bf00      	nop
 800701a:	e002      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800701c:	bf00      	nop
 800701e:	e000      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d109      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007028:	4b2d      	ldr	r3, [pc, #180]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800702a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007034:	492a      	ldr	r1, [pc, #168]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007036:	4313      	orrs	r3, r2
 8007038:	650b      	str	r3, [r1, #80]	; 0x50
 800703a:	e001      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703c:	7dfb      	ldrb	r3, [r7, #23]
 800703e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d04d      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007056:	d02e      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800705c:	d828      	bhi.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800705e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007062:	d02a      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007068:	d822      	bhi.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800706a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800706e:	d026      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007070:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007074:	d81c      	bhi.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800707a:	d010      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800707c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007080:	d816      	bhi.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d01d      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800708a:	d111      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3304      	adds	r3, #4
 8007090:	2101      	movs	r1, #1
 8007092:	4618      	mov	r0, r3
 8007094:	f000 ff84 	bl	8007fa0 <RCCEx_PLL2_Config>
 8007098:	4603      	mov	r3, r0
 800709a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800709c:	e012      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	3324      	adds	r3, #36	; 0x24
 80070a2:	2101      	movs	r1, #1
 80070a4:	4618      	mov	r0, r3
 80070a6:	f001 f82d 	bl	8008104 <RCCEx_PLL3_Config>
 80070aa:	4603      	mov	r3, r0
 80070ac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80070ae:	e009      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	75fb      	strb	r3, [r7, #23]
      break;
 80070b4:	e006      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80070b6:	bf00      	nop
 80070b8:	e004      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80070ba:	bf00      	nop
 80070bc:	e002      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80070be:	bf00      	nop
 80070c0:	e000      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80070c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10c      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070ca:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070d8:	4901      	ldr	r1, [pc, #4]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	658b      	str	r3, [r1, #88]	; 0x58
 80070de:	e003      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80070e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d02f      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070fc:	d00e      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x584>
 80070fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007102:	d814      	bhi.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d015      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800710c:	d10f      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800710e:	4baf      	ldr	r3, [pc, #700]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007112:	4aae      	ldr	r2, [pc, #696]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007118:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800711a:	e00c      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3304      	adds	r3, #4
 8007120:	2101      	movs	r1, #1
 8007122:	4618      	mov	r0, r3
 8007124:	f000 ff3c 	bl	8007fa0 <RCCEx_PLL2_Config>
 8007128:	4603      	mov	r3, r0
 800712a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800712c:	e003      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	75fb      	strb	r3, [r7, #23]
      break;
 8007132:	e000      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d109      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800713c:	4ba3      	ldr	r3, [pc, #652]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800713e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007140:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007148:	49a0      	ldr	r1, [pc, #640]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800714a:	4313      	orrs	r3, r2
 800714c:	650b      	str	r3, [r1, #80]	; 0x50
 800714e:	e001      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007150:	7dfb      	ldrb	r3, [r7, #23]
 8007152:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d032      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007164:	2b03      	cmp	r3, #3
 8007166:	d81b      	bhi.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007168:	a201      	add	r2, pc, #4	; (adr r2, 8007170 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800716a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716e:	bf00      	nop
 8007170:	080071a7 	.word	0x080071a7
 8007174:	08007181 	.word	0x08007181
 8007178:	0800718f 	.word	0x0800718f
 800717c:	080071a7 	.word	0x080071a7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007180:	4b92      	ldr	r3, [pc, #584]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	4a91      	ldr	r2, [pc, #580]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800718a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800718c:	e00c      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	3304      	adds	r3, #4
 8007192:	2102      	movs	r1, #2
 8007194:	4618      	mov	r0, r3
 8007196:	f000 ff03 	bl	8007fa0 <RCCEx_PLL2_Config>
 800719a:	4603      	mov	r3, r0
 800719c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800719e:	e003      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	75fb      	strb	r3, [r7, #23]
      break;
 80071a4:	e000      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80071a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071ae:	4b87      	ldr	r3, [pc, #540]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071b2:	f023 0203 	bic.w	r2, r3, #3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ba:	4984      	ldr	r1, [pc, #528]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071c0:	e001      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 8086 	beq.w	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071d4:	4b7e      	ldr	r3, [pc, #504]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a7d      	ldr	r2, [pc, #500]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80071da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071e0:	f7fa fdaa 	bl	8001d38 <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071e6:	e009      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e8:	f7fa fda6 	bl	8001d38 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b64      	cmp	r3, #100	; 0x64
 80071f4:	d902      	bls.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	75fb      	strb	r3, [r7, #23]
        break;
 80071fa:	e005      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071fc:	4b74      	ldr	r3, [pc, #464]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0ef      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d166      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800720e:	4b6f      	ldr	r3, [pc, #444]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007210:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007218:	4053      	eors	r3, r2
 800721a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721e:	2b00      	cmp	r3, #0
 8007220:	d013      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007222:	4b6a      	ldr	r3, [pc, #424]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800722a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800722c:	4b67      	ldr	r3, [pc, #412]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800722e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007230:	4a66      	ldr	r2, [pc, #408]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007236:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007238:	4b64      	ldr	r3, [pc, #400]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800723a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723c:	4a63      	ldr	r2, [pc, #396]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800723e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007242:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007244:	4a61      	ldr	r2, [pc, #388]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007254:	d115      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007256:	f7fa fd6f 	bl	8001d38 <HAL_GetTick>
 800725a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800725c:	e00b      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800725e:	f7fa fd6b 	bl	8001d38 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	f241 3288 	movw	r2, #5000	; 0x1388
 800726c:	4293      	cmp	r3, r2
 800726e:	d902      	bls.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	75fb      	strb	r3, [r7, #23]
            break;
 8007274:	e005      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007276:	4b55      	ldr	r3, [pc, #340]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0ed      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d126      	bne.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800728e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007296:	d10d      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007298:	4b4c      	ldr	r3, [pc, #304]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072a6:	0919      	lsrs	r1, r3, #4
 80072a8:	4b4a      	ldr	r3, [pc, #296]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80072aa:	400b      	ands	r3, r1
 80072ac:	4947      	ldr	r1, [pc, #284]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	610b      	str	r3, [r1, #16]
 80072b2:	e005      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80072b4:	4b45      	ldr	r3, [pc, #276]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	4a44      	ldr	r2, [pc, #272]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80072be:	6113      	str	r3, [r2, #16]
 80072c0:	4b42      	ldr	r3, [pc, #264]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ce:	493f      	ldr	r1, [pc, #252]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	670b      	str	r3, [r1, #112]	; 0x70
 80072d4:	e004      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
 80072d8:	75bb      	strb	r3, [r7, #22]
 80072da:	e001      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8085 	beq.w	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072f2:	2b28      	cmp	r3, #40	; 0x28
 80072f4:	d866      	bhi.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80072f6:	a201      	add	r2, pc, #4	; (adr r2, 80072fc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80072f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fc:	080073d9 	.word	0x080073d9
 8007300:	080073c5 	.word	0x080073c5
 8007304:	080073c5 	.word	0x080073c5
 8007308:	080073c5 	.word	0x080073c5
 800730c:	080073c5 	.word	0x080073c5
 8007310:	080073c5 	.word	0x080073c5
 8007314:	080073c5 	.word	0x080073c5
 8007318:	080073c5 	.word	0x080073c5
 800731c:	080073a1 	.word	0x080073a1
 8007320:	080073c5 	.word	0x080073c5
 8007324:	080073c5 	.word	0x080073c5
 8007328:	080073c5 	.word	0x080073c5
 800732c:	080073c5 	.word	0x080073c5
 8007330:	080073c5 	.word	0x080073c5
 8007334:	080073c5 	.word	0x080073c5
 8007338:	080073c5 	.word	0x080073c5
 800733c:	080073b3 	.word	0x080073b3
 8007340:	080073c5 	.word	0x080073c5
 8007344:	080073c5 	.word	0x080073c5
 8007348:	080073c5 	.word	0x080073c5
 800734c:	080073c5 	.word	0x080073c5
 8007350:	080073c5 	.word	0x080073c5
 8007354:	080073c5 	.word	0x080073c5
 8007358:	080073c5 	.word	0x080073c5
 800735c:	080073d9 	.word	0x080073d9
 8007360:	080073c5 	.word	0x080073c5
 8007364:	080073c5 	.word	0x080073c5
 8007368:	080073c5 	.word	0x080073c5
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073c5 	.word	0x080073c5
 8007374:	080073c5 	.word	0x080073c5
 8007378:	080073c5 	.word	0x080073c5
 800737c:	080073d9 	.word	0x080073d9
 8007380:	080073c5 	.word	0x080073c5
 8007384:	080073c5 	.word	0x080073c5
 8007388:	080073c5 	.word	0x080073c5
 800738c:	080073c5 	.word	0x080073c5
 8007390:	080073c5 	.word	0x080073c5
 8007394:	080073c5 	.word	0x080073c5
 8007398:	080073c5 	.word	0x080073c5
 800739c:	080073d9 	.word	0x080073d9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3304      	adds	r3, #4
 80073a4:	2101      	movs	r1, #1
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fdfa 	bl	8007fa0 <RCCEx_PLL2_Config>
 80073ac:	4603      	mov	r3, r0
 80073ae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80073b0:	e013      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3324      	adds	r3, #36	; 0x24
 80073b6:	2101      	movs	r1, #1
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fea3 	bl	8008104 <RCCEx_PLL3_Config>
 80073be:	4603      	mov	r3, r0
 80073c0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80073c2:	e00a      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	75fb      	strb	r3, [r7, #23]
      break;
 80073c8:	e007      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x842>
 80073ca:	bf00      	nop
 80073cc:	58024400 	.word	0x58024400
 80073d0:	58024800 	.word	0x58024800
 80073d4:	00ffffcf 	.word	0x00ffffcf
      break;
 80073d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d109      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073e0:	4b96      	ldr	r3, [pc, #600]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80073e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ec:	4993      	ldr	r1, [pc, #588]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	654b      	str	r3, [r1, #84]	; 0x54
 80073f2:	e001      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d038      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007408:	2b05      	cmp	r3, #5
 800740a:	d821      	bhi.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800740c:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007412:	bf00      	nop
 8007414:	08007457 	.word	0x08007457
 8007418:	0800742d 	.word	0x0800742d
 800741c:	0800743f 	.word	0x0800743f
 8007420:	08007457 	.word	0x08007457
 8007424:	08007457 	.word	0x08007457
 8007428:	08007457 	.word	0x08007457
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3304      	adds	r3, #4
 8007430:	2101      	movs	r1, #1
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fdb4 	bl	8007fa0 <RCCEx_PLL2_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800743c:	e00c      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3324      	adds	r3, #36	; 0x24
 8007442:	2101      	movs	r1, #1
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fe5d 	bl	8008104 <RCCEx_PLL3_Config>
 800744a:	4603      	mov	r3, r0
 800744c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800744e:	e003      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]
      break;
 8007454:	e000      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007456:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d109      	bne.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800745e:	4b77      	ldr	r3, [pc, #476]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007462:	f023 0207 	bic.w	r2, r3, #7
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800746a:	4974      	ldr	r1, [pc, #464]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800746c:	4313      	orrs	r3, r2
 800746e:	654b      	str	r3, [r1, #84]	; 0x54
 8007470:	e001      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	d03a      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007488:	2b05      	cmp	r3, #5
 800748a:	d821      	bhi.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800748c:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	080074d7 	.word	0x080074d7
 8007498:	080074ad 	.word	0x080074ad
 800749c:	080074bf 	.word	0x080074bf
 80074a0:	080074d7 	.word	0x080074d7
 80074a4:	080074d7 	.word	0x080074d7
 80074a8:	080074d7 	.word	0x080074d7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3304      	adds	r3, #4
 80074b0:	2101      	movs	r1, #1
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fd74 	bl	8007fa0 <RCCEx_PLL2_Config>
 80074b8:	4603      	mov	r3, r0
 80074ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074bc:	e00c      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3324      	adds	r3, #36	; 0x24
 80074c2:	2101      	movs	r1, #1
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fe1d 	bl	8008104 <RCCEx_PLL3_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074ce:	e003      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	75fb      	strb	r3, [r7, #23]
      break;
 80074d4:	e000      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80074d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074de:	4b57      	ldr	r3, [pc, #348]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80074e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e2:	f023 0207 	bic.w	r2, r3, #7
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ec:	4953      	ldr	r1, [pc, #332]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	658b      	str	r3, [r1, #88]	; 0x58
 80074f2:	e001      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d04b      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800750a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800750e:	d02e      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007514:	d828      	bhi.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751a:	d02a      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800751c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007520:	d822      	bhi.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007522:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007526:	d026      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007528:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800752c:	d81c      	bhi.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800752e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007532:	d010      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007538:	d816      	bhi.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d01d      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800753e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007542:	d111      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3304      	adds	r3, #4
 8007548:	2100      	movs	r1, #0
 800754a:	4618      	mov	r0, r3
 800754c:	f000 fd28 	bl	8007fa0 <RCCEx_PLL2_Config>
 8007550:	4603      	mov	r3, r0
 8007552:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007554:	e012      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3324      	adds	r3, #36	; 0x24
 800755a:	2102      	movs	r1, #2
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fdd1 	bl	8008104 <RCCEx_PLL3_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007566:	e009      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	75fb      	strb	r3, [r7, #23]
      break;
 800756c:	e006      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800756e:	bf00      	nop
 8007570:	e004      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007572:	bf00      	nop
 8007574:	e002      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007576:	bf00      	nop
 8007578:	e000      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800757a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10a      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007582:	4b2e      	ldr	r3, [pc, #184]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007586:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007590:	492a      	ldr	r1, [pc, #168]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007592:	4313      	orrs	r3, r2
 8007594:	654b      	str	r3, [r1, #84]	; 0x54
 8007596:	e001      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d04d      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075b2:	d02e      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80075b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075b8:	d828      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80075ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075be:	d02a      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80075c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c4:	d822      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80075c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075ca:	d026      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80075cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075d0:	d81c      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80075d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d6:	d010      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80075d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075dc:	d816      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d01d      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80075e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e6:	d111      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3304      	adds	r3, #4
 80075ec:	2100      	movs	r1, #0
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 fcd6 	bl	8007fa0 <RCCEx_PLL2_Config>
 80075f4:	4603      	mov	r3, r0
 80075f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80075f8:	e012      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	3324      	adds	r3, #36	; 0x24
 80075fe:	2102      	movs	r1, #2
 8007600:	4618      	mov	r0, r3
 8007602:	f000 fd7f 	bl	8008104 <RCCEx_PLL3_Config>
 8007606:	4603      	mov	r3, r0
 8007608:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800760a:	e009      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	75fb      	strb	r3, [r7, #23]
      break;
 8007610:	e006      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007612:	bf00      	nop
 8007614:	e004      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007616:	bf00      	nop
 8007618:	e002      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800761a:	bf00      	nop
 800761c:	e000      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800761e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10c      	bne.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007626:	4b05      	ldr	r3, [pc, #20]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800762a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007634:	4901      	ldr	r1, [pc, #4]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007636:	4313      	orrs	r3, r2
 8007638:	658b      	str	r3, [r1, #88]	; 0x58
 800763a:	e003      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800763c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007640:	7dfb      	ldrb	r3, [r7, #23]
 8007642:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764c:	2b00      	cmp	r3, #0
 800764e:	d04b      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007656:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800765a:	d02e      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800765c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007660:	d828      	bhi.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007666:	d02a      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800766c:	d822      	bhi.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800766e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007672:	d026      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007674:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007678:	d81c      	bhi.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800767a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800767e:	d010      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007684:	d816      	bhi.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d01d      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800768a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800768e:	d111      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3304      	adds	r3, #4
 8007694:	2100      	movs	r1, #0
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fc82 	bl	8007fa0 <RCCEx_PLL2_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076a0:	e012      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3324      	adds	r3, #36	; 0x24
 80076a6:	2102      	movs	r1, #2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 fd2b 	bl	8008104 <RCCEx_PLL3_Config>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076b2:	e009      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	75fb      	strb	r3, [r7, #23]
      break;
 80076b8:	e006      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80076ba:	bf00      	nop
 80076bc:	e004      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80076be:	bf00      	nop
 80076c0:	e002      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80076c2:	bf00      	nop
 80076c4:	e000      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80076c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80076ce:	4b9d      	ldr	r3, [pc, #628]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076dc:	4999      	ldr	r1, [pc, #612]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	658b      	str	r3, [r1, #88]	; 0x58
 80076e2:	e001      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01a      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fe:	d10a      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3324      	adds	r3, #36	; 0x24
 8007704:	2102      	movs	r1, #2
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fcfc 	bl	8008104 <RCCEx_PLL3_Config>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007716:	4b8b      	ldr	r3, [pc, #556]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007724:	4987      	ldr	r1, [pc, #540]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007726:	4313      	orrs	r3, r2
 8007728:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0310 	and.w	r3, r3, #16
 8007732:	2b00      	cmp	r3, #0
 8007734:	d01a      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800773c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007740:	d10a      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3324      	adds	r3, #36	; 0x24
 8007746:	2102      	movs	r1, #2
 8007748:	4618      	mov	r0, r3
 800774a:	f000 fcdb 	bl	8008104 <RCCEx_PLL3_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007758:	4b7a      	ldr	r3, [pc, #488]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800775a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007766:	4977      	ldr	r1, [pc, #476]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007768:	4313      	orrs	r3, r2
 800776a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d034      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800777e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007782:	d01d      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007788:	d817      	bhi.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800778e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007792:	d009      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007794:	e011      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3304      	adds	r3, #4
 800779a:	2100      	movs	r1, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fbff 	bl	8007fa0 <RCCEx_PLL2_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077a6:	e00c      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3324      	adds	r3, #36	; 0x24
 80077ac:	2102      	movs	r1, #2
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fca8 	bl	8008104 <RCCEx_PLL3_Config>
 80077b4:	4603      	mov	r3, r0
 80077b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077b8:	e003      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	75fb      	strb	r3, [r7, #23]
      break;
 80077be:	e000      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80077c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077c8:	4b5e      	ldr	r3, [pc, #376]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077d6:	495b      	ldr	r1, [pc, #364]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	658b      	str	r3, [r1, #88]	; 0x58
 80077dc:	e001      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d033      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077f8:	d01c      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80077fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077fe:	d816      	bhi.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007804:	d003      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800780a:	d007      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800780c:	e00f      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800780e:	4b4d      	ldr	r3, [pc, #308]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	4a4c      	ldr	r2, [pc, #304]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007818:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800781a:	e00c      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3324      	adds	r3, #36	; 0x24
 8007820:	2101      	movs	r1, #1
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fc6e 	bl	8008104 <RCCEx_PLL3_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800782c:	e003      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	75fb      	strb	r3, [r7, #23]
      break;
 8007832:	e000      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10a      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800783c:	4b41      	ldr	r3, [pc, #260]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800783e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007840:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800784a:	493e      	ldr	r1, [pc, #248]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800784c:	4313      	orrs	r3, r2
 800784e:	654b      	str	r3, [r1, #84]	; 0x54
 8007850:	e001      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d029      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800786a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786e:	d007      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007870:	e00f      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007872:	4b34      	ldr	r3, [pc, #208]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007876:	4a33      	ldr	r2, [pc, #204]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800787c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800787e:	e00b      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3304      	adds	r3, #4
 8007884:	2102      	movs	r1, #2
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fb8a 	bl	8007fa0 <RCCEx_PLL2_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007890:	e002      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	75fb      	strb	r3, [r7, #23]
      break;
 8007896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d109      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800789e:	4b29      	ldr	r3, [pc, #164]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078aa:	4926      	ldr	r1, [pc, #152]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078b0:	e001      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3324      	adds	r3, #36	; 0x24
 80078c6:	2102      	movs	r1, #2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fc1b 	bl	8008104 <RCCEx_PLL3_Config>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d033      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ec:	d017      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80078ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078f2:	d811      	bhi.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80078f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f8:	d013      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80078fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078fe:	d80b      	bhi.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007900:	2b00      	cmp	r3, #0
 8007902:	d010      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007908:	d106      	bne.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800790a:	4b0e      	ldr	r3, [pc, #56]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800790c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790e:	4a0d      	ldr	r2, [pc, #52]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007914:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007916:	e007      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	75fb      	strb	r3, [r7, #23]
      break;
 800791c:	e004      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800791e:	bf00      	nop
 8007920:	e002      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007922:	bf00      	nop
 8007924:	e000      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10c      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800792e:	4b05      	ldr	r3, [pc, #20]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007932:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800793a:	4902      	ldr	r1, [pc, #8]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800793c:	4313      	orrs	r3, r2
 800793e:	654b      	str	r3, [r1, #84]	; 0x54
 8007940:	e004      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007942:	bf00      	nop
 8007944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d008      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007958:	4b31      	ldr	r3, [pc, #196]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800795a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800795c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007964:	492e      	ldr	r1, [pc, #184]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007966:	4313      	orrs	r3, r2
 8007968:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d009      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007976:	4b2a      	ldr	r3, [pc, #168]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007984:	4926      	ldr	r1, [pc, #152]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007986:	4313      	orrs	r3, r2
 8007988:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d008      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007996:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079a2:	491f      	ldr	r1, [pc, #124]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00d      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079b4:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	4a19      	ldr	r2, [pc, #100]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079be:	6113      	str	r3, [r2, #16]
 80079c0:	4b17      	ldr	r3, [pc, #92]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079c2:	691a      	ldr	r2, [r3, #16]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80079ca:	4915      	ldr	r1, [pc, #84]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	da08      	bge.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079d8:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e4:	490e      	ldr	r1, [pc, #56]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079f6:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a04:	4906      	ldr	r1, [pc, #24]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007a0a:	7dbb      	ldrb	r3, [r7, #22]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	e000      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	58024400 	.word	0x58024400

08007a24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a28:	f7ff f85a 	bl	8006ae0 <HAL_RCC_GetHCLKFreq>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	091b      	lsrs	r3, r3, #4
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	4904      	ldr	r1, [pc, #16]	; (8007a4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a3a:	5ccb      	ldrb	r3, [r1, r3]
 8007a3c:	f003 031f 	and.w	r3, r3, #31
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	58024400 	.word	0x58024400
 8007a4c:	0800b834 	.word	0x0800b834

08007a50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b089      	sub	sp, #36	; 0x24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a58:	4ba1      	ldr	r3, [pc, #644]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007a62:	4b9f      	ldr	r3, [pc, #636]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	0b1b      	lsrs	r3, r3, #12
 8007a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a6e:	4b9c      	ldr	r3, [pc, #624]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	091b      	lsrs	r3, r3, #4
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a7a:	4b99      	ldr	r3, [pc, #612]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7e:	08db      	lsrs	r3, r3, #3
 8007a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8111 	beq.w	8007cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	f000 8083 	beq.w	8007bac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	f200 80a1 	bhi.w	8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d056      	beq.n	8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007aba:	e099      	b.n	8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007abc:	4b88      	ldr	r3, [pc, #544]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d02d      	beq.n	8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ac8:	4b85      	ldr	r3, [pc, #532]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	08db      	lsrs	r3, r3, #3
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	4a84      	ldr	r2, [pc, #528]	; (8007ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af2:	4b7b      	ldr	r3, [pc, #492]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b22:	e087      	b.n	8007c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007cec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b36:	4b6a      	ldr	r3, [pc, #424]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b66:	e065      	b.n	8007c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7a:	4b59      	ldr	r3, [pc, #356]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007baa:	e043      	b.n	8007c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bbe:	4b48      	ldr	r3, [pc, #288]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bee:	e021      	b.n	8007c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c02:	4b37      	ldr	r3, [pc, #220]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007c34:	4b2a      	ldr	r3, [pc, #168]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	0a5b      	lsrs	r3, r3, #9
 8007c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5a:	ee17 2a90 	vmov	r2, s15
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007c62:	4b1f      	ldr	r3, [pc, #124]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c66:	0c1b      	lsrs	r3, r3, #16
 8007c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c6c:	ee07 3a90 	vmov	s15, r3
 8007c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c88:	ee17 2a90 	vmov	r2, s15
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007c90:	4b13      	ldr	r3, [pc, #76]	; (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	0e1b      	lsrs	r3, r3, #24
 8007c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cb6:	ee17 2a90 	vmov	r2, s15
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	609a      	str	r2, [r3, #8]
}
 8007cd2:	bf00      	nop
 8007cd4:	3724      	adds	r7, #36	; 0x24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	58024400 	.word	0x58024400
 8007ce4:	03d09000 	.word	0x03d09000
 8007ce8:	46000000 	.word	0x46000000
 8007cec:	4c742400 	.word	0x4c742400
 8007cf0:	4a742400 	.word	0x4a742400
 8007cf4:	4af42400 	.word	0x4af42400

08007cf8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b089      	sub	sp, #36	; 0x24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d00:	4ba1      	ldr	r3, [pc, #644]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007d0a:	4b9f      	ldr	r3, [pc, #636]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	0d1b      	lsrs	r3, r3, #20
 8007d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d16:	4b9c      	ldr	r3, [pc, #624]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007d22:	4b99      	ldr	r3, [pc, #612]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d26:	08db      	lsrs	r3, r3, #3
 8007d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	fb02 f303 	mul.w	r3, r2, r3
 8007d32:	ee07 3a90 	vmov	s15, r3
 8007d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 8111 	beq.w	8007f68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	f000 8083 	beq.w	8007e54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	f200 80a1 	bhi.w	8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d056      	beq.n	8007e10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007d62:	e099      	b.n	8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d64:	4b88      	ldr	r3, [pc, #544]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0320 	and.w	r3, r3, #32
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d02d      	beq.n	8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d70:	4b85      	ldr	r3, [pc, #532]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	08db      	lsrs	r3, r3, #3
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	4a84      	ldr	r2, [pc, #528]	; (8007f8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d80:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	ee07 3a90 	vmov	s15, r3
 8007d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d9a:	4b7b      	ldr	r3, [pc, #492]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da2:	ee07 3a90 	vmov	s15, r3
 8007da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007dca:	e087      	b.n	8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	ee07 3a90 	vmov	s15, r3
 8007dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dde:	4b6a      	ldr	r3, [pc, #424]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de6:	ee07 3a90 	vmov	s15, r3
 8007dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007df2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e0e:	e065      	b.n	8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	ee07 3a90 	vmov	s15, r3
 8007e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e22:	4b59      	ldr	r3, [pc, #356]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e2a:	ee07 3a90 	vmov	s15, r3
 8007e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e52:	e043      	b.n	8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	ee07 3a90 	vmov	s15, r3
 8007e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e66:	4b48      	ldr	r3, [pc, #288]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e96:	e021      	b.n	8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eaa:	4b37      	ldr	r3, [pc, #220]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb2:	ee07 3a90 	vmov	s15, r3
 8007eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ebe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eda:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007edc:	4b2a      	ldr	r3, [pc, #168]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	0a5b      	lsrs	r3, r3, #9
 8007ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f02:	ee17 2a90 	vmov	r2, s15
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007f0a:	4b1f      	ldr	r3, [pc, #124]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	0c1b      	lsrs	r3, r3, #16
 8007f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f14:	ee07 3a90 	vmov	s15, r3
 8007f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f24:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f30:	ee17 2a90 	vmov	r2, s15
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007f38:	4b13      	ldr	r3, [pc, #76]	; (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	0e1b      	lsrs	r3, r3, #24
 8007f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f5e:	ee17 2a90 	vmov	r2, s15
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007f66:	e008      	b.n	8007f7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	609a      	str	r2, [r3, #8]
}
 8007f7a:	bf00      	nop
 8007f7c:	3724      	adds	r7, #36	; 0x24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	03d09000 	.word	0x03d09000
 8007f90:	46000000 	.word	0x46000000
 8007f94:	4c742400 	.word	0x4c742400
 8007f98:	4a742400 	.word	0x4a742400
 8007f9c:	4af42400 	.word	0x4af42400

08007fa0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fae:	4b53      	ldr	r3, [pc, #332]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	f003 0303 	and.w	r3, r3, #3
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d101      	bne.n	8007fbe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e099      	b.n	80080f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fbe:	4b4f      	ldr	r3, [pc, #316]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a4e      	ldr	r2, [pc, #312]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8007fc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fca:	f7f9 feb5 	bl	8001d38 <HAL_GetTick>
 8007fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fd0:	e008      	b.n	8007fe4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007fd2:	f7f9 feb1 	bl	8001d38 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d901      	bls.n	8007fe4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e086      	b.n	80080f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fe4:	4b45      	ldr	r3, [pc, #276]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1f0      	bne.n	8007fd2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ff0:	4b42      	ldr	r3, [pc, #264]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	031b      	lsls	r3, r3, #12
 8007ffe:	493f      	ldr	r1, [pc, #252]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008000:	4313      	orrs	r3, r2
 8008002:	628b      	str	r3, [r1, #40]	; 0x28
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	3b01      	subs	r3, #1
 800800a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	3b01      	subs	r3, #1
 8008014:	025b      	lsls	r3, r3, #9
 8008016:	b29b      	uxth	r3, r3
 8008018:	431a      	orrs	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	3b01      	subs	r3, #1
 8008020:	041b      	lsls	r3, r3, #16
 8008022:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008026:	431a      	orrs	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	3b01      	subs	r3, #1
 800802e:	061b      	lsls	r3, r3, #24
 8008030:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008034:	4931      	ldr	r1, [pc, #196]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008036:	4313      	orrs	r3, r2
 8008038:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800803a:	4b30      	ldr	r3, [pc, #192]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	492d      	ldr	r1, [pc, #180]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008048:	4313      	orrs	r3, r2
 800804a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800804c:	4b2b      	ldr	r3, [pc, #172]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 800804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008050:	f023 0220 	bic.w	r2, r3, #32
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	4928      	ldr	r1, [pc, #160]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 800805a:	4313      	orrs	r3, r2
 800805c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800805e:	4b27      	ldr	r3, [pc, #156]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008062:	4a26      	ldr	r2, [pc, #152]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008064:	f023 0310 	bic.w	r3, r3, #16
 8008068:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800806a:	4b24      	ldr	r3, [pc, #144]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 800806c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800806e:	4b24      	ldr	r3, [pc, #144]	; (8008100 <RCCEx_PLL2_Config+0x160>)
 8008070:	4013      	ands	r3, r2
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	69d2      	ldr	r2, [r2, #28]
 8008076:	00d2      	lsls	r2, r2, #3
 8008078:	4920      	ldr	r1, [pc, #128]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 800807a:	4313      	orrs	r3, r2
 800807c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800807e:	4b1f      	ldr	r3, [pc, #124]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008082:	4a1e      	ldr	r2, [pc, #120]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008084:	f043 0310 	orr.w	r3, r3, #16
 8008088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d106      	bne.n	800809e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008090:	4b1a      	ldr	r3, [pc, #104]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	4a19      	ldr	r2, [pc, #100]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008096:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800809a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800809c:	e00f      	b.n	80080be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d106      	bne.n	80080b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080a4:	4b15      	ldr	r3, [pc, #84]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	4a14      	ldr	r2, [pc, #80]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080b0:	e005      	b.n	80080be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080b2:	4b12      	ldr	r3, [pc, #72]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	4a11      	ldr	r2, [pc, #68]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080be:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a0e      	ldr	r2, [pc, #56]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ca:	f7f9 fe35 	bl	8001d38 <HAL_GetTick>
 80080ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080d0:	e008      	b.n	80080e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080d2:	f7f9 fe31 	bl	8001d38 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e006      	b.n	80080f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0f0      	beq.n	80080d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	58024400 	.word	0x58024400
 8008100:	ffff0007 	.word	0xffff0007

08008104 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008112:	4b53      	ldr	r3, [pc, #332]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	2b03      	cmp	r3, #3
 800811c:	d101      	bne.n	8008122 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e099      	b.n	8008256 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008122:	4b4f      	ldr	r3, [pc, #316]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a4e      	ldr	r2, [pc, #312]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800812c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800812e:	f7f9 fe03 	bl	8001d38 <HAL_GetTick>
 8008132:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008134:	e008      	b.n	8008148 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008136:	f7f9 fdff 	bl	8001d38 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	2b02      	cmp	r3, #2
 8008142:	d901      	bls.n	8008148 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e086      	b.n	8008256 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008148:	4b45      	ldr	r3, [pc, #276]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1f0      	bne.n	8008136 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008154:	4b42      	ldr	r3, [pc, #264]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	051b      	lsls	r3, r3, #20
 8008162:	493f      	ldr	r1, [pc, #252]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008164:	4313      	orrs	r3, r2
 8008166:	628b      	str	r3, [r1, #40]	; 0x28
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	3b01      	subs	r3, #1
 800816e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	3b01      	subs	r3, #1
 8008178:	025b      	lsls	r3, r3, #9
 800817a:	b29b      	uxth	r3, r3
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	3b01      	subs	r3, #1
 8008184:	041b      	lsls	r3, r3, #16
 8008186:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	3b01      	subs	r3, #1
 8008192:	061b      	lsls	r3, r3, #24
 8008194:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008198:	4931      	ldr	r1, [pc, #196]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 800819a:	4313      	orrs	r3, r2
 800819c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800819e:	4b30      	ldr	r3, [pc, #192]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	492d      	ldr	r1, [pc, #180]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081b0:	4b2b      	ldr	r3, [pc, #172]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	4928      	ldr	r1, [pc, #160]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081c2:	4b27      	ldr	r3, [pc, #156]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	4a26      	ldr	r2, [pc, #152]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081ce:	4b24      	ldr	r3, [pc, #144]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081d2:	4b24      	ldr	r3, [pc, #144]	; (8008264 <RCCEx_PLL3_Config+0x160>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	69d2      	ldr	r2, [r2, #28]
 80081da:	00d2      	lsls	r2, r2, #3
 80081dc:	4920      	ldr	r1, [pc, #128]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081e2:	4b1f      	ldr	r3, [pc, #124]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	4a1e      	ldr	r2, [pc, #120]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d106      	bne.n	8008202 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081f4:	4b1a      	ldr	r3, [pc, #104]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	4a19      	ldr	r2, [pc, #100]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008200:	e00f      	b.n	8008222 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d106      	bne.n	8008216 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008208:	4b15      	ldr	r3, [pc, #84]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	4a14      	ldr	r2, [pc, #80]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 800820e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008212:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008214:	e005      	b.n	8008222 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008216:	4b12      	ldr	r3, [pc, #72]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821a:	4a11      	ldr	r2, [pc, #68]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 800821c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008220:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008222:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a0e      	ldr	r2, [pc, #56]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800822c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800822e:	f7f9 fd83 	bl	8001d38 <HAL_GetTick>
 8008232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008234:	e008      	b.n	8008248 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008236:	f7f9 fd7f 	bl	8001d38 <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	2b02      	cmp	r3, #2
 8008242:	d901      	bls.n	8008248 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e006      	b.n	8008256 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008248:	4b05      	ldr	r3, [pc, #20]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0f0      	beq.n	8008236 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008254:	7bfb      	ldrb	r3, [r7, #15]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	58024400 	.word	0x58024400
 8008264:	ffff0007 	.word	0xffff0007

08008268 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e0f1      	b.n	800845e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a78      	ldr	r2, [pc, #480]	; (8008468 <HAL_SPI_Init+0x200>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00f      	beq.n	80082aa <HAL_SPI_Init+0x42>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a77      	ldr	r2, [pc, #476]	; (800846c <HAL_SPI_Init+0x204>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d00a      	beq.n	80082aa <HAL_SPI_Init+0x42>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a75      	ldr	r2, [pc, #468]	; (8008470 <HAL_SPI_Init+0x208>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d005      	beq.n	80082aa <HAL_SPI_Init+0x42>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	2b0f      	cmp	r3, #15
 80082a4:	d901      	bls.n	80082aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e0d9      	b.n	800845e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 ff58 	bl	8009160 <SPI_GetPacketSize>
 80082b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a6c      	ldr	r2, [pc, #432]	; (8008468 <HAL_SPI_Init+0x200>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d00c      	beq.n	80082d6 <HAL_SPI_Init+0x6e>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a6a      	ldr	r2, [pc, #424]	; (800846c <HAL_SPI_Init+0x204>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d007      	beq.n	80082d6 <HAL_SPI_Init+0x6e>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a69      	ldr	r2, [pc, #420]	; (8008470 <HAL_SPI_Init+0x208>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d002      	beq.n	80082d6 <HAL_SPI_Init+0x6e>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b08      	cmp	r3, #8
 80082d4:	d811      	bhi.n	80082fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80082da:	4a63      	ldr	r2, [pc, #396]	; (8008468 <HAL_SPI_Init+0x200>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d009      	beq.n	80082f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a61      	ldr	r2, [pc, #388]	; (800846c <HAL_SPI_Init+0x204>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d004      	beq.n	80082f4 <HAL_SPI_Init+0x8c>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a60      	ldr	r2, [pc, #384]	; (8008470 <HAL_SPI_Init+0x208>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d104      	bne.n	80082fe <HAL_SPI_Init+0x96>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b10      	cmp	r3, #16
 80082f8:	d901      	bls.n	80082fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e0af      	b.n	800845e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7f9 f99c 	bl	8001650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0201 	bic.w	r2, r2, #1
 800832e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800833a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008344:	d119      	bne.n	800837a <HAL_SPI_Init+0x112>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800834e:	d103      	bne.n	8008358 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008354:	2b00      	cmp	r3, #0
 8008356:	d008      	beq.n	800836a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10c      	bne.n	800837a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008368:	d107      	bne.n	800837a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008378:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	69da      	ldr	r2, [r3, #28]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	431a      	orrs	r2, r3
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838c:	ea42 0103 	orr.w	r1, r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	431a      	orrs	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	431a      	orrs	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	431a      	orrs	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	431a      	orrs	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	431a      	orrs	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ce:	431a      	orrs	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	431a      	orrs	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083da:	ea42 0103 	orr.w	r1, r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d113      	bne.n	800841a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008404:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008418:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0201 	bic.w	r2, r2, #1
 8008428:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	40013000 	.word	0x40013000
 800846c:	40003800 	.word	0x40003800
 8008470:	40003c00 	.word	0x40003c00

08008474 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08a      	sub	sp, #40	; 0x28
 8008478:	af02      	add	r7, sp, #8
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	603b      	str	r3, [r7, #0]
 8008480:	4613      	mov	r3, r2
 8008482:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3320      	adds	r3, #32
 800848a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008496:	2b01      	cmp	r3, #1
 8008498:	d101      	bne.n	800849e <HAL_SPI_Transmit+0x2a>
 800849a:	2302      	movs	r3, #2
 800849c:	e1d7      	b.n	800884e <HAL_SPI_Transmit+0x3da>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084a6:	f7f9 fc47 	bl	8001d38 <HAL_GetTick>
 80084aa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d007      	beq.n	80084c8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80084b8:	2302      	movs	r3, #2
 80084ba:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80084c4:	7efb      	ldrb	r3, [r7, #27]
 80084c6:	e1c2      	b.n	800884e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <HAL_SPI_Transmit+0x60>
 80084ce:	88fb      	ldrh	r3, [r7, #6]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d107      	bne.n	80084e4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80084e0:	7efb      	ldrb	r3, [r7, #27]
 80084e2:	e1b4      	b.n	800884e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2203      	movs	r2, #3
 80084e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	88fa      	ldrh	r2, [r7, #6]
 80084fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	88fa      	ldrh	r2, [r7, #6]
 8008506:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008534:	d107      	bne.n	8008546 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008544:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	4b96      	ldr	r3, [pc, #600]	; (80087a8 <HAL_SPI_Transmit+0x334>)
 800854e:	4013      	ands	r3, r2
 8008550:	88f9      	ldrh	r1, [r7, #6]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	6812      	ldr	r2, [r2, #0]
 8008556:	430b      	orrs	r3, r1
 8008558:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0201 	orr.w	r2, r2, #1
 8008568:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008572:	d107      	bne.n	8008584 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008582:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	2b0f      	cmp	r3, #15
 800858a:	d947      	bls.n	800861c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800858c:	e03f      	b.n	800860e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b02      	cmp	r3, #2
 800859a:	d114      	bne.n	80085c6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6812      	ldr	r2, [r2, #0]
 80085a6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ac:	1d1a      	adds	r2, r3, #4
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b29a      	uxth	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80085c4:	e023      	b.n	800860e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085c6:	f7f9 fbb7 	bl	8001d38 <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d803      	bhi.n	80085de <HAL_SPI_Transmit+0x16a>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085dc:	d102      	bne.n	80085e4 <HAL_SPI_Transmit+0x170>
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d114      	bne.n	800860e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 fced 	bl	8008fc4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e11f      	b.n	800884e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008614:	b29b      	uxth	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1b9      	bne.n	800858e <HAL_SPI_Transmit+0x11a>
 800861a:	e0f2      	b.n	8008802 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	2b07      	cmp	r3, #7
 8008622:	f240 80e7 	bls.w	80087f4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008626:	e05d      	b.n	80086e4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b02      	cmp	r3, #2
 8008634:	d132      	bne.n	800869c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800863c:	b29b      	uxth	r3, r3
 800863e:	2b01      	cmp	r3, #1
 8008640:	d918      	bls.n	8008674 <HAL_SPI_Transmit+0x200>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008646:	2b00      	cmp	r3, #0
 8008648:	d014      	beq.n	8008674 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6812      	ldr	r2, [r2, #0]
 8008654:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800865a:	1d1a      	adds	r2, r3, #4
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008666:	b29b      	uxth	r3, r3
 8008668:	3b02      	subs	r3, #2
 800866a:	b29a      	uxth	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008672:	e037      	b.n	80086e4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008678:	881a      	ldrh	r2, [r3, #0]
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008682:	1c9a      	adds	r2, r3, #2
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800868e:	b29b      	uxth	r3, r3
 8008690:	3b01      	subs	r3, #1
 8008692:	b29a      	uxth	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800869a:	e023      	b.n	80086e4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800869c:	f7f9 fb4c 	bl	8001d38 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d803      	bhi.n	80086b4 <HAL_SPI_Transmit+0x240>
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b2:	d102      	bne.n	80086ba <HAL_SPI_Transmit+0x246>
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d114      	bne.n	80086e4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 fc82 	bl	8008fc4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e0b4      	b.n	800884e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d19b      	bne.n	8008628 <HAL_SPI_Transmit+0x1b4>
 80086f0:	e087      	b.n	8008802 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d155      	bne.n	80087ac <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008706:	b29b      	uxth	r3, r3
 8008708:	2b03      	cmp	r3, #3
 800870a:	d918      	bls.n	800873e <HAL_SPI_Transmit+0x2ca>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008710:	2b40      	cmp	r3, #64	; 0x40
 8008712:	d914      	bls.n	800873e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6812      	ldr	r2, [r2, #0]
 800871e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008724:	1d1a      	adds	r2, r3, #4
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008730:	b29b      	uxth	r3, r3
 8008732:	3b04      	subs	r3, #4
 8008734:	b29a      	uxth	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800873c:	e05a      	b.n	80087f4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008744:	b29b      	uxth	r3, r3
 8008746:	2b01      	cmp	r3, #1
 8008748:	d917      	bls.n	800877a <HAL_SPI_Transmit+0x306>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d013      	beq.n	800877a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008756:	881a      	ldrh	r2, [r3, #0]
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008760:	1c9a      	adds	r2, r3, #2
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800876c:	b29b      	uxth	r3, r3
 800876e:	3b02      	subs	r3, #2
 8008770:	b29a      	uxth	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008778:	e03c      	b.n	80087f4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3320      	adds	r3, #32
 8008784:	7812      	ldrb	r2, [r2, #0]
 8008786:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008798:	b29b      	uxth	r3, r3
 800879a:	3b01      	subs	r3, #1
 800879c:	b29a      	uxth	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80087a4:	e026      	b.n	80087f4 <HAL_SPI_Transmit+0x380>
 80087a6:	bf00      	nop
 80087a8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087ac:	f7f9 fac4 	bl	8001d38 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d803      	bhi.n	80087c4 <HAL_SPI_Transmit+0x350>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c2:	d102      	bne.n	80087ca <HAL_SPI_Transmit+0x356>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d114      	bne.n	80087f4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f000 fbfa 	bl	8008fc4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e02c      	b.n	800884e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f47f af78 	bne.w	80086f2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2200      	movs	r2, #0
 800880a:	2108      	movs	r1, #8
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 fc79 	bl	8009104 <SPI_WaitOnFlagUntilTimeout>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d007      	beq.n	8008828 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800881e:	f043 0220 	orr.w	r2, r3, #32
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 fbcb 	bl	8008fc4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e000      	b.n	800884e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800884c:	7efb      	ldrb	r3, [r7, #27]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3720      	adds	r7, #32
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop

08008858 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	4613      	mov	r3, r2
 8008864:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_SPI_Transmit_DMA+0x20>
 8008874:	2302      	movs	r3, #2
 8008876:	e12c      	b.n	8008ad2 <HAL_SPI_Transmit_DMA+0x27a>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b01      	cmp	r3, #1
 800888a:	d007      	beq.n	800889c <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800888c:	2302      	movs	r3, #2
 800888e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	e11a      	b.n	8008ad2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d002      	beq.n	80088a8 <HAL_SPI_Transmit_DMA+0x50>
 80088a2:	88fb      	ldrh	r3, [r7, #6]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d107      	bne.n	80088b8 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	e10c      	b.n	8008ad2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2203      	movs	r2, #3
 80088bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	88fa      	ldrh	r2, [r7, #6]
 80088d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	88fa      	ldrh	r2, [r7, #6]
 80088da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008908:	d107      	bne.n	800891a <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008918:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	2b0f      	cmp	r3, #15
 8008920:	d905      	bls.n	800892e <HAL_SPI_Transmit_DMA+0xd6>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800892c:	d10f      	bne.n	800894e <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008932:	2b07      	cmp	r3, #7
 8008934:	d913      	bls.n	800895e <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008940:	d00d      	beq.n	800895e <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008946:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800894c:	d007      	beq.n	800895e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	e0b9      	b.n	8008ad2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	2b07      	cmp	r3, #7
 8008964:	d820      	bhi.n	80089a8 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008970:	d109      	bne.n	8008986 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008978:	b29b      	uxth	r3, r3
 800897a:	3301      	adds	r3, #1
 800897c:	105b      	asrs	r3, r3, #1
 800897e:	b29a      	uxth	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008990:	d11e      	bne.n	80089d0 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008998:	b29b      	uxth	r3, r3
 800899a:	3303      	adds	r3, #3
 800899c:	109b      	asrs	r3, r3, #2
 800899e:	b29a      	uxth	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80089a6:	e013      	b.n	80089d0 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	2b0f      	cmp	r3, #15
 80089ae:	d80f      	bhi.n	80089d0 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089ba:	d109      	bne.n	80089d0 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	3301      	adds	r3, #1
 80089c6:	105b      	asrs	r3, r3, #1
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089d4:	4a41      	ldr	r2, [pc, #260]	; (8008adc <HAL_SPI_Transmit_DMA+0x284>)
 80089d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089dc:	4a40      	ldr	r2, [pc, #256]	; (8008ae0 <HAL_SPI_Transmit_DMA+0x288>)
 80089de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089e4:	4a3f      	ldr	r2, [pc, #252]	; (8008ae4 <HAL_SPI_Transmit_DMA+0x28c>)
 80089e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ec:	2200      	movs	r2, #0
 80089ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689a      	ldr	r2, [r3, #8]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089fe:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a08:	4619      	mov	r1, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3320      	adds	r3, #32
 8008a10:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a18:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008a1a:	f7f9 fe49 	bl	80026b0 <HAL_DMA_Start_IT>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d013      	beq.n	8008a4c <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a2a:	f043 0210 	orr.w	r2, r3, #16
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	e042      	b.n	8008ad2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a56:	d108      	bne.n	8008a6a <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6859      	ldr	r1, [r3, #4]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	4b21      	ldr	r3, [pc, #132]	; (8008ae8 <HAL_SPI_Transmit_DMA+0x290>)
 8008a64:	400b      	ands	r3, r1
 8008a66:	6053      	str	r3, [r2, #4]
 8008a68:	e009      	b.n	8008a7e <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	4b1d      	ldr	r3, [pc, #116]	; (8008ae8 <HAL_SPI_Transmit_DMA+0x290>)
 8008a72:	4013      	ands	r3, r2
 8008a74:	88f9      	ldrh	r1, [r7, #6]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	6812      	ldr	r2, [r2, #0]
 8008a7a:	430b      	orrs	r3, r1
 8008a7c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a8c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8008a9c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f042 0201 	orr.w	r2, r2, #1
 8008aac:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ab6:	d107      	bne.n	8008ac8 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ac6:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	08008f2f 	.word	0x08008f2f
 8008ae0:	08008ee9 	.word	0x08008ee9
 8008ae4:	08008f4b 	.word	0x08008f4b
 8008ae8:	ffff0000 	.word	0xffff0000

08008aec <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08a      	sub	sp, #40	; 0x28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008b04:	6a3a      	ldr	r2, [r7, #32]
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b1e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3330      	adds	r3, #48	; 0x30
 8008b26:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d113      	bne.n	8008b5a <HAL_SPI_IRQHandler+0x6e>
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	f003 0320 	and.w	r3, r3, #32
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10e      	bne.n	8008b5a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d009      	beq.n	8008b5a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4798      	blx	r3
    handled = 1UL;
 8008b56:	2301      	movs	r3, #1
 8008b58:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10f      	bne.n	8008b84 <HAL_SPI_IRQHandler+0x98>
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d105      	bne.n	8008b84 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	4798      	blx	r3
    handled = 1UL;
 8008b80:	2301      	movs	r3, #1
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	f003 0320 	and.w	r3, r3, #32
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10f      	bne.n	8008bae <HAL_SPI_IRQHandler+0xc2>
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00a      	beq.n	8008bae <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d105      	bne.n	8008bae <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	4798      	blx	r3
    handled = 1UL;
 8008baa:	2301      	movs	r3, #1
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f040 815a 	bne.w	8008e6a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	f003 0308 	and.w	r3, r3, #8
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 808b 	beq.w	8008cd8 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	699a      	ldr	r2, [r3, #24]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f042 0208 	orr.w	r2, r2, #8
 8008bd0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	699a      	ldr	r2, [r3, #24]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f042 0210 	orr.w	r2, r2, #16
 8008be0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	699a      	ldr	r2, [r3, #24]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bf0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	691a      	ldr	r2, [r3, #16]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0208 	bic.w	r2, r2, #8
 8008c00:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d13d      	bne.n	8008c8c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008c10:	e036      	b.n	8008c80 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	2b0f      	cmp	r3, #15
 8008c18:	d90b      	bls.n	8008c32 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008c24:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c2a:	1d1a      	adds	r2, r3, #4
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	665a      	str	r2, [r3, #100]	; 0x64
 8008c30:	e01d      	b.n	8008c6e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	2b07      	cmp	r3, #7
 8008c38:	d90b      	bls.n	8008c52 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	8812      	ldrh	r2, [r2, #0]
 8008c42:	b292      	uxth	r2, r2
 8008c44:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c4a:	1c9a      	adds	r2, r3, #2
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	665a      	str	r2, [r3, #100]	; 0x64
 8008c50:	e00d      	b.n	8008c6e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c5e:	7812      	ldrb	r2, [r2, #0]
 8008c60:	b2d2      	uxtb	r2, r2
 8008c62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c68:	1c5a      	adds	r2, r3, #1
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1c2      	bne.n	8008c12 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f999 	bl	8008fc4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d003      	beq.n	8008cac <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f915 	bl	8008ed4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008caa:	e0e3      	b.n	8008e74 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008cac:	7cfb      	ldrb	r3, [r7, #19]
 8008cae:	2b05      	cmp	r3, #5
 8008cb0:	d103      	bne.n	8008cba <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f8fa 	bl	8008eac <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008cb8:	e0d9      	b.n	8008e6e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008cba:	7cfb      	ldrb	r3, [r7, #19]
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d103      	bne.n	8008cc8 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f8e9 	bl	8008e98 <HAL_SPI_RxCpltCallback>
    return;
 8008cc6:	e0d2      	b.n	8008e6e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008cc8:	7cfb      	ldrb	r3, [r7, #19]
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	f040 80cf 	bne.w	8008e6e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f8d7 	bl	8008e84 <HAL_SPI_TxCpltCallback>
    return;
 8008cd6:	e0ca      	b.n	8008e6e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00d      	beq.n	8008cfe <HAL_SPI_IRQHandler+0x212>
 8008ce2:	6a3b      	ldr	r3, [r7, #32]
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d008      	beq.n	8008cfe <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699a      	ldr	r2, [r3, #24]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cfa:	619a      	str	r2, [r3, #24]

    return;
 8008cfc:	e0ba      	b.n	8008e74 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 80b5 	beq.w	8008e74 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00f      	beq.n	8008d34 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d1a:	f043 0204 	orr.w	r2, r3, #4
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	699a      	ldr	r2, [r3, #24]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d32:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00f      	beq.n	8008d5e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d44:	f043 0201 	orr.w	r2, r3, #1
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	699a      	ldr	r2, [r3, #24]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d5c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00f      	beq.n	8008d88 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d6e:	f043 0208 	orr.w	r2, r3, #8
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	699a      	ldr	r2, [r3, #24]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d86:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	f003 0320 	and.w	r3, r3, #32
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00f      	beq.n	8008db2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	699a      	ldr	r2, [r3, #24]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f042 0220 	orr.w	r2, r2, #32
 8008db0:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d05a      	beq.n	8008e72 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f022 0201 	bic.w	r2, r2, #1
 8008dca:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6919      	ldr	r1, [r3, #16]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	4b29      	ldr	r3, [pc, #164]	; (8008e7c <HAL_SPI_IRQHandler+0x390>)
 8008dd8:	400b      	ands	r3, r1
 8008dda:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008de2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008de6:	d138      	bne.n	8008e5a <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689a      	ldr	r2, [r3, #8]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008df6:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d013      	beq.n	8008e28 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e04:	4a1e      	ldr	r2, [pc, #120]	; (8008e80 <HAL_SPI_IRQHandler+0x394>)
 8008e06:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fa f9d7 	bl	80031c0 <HAL_DMA_Abort_IT>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d007      	beq.n	8008e28 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d020      	beq.n	8008e72 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e34:	4a12      	ldr	r2, [pc, #72]	; (8008e80 <HAL_SPI_IRQHandler+0x394>)
 8008e36:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fa f9bf 	bl	80031c0 <HAL_DMA_Abort_IT>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d014      	beq.n	8008e72 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008e58:	e00b      	b.n	8008e72 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f836 	bl	8008ed4 <HAL_SPI_ErrorCallback>
    return;
 8008e68:	e003      	b.n	8008e72 <HAL_SPI_IRQHandler+0x386>
    return;
 8008e6a:	bf00      	nop
 8008e6c:	e002      	b.n	8008e74 <HAL_SPI_IRQHandler+0x388>
    return;
 8008e6e:	bf00      	nop
 8008e70:	e000      	b.n	8008e74 <HAL_SPI_IRQHandler+0x388>
    return;
 8008e72:	bf00      	nop
  }
}
 8008e74:	3728      	adds	r7, #40	; 0x28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	fffffc94 	.word	0xfffffc94
 8008e80:	08008f91 	.word	0x08008f91

08008e84 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b07      	cmp	r3, #7
 8008f00:	d011      	beq.n	8008f26 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f0c:	d103      	bne.n	8008f16 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f7ff ffb8 	bl	8008e84 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008f14:	e007      	b.n	8008f26 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	691a      	ldr	r2, [r3, #16]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f042 0208 	orr.w	r2, r2, #8
 8008f24:	611a      	str	r2, [r3, #16]
}
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7ff ffbf 	bl	8008ec0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f56:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7fb faa1 	bl	80044a0 <HAL_DMA_GetError>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d011      	beq.n	8008f88 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f82d 	bl	8008fc4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f70:	f043 0210 	orr.w	r2, r3, #16
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f7ff ffa6 	bl	8008ed4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008f88:	bf00      	nop
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f7ff ff8c 	bl	8008ed4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008fbc:	bf00      	nop
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 0208 	orr.w	r2, r2, #8
 8008fe2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	699a      	ldr	r2, [r3, #24]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f042 0210 	orr.w	r2, r2, #16
 8008ff2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f022 0201 	bic.w	r2, r2, #1
 8009002:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6919      	ldr	r1, [r3, #16]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	4b3c      	ldr	r3, [pc, #240]	; (8009100 <SPI_CloseTransfer+0x13c>)
 8009010:	400b      	ands	r3, r1
 8009012:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689a      	ldr	r2, [r3, #8]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009022:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b04      	cmp	r3, #4
 800902e:	d014      	beq.n	800905a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00f      	beq.n	800905a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009040:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	699a      	ldr	r2, [r3, #24]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f042 0220 	orr.w	r2, r2, #32
 8009058:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b03      	cmp	r3, #3
 8009064:	d014      	beq.n	8009090 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00f      	beq.n	8009090 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009076:	f043 0204 	orr.w	r2, r3, #4
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	699a      	ldr	r2, [r3, #24]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800908e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00f      	beq.n	80090ba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090a0:	f043 0201 	orr.w	r2, r3, #1
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	699a      	ldr	r2, [r3, #24]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00f      	beq.n	80090e4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ca:	f043 0208 	orr.w	r2, r3, #8
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	699a      	ldr	r2, [r3, #24]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80090f4:	bf00      	nop
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	fffffc90 	.word	0xfffffc90

08009104 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	603b      	str	r3, [r7, #0]
 8009110:	4613      	mov	r3, r2
 8009112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009114:	e010      	b.n	8009138 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009116:	f7f8 fe0f 	bl	8001d38 <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	69ba      	ldr	r2, [r7, #24]
 8009122:	429a      	cmp	r2, r3
 8009124:	d803      	bhi.n	800912e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912c:	d102      	bne.n	8009134 <SPI_WaitOnFlagUntilTimeout+0x30>
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e00f      	b.n	8009158 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	695a      	ldr	r2, [r3, #20]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	4013      	ands	r3, r2
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	429a      	cmp	r2, r3
 8009146:	bf0c      	ite	eq
 8009148:	2301      	moveq	r3, #1
 800914a:	2300      	movne	r3, #0
 800914c:	b2db      	uxtb	r3, r3
 800914e:	461a      	mov	r2, r3
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	429a      	cmp	r2, r3
 8009154:	d0df      	beq.n	8009116 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800916c:	095b      	lsrs	r3, r3, #5
 800916e:	3301      	adds	r3, #1
 8009170:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	3301      	adds	r3, #1
 8009178:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	3307      	adds	r3, #7
 800917e:	08db      	lsrs	r3, r3, #3
 8009180:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	fb02 f303 	mul.w	r3, r2, r3
}
 800918a:	4618      	mov	r0, r3
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e042      	b.n	800922e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d106      	bne.n	80091c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7f8 fb1e 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2224      	movs	r2, #36	; 0x24
 80091c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f022 0201 	bic.w	r2, r2, #1
 80091d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fc55 	bl	8009a88 <UART_SetConfig>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d101      	bne.n	80091e8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e022      	b.n	800922e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f001 f9b1 	bl	800a558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009204:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689a      	ldr	r2, [r3, #8]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009214:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f042 0201 	orr.w	r2, r2, #1
 8009224:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 fa38 	bl	800a69c <UART_CheckIdleState>
 800922c:	4603      	mov	r3, r0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08a      	sub	sp, #40	; 0x28
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	4613      	mov	r3, r2
 8009244:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924c:	2b20      	cmp	r3, #32
 800924e:	d142      	bne.n	80092d6 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d002      	beq.n	800925c <HAL_UART_Receive_DMA+0x24>
 8009256:	88fb      	ldrh	r3, [r7, #6]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e03b      	b.n	80092d8 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <HAL_UART_Receive_DMA+0x36>
 800926a:	2302      	movs	r3, #2
 800926c:	e034      	b.n	80092d8 <HAL_UART_Receive_DMA+0xa0>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a17      	ldr	r2, [pc, #92]	; (80092e0 <HAL_UART_Receive_DMA+0xa8>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d01f      	beq.n	80092c6 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d018      	beq.n	80092c6 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	613b      	str	r3, [r7, #16]
   return(result);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	623b      	str	r3, [r7, #32]
 80092b4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	69f9      	ldr	r1, [r7, #28]
 80092b8:	6a3a      	ldr	r2, [r7, #32]
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	61bb      	str	r3, [r7, #24]
   return(result);
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e6      	bne.n	8009294 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80092c6:	88fb      	ldrh	r3, [r7, #6]
 80092c8:	461a      	mov	r2, r3
 80092ca:	68b9      	ldr	r1, [r7, #8]
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f001 faf9 	bl	800a8c4 <UART_Start_Receive_DMA>
 80092d2:	4603      	mov	r3, r0
 80092d4:	e000      	b.n	80092d8 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80092d6:	2302      	movs	r3, #2
  }
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3728      	adds	r7, #40	; 0x28
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	58000c00 	.word	0x58000c00

080092e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b0ba      	sub	sp, #232	; 0xe8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800930a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800930e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009312:	4013      	ands	r3, r2
 8009314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d11b      	bne.n	8009358 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b00      	cmp	r3, #0
 800932a:	d015      	beq.n	8009358 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800932c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	2b00      	cmp	r3, #0
 8009336:	d105      	bne.n	8009344 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800933c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d009      	beq.n	8009358 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 835a 	beq.w	8009a02 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
      }
      return;
 8009356:	e354      	b.n	8009a02 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 811f 	beq.w	80095a0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009362:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009366:	4b8b      	ldr	r3, [pc, #556]	; (8009594 <HAL_UART_IRQHandler+0x2b0>)
 8009368:	4013      	ands	r3, r2
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800936e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009372:	4b89      	ldr	r3, [pc, #548]	; (8009598 <HAL_UART_IRQHandler+0x2b4>)
 8009374:	4013      	ands	r3, r2
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 8112 	beq.w	80095a0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800937c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b00      	cmp	r3, #0
 8009386:	d011      	beq.n	80093ac <HAL_UART_IRQHandler+0xc8>
 8009388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800938c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00b      	beq.n	80093ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2201      	movs	r2, #1
 800939a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093a2:	f043 0201 	orr.w	r2, r3, #1
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d011      	beq.n	80093dc <HAL_UART_IRQHandler+0xf8>
 80093b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00b      	beq.n	80093dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2202      	movs	r2, #2
 80093ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093d2:	f043 0204 	orr.w	r2, r3, #4
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d011      	beq.n	800940c <HAL_UART_IRQHandler+0x128>
 80093e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2204      	movs	r2, #4
 80093fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009402:	f043 0202 	orr.w	r2, r3, #2
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800940c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009410:	f003 0308 	and.w	r3, r3, #8
 8009414:	2b00      	cmp	r3, #0
 8009416:	d017      	beq.n	8009448 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b00      	cmp	r3, #0
 8009422:	d105      	bne.n	8009430 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009424:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009428:	4b5a      	ldr	r3, [pc, #360]	; (8009594 <HAL_UART_IRQHandler+0x2b0>)
 800942a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2208      	movs	r2, #8
 8009436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800943e:	f043 0208 	orr.w	r2, r3, #8
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800944c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009450:	2b00      	cmp	r3, #0
 8009452:	d012      	beq.n	800947a <HAL_UART_IRQHandler+0x196>
 8009454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00c      	beq.n	800947a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009470:	f043 0220 	orr.w	r2, r3, #32
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 82c0 	beq.w	8009a06 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b00      	cmp	r3, #0
 8009490:	d013      	beq.n	80094ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b00      	cmp	r3, #0
 800949c:	d105      	bne.n	80094aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800949e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ce:	2b40      	cmp	r3, #64	; 0x40
 80094d0:	d005      	beq.n	80094de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d04f      	beq.n	800957e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f001 fada 	bl	800aa98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ee:	2b40      	cmp	r3, #64	; 0x40
 80094f0:	d141      	bne.n	8009576 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3308      	adds	r3, #8
 80094f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800950c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3308      	adds	r3, #8
 800951a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800951e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800952a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1d9      	bne.n	80094f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009542:	2b00      	cmp	r3, #0
 8009544:	d013      	beq.n	800956e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800954a:	4a14      	ldr	r2, [pc, #80]	; (800959c <HAL_UART_IRQHandler+0x2b8>)
 800954c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009552:	4618      	mov	r0, r3
 8009554:	f7f9 fe34 	bl	80031c0 <HAL_DMA_Abort_IT>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d017      	beq.n	800958e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009568:	4610      	mov	r0, r2
 800956a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800956c:	e00f      	b.n	800958e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fa74 	bl	8009a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009574:	e00b      	b.n	800958e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fa70 	bl	8009a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800957c:	e007      	b.n	800958e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fa6c 	bl	8009a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800958c:	e23b      	b.n	8009a06 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800958e:	bf00      	nop
    return;
 8009590:	e239      	b.n	8009a06 <HAL_UART_IRQHandler+0x722>
 8009592:	bf00      	nop
 8009594:	10000001 	.word	0x10000001
 8009598:	04000120 	.word	0x04000120
 800959c:	0800ad3f 	.word	0x0800ad3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	f040 81ce 	bne.w	8009946 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ae:	f003 0310 	and.w	r3, r3, #16
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 81c7 	beq.w	8009946 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095bc:	f003 0310 	and.w	r3, r3, #16
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 81c0 	beq.w	8009946 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2210      	movs	r2, #16
 80095cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d8:	2b40      	cmp	r3, #64	; 0x40
 80095da:	f040 813b 	bne.w	8009854 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a8b      	ldr	r2, [pc, #556]	; (8009814 <HAL_UART_IRQHandler+0x530>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d059      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a89      	ldr	r2, [pc, #548]	; (8009818 <HAL_UART_IRQHandler+0x534>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d053      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a87      	ldr	r2, [pc, #540]	; (800981c <HAL_UART_IRQHandler+0x538>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d04d      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a85      	ldr	r2, [pc, #532]	; (8009820 <HAL_UART_IRQHandler+0x53c>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d047      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a83      	ldr	r2, [pc, #524]	; (8009824 <HAL_UART_IRQHandler+0x540>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d041      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a81      	ldr	r2, [pc, #516]	; (8009828 <HAL_UART_IRQHandler+0x544>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d03b      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a7f      	ldr	r2, [pc, #508]	; (800982c <HAL_UART_IRQHandler+0x548>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d035      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a7d      	ldr	r2, [pc, #500]	; (8009830 <HAL_UART_IRQHandler+0x54c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d02f      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a7b      	ldr	r2, [pc, #492]	; (8009834 <HAL_UART_IRQHandler+0x550>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d029      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a79      	ldr	r2, [pc, #484]	; (8009838 <HAL_UART_IRQHandler+0x554>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d023      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a77      	ldr	r2, [pc, #476]	; (800983c <HAL_UART_IRQHandler+0x558>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d01d      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a75      	ldr	r2, [pc, #468]	; (8009840 <HAL_UART_IRQHandler+0x55c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d017      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a73      	ldr	r2, [pc, #460]	; (8009844 <HAL_UART_IRQHandler+0x560>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d011      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a71      	ldr	r2, [pc, #452]	; (8009848 <HAL_UART_IRQHandler+0x564>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d00b      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a6f      	ldr	r2, [pc, #444]	; (800984c <HAL_UART_IRQHandler+0x568>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d005      	beq.n	800969e <HAL_UART_IRQHandler+0x3ba>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a6d      	ldr	r2, [pc, #436]	; (8009850 <HAL_UART_IRQHandler+0x56c>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d105      	bne.n	80096aa <HAL_UART_IRQHandler+0x3c6>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	e004      	b.n	80096b4 <HAL_UART_IRQHandler+0x3d0>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 81a4 	beq.w	8009a0a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096cc:	429a      	cmp	r2, r3
 80096ce:	f080 819c 	bcs.w	8009a0a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e6:	f000 8086 	beq.w	80097f6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096f6:	e853 3f00 	ldrex	r3, [r3]
 80096fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80096fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009706:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009714:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009718:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009720:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800972c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1da      	bne.n	80096ea <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	3308      	adds	r3, #8
 800973a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800973e:	e853 3f00 	ldrex	r3, [r3]
 8009742:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009746:	f023 0301 	bic.w	r3, r3, #1
 800974a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3308      	adds	r3, #8
 8009754:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009758:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800975c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009760:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800976a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e1      	bne.n	8009734 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3308      	adds	r3, #8
 8009776:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3308      	adds	r3, #8
 8009790:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009794:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009796:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009798:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800979a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800979c:	e841 2300 	strex	r3, r2, [r1]
 80097a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1e3      	bne.n	8009770 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2220      	movs	r2, #32
 80097ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097be:	e853 3f00 	ldrex	r3, [r3]
 80097c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097c6:	f023 0310 	bic.w	r3, r3, #16
 80097ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80097da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80097e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e4      	bne.n	80097b6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7f9 f9c7 	bl	8002b84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009802:	b29b      	uxth	r3, r3
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	b29b      	uxth	r3, r3
 8009808:	4619      	mov	r1, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f930 	bl	8009a70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009810:	e0fb      	b.n	8009a0a <HAL_UART_IRQHandler+0x726>
 8009812:	bf00      	nop
 8009814:	40020010 	.word	0x40020010
 8009818:	40020028 	.word	0x40020028
 800981c:	40020040 	.word	0x40020040
 8009820:	40020058 	.word	0x40020058
 8009824:	40020070 	.word	0x40020070
 8009828:	40020088 	.word	0x40020088
 800982c:	400200a0 	.word	0x400200a0
 8009830:	400200b8 	.word	0x400200b8
 8009834:	40020410 	.word	0x40020410
 8009838:	40020428 	.word	0x40020428
 800983c:	40020440 	.word	0x40020440
 8009840:	40020458 	.word	0x40020458
 8009844:	40020470 	.word	0x40020470
 8009848:	40020488 	.word	0x40020488
 800984c:	400204a0 	.word	0x400204a0
 8009850:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009860:	b29b      	uxth	r3, r3
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800986e:	b29b      	uxth	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 80cc 	beq.w	8009a0e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009876:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 80c7 	beq.w	8009a0e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	e853 3f00 	ldrex	r3, [r3]
 800988c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800988e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009894:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	461a      	mov	r2, r3
 800989e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80098a2:	647b      	str	r3, [r7, #68]	; 0x44
 80098a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098aa:	e841 2300 	strex	r3, r2, [r1]
 80098ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e4      	bne.n	8009880 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3308      	adds	r3, #8
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	623b      	str	r3, [r7, #32]
   return(result);
 80098c6:	6a3a      	ldr	r2, [r7, #32]
 80098c8:	4b54      	ldr	r3, [pc, #336]	; (8009a1c <HAL_UART_IRQHandler+0x738>)
 80098ca:	4013      	ands	r3, r2
 80098cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3308      	adds	r3, #8
 80098d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80098da:	633a      	str	r2, [r7, #48]	; 0x30
 80098dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098e2:	e841 2300 	strex	r3, r2, [r1]
 80098e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1e3      	bne.n	80098b6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2220      	movs	r2, #32
 80098f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f023 0310 	bic.w	r3, r3, #16
 8009916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009924:	61fb      	str	r3, [r7, #28]
 8009926:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009928:	69b9      	ldr	r1, [r7, #24]
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	e841 2300 	strex	r3, r2, [r1]
 8009930:	617b      	str	r3, [r7, #20]
   return(result);
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e4      	bne.n	8009902 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f896 	bl	8009a70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009944:	e063      	b.n	8009a0e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800994a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00e      	beq.n	8009970 <HAL_UART_IRQHandler+0x68c>
 8009952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d008      	beq.n	8009970 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009966:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f001 fa29 	bl	800adc0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800996e:	e051      	b.n	8009a14 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009978:	2b00      	cmp	r3, #0
 800997a:	d014      	beq.n	80099a6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800997c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009984:	2b00      	cmp	r3, #0
 8009986:	d105      	bne.n	8009994 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800998c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d008      	beq.n	80099a6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009998:	2b00      	cmp	r3, #0
 800999a:	d03a      	beq.n	8009a12 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	4798      	blx	r3
    }
    return;
 80099a4:	e035      	b.n	8009a12 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80099a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d009      	beq.n	80099c6 <HAL_UART_IRQHandler+0x6e2>
 80099b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f001 f9d3 	bl	800ad6a <UART_EndTransmit_IT>
    return;
 80099c4:	e026      	b.n	8009a14 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80099c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d009      	beq.n	80099e6 <HAL_UART_IRQHandler+0x702>
 80099d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 fa02 	bl	800ade8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099e4:	e016      	b.n	8009a14 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80099e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d010      	beq.n	8009a14 <HAL_UART_IRQHandler+0x730>
 80099f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	da0c      	bge.n	8009a14 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f001 f9ea 	bl	800add4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a00:	e008      	b.n	8009a14 <HAL_UART_IRQHandler+0x730>
      return;
 8009a02:	bf00      	nop
 8009a04:	e006      	b.n	8009a14 <HAL_UART_IRQHandler+0x730>
    return;
 8009a06:	bf00      	nop
 8009a08:	e004      	b.n	8009a14 <HAL_UART_IRQHandler+0x730>
      return;
 8009a0a:	bf00      	nop
 8009a0c:	e002      	b.n	8009a14 <HAL_UART_IRQHandler+0x730>
      return;
 8009a0e:	bf00      	nop
 8009a10:	e000      	b.n	8009a14 <HAL_UART_IRQHandler+0x730>
    return;
 8009a12:	bf00      	nop
  }
}
 8009a14:	37e8      	adds	r7, #232	; 0xe8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	effffffe 	.word	0xeffffffe

08009a20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a8c:	b092      	sub	sp, #72	; 0x48
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	689a      	ldr	r2, [r3, #8]
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	431a      	orrs	r2, r3
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	69db      	ldr	r3, [r3, #28]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	4bbe      	ldr	r3, [pc, #760]	; (8009db0 <UART_SetConfig+0x328>)
 8009ab8:	4013      	ands	r3, r2
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	6812      	ldr	r2, [r2, #0]
 8009abe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	68da      	ldr	r2, [r3, #12]
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4ab3      	ldr	r2, [pc, #716]	; (8009db4 <UART_SetConfig+0x32c>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d004      	beq.n	8009af4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009af0:	4313      	orrs	r3, r2
 8009af2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	689a      	ldr	r2, [r3, #8]
 8009afa:	4baf      	ldr	r3, [pc, #700]	; (8009db8 <UART_SetConfig+0x330>)
 8009afc:	4013      	ands	r3, r2
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	6812      	ldr	r2, [r2, #0]
 8009b02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b04:	430b      	orrs	r3, r1
 8009b06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0e:	f023 010f 	bic.w	r1, r3, #15
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4aa6      	ldr	r2, [pc, #664]	; (8009dbc <UART_SetConfig+0x334>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d177      	bne.n	8009c18 <UART_SetConfig+0x190>
 8009b28:	4ba5      	ldr	r3, [pc, #660]	; (8009dc0 <UART_SetConfig+0x338>)
 8009b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b30:	2b28      	cmp	r3, #40	; 0x28
 8009b32:	d86d      	bhi.n	8009c10 <UART_SetConfig+0x188>
 8009b34:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <UART_SetConfig+0xb4>)
 8009b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3a:	bf00      	nop
 8009b3c:	08009be1 	.word	0x08009be1
 8009b40:	08009c11 	.word	0x08009c11
 8009b44:	08009c11 	.word	0x08009c11
 8009b48:	08009c11 	.word	0x08009c11
 8009b4c:	08009c11 	.word	0x08009c11
 8009b50:	08009c11 	.word	0x08009c11
 8009b54:	08009c11 	.word	0x08009c11
 8009b58:	08009c11 	.word	0x08009c11
 8009b5c:	08009be9 	.word	0x08009be9
 8009b60:	08009c11 	.word	0x08009c11
 8009b64:	08009c11 	.word	0x08009c11
 8009b68:	08009c11 	.word	0x08009c11
 8009b6c:	08009c11 	.word	0x08009c11
 8009b70:	08009c11 	.word	0x08009c11
 8009b74:	08009c11 	.word	0x08009c11
 8009b78:	08009c11 	.word	0x08009c11
 8009b7c:	08009bf1 	.word	0x08009bf1
 8009b80:	08009c11 	.word	0x08009c11
 8009b84:	08009c11 	.word	0x08009c11
 8009b88:	08009c11 	.word	0x08009c11
 8009b8c:	08009c11 	.word	0x08009c11
 8009b90:	08009c11 	.word	0x08009c11
 8009b94:	08009c11 	.word	0x08009c11
 8009b98:	08009c11 	.word	0x08009c11
 8009b9c:	08009bf9 	.word	0x08009bf9
 8009ba0:	08009c11 	.word	0x08009c11
 8009ba4:	08009c11 	.word	0x08009c11
 8009ba8:	08009c11 	.word	0x08009c11
 8009bac:	08009c11 	.word	0x08009c11
 8009bb0:	08009c11 	.word	0x08009c11
 8009bb4:	08009c11 	.word	0x08009c11
 8009bb8:	08009c11 	.word	0x08009c11
 8009bbc:	08009c01 	.word	0x08009c01
 8009bc0:	08009c11 	.word	0x08009c11
 8009bc4:	08009c11 	.word	0x08009c11
 8009bc8:	08009c11 	.word	0x08009c11
 8009bcc:	08009c11 	.word	0x08009c11
 8009bd0:	08009c11 	.word	0x08009c11
 8009bd4:	08009c11 	.word	0x08009c11
 8009bd8:	08009c11 	.word	0x08009c11
 8009bdc:	08009c09 	.word	0x08009c09
 8009be0:	2301      	movs	r3, #1
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be6:	e222      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009be8:	2304      	movs	r3, #4
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bee:	e21e      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009bf0:	2308      	movs	r3, #8
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf6:	e21a      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009bf8:	2310      	movs	r3, #16
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfe:	e216      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009c00:	2320      	movs	r3, #32
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c06:	e212      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009c08:	2340      	movs	r3, #64	; 0x40
 8009c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0e:	e20e      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009c10:	2380      	movs	r3, #128	; 0x80
 8009c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c16:	e20a      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a69      	ldr	r2, [pc, #420]	; (8009dc4 <UART_SetConfig+0x33c>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d130      	bne.n	8009c84 <UART_SetConfig+0x1fc>
 8009c22:	4b67      	ldr	r3, [pc, #412]	; (8009dc0 <UART_SetConfig+0x338>)
 8009c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	2b05      	cmp	r3, #5
 8009c2c:	d826      	bhi.n	8009c7c <UART_SetConfig+0x1f4>
 8009c2e:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <UART_SetConfig+0x1ac>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009c4d 	.word	0x08009c4d
 8009c38:	08009c55 	.word	0x08009c55
 8009c3c:	08009c5d 	.word	0x08009c5d
 8009c40:	08009c65 	.word	0x08009c65
 8009c44:	08009c6d 	.word	0x08009c6d
 8009c48:	08009c75 	.word	0x08009c75
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c52:	e1ec      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009c54:	2304      	movs	r3, #4
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5a:	e1e8      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009c5c:	2308      	movs	r3, #8
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c62:	e1e4      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009c64:	2310      	movs	r3, #16
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6a:	e1e0      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009c6c:	2320      	movs	r3, #32
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e1dc      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009c74:	2340      	movs	r3, #64	; 0x40
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7a:	e1d8      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009c7c:	2380      	movs	r3, #128	; 0x80
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c82:	e1d4      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a4f      	ldr	r2, [pc, #316]	; (8009dc8 <UART_SetConfig+0x340>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d130      	bne.n	8009cf0 <UART_SetConfig+0x268>
 8009c8e:	4b4c      	ldr	r3, [pc, #304]	; (8009dc0 <UART_SetConfig+0x338>)
 8009c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c92:	f003 0307 	and.w	r3, r3, #7
 8009c96:	2b05      	cmp	r3, #5
 8009c98:	d826      	bhi.n	8009ce8 <UART_SetConfig+0x260>
 8009c9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <UART_SetConfig+0x218>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009cb9 	.word	0x08009cb9
 8009ca4:	08009cc1 	.word	0x08009cc1
 8009ca8:	08009cc9 	.word	0x08009cc9
 8009cac:	08009cd1 	.word	0x08009cd1
 8009cb0:	08009cd9 	.word	0x08009cd9
 8009cb4:	08009ce1 	.word	0x08009ce1
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cbe:	e1b6      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc6:	e1b2      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009cc8:	2308      	movs	r3, #8
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cce:	e1ae      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009cd0:	2310      	movs	r3, #16
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e1aa      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009cd8:	2320      	movs	r3, #32
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e1a6      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009ce0:	2340      	movs	r3, #64	; 0x40
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e1a2      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009ce8:	2380      	movs	r3, #128	; 0x80
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e19e      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a35      	ldr	r2, [pc, #212]	; (8009dcc <UART_SetConfig+0x344>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d130      	bne.n	8009d5c <UART_SetConfig+0x2d4>
 8009cfa:	4b31      	ldr	r3, [pc, #196]	; (8009dc0 <UART_SetConfig+0x338>)
 8009cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	2b05      	cmp	r3, #5
 8009d04:	d826      	bhi.n	8009d54 <UART_SetConfig+0x2cc>
 8009d06:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <UART_SetConfig+0x284>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d25 	.word	0x08009d25
 8009d10:	08009d2d 	.word	0x08009d2d
 8009d14:	08009d35 	.word	0x08009d35
 8009d18:	08009d3d 	.word	0x08009d3d
 8009d1c:	08009d45 	.word	0x08009d45
 8009d20:	08009d4d 	.word	0x08009d4d
 8009d24:	2300      	movs	r3, #0
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d2a:	e180      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009d2c:	2304      	movs	r3, #4
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d32:	e17c      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009d34:	2308      	movs	r3, #8
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3a:	e178      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009d3c:	2310      	movs	r3, #16
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d42:	e174      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009d44:	2320      	movs	r3, #32
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4a:	e170      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009d4c:	2340      	movs	r3, #64	; 0x40
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e16c      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009d54:	2380      	movs	r3, #128	; 0x80
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5a:	e168      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a1b      	ldr	r2, [pc, #108]	; (8009dd0 <UART_SetConfig+0x348>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d142      	bne.n	8009dec <UART_SetConfig+0x364>
 8009d66:	4b16      	ldr	r3, [pc, #88]	; (8009dc0 <UART_SetConfig+0x338>)
 8009d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	2b05      	cmp	r3, #5
 8009d70:	d838      	bhi.n	8009de4 <UART_SetConfig+0x35c>
 8009d72:	a201      	add	r2, pc, #4	; (adr r2, 8009d78 <UART_SetConfig+0x2f0>)
 8009d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d78:	08009d91 	.word	0x08009d91
 8009d7c:	08009d99 	.word	0x08009d99
 8009d80:	08009da1 	.word	0x08009da1
 8009d84:	08009da9 	.word	0x08009da9
 8009d88:	08009dd5 	.word	0x08009dd5
 8009d8c:	08009ddd 	.word	0x08009ddd
 8009d90:	2300      	movs	r3, #0
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d96:	e14a      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009d98:	2304      	movs	r3, #4
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d9e:	e146      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009da0:	2308      	movs	r3, #8
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009da6:	e142      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009da8:	2310      	movs	r3, #16
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dae:	e13e      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009db0:	cfff69f3 	.word	0xcfff69f3
 8009db4:	58000c00 	.word	0x58000c00
 8009db8:	11fff4ff 	.word	0x11fff4ff
 8009dbc:	40011000 	.word	0x40011000
 8009dc0:	58024400 	.word	0x58024400
 8009dc4:	40004400 	.word	0x40004400
 8009dc8:	40004800 	.word	0x40004800
 8009dcc:	40004c00 	.word	0x40004c00
 8009dd0:	40005000 	.word	0x40005000
 8009dd4:	2320      	movs	r3, #32
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dda:	e128      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009ddc:	2340      	movs	r3, #64	; 0x40
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de2:	e124      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009de4:	2380      	movs	r3, #128	; 0x80
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dea:	e120      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4acb      	ldr	r2, [pc, #812]	; (800a120 <UART_SetConfig+0x698>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d176      	bne.n	8009ee4 <UART_SetConfig+0x45c>
 8009df6:	4bcb      	ldr	r3, [pc, #812]	; (800a124 <UART_SetConfig+0x69c>)
 8009df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dfe:	2b28      	cmp	r3, #40	; 0x28
 8009e00:	d86c      	bhi.n	8009edc <UART_SetConfig+0x454>
 8009e02:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <UART_SetConfig+0x380>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009ead 	.word	0x08009ead
 8009e0c:	08009edd 	.word	0x08009edd
 8009e10:	08009edd 	.word	0x08009edd
 8009e14:	08009edd 	.word	0x08009edd
 8009e18:	08009edd 	.word	0x08009edd
 8009e1c:	08009edd 	.word	0x08009edd
 8009e20:	08009edd 	.word	0x08009edd
 8009e24:	08009edd 	.word	0x08009edd
 8009e28:	08009eb5 	.word	0x08009eb5
 8009e2c:	08009edd 	.word	0x08009edd
 8009e30:	08009edd 	.word	0x08009edd
 8009e34:	08009edd 	.word	0x08009edd
 8009e38:	08009edd 	.word	0x08009edd
 8009e3c:	08009edd 	.word	0x08009edd
 8009e40:	08009edd 	.word	0x08009edd
 8009e44:	08009edd 	.word	0x08009edd
 8009e48:	08009ebd 	.word	0x08009ebd
 8009e4c:	08009edd 	.word	0x08009edd
 8009e50:	08009edd 	.word	0x08009edd
 8009e54:	08009edd 	.word	0x08009edd
 8009e58:	08009edd 	.word	0x08009edd
 8009e5c:	08009edd 	.word	0x08009edd
 8009e60:	08009edd 	.word	0x08009edd
 8009e64:	08009edd 	.word	0x08009edd
 8009e68:	08009ec5 	.word	0x08009ec5
 8009e6c:	08009edd 	.word	0x08009edd
 8009e70:	08009edd 	.word	0x08009edd
 8009e74:	08009edd 	.word	0x08009edd
 8009e78:	08009edd 	.word	0x08009edd
 8009e7c:	08009edd 	.word	0x08009edd
 8009e80:	08009edd 	.word	0x08009edd
 8009e84:	08009edd 	.word	0x08009edd
 8009e88:	08009ecd 	.word	0x08009ecd
 8009e8c:	08009edd 	.word	0x08009edd
 8009e90:	08009edd 	.word	0x08009edd
 8009e94:	08009edd 	.word	0x08009edd
 8009e98:	08009edd 	.word	0x08009edd
 8009e9c:	08009edd 	.word	0x08009edd
 8009ea0:	08009edd 	.word	0x08009edd
 8009ea4:	08009edd 	.word	0x08009edd
 8009ea8:	08009ed5 	.word	0x08009ed5
 8009eac:	2301      	movs	r3, #1
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb2:	e0bc      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009eb4:	2304      	movs	r3, #4
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eba:	e0b8      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009ebc:	2308      	movs	r3, #8
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec2:	e0b4      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eca:	e0b0      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009ecc:	2320      	movs	r3, #32
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed2:	e0ac      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009ed4:	2340      	movs	r3, #64	; 0x40
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eda:	e0a8      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009edc:	2380      	movs	r3, #128	; 0x80
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee2:	e0a4      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a8f      	ldr	r2, [pc, #572]	; (800a128 <UART_SetConfig+0x6a0>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d130      	bne.n	8009f50 <UART_SetConfig+0x4c8>
 8009eee:	4b8d      	ldr	r3, [pc, #564]	; (800a124 <UART_SetConfig+0x69c>)
 8009ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef2:	f003 0307 	and.w	r3, r3, #7
 8009ef6:	2b05      	cmp	r3, #5
 8009ef8:	d826      	bhi.n	8009f48 <UART_SetConfig+0x4c0>
 8009efa:	a201      	add	r2, pc, #4	; (adr r2, 8009f00 <UART_SetConfig+0x478>)
 8009efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f00:	08009f19 	.word	0x08009f19
 8009f04:	08009f21 	.word	0x08009f21
 8009f08:	08009f29 	.word	0x08009f29
 8009f0c:	08009f31 	.word	0x08009f31
 8009f10:	08009f39 	.word	0x08009f39
 8009f14:	08009f41 	.word	0x08009f41
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1e:	e086      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009f20:	2304      	movs	r3, #4
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f26:	e082      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009f28:	2308      	movs	r3, #8
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2e:	e07e      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009f30:	2310      	movs	r3, #16
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f36:	e07a      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009f38:	2320      	movs	r3, #32
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3e:	e076      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009f40:	2340      	movs	r3, #64	; 0x40
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f46:	e072      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009f48:	2380      	movs	r3, #128	; 0x80
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4e:	e06e      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a75      	ldr	r2, [pc, #468]	; (800a12c <UART_SetConfig+0x6a4>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d130      	bne.n	8009fbc <UART_SetConfig+0x534>
 8009f5a:	4b72      	ldr	r3, [pc, #456]	; (800a124 <UART_SetConfig+0x69c>)
 8009f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5e:	f003 0307 	and.w	r3, r3, #7
 8009f62:	2b05      	cmp	r3, #5
 8009f64:	d826      	bhi.n	8009fb4 <UART_SetConfig+0x52c>
 8009f66:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <UART_SetConfig+0x4e4>)
 8009f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6c:	08009f85 	.word	0x08009f85
 8009f70:	08009f8d 	.word	0x08009f8d
 8009f74:	08009f95 	.word	0x08009f95
 8009f78:	08009f9d 	.word	0x08009f9d
 8009f7c:	08009fa5 	.word	0x08009fa5
 8009f80:	08009fad 	.word	0x08009fad
 8009f84:	2300      	movs	r3, #0
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f8a:	e050      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f92:	e04c      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009f94:	2308      	movs	r3, #8
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9a:	e048      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009f9c:	2310      	movs	r3, #16
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fa2:	e044      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009fa4:	2320      	movs	r3, #32
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009faa:	e040      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009fac:	2340      	movs	r3, #64	; 0x40
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb2:	e03c      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009fb4:	2380      	movs	r3, #128	; 0x80
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fba:	e038      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a5b      	ldr	r2, [pc, #364]	; (800a130 <UART_SetConfig+0x6a8>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d130      	bne.n	800a028 <UART_SetConfig+0x5a0>
 8009fc6:	4b57      	ldr	r3, [pc, #348]	; (800a124 <UART_SetConfig+0x69c>)
 8009fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fca:	f003 0307 	and.w	r3, r3, #7
 8009fce:	2b05      	cmp	r3, #5
 8009fd0:	d826      	bhi.n	800a020 <UART_SetConfig+0x598>
 8009fd2:	a201      	add	r2, pc, #4	; (adr r2, 8009fd8 <UART_SetConfig+0x550>)
 8009fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd8:	08009ff1 	.word	0x08009ff1
 8009fdc:	08009ff9 	.word	0x08009ff9
 8009fe0:	0800a001 	.word	0x0800a001
 8009fe4:	0800a009 	.word	0x0800a009
 8009fe8:	0800a011 	.word	0x0800a011
 8009fec:	0800a019 	.word	0x0800a019
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ff6:	e01a      	b.n	800a02e <UART_SetConfig+0x5a6>
 8009ff8:	2304      	movs	r3, #4
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ffe:	e016      	b.n	800a02e <UART_SetConfig+0x5a6>
 800a000:	2308      	movs	r3, #8
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a006:	e012      	b.n	800a02e <UART_SetConfig+0x5a6>
 800a008:	2310      	movs	r3, #16
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a00e:	e00e      	b.n	800a02e <UART_SetConfig+0x5a6>
 800a010:	2320      	movs	r3, #32
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a016:	e00a      	b.n	800a02e <UART_SetConfig+0x5a6>
 800a018:	2340      	movs	r3, #64	; 0x40
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a01e:	e006      	b.n	800a02e <UART_SetConfig+0x5a6>
 800a020:	2380      	movs	r3, #128	; 0x80
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a026:	e002      	b.n	800a02e <UART_SetConfig+0x5a6>
 800a028:	2380      	movs	r3, #128	; 0x80
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a3f      	ldr	r2, [pc, #252]	; (800a130 <UART_SetConfig+0x6a8>)
 800a034:	4293      	cmp	r3, r2
 800a036:	f040 80f8 	bne.w	800a22a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a03a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a03e:	2b20      	cmp	r3, #32
 800a040:	dc46      	bgt.n	800a0d0 <UART_SetConfig+0x648>
 800a042:	2b02      	cmp	r3, #2
 800a044:	f2c0 8082 	blt.w	800a14c <UART_SetConfig+0x6c4>
 800a048:	3b02      	subs	r3, #2
 800a04a:	2b1e      	cmp	r3, #30
 800a04c:	d87e      	bhi.n	800a14c <UART_SetConfig+0x6c4>
 800a04e:	a201      	add	r2, pc, #4	; (adr r2, 800a054 <UART_SetConfig+0x5cc>)
 800a050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a054:	0800a0d7 	.word	0x0800a0d7
 800a058:	0800a14d 	.word	0x0800a14d
 800a05c:	0800a0df 	.word	0x0800a0df
 800a060:	0800a14d 	.word	0x0800a14d
 800a064:	0800a14d 	.word	0x0800a14d
 800a068:	0800a14d 	.word	0x0800a14d
 800a06c:	0800a0ef 	.word	0x0800a0ef
 800a070:	0800a14d 	.word	0x0800a14d
 800a074:	0800a14d 	.word	0x0800a14d
 800a078:	0800a14d 	.word	0x0800a14d
 800a07c:	0800a14d 	.word	0x0800a14d
 800a080:	0800a14d 	.word	0x0800a14d
 800a084:	0800a14d 	.word	0x0800a14d
 800a088:	0800a14d 	.word	0x0800a14d
 800a08c:	0800a0ff 	.word	0x0800a0ff
 800a090:	0800a14d 	.word	0x0800a14d
 800a094:	0800a14d 	.word	0x0800a14d
 800a098:	0800a14d 	.word	0x0800a14d
 800a09c:	0800a14d 	.word	0x0800a14d
 800a0a0:	0800a14d 	.word	0x0800a14d
 800a0a4:	0800a14d 	.word	0x0800a14d
 800a0a8:	0800a14d 	.word	0x0800a14d
 800a0ac:	0800a14d 	.word	0x0800a14d
 800a0b0:	0800a14d 	.word	0x0800a14d
 800a0b4:	0800a14d 	.word	0x0800a14d
 800a0b8:	0800a14d 	.word	0x0800a14d
 800a0bc:	0800a14d 	.word	0x0800a14d
 800a0c0:	0800a14d 	.word	0x0800a14d
 800a0c4:	0800a14d 	.word	0x0800a14d
 800a0c8:	0800a14d 	.word	0x0800a14d
 800a0cc:	0800a13f 	.word	0x0800a13f
 800a0d0:	2b40      	cmp	r3, #64	; 0x40
 800a0d2:	d037      	beq.n	800a144 <UART_SetConfig+0x6bc>
 800a0d4:	e03a      	b.n	800a14c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a0d6:	f7fd fca5 	bl	8007a24 <HAL_RCCEx_GetD3PCLK1Freq>
 800a0da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a0dc:	e03c      	b.n	800a158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fd fcb4 	bl	8007a50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ec:	e034      	b.n	800a158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ee:	f107 0318 	add.w	r3, r7, #24
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fd fe00 	bl	8007cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0fc:	e02c      	b.n	800a158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0fe:	4b09      	ldr	r3, [pc, #36]	; (800a124 <UART_SetConfig+0x69c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 0320 	and.w	r3, r3, #32
 800a106:	2b00      	cmp	r3, #0
 800a108:	d016      	beq.n	800a138 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a10a:	4b06      	ldr	r3, [pc, #24]	; (800a124 <UART_SetConfig+0x69c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	08db      	lsrs	r3, r3, #3
 800a110:	f003 0303 	and.w	r3, r3, #3
 800a114:	4a07      	ldr	r2, [pc, #28]	; (800a134 <UART_SetConfig+0x6ac>)
 800a116:	fa22 f303 	lsr.w	r3, r2, r3
 800a11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a11c:	e01c      	b.n	800a158 <UART_SetConfig+0x6d0>
 800a11e:	bf00      	nop
 800a120:	40011400 	.word	0x40011400
 800a124:	58024400 	.word	0x58024400
 800a128:	40007800 	.word	0x40007800
 800a12c:	40007c00 	.word	0x40007c00
 800a130:	58000c00 	.word	0x58000c00
 800a134:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a138:	4b9d      	ldr	r3, [pc, #628]	; (800a3b0 <UART_SetConfig+0x928>)
 800a13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a13c:	e00c      	b.n	800a158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a13e:	4b9d      	ldr	r3, [pc, #628]	; (800a3b4 <UART_SetConfig+0x92c>)
 800a140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a142:	e009      	b.n	800a158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a14a:	e005      	b.n	800a158 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a14c:	2300      	movs	r3, #0
 800a14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a156:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f000 81de 	beq.w	800a51c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	4a94      	ldr	r2, [pc, #592]	; (800a3b8 <UART_SetConfig+0x930>)
 800a166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a16a:	461a      	mov	r2, r3
 800a16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a16e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a172:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	4613      	mov	r3, r2
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	4413      	add	r3, r2
 800a17e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a180:	429a      	cmp	r2, r3
 800a182:	d305      	bcc.n	800a190 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a18a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d903      	bls.n	800a198 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a196:	e1c1      	b.n	800a51c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19a:	2200      	movs	r2, #0
 800a19c:	60bb      	str	r3, [r7, #8]
 800a19e:	60fa      	str	r2, [r7, #12]
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a4:	4a84      	ldr	r2, [pc, #528]	; (800a3b8 <UART_SetConfig+0x930>)
 800a1a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	603b      	str	r3, [r7, #0]
 800a1b0:	607a      	str	r2, [r7, #4]
 800a1b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1ba:	f7f6 f88d 	bl	80002d8 <__aeabi_uldivmod>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	f04f 0200 	mov.w	r2, #0
 800a1ca:	f04f 0300 	mov.w	r3, #0
 800a1ce:	020b      	lsls	r3, r1, #8
 800a1d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1d4:	0202      	lsls	r2, r0, #8
 800a1d6:	6979      	ldr	r1, [r7, #20]
 800a1d8:	6849      	ldr	r1, [r1, #4]
 800a1da:	0849      	lsrs	r1, r1, #1
 800a1dc:	2000      	movs	r0, #0
 800a1de:	460c      	mov	r4, r1
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	eb12 0804 	adds.w	r8, r2, r4
 800a1e6:	eb43 0905 	adc.w	r9, r3, r5
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	469a      	mov	sl, r3
 800a1f2:	4693      	mov	fp, r2
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	465b      	mov	r3, fp
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	f7f6 f86c 	bl	80002d8 <__aeabi_uldivmod>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4613      	mov	r3, r2
 800a206:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a20e:	d308      	bcc.n	800a222 <UART_SetConfig+0x79a>
 800a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a216:	d204      	bcs.n	800a222 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a21e:	60da      	str	r2, [r3, #12]
 800a220:	e17c      	b.n	800a51c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a228:	e178      	b.n	800a51c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a232:	f040 80c5 	bne.w	800a3c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a236:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a23a:	2b20      	cmp	r3, #32
 800a23c:	dc48      	bgt.n	800a2d0 <UART_SetConfig+0x848>
 800a23e:	2b00      	cmp	r3, #0
 800a240:	db7b      	blt.n	800a33a <UART_SetConfig+0x8b2>
 800a242:	2b20      	cmp	r3, #32
 800a244:	d879      	bhi.n	800a33a <UART_SetConfig+0x8b2>
 800a246:	a201      	add	r2, pc, #4	; (adr r2, 800a24c <UART_SetConfig+0x7c4>)
 800a248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24c:	0800a2d7 	.word	0x0800a2d7
 800a250:	0800a2df 	.word	0x0800a2df
 800a254:	0800a33b 	.word	0x0800a33b
 800a258:	0800a33b 	.word	0x0800a33b
 800a25c:	0800a2e7 	.word	0x0800a2e7
 800a260:	0800a33b 	.word	0x0800a33b
 800a264:	0800a33b 	.word	0x0800a33b
 800a268:	0800a33b 	.word	0x0800a33b
 800a26c:	0800a2f7 	.word	0x0800a2f7
 800a270:	0800a33b 	.word	0x0800a33b
 800a274:	0800a33b 	.word	0x0800a33b
 800a278:	0800a33b 	.word	0x0800a33b
 800a27c:	0800a33b 	.word	0x0800a33b
 800a280:	0800a33b 	.word	0x0800a33b
 800a284:	0800a33b 	.word	0x0800a33b
 800a288:	0800a33b 	.word	0x0800a33b
 800a28c:	0800a307 	.word	0x0800a307
 800a290:	0800a33b 	.word	0x0800a33b
 800a294:	0800a33b 	.word	0x0800a33b
 800a298:	0800a33b 	.word	0x0800a33b
 800a29c:	0800a33b 	.word	0x0800a33b
 800a2a0:	0800a33b 	.word	0x0800a33b
 800a2a4:	0800a33b 	.word	0x0800a33b
 800a2a8:	0800a33b 	.word	0x0800a33b
 800a2ac:	0800a33b 	.word	0x0800a33b
 800a2b0:	0800a33b 	.word	0x0800a33b
 800a2b4:	0800a33b 	.word	0x0800a33b
 800a2b8:	0800a33b 	.word	0x0800a33b
 800a2bc:	0800a33b 	.word	0x0800a33b
 800a2c0:	0800a33b 	.word	0x0800a33b
 800a2c4:	0800a33b 	.word	0x0800a33b
 800a2c8:	0800a33b 	.word	0x0800a33b
 800a2cc:	0800a32d 	.word	0x0800a32d
 800a2d0:	2b40      	cmp	r3, #64	; 0x40
 800a2d2:	d02e      	beq.n	800a332 <UART_SetConfig+0x8aa>
 800a2d4:	e031      	b.n	800a33a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2d6:	f7fc fc33 	bl	8006b40 <HAL_RCC_GetPCLK1Freq>
 800a2da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2dc:	e033      	b.n	800a346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2de:	f7fc fc45 	bl	8006b6c <HAL_RCC_GetPCLK2Freq>
 800a2e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2e4:	e02f      	b.n	800a346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fd fbb0 	bl	8007a50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2f4:	e027      	b.n	800a346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2f6:	f107 0318 	add.w	r3, r7, #24
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fd fcfc 	bl	8007cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a304:	e01f      	b.n	800a346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a306:	4b2d      	ldr	r3, [pc, #180]	; (800a3bc <UART_SetConfig+0x934>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0320 	and.w	r3, r3, #32
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d009      	beq.n	800a326 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a312:	4b2a      	ldr	r3, [pc, #168]	; (800a3bc <UART_SetConfig+0x934>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	08db      	lsrs	r3, r3, #3
 800a318:	f003 0303 	and.w	r3, r3, #3
 800a31c:	4a24      	ldr	r2, [pc, #144]	; (800a3b0 <UART_SetConfig+0x928>)
 800a31e:	fa22 f303 	lsr.w	r3, r2, r3
 800a322:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a324:	e00f      	b.n	800a346 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a326:	4b22      	ldr	r3, [pc, #136]	; (800a3b0 <UART_SetConfig+0x928>)
 800a328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a32a:	e00c      	b.n	800a346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a32c:	4b21      	ldr	r3, [pc, #132]	; (800a3b4 <UART_SetConfig+0x92c>)
 800a32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a330:	e009      	b.n	800a346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a338:	e005      	b.n	800a346 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a33a:	2300      	movs	r3, #0
 800a33c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 80e7 	beq.w	800a51c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a352:	4a19      	ldr	r2, [pc, #100]	; (800a3b8 <UART_SetConfig+0x930>)
 800a354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a358:	461a      	mov	r2, r3
 800a35a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a35c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a360:	005a      	lsls	r2, r3, #1
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	085b      	lsrs	r3, r3, #1
 800a368:	441a      	add	r2, r3
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a372:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a376:	2b0f      	cmp	r3, #15
 800a378:	d916      	bls.n	800a3a8 <UART_SetConfig+0x920>
 800a37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a380:	d212      	bcs.n	800a3a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a384:	b29b      	uxth	r3, r3
 800a386:	f023 030f 	bic.w	r3, r3, #15
 800a38a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38e:	085b      	lsrs	r3, r3, #1
 800a390:	b29b      	uxth	r3, r3
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	b29a      	uxth	r2, r3
 800a398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a39a:	4313      	orrs	r3, r2
 800a39c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a3a4:	60da      	str	r2, [r3, #12]
 800a3a6:	e0b9      	b.n	800a51c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a3ae:	e0b5      	b.n	800a51c <UART_SetConfig+0xa94>
 800a3b0:	03d09000 	.word	0x03d09000
 800a3b4:	003d0900 	.word	0x003d0900
 800a3b8:	0800b84c 	.word	0x0800b84c
 800a3bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	dc49      	bgt.n	800a45c <UART_SetConfig+0x9d4>
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	db7c      	blt.n	800a4c6 <UART_SetConfig+0xa3e>
 800a3cc:	2b20      	cmp	r3, #32
 800a3ce:	d87a      	bhi.n	800a4c6 <UART_SetConfig+0xa3e>
 800a3d0:	a201      	add	r2, pc, #4	; (adr r2, 800a3d8 <UART_SetConfig+0x950>)
 800a3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d6:	bf00      	nop
 800a3d8:	0800a463 	.word	0x0800a463
 800a3dc:	0800a46b 	.word	0x0800a46b
 800a3e0:	0800a4c7 	.word	0x0800a4c7
 800a3e4:	0800a4c7 	.word	0x0800a4c7
 800a3e8:	0800a473 	.word	0x0800a473
 800a3ec:	0800a4c7 	.word	0x0800a4c7
 800a3f0:	0800a4c7 	.word	0x0800a4c7
 800a3f4:	0800a4c7 	.word	0x0800a4c7
 800a3f8:	0800a483 	.word	0x0800a483
 800a3fc:	0800a4c7 	.word	0x0800a4c7
 800a400:	0800a4c7 	.word	0x0800a4c7
 800a404:	0800a4c7 	.word	0x0800a4c7
 800a408:	0800a4c7 	.word	0x0800a4c7
 800a40c:	0800a4c7 	.word	0x0800a4c7
 800a410:	0800a4c7 	.word	0x0800a4c7
 800a414:	0800a4c7 	.word	0x0800a4c7
 800a418:	0800a493 	.word	0x0800a493
 800a41c:	0800a4c7 	.word	0x0800a4c7
 800a420:	0800a4c7 	.word	0x0800a4c7
 800a424:	0800a4c7 	.word	0x0800a4c7
 800a428:	0800a4c7 	.word	0x0800a4c7
 800a42c:	0800a4c7 	.word	0x0800a4c7
 800a430:	0800a4c7 	.word	0x0800a4c7
 800a434:	0800a4c7 	.word	0x0800a4c7
 800a438:	0800a4c7 	.word	0x0800a4c7
 800a43c:	0800a4c7 	.word	0x0800a4c7
 800a440:	0800a4c7 	.word	0x0800a4c7
 800a444:	0800a4c7 	.word	0x0800a4c7
 800a448:	0800a4c7 	.word	0x0800a4c7
 800a44c:	0800a4c7 	.word	0x0800a4c7
 800a450:	0800a4c7 	.word	0x0800a4c7
 800a454:	0800a4c7 	.word	0x0800a4c7
 800a458:	0800a4b9 	.word	0x0800a4b9
 800a45c:	2b40      	cmp	r3, #64	; 0x40
 800a45e:	d02e      	beq.n	800a4be <UART_SetConfig+0xa36>
 800a460:	e031      	b.n	800a4c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a462:	f7fc fb6d 	bl	8006b40 <HAL_RCC_GetPCLK1Freq>
 800a466:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a468:	e033      	b.n	800a4d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a46a:	f7fc fb7f 	bl	8006b6c <HAL_RCC_GetPCLK2Freq>
 800a46e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a470:	e02f      	b.n	800a4d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a476:	4618      	mov	r0, r3
 800a478:	f7fd faea 	bl	8007a50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a480:	e027      	b.n	800a4d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a482:	f107 0318 	add.w	r3, r7, #24
 800a486:	4618      	mov	r0, r3
 800a488:	f7fd fc36 	bl	8007cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a490:	e01f      	b.n	800a4d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a492:	4b2d      	ldr	r3, [pc, #180]	; (800a548 <UART_SetConfig+0xac0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 0320 	and.w	r3, r3, #32
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d009      	beq.n	800a4b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a49e:	4b2a      	ldr	r3, [pc, #168]	; (800a548 <UART_SetConfig+0xac0>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	08db      	lsrs	r3, r3, #3
 800a4a4:	f003 0303 	and.w	r3, r3, #3
 800a4a8:	4a28      	ldr	r2, [pc, #160]	; (800a54c <UART_SetConfig+0xac4>)
 800a4aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4b0:	e00f      	b.n	800a4d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a4b2:	4b26      	ldr	r3, [pc, #152]	; (800a54c <UART_SetConfig+0xac4>)
 800a4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4b6:	e00c      	b.n	800a4d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4b8:	4b25      	ldr	r3, [pc, #148]	; (800a550 <UART_SetConfig+0xac8>)
 800a4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4bc:	e009      	b.n	800a4d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4c4:	e005      	b.n	800a4d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a4d0:	bf00      	nop
    }

    if (pclk != 0U)
 800a4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d021      	beq.n	800a51c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4dc:	4a1d      	ldr	r2, [pc, #116]	; (800a554 <UART_SetConfig+0xacc>)
 800a4de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	085b      	lsrs	r3, r3, #1
 800a4f0:	441a      	add	r2, r3
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	2b0f      	cmp	r3, #15
 800a500:	d909      	bls.n	800a516 <UART_SetConfig+0xa8e>
 800a502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a508:	d205      	bcs.n	800a516 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	60da      	str	r2, [r3, #12]
 800a514:	e002      	b.n	800a51c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	2201      	movs	r2, #1
 800a520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	2201      	movs	r2, #1
 800a528:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2200      	movs	r2, #0
 800a530:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	2200      	movs	r2, #0
 800a536:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a538:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3748      	adds	r7, #72	; 0x48
 800a540:	46bd      	mov	sp, r7
 800a542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a546:	bf00      	nop
 800a548:	58024400 	.word	0x58024400
 800a54c:	03d09000 	.word	0x03d09000
 800a550:	003d0900 	.word	0x003d0900
 800a554:	0800b84c 	.word	0x0800b84c

0800a558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a564:	f003 0301 	and.w	r3, r3, #1
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00a      	beq.n	800a582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00a      	beq.n	800a5a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	430a      	orrs	r2, r1
 800a5a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a8:	f003 0304 	and.w	r3, r3, #4
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00a      	beq.n	800a5c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ca:	f003 0308 	and.w	r3, r3, #8
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00a      	beq.n	800a5e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ec:	f003 0310 	and.w	r3, r3, #16
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00a      	beq.n	800a60a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60e:	f003 0320 	and.w	r3, r3, #32
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00a      	beq.n	800a62c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	430a      	orrs	r2, r1
 800a62a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01a      	beq.n	800a66e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	430a      	orrs	r2, r1
 800a64c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a656:	d10a      	bne.n	800a66e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00a      	beq.n	800a690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	430a      	orrs	r2, r1
 800a68e:	605a      	str	r2, [r3, #4]
  }
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6ac:	f7f7 fb44 	bl	8001d38 <HAL_GetTick>
 800a6b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 0308 	and.w	r3, r3, #8
 800a6bc:	2b08      	cmp	r3, #8
 800a6be:	d10e      	bne.n	800a6de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f82f 	bl	800a732 <UART_WaitOnFlagUntilTimeout>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e025      	b.n	800a72a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 0304 	and.w	r3, r3, #4
 800a6e8:	2b04      	cmp	r3, #4
 800a6ea:	d10e      	bne.n	800a70a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f819 	bl	800a732 <UART_WaitOnFlagUntilTimeout>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e00f      	b.n	800a72a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2220      	movs	r2, #32
 800a716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b09c      	sub	sp, #112	; 0x70
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	60b9      	str	r1, [r7, #8]
 800a73c:	603b      	str	r3, [r7, #0]
 800a73e:	4613      	mov	r3, r2
 800a740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a742:	e0a9      	b.n	800a898 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a74a:	f000 80a5 	beq.w	800a898 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a74e:	f7f7 faf3 	bl	8001d38 <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d302      	bcc.n	800a764 <UART_WaitOnFlagUntilTimeout+0x32>
 800a75e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a760:	2b00      	cmp	r3, #0
 800a762:	d140      	bne.n	800a7e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a76c:	e853 3f00 	ldrex	r3, [r3]
 800a770:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a778:	667b      	str	r3, [r7, #100]	; 0x64
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a782:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a784:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a78a:	e841 2300 	strex	r3, r2, [r1]
 800a78e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1e6      	bne.n	800a764 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3308      	adds	r3, #8
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a0:	e853 3f00 	ldrex	r3, [r3]
 800a7a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	f023 0301 	bic.w	r3, r3, #1
 800a7ac:	663b      	str	r3, [r7, #96]	; 0x60
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3308      	adds	r3, #8
 800a7b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a7b6:	64ba      	str	r2, [r7, #72]	; 0x48
 800a7b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a7bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7be:	e841 2300 	strex	r3, r2, [r1]
 800a7c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a7c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1e5      	bne.n	800a796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2220      	movs	r2, #32
 800a7ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	e069      	b.n	800a8ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d051      	beq.n	800a898 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	69db      	ldr	r3, [r3, #28]
 800a7fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a802:	d149      	bne.n	800a898 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a80c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	e853 3f00 	ldrex	r3, [r3]
 800a81a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a822:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	461a      	mov	r2, r3
 800a82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a82c:	637b      	str	r3, [r7, #52]	; 0x34
 800a82e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a834:	e841 2300 	strex	r3, r2, [r1]
 800a838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1e6      	bne.n	800a80e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	3308      	adds	r3, #8
 800a846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	e853 3f00 	ldrex	r3, [r3]
 800a84e:	613b      	str	r3, [r7, #16]
   return(result);
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f023 0301 	bic.w	r3, r3, #1
 800a856:	66bb      	str	r3, [r7, #104]	; 0x68
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	3308      	adds	r3, #8
 800a85e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a860:	623a      	str	r2, [r7, #32]
 800a862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a864:	69f9      	ldr	r1, [r7, #28]
 800a866:	6a3a      	ldr	r2, [r7, #32]
 800a868:	e841 2300 	strex	r3, r2, [r1]
 800a86c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1e5      	bne.n	800a840 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2220      	movs	r2, #32
 800a878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2220      	movs	r2, #32
 800a880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2220      	movs	r2, #32
 800a888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a894:	2303      	movs	r3, #3
 800a896:	e010      	b.n	800a8ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	69da      	ldr	r2, [r3, #28]
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	bf0c      	ite	eq
 800a8a8:	2301      	moveq	r3, #1
 800a8aa:	2300      	movne	r3, #0
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	79fb      	ldrb	r3, [r7, #7]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	f43f af46 	beq.w	800a744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3770      	adds	r7, #112	; 0x70
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b096      	sub	sp, #88	; 0x58
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	88fa      	ldrh	r2, [r7, #6]
 800a8dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2222      	movs	r2, #34	; 0x22
 800a8ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d02c      	beq.n	800a952 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8fc:	4a42      	ldr	r2, [pc, #264]	; (800aa08 <UART_Start_Receive_DMA+0x144>)
 800a8fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a904:	4a41      	ldr	r2, [pc, #260]	; (800aa0c <UART_Start_Receive_DMA+0x148>)
 800a906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a90c:	4a40      	ldr	r2, [pc, #256]	; (800aa10 <UART_Start_Receive_DMA+0x14c>)
 800a90e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a914:	2200      	movs	r2, #0
 800a916:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3324      	adds	r3, #36	; 0x24
 800a922:	4619      	mov	r1, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a928:	461a      	mov	r2, r3
 800a92a:	88fb      	ldrh	r3, [r7, #6]
 800a92c:	f7f7 fec0 	bl	80026b0 <HAL_DMA_Start_IT>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00d      	beq.n	800a952 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2210      	movs	r2, #16
 800a93a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2220      	movs	r2, #32
 800a94a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e055      	b.n	800a9fe <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d018      	beq.n	800a994 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a96a:	e853 3f00 	ldrex	r3, [r3]
 800a96e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a976:	657b      	str	r3, [r7, #84]	; 0x54
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	461a      	mov	r2, r3
 800a97e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a980:	64bb      	str	r3, [r7, #72]	; 0x48
 800a982:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a984:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a988:	e841 2300 	strex	r3, r2, [r1]
 800a98c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a98e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1e6      	bne.n	800a962 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3308      	adds	r3, #8
 800a99a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99e:	e853 3f00 	ldrex	r3, [r3]
 800a9a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	f043 0301 	orr.w	r3, r3, #1
 800a9aa:	653b      	str	r3, [r7, #80]	; 0x50
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3308      	adds	r3, #8
 800a9b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9b4:	637a      	str	r2, [r7, #52]	; 0x34
 800a9b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9bc:	e841 2300 	strex	r3, r2, [r1]
 800a9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1e5      	bne.n	800a994 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	3308      	adds	r3, #8
 800a9ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	e853 3f00 	ldrex	r3, [r3]
 800a9d6:	613b      	str	r3, [r7, #16]
   return(result);
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3308      	adds	r3, #8
 800a9e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a9e8:	623a      	str	r2, [r7, #32]
 800a9ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ec:	69f9      	ldr	r1, [r7, #28]
 800a9ee:	6a3a      	ldr	r2, [r7, #32]
 800a9f0:	e841 2300 	strex	r3, r2, [r1]
 800a9f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1e5      	bne.n	800a9c8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3758      	adds	r7, #88	; 0x58
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	0800ab65 	.word	0x0800ab65
 800aa0c:	0800ac87 	.word	0x0800ac87
 800aa10:	0800acbf 	.word	0x0800acbf

0800aa14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b08f      	sub	sp, #60	; 0x3c
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	e853 3f00 	ldrex	r3, [r3]
 800aa28:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aa30:	637b      	str	r3, [r7, #52]	; 0x34
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa3c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e6      	bne.n	800aa1c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3308      	adds	r3, #8
 800aa54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	e853 3f00 	ldrex	r3, [r3]
 800aa5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aa64:	633b      	str	r3, [r7, #48]	; 0x30
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa6e:	61ba      	str	r2, [r7, #24]
 800aa70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa72:	6979      	ldr	r1, [r7, #20]
 800aa74:	69ba      	ldr	r2, [r7, #24]
 800aa76:	e841 2300 	strex	r3, r2, [r1]
 800aa7a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1e5      	bne.n	800aa4e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2220      	movs	r2, #32
 800aa86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800aa8a:	bf00      	nop
 800aa8c:	373c      	adds	r7, #60	; 0x3c
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
	...

0800aa98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b095      	sub	sp, #84	; 0x54
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aab4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aabe:	643b      	str	r3, [r7, #64]	; 0x40
 800aac0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e6      	bne.n	800aaa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3308      	adds	r3, #8
 800aad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	e853 3f00 	ldrex	r3, [r3]
 800aae0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aae2:	69fa      	ldr	r2, [r7, #28]
 800aae4:	4b1e      	ldr	r3, [pc, #120]	; (800ab60 <UART_EndRxTransfer+0xc8>)
 800aae6:	4013      	ands	r3, r2
 800aae8:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3308      	adds	r3, #8
 800aaf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aaf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aafa:	e841 2300 	strex	r3, r2, [r1]
 800aafe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1e5      	bne.n	800aad2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d118      	bne.n	800ab40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	e853 3f00 	ldrex	r3, [r3]
 800ab1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	f023 0310 	bic.w	r3, r3, #16
 800ab22:	647b      	str	r3, [r7, #68]	; 0x44
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab2c:	61bb      	str	r3, [r7, #24]
 800ab2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab30:	6979      	ldr	r1, [r7, #20]
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	e841 2300 	strex	r3, r2, [r1]
 800ab38:	613b      	str	r3, [r7, #16]
   return(result);
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1e6      	bne.n	800ab0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2220      	movs	r2, #32
 800ab44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ab54:	bf00      	nop
 800ab56:	3754      	adds	r7, #84	; 0x54
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	effffffe 	.word	0xeffffffe

0800ab64 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b09c      	sub	sp, #112	; 0x70
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab70:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	69db      	ldr	r3, [r3, #28]
 800ab76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab7a:	d071      	beq.n	800ac60 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ab7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab8c:	e853 3f00 	ldrex	r3, [r3]
 800ab90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab98:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aba2:	65bb      	str	r3, [r7, #88]	; 0x58
 800aba4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800abaa:	e841 2300 	strex	r3, r2, [r1]
 800abae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800abb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1e6      	bne.n	800ab84 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3308      	adds	r3, #8
 800abbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc8:	f023 0301 	bic.w	r3, r3, #1
 800abcc:	667b      	str	r3, [r7, #100]	; 0x64
 800abce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3308      	adds	r3, #8
 800abd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800abd6:	647a      	str	r2, [r7, #68]	; 0x44
 800abd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1e5      	bne.n	800abb6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3308      	adds	r3, #8
 800abf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf4:	e853 3f00 	ldrex	r3, [r3]
 800abf8:	623b      	str	r3, [r7, #32]
   return(result);
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac00:	663b      	str	r3, [r7, #96]	; 0x60
 800ac02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	3308      	adds	r3, #8
 800ac08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac0a:	633a      	str	r2, [r7, #48]	; 0x30
 800ac0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac12:	e841 2300 	strex	r3, r2, [r1]
 800ac16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1e5      	bne.n	800abea <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac20:	2220      	movs	r2, #32
 800ac22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d118      	bne.n	800ac60 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	e853 3f00 	ldrex	r3, [r3]
 800ac3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f023 0310 	bic.w	r3, r3, #16
 800ac42:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	461a      	mov	r2, r3
 800ac4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac4c:	61fb      	str	r3, [r7, #28]
 800ac4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac50:	69b9      	ldr	r1, [r7, #24]
 800ac52:	69fa      	ldr	r2, [r7, #28]
 800ac54:	e841 2300 	strex	r3, r2, [r1]
 800ac58:	617b      	str	r3, [r7, #20]
   return(result);
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1e6      	bne.n	800ac2e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d107      	bne.n	800ac78 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac72:	f7fe fefd 	bl	8009a70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac76:	e002      	b.n	800ac7e <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ac78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac7a:	f7fe fedb 	bl	8009a34 <HAL_UART_RxCpltCallback>
}
 800ac7e:	bf00      	nop
 800ac80:	3770      	adds	r7, #112	; 0x70
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b084      	sub	sp, #16
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac92:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d109      	bne.n	800acb0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aca2:	085b      	lsrs	r3, r3, #1
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	4619      	mov	r1, r3
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f7fe fee1 	bl	8009a70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acae:	e002      	b.n	800acb6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f7fe fec9 	bl	8009a48 <HAL_UART_RxHalfCpltCallback>
}
 800acb6:	bf00      	nop
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b086      	sub	sp, #24
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acd2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acda:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace6:	2b80      	cmp	r3, #128	; 0x80
 800ace8:	d109      	bne.n	800acfe <UART_DMAError+0x40>
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	2b21      	cmp	r3, #33	; 0x21
 800acee:	d106      	bne.n	800acfe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800acf8:	6978      	ldr	r0, [r7, #20]
 800acfa:	f7ff fe8b 	bl	800aa14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad08:	2b40      	cmp	r3, #64	; 0x40
 800ad0a:	d109      	bne.n	800ad20 <UART_DMAError+0x62>
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2b22      	cmp	r3, #34	; 0x22
 800ad10:	d106      	bne.n	800ad20 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ad1a:	6978      	ldr	r0, [r7, #20]
 800ad1c:	f7ff febc 	bl	800aa98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad26:	f043 0210 	orr.w	r2, r3, #16
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad30:	6978      	ldr	r0, [r7, #20]
 800ad32:	f7fe fe93 	bl	8009a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad36:	bf00      	nop
 800ad38:	3718      	adds	r7, #24
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f7fe fe7d 	bl	8009a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad62:	bf00      	nop
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b088      	sub	sp, #32
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	e853 3f00 	ldrex	r3, [r3]
 800ad7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad86:	61fb      	str	r3, [r7, #28]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	61bb      	str	r3, [r7, #24]
 800ad92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad94:	6979      	ldr	r1, [r7, #20]
 800ad96:	69ba      	ldr	r2, [r7, #24]
 800ad98:	e841 2300 	strex	r3, r2, [r1]
 800ad9c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d1e6      	bne.n	800ad72 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2220      	movs	r2, #32
 800ada8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7fe fe34 	bl	8009a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adb8:	bf00      	nop
 800adba:	3720      	adds	r7, #32
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800adc8:	bf00      	nop
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d101      	bne.n	800ae12 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae0e:	2302      	movs	r3, #2
 800ae10:	e027      	b.n	800ae62 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2224      	movs	r2, #36	; 0x24
 800ae1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f022 0201 	bic.w	r2, r2, #1
 800ae38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2220      	movs	r2, #32
 800ae54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3714      	adds	r7, #20
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b084      	sub	sp, #16
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d101      	bne.n	800ae86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae82:	2302      	movs	r3, #2
 800ae84:	e02d      	b.n	800aee2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2224      	movs	r2, #36	; 0x24
 800ae92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f022 0201 	bic.w	r2, r2, #1
 800aeac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	430a      	orrs	r2, r1
 800aec0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f850 	bl	800af68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2220      	movs	r2, #32
 800aed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d101      	bne.n	800af02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aefe:	2302      	movs	r3, #2
 800af00:	e02d      	b.n	800af5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2224      	movs	r2, #36	; 0x24
 800af0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0201 	bic.w	r2, r2, #1
 800af28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	430a      	orrs	r2, r1
 800af3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f812 	bl	800af68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2220      	movs	r2, #32
 800af50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af74:	2b00      	cmp	r3, #0
 800af76:	d108      	bne.n	800af8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af88:	e031      	b.n	800afee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af8a:	2310      	movs	r3, #16
 800af8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af8e:	2310      	movs	r3, #16
 800af90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	0e5b      	lsrs	r3, r3, #25
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	f003 0307 	and.w	r3, r3, #7
 800afa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	0f5b      	lsrs	r3, r3, #29
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	f003 0307 	and.w	r3, r3, #7
 800afb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afb2:	7bbb      	ldrb	r3, [r7, #14]
 800afb4:	7b3a      	ldrb	r2, [r7, #12]
 800afb6:	4911      	ldr	r1, [pc, #68]	; (800affc <UARTEx_SetNbDataToProcess+0x94>)
 800afb8:	5c8a      	ldrb	r2, [r1, r2]
 800afba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800afbe:	7b3a      	ldrb	r2, [r7, #12]
 800afc0:	490f      	ldr	r1, [pc, #60]	; (800b000 <UARTEx_SetNbDataToProcess+0x98>)
 800afc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800afc8:	b29a      	uxth	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
 800afd2:	7b7a      	ldrb	r2, [r7, #13]
 800afd4:	4909      	ldr	r1, [pc, #36]	; (800affc <UARTEx_SetNbDataToProcess+0x94>)
 800afd6:	5c8a      	ldrb	r2, [r1, r2]
 800afd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800afdc:	7b7a      	ldrb	r2, [r7, #13]
 800afde:	4908      	ldr	r1, [pc, #32]	; (800b000 <UARTEx_SetNbDataToProcess+0x98>)
 800afe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800afe2:	fb93 f3f2 	sdiv	r3, r3, r2
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800afee:	bf00      	nop
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	0800b864 	.word	0x0800b864
 800b000:	0800b86c 	.word	0x0800b86c

0800b004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b004:	b084      	sub	sp, #16
 800b006:	b580      	push	{r7, lr}
 800b008:	b084      	sub	sp, #16
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	f107 001c 	add.w	r0, r7, #28
 800b012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d120      	bne.n	800b05e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b020:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68da      	ldr	r2, [r3, #12]
 800b02c:	4b2a      	ldr	r3, [pc, #168]	; (800b0d8 <USB_CoreInit+0xd4>)
 800b02e:	4013      	ands	r3, r2
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b042:	2b01      	cmp	r3, #1
 800b044:	d105      	bne.n	800b052 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 faac 	bl	800b5b0 <USB_CoreReset>
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]
 800b05c:	e01a      	b.n	800b094 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 faa0 	bl	800b5b0 <USB_CoreReset>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b076:	2b00      	cmp	r3, #0
 800b078:	d106      	bne.n	800b088 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	639a      	str	r2, [r3, #56]	; 0x38
 800b086:	e005      	b.n	800b094 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b096:	2b01      	cmp	r3, #1
 800b098:	d116      	bne.n	800b0c8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b0a8:	4b0c      	ldr	r3, [pc, #48]	; (800b0dc <USB_CoreInit+0xd8>)
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	f043 0206 	orr.w	r2, r3, #6
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	f043 0220 	orr.w	r2, r3, #32
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0d4:	b004      	add	sp, #16
 800b0d6:	4770      	bx	lr
 800b0d8:	ffbdffbf 	.word	0xffbdffbf
 800b0dc:	03ee0000 	.word	0x03ee0000

0800b0e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	f023 0201 	bic.w	r2, r3, #1
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	370c      	adds	r7, #12
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	460b      	mov	r3, r1
 800b10c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b10e:	2300      	movs	r3, #0
 800b110:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b11e:	78fb      	ldrb	r3, [r7, #3]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d115      	bne.n	800b150 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b130:	2001      	movs	r0, #1
 800b132:	f7f6 fe0d 	bl	8001d50 <HAL_Delay>
      ms++;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3301      	adds	r3, #1
 800b13a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fa29 	bl	800b594 <USB_GetMode>
 800b142:	4603      	mov	r3, r0
 800b144:	2b01      	cmp	r3, #1
 800b146:	d01e      	beq.n	800b186 <USB_SetCurrentMode+0x84>
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2b31      	cmp	r3, #49	; 0x31
 800b14c:	d9f0      	bls.n	800b130 <USB_SetCurrentMode+0x2e>
 800b14e:	e01a      	b.n	800b186 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d115      	bne.n	800b182 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b162:	2001      	movs	r0, #1
 800b164:	f7f6 fdf4 	bl	8001d50 <HAL_Delay>
      ms++;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	3301      	adds	r3, #1
 800b16c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fa10 	bl	800b594 <USB_GetMode>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d005      	beq.n	800b186 <USB_SetCurrentMode+0x84>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b31      	cmp	r3, #49	; 0x31
 800b17e:	d9f0      	bls.n	800b162 <USB_SetCurrentMode+0x60>
 800b180:	e001      	b.n	800b186 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	e005      	b.n	800b192 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b32      	cmp	r3, #50	; 0x32
 800b18a:	d101      	bne.n	800b190 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e000      	b.n	800b192 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
	...

0800b19c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b19c:	b084      	sub	sp, #16
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b086      	sub	sp, #24
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b1aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	613b      	str	r3, [r7, #16]
 800b1ba:	e009      	b.n	800b1d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	3340      	adds	r3, #64	; 0x40
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	613b      	str	r3, [r7, #16]
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	2b0e      	cmp	r3, #14
 800b1d4:	d9f2      	bls.n	800b1bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d11c      	bne.n	800b216 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1ea:	f043 0302 	orr.w	r3, r3, #2
 800b1ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	601a      	str	r2, [r3, #0]
 800b214:	e005      	b.n	800b222 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b228:	461a      	mov	r2, r3
 800b22a:	2300      	movs	r3, #0
 800b22c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b234:	4619      	mov	r1, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b23c:	461a      	mov	r2, r3
 800b23e:	680b      	ldr	r3, [r1, #0]
 800b240:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b244:	2b01      	cmp	r3, #1
 800b246:	d10c      	bne.n	800b262 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d104      	bne.n	800b258 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b24e:	2100      	movs	r1, #0
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 f965 	bl	800b520 <USB_SetDevSpeed>
 800b256:	e008      	b.n	800b26a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b258:	2101      	movs	r1, #1
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 f960 	bl	800b520 <USB_SetDevSpeed>
 800b260:	e003      	b.n	800b26a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b262:	2103      	movs	r1, #3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f95b 	bl	800b520 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b26a:	2110      	movs	r1, #16
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 f8f3 	bl	800b458 <USB_FlushTxFifo>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 f91f 	bl	800b4c0 <USB_FlushRxFifo>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b292:	461a      	mov	r2, r3
 800b294:	2300      	movs	r3, #0
 800b296:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b29e:	461a      	mov	r2, r3
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	613b      	str	r3, [r7, #16]
 800b2b4:	e043      	b.n	800b33e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	015a      	lsls	r2, r3, #5
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	4413      	add	r3, r2
 800b2be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2cc:	d118      	bne.n	800b300 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d10a      	bne.n	800b2ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	015a      	lsls	r2, r3, #5
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	4413      	add	r3, r2
 800b2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b2e6:	6013      	str	r3, [r2, #0]
 800b2e8:	e013      	b.n	800b312 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	015a      	lsls	r2, r3, #5
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b2fc:	6013      	str	r3, [r2, #0]
 800b2fe:	e008      	b.n	800b312 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	015a      	lsls	r2, r3, #5
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	4413      	add	r3, r2
 800b308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b30c:	461a      	mov	r2, r3
 800b30e:	2300      	movs	r3, #0
 800b310:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	015a      	lsls	r2, r3, #5
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	4413      	add	r3, r2
 800b31a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b31e:	461a      	mov	r2, r3
 800b320:	2300      	movs	r3, #0
 800b322:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b330:	461a      	mov	r2, r3
 800b332:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b336:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	3301      	adds	r3, #1
 800b33c:	613b      	str	r3, [r7, #16]
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	429a      	cmp	r2, r3
 800b344:	d3b7      	bcc.n	800b2b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b346:	2300      	movs	r3, #0
 800b348:	613b      	str	r3, [r7, #16]
 800b34a:	e043      	b.n	800b3d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	015a      	lsls	r2, r3, #5
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	4413      	add	r3, r2
 800b354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b35e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b362:	d118      	bne.n	800b396 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10a      	bne.n	800b380 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	015a      	lsls	r2, r3, #5
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	4413      	add	r3, r2
 800b372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b376:	461a      	mov	r2, r3
 800b378:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b37c:	6013      	str	r3, [r2, #0]
 800b37e:	e013      	b.n	800b3a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	015a      	lsls	r2, r3, #5
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	4413      	add	r3, r2
 800b388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38c:	461a      	mov	r2, r3
 800b38e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b392:	6013      	str	r3, [r2, #0]
 800b394:	e008      	b.n	800b3a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	015a      	lsls	r2, r3, #5
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	015a      	lsls	r2, r3, #5
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	015a      	lsls	r2, r3, #5
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	613b      	str	r3, [r7, #16]
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d3b7      	bcc.n	800b34c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b3fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b400:	2b00      	cmp	r3, #0
 800b402:	d105      	bne.n	800b410 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	f043 0210 	orr.w	r2, r3, #16
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	699a      	ldr	r2, [r3, #24]
 800b414:	4b0e      	ldr	r3, [pc, #56]	; (800b450 <USB_DevInit+0x2b4>)
 800b416:	4313      	orrs	r3, r2
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d005      	beq.n	800b42e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	f043 0208 	orr.w	r2, r3, #8
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b42e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b430:	2b01      	cmp	r3, #1
 800b432:	d105      	bne.n	800b440 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	699a      	ldr	r2, [r3, #24]
 800b438:	4b06      	ldr	r3, [pc, #24]	; (800b454 <USB_DevInit+0x2b8>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b440:	7dfb      	ldrb	r3, [r7, #23]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b44c:	b004      	add	sp, #16
 800b44e:	4770      	bx	lr
 800b450:	803c3800 	.word	0x803c3800
 800b454:	40000004 	.word	0x40000004

0800b458 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b462:	2300      	movs	r3, #0
 800b464:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3301      	adds	r3, #1
 800b46a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	4a13      	ldr	r2, [pc, #76]	; (800b4bc <USB_FlushTxFifo+0x64>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d901      	bls.n	800b478 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b474:	2303      	movs	r3, #3
 800b476:	e01b      	b.n	800b4b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	daf2      	bge.n	800b466 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b480:	2300      	movs	r3, #0
 800b482:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	019b      	lsls	r3, r3, #6
 800b488:	f043 0220 	orr.w	r2, r3, #32
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3301      	adds	r3, #1
 800b494:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	4a08      	ldr	r2, [pc, #32]	; (800b4bc <USB_FlushTxFifo+0x64>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d901      	bls.n	800b4a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	e006      	b.n	800b4b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	f003 0320 	and.w	r3, r3, #32
 800b4aa:	2b20      	cmp	r3, #32
 800b4ac:	d0f0      	beq.n	800b490 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	00030d40 	.word	0x00030d40

0800b4c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	4a11      	ldr	r2, [pc, #68]	; (800b51c <USB_FlushRxFifo+0x5c>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d901      	bls.n	800b4de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b4da:	2303      	movs	r3, #3
 800b4dc:	e018      	b.n	800b510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	daf2      	bge.n	800b4cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2210      	movs	r2, #16
 800b4ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	4a08      	ldr	r2, [pc, #32]	; (800b51c <USB_FlushRxFifo+0x5c>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d901      	bls.n	800b502 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e006      	b.n	800b510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	f003 0310 	and.w	r3, r3, #16
 800b50a:	2b10      	cmp	r3, #16
 800b50c:	d0f0      	beq.n	800b4f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3714      	adds	r7, #20
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr
 800b51c:	00030d40 	.word	0x00030d40

0800b520 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	68f9      	ldr	r1, [r7, #12]
 800b53c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b540:	4313      	orrs	r3, r2
 800b542:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr

0800b552 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b552:	b480      	push	{r7}
 800b554:	b085      	sub	sp, #20
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b56c:	f023 0303 	bic.w	r3, r3, #3
 800b570:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b580:	f043 0302 	orr.w	r3, r3, #2
 800b584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	695b      	ldr	r3, [r3, #20]
 800b5a0:	f003 0301 	and.w	r3, r3, #1
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	4a13      	ldr	r2, [pc, #76]	; (800b614 <USB_CoreReset+0x64>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d901      	bls.n	800b5ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e01b      	b.n	800b606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	daf2      	bge.n	800b5bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	f043 0201 	orr.w	r2, r3, #1
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	4a09      	ldr	r2, [pc, #36]	; (800b614 <USB_CoreReset+0x64>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d901      	bls.n	800b5f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b5f4:	2303      	movs	r3, #3
 800b5f6:	e006      	b.n	800b606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	2b01      	cmp	r3, #1
 800b602:	d0f0      	beq.n	800b5e6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	00030d40 	.word	0x00030d40

0800b618 <calloc>:
 800b618:	4b02      	ldr	r3, [pc, #8]	; (800b624 <calloc+0xc>)
 800b61a:	460a      	mov	r2, r1
 800b61c:	4601      	mov	r1, r0
 800b61e:	6818      	ldr	r0, [r3, #0]
 800b620:	f000 b834 	b.w	800b68c <_calloc_r>
 800b624:	24000020 	.word	0x24000020

0800b628 <__errno>:
 800b628:	4b01      	ldr	r3, [pc, #4]	; (800b630 <__errno+0x8>)
 800b62a:	6818      	ldr	r0, [r3, #0]
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop
 800b630:	24000020 	.word	0x24000020

0800b634 <__libc_init_array>:
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	4d0d      	ldr	r5, [pc, #52]	; (800b66c <__libc_init_array+0x38>)
 800b638:	4c0d      	ldr	r4, [pc, #52]	; (800b670 <__libc_init_array+0x3c>)
 800b63a:	1b64      	subs	r4, r4, r5
 800b63c:	10a4      	asrs	r4, r4, #2
 800b63e:	2600      	movs	r6, #0
 800b640:	42a6      	cmp	r6, r4
 800b642:	d109      	bne.n	800b658 <__libc_init_array+0x24>
 800b644:	4d0b      	ldr	r5, [pc, #44]	; (800b674 <__libc_init_array+0x40>)
 800b646:	4c0c      	ldr	r4, [pc, #48]	; (800b678 <__libc_init_array+0x44>)
 800b648:	f000 f8e8 	bl	800b81c <_init>
 800b64c:	1b64      	subs	r4, r4, r5
 800b64e:	10a4      	asrs	r4, r4, #2
 800b650:	2600      	movs	r6, #0
 800b652:	42a6      	cmp	r6, r4
 800b654:	d105      	bne.n	800b662 <__libc_init_array+0x2e>
 800b656:	bd70      	pop	{r4, r5, r6, pc}
 800b658:	f855 3b04 	ldr.w	r3, [r5], #4
 800b65c:	4798      	blx	r3
 800b65e:	3601      	adds	r6, #1
 800b660:	e7ee      	b.n	800b640 <__libc_init_array+0xc>
 800b662:	f855 3b04 	ldr.w	r3, [r5], #4
 800b666:	4798      	blx	r3
 800b668:	3601      	adds	r6, #1
 800b66a:	e7f2      	b.n	800b652 <__libc_init_array+0x1e>
 800b66c:	0800b87c 	.word	0x0800b87c
 800b670:	0800b87c 	.word	0x0800b87c
 800b674:	0800b87c 	.word	0x0800b87c
 800b678:	0800b880 	.word	0x0800b880

0800b67c <memset>:
 800b67c:	4402      	add	r2, r0
 800b67e:	4603      	mov	r3, r0
 800b680:	4293      	cmp	r3, r2
 800b682:	d100      	bne.n	800b686 <memset+0xa>
 800b684:	4770      	bx	lr
 800b686:	f803 1b01 	strb.w	r1, [r3], #1
 800b68a:	e7f9      	b.n	800b680 <memset+0x4>

0800b68c <_calloc_r>:
 800b68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b68e:	fba1 2402 	umull	r2, r4, r1, r2
 800b692:	b94c      	cbnz	r4, 800b6a8 <_calloc_r+0x1c>
 800b694:	4611      	mov	r1, r2
 800b696:	9201      	str	r2, [sp, #4]
 800b698:	f000 f82e 	bl	800b6f8 <_malloc_r>
 800b69c:	9a01      	ldr	r2, [sp, #4]
 800b69e:	4605      	mov	r5, r0
 800b6a0:	b930      	cbnz	r0, 800b6b0 <_calloc_r+0x24>
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	b003      	add	sp, #12
 800b6a6:	bd30      	pop	{r4, r5, pc}
 800b6a8:	220c      	movs	r2, #12
 800b6aa:	6002      	str	r2, [r0, #0]
 800b6ac:	2500      	movs	r5, #0
 800b6ae:	e7f8      	b.n	800b6a2 <_calloc_r+0x16>
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	f7ff ffe3 	bl	800b67c <memset>
 800b6b6:	e7f4      	b.n	800b6a2 <_calloc_r+0x16>

0800b6b8 <sbrk_aligned>:
 800b6b8:	b570      	push	{r4, r5, r6, lr}
 800b6ba:	4e0e      	ldr	r6, [pc, #56]	; (800b6f4 <sbrk_aligned+0x3c>)
 800b6bc:	460c      	mov	r4, r1
 800b6be:	6831      	ldr	r1, [r6, #0]
 800b6c0:	4605      	mov	r5, r0
 800b6c2:	b911      	cbnz	r1, 800b6ca <sbrk_aligned+0x12>
 800b6c4:	f000 f88c 	bl	800b7e0 <_sbrk_r>
 800b6c8:	6030      	str	r0, [r6, #0]
 800b6ca:	4621      	mov	r1, r4
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f000 f887 	bl	800b7e0 <_sbrk_r>
 800b6d2:	1c43      	adds	r3, r0, #1
 800b6d4:	d00a      	beq.n	800b6ec <sbrk_aligned+0x34>
 800b6d6:	1cc4      	adds	r4, r0, #3
 800b6d8:	f024 0403 	bic.w	r4, r4, #3
 800b6dc:	42a0      	cmp	r0, r4
 800b6de:	d007      	beq.n	800b6f0 <sbrk_aligned+0x38>
 800b6e0:	1a21      	subs	r1, r4, r0
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	f000 f87c 	bl	800b7e0 <_sbrk_r>
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	d101      	bne.n	800b6f0 <sbrk_aligned+0x38>
 800b6ec:	f04f 34ff 	mov.w	r4, #4294967295
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}
 800b6f4:	2400ca40 	.word	0x2400ca40

0800b6f8 <_malloc_r>:
 800b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fc:	1ccd      	adds	r5, r1, #3
 800b6fe:	f025 0503 	bic.w	r5, r5, #3
 800b702:	3508      	adds	r5, #8
 800b704:	2d0c      	cmp	r5, #12
 800b706:	bf38      	it	cc
 800b708:	250c      	movcc	r5, #12
 800b70a:	2d00      	cmp	r5, #0
 800b70c:	4607      	mov	r7, r0
 800b70e:	db01      	blt.n	800b714 <_malloc_r+0x1c>
 800b710:	42a9      	cmp	r1, r5
 800b712:	d905      	bls.n	800b720 <_malloc_r+0x28>
 800b714:	230c      	movs	r3, #12
 800b716:	603b      	str	r3, [r7, #0]
 800b718:	2600      	movs	r6, #0
 800b71a:	4630      	mov	r0, r6
 800b71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b720:	4e2e      	ldr	r6, [pc, #184]	; (800b7dc <_malloc_r+0xe4>)
 800b722:	f000 f86d 	bl	800b800 <__malloc_lock>
 800b726:	6833      	ldr	r3, [r6, #0]
 800b728:	461c      	mov	r4, r3
 800b72a:	bb34      	cbnz	r4, 800b77a <_malloc_r+0x82>
 800b72c:	4629      	mov	r1, r5
 800b72e:	4638      	mov	r0, r7
 800b730:	f7ff ffc2 	bl	800b6b8 <sbrk_aligned>
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	4604      	mov	r4, r0
 800b738:	d14d      	bne.n	800b7d6 <_malloc_r+0xde>
 800b73a:	6834      	ldr	r4, [r6, #0]
 800b73c:	4626      	mov	r6, r4
 800b73e:	2e00      	cmp	r6, #0
 800b740:	d140      	bne.n	800b7c4 <_malloc_r+0xcc>
 800b742:	6823      	ldr	r3, [r4, #0]
 800b744:	4631      	mov	r1, r6
 800b746:	4638      	mov	r0, r7
 800b748:	eb04 0803 	add.w	r8, r4, r3
 800b74c:	f000 f848 	bl	800b7e0 <_sbrk_r>
 800b750:	4580      	cmp	r8, r0
 800b752:	d13a      	bne.n	800b7ca <_malloc_r+0xd2>
 800b754:	6821      	ldr	r1, [r4, #0]
 800b756:	3503      	adds	r5, #3
 800b758:	1a6d      	subs	r5, r5, r1
 800b75a:	f025 0503 	bic.w	r5, r5, #3
 800b75e:	3508      	adds	r5, #8
 800b760:	2d0c      	cmp	r5, #12
 800b762:	bf38      	it	cc
 800b764:	250c      	movcc	r5, #12
 800b766:	4629      	mov	r1, r5
 800b768:	4638      	mov	r0, r7
 800b76a:	f7ff ffa5 	bl	800b6b8 <sbrk_aligned>
 800b76e:	3001      	adds	r0, #1
 800b770:	d02b      	beq.n	800b7ca <_malloc_r+0xd2>
 800b772:	6823      	ldr	r3, [r4, #0]
 800b774:	442b      	add	r3, r5
 800b776:	6023      	str	r3, [r4, #0]
 800b778:	e00e      	b.n	800b798 <_malloc_r+0xa0>
 800b77a:	6822      	ldr	r2, [r4, #0]
 800b77c:	1b52      	subs	r2, r2, r5
 800b77e:	d41e      	bmi.n	800b7be <_malloc_r+0xc6>
 800b780:	2a0b      	cmp	r2, #11
 800b782:	d916      	bls.n	800b7b2 <_malloc_r+0xba>
 800b784:	1961      	adds	r1, r4, r5
 800b786:	42a3      	cmp	r3, r4
 800b788:	6025      	str	r5, [r4, #0]
 800b78a:	bf18      	it	ne
 800b78c:	6059      	strne	r1, [r3, #4]
 800b78e:	6863      	ldr	r3, [r4, #4]
 800b790:	bf08      	it	eq
 800b792:	6031      	streq	r1, [r6, #0]
 800b794:	5162      	str	r2, [r4, r5]
 800b796:	604b      	str	r3, [r1, #4]
 800b798:	4638      	mov	r0, r7
 800b79a:	f104 060b 	add.w	r6, r4, #11
 800b79e:	f000 f835 	bl	800b80c <__malloc_unlock>
 800b7a2:	f026 0607 	bic.w	r6, r6, #7
 800b7a6:	1d23      	adds	r3, r4, #4
 800b7a8:	1af2      	subs	r2, r6, r3
 800b7aa:	d0b6      	beq.n	800b71a <_malloc_r+0x22>
 800b7ac:	1b9b      	subs	r3, r3, r6
 800b7ae:	50a3      	str	r3, [r4, r2]
 800b7b0:	e7b3      	b.n	800b71a <_malloc_r+0x22>
 800b7b2:	6862      	ldr	r2, [r4, #4]
 800b7b4:	42a3      	cmp	r3, r4
 800b7b6:	bf0c      	ite	eq
 800b7b8:	6032      	streq	r2, [r6, #0]
 800b7ba:	605a      	strne	r2, [r3, #4]
 800b7bc:	e7ec      	b.n	800b798 <_malloc_r+0xa0>
 800b7be:	4623      	mov	r3, r4
 800b7c0:	6864      	ldr	r4, [r4, #4]
 800b7c2:	e7b2      	b.n	800b72a <_malloc_r+0x32>
 800b7c4:	4634      	mov	r4, r6
 800b7c6:	6876      	ldr	r6, [r6, #4]
 800b7c8:	e7b9      	b.n	800b73e <_malloc_r+0x46>
 800b7ca:	230c      	movs	r3, #12
 800b7cc:	603b      	str	r3, [r7, #0]
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	f000 f81c 	bl	800b80c <__malloc_unlock>
 800b7d4:	e7a1      	b.n	800b71a <_malloc_r+0x22>
 800b7d6:	6025      	str	r5, [r4, #0]
 800b7d8:	e7de      	b.n	800b798 <_malloc_r+0xa0>
 800b7da:	bf00      	nop
 800b7dc:	2400ca3c 	.word	0x2400ca3c

0800b7e0 <_sbrk_r>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	4d06      	ldr	r5, [pc, #24]	; (800b7fc <_sbrk_r+0x1c>)
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	4608      	mov	r0, r1
 800b7ea:	602b      	str	r3, [r5, #0]
 800b7ec:	f7f6 f9be 	bl	8001b6c <_sbrk>
 800b7f0:	1c43      	adds	r3, r0, #1
 800b7f2:	d102      	bne.n	800b7fa <_sbrk_r+0x1a>
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	b103      	cbz	r3, 800b7fa <_sbrk_r+0x1a>
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	bd38      	pop	{r3, r4, r5, pc}
 800b7fc:	2400ca44 	.word	0x2400ca44

0800b800 <__malloc_lock>:
 800b800:	4801      	ldr	r0, [pc, #4]	; (800b808 <__malloc_lock+0x8>)
 800b802:	f000 b809 	b.w	800b818 <__retarget_lock_acquire_recursive>
 800b806:	bf00      	nop
 800b808:	2400ca48 	.word	0x2400ca48

0800b80c <__malloc_unlock>:
 800b80c:	4801      	ldr	r0, [pc, #4]	; (800b814 <__malloc_unlock+0x8>)
 800b80e:	f000 b804 	b.w	800b81a <__retarget_lock_release_recursive>
 800b812:	bf00      	nop
 800b814:	2400ca48 	.word	0x2400ca48

0800b818 <__retarget_lock_acquire_recursive>:
 800b818:	4770      	bx	lr

0800b81a <__retarget_lock_release_recursive>:
 800b81a:	4770      	bx	lr

0800b81c <_init>:
 800b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81e:	bf00      	nop
 800b820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b822:	bc08      	pop	{r3}
 800b824:	469e      	mov	lr, r3
 800b826:	4770      	bx	lr

0800b828 <_fini>:
 800b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82a:	bf00      	nop
 800b82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b82e:	bc08      	pop	{r3}
 800b830:	469e      	mov	lr, r3
 800b832:	4770      	bx	lr
