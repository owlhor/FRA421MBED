
L010_WWDG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800290c  0800290c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800290c  0800290c  0001290c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002914  08002914  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002914  08002914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002918  08002918  00012918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800291c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002928  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002928  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000819b  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017e0  00000000  00000000  00028212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  000299f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000569  00000000  00000000  0002a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000103ea  00000000  00000000  0002a681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aad3  00000000  00000000  0003aa6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00061e9e  00000000  00000000  0004553e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000017d8  00000000  00000000  000a73dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000a8bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002888 	.word	0x08002888

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002888 	.word	0x08002888

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa9c 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f86c 	bl	800058c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ///////// Blink LD2 every Reset happen
  MX_GPIO_Init();
 80004b4:	f000 f950 	bl	8000758 <MX_GPIO_Init>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80004b8:	23a0      	movs	r3, #160	; 0xa0
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	2201      	movs	r2, #1
 80004be:	2120      	movs	r1, #32
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fd82 	bl	8000fca <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80004c6:	23fa      	movs	r3, #250	; 0xfa
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fafc 	bl	8000ac8 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004d0:	23a0      	movs	r3, #160	; 0xa0
 80004d2:	05db      	lsls	r3, r3, #23
 80004d4:	2200      	movs	r2, #0
 80004d6:	2120      	movs	r1, #32
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fd76 	bl	8000fca <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80004de:	23fa      	movs	r3, #250	; 0xfa
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 faf0 	bl	8000ac8 <HAL_Delay>
  ///////////////////// Watchdog can only be enable / cant close during work

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f936 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8e2 	bl	80006b4 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 80004f0:	f000 f8c0 	bl	8000674 <MX_IWDG_Init>
  MX_WWDG_Init();
 80004f4:	f000 f90e 	bl	8000714 <MX_WWDG_Init>
	   * Prescalr = 64
	   * Reload = 4095
	   * (1/37KHz)* Prescalr * Reload = 7.08 sec
	   * */

	  if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin)== GPIO_PIN_RESET){
 80004f8:	23a0      	movs	r3, #160	; 0xa0
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2101      	movs	r1, #1
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fd46 	bl	8000f90 <HAL_GPIO_ReadPin>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d107      	bne.n	8000518 <main+0x70>
		  //// Refresh at 70ms -> CPU reset
		  HAL_Delay(70);
 8000508:	2046      	movs	r0, #70	; 0x46
 800050a:	f000 fadd 	bl	8000ac8 <HAL_Delay>
		  HAL_WWDG_Refresh(&hwwdg);
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <main+0xd8>)
 8000510:	0018      	movs	r0, r3
 8000512:	f002 f97e 	bl	8002812 <HAL_WWDG_Refresh>
 8000516:	e02d      	b.n	8000574 <main+0xcc>
	  }
	  else if(HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin)== GPIO_PIN_RESET){
 8000518:	23a0      	movs	r3, #160	; 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2102      	movs	r1, #2
 800051e:	0018      	movs	r0, r3
 8000520:	f000 fd36 	bl	8000f90 <HAL_GPIO_ReadPin>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d107      	bne.n	8000538 <main+0x90>
		  //// Refresh at 20ms -> CPU reset
		  HAL_Delay(20);
 8000528:	2014      	movs	r0, #20
 800052a:	f000 facd 	bl	8000ac8 <HAL_Delay>
		  HAL_WWDG_Refresh(&hwwdg);
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <main+0xd8>)
 8000530:	0018      	movs	r0, r3
 8000532:	f002 f96e 	bl	8002812 <HAL_WWDG_Refresh>
 8000536:	e01d      	b.n	8000574 <main+0xcc>
	  }
	  else if(HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin)== GPIO_PIN_RESET){
 8000538:	23a0      	movs	r3, #160	; 0xa0
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	2110      	movs	r1, #16
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fd26 	bl	8000f90 <HAL_GPIO_ReadPin>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d10e      	bne.n	8000566 <main+0xbe>
	  		  //// Stop Main CLK -> CPU & WWDG will be reset -> IWDG reset instead
		  HAL_SuspendTick();
 8000548:	f000 fae2 	bl	8000b10 <HAL_SuspendTick>
		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <main+0xdc>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <main+0xdc>)
 8000552:	2104      	movs	r1, #4
 8000554:	430a      	orrs	r2, r1
 8000556:	601a      	str	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode(PWR_REGULATOR_VOLTAGE_SCALE1,PWR_STOPENTRY_WFE);
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	2102      	movs	r1, #2
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fdb2 	bl	80010c8 <HAL_PWR_EnterSTOPMode>
 8000564:	e006      	b.n	8000574 <main+0xcc>
	  	 }
	  else{
		  HAL_Delay(50);
 8000566:	2032      	movs	r0, #50	; 0x32
 8000568:	f000 faae 	bl	8000ac8 <HAL_Delay>
		  HAL_WWDG_Refresh(&hwwdg);
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <main+0xd8>)
 800056e:	0018      	movs	r0, r3
 8000570:	f002 f94f 	bl	8002812 <HAL_WWDG_Refresh>
	  }

	  // Refresh IWDG
	  HAL_IWDG_Refresh(&hiwdg);
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <main+0xe0>)
 8000576:	0018      	movs	r0, r3
 8000578:	f000 fd96 	bl	80010a8 <HAL_IWDG_Refresh>
	  if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin)== GPIO_PIN_RESET){
 800057c:	e7bc      	b.n	80004f8 <main+0x50>
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	200000bc 	.word	0x200000bc
 8000584:	40007000 	.word	0x40007000
 8000588:	20000028 	.word	0x20000028

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b099      	sub	sp, #100	; 0x64
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	242c      	movs	r4, #44	; 0x2c
 8000594:	193b      	adds	r3, r7, r4
 8000596:	0018      	movs	r0, r3
 8000598:	2334      	movs	r3, #52	; 0x34
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f002 f946 	bl	800282e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	2318      	movs	r3, #24
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	0018      	movs	r0, r3
 80005a8:	2314      	movs	r3, #20
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f002 f93e 	bl	800282e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	2318      	movs	r3, #24
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f002 f937 	bl	800282e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	4b2a      	ldr	r3, [pc, #168]	; (800066c <SystemClock_Config+0xe0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a2a      	ldr	r2, [pc, #168]	; (8000670 <SystemClock_Config+0xe4>)
 80005c6:	401a      	ands	r2, r3
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <SystemClock_Config+0xe0>)
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	0109      	lsls	r1, r1, #4
 80005ce:	430a      	orrs	r2, r1
 80005d0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2209      	movs	r2, #9
 80005d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	22a0      	movs	r2, #160	; 0xa0
 80005dc:	02d2      	lsls	r2, r2, #11
 80005de:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005e0:	0021      	movs	r1, r4
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2202      	movs	r2, #2
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	0252      	lsls	r2, r2, #9
 80005f4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	22c0      	movs	r2, #192	; 0xc0
 80005fa:	0312      	lsls	r2, r2, #12
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	03d2      	lsls	r2, r2, #15
 8000604:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	187b      	adds	r3, r7, r1
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fdb9 	bl	8001180 <HAL_RCC_OscConfig>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000612:	f000 f915 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	2118      	movs	r1, #24
 8000618:	187b      	adds	r3, r7, r1
 800061a:	220f      	movs	r2, #15
 800061c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2203      	movs	r2, #3
 8000622:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2101      	movs	r1, #1
 800063a:	0018      	movs	r0, r3
 800063c:	f001 f91c 	bl	8001878 <HAL_RCC_ClockConfig>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000644:	f000 f8fc 	bl	8000840 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000648:	003b      	movs	r3, r7
 800064a:	2202      	movs	r2, #2
 800064c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800064e:	003b      	movs	r3, r7
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000654:	003b      	movs	r3, r7
 8000656:	0018      	movs	r0, r3
 8000658:	f001 fb32 	bl	8001cc0 <HAL_RCCEx_PeriphCLKConfig>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000660:	f000 f8ee 	bl	8000840 <Error_Handler>
  }
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b019      	add	sp, #100	; 0x64
 800066a:	bd90      	pop	{r4, r7, pc}
 800066c:	40007000 	.word	0x40007000
 8000670:	ffffe7ff 	.word	0xffffe7ff

08000674 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_IWDG_Init+0x34>)
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <MX_IWDG_Init+0x38>)
 800067c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_IWDG_Init+0x34>)
 8000680:	2204      	movs	r2, #4
 8000682:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_IWDG_Init+0x34>)
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <MX_IWDG_Init+0x3c>)
 8000688:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_IWDG_Init+0x34>)
 800068c:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <MX_IWDG_Init+0x3c>)
 800068e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MX_IWDG_Init+0x34>)
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fcb6 	bl	8001004 <HAL_IWDG_Init>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 800069c:	f000 f8d0 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000028 	.word	0x20000028
 80006ac:	40003000 	.word	0x40003000
 80006b0:	00000fff 	.word	0x00000fff

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ba:	4a15      	ldr	r2, [pc, #84]	; (8000710 <MX_USART2_UART_Init+0x5c>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c0:	22e1      	movs	r2, #225	; 0xe1
 80006c2:	0252      	lsls	r2, r2, #9
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 fc07 	bl	8001f0c <HAL_UART_Init>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 f89d 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000038 	.word	0x20000038
 8000710:	40004400 	.word	0x40004400

08000714 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MX_WWDG_Init+0x3c>)
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <MX_WWDG_Init+0x40>)
 800071c:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_WWDG_Init+0x3c>)
 8000720:	22c0      	movs	r2, #192	; 0xc0
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 100;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_WWDG_Init+0x3c>)
 8000728:	2264      	movs	r2, #100	; 0x64
 800072a:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_WWDG_Init+0x3c>)
 800072e:	227f      	movs	r2, #127	; 0x7f
 8000730:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_WWDG_Init+0x3c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <MX_WWDG_Init+0x3c>)
 800073a:	0018      	movs	r0, r3
 800073c:	f002 f844 	bl	80027c8 <HAL_WWDG_Init>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 8000744:	f000 f87c 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	200000bc 	.word	0x200000bc
 8000754:	40002c00 	.word	0x40002c00

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	240c      	movs	r4, #12
 8000760:	193b      	adds	r3, r7, r4
 8000762:	0018      	movs	r0, r3
 8000764:	2314      	movs	r3, #20
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f002 f860 	bl	800282e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b32      	ldr	r3, [pc, #200]	; (8000838 <MX_GPIO_Init+0xe0>)
 8000770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <MX_GPIO_Init+0xe0>)
 8000774:	2104      	movs	r1, #4
 8000776:	430a      	orrs	r2, r1
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <MX_GPIO_Init+0xe0>)
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	2204      	movs	r2, #4
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_GPIO_Init+0xe0>)
 8000788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <MX_GPIO_Init+0xe0>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	430a      	orrs	r2, r1
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
 8000792:	4b29      	ldr	r3, [pc, #164]	; (8000838 <MX_GPIO_Init+0xe0>)
 8000794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	4013      	ands	r3, r2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_GPIO_Init+0xe0>)
 80007a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_GPIO_Init+0xe0>)
 80007a4:	2101      	movs	r1, #1
 80007a6:	430a      	orrs	r2, r1
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_GPIO_Init+0xe0>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ae:	2201      	movs	r2, #1
 80007b0:	4013      	ands	r3, r2
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b6:	23a0      	movs	r3, #160	; 0xa0
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fc03 	bl	8000fca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	0192      	lsls	r2, r2, #6
 80007ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2284      	movs	r2, #132	; 0x84
 80007d0:	0392      	lsls	r2, r2, #14
 80007d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	4a17      	ldr	r2, [pc, #92]	; (800083c <MX_GPIO_Init+0xe4>)
 80007de:	0019      	movs	r1, r3
 80007e0:	0010      	movs	r0, r2
 80007e2:	f000 fa57 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2213      	movs	r2, #19
 80007ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	193a      	adds	r2, r7, r4
 80007fa:	23a0      	movs	r3, #160	; 0xa0
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fa47 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000806:	0021      	movs	r1, r4
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2220      	movs	r2, #32
 800080c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2201      	movs	r2, #1
 8000812:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000820:	187a      	adds	r2, r7, r1
 8000822:	23a0      	movs	r3, #160	; 0xa0
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fa33 	bl	8000c94 <HAL_GPIO_Init>

}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b009      	add	sp, #36	; 0x24
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40021000 	.word	0x40021000
 800083c:	50000800 	.word	0x50000800

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <HAL_MspInit+0x24>)
 8000852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_MspInit+0x24>)
 8000856:	2101      	movs	r1, #1
 8000858:	430a      	orrs	r2, r1
 800085a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <HAL_MspInit+0x24>)
 800085e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <HAL_MspInit+0x24>)
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	0549      	lsls	r1, r1, #21
 8000866:	430a      	orrs	r2, r1
 8000868:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b089      	sub	sp, #36	; 0x24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	240c      	movs	r4, #12
 800087e:	193b      	adds	r3, r7, r4
 8000880:	0018      	movs	r0, r3
 8000882:	2314      	movs	r3, #20
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f001 ffd1 	bl	800282e <memset>
  if(huart->Instance==USART2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0x80>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d129      	bne.n	80008ea <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <HAL_UART_MspInit+0x84>)
 8000898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <HAL_UART_MspInit+0x84>)
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	0289      	lsls	r1, r1, #10
 80008a0:	430a      	orrs	r2, r1
 80008a2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_UART_MspInit+0x84>)
 80008a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <HAL_UART_MspInit+0x84>)
 80008aa:	2101      	movs	r1, #1
 80008ac:	430a      	orrs	r2, r1
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_UART_MspInit+0x84>)
 80008b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b4:	2201      	movs	r2, #1
 80008b6:	4013      	ands	r3, r2
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008bc:	0021      	movs	r1, r4
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	220c      	movs	r2, #12
 80008c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2202      	movs	r2, #2
 80008c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2203      	movs	r2, #3
 80008d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2204      	movs	r2, #4
 80008da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	187a      	adds	r2, r7, r1
 80008de:	23a0      	movs	r3, #160	; 0xa0
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	0011      	movs	r1, r2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 f9d5 	bl	8000c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b009      	add	sp, #36	; 0x24
 80008f0:	bd90      	pop	{r4, r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40004400 	.word	0x40004400
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_WWDG_MspInit+0x28>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <HAL_WWDG_MspInit+0x20>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_WWDG_MspInit+0x2c>)
 8000910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_WWDG_MspInit+0x2c>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0109      	lsls	r1, r1, #4
 8000918:	430a      	orrs	r2, r1
 800091a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40002c00 	.word	0x40002c00
 8000928:	40021000 	.word	0x40021000

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f89e 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000964:	4813      	ldr	r0, [pc, #76]	; (80009b4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000966:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000968:	4813      	ldr	r0, [pc, #76]	; (80009b8 <LoopForever+0x6>)
    LDR R1, [R0]
 800096a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800096c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <LoopForever+0xa>)
    CMP R1, R2
 8000970:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000972:	d105      	bne.n	8000980 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000976:	4913      	ldr	r1, [pc, #76]	; (80009c4 <LoopForever+0x12>)
    STR R1, [R0]
 8000978:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800097a:	4813      	ldr	r0, [pc, #76]	; (80009c8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800097c:	4913      	ldr	r1, [pc, #76]	; (80009cc <LoopForever+0x1a>)
    STR R1, [R0]
 800097e:	6001      	str	r1, [r0, #0]

08000980 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000982:	4914      	ldr	r1, [pc, #80]	; (80009d4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000984:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <LoopForever+0x26>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a11      	ldr	r2, [pc, #68]	; (80009dc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000998:	4c11      	ldr	r4, [pc, #68]	; (80009e0 <LoopForever+0x2e>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009a6:	f7ff ffd8 	bl	800095a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f001 ff49 	bl	8002840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fd7b 	bl	80004a8 <main>

080009b2 <LoopForever>:

LoopForever:
    b LoopForever
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
   ldr   r0, =_estack
 80009b4:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 80009b8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009bc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80009c0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80009c4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009c8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009cc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d8:	0800291c 	.word	0x0800291c
  ldr r2, =_sbss
 80009dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e0:	200000d4 	.word	0x200000d4

080009e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_IRQHandler>
	...

080009e8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_Init+0x3c>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_Init+0x3c>)
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	430a      	orrs	r2, r1
 80009fe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 f811 	bl	8000a28 <HAL_InitTick>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d003      	beq.n	8000a12 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e001      	b.n	8000a16 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a12:	f7ff ff1b 	bl	800084c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	40022000 	.word	0x40022000

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_InitTick+0x5c>)
 8000a32:	681c      	ldr	r4, [r3, #0]
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_InitTick+0x60>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	0019      	movs	r1, r3
 8000a3a:	23fa      	movs	r3, #250	; 0xfa
 8000a3c:	0098      	lsls	r0, r3, #2
 8000a3e:	f7ff fb63 	bl	8000108 <__udivsi3>
 8000a42:	0003      	movs	r3, r0
 8000a44:	0019      	movs	r1, r3
 8000a46:	0020      	movs	r0, r4
 8000a48:	f7ff fb5e 	bl	8000108 <__udivsi3>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 f913 	bl	8000c7a <HAL_SYSTICK_Config>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e00f      	b.n	8000a7c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d80b      	bhi.n	8000a7a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	2301      	movs	r3, #1
 8000a66:	425b      	negs	r3, r3
 8000a68:	2200      	movs	r2, #0
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 f8f0 	bl	8000c50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_InitTick+0x64>)
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b003      	add	sp, #12
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	001a      	movs	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	18d2      	adds	r2, r2, r3
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	200000d0 	.word	0x200000d0

08000ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	200000d0 	.word	0x200000d0

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff fff0 	bl	8000ab4 <HAL_GetTick>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_Delay+0x44>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	189b      	adds	r3, r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	f7ff ffe0 	bl	8000ab4 <HAL_GetTick>
 8000af4:	0002      	movs	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b004      	add	sp, #16
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	20000008 	.word	0x20000008

08000b10 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <HAL_SuspendTick+0x18>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_SuspendTick+0x18>)
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	438a      	bics	r2, r1
 8000b1e:	601a      	str	r2, [r3, #0]
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	0002      	movs	r2, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b40:	d828      	bhi.n	8000b94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b42:	4a2f      	ldr	r2, [pc, #188]	; (8000c00 <__NVIC_SetPriority+0xd4>)
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b25b      	sxtb	r3, r3
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	33c0      	adds	r3, #192	; 0xc0
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	589b      	ldr	r3, [r3, r2]
 8000b52:	1dfa      	adds	r2, r7, #7
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	0011      	movs	r1, r2
 8000b58:	2203      	movs	r2, #3
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	00d2      	lsls	r2, r2, #3
 8000b5e:	21ff      	movs	r1, #255	; 0xff
 8000b60:	4091      	lsls	r1, r2
 8000b62:	000a      	movs	r2, r1
 8000b64:	43d2      	mvns	r2, r2
 8000b66:	401a      	ands	r2, r3
 8000b68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	019b      	lsls	r3, r3, #6
 8000b6e:	22ff      	movs	r2, #255	; 0xff
 8000b70:	401a      	ands	r2, r3
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0018      	movs	r0, r3
 8000b78:	2303      	movs	r3, #3
 8000b7a:	4003      	ands	r3, r0
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b80:	481f      	ldr	r0, [pc, #124]	; (8000c00 <__NVIC_SetPriority+0xd4>)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	33c0      	adds	r3, #192	; 0xc0
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b92:	e031      	b.n	8000bf8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <__NVIC_SetPriority+0xd8>)
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	400b      	ands	r3, r1
 8000ba0:	3b08      	subs	r3, #8
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	3306      	adds	r3, #6
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	3304      	adds	r3, #4
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	1dfa      	adds	r2, r7, #7
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	400a      	ands	r2, r1
 8000bb8:	00d2      	lsls	r2, r2, #3
 8000bba:	21ff      	movs	r1, #255	; 0xff
 8000bbc:	4091      	lsls	r1, r2
 8000bbe:	000a      	movs	r2, r1
 8000bc0:	43d2      	mvns	r2, r2
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	019b      	lsls	r3, r3, #6
 8000bca:	22ff      	movs	r2, #255	; 0xff
 8000bcc:	401a      	ands	r2, r3
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	4003      	ands	r3, r0
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <__NVIC_SetPriority+0xd8>)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	001c      	movs	r4, r3
 8000be4:	230f      	movs	r3, #15
 8000be6:	4023      	ands	r3, r4
 8000be8:	3b08      	subs	r3, #8
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	430a      	orrs	r2, r1
 8000bee:	3306      	adds	r3, #6
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	18c3      	adds	r3, r0, r3
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b003      	add	sp, #12
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	1e5a      	subs	r2, r3, #1
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	045b      	lsls	r3, r3, #17
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d301      	bcc.n	8000c20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e010      	b.n	8000c42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <SysTick_Config+0x44>)
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	3a01      	subs	r2, #1
 8000c26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c28:	2301      	movs	r3, #1
 8000c2a:	425b      	negs	r3, r3
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff ff7c 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x44>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x44>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	0018      	movs	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	1c02      	adds	r2, r0, #0
 8000c60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff ff5d 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b004      	add	sp, #16
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ffbf 	bl	8000c08 <SysTick_Config>
 8000c8a:	0003      	movs	r3, r0
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000caa:	e155      	b.n	8000f58 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	000a      	movs	r2, r1
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d100      	bne.n	8000cc4 <HAL_GPIO_Init+0x30>
 8000cc2:	e146      	b.n	8000f52 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2203      	movs	r2, #3
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d005      	beq.n	8000cdc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d130      	bne.n	8000d3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	409a      	lsls	r2, r3
 8000cfe:	0013      	movs	r3, r2
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d12:	2201      	movs	r2, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	091b      	lsrs	r3, r3, #4
 8000d28:	2201      	movs	r2, #1
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2203      	movs	r2, #3
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d017      	beq.n	8000d7a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2203      	movs	r2, #3
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d123      	bne.n	8000dce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	08da      	lsrs	r2, r3, #3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	0092      	lsls	r2, r2, #2
 8000d90:	58d3      	ldr	r3, [r2, r3]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2207      	movs	r2, #7
 8000d98:	4013      	ands	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2107      	movs	r1, #7
 8000db2:	400b      	ands	r3, r1
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	0092      	lsls	r2, r2, #2
 8000dca:	6939      	ldr	r1, [r7, #16]
 8000dcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2203      	movs	r2, #3
 8000dec:	401a      	ands	r2, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	23c0      	movs	r3, #192	; 0xc0
 8000e08:	029b      	lsls	r3, r3, #10
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d100      	bne.n	8000e10 <HAL_GPIO_Init+0x17c>
 8000e0e:	e0a0      	b.n	8000f52 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e10:	4b57      	ldr	r3, [pc, #348]	; (8000f70 <HAL_GPIO_Init+0x2dc>)
 8000e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e14:	4b56      	ldr	r3, [pc, #344]	; (8000f70 <HAL_GPIO_Init+0x2dc>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e1c:	4a55      	ldr	r2, [pc, #340]	; (8000f74 <HAL_GPIO_Init+0x2e0>)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3302      	adds	r3, #2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	589b      	ldr	r3, [r3, r2]
 8000e28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4013      	ands	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	409a      	lsls	r2, r3
 8000e36:	0013      	movs	r3, r2
 8000e38:	43da      	mvns	r2, r3
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	23a0      	movs	r3, #160	; 0xa0
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d01f      	beq.n	8000e8a <HAL_GPIO_Init+0x1f6>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4a      	ldr	r2, [pc, #296]	; (8000f78 <HAL_GPIO_Init+0x2e4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d019      	beq.n	8000e86 <HAL_GPIO_Init+0x1f2>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a49      	ldr	r2, [pc, #292]	; (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0x1ee>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a48      	ldr	r2, [pc, #288]	; (8000f80 <HAL_GPIO_Init+0x2ec>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00d      	beq.n	8000e7e <HAL_GPIO_Init+0x1ea>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a47      	ldr	r2, [pc, #284]	; (8000f84 <HAL_GPIO_Init+0x2f0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0x1e6>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a46      	ldr	r2, [pc, #280]	; (8000f88 <HAL_GPIO_Init+0x2f4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_GPIO_Init+0x1e2>
 8000e72:	2305      	movs	r3, #5
 8000e74:	e00a      	b.n	8000e8c <HAL_GPIO_Init+0x1f8>
 8000e76:	2306      	movs	r3, #6
 8000e78:	e008      	b.n	8000e8c <HAL_GPIO_Init+0x1f8>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x1f8>
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e004      	b.n	8000e8c <HAL_GPIO_Init+0x1f8>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x1f8>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_GPIO_Init+0x1f8>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	2103      	movs	r1, #3
 8000e90:	400a      	ands	r2, r1
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e9c:	4935      	ldr	r1, [pc, #212]	; (8000f74 <HAL_GPIO_Init+0x2e0>)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eaa:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <HAL_GPIO_Init+0x2f8>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	025b      	lsls	r3, r3, #9
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <HAL_GPIO_Init+0x2f8>)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <HAL_GPIO_Init+0x2f8>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43da      	mvns	r2, r3
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	029b      	lsls	r3, r3, #10
 8000eec:	4013      	ands	r3, r2
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <HAL_GPIO_Init+0x2f8>)
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <HAL_GPIO_Init+0x2f8>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	035b      	lsls	r3, r3, #13
 8000f16:	4013      	ands	r3, r2
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <HAL_GPIO_Init+0x2f8>)
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_GPIO_Init+0x2f8>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43da      	mvns	r2, r3
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	039b      	lsls	r3, r3, #14
 8000f40:	4013      	ands	r3, r2
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_GPIO_Init+0x2f8>)
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	40da      	lsrs	r2, r3
 8000f60:	1e13      	subs	r3, r2, #0
 8000f62:	d000      	beq.n	8000f66 <HAL_GPIO_Init+0x2d2>
 8000f64:	e6a2      	b.n	8000cac <HAL_GPIO_Init+0x18>
  }
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b006      	add	sp, #24
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000
 8000f78:	50000400 	.word	0x50000400
 8000f7c:	50000800 	.word	0x50000800
 8000f80:	50000c00 	.word	0x50000c00
 8000f84:	50001000 	.word	0x50001000
 8000f88:	50001c00 	.word	0x50001c00
 8000f8c:	40010400 	.word	0x40010400

08000f90 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	000a      	movs	r2, r1
 8000f9a:	1cbb      	adds	r3, r7, #2
 8000f9c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	1cba      	adds	r2, r7, #2
 8000fa4:	8812      	ldrh	r2, [r2, #0]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d004      	beq.n	8000fb4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000faa:	230f      	movs	r3, #15
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e003      	b.n	8000fbc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	781b      	ldrb	r3, [r3, #0]
}
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b004      	add	sp, #16
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	0008      	movs	r0, r1
 8000fd4:	0011      	movs	r1, r2
 8000fd6:	1cbb      	adds	r3, r7, #2
 8000fd8:	1c02      	adds	r2, r0, #0
 8000fda:	801a      	strh	r2, [r3, #0]
 8000fdc:	1c7b      	adds	r3, r7, #1
 8000fde:	1c0a      	adds	r2, r1, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe2:	1c7b      	adds	r3, r7, #1
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d004      	beq.n	8000ff4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fea:	1cbb      	adds	r3, r7, #2
 8000fec:	881a      	ldrh	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ff2:	e003      	b.n	8000ffc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000ff4:	1cbb      	adds	r3, r7, #2
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e03d      	b.n	8001092 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a20      	ldr	r2, [pc, #128]	; (800109c <HAL_IWDG_Init+0x98>)
 800101c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1f      	ldr	r2, [pc, #124]	; (80010a0 <HAL_IWDG_Init+0x9c>)
 8001024:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6852      	ldr	r2, [r2, #4]
 800102e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6892      	ldr	r2, [r2, #8]
 8001038:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800103a:	f7ff fd3b 	bl	8000ab4 <HAL_GetTick>
 800103e:	0003      	movs	r3, r0
 8001040:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001042:	e00e      	b.n	8001062 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001044:	f7ff fd36 	bl	8000ab4 <HAL_GetTick>
 8001048:	0002      	movs	r2, r0
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b2a      	cmp	r3, #42	; 0x2a
 8001050:	d907      	bls.n	8001062 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	2207      	movs	r2, #7
 800105a:	4013      	ands	r3, r2
 800105c:	d001      	beq.n	8001062 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e017      	b.n	8001092 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2207      	movs	r2, #7
 800106a:	4013      	ands	r3, r2
 800106c:	d1ea      	bne.n	8001044 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d005      	beq.n	8001088 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68d2      	ldr	r2, [r2, #12]
 8001084:	611a      	str	r2, [r3, #16]
 8001086:	e003      	b.n	8001090 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <HAL_IWDG_Init+0xa0>)
 800108e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b004      	add	sp, #16
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	0000cccc 	.word	0x0000cccc
 80010a0:	00005555 	.word	0x00005555
 80010a4:	0000aaaa 	.word	0x0000aaaa

080010a8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a03      	ldr	r2, [pc, #12]	; (80010c4 <HAL_IWDG_Refresh+0x1c>)
 80010b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	0000aaaa 	.word	0x0000aaaa

080010c8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	000a      	movs	r2, r1
 80010d2:	1cfb      	adds	r3, r7, #3
 80010d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <HAL_PWR_EnterSTOPMode+0xa8>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_PWR_EnterSTOPMode+0xac>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	2201      	movs	r2, #1
 80010ec:	4013      	ands	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <HAL_PWR_EnterSTOPMode+0x40>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <HAL_PWR_EnterSTOPMode+0xa8>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001102:	491d      	ldr	r1, [pc, #116]	; (8001178 <HAL_PWR_EnterSTOPMode+0xb0>)
 8001104:	400a      	ands	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_PWR_EnterSTOPMode+0xa8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2203      	movs	r2, #3
 8001112:	4393      	bics	r3, r2
 8001114:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4313      	orrs	r3, r2
 800111c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_PWR_EnterSTOPMode+0xb4>)
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_PWR_EnterSTOPMode+0xb4>)
 800112a:	2104      	movs	r1, #4
 800112c:	430a      	orrs	r2, r1
 800112e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001130:	1cfb      	adds	r3, r7, #3
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001138:	bf30      	wfi
 800113a:	e002      	b.n	8001142 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800113c:	bf40      	sev
    __WFE();
 800113e:	bf20      	wfe
    __WFE();
 8001140:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_PWR_EnterSTOPMode+0xb4>)
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_PWR_EnterSTOPMode+0xb4>)
 8001148:	2104      	movs	r1, #4
 800114a:	438a      	bics	r2, r1
 800114c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d009      	beq.n	8001168 <HAL_PWR_EnterSTOPMode+0xa0>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_PWR_EnterSTOPMode+0xa8>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	0089      	lsls	r1, r1, #2
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
  }
}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b006      	add	sp, #24
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40007000 	.word	0x40007000
 8001174:	40010000 	.word	0x40010000
 8001178:	fffffdff 	.word	0xfffffdff
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	f000 fb6c 	bl	800186c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001194:	4bc8      	ldr	r3, [pc, #800]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	220c      	movs	r2, #12
 800119a:	4013      	ands	r3, r2
 800119c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800119e:	4bc6      	ldr	r3, [pc, #792]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	025b      	lsls	r3, r3, #9
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2201      	movs	r2, #1
 80011b0:	4013      	ands	r3, r2
 80011b2:	d100      	bne.n	80011b6 <HAL_RCC_OscConfig+0x36>
 80011b4:	e07d      	b.n	80012b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d007      	beq.n	80011cc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	d112      	bne.n	80011e8 <HAL_RCC_OscConfig+0x68>
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	025b      	lsls	r3, r3, #9
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d10d      	bne.n	80011e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	4bba      	ldr	r3, [pc, #744]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	029b      	lsls	r3, r3, #10
 80011d4:	4013      	ands	r3, r2
 80011d6:	d100      	bne.n	80011da <HAL_RCC_OscConfig+0x5a>
 80011d8:	e06a      	b.n	80012b0 <HAL_RCC_OscConfig+0x130>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d166      	bne.n	80012b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	f000 fb42 	bl	800186c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	025b      	lsls	r3, r3, #9
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d107      	bne.n	8001204 <HAL_RCC_OscConfig+0x84>
 80011f4:	4bb0      	ldr	r3, [pc, #704]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4baf      	ldr	r3, [pc, #700]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	0249      	lsls	r1, r1, #9
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e027      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	23a0      	movs	r3, #160	; 0xa0
 800120a:	02db      	lsls	r3, r3, #11
 800120c:	429a      	cmp	r2, r3
 800120e:	d10e      	bne.n	800122e <HAL_RCC_OscConfig+0xae>
 8001210:	4ba9      	ldr	r3, [pc, #676]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4ba8      	ldr	r3, [pc, #672]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001216:	2180      	movs	r1, #128	; 0x80
 8001218:	02c9      	lsls	r1, r1, #11
 800121a:	430a      	orrs	r2, r1
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	4ba6      	ldr	r3, [pc, #664]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4ba5      	ldr	r3, [pc, #660]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	0249      	lsls	r1, r1, #9
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	e012      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 800122e:	4ba2      	ldr	r3, [pc, #648]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4ba1      	ldr	r3, [pc, #644]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001234:	49a1      	ldr	r1, [pc, #644]	; (80014bc <HAL_RCC_OscConfig+0x33c>)
 8001236:	400a      	ands	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	4b9f      	ldr	r3, [pc, #636]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	025b      	lsls	r3, r3, #9
 8001242:	4013      	ands	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4b9b      	ldr	r3, [pc, #620]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b9a      	ldr	r3, [pc, #616]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 800124e:	499c      	ldr	r1, [pc, #624]	; (80014c0 <HAL_RCC_OscConfig+0x340>)
 8001250:	400a      	ands	r2, r1
 8001252:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d014      	beq.n	8001286 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fc2a 	bl	8000ab4 <HAL_GetTick>
 8001260:	0003      	movs	r3, r0
 8001262:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001266:	f7ff fc25 	bl	8000ab4 <HAL_GetTick>
 800126a:	0002      	movs	r2, r0
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b64      	cmp	r3, #100	; 0x64
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e2f9      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001278:	4b8f      	ldr	r3, [pc, #572]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	029b      	lsls	r3, r3, #10
 8001280:	4013      	ands	r3, r2
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0xe6>
 8001284:	e015      	b.n	80012b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fc15 	bl	8000ab4 <HAL_GetTick>
 800128a:	0003      	movs	r3, r0
 800128c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fc10 	bl	8000ab4 <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e2e4      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012a2:	4b85      	ldr	r3, [pc, #532]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	029b      	lsls	r3, r3, #10
 80012aa:	4013      	ands	r3, r2
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0x110>
 80012ae:	e000      	b.n	80012b2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2202      	movs	r2, #2
 80012b8:	4013      	ands	r3, r2
 80012ba:	d100      	bne.n	80012be <HAL_RCC_OscConfig+0x13e>
 80012bc:	e099      	b.n	80013f2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	2220      	movs	r2, #32
 80012c8:	4013      	ands	r3, r2
 80012ca:	d009      	beq.n	80012e0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80012cc:	4b7a      	ldr	r3, [pc, #488]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b79      	ldr	r3, [pc, #484]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80012d2:	2120      	movs	r1, #32
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	2220      	movs	r2, #32
 80012dc:	4393      	bics	r3, r2
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	2b0c      	cmp	r3, #12
 80012ea:	d13e      	bne.n	800136a <HAL_RCC_OscConfig+0x1ea>
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d13b      	bne.n	800136a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80012f2:	4b71      	ldr	r3, [pc, #452]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2204      	movs	r2, #4
 80012f8:	4013      	ands	r3, r2
 80012fa:	d004      	beq.n	8001306 <HAL_RCC_OscConfig+0x186>
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e2b2      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001306:	4b6c      	ldr	r3, [pc, #432]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a6e      	ldr	r2, [pc, #440]	; (80014c4 <HAL_RCC_OscConfig+0x344>)
 800130c:	4013      	ands	r3, r2
 800130e:	0019      	movs	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	021a      	lsls	r2, r3, #8
 8001316:	4b68      	ldr	r3, [pc, #416]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001318:	430a      	orrs	r2, r1
 800131a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800131c:	4b66      	ldr	r3, [pc, #408]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2209      	movs	r2, #9
 8001322:	4393      	bics	r3, r2
 8001324:	0019      	movs	r1, r3
 8001326:	4b64      	ldr	r3, [pc, #400]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800132a:	430a      	orrs	r2, r1
 800132c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800132e:	f000 fbeb 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001332:	0001      	movs	r1, r0
 8001334:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	220f      	movs	r2, #15
 800133c:	4013      	ands	r3, r2
 800133e:	4a62      	ldr	r2, [pc, #392]	; (80014c8 <HAL_RCC_OscConfig+0x348>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	000a      	movs	r2, r1
 8001344:	40da      	lsrs	r2, r3
 8001346:	4b61      	ldr	r3, [pc, #388]	; (80014cc <HAL_RCC_OscConfig+0x34c>)
 8001348:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800134a:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <HAL_RCC_OscConfig+0x350>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2513      	movs	r5, #19
 8001350:	197c      	adds	r4, r7, r5
 8001352:	0018      	movs	r0, r3
 8001354:	f7ff fb68 	bl	8000a28 <HAL_InitTick>
 8001358:	0003      	movs	r3, r0
 800135a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800135c:	197b      	adds	r3, r7, r5
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d046      	beq.n	80013f2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001364:	197b      	adds	r3, r7, r5
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	e280      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	2b00      	cmp	r3, #0
 800136e:	d027      	beq.n	80013c0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001370:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2209      	movs	r2, #9
 8001376:	4393      	bics	r3, r2
 8001378:	0019      	movs	r1, r3
 800137a:	4b4f      	ldr	r3, [pc, #316]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 800137c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff fb97 	bl	8000ab4 <HAL_GetTick>
 8001386:	0003      	movs	r3, r0
 8001388:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138c:	f7ff fb92 	bl	8000ab4 <HAL_GetTick>
 8001390:	0002      	movs	r2, r0
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e266      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800139e:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2204      	movs	r2, #4
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f1      	beq.n	800138c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	4a45      	ldr	r2, [pc, #276]	; (80014c4 <HAL_RCC_OscConfig+0x344>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	021a      	lsls	r2, r3, #8
 80013b8:	4b3f      	ldr	r3, [pc, #252]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80013ba:	430a      	orrs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	e018      	b.n	80013f2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c0:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b3c      	ldr	r3, [pc, #240]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80013c6:	2101      	movs	r1, #1
 80013c8:	438a      	bics	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb72 	bl	8000ab4 <HAL_GetTick>
 80013d0:	0003      	movs	r3, r0
 80013d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d6:	f7ff fb6d 	bl	8000ab4 <HAL_GetTick>
 80013da:	0002      	movs	r2, r0
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e241      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013e8:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2204      	movs	r2, #4
 80013ee:	4013      	ands	r3, r2
 80013f0:	d1f1      	bne.n	80013d6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2210      	movs	r2, #16
 80013f8:	4013      	ands	r3, r2
 80013fa:	d100      	bne.n	80013fe <HAL_RCC_OscConfig+0x27e>
 80013fc:	e0a1      	b.n	8001542 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d140      	bne.n	8001486 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001404:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4013      	ands	r3, r2
 800140e:	d005      	beq.n	800141c <HAL_RCC_OscConfig+0x29c>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e227      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a2c      	ldr	r2, [pc, #176]	; (80014d4 <HAL_RCC_OscConfig+0x354>)
 8001422:	4013      	ands	r3, r2
 8001424:	0019      	movs	r1, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1a      	ldr	r2, [r3, #32]
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 800142c:	430a      	orrs	r2, r1
 800142e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	0a19      	lsrs	r1, r3, #8
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	061a      	lsls	r2, r3, #24
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	0b5b      	lsrs	r3, r3, #13
 800144a:	3301      	adds	r3, #1
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	0212      	lsls	r2, r2, #8
 8001450:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	210f      	movs	r1, #15
 800145a:	400b      	ands	r3, r1
 800145c:	491a      	ldr	r1, [pc, #104]	; (80014c8 <HAL_RCC_OscConfig+0x348>)
 800145e:	5ccb      	ldrb	r3, [r1, r3]
 8001460:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_RCC_OscConfig+0x34c>)
 8001464:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <HAL_RCC_OscConfig+0x350>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2513      	movs	r5, #19
 800146c:	197c      	adds	r4, r7, r5
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff fada 	bl	8000a28 <HAL_InitTick>
 8001474:	0003      	movs	r3, r0
 8001476:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001478:	197b      	adds	r3, r7, r5
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d060      	beq.n	8001542 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001480:	197b      	adds	r3, r7, r5
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	e1f2      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d03f      	beq.n	800150e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0049      	lsls	r1, r1, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fb0a 	bl	8000ab4 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014a4:	e018      	b.n	80014d8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a6:	f7ff fb05 	bl	8000ab4 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d911      	bls.n	80014d8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e1d9      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
 80014b8:	40021000 	.word	0x40021000
 80014bc:	fffeffff 	.word	0xfffeffff
 80014c0:	fffbffff 	.word	0xfffbffff
 80014c4:	ffffe0ff 	.word	0xffffe0ff
 80014c8:	080028a0 	.word	0x080028a0
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000004 	.word	0x20000004
 80014d4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014d8:	4bc9      	ldr	r3, [pc, #804]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4013      	ands	r3, r2
 80014e2:	d0e0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e4:	4bc6      	ldr	r3, [pc, #792]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4ac6      	ldr	r2, [pc, #792]	; (8001804 <HAL_RCC_OscConfig+0x684>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	0019      	movs	r1, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1a      	ldr	r2, [r3, #32]
 80014f2:	4bc3      	ldr	r3, [pc, #780]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80014f4:	430a      	orrs	r2, r1
 80014f6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f8:	4bc1      	ldr	r3, [pc, #772]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	0a19      	lsrs	r1, r3, #8
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	061a      	lsls	r2, r3, #24
 8001506:	4bbe      	ldr	r3, [pc, #760]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001508:	430a      	orrs	r2, r1
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	e019      	b.n	8001542 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800150e:	4bbc      	ldr	r3, [pc, #752]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4bbb      	ldr	r3, [pc, #748]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001514:	49bc      	ldr	r1, [pc, #752]	; (8001808 <HAL_RCC_OscConfig+0x688>)
 8001516:	400a      	ands	r2, r1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff facb 	bl	8000ab4 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001524:	f7ff fac6 	bl	8000ab4 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e19a      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001536:	4bb2      	ldr	r3, [pc, #712]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4013      	ands	r3, r2
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2208      	movs	r2, #8
 8001548:	4013      	ands	r3, r2
 800154a:	d036      	beq.n	80015ba <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d019      	beq.n	8001588 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001554:	4baa      	ldr	r3, [pc, #680]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001558:	4ba9      	ldr	r3, [pc, #676]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff faa8 	bl	8000ab4 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff faa3 	bl	8000ab4 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e177      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800157c:	4ba0      	ldr	r3, [pc, #640]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800157e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d0f1      	beq.n	800156a <HAL_RCC_OscConfig+0x3ea>
 8001586:	e018      	b.n	80015ba <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001588:	4b9d      	ldr	r3, [pc, #628]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800158a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800158c:	4b9c      	ldr	r3, [pc, #624]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800158e:	2101      	movs	r1, #1
 8001590:	438a      	bics	r2, r1
 8001592:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff fa8e 	bl	8000ab4 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159e:	f7ff fa89 	bl	8000ab4 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e15d      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015b0:	4b93      	ldr	r3, [pc, #588]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80015b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b4:	2202      	movs	r2, #2
 80015b6:	4013      	ands	r3, r2
 80015b8:	d1f1      	bne.n	800159e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2204      	movs	r2, #4
 80015c0:	4013      	ands	r3, r2
 80015c2:	d100      	bne.n	80015c6 <HAL_RCC_OscConfig+0x446>
 80015c4:	e0ae      	b.n	8001724 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	2023      	movs	r0, #35	; 0x23
 80015c8:	183b      	adds	r3, r7, r0
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ce:	4b8c      	ldr	r3, [pc, #560]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80015d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	055b      	lsls	r3, r3, #21
 80015d6:	4013      	ands	r3, r2
 80015d8:	d109      	bne.n	80015ee <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b89      	ldr	r3, [pc, #548]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80015dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015de:	4b88      	ldr	r3, [pc, #544]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	0549      	lsls	r1, r1, #21
 80015e4:	430a      	orrs	r2, r1
 80015e6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80015e8:	183b      	adds	r3, r7, r0
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ee:	4b87      	ldr	r3, [pc, #540]	; (800180c <HAL_RCC_OscConfig+0x68c>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4013      	ands	r3, r2
 80015f8:	d11a      	bne.n	8001630 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fa:	4b84      	ldr	r3, [pc, #528]	; (800180c <HAL_RCC_OscConfig+0x68c>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b83      	ldr	r3, [pc, #524]	; (800180c <HAL_RCC_OscConfig+0x68c>)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	0049      	lsls	r1, r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001608:	f7ff fa54 	bl	8000ab4 <HAL_GetTick>
 800160c:	0003      	movs	r3, r0
 800160e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001612:	f7ff fa4f 	bl	8000ab4 <HAL_GetTick>
 8001616:	0002      	movs	r2, r0
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b64      	cmp	r3, #100	; 0x64
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e123      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <HAL_RCC_OscConfig+0x68c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4013      	ands	r3, r2
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	429a      	cmp	r2, r3
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x4cc>
 800163c:	4b70      	ldr	r3, [pc, #448]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800163e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001640:	4b6f      	ldr	r3, [pc, #444]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	0049      	lsls	r1, r1, #1
 8001646:	430a      	orrs	r2, r1
 8001648:	651a      	str	r2, [r3, #80]	; 0x50
 800164a:	e031      	b.n	80016b0 <HAL_RCC_OscConfig+0x530>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0x4ee>
 8001654:	4b6a      	ldr	r3, [pc, #424]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001658:	4b69      	ldr	r3, [pc, #420]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800165a:	496b      	ldr	r1, [pc, #428]	; (8001808 <HAL_RCC_OscConfig+0x688>)
 800165c:	400a      	ands	r2, r1
 800165e:	651a      	str	r2, [r3, #80]	; 0x50
 8001660:	4b67      	ldr	r3, [pc, #412]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001666:	496a      	ldr	r1, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x690>)
 8001668:	400a      	ands	r2, r1
 800166a:	651a      	str	r2, [r3, #80]	; 0x50
 800166c:	e020      	b.n	80016b0 <HAL_RCC_OscConfig+0x530>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	23a0      	movs	r3, #160	; 0xa0
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	429a      	cmp	r2, r3
 8001678:	d10e      	bne.n	8001698 <HAL_RCC_OscConfig+0x518>
 800167a:	4b61      	ldr	r3, [pc, #388]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800167c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800167e:	4b60      	ldr	r3, [pc, #384]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	00c9      	lsls	r1, r1, #3
 8001684:	430a      	orrs	r2, r1
 8001686:	651a      	str	r2, [r3, #80]	; 0x50
 8001688:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800168a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800168c:	4b5c      	ldr	r3, [pc, #368]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	0049      	lsls	r1, r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	651a      	str	r2, [r3, #80]	; 0x50
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0x530>
 8001698:	4b59      	ldr	r3, [pc, #356]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800169a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800169c:	4b58      	ldr	r3, [pc, #352]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800169e:	495a      	ldr	r1, [pc, #360]	; (8001808 <HAL_RCC_OscConfig+0x688>)
 80016a0:	400a      	ands	r2, r1
 80016a2:	651a      	str	r2, [r3, #80]	; 0x50
 80016a4:	4b56      	ldr	r3, [pc, #344]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80016a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a8:	4b55      	ldr	r3, [pc, #340]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80016aa:	4959      	ldr	r1, [pc, #356]	; (8001810 <HAL_RCC_OscConfig+0x690>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d015      	beq.n	80016e4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff f9fc 	bl	8000ab4 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016c0:	e009      	b.n	80016d6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff f9f7 	bl	8000ab4 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	4a51      	ldr	r2, [pc, #324]	; (8001814 <HAL_RCC_OscConfig+0x694>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0ca      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016d6:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80016d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4013      	ands	r3, r2
 80016e0:	d0ef      	beq.n	80016c2 <HAL_RCC_OscConfig+0x542>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff f9e6 	bl	8000ab4 <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016ec:	e009      	b.n	8001702 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff f9e1 	bl	8000ab4 <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	4a46      	ldr	r2, [pc, #280]	; (8001814 <HAL_RCC_OscConfig+0x694>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e0b4      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001702:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4013      	ands	r3, r2
 800170c:	d1ef      	bne.n	80016ee <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800170e:	2323      	movs	r3, #35	; 0x23
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d105      	bne.n	8001724 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001718:	4b39      	ldr	r3, [pc, #228]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800171a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800171c:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800171e:	493e      	ldr	r1, [pc, #248]	; (8001818 <HAL_RCC_OscConfig+0x698>)
 8001720:	400a      	ands	r2, r1
 8001722:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	2b00      	cmp	r3, #0
 800172a:	d100      	bne.n	800172e <HAL_RCC_OscConfig+0x5ae>
 800172c:	e09d      	b.n	800186a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	2b0c      	cmp	r3, #12
 8001732:	d100      	bne.n	8001736 <HAL_RCC_OscConfig+0x5b6>
 8001734:	e076      	b.n	8001824 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	2b02      	cmp	r3, #2
 800173c:	d145      	bne.n	80017ca <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001744:	4935      	ldr	r1, [pc, #212]	; (800181c <HAL_RCC_OscConfig+0x69c>)
 8001746:	400a      	ands	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff f9b3 	bl	8000ab4 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff f9ae 	bl	8000ab4 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e082      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	049b      	lsls	r3, r3, #18
 800176e:	4013      	ands	r3, r2
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	4a2a      	ldr	r2, [pc, #168]	; (8001820 <HAL_RCC_OscConfig+0x6a0>)
 8001778:	4013      	ands	r3, r2
 800177a:	0019      	movs	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	431a      	orrs	r2, r3
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 800178e:	430a      	orrs	r2, r1
 8001790:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0449      	lsls	r1, r1, #17
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff f988 	bl	8000ab4 <HAL_GetTick>
 80017a4:	0003      	movs	r3, r0
 80017a6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017aa:	f7ff f983 	bl	8000ab4 <HAL_GetTick>
 80017ae:	0002      	movs	r2, r0
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e057      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	049b      	lsls	r3, r3, #18
 80017c4:	4013      	ands	r3, r2
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x62a>
 80017c8:	e04f      	b.n	800186a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80017d0:	4912      	ldr	r1, [pc, #72]	; (800181c <HAL_RCC_OscConfig+0x69c>)
 80017d2:	400a      	ands	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff f96d 	bl	8000ab4 <HAL_GetTick>
 80017da:	0003      	movs	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff f968 	bl	8000ab4 <HAL_GetTick>
 80017e4:	0002      	movs	r2, r0
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e03c      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017f2:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_RCC_OscConfig+0x680>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	049b      	lsls	r3, r3, #18
 80017fa:	4013      	ands	r3, r2
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x660>
 80017fe:	e034      	b.n	800186a <HAL_RCC_OscConfig+0x6ea>
 8001800:	40021000 	.word	0x40021000
 8001804:	ffff1fff 	.word	0xffff1fff
 8001808:	fffffeff 	.word	0xfffffeff
 800180c:	40007000 	.word	0x40007000
 8001810:	fffffbff 	.word	0xfffffbff
 8001814:	00001388 	.word	0x00001388
 8001818:	efffffff 	.word	0xefffffff
 800181c:	feffffff 	.word	0xfeffffff
 8001820:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e01d      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001830:	4b10      	ldr	r3, [pc, #64]	; (8001874 <HAL_RCC_OscConfig+0x6f4>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	025b      	lsls	r3, r3, #9
 800183c:	401a      	ands	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	429a      	cmp	r2, r3
 8001844:	d10f      	bne.n	8001866 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	23f0      	movs	r3, #240	; 0xf0
 800184a:	039b      	lsls	r3, r3, #14
 800184c:	401a      	ands	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	23c0      	movs	r3, #192	; 0xc0
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	401a      	ands	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	0018      	movs	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	b00a      	add	sp, #40	; 0x28
 8001872:	bdb0      	pop	{r4, r5, r7, pc}
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e128      	b.n	8001ade <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800188c:	4b96      	ldr	r3, [pc, #600]	; (8001ae8 <HAL_RCC_ClockConfig+0x270>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2201      	movs	r2, #1
 8001892:	4013      	ands	r3, r2
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d91e      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b93      	ldr	r3, [pc, #588]	; (8001ae8 <HAL_RCC_ClockConfig+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2201      	movs	r2, #1
 80018a0:	4393      	bics	r3, r2
 80018a2:	0019      	movs	r1, r3
 80018a4:	4b90      	ldr	r3, [pc, #576]	; (8001ae8 <HAL_RCC_ClockConfig+0x270>)
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018ac:	f7ff f902 	bl	8000ab4 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b4:	e009      	b.n	80018ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b6:	f7ff f8fd 	bl	8000ab4 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	4a8a      	ldr	r2, [pc, #552]	; (8001aec <HAL_RCC_ClockConfig+0x274>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e109      	b.n	8001ade <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b87      	ldr	r3, [pc, #540]	; (8001ae8 <HAL_RCC_ClockConfig+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2201      	movs	r2, #1
 80018d0:	4013      	ands	r3, r2
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1ee      	bne.n	80018b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2202      	movs	r2, #2
 80018de:	4013      	ands	r3, r2
 80018e0:	d009      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e2:	4b83      	ldr	r3, [pc, #524]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	22f0      	movs	r2, #240	; 0xf0
 80018e8:	4393      	bics	r3, r2
 80018ea:	0019      	movs	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	4b7f      	ldr	r3, [pc, #508]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 80018f2:	430a      	orrs	r2, r1
 80018f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4013      	ands	r3, r2
 80018fe:	d100      	bne.n	8001902 <HAL_RCC_ClockConfig+0x8a>
 8001900:	e089      	b.n	8001a16 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800190a:	4b79      	ldr	r3, [pc, #484]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	029b      	lsls	r3, r3, #10
 8001912:	4013      	ands	r3, r2
 8001914:	d120      	bne.n	8001958 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0e1      	b.n	8001ade <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001922:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	049b      	lsls	r3, r3, #18
 800192a:	4013      	ands	r3, r2
 800192c:	d114      	bne.n	8001958 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0d5      	b.n	8001ade <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d106      	bne.n	8001948 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800193a:	4b6d      	ldr	r3, [pc, #436]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2204      	movs	r2, #4
 8001940:	4013      	ands	r3, r2
 8001942:	d109      	bne.n	8001958 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0ca      	b.n	8001ade <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001948:	4b69      	ldr	r3, [pc, #420]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4013      	ands	r3, r2
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0c2      	b.n	8001ade <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001958:	4b65      	ldr	r3, [pc, #404]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2203      	movs	r2, #3
 800195e:	4393      	bics	r3, r2
 8001960:	0019      	movs	r1, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 8001968:	430a      	orrs	r2, r1
 800196a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800196c:	f7ff f8a2 	bl	8000ab4 <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d111      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800197c:	e009      	b.n	8001992 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197e:	f7ff f899 	bl	8000ab4 <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	4a58      	ldr	r2, [pc, #352]	; (8001aec <HAL_RCC_ClockConfig+0x274>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0a5      	b.n	8001ade <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001992:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	220c      	movs	r2, #12
 8001998:	4013      	ands	r3, r2
 800199a:	2b08      	cmp	r3, #8
 800199c:	d1ef      	bne.n	800197e <HAL_RCC_ClockConfig+0x106>
 800199e:	e03a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d111      	bne.n	80019cc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a8:	e009      	b.n	80019be <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019aa:	f7ff f883 	bl	8000ab4 <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	4a4d      	ldr	r2, [pc, #308]	; (8001aec <HAL_RCC_ClockConfig+0x274>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e08f      	b.n	8001ade <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019be:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	220c      	movs	r2, #12
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d1ef      	bne.n	80019aa <HAL_RCC_ClockConfig+0x132>
 80019ca:	e024      	b.n	8001a16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d11b      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d4:	e009      	b.n	80019ea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d6:	f7ff f86d 	bl	8000ab4 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4a42      	ldr	r2, [pc, #264]	; (8001aec <HAL_RCC_ClockConfig+0x274>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e079      	b.n	8001ade <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	220c      	movs	r2, #12
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d1ef      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x15e>
 80019f6:	e00e      	b.n	8001a16 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f8:	f7ff f85c 	bl	8000ab4 <HAL_GetTick>
 80019fc:	0002      	movs	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	4a3a      	ldr	r2, [pc, #232]	; (8001aec <HAL_RCC_ClockConfig+0x274>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e068      	b.n	8001ade <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	220c      	movs	r2, #12
 8001a12:	4013      	ands	r3, r2
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a16:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <HAL_RCC_ClockConfig+0x270>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d21e      	bcs.n	8001a62 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a24:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_RCC_ClockConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4393      	bics	r3, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_RCC_ClockConfig+0x270>)
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a36:	f7ff f83d 	bl	8000ab4 <HAL_GetTick>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	e009      	b.n	8001a54 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7ff f838 	bl	8000ab4 <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	4a28      	ldr	r2, [pc, #160]	; (8001aec <HAL_RCC_ClockConfig+0x274>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e044      	b.n	8001ade <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_RCC_ClockConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d1ee      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2204      	movs	r2, #4
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d009      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4a20      	ldr	r2, [pc, #128]	; (8001af4 <HAL_RCC_ClockConfig+0x27c>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2208      	movs	r2, #8
 8001a86:	4013      	ands	r3, r2
 8001a88:	d00a      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <HAL_RCC_ClockConfig+0x280>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	00da      	lsls	r2, r3, #3
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aa0:	f000 f832 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001aa4:	0001      	movs	r1, r0
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_ClockConfig+0x278>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	220f      	movs	r2, #15
 8001aae:	4013      	ands	r3, r2
 8001ab0:	4a12      	ldr	r2, [pc, #72]	; (8001afc <HAL_RCC_ClockConfig+0x284>)
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	000a      	movs	r2, r1
 8001ab6:	40da      	lsrs	r2, r3
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_RCC_ClockConfig+0x288>)
 8001aba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_RCC_ClockConfig+0x28c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	250b      	movs	r5, #11
 8001ac2:	197c      	adds	r4, r7, r5
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7fe ffaf 	bl	8000a28 <HAL_InitTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001ace:	197b      	adds	r3, r7, r5
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001ad6:	197b      	adds	r3, r7, r5
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	e000      	b.n	8001ade <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	0018      	movs	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b004      	add	sp, #16
 8001ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40022000 	.word	0x40022000
 8001aec:	00001388 	.word	0x00001388
 8001af0:	40021000 	.word	0x40021000
 8001af4:	fffff8ff 	.word	0xfffff8ff
 8001af8:	ffffc7ff 	.word	0xffffc7ff
 8001afc:	080028a0 	.word	0x080028a0
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b08e      	sub	sp, #56	; 0x38
 8001b0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b16:	230c      	movs	r3, #12
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d014      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x40>
 8001b1e:	d900      	bls.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1a>
 8001b20:	e07b      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x112>
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d002      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x24>
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d00b      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b2a:	e076      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b2c:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2210      	movs	r2, #16
 8001b32:	4013      	ands	r3, r2
 8001b34:	d002      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b3a:	e07c      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b3c:	4b42      	ldr	r3, [pc, #264]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b40:	e079      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b42:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x144>)
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b46:	e076      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	0c9a      	lsrs	r2, r3, #18
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	401a      	ands	r2, r3
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x148>)
 8001b52:	5c9b      	ldrb	r3, [r3, r2]
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b58:	0d9a      	lsrs	r2, r3, #22
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	3301      	adds	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b62:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	025b      	lsls	r3, r3, #9
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d01a      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	4a35      	ldr	r2, [pc, #212]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x144>)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	69b8      	ldr	r0, [r7, #24]
 8001b7c:	69f9      	ldr	r1, [r7, #28]
 8001b7e:	f7fe fb6f 	bl	8000260 <__aeabi_lmul>
 8001b82:	0002      	movs	r2, r0
 8001b84:	000b      	movs	r3, r1
 8001b86:	0010      	movs	r0, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f7fe fb43 	bl	8000220 <__aeabi_uldivmod>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	000b      	movs	r3, r1
 8001b9e:	0013      	movs	r3, r2
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba2:	e037      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ba4:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2210      	movs	r2, #16
 8001baa:	4013      	ands	r3, r2
 8001bac:	d01a      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	68b8      	ldr	r0, [r7, #8]
 8001bbc:	68f9      	ldr	r1, [r7, #12]
 8001bbe:	f7fe fb4f 	bl	8000260 <__aeabi_lmul>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	000b      	movs	r3, r1
 8001bc6:	0010      	movs	r0, r2
 8001bc8:	0019      	movs	r1, r3
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f7fe fb23 	bl	8000220 <__aeabi_uldivmod>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	000b      	movs	r3, r1
 8001bde:	0013      	movs	r3, r2
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
 8001be2:	e017      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	0018      	movs	r0, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	0019      	movs	r1, r3
 8001bec:	4a16      	ldr	r2, [pc, #88]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x140>)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f7fe fb36 	bl	8000260 <__aeabi_lmul>
 8001bf4:	0002      	movs	r2, r0
 8001bf6:	000b      	movs	r3, r1
 8001bf8:	0010      	movs	r0, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	001c      	movs	r4, r3
 8001c00:	2300      	movs	r3, #0
 8001c02:	001d      	movs	r5, r3
 8001c04:	0022      	movs	r2, r4
 8001c06:	002b      	movs	r3, r5
 8001c08:	f7fe fb0a 	bl	8000220 <__aeabi_uldivmod>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	000b      	movs	r3, r1
 8001c10:	0013      	movs	r3, r2
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c18:	e00d      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	0b5b      	lsrs	r3, r3, #13
 8001c20:	2207      	movs	r2, #7
 8001c22:	4013      	ands	r3, r2
 8001c24:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	0212      	lsls	r2, r2, #8
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c34:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b00e      	add	sp, #56	; 0x38
 8001c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	003d0900 	.word	0x003d0900
 8001c48:	00f42400 	.word	0x00f42400
 8001c4c:	007a1200 	.word	0x007a1200
 8001c50:	080028b8 	.word	0x080028b8

08001c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	20000000 	.word	0x20000000

08001c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c6c:	f7ff fff2 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001c70:	0001      	movs	r1, r0
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	2207      	movs	r2, #7
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	40d9      	lsrs	r1, r3
 8001c82:	000b      	movs	r3, r1
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	080028b0 	.word	0x080028b0

08001c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c98:	f7ff ffdc 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001c9c:	0001      	movs	r1, r0
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	0adb      	lsrs	r3, r3, #11
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
 8001cac:	40d9      	lsrs	r1, r3
 8001cae:	000b      	movs	r3, r1
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	080028b0 	.word	0x080028b0

08001cc0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001cc8:	2017      	movs	r0, #23
 8001cca:	183b      	adds	r3, r7, r0
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d100      	bne.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001cda:	e0c2      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cdc:	4b81      	ldr	r3, [pc, #516]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	055b      	lsls	r3, r3, #21
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d109      	bne.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b7e      	ldr	r3, [pc, #504]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cec:	4b7d      	ldr	r3, [pc, #500]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	0549      	lsls	r1, r1, #21
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001cf6:	183b      	adds	r3, r7, r0
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	4b7a      	ldr	r3, [pc, #488]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4013      	ands	r3, r2
 8001d06:	d11a      	bne.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d08:	4b77      	ldr	r3, [pc, #476]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	0049      	lsls	r1, r1, #1
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d16:	f7fe fecd 	bl	8000ab4 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1e:	e008      	b.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d20:	f7fe fec8 	bl	8000ab4 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0d4      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d32:	4b6d      	ldr	r3, [pc, #436]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d3e:	4b69      	ldr	r3, [pc, #420]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	23c0      	movs	r3, #192	; 0xc0
 8001d44:	039b      	lsls	r3, r3, #14
 8001d46:	4013      	ands	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	23c0      	movs	r3, #192	; 0xc0
 8001d50:	039b      	lsls	r3, r3, #14
 8001d52:	4013      	ands	r3, r2
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d013      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	23c0      	movs	r3, #192	; 0xc0
 8001d60:	029b      	lsls	r3, r3, #10
 8001d62:	401a      	ands	r2, r3
 8001d64:	23c0      	movs	r3, #192	; 0xc0
 8001d66:	029b      	lsls	r3, r3, #10
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d10a      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001d6c:	4b5d      	ldr	r3, [pc, #372]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	029b      	lsls	r3, r3, #10
 8001d74:	401a      	ands	r2, r3
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	029b      	lsls	r3, r3, #10
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0ac      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001d82:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d86:	23c0      	movs	r3, #192	; 0xc0
 8001d88:	029b      	lsls	r3, r3, #10
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d03b      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	23c0      	movs	r3, #192	; 0xc0
 8001d9a:	029b      	lsls	r3, r3, #10
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d033      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2220      	movs	r2, #32
 8001daa:	4013      	ands	r3, r2
 8001dac:	d02e      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001dae:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db2:	4a4e      	ldr	r2, [pc, #312]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001db8:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dbc:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	0309      	lsls	r1, r1, #12
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dca:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dcc:	4948      	ldr	r1, [pc, #288]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dce:	400a      	ands	r2, r1
 8001dd0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001dd2:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4013      	ands	r3, r2
 8001de0:	d014      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7fe fe67 	bl	8000ab4 <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dea:	e009      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dec:	f7fe fe62 	bl	8000ab4 <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	4a3f      	ldr	r2, [pc, #252]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e06d      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e00:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d0ef      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	23c0      	movs	r3, #192	; 0xc0
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	401a      	ands	r2, r3
 8001e16:	23c0      	movs	r3, #192	; 0xc0
 8001e18:	029b      	lsls	r3, r3, #10
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001e1e:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a35      	ldr	r2, [pc, #212]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	0019      	movs	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	23c0      	movs	r3, #192	; 0xc0
 8001e2e:	039b      	lsls	r3, r3, #14
 8001e30:	401a      	ands	r2, r3
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e3a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	23c0      	movs	r3, #192	; 0xc0
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	401a      	ands	r2, r3
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e4c:	2317      	movs	r3, #23
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d105      	bne.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e5c:	4927      	ldr	r1, [pc, #156]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001e5e:	400a      	ands	r2, r1
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2202      	movs	r2, #2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d009      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	220c      	movs	r2, #12
 8001e72:	4393      	bics	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2204      	movs	r2, #4
 8001e86:	4013      	ands	r3, r2
 8001e88:	d009      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d009      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	4a0f      	ldr	r2, [pc, #60]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695a      	ldr	r2, [r3, #20]
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b006      	add	sp, #24
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	fffcffff 	.word	0xfffcffff
 8001ef0:	fff7ffff 	.word	0xfff7ffff
 8001ef4:	00001388 	.word	0x00001388
 8001ef8:	ffcfffff 	.word	0xffcfffff
 8001efc:	efffffff 	.word	0xefffffff
 8001f00:	fffff3ff 	.word	0xfffff3ff
 8001f04:	ffffcfff 	.word	0xffffcfff
 8001f08:	fff3ffff 	.word	0xfff3ffff

08001f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e044      	b.n	8001fa8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d107      	bne.n	8001f36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2274      	movs	r2, #116	; 0x74
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7fe fc9f 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2224      	movs	r2, #36	; 0x24
 8001f3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2101      	movs	r1, #1
 8001f48:	438a      	bics	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 f830 	bl	8001fb4 <UART_SetConfig>
 8001f54:	0003      	movs	r3, r0
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e024      	b.n	8001fa8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f000 fa6d 	bl	8002448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	490d      	ldr	r1, [pc, #52]	; (8001fb0 <HAL_UART_Init+0xa4>)
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	212a      	movs	r1, #42	; 0x2a
 8001f8a:	438a      	bics	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2101      	movs	r1, #1
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 fb05 	bl	80025b0 <UART_CheckIdleState>
 8001fa6:	0003      	movs	r3, r0
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	ffffb7ff 	.word	0xffffb7ff

08001fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb4:	b5b0      	push	{r4, r5, r7, lr}
 8001fb6:	b08e      	sub	sp, #56	; 0x38
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fbc:	231a      	movs	r3, #26
 8001fbe:	2218      	movs	r2, #24
 8001fc0:	189b      	adds	r3, r3, r2
 8001fc2:	19db      	adds	r3, r3, r7
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4ab4      	ldr	r2, [pc, #720]	; (80022b8 <UART_SetConfig+0x304>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4aaf      	ldr	r2, [pc, #700]	; (80022bc <UART_SetConfig+0x308>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	0019      	movs	r1, r3
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4aa9      	ldr	r2, [pc, #676]	; (80022c0 <UART_SetConfig+0x30c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d004      	beq.n	8002028 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002024:	4313      	orrs	r3, r2
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	4aa5      	ldr	r2, [pc, #660]	; (80022c4 <UART_SetConfig+0x310>)
 8002030:	4013      	ands	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800203a:	430a      	orrs	r2, r1
 800203c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4aa1      	ldr	r2, [pc, #644]	; (80022c8 <UART_SetConfig+0x314>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d131      	bne.n	80020ac <UART_SetConfig+0xf8>
 8002048:	4ba0      	ldr	r3, [pc, #640]	; (80022cc <UART_SetConfig+0x318>)
 800204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204c:	220c      	movs	r2, #12
 800204e:	4013      	ands	r3, r2
 8002050:	2b0c      	cmp	r3, #12
 8002052:	d01d      	beq.n	8002090 <UART_SetConfig+0xdc>
 8002054:	d823      	bhi.n	800209e <UART_SetConfig+0xea>
 8002056:	2b08      	cmp	r3, #8
 8002058:	d00c      	beq.n	8002074 <UART_SetConfig+0xc0>
 800205a:	d820      	bhi.n	800209e <UART_SetConfig+0xea>
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <UART_SetConfig+0xb2>
 8002060:	2b04      	cmp	r3, #4
 8002062:	d00e      	beq.n	8002082 <UART_SetConfig+0xce>
 8002064:	e01b      	b.n	800209e <UART_SetConfig+0xea>
 8002066:	231b      	movs	r3, #27
 8002068:	2218      	movs	r2, #24
 800206a:	189b      	adds	r3, r3, r2
 800206c:	19db      	adds	r3, r3, r7
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	e065      	b.n	8002140 <UART_SetConfig+0x18c>
 8002074:	231b      	movs	r3, #27
 8002076:	2218      	movs	r2, #24
 8002078:	189b      	adds	r3, r3, r2
 800207a:	19db      	adds	r3, r3, r7
 800207c:	2202      	movs	r2, #2
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	e05e      	b.n	8002140 <UART_SetConfig+0x18c>
 8002082:	231b      	movs	r3, #27
 8002084:	2218      	movs	r2, #24
 8002086:	189b      	adds	r3, r3, r2
 8002088:	19db      	adds	r3, r3, r7
 800208a:	2204      	movs	r2, #4
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e057      	b.n	8002140 <UART_SetConfig+0x18c>
 8002090:	231b      	movs	r3, #27
 8002092:	2218      	movs	r2, #24
 8002094:	189b      	adds	r3, r3, r2
 8002096:	19db      	adds	r3, r3, r7
 8002098:	2208      	movs	r2, #8
 800209a:	701a      	strb	r2, [r3, #0]
 800209c:	e050      	b.n	8002140 <UART_SetConfig+0x18c>
 800209e:	231b      	movs	r3, #27
 80020a0:	2218      	movs	r2, #24
 80020a2:	189b      	adds	r3, r3, r2
 80020a4:	19db      	adds	r3, r3, r7
 80020a6:	2210      	movs	r2, #16
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	e049      	b.n	8002140 <UART_SetConfig+0x18c>
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a83      	ldr	r2, [pc, #524]	; (80022c0 <UART_SetConfig+0x30c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d13e      	bne.n	8002134 <UART_SetConfig+0x180>
 80020b6:	4b85      	ldr	r3, [pc, #532]	; (80022cc <UART_SetConfig+0x318>)
 80020b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ba:	23c0      	movs	r3, #192	; 0xc0
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	22c0      	movs	r2, #192	; 0xc0
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d027      	beq.n	8002118 <UART_SetConfig+0x164>
 80020c8:	22c0      	movs	r2, #192	; 0xc0
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d82a      	bhi.n	8002126 <UART_SetConfig+0x172>
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d011      	beq.n	80020fc <UART_SetConfig+0x148>
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	4293      	cmp	r3, r2
 80020de:	d822      	bhi.n	8002126 <UART_SetConfig+0x172>
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <UART_SetConfig+0x13a>
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	00d2      	lsls	r2, r2, #3
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00e      	beq.n	800210a <UART_SetConfig+0x156>
 80020ec:	e01b      	b.n	8002126 <UART_SetConfig+0x172>
 80020ee:	231b      	movs	r3, #27
 80020f0:	2218      	movs	r2, #24
 80020f2:	189b      	adds	r3, r3, r2
 80020f4:	19db      	adds	r3, r3, r7
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e021      	b.n	8002140 <UART_SetConfig+0x18c>
 80020fc:	231b      	movs	r3, #27
 80020fe:	2218      	movs	r2, #24
 8002100:	189b      	adds	r3, r3, r2
 8002102:	19db      	adds	r3, r3, r7
 8002104:	2202      	movs	r2, #2
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e01a      	b.n	8002140 <UART_SetConfig+0x18c>
 800210a:	231b      	movs	r3, #27
 800210c:	2218      	movs	r2, #24
 800210e:	189b      	adds	r3, r3, r2
 8002110:	19db      	adds	r3, r3, r7
 8002112:	2204      	movs	r2, #4
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e013      	b.n	8002140 <UART_SetConfig+0x18c>
 8002118:	231b      	movs	r3, #27
 800211a:	2218      	movs	r2, #24
 800211c:	189b      	adds	r3, r3, r2
 800211e:	19db      	adds	r3, r3, r7
 8002120:	2208      	movs	r2, #8
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	e00c      	b.n	8002140 <UART_SetConfig+0x18c>
 8002126:	231b      	movs	r3, #27
 8002128:	2218      	movs	r2, #24
 800212a:	189b      	adds	r3, r3, r2
 800212c:	19db      	adds	r3, r3, r7
 800212e:	2210      	movs	r2, #16
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e005      	b.n	8002140 <UART_SetConfig+0x18c>
 8002134:	231b      	movs	r3, #27
 8002136:	2218      	movs	r2, #24
 8002138:	189b      	adds	r3, r3, r2
 800213a:	19db      	adds	r3, r3, r7
 800213c:	2210      	movs	r2, #16
 800213e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a5e      	ldr	r2, [pc, #376]	; (80022c0 <UART_SetConfig+0x30c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d000      	beq.n	800214c <UART_SetConfig+0x198>
 800214a:	e084      	b.n	8002256 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800214c:	231b      	movs	r3, #27
 800214e:	2218      	movs	r2, #24
 8002150:	189b      	adds	r3, r3, r2
 8002152:	19db      	adds	r3, r3, r7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b08      	cmp	r3, #8
 8002158:	d01d      	beq.n	8002196 <UART_SetConfig+0x1e2>
 800215a:	dc20      	bgt.n	800219e <UART_SetConfig+0x1ea>
 800215c:	2b04      	cmp	r3, #4
 800215e:	d015      	beq.n	800218c <UART_SetConfig+0x1d8>
 8002160:	dc1d      	bgt.n	800219e <UART_SetConfig+0x1ea>
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <UART_SetConfig+0x1b8>
 8002166:	2b02      	cmp	r3, #2
 8002168:	d005      	beq.n	8002176 <UART_SetConfig+0x1c2>
 800216a:	e018      	b.n	800219e <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800216c:	f7ff fd7c 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8002170:	0003      	movs	r3, r0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002174:	e01c      	b.n	80021b0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002176:	4b55      	ldr	r3, [pc, #340]	; (80022cc <UART_SetConfig+0x318>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2210      	movs	r2, #16
 800217c:	4013      	ands	r3, r2
 800217e:	d002      	beq.n	8002186 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002180:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <UART_SetConfig+0x31c>)
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002184:	e014      	b.n	80021b0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002186:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <UART_SetConfig+0x320>)
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800218a:	e011      	b.n	80021b0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800218c:	f7ff fcbc 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8002190:	0003      	movs	r3, r0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002194:	e00c      	b.n	80021b0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800219c:	e008      	b.n	80021b0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80021a2:	231a      	movs	r3, #26
 80021a4:	2218      	movs	r2, #24
 80021a6:	189b      	adds	r3, r3, r2
 80021a8:	19db      	adds	r3, r3, r7
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
        break;
 80021ae:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80021b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d100      	bne.n	80021b8 <UART_SetConfig+0x204>
 80021b6:	e130      	b.n	800241a <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	0013      	movs	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	189b      	adds	r3, r3, r2
 80021c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d305      	bcc.n	80021d4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80021ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d906      	bls.n	80021e2 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80021d4:	231a      	movs	r3, #26
 80021d6:	2218      	movs	r2, #24
 80021d8:	189b      	adds	r3, r3, r2
 80021da:	19db      	adds	r3, r3, r7
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e11b      	b.n	800241a <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80021e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	6939      	ldr	r1, [r7, #16]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	000b      	movs	r3, r1
 80021f0:	0e1b      	lsrs	r3, r3, #24
 80021f2:	0010      	movs	r0, r2
 80021f4:	0205      	lsls	r5, r0, #8
 80021f6:	431d      	orrs	r5, r3
 80021f8:	000b      	movs	r3, r1
 80021fa:	021c      	lsls	r4, r3, #8
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68b8      	ldr	r0, [r7, #8]
 800220a:	68f9      	ldr	r1, [r7, #12]
 800220c:	1900      	adds	r0, r0, r4
 800220e:	4169      	adcs	r1, r5
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f7fd ffff 	bl	8000220 <__aeabi_uldivmod>
 8002222:	0002      	movs	r2, r0
 8002224:	000b      	movs	r3, r1
 8002226:	0013      	movs	r3, r2
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800222a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800222c:	23c0      	movs	r3, #192	; 0xc0
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d309      	bcc.n	8002248 <UART_SetConfig+0x294>
 8002234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	035b      	lsls	r3, r3, #13
 800223a:	429a      	cmp	r2, r3
 800223c:	d204      	bcs.n	8002248 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	e0e8      	b.n	800241a <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8002248:	231a      	movs	r3, #26
 800224a:	2218      	movs	r2, #24
 800224c:	189b      	adds	r3, r3, r2
 800224e:	19db      	adds	r3, r3, r7
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e0e1      	b.n	800241a <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	429a      	cmp	r2, r3
 8002260:	d000      	beq.n	8002264 <UART_SetConfig+0x2b0>
 8002262:	e083      	b.n	800236c <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002264:	231b      	movs	r3, #27
 8002266:	2218      	movs	r2, #24
 8002268:	189b      	adds	r3, r3, r2
 800226a:	19db      	adds	r3, r3, r7
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b08      	cmp	r3, #8
 8002270:	d834      	bhi.n	80022dc <UART_SetConfig+0x328>
 8002272:	009a      	lsls	r2, r3, #2
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <UART_SetConfig+0x324>)
 8002276:	18d3      	adds	r3, r2, r3
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800227c:	f7ff fcf4 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8002280:	0003      	movs	r3, r0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002284:	e033      	b.n	80022ee <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002286:	f7ff fd05 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 800228a:	0003      	movs	r3, r0
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800228e:	e02e      	b.n	80022ee <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <UART_SetConfig+0x318>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2210      	movs	r2, #16
 8002296:	4013      	ands	r3, r2
 8002298:	d002      	beq.n	80022a0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <UART_SetConfig+0x31c>)
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800229e:	e026      	b.n	80022ee <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <UART_SetConfig+0x320>)
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022a4:	e023      	b.n	80022ee <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022a6:	f7ff fc2f 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 80022aa:	0003      	movs	r3, r0
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022ae:	e01e      	b.n	80022ee <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022b6:	e01a      	b.n	80022ee <UART_SetConfig+0x33a>
 80022b8:	efff69f3 	.word	0xefff69f3
 80022bc:	ffffcfff 	.word	0xffffcfff
 80022c0:	40004800 	.word	0x40004800
 80022c4:	fffff4ff 	.word	0xfffff4ff
 80022c8:	40004400 	.word	0x40004400
 80022cc:	40021000 	.word	0x40021000
 80022d0:	003d0900 	.word	0x003d0900
 80022d4:	00f42400 	.word	0x00f42400
 80022d8:	080028c4 	.word	0x080028c4
      default:
        pclk = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80022e0:	231a      	movs	r3, #26
 80022e2:	2218      	movs	r2, #24
 80022e4:	189b      	adds	r3, r3, r2
 80022e6:	19db      	adds	r3, r3, r7
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
        break;
 80022ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d100      	bne.n	80022f6 <UART_SetConfig+0x342>
 80022f4:	e091      	b.n	800241a <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	005a      	lsls	r2, r3, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	18d2      	adds	r2, r2, r3
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	0019      	movs	r1, r3
 8002308:	0010      	movs	r0, r2
 800230a:	f7fd fefd 	bl	8000108 <__udivsi3>
 800230e:	0003      	movs	r3, r0
 8002310:	b29b      	uxth	r3, r3
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	2b0f      	cmp	r3, #15
 8002318:	d921      	bls.n	800235e <UART_SetConfig+0x3aa>
 800231a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	025b      	lsls	r3, r3, #9
 8002320:	429a      	cmp	r2, r3
 8002322:	d21c      	bcs.n	800235e <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	b29a      	uxth	r2, r3
 8002328:	200e      	movs	r0, #14
 800232a:	2418      	movs	r4, #24
 800232c:	1903      	adds	r3, r0, r4
 800232e:	19db      	adds	r3, r3, r7
 8002330:	210f      	movs	r1, #15
 8002332:	438a      	bics	r2, r1
 8002334:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	b29b      	uxth	r3, r3
 800233c:	2207      	movs	r2, #7
 800233e:	4013      	ands	r3, r2
 8002340:	b299      	uxth	r1, r3
 8002342:	1903      	adds	r3, r0, r4
 8002344:	19db      	adds	r3, r3, r7
 8002346:	1902      	adds	r2, r0, r4
 8002348:	19d2      	adds	r2, r2, r7
 800234a:	8812      	ldrh	r2, [r2, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1902      	adds	r2, r0, r4
 8002356:	19d2      	adds	r2, r2, r7
 8002358:	8812      	ldrh	r2, [r2, #0]
 800235a:	60da      	str	r2, [r3, #12]
 800235c:	e05d      	b.n	800241a <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 800235e:	231a      	movs	r3, #26
 8002360:	2218      	movs	r2, #24
 8002362:	189b      	adds	r3, r3, r2
 8002364:	19db      	adds	r3, r3, r7
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e056      	b.n	800241a <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 800236c:	231b      	movs	r3, #27
 800236e:	2218      	movs	r2, #24
 8002370:	189b      	adds	r3, r3, r2
 8002372:	19db      	adds	r3, r3, r7
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b08      	cmp	r3, #8
 8002378:	d822      	bhi.n	80023c0 <UART_SetConfig+0x40c>
 800237a:	009a      	lsls	r2, r3, #2
 800237c:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <UART_SetConfig+0x484>)
 800237e:	18d3      	adds	r3, r2, r3
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002384:	f7ff fc70 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8002388:	0003      	movs	r3, r0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800238c:	e021      	b.n	80023d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800238e:	f7ff fc81 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 8002392:	0003      	movs	r3, r0
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002396:	e01c      	b.n	80023d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002398:	4b28      	ldr	r3, [pc, #160]	; (800243c <UART_SetConfig+0x488>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2210      	movs	r2, #16
 800239e:	4013      	ands	r3, r2
 80023a0:	d002      	beq.n	80023a8 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80023a2:	4b27      	ldr	r3, [pc, #156]	; (8002440 <UART_SetConfig+0x48c>)
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80023a6:	e014      	b.n	80023d2 <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <UART_SetConfig+0x490>)
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023ac:	e011      	b.n	80023d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023ae:	f7ff fbab 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 80023b2:	0003      	movs	r3, r0
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023b6:	e00c      	b.n	80023d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023be:	e008      	b.n	80023d2 <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80023c4:	231a      	movs	r3, #26
 80023c6:	2218      	movs	r2, #24
 80023c8:	189b      	adds	r3, r3, r2
 80023ca:	19db      	adds	r3, r3, r7
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
        break;
 80023d0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	085a      	lsrs	r2, r3, #1
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	18d2      	adds	r2, r2, r3
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0019      	movs	r1, r3
 80023e8:	0010      	movs	r0, r2
 80023ea:	f7fd fe8d 	bl	8000108 <__udivsi3>
 80023ee:	0003      	movs	r3, r0
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	2b0f      	cmp	r3, #15
 80023f8:	d909      	bls.n	800240e <UART_SetConfig+0x45a>
 80023fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	025b      	lsls	r3, r3, #9
 8002400:	429a      	cmp	r2, r3
 8002402:	d204      	bcs.n	800240e <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800240a:	60da      	str	r2, [r3, #12]
 800240c:	e005      	b.n	800241a <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 800240e:	231a      	movs	r3, #26
 8002410:	2218      	movs	r2, #24
 8002412:	189b      	adds	r3, r3, r2
 8002414:	19db      	adds	r3, r3, r7
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	2200      	movs	r2, #0
 800241e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2200      	movs	r2, #0
 8002424:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002426:	231a      	movs	r3, #26
 8002428:	2218      	movs	r2, #24
 800242a:	189b      	adds	r3, r3, r2
 800242c:	19db      	adds	r3, r3, r7
 800242e:	781b      	ldrb	r3, [r3, #0]
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b00e      	add	sp, #56	; 0x38
 8002436:	bdb0      	pop	{r4, r5, r7, pc}
 8002438:	080028e8 	.word	0x080028e8
 800243c:	40021000 	.word	0x40021000
 8002440:	003d0900 	.word	0x003d0900
 8002444:	00f42400 	.word	0x00f42400

08002448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	2201      	movs	r2, #1
 8002456:	4013      	ands	r3, r2
 8002458:	d00b      	beq.n	8002472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a4a      	ldr	r2, [pc, #296]	; (800258c <UART_AdvFeatureConfig+0x144>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	2202      	movs	r2, #2
 8002478:	4013      	ands	r3, r2
 800247a:	d00b      	beq.n	8002494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4a43      	ldr	r2, [pc, #268]	; (8002590 <UART_AdvFeatureConfig+0x148>)
 8002484:	4013      	ands	r3, r2
 8002486:	0019      	movs	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	2204      	movs	r2, #4
 800249a:	4013      	ands	r3, r2
 800249c:	d00b      	beq.n	80024b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a3b      	ldr	r2, [pc, #236]	; (8002594 <UART_AdvFeatureConfig+0x14c>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	2208      	movs	r2, #8
 80024bc:	4013      	ands	r3, r2
 80024be:	d00b      	beq.n	80024d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4a34      	ldr	r2, [pc, #208]	; (8002598 <UART_AdvFeatureConfig+0x150>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	2210      	movs	r2, #16
 80024de:	4013      	ands	r3, r2
 80024e0:	d00b      	beq.n	80024fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a2c      	ldr	r2, [pc, #176]	; (800259c <UART_AdvFeatureConfig+0x154>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	2220      	movs	r2, #32
 8002500:	4013      	ands	r3, r2
 8002502:	d00b      	beq.n	800251c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <UART_AdvFeatureConfig+0x158>)
 800250c:	4013      	ands	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	2240      	movs	r2, #64	; 0x40
 8002522:	4013      	ands	r3, r2
 8002524:	d01d      	beq.n	8002562 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a1d      	ldr	r2, [pc, #116]	; (80025a4 <UART_AdvFeatureConfig+0x15c>)
 800252e:	4013      	ands	r3, r2
 8002530:	0019      	movs	r1, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	035b      	lsls	r3, r3, #13
 8002546:	429a      	cmp	r2, r3
 8002548:	d10b      	bne.n	8002562 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <UART_AdvFeatureConfig+0x160>)
 8002552:	4013      	ands	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	4013      	ands	r3, r2
 800256a:	d00b      	beq.n	8002584 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <UART_AdvFeatureConfig+0x164>)
 8002574:	4013      	ands	r3, r2
 8002576:	0019      	movs	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	605a      	str	r2, [r3, #4]
  }
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}
 800258c:	fffdffff 	.word	0xfffdffff
 8002590:	fffeffff 	.word	0xfffeffff
 8002594:	fffbffff 	.word	0xfffbffff
 8002598:	ffff7fff 	.word	0xffff7fff
 800259c:	ffffefff 	.word	0xffffefff
 80025a0:	ffffdfff 	.word	0xffffdfff
 80025a4:	ffefffff 	.word	0xffefffff
 80025a8:	ff9fffff 	.word	0xff9fffff
 80025ac:	fff7ffff 	.word	0xfff7ffff

080025b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	2100      	movs	r1, #0
 80025be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025c0:	f7fe fa78 	bl	8000ab4 <HAL_GetTick>
 80025c4:	0003      	movs	r3, r0
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2208      	movs	r2, #8
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d10c      	bne.n	80025f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	0391      	lsls	r1, r2, #14
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4a17      	ldr	r2, [pc, #92]	; (800263c <UART_CheckIdleState+0x8c>)
 80025e0:	9200      	str	r2, [sp, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f000 f82c 	bl	8002640 <UART_WaitOnFlagUntilTimeout>
 80025e8:	1e03      	subs	r3, r0, #0
 80025ea:	d001      	beq.n	80025f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e021      	b.n	8002634 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2204      	movs	r2, #4
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d10c      	bne.n	8002618 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2280      	movs	r2, #128	; 0x80
 8002602:	03d1      	lsls	r1, r2, #15
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4a0d      	ldr	r2, [pc, #52]	; (800263c <UART_CheckIdleState+0x8c>)
 8002608:	9200      	str	r2, [sp, #0]
 800260a:	2200      	movs	r2, #0
 800260c:	f000 f818 	bl	8002640 <UART_WaitOnFlagUntilTimeout>
 8002610:	1e03      	subs	r3, r0, #0
 8002612:	d001      	beq.n	8002618 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e00d      	b.n	8002634 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2274      	movs	r2, #116	; 0x74
 800262e:	2100      	movs	r1, #0
 8002630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b004      	add	sp, #16
 800263a:	bd80      	pop	{r7, pc}
 800263c:	01ffffff 	.word	0x01ffffff

08002640 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b094      	sub	sp, #80	; 0x50
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002650:	e0a3      	b.n	800279a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002654:	3301      	adds	r3, #1
 8002656:	d100      	bne.n	800265a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002658:	e09f      	b.n	800279a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265a:	f7fe fa2b 	bl	8000ab4 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002666:	429a      	cmp	r2, r3
 8002668:	d302      	bcc.n	8002670 <UART_WaitOnFlagUntilTimeout+0x30>
 800266a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800266c:	2b00      	cmp	r3, #0
 800266e:	d13d      	bne.n	80026ec <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002670:	f3ef 8310 	mrs	r3, PRIMASK
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002678:	647b      	str	r3, [r7, #68]	; 0x44
 800267a:	2301      	movs	r3, #1
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	f383 8810 	msr	PRIMASK, r3
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	494c      	ldr	r1, [pc, #304]	; (80027c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002692:	400a      	ands	r2, r1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002698:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	f383 8810 	msr	PRIMASK, r3
}
 80026a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a2:	f3ef 8310 	mrs	r3, PRIMASK
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80026a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026aa:	643b      	str	r3, [r7, #64]	; 0x40
 80026ac:	2301      	movs	r3, #1
 80026ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	f383 8810 	msr	PRIMASK, r3
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2101      	movs	r1, #1
 80026c4:	438a      	bics	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ce:	f383 8810 	msr	PRIMASK, r3
}
 80026d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2274      	movs	r2, #116	; 0x74
 80026e4:	2100      	movs	r1, #0
 80026e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e067      	b.n	80027bc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2204      	movs	r2, #4
 80026f4:	4013      	ands	r3, r2
 80026f6:	d050      	beq.n	800279a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	401a      	ands	r2, r3
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	429a      	cmp	r2, r3
 800270a:	d146      	bne.n	800279a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002716:	f3ef 8310 	mrs	r3, PRIMASK
 800271a:	613b      	str	r3, [r7, #16]
  return(result);
 800271c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800271e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002720:	2301      	movs	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f383 8810 	msr	PRIMASK, r3
}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4923      	ldr	r1, [pc, #140]	; (80027c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002738:	400a      	ands	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f383 8810 	msr	PRIMASK, r3
}
 8002746:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002748:	f3ef 8310 	mrs	r3, PRIMASK
 800274c:	61fb      	str	r3, [r7, #28]
  return(result);
 800274e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002750:	64bb      	str	r3, [r7, #72]	; 0x48
 8002752:	2301      	movs	r3, #1
 8002754:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f383 8810 	msr	PRIMASK, r3
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2101      	movs	r1, #1
 800276a:	438a      	bics	r2, r1
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	f383 8810 	msr	PRIMASK, r3
}
 8002778:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2280      	movs	r2, #128	; 0x80
 800278a:	2120      	movs	r1, #32
 800278c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2274      	movs	r2, #116	; 0x74
 8002792:	2100      	movs	r1, #0
 8002794:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e010      	b.n	80027bc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	4013      	ands	r3, r2
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	425a      	negs	r2, r3
 80027aa:	4153      	adcs	r3, r2
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	001a      	movs	r2, r3
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d100      	bne.n	80027ba <UART_WaitOnFlagUntilTimeout+0x17a>
 80027b8:	e74b      	b.n	8002652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b014      	add	sp, #80	; 0x50
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	fffffe5f 	.word	0xfffffe5f

080027c8 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e017      	b.n	800280a <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0018      	movs	r0, r3
 80027de:	f7fe f88d 	bl	80008fc <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	0011      	movs	r1, r2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b002      	add	sp, #8
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68d2      	ldr	r2, [r2, #12]
 8002822:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b002      	add	sp, #8
 800282c:	bd80      	pop	{r7, pc}

0800282e <memset>:
 800282e:	0003      	movs	r3, r0
 8002830:	1882      	adds	r2, r0, r2
 8002832:	4293      	cmp	r3, r2
 8002834:	d100      	bne.n	8002838 <memset+0xa>
 8002836:	4770      	bx	lr
 8002838:	7019      	strb	r1, [r3, #0]
 800283a:	3301      	adds	r3, #1
 800283c:	e7f9      	b.n	8002832 <memset+0x4>
	...

08002840 <__libc_init_array>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	2600      	movs	r6, #0
 8002844:	4c0c      	ldr	r4, [pc, #48]	; (8002878 <__libc_init_array+0x38>)
 8002846:	4d0d      	ldr	r5, [pc, #52]	; (800287c <__libc_init_array+0x3c>)
 8002848:	1b64      	subs	r4, r4, r5
 800284a:	10a4      	asrs	r4, r4, #2
 800284c:	42a6      	cmp	r6, r4
 800284e:	d109      	bne.n	8002864 <__libc_init_array+0x24>
 8002850:	2600      	movs	r6, #0
 8002852:	f000 f819 	bl	8002888 <_init>
 8002856:	4c0a      	ldr	r4, [pc, #40]	; (8002880 <__libc_init_array+0x40>)
 8002858:	4d0a      	ldr	r5, [pc, #40]	; (8002884 <__libc_init_array+0x44>)
 800285a:	1b64      	subs	r4, r4, r5
 800285c:	10a4      	asrs	r4, r4, #2
 800285e:	42a6      	cmp	r6, r4
 8002860:	d105      	bne.n	800286e <__libc_init_array+0x2e>
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	00b3      	lsls	r3, r6, #2
 8002866:	58eb      	ldr	r3, [r5, r3]
 8002868:	4798      	blx	r3
 800286a:	3601      	adds	r6, #1
 800286c:	e7ee      	b.n	800284c <__libc_init_array+0xc>
 800286e:	00b3      	lsls	r3, r6, #2
 8002870:	58eb      	ldr	r3, [r5, r3]
 8002872:	4798      	blx	r3
 8002874:	3601      	adds	r6, #1
 8002876:	e7f2      	b.n	800285e <__libc_init_array+0x1e>
 8002878:	08002914 	.word	0x08002914
 800287c:	08002914 	.word	0x08002914
 8002880:	08002918 	.word	0x08002918
 8002884:	08002914 	.word	0x08002914

08002888 <_init>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr

08002894 <_fini>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr
