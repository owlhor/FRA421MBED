
H745_PWMon_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001508  08009558  08009558  00019558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa60  0800aa60  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa60  0800aa60  0001aa60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa68  0800aa68  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa68  0800aa68  0001aa68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa6c  0800aa6c  0001aa6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800aa70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000074  0800aae4  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d4  0800ab44  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000974  24000134  0800aba4  00020134  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000aa8  0800aba4  00020aa8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY
 15 .debug_info   00020bc6  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000039b7  00000000  00000000  00040d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001720  00000000  00000000  00044728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000011df  00000000  00000000  00045e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003ca3a  00000000  00000000  00047027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00022b84  00000000  00000000  00083a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001877f3  00000000  00000000  000a65e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000067d8  00000000  00000000  0022ddd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  002345b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009540 	.word	0x08009540

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	08009540 	.word	0x08009540

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <SystemInit+0xfc>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <SystemInit+0xfc>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <SystemInit+0xfc>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	4a38      	ldr	r2, [pc, #224]	; (8000778 <SystemInit+0xfc>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d807      	bhi.n	80006b8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a8:	4b34      	ldr	r3, [pc, #208]	; (800077c <SystemInit+0x100>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 030f 	bic.w	r3, r3, #15
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <SystemInit+0x100>)
 80006b2:	f043 0307 	orr.w	r3, r3, #7
 80006b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <SystemInit+0x104>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a30      	ldr	r2, [pc, #192]	; (8000780 <SystemInit+0x104>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <SystemInit+0x104>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <SystemInit+0x104>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	492c      	ldr	r1, [pc, #176]	; (8000780 <SystemInit+0x104>)
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <SystemInit+0x108>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemInit+0x100>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 030f 	bic.w	r3, r3, #15
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <SystemInit+0x100>)
 80006ec:	f043 0307 	orr.w	r3, r3, #7
 80006f0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemInit+0x104>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <SystemInit+0x104>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <SystemInit+0x104>)
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <SystemInit+0x10c>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <SystemInit+0x104>)
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <SystemInit+0x110>)
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <SystemInit+0x104>)
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <SystemInit+0x114>)
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <SystemInit+0x104>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <SystemInit+0x114>)
 8000720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <SystemInit+0x104>)
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <SystemInit+0x114>)
 800072c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <SystemInit+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <SystemInit+0x104>)
 800073a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <SystemInit+0x104>)
 8000742:	2200      	movs	r2, #0
 8000744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <SystemInit+0x118>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <SystemInit+0x118>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <SystemInit+0x11c>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x120>)
 8000758:	4013      	ands	r3, r2
 800075a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075e:	d202      	bcs.n	8000766 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <SystemInit+0x124>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x128>)
 8000768:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800076c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	52002000 	.word	0x52002000
 8000780:	58024400 	.word	0x58024400
 8000784:	eaf6ed7f 	.word	0xeaf6ed7f
 8000788:	02020200 	.word	0x02020200
 800078c:	01ff0000 	.word	0x01ff0000
 8000790:	01010280 	.word	0x01010280
 8000794:	580000c0 	.word	0x580000c0
 8000798:	5c001000 	.word	0x5c001000
 800079c:	ffff0000 	.word	0xffff0000
 80007a0:	51008108 	.word	0x51008108
 80007a4:	52004000 	.word	0x52004000

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b4:	bf00      	nop
 80007b6:	4b5a      	ldr	r3, [pc, #360]	; (8000920 <main+0x178>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d004      	beq.n	80007cc <main+0x24>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	1e5a      	subs	r2, r3, #1
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	dcf4      	bgt.n	80007b6 <main+0xe>
  if ( timeout < 0 )
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	da01      	bge.n	80007d6 <main+0x2e>
  {
  Error_Handler();
 80007d2:	f000 fd35 	bl	8001240 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f002 facf 	bl	8002d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f8b5 	bl	8000948 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007de:	4b50      	ldr	r3, [pc, #320]	; (8000920 <main+0x178>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e4:	4a4e      	ldr	r2, [pc, #312]	; (8000920 <main+0x178>)
 80007e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ee:	4b4c      	ldr	r3, [pc, #304]	; (8000920 <main+0x178>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f003 fc05 	bl	800400c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000802:	2100      	movs	r1, #0
 8000804:	2000      	movs	r0, #0
 8000806:	f003 fc1b 	bl	8004040 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000810:	bf00      	nop
 8000812:	4b43      	ldr	r3, [pc, #268]	; (8000920 <main+0x178>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d104      	bne.n	8000828 <main+0x80>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	dcf4      	bgt.n	8000812 <main+0x6a>
if ( timeout < 0 )
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	da01      	bge.n	8000832 <main+0x8a>
{
Error_Handler();
 800082e:	f000 fd07 	bl	8001240 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000832:	f000 faa5 	bl	8000d80 <MX_GPIO_Init>
  MX_ETH_Init();
 8000836:	f000 f939 	bl	8000aac <MX_ETH_Init>
  MX_USART3_UART_Init();
 800083a:	f000 fa23 	bl	8000c84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800083e:	f000 fa6d 	bl	8000d1c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 8000842:	f000 f9b3 	bl	8000bac <MX_I2C4_Init>
  MX_HDMI_CEC_Init();
 8000846:	f000 f97d 	bl	8000b44 <MX_HDMI_CEC_Init>
  MX_QUADSPI_Init();
 800084a:	f000 f9ef 	bl	8000c2c <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */

  timestamp.one = 0;
 800084e:	4b35      	ldr	r3, [pc, #212]	; (8000924 <main+0x17c>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
  timestamp.two = 0;
 8000854:	4b33      	ldr	r3, [pc, #204]	; (8000924 <main+0x17c>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]

  ili9486_Init();
 800085a:	f001 f8f3 	bl	8001a44 <ili9486_Init>
  ili9486_DisplayOn();
 800085e:	f001 f8d5 	bl	8001a0c <ili9486_DisplayOn>

  ili_scr_1();
 8000862:	f000 fb43 	bl	8000eec <ili_scr_1>

  ili9486_FillRect(0, 0, 480, 35, cl_BLUE);
 8000866:	231f      	movs	r3, #31
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2323      	movs	r3, #35	; 0x23
 800086c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000870:	2100      	movs	r1, #0
 8000872:	2000      	movs	r0, #0
 8000874:	f001 f9a8 	bl	8001bc8 <ili9486_FillRect>
  ili9486_WriteStringNoBG(10, 10, " > PWMon ----->>>-----", Font20, cl_WHITE);
 8000878:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <main+0x180>)
 800087a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087e:	9201      	str	r2, [sp, #4]
 8000880:	685a      	ldr	r2, [r3, #4]
 8000882:	9200      	str	r2, [sp, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a29      	ldr	r2, [pc, #164]	; (800092c <main+0x184>)
 8000888:	210a      	movs	r1, #10
 800088a:	200a      	movs	r0, #10
 800088c:	f001 fb70 	bl	8001f70 <ili9486_WriteStringNoBG>
  ili9486_WriteStringNoBG(400, 10, " OWL_HOR ", Font12, cl_WHITE);
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <main+0x188>)
 8000892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000896:	9201      	str	r2, [sp, #4]
 8000898:	685a      	ldr	r2, [r3, #4]
 800089a:	9200      	str	r2, [sp, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a25      	ldr	r2, [pc, #148]	; (8000934 <main+0x18c>)
 80008a0:	210a      	movs	r1, #10
 80008a2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008a6:	f001 fb63 	bl	8001f70 <ili9486_WriteStringNoBG>

  ili9486_WriteStringNoBG(10, 40, " INA219 PWRMon Quick", Font20, cl_OLIVE);
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <main+0x180>)
 80008ac:	f647 32e0 	movw	r2, #31712	; 0x7be0
 80008b0:	9201      	str	r2, [sp, #4]
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	9200      	str	r2, [sp, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <main+0x190>)
 80008ba:	2128      	movs	r1, #40	; 0x28
 80008bc:	200a      	movs	r0, #10
 80008be:	f001 fb57 	bl	8001f70 <ili9486_WriteStringNoBG>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// blink
	  if(timestamp.one <= HAL_GetTick()){
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <main+0x17c>)
 80008c4:	681c      	ldr	r4, [r3, #0]
 80008c6:	f002 fadd 	bl	8002e84 <HAL_GetTick>
 80008ca:	4603      	mov	r3, r0
 80008cc:	429c      	cmp	r4, r3
 80008ce:	d815      	bhi.n	80008fc <main+0x154>
		  timestamp.one = HAL_GetTick() + 50;
 80008d0:	f002 fad8 	bl	8002e84 <HAL_GetTick>
 80008d4:	4603      	mov	r3, r0
 80008d6:	3332      	adds	r3, #50	; 0x32
 80008d8:	4a12      	ldr	r2, [pc, #72]	; (8000924 <main+0x17c>)
 80008da:	6013      	str	r3, [r2, #0]

		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80008dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e0:	4816      	ldr	r0, [pc, #88]	; (800093c <main+0x194>)
 80008e2:	f003 fb78 	bl	8003fd6 <HAL_GPIO_TogglePin>
		  ili_seq_arrow();
 80008e6:	f000 fb4f 	bl	8000f88 <ili_seq_arrow>

		  //// Labeling, first time only
		  if(onetime){
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <main+0x198>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d004      	beq.n	80008fc <main+0x154>
			  onetime = 0;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <main+0x198>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
			  	 pwmon_labeling();
 80008f8:	f000 fc84 	bl	8001204 <pwmon_labeling>

	  }


	  //// data request
	  if(timestamp.two <= HAL_GetTick()){
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <main+0x17c>)
 80008fe:	685c      	ldr	r4, [r3, #4]
 8000900:	f002 fac0 	bl	8002e84 <HAL_GetTick>
 8000904:	4603      	mov	r3, r0
 8000906:	429c      	cmp	r4, r3
 8000908:	d8db      	bhi.n	80008c2 <main+0x11a>
		  timestamp.two = HAL_GetTick() + 100;
 800090a:	f002 fabb 	bl	8002e84 <HAL_GetTick>
 800090e:	4603      	mov	r3, r0
 8000910:	3364      	adds	r3, #100	; 0x64
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <main+0x17c>)
 8000914:	6053      	str	r3, [r2, #4]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000916:	2102      	movs	r1, #2
 8000918:	480a      	ldr	r0, [pc, #40]	; (8000944 <main+0x19c>)
 800091a:	f003 fb5c 	bl	8003fd6 <HAL_GPIO_TogglePin>
	  if(timestamp.one <= HAL_GetTick()){
 800091e:	e7d0      	b.n	80008c2 <main+0x11a>
 8000920:	58024400 	.word	0x58024400
 8000924:	240008cc 	.word	0x240008cc
 8000928:	24000014 	.word	0x24000014
 800092c:	08009558 	.word	0x08009558
 8000930:	2400000c 	.word	0x2400000c
 8000934:	08009570 	.word	0x08009570
 8000938:	0800957c 	.word	0x0800957c
 800093c:	58020400 	.word	0x58020400
 8000940:	24000008 	.word	0x24000008
 8000944:	58021000 	.word	0x58021000

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09e      	sub	sp, #120	; 0x78
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000952:	224c      	movs	r2, #76	; 0x4c
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f008 f96e 	bl	8008c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2220      	movs	r2, #32
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f008 f967 	bl	8008c38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800096a:	2002      	movs	r0, #2
 800096c:	f003 fdec 	bl	8004548 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <SystemClock_Config+0x158>)
 8000976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000978:	4a49      	ldr	r2, [pc, #292]	; (8000aa0 <SystemClock_Config+0x158>)
 800097a:	f023 0301 	bic.w	r3, r3, #1
 800097e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000980:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <SystemClock_Config+0x158>)
 8000982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b46      	ldr	r3, [pc, #280]	; (8000aa4 <SystemClock_Config+0x15c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a45      	ldr	r2, [pc, #276]	; (8000aa4 <SystemClock_Config+0x15c>)
 8000990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <SystemClock_Config+0x15c>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009a2:	bf00      	nop
 80009a4:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <SystemClock_Config+0x15c>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009b0:	d1f8      	bne.n	80009a4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b3d      	ldr	r3, [pc, #244]	; (8000aa8 <SystemClock_Config+0x160>)
 80009b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009b8:	4a3b      	ldr	r2, [pc, #236]	; (8000aa8 <SystemClock_Config+0x160>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009c2:	4b39      	ldr	r3, [pc, #228]	; (8000aa8 <SystemClock_Config+0x160>)
 80009c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <SystemClock_Config+0x15c>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <SystemClock_Config+0x15c>)
 80009da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <SystemClock_Config+0x15c>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <SystemClock_Config+0x158>)
 80009ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ee:	4a2c      	ldr	r2, [pc, #176]	; (8000aa0 <SystemClock_Config+0x158>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <SystemClock_Config+0x158>)
 80009f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a02:	bf00      	nop
 8000a04:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <SystemClock_Config+0x15c>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a10:	d1f8      	bne.n	8000a04 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000a12:	2329      	movs	r3, #41	; 0x29
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a16:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	2302      	movs	r3, #2
 8000a26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a30:	2378      	movs	r3, #120	; 0x78
 8000a32:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a40:	230c      	movs	r3, #12
 8000a42:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fe9d 	bl	8004790 <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000a5c:	f000 fbf0 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	233f      	movs	r3, #63	; 0x3f
 8000a62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2303      	movs	r3, #3
 8000a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a70:	2340      	movs	r3, #64	; 0x40
 8000a72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a74:	2340      	movs	r3, #64	; 0x40
 8000a76:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a7e:	2340      	movs	r3, #64	; 0x40
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	2104      	movs	r1, #4
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 fadb 	bl	8005044 <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8000a94:	f000 fbd4 	bl	8001240 <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3778      	adds	r7, #120	; 0x78
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	58000400 	.word	0x58000400
 8000aa4:	58024800 	.word	0x58024800
 8000aa8:	58024400 	.word	0x58024400

08000aac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_ETH_Init+0x80>)
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <MX_ETH_Init+0x84>)
 8000ab4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_ETH_Init+0x88>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_ETH_Init+0x88>)
 8000abe:	2280      	movs	r2, #128	; 0x80
 8000ac0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_ETH_Init+0x88>)
 8000ac4:	22e1      	movs	r2, #225	; 0xe1
 8000ac6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_ETH_Init+0x88>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_ETH_Init+0x88>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_ETH_Init+0x88>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_ETH_Init+0x80>)
 8000adc:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <MX_ETH_Init+0x88>)
 8000ade:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_ETH_Init+0x80>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_ETH_Init+0x80>)
 8000ae8:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <MX_ETH_Init+0x8c>)
 8000aea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_ETH_Init+0x80>)
 8000aee:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <MX_ETH_Init+0x90>)
 8000af0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_ETH_Init+0x80>)
 8000af4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000af8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_ETH_Init+0x80>)
 8000afc:	f002 fc7e 	bl	80033fc <HAL_ETH_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b06:	f000 fb9b 	bl	8001240 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b0a:	2238      	movs	r2, #56	; 0x38
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_ETH_Init+0x94>)
 8000b10:	f008 f892 	bl	8008c38 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_ETH_Init+0x94>)
 8000b16:	2221      	movs	r2, #33	; 0x21
 8000b18:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_ETH_Init+0x94>)
 8000b1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b20:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_ETH_Init+0x94>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	24000188 	.word	0x24000188
 8000b30:	40028000 	.word	0x40028000
 8000b34:	2400094c 	.word	0x2400094c
 8000b38:	240000d4 	.word	0x240000d4
 8000b3c:	24000074 	.word	0x24000074
 8000b40:	24000150 	.word	0x24000150

08000b44 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_HDMI_CEC_Init+0x5c>)
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <MX_HDMI_CEC_Init+0x60>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_HDMI_CEC_Init+0x5c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_HDMI_CEC_Init+0x5c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_HDMI_CEC_Init+0x5c>)
 8000b5c:	2210      	movs	r2, #16
 8000b5e:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_HDMI_CEC_Init+0x5c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_HDMI_CEC_Init+0x5c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_HDMI_CEC_Init+0x5c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_HDMI_CEC_Init+0x5c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_HDMI_CEC_Init+0x5c>)
 8000b7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b7e:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_HDMI_CEC_Init+0x5c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_HDMI_CEC_Init+0x5c>)
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <MX_HDMI_CEC_Init+0x64>)
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_HDMI_CEC_Init+0x5c>)
 8000b8e:	f002 f9c9 	bl	8002f24 <HAL_CEC_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8000b98:	f000 fb52 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	24000238 	.word	0x24000238
 8000ba4:	40006c00 	.word	0x40006c00
 8000ba8:	240008bc 	.word	0x240008bc

08000bac <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <MX_I2C4_Init+0x78>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00B03FDB;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <MX_I2C4_Init+0x7c>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000be8:	f003 fa3e 	bl	8004068 <HAL_I2C_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000bf2:	f000 fb25 	bl	8001240 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bfa:	f003 fac5 	bl	8004188 <HAL_I2CEx_ConfigAnalogFilter>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000c04:	f000 fb1c 	bl	8001240 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000c0c:	f003 fb07 	bl	800421e <HAL_I2CEx_ConfigDigitalFilter>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f000 fb13 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2400027c 	.word	0x2400027c
 8000c24:	58001c00 	.word	0x58001c00
 8000c28:	00b03fdb 	.word	0x00b03fdb

08000c2c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_QUADSPI_Init+0x50>)
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <MX_QUADSPI_Init+0x54>)
 8000c34:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_QUADSPI_Init+0x50>)
 8000c38:	22ff      	movs	r2, #255	; 0xff
 8000c3a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_QUADSPI_Init+0x50>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_QUADSPI_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_QUADSPI_Init+0x50>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_QUADSPI_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_QUADSPI_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_QUADSPI_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_QUADSPI_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_QUADSPI_Init+0x50>)
 8000c68:	f003 fcd8 	bl	800461c <HAL_QSPI_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000c72:	f000 fae5 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	240002d0 	.word	0x240002d0
 8000c80:	52005000 	.word	0x52005000

08000c84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000c8a:	4a23      	ldr	r2, [pc, #140]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ccc:	4811      	ldr	r0, [pc, #68]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cce:	f006 fb71 	bl	80073b4 <HAL_UART_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cd8:	f000 fab2 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000ce0:	f007 fb73 	bl	80083ca <HAL_UARTEx_SetTxFifoThreshold>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cea:	f000 faa9 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4808      	ldr	r0, [pc, #32]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cf2:	f007 fba8 	bl	8008446 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cfc:	f000 faa0 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000d02:	f007 fb29 	bl	8008358 <HAL_UARTEx_DisableFifoMode>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d0c:	f000 fa98 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2400031c 	.word	0x2400031c
 8000d18:	40004800 	.word	0x40004800

08000d1c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d24:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d28:	2209      	movs	r2, #9
 8000d2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d64:	f003 faa7 	bl	80042b6 <HAL_PCD_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d6e:	f000 fa67 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	240003b0 	.word	0x240003b0
 8000d7c:	40080000 	.word	0x40080000

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d96:	4b52      	ldr	r3, [pc, #328]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a50      	ldr	r2, [pc, #320]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b4e      	ldr	r3, [pc, #312]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	623b      	str	r3, [r7, #32]
 8000db2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db4:	4b4a      	ldr	r3, [pc, #296]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	4a49      	ldr	r2, [pc, #292]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc4:	4b46      	ldr	r3, [pc, #280]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	61fb      	str	r3, [r7, #28]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd2:	4b43      	ldr	r3, [pc, #268]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	4a41      	ldr	r2, [pc, #260]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000dda:	f043 0320 	orr.w	r3, r3, #32
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de2:	4b3f      	ldr	r3, [pc, #252]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	f003 0320 	and.w	r3, r3, #32
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df0:	4b3b      	ldr	r3, [pc, #236]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	4a3a      	ldr	r2, [pc, #232]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e00:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b34      	ldr	r3, [pc, #208]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	4a32      	ldr	r2, [pc, #200]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1e:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	4a2b      	ldr	r2, [pc, #172]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3c:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4a:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a23      	ldr	r2, [pc, #140]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8c:	4815      	ldr	r0, [pc, #84]	; (8000ee4 <MX_GPIO_Init+0x164>)
 8000e8e:	f003 f889 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2102      	movs	r1, #2
 8000e96:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <MX_GPIO_Init+0x168>)
 8000e98:	f003 f884 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000e9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <MX_GPIO_Init+0x164>)
 8000eb6:	f002 fec5 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_GPIO_Init+0x168>)
 8000ed2:	f002 feb7 	bl	8003c44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed6:	bf00      	nop
 8000ed8:	3738      	adds	r7, #56	; 0x38
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58020400 	.word	0x58020400
 8000ee8:	58021000 	.word	0x58021000

08000eec <ili_scr_1>:

/* USER CODE BEGIN 4 */
void ili_scr_1(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af02      	add	r7, sp, #8

	  ili9486_FillRect(0, 0, 480, 320, cl_BLACK);
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000efa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000efe:	2100      	movs	r1, #0
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 fe61 	bl	8001bc8 <ili9486_FillRect>

	  ili9486_FillRect(0, 300, 80, 20, cl_RED); // Red
 8000f06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2314      	movs	r3, #20
 8000f0e:	2250      	movs	r2, #80	; 0x50
 8000f10:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f14:	2000      	movs	r0, #0
 8000f16:	f000 fe57 	bl	8001bc8 <ili9486_FillRect>
	  ili9486_FillRect(80, 300, 80, 20, cl_GREEN); // Green RGB565
 8000f1a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2314      	movs	r3, #20
 8000f22:	2250      	movs	r2, #80	; 0x50
 8000f24:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f28:	2050      	movs	r0, #80	; 0x50
 8000f2a:	f000 fe4d 	bl	8001bc8 <ili9486_FillRect>
	  ili9486_FillRect(160, 300, 80, 20, cl_BLUE); // Blue
 8000f2e:	231f      	movs	r3, #31
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2314      	movs	r3, #20
 8000f34:	2250      	movs	r2, #80	; 0x50
 8000f36:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f3a:	20a0      	movs	r0, #160	; 0xa0
 8000f3c:	f000 fe44 	bl	8001bc8 <ili9486_FillRect>
	  ili9486_FillRect(240, 300,  80, 20, cl_CYAN); // C0x07FF
 8000f40:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2314      	movs	r3, #20
 8000f48:	2250      	movs	r2, #80	; 0x50
 8000f4a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f4e:	20f0      	movs	r0, #240	; 0xf0
 8000f50:	f000 fe3a 	bl	8001bc8 <ili9486_FillRect>
	  ili9486_FillRect(320, 300, 80, 20, cl_MAGENTA); // M 0xF81F
 8000f54:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2314      	movs	r3, #20
 8000f5c:	2250      	movs	r2, #80	; 0x50
 8000f5e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f62:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000f66:	f000 fe2f 	bl	8001bc8 <ili9486_FillRect>
	  ili9486_FillRect(400, 300, 80, 20, cl_YELLOW); // Y0xFFE0
 8000f6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2314      	movs	r3, #20
 8000f72:	2250      	movs	r2, #80	; 0x50
 8000f74:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f78:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f7c:	f000 fe24 	bl	8001bc8 <ili9486_FillRect>
	  //ili9486_FillRect(390, 30, 70, 230, cl_BLACK); // K
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <ili_seq_arrow>:

void ili_seq_arrow(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af04      	add	r7, sp, #16
	//ili9486_WriteStringNoBG(10, 10, " > STAMPR ----->>>-----", Font20, cl_WHITE);
	static uint8_t st_arr = 0;
	uint8_t xpoo = 166;
 8000f8e:	23a6      	movs	r3, #166	; 0xa6
 8000f90:	71fb      	strb	r3, [r7, #7]
	uint8_t ypoo = 10;
 8000f92:	230a      	movs	r3, #10
 8000f94:	71bb      	strb	r3, [r7, #6]

	switch(st_arr){
 8000f96:	4b8b      	ldr	r3, [pc, #556]	; (80011c4 <ili_seq_arrow+0x23c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	2b0b      	cmp	r3, #11
 8000f9e:	d81b      	bhi.n	8000fd8 <ili_seq_arrow+0x50>
 8000fa0:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <ili_seq_arrow+0x20>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000ffb 	.word	0x08000ffb
 8000fac:	0800101d 	.word	0x0800101d
 8000fb0:	0800103f 	.word	0x0800103f
 8000fb4:	08001061 	.word	0x08001061
 8000fb8:	08001083 	.word	0x08001083
 8000fbc:	080010a5 	.word	0x080010a5
 8000fc0:	080010c7 	.word	0x080010c7
 8000fc4:	080010e9 	.word	0x080010e9
 8000fc8:	0800110b 	.word	0x0800110b
 8000fcc:	0800112d 	.word	0x0800112d
 8000fd0:	0800114f 	.word	0x0800114f
 8000fd4:	08001171 	.word	0x08001171
	default:
	case 0:
		ili9486_WriteString(xpoo, ypoo, "----->>>-----", Font20, cl_WHITE, cl_BLUE);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	b298      	uxth	r0, r3
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	b299      	uxth	r1, r3
 8000fe0:	4b79      	ldr	r3, [pc, #484]	; (80011c8 <ili_seq_arrow+0x240>)
 8000fe2:	221f      	movs	r2, #31
 8000fe4:	9202      	str	r2, [sp, #8]
 8000fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	9200      	str	r2, [sp, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a76      	ldr	r2, [pc, #472]	; (80011cc <ili_seq_arrow+0x244>)
 8000ff4:	f000 ff6f 	bl	8001ed6 <ili9486_WriteString>
		break;
 8000ff8:	e0cb      	b.n	8001192 <ili_seq_arrow+0x20a>
	case 1:
		ili9486_WriteString(xpoo, ypoo, "------>>>----", Font20, cl_WHITE, cl_BLUE);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	b298      	uxth	r0, r3
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	b299      	uxth	r1, r3
 8001002:	4b71      	ldr	r3, [pc, #452]	; (80011c8 <ili_seq_arrow+0x240>)
 8001004:	221f      	movs	r2, #31
 8001006:	9202      	str	r2, [sp, #8]
 8001008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800100c:	9201      	str	r2, [sp, #4]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	9200      	str	r2, [sp, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a6e      	ldr	r2, [pc, #440]	; (80011d0 <ili_seq_arrow+0x248>)
 8001016:	f000 ff5e 	bl	8001ed6 <ili9486_WriteString>
		break;
 800101a:	e0ba      	b.n	8001192 <ili_seq_arrow+0x20a>
	case 2:
		ili9486_WriteString(xpoo, ypoo, "------->>>---", Font20, cl_WHITE, cl_BLUE);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	b298      	uxth	r0, r3
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	b299      	uxth	r1, r3
 8001024:	4b68      	ldr	r3, [pc, #416]	; (80011c8 <ili_seq_arrow+0x240>)
 8001026:	221f      	movs	r2, #31
 8001028:	9202      	str	r2, [sp, #8]
 800102a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800102e:	9201      	str	r2, [sp, #4]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	9200      	str	r2, [sp, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a67      	ldr	r2, [pc, #412]	; (80011d4 <ili_seq_arrow+0x24c>)
 8001038:	f000 ff4d 	bl	8001ed6 <ili9486_WriteString>
		break;
 800103c:	e0a9      	b.n	8001192 <ili_seq_arrow+0x20a>
	case 3:
		ili9486_WriteString(xpoo, ypoo, "-------->>>--", Font20, cl_WHITE, cl_BLUE);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	b298      	uxth	r0, r3
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	b299      	uxth	r1, r3
 8001046:	4b60      	ldr	r3, [pc, #384]	; (80011c8 <ili_seq_arrow+0x240>)
 8001048:	221f      	movs	r2, #31
 800104a:	9202      	str	r2, [sp, #8]
 800104c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001050:	9201      	str	r2, [sp, #4]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	9200      	str	r2, [sp, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a5f      	ldr	r2, [pc, #380]	; (80011d8 <ili_seq_arrow+0x250>)
 800105a:	f000 ff3c 	bl	8001ed6 <ili9486_WriteString>
		break;
 800105e:	e098      	b.n	8001192 <ili_seq_arrow+0x20a>
	case 4:
		ili9486_WriteString(xpoo, ypoo, "--------->>>-", Font20, cl_WHITE, cl_BLUE);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	b298      	uxth	r0, r3
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	b299      	uxth	r1, r3
 8001068:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <ili_seq_arrow+0x240>)
 800106a:	221f      	movs	r2, #31
 800106c:	9202      	str	r2, [sp, #8]
 800106e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001072:	9201      	str	r2, [sp, #4]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	9200      	str	r2, [sp, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a58      	ldr	r2, [pc, #352]	; (80011dc <ili_seq_arrow+0x254>)
 800107c:	f000 ff2b 	bl	8001ed6 <ili9486_WriteString>
		break;
 8001080:	e087      	b.n	8001192 <ili_seq_arrow+0x20a>
	case 5:
		ili9486_WriteString(xpoo, ypoo, "---------->>>", Font20, cl_WHITE, cl_BLUE);
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	b298      	uxth	r0, r3
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	b299      	uxth	r1, r3
 800108a:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <ili_seq_arrow+0x240>)
 800108c:	221f      	movs	r2, #31
 800108e:	9202      	str	r2, [sp, #8]
 8001090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001094:	9201      	str	r2, [sp, #4]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	9200      	str	r2, [sp, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a50      	ldr	r2, [pc, #320]	; (80011e0 <ili_seq_arrow+0x258>)
 800109e:	f000 ff1a 	bl	8001ed6 <ili9486_WriteString>
		break;
 80010a2:	e076      	b.n	8001192 <ili_seq_arrow+0x20a>
	case 6:
		ili9486_WriteString(xpoo, ypoo, ">---------->>", Font20, cl_WHITE, cl_BLUE);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	b298      	uxth	r0, r3
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	b299      	uxth	r1, r3
 80010ac:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <ili_seq_arrow+0x240>)
 80010ae:	221f      	movs	r2, #31
 80010b0:	9202      	str	r2, [sp, #8]
 80010b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b6:	9201      	str	r2, [sp, #4]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	9200      	str	r2, [sp, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a49      	ldr	r2, [pc, #292]	; (80011e4 <ili_seq_arrow+0x25c>)
 80010c0:	f000 ff09 	bl	8001ed6 <ili9486_WriteString>
		break;
 80010c4:	e065      	b.n	8001192 <ili_seq_arrow+0x20a>
	case 7:
		ili9486_WriteString(xpoo, ypoo, ">>---------->", Font20, cl_WHITE, cl_BLUE);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	b298      	uxth	r0, r3
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	b299      	uxth	r1, r3
 80010ce:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <ili_seq_arrow+0x240>)
 80010d0:	221f      	movs	r2, #31
 80010d2:	9202      	str	r2, [sp, #8]
 80010d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d8:	9201      	str	r2, [sp, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a41      	ldr	r2, [pc, #260]	; (80011e8 <ili_seq_arrow+0x260>)
 80010e2:	f000 fef8 	bl	8001ed6 <ili9486_WriteString>
		break;
 80010e6:	e054      	b.n	8001192 <ili_seq_arrow+0x20a>
	case 8:
		ili9486_WriteString(xpoo, ypoo, ">>>----------", Font20, cl_WHITE, cl_BLUE);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	b298      	uxth	r0, r3
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	b299      	uxth	r1, r3
 80010f0:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <ili_seq_arrow+0x240>)
 80010f2:	221f      	movs	r2, #31
 80010f4:	9202      	str	r2, [sp, #8]
 80010f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fa:	9201      	str	r2, [sp, #4]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	9200      	str	r2, [sp, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a3a      	ldr	r2, [pc, #232]	; (80011ec <ili_seq_arrow+0x264>)
 8001104:	f000 fee7 	bl	8001ed6 <ili9486_WriteString>
		break;
 8001108:	e043      	b.n	8001192 <ili_seq_arrow+0x20a>
	case 9:
		ili9486_WriteString(xpoo, ypoo, "->>>---------", Font20, cl_WHITE, cl_BLUE);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	b298      	uxth	r0, r3
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	b299      	uxth	r1, r3
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <ili_seq_arrow+0x240>)
 8001114:	221f      	movs	r2, #31
 8001116:	9202      	str	r2, [sp, #8]
 8001118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111c:	9201      	str	r2, [sp, #4]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	9200      	str	r2, [sp, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <ili_seq_arrow+0x268>)
 8001126:	f000 fed6 	bl	8001ed6 <ili9486_WriteString>
		break;
 800112a:	e032      	b.n	8001192 <ili_seq_arrow+0x20a>
	case 10:
		ili9486_WriteString(xpoo, ypoo, "-->>>--------", Font20, cl_WHITE, cl_BLUE);
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	b298      	uxth	r0, r3
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	b299      	uxth	r1, r3
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <ili_seq_arrow+0x240>)
 8001136:	221f      	movs	r2, #31
 8001138:	9202      	str	r2, [sp, #8]
 800113a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113e:	9201      	str	r2, [sp, #4]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	9200      	str	r2, [sp, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a2b      	ldr	r2, [pc, #172]	; (80011f4 <ili_seq_arrow+0x26c>)
 8001148:	f000 fec5 	bl	8001ed6 <ili9486_WriteString>
		break;
 800114c:	e021      	b.n	8001192 <ili_seq_arrow+0x20a>
	case 11:
		ili9486_WriteString(xpoo, ypoo, "--->>>-------", Font20, cl_WHITE, cl_BLUE);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	b298      	uxth	r0, r3
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	b299      	uxth	r1, r3
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <ili_seq_arrow+0x240>)
 8001158:	221f      	movs	r2, #31
 800115a:	9202      	str	r2, [sp, #8]
 800115c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001160:	9201      	str	r2, [sp, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	9200      	str	r2, [sp, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <ili_seq_arrow+0x270>)
 800116a:	f000 feb4 	bl	8001ed6 <ili9486_WriteString>
		break;
 800116e:	e010      	b.n	8001192 <ili_seq_arrow+0x20a>
	case 12:
		ili9486_WriteString(xpoo, ypoo, "---->>>------", Font20, cl_WHITE, cl_BLUE);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	b298      	uxth	r0, r3
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	b299      	uxth	r1, r3
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <ili_seq_arrow+0x240>)
 800117a:	221f      	movs	r2, #31
 800117c:	9202      	str	r2, [sp, #8]
 800117e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001182:	9201      	str	r2, [sp, #4]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	9200      	str	r2, [sp, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <ili_seq_arrow+0x274>)
 800118c:	f000 fea3 	bl	8001ed6 <ili9486_WriteString>
		break;
 8001190:	bf00      	nop
	}
	st_arr++;
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <ili_seq_arrow+0x23c>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <ili_seq_arrow+0x23c>)
 800119c:	701a      	strb	r2, [r3, #0]
	st_arr%=13;
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <ili_seq_arrow+0x23c>)
 80011a0:	7819      	ldrb	r1, [r3, #0]
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <ili_seq_arrow+0x278>)
 80011a4:	fba3 2301 	umull	r2, r3, r3, r1
 80011a8:	089a      	lsrs	r2, r3, #2
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	1acb      	subs	r3, r1, r3
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <ili_seq_arrow+0x23c>)
 80011ba:	701a      	strb	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000952 	.word	0x24000952
 80011c8:	24000014 	.word	0x24000014
 80011cc:	08009594 	.word	0x08009594
 80011d0:	080095a4 	.word	0x080095a4
 80011d4:	080095b4 	.word	0x080095b4
 80011d8:	080095c4 	.word	0x080095c4
 80011dc:	080095d4 	.word	0x080095d4
 80011e0:	080095e4 	.word	0x080095e4
 80011e4:	080095f4 	.word	0x080095f4
 80011e8:	08009604 	.word	0x08009604
 80011ec:	08009614 	.word	0x08009614
 80011f0:	08009624 	.word	0x08009624
 80011f4:	08009634 	.word	0x08009634
 80011f8:	08009644 	.word	0x08009644
 80011fc:	08009654 	.word	0x08009654
 8001200:	4ec4ec4f 	.word	0x4ec4ec4f

08001204 <pwmon_labeling>:

void pwmon_labeling(){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af04      	add	r7, sp, #16

	sprintf(txtdispBF,"#1	#2	#3");
 800120a:	490a      	ldr	r1, [pc, #40]	; (8001234 <pwmon_labeling+0x30>)
 800120c:	480a      	ldr	r0, [pc, #40]	; (8001238 <pwmon_labeling+0x34>)
 800120e:	f007 fcf3 	bl	8008bf8 <siprintf>
	ili9486_WriteString(120, 80, txtdispBF, Font20, cl_WHITE, cl_BLACK);
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <pwmon_labeling+0x38>)
 8001214:	2200      	movs	r2, #0
 8001216:	9202      	str	r2, [sp, #8]
 8001218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121c:	9201      	str	r2, [sp, #4]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	9200      	str	r2, [sp, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <pwmon_labeling+0x34>)
 8001226:	2150      	movs	r1, #80	; 0x50
 8001228:	2078      	movs	r0, #120	; 0x78
 800122a:	f000 fe54 	bl	8001ed6 <ili9486_WriteString>
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	08009664 	.word	0x08009664
 8001238:	240008d4 	.word	0x240008d4
 800123c:	24000014 	.word	0x24000014

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_MspInit+0x30>)
 8001254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001258:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_MspInit+0x30>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_MspInit+0x30>)
 8001264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	58024400 	.word	0x58024400

08001280 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a59      	ldr	r2, [pc, #356]	; (8001404 <HAL_ETH_MspInit+0x184>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	f040 80ab 	bne.w	80013fa <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80012a4:	4b58      	ldr	r3, [pc, #352]	; (8001408 <HAL_ETH_MspInit+0x188>)
 80012a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012aa:	4a57      	ldr	r2, [pc, #348]	; (8001408 <HAL_ETH_MspInit+0x188>)
 80012ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012b4:	4b54      	ldr	r3, [pc, #336]	; (8001408 <HAL_ETH_MspInit+0x188>)
 80012b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012be:	623b      	str	r3, [r7, #32]
 80012c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80012c2:	4b51      	ldr	r3, [pc, #324]	; (8001408 <HAL_ETH_MspInit+0x188>)
 80012c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c8:	4a4f      	ldr	r2, [pc, #316]	; (8001408 <HAL_ETH_MspInit+0x188>)
 80012ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012d2:	4b4d      	ldr	r3, [pc, #308]	; (8001408 <HAL_ETH_MspInit+0x188>)
 80012d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80012e0:	4b49      	ldr	r3, [pc, #292]	; (8001408 <HAL_ETH_MspInit+0x188>)
 80012e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012e6:	4a48      	ldr	r2, [pc, #288]	; (8001408 <HAL_ETH_MspInit+0x188>)
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012f0:	4b45      	ldr	r3, [pc, #276]	; (8001408 <HAL_ETH_MspInit+0x188>)
 80012f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	61bb      	str	r3, [r7, #24]
 80012fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	4b42      	ldr	r3, [pc, #264]	; (8001408 <HAL_ETH_MspInit+0x188>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001304:	4a40      	ldr	r2, [pc, #256]	; (8001408 <HAL_ETH_MspInit+0x188>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130e:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <HAL_ETH_MspInit+0x188>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <HAL_ETH_MspInit+0x188>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	4a39      	ldr	r2, [pc, #228]	; (8001408 <HAL_ETH_MspInit+0x188>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <HAL_ETH_MspInit+0x188>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <HAL_ETH_MspInit+0x188>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	4a31      	ldr	r2, [pc, #196]	; (8001408 <HAL_ETH_MspInit+0x188>)
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <HAL_ETH_MspInit+0x188>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_ETH_MspInit+0x188>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	4a2a      	ldr	r2, [pc, #168]	; (8001408 <HAL_ETH_MspInit+0x188>)
 8001360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_ETH_MspInit+0x188>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001376:	2332      	movs	r3, #50	; 0x32
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001386:	230b      	movs	r3, #11
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	481e      	ldr	r0, [pc, #120]	; (800140c <HAL_ETH_MspInit+0x18c>)
 8001392:	f002 fc57 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001396:	2386      	movs	r3, #134	; 0x86
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a6:	230b      	movs	r3, #11
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	4619      	mov	r1, r3
 80013b0:	4817      	ldr	r0, [pc, #92]	; (8001410 <HAL_ETH_MspInit+0x190>)
 80013b2:	f002 fc47 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013c8:	230b      	movs	r3, #11
 80013ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4810      	ldr	r0, [pc, #64]	; (8001414 <HAL_ETH_MspInit+0x194>)
 80013d4:	f002 fc36 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80013d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ea:	230b      	movs	r3, #11
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	4808      	ldr	r0, [pc, #32]	; (8001418 <HAL_ETH_MspInit+0x198>)
 80013f6:	f002 fc25 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3738      	adds	r7, #56	; 0x38
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40028000 	.word	0x40028000
 8001408:	58024400 	.word	0x58024400
 800140c:	58020800 	.word	0x58020800
 8001410:	58020000 	.word	0x58020000
 8001414:	58020400 	.word	0x58020400
 8001418:	58021800 	.word	0x58021800

0800141c <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0ba      	sub	sp, #232	; 0xe8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	22c0      	movs	r2, #192	; 0xc0
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f007 fbfb 	bl	8008c38 <memset>
  if(hcec->Instance==CEC)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a2b      	ldr	r2, [pc, #172]	; (80014f4 <HAL_CEC_MspInit+0xd8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d14f      	bne.n	80014ec <HAL_CEC_MspInit+0xd0>

  /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 800144c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8001458:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800145c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4618      	mov	r0, r3
 8001466:	f004 f979 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 8001470:	f7ff fee6 	bl	8001240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8001474:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <HAL_CEC_MspInit+0xdc>)
 8001476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <HAL_CEC_MspInit+0xdc>)
 800147c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001480:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_CEC_MspInit+0xdc>)
 8001486:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800148a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_CEC_MspInit+0xdc>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <HAL_CEC_MspInit+0xdc>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_CEC_MspInit+0xdc>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PA15 (JTDI)     ------> CEC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b8:	2312      	movs	r3, #18
 80014ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 80014ca:	2304      	movs	r3, #4
 80014cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4809      	ldr	r0, [pc, #36]	; (80014fc <HAL_CEC_MspInit+0xe0>)
 80014d8:	f002 fbb4 	bl	8003c44 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	205e      	movs	r0, #94	; 0x5e
 80014e2:	f001 ff56 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 80014e6:	205e      	movs	r0, #94	; 0x5e
 80014e8:	f001 ff6d 	bl	80033c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	37e8      	adds	r7, #232	; 0xe8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40006c00 	.word	0x40006c00
 80014f8:	58024400 	.word	0x58024400
 80014fc:	58020000 	.word	0x58020000

08001500 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b0ba      	sub	sp, #232	; 0xe8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	22c0      	movs	r2, #192	; 0xc0
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f007 fb89 	bl	8008c38 <memset>
  if(hi2c->Instance==I2C4)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a27      	ldr	r2, [pc, #156]	; (80015c8 <HAL_I2C_MspInit+0xc8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d146      	bne.n	80015be <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001530:	f04f 0210 	mov.w	r2, #16
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	4618      	mov	r0, r3
 8001548:	f004 f908 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001552:	f7ff fe75 	bl	8001240 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_I2C_MspInit+0xcc>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <HAL_I2C_MspInit+0xcc>)
 800155e:	f043 0320 	orr.w	r3, r3, #32
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_I2C_MspInit+0xcc>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001574:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001578:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157c:	2312      	movs	r3, #18
 800157e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800158e:	2304      	movs	r3, #4
 8001590:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001594:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001598:	4619      	mov	r1, r3
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <HAL_I2C_MspInit+0xd0>)
 800159c:	f002 fb52 	bl	8003c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_I2C_MspInit+0xcc>)
 80015a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_I2C_MspInit+0xcc>)
 80015a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_I2C_MspInit+0xcc>)
 80015b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	37e8      	adds	r7, #232	; 0xe8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	58001c00 	.word	0x58001c00
 80015cc:	58024400 	.word	0x58024400
 80015d0:	58021400 	.word	0x58021400

080015d4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b0bc      	sub	sp, #240	; 0xf0
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ec:	f107 0318 	add.w	r3, r7, #24
 80015f0:	22c0      	movs	r2, #192	; 0xc0
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f007 fb1f 	bl	8008c38 <memset>
  if(hqspi->Instance==QUADSPI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a56      	ldr	r2, [pc, #344]	; (8001758 <HAL_QSPI_MspInit+0x184>)
 8001600:	4293      	cmp	r3, r2
 8001602:	f040 80a5 	bne.w	8001750 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001606:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001612:	2300      	movs	r3, #0
 8001614:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	4618      	mov	r0, r3
 800161c:	f004 f89e 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001626:	f7ff fe0b 	bl	8001240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800162a:	4b4c      	ldr	r3, [pc, #304]	; (800175c <HAL_QSPI_MspInit+0x188>)
 800162c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001630:	4a4a      	ldr	r2, [pc, #296]	; (800175c <HAL_QSPI_MspInit+0x188>)
 8001632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001636:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800163a:	4b48      	ldr	r3, [pc, #288]	; (800175c <HAL_QSPI_MspInit+0x188>)
 800163c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001648:	4b44      	ldr	r3, [pc, #272]	; (800175c <HAL_QSPI_MspInit+0x188>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164e:	4a43      	ldr	r2, [pc, #268]	; (800175c <HAL_QSPI_MspInit+0x188>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001658:	4b40      	ldr	r3, [pc, #256]	; (800175c <HAL_QSPI_MspInit+0x188>)
 800165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_QSPI_MspInit+0x188>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	4a3b      	ldr	r2, [pc, #236]	; (800175c <HAL_QSPI_MspInit+0x188>)
 800166e:	f043 0320 	orr.w	r3, r3, #32
 8001672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001676:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_QSPI_MspInit+0x188>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	4b35      	ldr	r3, [pc, #212]	; (800175c <HAL_QSPI_MspInit+0x188>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168a:	4a34      	ldr	r2, [pc, #208]	; (800175c <HAL_QSPI_MspInit+0x188>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001694:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_QSPI_MspInit+0x188>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016a2:	2304      	movs	r3, #4
 80016a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ba:	2309      	movs	r3, #9
 80016bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016c4:	4619      	mov	r1, r3
 80016c6:	4826      	ldr	r0, [pc, #152]	; (8001760 <HAL_QSPI_MspInit+0x18c>)
 80016c8:	f002 fabc 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80016cc:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80016d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016e6:	2309      	movs	r3, #9
 80016e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016f0:	4619      	mov	r1, r3
 80016f2:	481c      	ldr	r0, [pc, #112]	; (8001764 <HAL_QSPI_MspInit+0x190>)
 80016f4:	f002 faa6 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001712:	230a      	movs	r3, #10
 8001714:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001718:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800171c:	4619      	mov	r1, r3
 800171e:	4811      	ldr	r0, [pc, #68]	; (8001764 <HAL_QSPI_MspInit+0x190>)
 8001720:	f002 fa90 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001728:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800173e:	2309      	movs	r3, #9
 8001740:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001748:	4619      	mov	r1, r3
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <HAL_QSPI_MspInit+0x194>)
 800174c:	f002 fa7a 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	37f0      	adds	r7, #240	; 0xf0
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	52005000 	.word	0x52005000
 800175c:	58024400 	.word	0x58024400
 8001760:	58021000 	.word	0x58021000
 8001764:	58021400 	.word	0x58021400
 8001768:	58020400 	.word	0x58020400

0800176c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0ba      	sub	sp, #232	; 0xe8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	22c0      	movs	r2, #192	; 0xc0
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f007 fa53 	bl	8008c38 <memset>
  if(huart->Instance==USART3)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a27      	ldr	r2, [pc, #156]	; (8001834 <HAL_UART_MspInit+0xc8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d146      	bne.n	800182a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800179c:	f04f 0202 	mov.w	r2, #2
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4618      	mov	r0, r3
 80017b4:	f003 ffd2 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017be:	f7ff fd3f 	bl	8001240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_UART_MspInit+0xcc>)
 80017c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <HAL_UART_MspInit+0xcc>)
 80017ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_UART_MspInit+0xcc>)
 80017d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_UART_MspInit+0xcc>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e6:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_UART_MspInit+0xcc>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_UART_MspInit+0xcc>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001818:	2307      	movs	r3, #7
 800181a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <HAL_UART_MspInit+0xd0>)
 8001826:	f002 fa0d 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	37e8      	adds	r7, #232	; 0xe8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40004800 	.word	0x40004800
 8001838:	58024400 	.word	0x58024400
 800183c:	58020c00 	.word	0x58020c00

08001840 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0ba      	sub	sp, #232	; 0xe8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	22c0      	movs	r2, #192	; 0xc0
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f007 f9e9 	bl	8008c38 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a30      	ldr	r2, [pc, #192]	; (800192c <HAL_PCD_MspInit+0xec>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d159      	bne.n	8001924 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001870:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800187c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	4618      	mov	r0, r3
 800188a:	f003 ff67 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001894:	f7ff fcd4 	bl	8001240 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001898:	f002 feb0 	bl	80045fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_PCD_MspInit+0xf0>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a2:	4a23      	ldr	r2, [pc, #140]	; (8001930 <HAL_PCD_MspInit+0xf0>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ac:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_PCD_MspInit+0xf0>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80018ba:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80018be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80018d4:	230a      	movs	r3, #10
 80018d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018de:	4619      	mov	r1, r3
 80018e0:	4814      	ldr	r0, [pc, #80]	; (8001934 <HAL_PCD_MspInit+0xf4>)
 80018e2:	f002 f9af 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018fe:	4619      	mov	r1, r3
 8001900:	480c      	ldr	r0, [pc, #48]	; (8001934 <HAL_PCD_MspInit+0xf4>)
 8001902:	f002 f99f 	bl	8003c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_PCD_MspInit+0xf0>)
 8001908:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800190c:	4a08      	ldr	r2, [pc, #32]	; (8001930 <HAL_PCD_MspInit+0xf0>)
 800190e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001912:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_PCD_MspInit+0xf0>)
 8001918:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800191c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	37e8      	adds	r7, #232	; 0xe8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40080000 	.word	0x40080000
 8001930:	58024400 	.word	0x58024400
 8001934:	58020000 	.word	0x58020000

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800193c:	e7fe      	b.n	800193c <NMI_Handler+0x4>

0800193e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler+0x4>

0800194a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <BusFault_Handler+0x4>

08001950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler+0x4>

08001956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f001 fa6a 	bl	8002e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <CEC_IRQHandler+0x10>)
 8001992:	f001 fb28 	bl	8002fe6 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	24000238 	.word	0x24000238

080019a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <_sbrk+0x5c>)
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <_sbrk+0x60>)
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <_sbrk+0x64>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <_sbrk+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d207      	bcs.n	80019e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d0:	f007 f93a 	bl	8008c48 <__errno>
 80019d4:	4603      	mov	r3, r0
 80019d6:	220c      	movs	r2, #12
 80019d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	e009      	b.n	80019f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <_sbrk+0x64>)
 80019f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	24080000 	.word	0x24080000
 8001a00:	00000400 	.word	0x00000400
 8001a04:	24000954 	.word	0x24000954
 8001a08:	24000aa8 	.word	0x24000aa8

08001a0c <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 8001a10:	2011      	movs	r0, #17
 8001a12:	f000 fc09 	bl	8002228 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 8001a16:	2001      	movs	r0, #1
 8001a18:	f000 fb11 	bl	800203e <LCD_IO_Bl_OnOff>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 8001a24:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 8001a36:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 8001a48:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <ili9486_Init+0xd4>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d115      	bne.n	8001a80 <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <ili9486_Init+0xd4>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <ili9486_Init+0xd4>)
 8001a60:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 8001a62:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <ili9486_Init+0xd4>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <ili9486_Init+0x2e>
      LCD_IO_Init();
 8001a6e:	f000 faf1 	bl	8002054 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <ili9486_Init+0xd4>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <ili9486_Init+0xd4>)
 8001a7e:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 8001a80:	200a      	movs	r0, #10
 8001a82:	f000 fad1 	bl	8002028 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 8001a86:	2001      	movs	r0, #1
 8001a88:	f000 fbce 	bl	8002228 <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 8001a8c:	2064      	movs	r0, #100	; 0x64
 8001a8e:	f000 facb 	bl	8002028 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 8001a92:	2201      	movs	r2, #1
 8001a94:	4921      	ldr	r1, [pc, #132]	; (8001b1c <ili9486_Init+0xd8>)
 8001a96:	20b0      	movs	r0, #176	; 0xb0
 8001a98:	f001 f80a 	bl	8002ab0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8001a9c:	2011      	movs	r0, #17
 8001a9e:	f000 fbc3 	bl	8002228 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001aa2:	200a      	movs	r0, #10
 8001aa4:	f000 fac0 	bl	8002028 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	491d      	ldr	r1, [pc, #116]	; (8001b20 <ili9486_Init+0xdc>)
 8001aac:	203a      	movs	r0, #58	; 0x3a
 8001aae:	f000 ffff 	bl	8002ab0 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8001ab2:	2036      	movs	r0, #54	; 0x36
 8001ab4:	f000 fbb8 	bl	8002228 <LCD_IO_WriteCmd8>
 8001ab8:	2028      	movs	r0, #40	; 0x28
 8001aba:	f000 fc5f 	bl	800237c <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4918      	ldr	r1, [pc, #96]	; (8001b24 <ili9486_Init+0xe0>)
 8001ac2:	20c2      	movs	r0, #194	; 0xc2
 8001ac4:	f000 fff4 	bl	8002ab0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 8001ac8:	2204      	movs	r2, #4
 8001aca:	4917      	ldr	r1, [pc, #92]	; (8001b28 <ili9486_Init+0xe4>)
 8001acc:	20c5      	movs	r0, #197	; 0xc5
 8001ace:	f000 ffef 	bl	8002ab0 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	4915      	ldr	r1, [pc, #84]	; (8001b2c <ili9486_Init+0xe8>)
 8001ad6:	20e0      	movs	r0, #224	; 0xe0
 8001ad8:	f000 ffea 	bl	8002ab0 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8001adc:	220f      	movs	r2, #15
 8001ade:	4914      	ldr	r1, [pc, #80]	; (8001b30 <ili9486_Init+0xec>)
 8001ae0:	20e1      	movs	r0, #225	; 0xe1
 8001ae2:	f000 ffe5 	bl	8002ab0 <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	4911      	ldr	r1, [pc, #68]	; (8001b30 <ili9486_Init+0xec>)
 8001aea:	20e2      	movs	r0, #226	; 0xe2
 8001aec:	f000 ffe0 	bl	8002ab0 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 8001af0:	2013      	movs	r0, #19
 8001af2:	f000 fb99 	bl	8002228 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 8001af6:	2020      	movs	r0, #32
 8001af8:	f000 fb96 	bl	8002228 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8001afc:	2011      	movs	r0, #17
 8001afe:	f000 fb93 	bl	8002228 <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 8001b02:	20c8      	movs	r0, #200	; 0xc8
 8001b04:	f000 fa90 	bl	8002028 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 8001b08:	2029      	movs	r0, #41	; 0x29
 8001b0a:	f000 fb8d 	bl	8002228 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001b0e:	200a      	movs	r0, #10
 8001b10:	f000 fa8a 	bl	8002028 <LCD_Delay>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	24000958 	.word	0x24000958
 8001b1c:	08009670 	.word	0x08009670
 8001b20:	08009674 	.word	0x08009674
 8001b24:	08009678 	.word	0x08009678
 8001b28:	0800967c 	.word	0x0800967c
 8001b2c:	08009684 	.word	0x08009684
 8001b30:	08009694 	.word	0x08009694

08001b34 <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80fb      	strh	r3, [r7, #6]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	80bb      	strh	r3, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 8001b46:	202a      	movs	r0, #42	; 0x2a
 8001b48:	f000 fb6e 	bl	8002228 <LCD_IO_WriteCmd8>
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fc11 	bl	800237c <LCD_IO_WriteData8>
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fc0c 	bl	800237c <LCD_IO_WriteData8>
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fc05 	bl	800237c <LCD_IO_WriteData8>
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 fc00 	bl	800237c <LCD_IO_WriteData8>
 8001b7c:	202b      	movs	r0, #43	; 0x2b
 8001b7e:	f000 fb53 	bl	8002228 <LCD_IO_WriteCmd8>
 8001b82:	88bb      	ldrh	r3, [r7, #4]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fbf6 	bl	800237c <LCD_IO_WriteData8>
 8001b90:	88bb      	ldrh	r3, [r7, #4]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 fbf1 	bl	800237c <LCD_IO_WriteData8>
 8001b9a:	88bb      	ldrh	r3, [r7, #4]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fbea 	bl	800237c <LCD_IO_WriteData8>
 8001ba8:	88bb      	ldrh	r3, [r7, #4]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 fbe5 	bl	800237c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 8001bb2:	202c      	movs	r0, #44	; 0x2c
 8001bb4:	f000 fb38 	bl	8002228 <LCD_IO_WriteCmd8>
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 fc80 	bl	80024c0 <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4604      	mov	r4, r0
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4623      	mov	r3, r4
 8001bd8:	80fb      	strh	r3, [r7, #6]
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80bb      	strh	r3, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	807b      	strh	r3, [r7, #2]
 8001be2:	4613      	mov	r3, r2
 8001be4:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8001be6:	202a      	movs	r0, #42	; 0x2a
 8001be8:	f000 fb1e 	bl	8002228 <LCD_IO_WriteCmd8>
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fbc1 	bl	800237c <LCD_IO_WriteData8>
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fbbc 	bl	800237c <LCD_IO_WriteData8>
 8001c04:	88fa      	ldrh	r2, [r7, #6]
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	121b      	asrs	r3, r3, #8
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fbb3 	bl	800237c <LCD_IO_WriteData8>
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fba8 	bl	800237c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8001c2c:	202b      	movs	r0, #43	; 0x2b
 8001c2e:	f000 fafb 	bl	8002228 <LCD_IO_WriteCmd8>
 8001c32:	88bb      	ldrh	r3, [r7, #4]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 fb9e 	bl	800237c <LCD_IO_WriteData8>
 8001c40:	88bb      	ldrh	r3, [r7, #4]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 fb99 	bl	800237c <LCD_IO_WriteData8>
 8001c4a:	88ba      	ldrh	r2, [r7, #4]
 8001c4c:	883b      	ldrh	r3, [r7, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b01      	subs	r3, #1
 8001c52:	121b      	asrs	r3, r3, #8
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fb90 	bl	800237c <LCD_IO_WriteData8>
 8001c5c:	88bb      	ldrh	r3, [r7, #4]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	883b      	ldrh	r3, [r7, #0]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fb85 	bl	800237c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	883a      	ldrh	r2, [r7, #0]
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	8b3b      	ldrh	r3, [r7, #24]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	202c      	movs	r0, #44	; 0x2c
 8001c82:	f000 fd47 	bl	8002714 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}

08001c8e <ili9486_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9486_WriteChar(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8001c8e:	b082      	sub	sp, #8
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	603a      	str	r2, [r7, #0]
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	80fb      	strh	r3, [r7, #6]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8001caa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001cb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cbc:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc0:	f006 ff58 	bl	8008b74 <ceilf>
 8001cc4:	eef0 7a40 	vmov.f32	s15, s0
 8001cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ccc:	ee17 3a90 	vmov	r3, s15
 8001cd0:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	e060      	b.n	8001da8 <ili9486_WriteChar+0x11a>
		hop32 = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	e024      	b.n	8001d3a <ili9486_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	7812      	ldrb	r2, [r2, #0]
 8001cf6:	3a20      	subs	r2, #32
 8001cf8:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8001cfa:	fb01 f202 	mul.w	r2, r1, r2
 8001cfe:	6979      	ldr	r1, [r7, #20]
 8001d00:	fb02 f101 	mul.w	r1, r2, r1
 8001d04:	6a3a      	ldr	r2, [r7, #32]
 8001d06:	6978      	ldr	r0, [r7, #20]
 8001d08:	fb00 f202 	mul.w	r2, r0, r2
 8001d0c:	4411      	add	r1, r2
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	440a      	add	r2, r1
 8001d12:	4413      	add	r3, r2
 8001d14:	7819      	ldrb	r1, [r3, #0]
 8001d16:	f107 020c 	add.w	r2, r7, #12
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	460a      	mov	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	f107 010c 	add.w	r1, r7, #12
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	440a      	add	r2, r1
 8001d2e:	7812      	ldrb	r2, [r2, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	3301      	adds	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dbd6      	blt.n	8001cf0 <ili9486_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	e027      	b.n	8001d98 <ili9486_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8001d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00e      	beq.n	8001d74 <ili9486_WriteChar+0xe6>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b298      	uxth	r0, r3
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	88bb      	ldrh	r3, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7ff fee1 	bl	8001b34 <ili9486_WritePixel>
 8001d72:	e00e      	b.n	8001d92 <ili9486_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b298      	uxth	r0, r3
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	88bb      	ldrh	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7ff fed1 	bl	8001b34 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	dbd2      	blt.n	8001d48 <ili9486_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	3301      	adds	r3, #1
 8001da6:	623b      	str	r3, [r7, #32]
 8001da8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001daa:	461a      	mov	r2, r3
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	4293      	cmp	r3, r2
 8001db0:	db99      	blt.n	8001ce6 <ili9486_WriteChar+0x58>
			}

		}
	}
}
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dbe:	b002      	add	sp, #8
 8001dc0:	4770      	bx	lr

08001dc2 <ili9486_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9486_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder){
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	603a      	str	r2, [r7, #0]
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8001dde:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001dec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001df0:	eeb0 0a47 	vmov.f32	s0, s14
 8001df4:	f006 febe 	bl	8008b74 <ceilf>
 8001df8:	eef0 7a40 	vmov.f32	s15, s0
 8001dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e00:	ee17 3a90 	vmov	r3, s15
 8001e04:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
 8001e18:	e050      	b.n	8001ebc <ili9486_WriteCharNoBG+0xfa>
		hop32 = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	e024      	b.n	8001e6e <ili9486_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8001e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	3a20      	subs	r2, #32
 8001e2c:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8001e2e:	fb01 f202 	mul.w	r2, r1, r2
 8001e32:	6979      	ldr	r1, [r7, #20]
 8001e34:	fb02 f101 	mul.w	r1, r2, r1
 8001e38:	6a3a      	ldr	r2, [r7, #32]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	fb00 f202 	mul.w	r2, r0, r2
 8001e40:	4411      	add	r1, r2
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	440a      	add	r2, r1
 8001e46:	4413      	add	r3, r2
 8001e48:	7819      	ldrb	r1, [r3, #0]
 8001e4a:	f107 020c 	add.w	r2, r7, #12
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	460a      	mov	r2, r1
 8001e54:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	f107 010c 	add.w	r1, r7, #12
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	440a      	add	r2, r1
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	dbd6      	blt.n	8001e24 <ili9486_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	e017      	b.n	8001eac <ili9486_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8001e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00d      	beq.n	8001ea6 <ili9486_WriteCharNoBG+0xe4>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	4413      	add	r3, r2
 8001e92:	b298      	uxth	r0, r3
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	88bb      	ldrh	r3, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7ff fe47 	bl	8001b34 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001eae:	461a      	mov	r2, r3
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	dbe2      	blt.n	8001e7c <ili9486_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	dba9      	blt.n	8001e1a <ili9486_WriteCharNoBG+0x58>
			}
		}
	}
}
 8001ec6:	bf00      	nop
 8001ec8:	bf00      	nop
 8001eca:	3728      	adds	r7, #40	; 0x28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ed2:	b002      	add	sp, #8
 8001ed4:	4770      	bx	lr

08001ed6 <ili9486_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9486_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af04      	add	r7, sp, #16
 8001ede:	603a      	str	r2, [r7, #0]
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80fb      	strh	r3, [r7, #6]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8001eea:	f7ff fda2 	bl	8001a32 <ili9486_GetLcdPixelHeight>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8001ef2:	f7ff fd95 	bl	8001a20 <ili9486_GetLcdPixelWidth>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8001efa:	e02c      	b.n	8001f56 <ili9486_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	8c3a      	ldrh	r2, [r7, #32]
 8001f00:	441a      	add	r2, r3
 8001f02:	89bb      	ldrh	r3, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	db13      	blt.n	8001f30 <ili9486_WriteString+0x5a>
			Xpo = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8001f0c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001f0e:	88bb      	ldrh	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8001f14:	88bb      	ldrh	r3, [r7, #4]
 8001f16:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001f18:	441a      	add	r2, r3
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	da1f      	bge.n	8001f60 <ili9486_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d103      	bne.n	8001f30 <ili9486_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	603b      	str	r3, [r7, #0]
				continue;
 8001f2e:	e012      	b.n	8001f56 <ili9486_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9486_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8001f30:	88b9      	ldrh	r1, [r7, #4]
 8001f32:	88f8      	ldrh	r0, [r7, #6]
 8001f34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f36:	9302      	str	r3, [sp, #8]
 8001f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	f7ff fea3 	bl	8001c8e <ili9486_WriteChar>
		Xpo += fonto.Width;
 8001f48:	8c3a      	ldrh	r2, [r7, #32]
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	80fb      	strh	r3, [r7, #6]
		strr++;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	603b      	str	r3, [r7, #0]
	while(*strr){
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1ce      	bne.n	8001efc <ili9486_WriteString+0x26>
	}
}
 8001f5e:	e000      	b.n	8001f62 <ili9486_WriteString+0x8c>
				break;
 8001f60:	bf00      	nop
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f6c:	b002      	add	sp, #8
 8001f6e:	4770      	bx	lr

08001f70 <ili9486_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9486_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 8001f70:	b082      	sub	sp, #8
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af02      	add	r7, sp, #8
 8001f78:	603a      	str	r2, [r7, #0]
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	80fb      	strh	r3, [r7, #6]
 8001f80:	460b      	mov	r3, r1
 8001f82:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8001f84:	f7ff fd55 	bl	8001a32 <ili9486_GetLcdPixelHeight>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8001f8c:	f7ff fd48 	bl	8001a20 <ili9486_GetLcdPixelWidth>
 8001f90:	4603      	mov	r3, r0
 8001f92:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8001f94:	e02a      	b.n	8001fec <ili9486_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	8c3a      	ldrh	r2, [r7, #32]
 8001f9a:	441a      	add	r2, r3
 8001f9c:	89bb      	ldrh	r3, [r7, #12]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	db13      	blt.n	8001fca <ili9486_WriteStringNoBG+0x5a>
			Xpo = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8001fa6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001fa8:	88bb      	ldrh	r3, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8001fae:	88bb      	ldrh	r3, [r7, #4]
 8001fb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001fb2:	441a      	add	r2, r3
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	da1d      	bge.n	8001ff6 <ili9486_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	d103      	bne.n	8001fca <ili9486_WriteStringNoBG+0x5a>
				strr++;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	603b      	str	r3, [r7, #0]
				continue;
 8001fc8:	e010      	b.n	8001fec <ili9486_WriteStringNoBG+0x7c>
			}
		}
		ili9486_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 8001fca:	88b9      	ldrh	r1, [r7, #4]
 8001fcc:	88f8      	ldrh	r0, [r7, #6]
 8001fce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	f7ff fef2 	bl	8001dc2 <ili9486_WriteCharNoBG>
		Xpo += fonto.Width;
 8001fde:	8c3a      	ldrh	r2, [r7, #32]
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
		strr++;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	603b      	str	r3, [r7, #0]
	while(*strr){
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1d0      	bne.n	8001f96 <ili9486_WriteStringNoBG+0x26>
	}
}
 8001ff4:	e000      	b.n	8001ff8 <ili9486_WriteStringNoBG+0x88>
				break;
 8001ff6:	bf00      	nop
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002002:	b002      	add	sp, #8
 8002004:	4770      	bx	lr

08002006 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  while(c--);
 800200e:	bf00      	nop
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	1e5a      	subs	r2, r3, #1
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1fa      	bne.n	8002010 <LCD_IO_Delay+0xa>
}
 800201a:	bf00      	nop
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 ff33 	bl	8002e9c <HAL_Delay>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	71fb      	strb	r3, [r7, #7]
    GPIOX_CLR(LCD_BL);
  else
    GPIOX_SET(LCD_BL);
  #endif
  #endif
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB4ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8002058:	4b6c      	ldr	r3, [pc, #432]	; (800220c <LCD_IO_Init+0x1b8>)
 800205a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205e:	4a6b      	ldr	r2, [pc, #428]	; (800220c <LCD_IO_Init+0x1b8>)
 8002060:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8002064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          /* RST = 1 */
 8002068:	4b69      	ldr	r3, [pc, #420]	; (8002210 <LCD_IO_Init+0x1bc>)
 800206a:	2204      	movs	r2, #4
 800206c:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 800206e:	4b68      	ldr	r3, [pc, #416]	; (8002210 <LCD_IO_Init+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002076:	4a66      	ldr	r2, [pc, #408]	; (8002210 <LCD_IO_Init+0x1bc>)
 8002078:	f043 0310 	orr.w	r3, r3, #16
 800207c:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_SET(LCD_CS);                    /* CS = 1 */
 800207e:	4b65      	ldr	r3, [pc, #404]	; (8002214 <LCD_IO_Init+0x1c0>)
 8002080:	2202      	movs	r2, #2
 8002082:	619a      	str	r2, [r3, #24]
  LCD_RS_DATA;                          /* RS = 1 */
 8002084:	4b62      	ldr	r3, [pc, #392]	; (8002210 <LCD_IO_Init+0x1bc>)
 8002086:	2208      	movs	r2, #8
 8002088:	619a      	str	r2, [r3, #24]
  GPIOX_SET(LCD_WR);                    /* WR = 1 */
 800208a:	4b61      	ldr	r3, [pc, #388]	; (8002210 <LCD_IO_Init+0x1bc>)
 800208c:	2201      	movs	r2, #1
 800208e:	619a      	str	r2, [r3, #24]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_SET(LCD_RD);                    /* RD = 1 */
 8002090:	4b61      	ldr	r3, [pc, #388]	; (8002218 <LCD_IO_Init+0x1c4>)
 8002092:	2208      	movs	r2, #8
 8002094:	619a      	str	r2, [r3, #24]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8002096:	4b5f      	ldr	r3, [pc, #380]	; (8002214 <LCD_IO_Init+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 030c 	bic.w	r3, r3, #12
 800209e:	4a5d      	ldr	r2, [pc, #372]	; (8002214 <LCD_IO_Init+0x1c0>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 80020a6:	4b5a      	ldr	r3, [pc, #360]	; (8002210 <LCD_IO_Init+0x1bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80020ae:	4a58      	ldr	r2, [pc, #352]	; (8002210 <LCD_IO_Init+0x1bc>)
 80020b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b4:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 80020b6:	4b56      	ldr	r3, [pc, #344]	; (8002210 <LCD_IO_Init+0x1bc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 0303 	bic.w	r3, r3, #3
 80020be:	4a54      	ldr	r2, [pc, #336]	; (8002210 <LCD_IO_Init+0x1bc>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 80020c6:	4b54      	ldr	r3, [pc, #336]	; (8002218 <LCD_IO_Init+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80020ce:	4a52      	ldr	r2, [pc, #328]	; (8002218 <LCD_IO_Init+0x1c4>)
 80020d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d4:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 80020d6:	4b51      	ldr	r3, [pc, #324]	; (800221c <LCD_IO_Init+0x1c8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80020de:	4a4f      	ldr	r2, [pc, #316]	; (800221c <LCD_IO_Init+0x1c8>)
 80020e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b4e      	ldr	r3, [pc, #312]	; (8002220 <LCD_IO_Init+0x1cc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80020ee:	4a4c      	ldr	r2, [pc, #304]	; (8002220 <LCD_IO_Init+0x1cc>)
 80020f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b49      	ldr	r3, [pc, #292]	; (800221c <LCD_IO_Init+0x1c8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80020fe:	4a47      	ldr	r2, [pc, #284]	; (800221c <LCD_IO_Init+0x1c8>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <LCD_IO_Init+0x1d0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800210e:	4a45      	ldr	r2, [pc, #276]	; (8002224 <LCD_IO_Init+0x1d0>)
 8002110:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b43      	ldr	r3, [pc, #268]	; (8002224 <LCD_IO_Init+0x1d0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800211e:	4a41      	ldr	r2, [pc, #260]	; (8002224 <LCD_IO_Init+0x1d0>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <LCD_IO_Init+0x1d0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800212e:	4a3d      	ldr	r2, [pc, #244]	; (8002224 <LCD_IO_Init+0x1d0>)
 8002130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b38      	ldr	r3, [pc, #224]	; (8002218 <LCD_IO_Init+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800213e:	4a36      	ldr	r2, [pc, #216]	; (8002218 <LCD_IO_Init+0x1c4>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b35      	ldr	r3, [pc, #212]	; (800221c <LCD_IO_Init+0x1c8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800214e:	4a33      	ldr	r2, [pc, #204]	; (800221c <LCD_IO_Init+0x1c8>)
 8002150:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002154:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8002156:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <LCD_IO_Init+0x1c0>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4a2e      	ldr	r2, [pc, #184]	; (8002214 <LCD_IO_Init+0x1c0>)
 800215c:	f043 030c 	orr.w	r3, r3, #12
 8002160:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8002162:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <LCD_IO_Init+0x1bc>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <LCD_IO_Init+0x1bc>)
 8002168:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800216c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 800216e:	4b28      	ldr	r3, [pc, #160]	; (8002210 <LCD_IO_Init+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	4a27      	ldr	r2, [pc, #156]	; (8002210 <LCD_IO_Init+0x1bc>)
 8002174:	f043 0303 	orr.w	r3, r3, #3
 8002178:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <LCD_IO_Init+0x1c4>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	4a26      	ldr	r2, [pc, #152]	; (8002218 <LCD_IO_Init+0x1c4>)
 8002180:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002184:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 8002186:	4b25      	ldr	r3, [pc, #148]	; (800221c <LCD_IO_Init+0x1c8>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4a24      	ldr	r2, [pc, #144]	; (800221c <LCD_IO_Init+0x1c8>)
 800218c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8002190:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <LCD_IO_Init+0x1cc>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4a22      	ldr	r2, [pc, #136]	; (8002220 <LCD_IO_Init+0x1cc>)
 8002198:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800219c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 800219e:	4b1f      	ldr	r3, [pc, #124]	; (800221c <LCD_IO_Init+0x1c8>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4a1e      	ldr	r2, [pc, #120]	; (800221c <LCD_IO_Init+0x1c8>)
 80021a4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80021a8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <LCD_IO_Init+0x1d0>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <LCD_IO_Init+0x1d0>)
 80021b0:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80021b4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <LCD_IO_Init+0x1d0>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <LCD_IO_Init+0x1d0>)
 80021bc:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80021c0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <LCD_IO_Init+0x1d0>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4a17      	ldr	r2, [pc, #92]	; (8002224 <LCD_IO_Init+0x1d0>)
 80021c8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80021cc:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 80021ce:	4b12      	ldr	r3, [pc, #72]	; (8002218 <LCD_IO_Init+0x1c4>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4a11      	ldr	r2, [pc, #68]	; (8002218 <LCD_IO_Init+0x1c4>)
 80021d4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80021d8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <LCD_IO_Init+0x1c8>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	4a0f      	ldr	r2, [pc, #60]	; (800221c <LCD_IO_Init+0x1c8>)
 80021e0:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80021e4:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f7ff ff1e 	bl	8002028 <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <LCD_IO_Init+0x1bc>)
 80021ee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021f2:	619a      	str	r2, [r3, #24]
  LCD_Delay(1);
 80021f4:	2001      	movs	r0, #1
 80021f6:	f7ff ff17 	bl	8002028 <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <LCD_IO_Init+0x1bc>)
 80021fc:	2204      	movs	r2, #4
 80021fe:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(1);
 8002200:	2001      	movs	r0, #1
 8002202:	f7ff ff11 	bl	8002028 <LCD_Delay>
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	58024400 	.word	0x58024400
 8002210:	58020800 	.word	0x58020800
 8002214:	58020400 	.word	0x58020400
 8002218:	58020000 	.word	0x58020000
 800221c:	58021800 	.word	0x58021800
 8002220:	58020c00 	.word	0x58020c00
 8002224:	58021000 	.word	0x58021000

08002228 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8002232:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <LCD_IO_WriteCmd8+0x138>)
 8002234:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002238:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 800223a:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <LCD_IO_WriteCmd8+0x13c>)
 800223c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002240:	619a      	str	r2, [r3, #24]
 8002242:	4a49      	ldr	r2, [pc, #292]	; (8002368 <LCD_IO_WriteCmd8+0x140>)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	7013      	strb	r3, [r2, #0]
 8002248:	4b47      	ldr	r3, [pc, #284]	; (8002368 <LCD_IO_WriteCmd8+0x140>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <LCD_IO_WriteCmd8+0x36>
 8002254:	4b45      	ldr	r3, [pc, #276]	; (800236c <LCD_IO_WriteCmd8+0x144>)
 8002256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800225a:	619a      	str	r2, [r3, #24]
 800225c:	e003      	b.n	8002266 <LCD_IO_WriteCmd8+0x3e>
 800225e:	4b43      	ldr	r3, [pc, #268]	; (800236c <LCD_IO_WriteCmd8+0x144>)
 8002260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002264:	619a      	str	r2, [r3, #24]
 8002266:	4b40      	ldr	r3, [pc, #256]	; (8002368 <LCD_IO_WriteCmd8+0x140>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <LCD_IO_WriteCmd8+0x54>
 8002272:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <LCD_IO_WriteCmd8+0x148>)
 8002274:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002278:	619a      	str	r2, [r3, #24]
 800227a:	e003      	b.n	8002284 <LCD_IO_WriteCmd8+0x5c>
 800227c:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <LCD_IO_WriteCmd8+0x148>)
 800227e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002282:	619a      	str	r2, [r3, #24]
 8002284:	4b38      	ldr	r3, [pc, #224]	; (8002368 <LCD_IO_WriteCmd8+0x140>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <LCD_IO_WriteCmd8+0x72>
 8002290:	4b36      	ldr	r3, [pc, #216]	; (800236c <LCD_IO_WriteCmd8+0x144>)
 8002292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002296:	619a      	str	r2, [r3, #24]
 8002298:	e003      	b.n	80022a2 <LCD_IO_WriteCmd8+0x7a>
 800229a:	4b34      	ldr	r3, [pc, #208]	; (800236c <LCD_IO_WriteCmd8+0x144>)
 800229c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022a0:	619a      	str	r2, [r3, #24]
 80022a2:	4b31      	ldr	r3, [pc, #196]	; (8002368 <LCD_IO_WriteCmd8+0x140>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <LCD_IO_WriteCmd8+0x90>
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <LCD_IO_WriteCmd8+0x14c>)
 80022b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b4:	619a      	str	r2, [r3, #24]
 80022b6:	e003      	b.n	80022c0 <LCD_IO_WriteCmd8+0x98>
 80022b8:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <LCD_IO_WriteCmd8+0x14c>)
 80022ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022be:	619a      	str	r2, [r3, #24]
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <LCD_IO_WriteCmd8+0x140>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d004      	beq.n	80022d6 <LCD_IO_WriteCmd8+0xae>
 80022cc:	4b29      	ldr	r3, [pc, #164]	; (8002374 <LCD_IO_WriteCmd8+0x14c>)
 80022ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022d2:	619a      	str	r2, [r3, #24]
 80022d4:	e003      	b.n	80022de <LCD_IO_WriteCmd8+0xb6>
 80022d6:	4b27      	ldr	r3, [pc, #156]	; (8002374 <LCD_IO_WriteCmd8+0x14c>)
 80022d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022dc:	619a      	str	r2, [r3, #24]
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <LCD_IO_WriteCmd8+0x140>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d004      	beq.n	80022f4 <LCD_IO_WriteCmd8+0xcc>
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <LCD_IO_WriteCmd8+0x14c>)
 80022ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f0:	619a      	str	r2, [r3, #24]
 80022f2:	e003      	b.n	80022fc <LCD_IO_WriteCmd8+0xd4>
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <LCD_IO_WriteCmd8+0x14c>)
 80022f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022fa:	619a      	str	r2, [r3, #24]
 80022fc:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <LCD_IO_WriteCmd8+0x140>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <LCD_IO_WriteCmd8+0xea>
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <LCD_IO_WriteCmd8+0x150>)
 800230a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800230e:	619a      	str	r2, [r3, #24]
 8002310:	e003      	b.n	800231a <LCD_IO_WriteCmd8+0xf2>
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <LCD_IO_WriteCmd8+0x150>)
 8002314:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002318:	619a      	str	r2, [r3, #24]
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <LCD_IO_WriteCmd8+0x140>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	b25b      	sxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	da04      	bge.n	800232e <LCD_IO_WriteCmd8+0x106>
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <LCD_IO_WriteCmd8+0x144>)
 8002326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800232a:	619a      	str	r2, [r3, #24]
 800232c:	e003      	b.n	8002336 <LCD_IO_WriteCmd8+0x10e>
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <LCD_IO_WriteCmd8+0x144>)
 8002330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002334:	619a      	str	r2, [r3, #24]
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <LCD_IO_WriteCmd8+0x13c>)
 8002338:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800233c:	619a      	str	r2, [r3, #24]
 800233e:	2008      	movs	r0, #8
 8002340:	f7ff fe61 	bl	8002006 <LCD_IO_Delay>
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <LCD_IO_WriteCmd8+0x13c>)
 8002346:	2201      	movs	r2, #1
 8002348:	619a      	str	r2, [r3, #24]
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <LCD_IO_WriteCmd8+0x13c>)
 800234c:	2208      	movs	r2, #8
 800234e:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <LCD_IO_WriteCmd8+0x138>)
 8002352:	2202      	movs	r2, #2
 8002354:	619a      	str	r2, [r3, #24]
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	58020400 	.word	0x58020400
 8002364:	58020800 	.word	0x58020800
 8002368:	24000959 	.word	0x24000959
 800236c:	58021800 	.word	0x58021800
 8002370:	58020c00 	.word	0x58020c00
 8002374:	58021000 	.word	0x58021000
 8002378:	58020000 	.word	0x58020000

0800237c <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <LCD_IO_WriteData8+0x128>)
 8002388:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800238c:	619a      	str	r2, [r3, #24]
  LCD_DATA8_WRITE(Data);
 800238e:	4a46      	ldr	r2, [pc, #280]	; (80024a8 <LCD_IO_WriteData8+0x12c>)
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	7013      	strb	r3, [r2, #0]
 8002394:	4b44      	ldr	r3, [pc, #272]	; (80024a8 <LCD_IO_WriteData8+0x12c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <LCD_IO_WriteData8+0x2e>
 80023a0:	4b42      	ldr	r3, [pc, #264]	; (80024ac <LCD_IO_WriteData8+0x130>)
 80023a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a6:	619a      	str	r2, [r3, #24]
 80023a8:	e003      	b.n	80023b2 <LCD_IO_WriteData8+0x36>
 80023aa:	4b40      	ldr	r3, [pc, #256]	; (80024ac <LCD_IO_WriteData8+0x130>)
 80023ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b0:	619a      	str	r2, [r3, #24]
 80023b2:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <LCD_IO_WriteData8+0x12c>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <LCD_IO_WriteData8+0x4c>
 80023be:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <LCD_IO_WriteData8+0x134>)
 80023c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80023c4:	619a      	str	r2, [r3, #24]
 80023c6:	e003      	b.n	80023d0 <LCD_IO_WriteData8+0x54>
 80023c8:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <LCD_IO_WriteData8+0x134>)
 80023ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023ce:	619a      	str	r2, [r3, #24]
 80023d0:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <LCD_IO_WriteData8+0x12c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d004      	beq.n	80023e6 <LCD_IO_WriteData8+0x6a>
 80023dc:	4b33      	ldr	r3, [pc, #204]	; (80024ac <LCD_IO_WriteData8+0x130>)
 80023de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023e2:	619a      	str	r2, [r3, #24]
 80023e4:	e003      	b.n	80023ee <LCD_IO_WriteData8+0x72>
 80023e6:	4b31      	ldr	r3, [pc, #196]	; (80024ac <LCD_IO_WriteData8+0x130>)
 80023e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ec:	619a      	str	r2, [r3, #24]
 80023ee:	4b2e      	ldr	r3, [pc, #184]	; (80024a8 <LCD_IO_WriteData8+0x12c>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <LCD_IO_WriteData8+0x88>
 80023fa:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <LCD_IO_WriteData8+0x138>)
 80023fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002400:	619a      	str	r2, [r3, #24]
 8002402:	e003      	b.n	800240c <LCD_IO_WriteData8+0x90>
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <LCD_IO_WriteData8+0x138>)
 8002406:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800240a:	619a      	str	r2, [r3, #24]
 800240c:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <LCD_IO_WriteData8+0x12c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <LCD_IO_WriteData8+0xa6>
 8002418:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <LCD_IO_WriteData8+0x138>)
 800241a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800241e:	619a      	str	r2, [r3, #24]
 8002420:	e003      	b.n	800242a <LCD_IO_WriteData8+0xae>
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <LCD_IO_WriteData8+0x138>)
 8002424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002428:	619a      	str	r2, [r3, #24]
 800242a:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <LCD_IO_WriteData8+0x12c>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b00      	cmp	r3, #0
 8002434:	d004      	beq.n	8002440 <LCD_IO_WriteData8+0xc4>
 8002436:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <LCD_IO_WriteData8+0x138>)
 8002438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800243c:	619a      	str	r2, [r3, #24]
 800243e:	e003      	b.n	8002448 <LCD_IO_WriteData8+0xcc>
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <LCD_IO_WriteData8+0x138>)
 8002442:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002446:	619a      	str	r2, [r3, #24]
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <LCD_IO_WriteData8+0x12c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d004      	beq.n	800245e <LCD_IO_WriteData8+0xe2>
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <LCD_IO_WriteData8+0x13c>)
 8002456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800245a:	619a      	str	r2, [r3, #24]
 800245c:	e003      	b.n	8002466 <LCD_IO_WriteData8+0xea>
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <LCD_IO_WriteData8+0x13c>)
 8002460:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002464:	619a      	str	r2, [r3, #24]
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <LCD_IO_WriteData8+0x12c>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	b25b      	sxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	da04      	bge.n	800247a <LCD_IO_WriteData8+0xfe>
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <LCD_IO_WriteData8+0x130>)
 8002472:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002476:	619a      	str	r2, [r3, #24]
 8002478:	e003      	b.n	8002482 <LCD_IO_WriteData8+0x106>
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <LCD_IO_WriteData8+0x130>)
 800247c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002480:	619a      	str	r2, [r3, #24]
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <LCD_IO_WriteData8+0x140>)
 8002484:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002488:	619a      	str	r2, [r3, #24]
 800248a:	2008      	movs	r0, #8
 800248c:	f7ff fdbb 	bl	8002006 <LCD_IO_Delay>
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <LCD_IO_WriteData8+0x140>)
 8002492:	2201      	movs	r2, #1
 8002494:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8002496:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <LCD_IO_WriteData8+0x128>)
 8002498:	2202      	movs	r2, #2
 800249a:	619a      	str	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	58020400 	.word	0x58020400
 80024a8:	24000959 	.word	0x24000959
 80024ac:	58021800 	.word	0x58021800
 80024b0:	58020c00 	.word	0x58020c00
 80024b4:	58021000 	.word	0x58021000
 80024b8:	58020000 	.word	0x58020000
 80024bc:	58020800 	.word	0x58020800

080024c0 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <LCD_IO_WriteData16+0x238>)
 80024cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024d0:	619a      	str	r2, [r3, #24]
  LCD_DATA16_WRITE(Data);
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4b88      	ldr	r3, [pc, #544]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	4b87      	ldr	r3, [pc, #540]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <LCD_IO_WriteData16+0x34>
 80024ea:	4b85      	ldr	r3, [pc, #532]	; (8002700 <LCD_IO_WriteData16+0x240>)
 80024ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f0:	619a      	str	r2, [r3, #24]
 80024f2:	e003      	b.n	80024fc <LCD_IO_WriteData16+0x3c>
 80024f4:	4b82      	ldr	r3, [pc, #520]	; (8002700 <LCD_IO_WriteData16+0x240>)
 80024f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024fa:	619a      	str	r2, [r3, #24]
 80024fc:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d004      	beq.n	8002512 <LCD_IO_WriteData16+0x52>
 8002508:	4b7e      	ldr	r3, [pc, #504]	; (8002704 <LCD_IO_WriteData16+0x244>)
 800250a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800250e:	619a      	str	r2, [r3, #24]
 8002510:	e003      	b.n	800251a <LCD_IO_WriteData16+0x5a>
 8002512:	4b7c      	ldr	r3, [pc, #496]	; (8002704 <LCD_IO_WriteData16+0x244>)
 8002514:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002518:	619a      	str	r2, [r3, #24]
 800251a:	4b78      	ldr	r3, [pc, #480]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <LCD_IO_WriteData16+0x70>
 8002526:	4b76      	ldr	r3, [pc, #472]	; (8002700 <LCD_IO_WriteData16+0x240>)
 8002528:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800252c:	619a      	str	r2, [r3, #24]
 800252e:	e003      	b.n	8002538 <LCD_IO_WriteData16+0x78>
 8002530:	4b73      	ldr	r3, [pc, #460]	; (8002700 <LCD_IO_WriteData16+0x240>)
 8002532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002536:	619a      	str	r2, [r3, #24]
 8002538:	4b70      	ldr	r3, [pc, #448]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <LCD_IO_WriteData16+0x8e>
 8002544:	4b70      	ldr	r3, [pc, #448]	; (8002708 <LCD_IO_WriteData16+0x248>)
 8002546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800254a:	619a      	str	r2, [r3, #24]
 800254c:	e003      	b.n	8002556 <LCD_IO_WriteData16+0x96>
 800254e:	4b6e      	ldr	r3, [pc, #440]	; (8002708 <LCD_IO_WriteData16+0x248>)
 8002550:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002554:	619a      	str	r2, [r3, #24]
 8002556:	4b69      	ldr	r3, [pc, #420]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <LCD_IO_WriteData16+0xac>
 8002562:	4b69      	ldr	r3, [pc, #420]	; (8002708 <LCD_IO_WriteData16+0x248>)
 8002564:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002568:	619a      	str	r2, [r3, #24]
 800256a:	e003      	b.n	8002574 <LCD_IO_WriteData16+0xb4>
 800256c:	4b66      	ldr	r3, [pc, #408]	; (8002708 <LCD_IO_WriteData16+0x248>)
 800256e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002572:	619a      	str	r2, [r3, #24]
 8002574:	4b61      	ldr	r3, [pc, #388]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <LCD_IO_WriteData16+0xca>
 8002580:	4b61      	ldr	r3, [pc, #388]	; (8002708 <LCD_IO_WriteData16+0x248>)
 8002582:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002586:	619a      	str	r2, [r3, #24]
 8002588:	e003      	b.n	8002592 <LCD_IO_WriteData16+0xd2>
 800258a:	4b5f      	ldr	r3, [pc, #380]	; (8002708 <LCD_IO_WriteData16+0x248>)
 800258c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002590:	619a      	str	r2, [r3, #24]
 8002592:	4b5a      	ldr	r3, [pc, #360]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <LCD_IO_WriteData16+0xe8>
 800259e:	4b5b      	ldr	r3, [pc, #364]	; (800270c <LCD_IO_WriteData16+0x24c>)
 80025a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a4:	619a      	str	r2, [r3, #24]
 80025a6:	e003      	b.n	80025b0 <LCD_IO_WriteData16+0xf0>
 80025a8:	4b58      	ldr	r3, [pc, #352]	; (800270c <LCD_IO_WriteData16+0x24c>)
 80025aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025ae:	619a      	str	r2, [r3, #24]
 80025b0:	4b52      	ldr	r3, [pc, #328]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	da04      	bge.n	80025c4 <LCD_IO_WriteData16+0x104>
 80025ba:	4b51      	ldr	r3, [pc, #324]	; (8002700 <LCD_IO_WriteData16+0x240>)
 80025bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025c0:	619a      	str	r2, [r3, #24]
 80025c2:	e003      	b.n	80025cc <LCD_IO_WriteData16+0x10c>
 80025c4:	4b4e      	ldr	r3, [pc, #312]	; (8002700 <LCD_IO_WriteData16+0x240>)
 80025c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ca:	619a      	str	r2, [r3, #24]
 80025cc:	4b50      	ldr	r3, [pc, #320]	; (8002710 <LCD_IO_WriteData16+0x250>)
 80025ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025d2:	619a      	str	r2, [r3, #24]
 80025d4:	2008      	movs	r0, #8
 80025d6:	f7ff fd16 	bl	8002006 <LCD_IO_Delay>
 80025da:	4b4d      	ldr	r3, [pc, #308]	; (8002710 <LCD_IO_WriteData16+0x250>)
 80025dc:	2201      	movs	r2, #1
 80025de:	619a      	str	r2, [r3, #24]
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b45      	ldr	r3, [pc, #276]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	4b44      	ldr	r3, [pc, #272]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <LCD_IO_WriteData16+0x13e>
 80025f4:	4b42      	ldr	r3, [pc, #264]	; (8002700 <LCD_IO_WriteData16+0x240>)
 80025f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fa:	619a      	str	r2, [r3, #24]
 80025fc:	e003      	b.n	8002606 <LCD_IO_WriteData16+0x146>
 80025fe:	4b40      	ldr	r3, [pc, #256]	; (8002700 <LCD_IO_WriteData16+0x240>)
 8002600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002604:	619a      	str	r2, [r3, #24]
 8002606:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <LCD_IO_WriteData16+0x15c>
 8002612:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <LCD_IO_WriteData16+0x244>)
 8002614:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002618:	619a      	str	r2, [r3, #24]
 800261a:	e003      	b.n	8002624 <LCD_IO_WriteData16+0x164>
 800261c:	4b39      	ldr	r3, [pc, #228]	; (8002704 <LCD_IO_WriteData16+0x244>)
 800261e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002622:	619a      	str	r2, [r3, #24]
 8002624:	4b35      	ldr	r3, [pc, #212]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <LCD_IO_WriteData16+0x17a>
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <LCD_IO_WriteData16+0x240>)
 8002632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002636:	619a      	str	r2, [r3, #24]
 8002638:	e003      	b.n	8002642 <LCD_IO_WriteData16+0x182>
 800263a:	4b31      	ldr	r3, [pc, #196]	; (8002700 <LCD_IO_WriteData16+0x240>)
 800263c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002640:	619a      	str	r2, [r3, #24]
 8002642:	4b2e      	ldr	r3, [pc, #184]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <LCD_IO_WriteData16+0x198>
 800264e:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <LCD_IO_WriteData16+0x248>)
 8002650:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002654:	619a      	str	r2, [r3, #24]
 8002656:	e003      	b.n	8002660 <LCD_IO_WriteData16+0x1a0>
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <LCD_IO_WriteData16+0x248>)
 800265a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800265e:	619a      	str	r2, [r3, #24]
 8002660:	4b26      	ldr	r3, [pc, #152]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d004      	beq.n	8002676 <LCD_IO_WriteData16+0x1b6>
 800266c:	4b26      	ldr	r3, [pc, #152]	; (8002708 <LCD_IO_WriteData16+0x248>)
 800266e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002672:	619a      	str	r2, [r3, #24]
 8002674:	e003      	b.n	800267e <LCD_IO_WriteData16+0x1be>
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <LCD_IO_WriteData16+0x248>)
 8002678:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800267c:	619a      	str	r2, [r3, #24]
 800267e:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <LCD_IO_WriteData16+0x1d4>
 800268a:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <LCD_IO_WriteData16+0x248>)
 800268c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002690:	619a      	str	r2, [r3, #24]
 8002692:	e003      	b.n	800269c <LCD_IO_WriteData16+0x1dc>
 8002694:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <LCD_IO_WriteData16+0x248>)
 8002696:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800269a:	619a      	str	r2, [r3, #24]
 800269c:	4b17      	ldr	r3, [pc, #92]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <LCD_IO_WriteData16+0x1f2>
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <LCD_IO_WriteData16+0x24c>)
 80026aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ae:	619a      	str	r2, [r3, #24]
 80026b0:	e003      	b.n	80026ba <LCD_IO_WriteData16+0x1fa>
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <LCD_IO_WriteData16+0x24c>)
 80026b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026b8:	619a      	str	r2, [r3, #24]
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <LCD_IO_WriteData16+0x23c>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b25b      	sxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	da04      	bge.n	80026ce <LCD_IO_WriteData16+0x20e>
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <LCD_IO_WriteData16+0x240>)
 80026c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ca:	619a      	str	r2, [r3, #24]
 80026cc:	e003      	b.n	80026d6 <LCD_IO_WriteData16+0x216>
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <LCD_IO_WriteData16+0x240>)
 80026d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d4:	619a      	str	r2, [r3, #24]
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <LCD_IO_WriteData16+0x250>)
 80026d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026dc:	619a      	str	r2, [r3, #24]
 80026de:	2008      	movs	r0, #8
 80026e0:	f7ff fc91 	bl	8002006 <LCD_IO_Delay>
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <LCD_IO_WriteData16+0x250>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 80026ea:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <LCD_IO_WriteData16+0x238>)
 80026ec:	2202      	movs	r2, #2
 80026ee:	619a      	str	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	58020400 	.word	0x58020400
 80026fc:	24000959 	.word	0x24000959
 8002700:	58021800 	.word	0x58021800
 8002704:	58020c00 	.word	0x58020c00
 8002708:	58021000 	.word	0x58021000
 800270c:	58020000 	.word	0x58020000
 8002710:	58020800 	.word	0x58020800

08002714 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	603a      	str	r2, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
 8002720:	460b      	mov	r3, r1
 8002722:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 8002724:	4b9a      	ldr	r3, [pc, #616]	; (8002990 <LCD_IO_WriteCmd8DataFill16+0x27c>)
 8002726:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800272a:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 800272c:	4b99      	ldr	r3, [pc, #612]	; (8002994 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800272e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002732:	619a      	str	r2, [r3, #24]
 8002734:	4a98      	ldr	r2, [pc, #608]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	7013      	strb	r3, [r2, #0]
 800273a:	4b97      	ldr	r3, [pc, #604]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d004      	beq.n	8002750 <LCD_IO_WriteCmd8DataFill16+0x3c>
 8002746:	4b95      	ldr	r3, [pc, #596]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8002748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800274c:	619a      	str	r2, [r3, #24]
 800274e:	e003      	b.n	8002758 <LCD_IO_WriteCmd8DataFill16+0x44>
 8002750:	4b92      	ldr	r3, [pc, #584]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8002752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002756:	619a      	str	r2, [r3, #24]
 8002758:	4b8f      	ldr	r3, [pc, #572]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <LCD_IO_WriteCmd8DataFill16+0x5a>
 8002764:	4b8e      	ldr	r3, [pc, #568]	; (80029a0 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8002766:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800276a:	619a      	str	r2, [r3, #24]
 800276c:	e003      	b.n	8002776 <LCD_IO_WriteCmd8DataFill16+0x62>
 800276e:	4b8c      	ldr	r3, [pc, #560]	; (80029a0 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8002770:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002774:	619a      	str	r2, [r3, #24]
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <LCD_IO_WriteCmd8DataFill16+0x78>
 8002782:	4b86      	ldr	r3, [pc, #536]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8002784:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002788:	619a      	str	r2, [r3, #24]
 800278a:	e003      	b.n	8002794 <LCD_IO_WriteCmd8DataFill16+0x80>
 800278c:	4b83      	ldr	r3, [pc, #524]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 800278e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002792:	619a      	str	r2, [r3, #24]
 8002794:	4b80      	ldr	r3, [pc, #512]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <LCD_IO_WriteCmd8DataFill16+0x96>
 80027a0:	4b80      	ldr	r3, [pc, #512]	; (80029a4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80027a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a6:	619a      	str	r2, [r3, #24]
 80027a8:	e003      	b.n	80027b2 <LCD_IO_WriteCmd8DataFill16+0x9e>
 80027aa:	4b7e      	ldr	r3, [pc, #504]	; (80029a4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80027ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027b0:	619a      	str	r2, [r3, #24]
 80027b2:	4b79      	ldr	r3, [pc, #484]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <LCD_IO_WriteCmd8DataFill16+0xb4>
 80027be:	4b79      	ldr	r3, [pc, #484]	; (80029a4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80027c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027c4:	619a      	str	r2, [r3, #24]
 80027c6:	e003      	b.n	80027d0 <LCD_IO_WriteCmd8DataFill16+0xbc>
 80027c8:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80027ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ce:	619a      	str	r2, [r3, #24]
 80027d0:	4b71      	ldr	r3, [pc, #452]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <LCD_IO_WriteCmd8DataFill16+0xd2>
 80027dc:	4b71      	ldr	r3, [pc, #452]	; (80029a4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80027de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027e2:	619a      	str	r2, [r3, #24]
 80027e4:	e003      	b.n	80027ee <LCD_IO_WriteCmd8DataFill16+0xda>
 80027e6:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80027e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027ec:	619a      	str	r2, [r3, #24]
 80027ee:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <LCD_IO_WriteCmd8DataFill16+0xf0>
 80027fa:	4b6b      	ldr	r3, [pc, #428]	; (80029a8 <LCD_IO_WriteCmd8DataFill16+0x294>)
 80027fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002800:	619a      	str	r2, [r3, #24]
 8002802:	e003      	b.n	800280c <LCD_IO_WriteCmd8DataFill16+0xf8>
 8002804:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8002806:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800280a:	619a      	str	r2, [r3, #24]
 800280c:	4b62      	ldr	r3, [pc, #392]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b25b      	sxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	da04      	bge.n	8002820 <LCD_IO_WriteCmd8DataFill16+0x10c>
 8002816:	4b61      	ldr	r3, [pc, #388]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8002818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800281c:	619a      	str	r2, [r3, #24]
 800281e:	e003      	b.n	8002828 <LCD_IO_WriteCmd8DataFill16+0x114>
 8002820:	4b5e      	ldr	r3, [pc, #376]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8002822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002826:	619a      	str	r2, [r3, #24]
 8002828:	4b5a      	ldr	r3, [pc, #360]	; (8002994 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800282a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800282e:	619a      	str	r2, [r3, #24]
 8002830:	2008      	movs	r0, #8
 8002832:	f7ff fbe8 	bl	8002006 <LCD_IO_Delay>
 8002836:	4b57      	ldr	r3, [pc, #348]	; (8002994 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8002838:	2201      	movs	r2, #1
 800283a:	619a      	str	r2, [r3, #24]
 800283c:	4b55      	ldr	r3, [pc, #340]	; (8002994 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800283e:	2208      	movs	r2, #8
 8002840:	619a      	str	r2, [r3, #24]
  while(Size--)
 8002842:	e11a      	b.n	8002a7a <LCD_IO_WriteCmd8DataFill16+0x366>
  {
    LCD_DATA16_WRITE(Data);
 8002844:	88bb      	ldrh	r3, [r7, #4]
 8002846:	0a1b      	lsrs	r3, r3, #8
 8002848:	b29b      	uxth	r3, r3
 800284a:	b2da      	uxtb	r2, r3
 800284c:	4b52      	ldr	r3, [pc, #328]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	4b51      	ldr	r3, [pc, #324]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <LCD_IO_WriteCmd8DataFill16+0x152>
 800285c:	4b4f      	ldr	r3, [pc, #316]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 800285e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002862:	619a      	str	r2, [r3, #24]
 8002864:	e003      	b.n	800286e <LCD_IO_WriteCmd8DataFill16+0x15a>
 8002866:	4b4d      	ldr	r3, [pc, #308]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8002868:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286c:	619a      	str	r2, [r3, #24]
 800286e:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <LCD_IO_WriteCmd8DataFill16+0x170>
 800287a:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800287c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002880:	619a      	str	r2, [r3, #24]
 8002882:	e003      	b.n	800288c <LCD_IO_WriteCmd8DataFill16+0x178>
 8002884:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8002886:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800288a:	619a      	str	r2, [r3, #24]
 800288c:	4b42      	ldr	r3, [pc, #264]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <LCD_IO_WriteCmd8DataFill16+0x18e>
 8002898:	4b40      	ldr	r3, [pc, #256]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 800289a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800289e:	619a      	str	r2, [r3, #24]
 80028a0:	e003      	b.n	80028aa <LCD_IO_WriteCmd8DataFill16+0x196>
 80028a2:	4b3e      	ldr	r3, [pc, #248]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 80028a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028a8:	619a      	str	r2, [r3, #24]
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <LCD_IO_WriteCmd8DataFill16+0x1ac>
 80028b6:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80028b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028bc:	619a      	str	r2, [r3, #24]
 80028be:	e003      	b.n	80028c8 <LCD_IO_WriteCmd8DataFill16+0x1b4>
 80028c0:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80028c2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80028c6:	619a      	str	r2, [r3, #24]
 80028c8:	4b33      	ldr	r3, [pc, #204]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <LCD_IO_WriteCmd8DataFill16+0x1ca>
 80028d4:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80028d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028da:	619a      	str	r2, [r3, #24]
 80028dc:	e003      	b.n	80028e6 <LCD_IO_WriteCmd8DataFill16+0x1d2>
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80028e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028e4:	619a      	str	r2, [r3, #24]
 80028e6:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <LCD_IO_WriteCmd8DataFill16+0x1e8>
 80028f2:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80028f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028f8:	619a      	str	r2, [r3, #24]
 80028fa:	e003      	b.n	8002904 <LCD_IO_WriteCmd8DataFill16+0x1f0>
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80028fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002902:	619a      	str	r2, [r3, #24]
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <LCD_IO_WriteCmd8DataFill16+0x206>
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8002912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002916:	619a      	str	r2, [r3, #24]
 8002918:	e003      	b.n	8002922 <LCD_IO_WriteCmd8DataFill16+0x20e>
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <LCD_IO_WriteCmd8DataFill16+0x294>)
 800291c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002920:	619a      	str	r2, [r3, #24]
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	b25b      	sxtb	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	da04      	bge.n	8002936 <LCD_IO_WriteCmd8DataFill16+0x222>
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 800292e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002932:	619a      	str	r2, [r3, #24]
 8002934:	e003      	b.n	800293e <LCD_IO_WriteCmd8DataFill16+0x22a>
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8002938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293c:	619a      	str	r2, [r3, #24]
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8002940:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002944:	619a      	str	r2, [r3, #24]
 8002946:	2008      	movs	r0, #8
 8002948:	f7ff fb5d 	bl	8002006 <LCD_IO_Delay>
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800294e:	2201      	movs	r2, #1
 8002950:	619a      	str	r2, [r3, #24]
 8002952:	88bb      	ldrh	r3, [r7, #4]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <LCD_IO_WriteCmd8DataFill16+0x25c>
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8002968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800296c:	619a      	str	r2, [r3, #24]
 800296e:	e003      	b.n	8002978 <LCD_IO_WriteCmd8DataFill16+0x264>
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8002972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002976:	619a      	str	r2, [r3, #24]
 8002978:	4b07      	ldr	r3, [pc, #28]	; (8002998 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d013      	beq.n	80029ac <LCD_IO_WriteCmd8DataFill16+0x298>
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8002986:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800298a:	619a      	str	r2, [r3, #24]
 800298c:	e012      	b.n	80029b4 <LCD_IO_WriteCmd8DataFill16+0x2a0>
 800298e:	bf00      	nop
 8002990:	58020400 	.word	0x58020400
 8002994:	58020800 	.word	0x58020800
 8002998:	24000959 	.word	0x24000959
 800299c:	58021800 	.word	0x58021800
 80029a0:	58020c00 	.word	0x58020c00
 80029a4:	58021000 	.word	0x58021000
 80029a8:	58020000 	.word	0x58020000
 80029ac:	4b39      	ldr	r3, [pc, #228]	; (8002a94 <LCD_IO_WriteCmd8DataFill16+0x380>)
 80029ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80029b2:	619a      	str	r2, [r3, #24]
 80029b4:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <LCD_IO_WriteCmd8DataFill16+0x2b6>
 80029c0:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <LCD_IO_WriteCmd8DataFill16+0x388>)
 80029c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029c6:	619a      	str	r2, [r3, #24]
 80029c8:	e003      	b.n	80029d2 <LCD_IO_WriteCmd8DataFill16+0x2be>
 80029ca:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <LCD_IO_WriteCmd8DataFill16+0x388>)
 80029cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029d0:	619a      	str	r2, [r3, #24]
 80029d2:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <LCD_IO_WriteCmd8DataFill16+0x2d4>
 80029de:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80029e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029e4:	619a      	str	r2, [r3, #24]
 80029e6:	e003      	b.n	80029f0 <LCD_IO_WriteCmd8DataFill16+0x2dc>
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80029ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029ee:	619a      	str	r2, [r3, #24]
 80029f0:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <LCD_IO_WriteCmd8DataFill16+0x2f2>
 80029fc:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80029fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a02:	619a      	str	r2, [r3, #24]
 8002a04:	e003      	b.n	8002a0e <LCD_IO_WriteCmd8DataFill16+0x2fa>
 8002a06:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8002a08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a0c:	619a      	str	r2, [r3, #24]
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <LCD_IO_WriteCmd8DataFill16+0x310>
 8002a1a:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8002a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a20:	619a      	str	r2, [r3, #24]
 8002a22:	e003      	b.n	8002a2c <LCD_IO_WriteCmd8DataFill16+0x318>
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8002a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a2a:	619a      	str	r2, [r3, #24]
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d004      	beq.n	8002a42 <LCD_IO_WriteCmd8DataFill16+0x32e>
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <LCD_IO_WriteCmd8DataFill16+0x390>)
 8002a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a3e:	619a      	str	r2, [r3, #24]
 8002a40:	e003      	b.n	8002a4a <LCD_IO_WriteCmd8DataFill16+0x336>
 8002a42:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <LCD_IO_WriteCmd8DataFill16+0x390>)
 8002a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a48:	619a      	str	r2, [r3, #24]
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b25b      	sxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	da04      	bge.n	8002a5e <LCD_IO_WriteCmd8DataFill16+0x34a>
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <LCD_IO_WriteCmd8DataFill16+0x388>)
 8002a56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a5a:	619a      	str	r2, [r3, #24]
 8002a5c:	e003      	b.n	8002a66 <LCD_IO_WriteCmd8DataFill16+0x352>
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <LCD_IO_WriteCmd8DataFill16+0x388>)
 8002a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a64:	619a      	str	r2, [r3, #24]
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8002a68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a6c:	619a      	str	r2, [r3, #24]
 8002a6e:	2008      	movs	r0, #8
 8002a70:	f7ff fac9 	bl	8002006 <LCD_IO_Delay>
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	619a      	str	r2, [r3, #24]
  while(Size--)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	1e5a      	subs	r2, r3, #1
 8002a7e:	603a      	str	r2, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f47f aedf 	bne.w	8002844 <LCD_IO_WriteCmd8DataFill16+0x130>
  }
  LCD_CS_OFF;
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <LCD_IO_WriteCmd8DataFill16+0x398>)
 8002a88:	2202      	movs	r2, #2
 8002a8a:	619a      	str	r2, [r3, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	58020c00 	.word	0x58020c00
 8002a98:	24000959 	.word	0x24000959
 8002a9c:	58021800 	.word	0x58021800
 8002aa0:	58021000 	.word	0x58021000
 8002aa4:	58020000 	.word	0x58020000
 8002aa8:	58020800 	.word	0x58020800
 8002aac:	58020400 	.word	0x58020400

08002ab0 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8002abe:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8002ac0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ac4:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8002ac6:	4b91      	ldr	r3, [pc, #580]	; (8002d0c <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8002ac8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002acc:	619a      	str	r2, [r3, #24]
 8002ace:	4a90      	ldr	r2, [pc, #576]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	7013      	strb	r3, [r2, #0]
 8002ad4:	4b8e      	ldr	r3, [pc, #568]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <LCD_IO_WriteCmd8MultipleData8+0x3a>
 8002ae0:	4b8c      	ldr	r3, [pc, #560]	; (8002d14 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8002ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae6:	619a      	str	r2, [r3, #24]
 8002ae8:	e003      	b.n	8002af2 <LCD_IO_WriteCmd8MultipleData8+0x42>
 8002aea:	4b8a      	ldr	r3, [pc, #552]	; (8002d14 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8002aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af0:	619a      	str	r2, [r3, #24]
 8002af2:	4b87      	ldr	r3, [pc, #540]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <LCD_IO_WriteCmd8MultipleData8+0x58>
 8002afe:	4b86      	ldr	r3, [pc, #536]	; (8002d18 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8002b00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b04:	619a      	str	r2, [r3, #24]
 8002b06:	e003      	b.n	8002b10 <LCD_IO_WriteCmd8MultipleData8+0x60>
 8002b08:	4b83      	ldr	r3, [pc, #524]	; (8002d18 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8002b0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b0e:	619a      	str	r2, [r3, #24]
 8002b10:	4b7f      	ldr	r3, [pc, #508]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <LCD_IO_WriteCmd8MultipleData8+0x76>
 8002b1c:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8002b1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b22:	619a      	str	r2, [r3, #24]
 8002b24:	e003      	b.n	8002b2e <LCD_IO_WriteCmd8MultipleData8+0x7e>
 8002b26:	4b7b      	ldr	r3, [pc, #492]	; (8002d14 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8002b28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b2c:	619a      	str	r2, [r3, #24]
 8002b2e:	4b78      	ldr	r3, [pc, #480]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d004      	beq.n	8002b44 <LCD_IO_WriteCmd8MultipleData8+0x94>
 8002b3a:	4b78      	ldr	r3, [pc, #480]	; (8002d1c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8002b3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b40:	619a      	str	r2, [r3, #24]
 8002b42:	e003      	b.n	8002b4c <LCD_IO_WriteCmd8MultipleData8+0x9c>
 8002b44:	4b75      	ldr	r3, [pc, #468]	; (8002d1c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8002b46:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b4a:	619a      	str	r2, [r3, #24]
 8002b4c:	4b70      	ldr	r3, [pc, #448]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d004      	beq.n	8002b62 <LCD_IO_WriteCmd8MultipleData8+0xb2>
 8002b58:	4b70      	ldr	r3, [pc, #448]	; (8002d1c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8002b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b5e:	619a      	str	r2, [r3, #24]
 8002b60:	e003      	b.n	8002b6a <LCD_IO_WriteCmd8MultipleData8+0xba>
 8002b62:	4b6e      	ldr	r3, [pc, #440]	; (8002d1c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8002b64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b68:	619a      	str	r2, [r3, #24]
 8002b6a:	4b69      	ldr	r3, [pc, #420]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <LCD_IO_WriteCmd8MultipleData8+0xd0>
 8002b76:	4b69      	ldr	r3, [pc, #420]	; (8002d1c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8002b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b7c:	619a      	str	r2, [r3, #24]
 8002b7e:	e003      	b.n	8002b88 <LCD_IO_WriteCmd8MultipleData8+0xd8>
 8002b80:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8002b82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b86:	619a      	str	r2, [r3, #24]
 8002b88:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <LCD_IO_WriteCmd8MultipleData8+0xee>
 8002b94:	4b62      	ldr	r3, [pc, #392]	; (8002d20 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8002b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b9a:	619a      	str	r2, [r3, #24]
 8002b9c:	e003      	b.n	8002ba6 <LCD_IO_WriteCmd8MultipleData8+0xf6>
 8002b9e:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8002ba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ba4:	619a      	str	r2, [r3, #24]
 8002ba6:	4b5a      	ldr	r3, [pc, #360]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	b25b      	sxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	da04      	bge.n	8002bba <LCD_IO_WriteCmd8MultipleData8+0x10a>
 8002bb0:	4b58      	ldr	r3, [pc, #352]	; (8002d14 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8002bb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bb6:	619a      	str	r2, [r3, #24]
 8002bb8:	e003      	b.n	8002bc2 <LCD_IO_WriteCmd8MultipleData8+0x112>
 8002bba:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8002bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc0:	619a      	str	r2, [r3, #24]
 8002bc2:	4b52      	ldr	r3, [pc, #328]	; (8002d0c <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8002bc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bc8:	619a      	str	r2, [r3, #24]
 8002bca:	2008      	movs	r0, #8
 8002bcc:	f7ff fa1b 	bl	8002006 <LCD_IO_Delay>
 8002bd0:	4b4e      	ldr	r3, [pc, #312]	; (8002d0c <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	619a      	str	r2, [r3, #24]
 8002bd6:	4b4d      	ldr	r3, [pc, #308]	; (8002d0c <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8002bd8:	2208      	movs	r2, #8
 8002bda:	619a      	str	r2, [r3, #24]

  while(Size--)
 8002bdc:	e087      	b.n	8002cee <LCD_IO_WriteCmd8MultipleData8+0x23e>
  {
    LCD_DATA8_WRITE(*pData);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d004      	beq.n	8002bfc <LCD_IO_WriteCmd8MultipleData8+0x14c>
 8002bf2:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8002bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf8:	619a      	str	r2, [r3, #24]
 8002bfa:	e003      	b.n	8002c04 <LCD_IO_WriteCmd8MultipleData8+0x154>
 8002bfc:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8002bfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c02:	619a      	str	r2, [r3, #24]
 8002c04:	4b42      	ldr	r3, [pc, #264]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d004      	beq.n	8002c1a <LCD_IO_WriteCmd8MultipleData8+0x16a>
 8002c10:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8002c12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c16:	619a      	str	r2, [r3, #24]
 8002c18:	e003      	b.n	8002c22 <LCD_IO_WriteCmd8MultipleData8+0x172>
 8002c1a:	4b3f      	ldr	r3, [pc, #252]	; (8002d18 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8002c1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c20:	619a      	str	r2, [r3, #24]
 8002c22:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <LCD_IO_WriteCmd8MultipleData8+0x188>
 8002c2e:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8002c30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c34:	619a      	str	r2, [r3, #24]
 8002c36:	e003      	b.n	8002c40 <LCD_IO_WriteCmd8MultipleData8+0x190>
 8002c38:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8002c3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c3e:	619a      	str	r2, [r3, #24]
 8002c40:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <LCD_IO_WriteCmd8MultipleData8+0x1a6>
 8002c4c:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8002c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c52:	619a      	str	r2, [r3, #24]
 8002c54:	e003      	b.n	8002c5e <LCD_IO_WriteCmd8MultipleData8+0x1ae>
 8002c56:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8002c58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c5c:	619a      	str	r2, [r3, #24]
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d004      	beq.n	8002c74 <LCD_IO_WriteCmd8MultipleData8+0x1c4>
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8002c6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c70:	619a      	str	r2, [r3, #24]
 8002c72:	e003      	b.n	8002c7c <LCD_IO_WriteCmd8MultipleData8+0x1cc>
 8002c74:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8002c76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c7a:	619a      	str	r2, [r3, #24]
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <LCD_IO_WriteCmd8MultipleData8+0x1e2>
 8002c88:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8002c8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c8e:	619a      	str	r2, [r3, #24]
 8002c90:	e003      	b.n	8002c9a <LCD_IO_WriteCmd8MultipleData8+0x1ea>
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8002c94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c98:	619a      	str	r2, [r3, #24]
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <LCD_IO_WriteCmd8MultipleData8+0x200>
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8002ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cac:	619a      	str	r2, [r3, #24]
 8002cae:	e003      	b.n	8002cb8 <LCD_IO_WriteCmd8MultipleData8+0x208>
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8002cb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cb6:	619a      	str	r2, [r3, #24]
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	da04      	bge.n	8002ccc <LCD_IO_WriteCmd8MultipleData8+0x21c>
 8002cc2:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8002cc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cc8:	619a      	str	r2, [r3, #24]
 8002cca:	e003      	b.n	8002cd4 <LCD_IO_WriteCmd8MultipleData8+0x224>
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8002cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd2:	619a      	str	r2, [r3, #24]
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8002cd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cda:	619a      	str	r2, [r3, #24]
 8002cdc:	2008      	movs	r0, #8
 8002cde:	f7ff f992 	bl	8002006 <LCD_IO_Delay>
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	619a      	str	r2, [r3, #24]
    pData ++;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	1e5a      	subs	r2, r3, #1
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f af72 	bne.w	8002bde <LCD_IO_WriteCmd8MultipleData8+0x12e>
  }
  LCD_CS_OFF;
 8002cfa:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	619a      	str	r2, [r3, #24]
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	58020400 	.word	0x58020400
 8002d0c:	58020800 	.word	0x58020800
 8002d10:	24000959 	.word	0x24000959
 8002d14:	58021800 	.word	0x58021800
 8002d18:	58020c00 	.word	0x58020c00
 8002d1c:	58021000 	.word	0x58021000
 8002d20:	58020000 	.word	0x58020000

08002d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d28:	f7fd fca8 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d2c:	480c      	ldr	r0, [pc, #48]	; (8002d60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d2e:	490d      	ldr	r1, [pc, #52]	; (8002d64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d30:	4a0d      	ldr	r2, [pc, #52]	; (8002d68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d34:	e002      	b.n	8002d3c <LoopCopyDataInit>

08002d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d3a:	3304      	adds	r3, #4

08002d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d40:	d3f9      	bcc.n	8002d36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d44:	4c0a      	ldr	r4, [pc, #40]	; (8002d70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d48:	e001      	b.n	8002d4e <LoopFillZerobss>

08002d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d4c:	3204      	adds	r2, #4

08002d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d50:	d3fb      	bcc.n	8002d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d52:	f005 ff7f 	bl	8008c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d56:	f7fd fd27 	bl	80007a8 <main>
  bx  lr
 8002d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d5c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002d60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002d64:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002d68:	0800aa70 	.word	0x0800aa70
  ldr r2, =_sbss
 8002d6c:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8002d70:	24000aa8 	.word	0x24000aa8

08002d74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d74:	e7fe      	b.n	8002d74 <ADC3_IRQHandler>
	...

08002d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d7e:	2003      	movs	r0, #3
 8002d80:	f000 fafc 	bl	800337c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d84:	f002 fb14 	bl	80053b0 <HAL_RCC_GetSysClockFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_Init+0x68>)
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	4913      	ldr	r1, [pc, #76]	; (8002de4 <HAL_Init+0x6c>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002da0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_Init+0x68>)
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <HAL_Init+0x6c>)
 8002dac:	5cd3      	ldrb	r3, [r2, r3]
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
 8002db8:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <HAL_Init+0x70>)
 8002dba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <HAL_Init+0x74>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f000 f814 	bl	8002df0 <HAL_InitTick>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e002      	b.n	8002dd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd2:	f7fe fa3b 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	58024400 	.word	0x58024400
 8002de4:	080096a8 	.word	0x080096a8
 8002de8:	24000004 	.word	0x24000004
 8002dec:	24000000 	.word	0x24000000

08002df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002df8:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <HAL_InitTick+0x60>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e021      	b.n	8002e48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_InitTick+0x64>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_InitTick+0x60>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fae1 	bl	80033e2 <HAL_SYSTICK_Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e00e      	b.n	8002e48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b0f      	cmp	r3, #15
 8002e2e:	d80a      	bhi.n	8002e46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e30:	2200      	movs	r2, #0
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	f000 faab 	bl	8003392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e3c:	4a06      	ldr	r2, [pc, #24]	; (8002e58 <HAL_InitTick+0x68>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	24000020 	.word	0x24000020
 8002e54:	24000000 	.word	0x24000000
 8002e58:	2400001c 	.word	0x2400001c

08002e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_IncTick+0x20>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_IncTick+0x24>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <HAL_IncTick+0x24>)
 8002e6e:	6013      	str	r3, [r2, #0]
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	24000020 	.word	0x24000020
 8002e80:	2400095c 	.word	0x2400095c

08002e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return uwTick;
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <HAL_GetTick+0x14>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	2400095c 	.word	0x2400095c

08002e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea4:	f7ff ffee 	bl	8002e84 <HAL_GetTick>
 8002ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d005      	beq.n	8002ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <HAL_Delay+0x44>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ec2:	bf00      	nop
 8002ec4:	f7ff ffde 	bl	8002e84 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d8f7      	bhi.n	8002ec4 <HAL_Delay+0x28>
  {
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	24000020 	.word	0x24000020

08002ee4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_GetREVID+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	0c1b      	lsrs	r3, r3, #16
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	5c001000 	.word	0x5c001000

08002efc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002f0c:	4904      	ldr	r1, [pc, #16]	; (8002f20 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	58000400 	.word	0x58000400

08002f24 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_CEC_Init+0x16>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e04f      	b.n	8002fde <HAL_CEC_Init+0xba>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe fa64 	bl	800141c <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2224      	movs	r2, #36	; 0x24
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8002f7e:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8002f8a:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8002f90:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8002fa4:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8002fa6:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6959      	ldr	r1, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0201 	orr.w	r2, r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003014:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01c      	beq.n	800305a <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2222      	movs	r2, #34	; 0x22
 8003024:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800302a:	3301      	adds	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01e      	beq.n	80030a2 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0202 	orr.w	r2, r2, #2
 8003072:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003088:	425b      	negs	r3, r3
 800308a:	441a      	add	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003094:	4619      	mov	r1, r3
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f88b 	bl	80031b2 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d024      	beq.n	80030f6 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0204 	orr.w	r2, r2, #4
 80030ce:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f4:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d014      	beq.n	800312a <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310e:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f83a 	bl	800319e <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d02f      	beq.n	8003196 <HAL_CEC_IRQHandler+0x1b0>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6919      	ldr	r1, [r3, #16]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	f641 437c 	movw	r3, #7292	; 0x1c7c
 800314a:	430b      	orrs	r3, r1
 800314c:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00e      	beq.n	8003176 <HAL_CEC_IRQHandler+0x190>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003160:	425b      	negs	r3, r3
 8003162:	441a      	add	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	63da      	str	r2, [r3, #60]	; 0x3c
 8003174:	e00c      	b.n	8003190 <HAL_CEC_IRQHandler+0x1aa>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_CEC_IRQHandler+0x1aa>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_CEC_IRQHandler+0x1aa>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f819 	bl	80031c8 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <__NVIC_SetPriorityGrouping+0x40>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f8:	4013      	ands	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 8003206:	4313      	orrs	r3, r2
 8003208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320a:	4a04      	ldr	r2, [pc, #16]	; (800321c <__NVIC_SetPriorityGrouping+0x40>)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	60d3      	str	r3, [r2, #12]
}
 8003210:	bf00      	nop
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000ed00 	.word	0xe000ed00
 8003220:	05fa0000 	.word	0x05fa0000

08003224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <__NVIC_GetPriorityGrouping+0x18>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	f003 0307 	and.w	r3, r3, #7
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800324a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800324e:	2b00      	cmp	r3, #0
 8003250:	db0b      	blt.n	800326a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	4907      	ldr	r1, [pc, #28]	; (8003278 <__NVIC_EnableIRQ+0x38>)
 800325a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2001      	movs	r0, #1
 8003262:	fa00 f202 	lsl.w	r2, r0, r2
 8003266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000e100 	.word	0xe000e100

0800327c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800328c:	2b00      	cmp	r3, #0
 800328e:	db0a      	blt.n	80032a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	490c      	ldr	r1, [pc, #48]	; (80032c8 <__NVIC_SetPriority+0x4c>)
 8003296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	440b      	add	r3, r1
 80032a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a4:	e00a      	b.n	80032bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4908      	ldr	r1, [pc, #32]	; (80032cc <__NVIC_SetPriority+0x50>)
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	3b04      	subs	r3, #4
 80032b4:	0112      	lsls	r2, r2, #4
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	440b      	add	r3, r1
 80032ba:	761a      	strb	r2, [r3, #24]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f1c3 0307 	rsb	r3, r3, #7
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	bf28      	it	cs
 80032ee:	2304      	movcs	r3, #4
 80032f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d902      	bls.n	8003300 <NVIC_EncodePriority+0x30>
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3b03      	subs	r3, #3
 80032fe:	e000      	b.n	8003302 <NVIC_EncodePriority+0x32>
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	f04f 32ff 	mov.w	r2, #4294967295
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43da      	mvns	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	401a      	ands	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003318:	f04f 31ff 	mov.w	r1, #4294967295
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	43d9      	mvns	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	4313      	orrs	r3, r2
         );
}
 800332a:	4618      	mov	r0, r3
 800332c:	3724      	adds	r7, #36	; 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003348:	d301      	bcc.n	800334e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800334a:	2301      	movs	r3, #1
 800334c:	e00f      	b.n	800336e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <SysTick_Config+0x40>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003356:	210f      	movs	r1, #15
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	f7ff ff8e 	bl	800327c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <SysTick_Config+0x40>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <SysTick_Config+0x40>)
 8003368:	2207      	movs	r2, #7
 800336a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	e000e010 	.word	0xe000e010

0800337c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff29 	bl	80031dc <__NVIC_SetPriorityGrouping>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033a0:	f7ff ff40 	bl	8003224 <__NVIC_GetPriorityGrouping>
 80033a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	6978      	ldr	r0, [r7, #20]
 80033ac:	f7ff ff90 	bl	80032d0 <NVIC_EncodePriority>
 80033b0:	4602      	mov	r2, r0
 80033b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff5f 	bl	800327c <__NVIC_SetPriority>
}
 80033be:	bf00      	nop
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	4603      	mov	r3, r0
 80033ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff33 	bl	8003240 <__NVIC_EnableIRQ>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ffa4 	bl	8003338 <SysTick_Config>
 80033f0:	4603      	mov	r3, r0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0cf      	b.n	80035ae <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003414:	2b00      	cmp	r3, #0
 8003416:	d106      	bne.n	8003426 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2223      	movs	r2, #35	; 0x23
 800341c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7fd ff2d 	bl	8001280 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003426:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <HAL_ETH_Init+0x1bc>)
 8003428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800342c:	4a62      	ldr	r2, [pc, #392]	; (80035b8 <HAL_ETH_Init+0x1bc>)
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003436:	4b60      	ldr	r3, [pc, #384]	; (80035b8 <HAL_ETH_Init+0x1bc>)
 8003438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7a1b      	ldrb	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d103      	bne.n	8003454 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800344c:	2000      	movs	r0, #0
 800344e:	f7ff fd55 	bl	8002efc <HAL_SYSCFG_ETHInterfaceSelect>
 8003452:	e003      	b.n	800345c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003454:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003458:	f7ff fd50 	bl	8002efc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800345c:	4b57      	ldr	r3, [pc, #348]	; (80035bc <HAL_ETH_Init+0x1c0>)
 800345e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003476:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003478:	f7ff fd04 	bl	8002e84 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800347e:	e011      	b.n	80034a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003480:	f7ff fd00 	bl	8002e84 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800348e:	d909      	bls.n	80034a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2204      	movs	r2, #4
 8003494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	22e0      	movs	r2, #224	; 0xe0
 800349c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e084      	b.n	80035ae <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e4      	bne.n	8003480 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f886 	bl	80035c8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80034bc:	f002 f8f2 	bl	80056a4 <HAL_RCC_GetHCLKFreq>
 80034c0:	4603      	mov	r3, r0
 80034c2:	4a3f      	ldr	r2, [pc, #252]	; (80035c0 <HAL_ETH_Init+0x1c4>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	0c9a      	lsrs	r2, r3, #18
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3a01      	subs	r2, #1
 80034d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fa71 	bl	80039bc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80034e6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034f6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	22e0      	movs	r2, #224	; 0xe0
 8003512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e049      	b.n	80035ae <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003522:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003526:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <HAL_ETH_Init+0x1c8>)
 8003528:	4013      	ands	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6952      	ldr	r2, [r2, #20]
 800352e:	0051      	lsls	r1, r2, #1
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	430b      	orrs	r3, r1
 8003536:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800353a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fad9 	bl	8003af6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fb1f 	bl	8003b88 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	3305      	adds	r3, #5
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	021a      	lsls	r2, r3, #8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	3303      	adds	r3, #3
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	061a      	lsls	r2, r3, #24
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	3302      	adds	r3, #2
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	3301      	adds	r3, #1
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003588:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003596:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003598:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2210      	movs	r2, #16
 80035a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	58024400 	.word	0x58024400
 80035bc:	58000400 	.word	0x58000400
 80035c0:	431bde83 	.word	0x431bde83
 80035c4:	ffff8001 	.word	0xffff8001

080035c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80035e2:	f002 f85f 	bl	80056a4 <HAL_RCC_GetHCLKFreq>
 80035e6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d908      	bls.n	8003602 <HAL_ETH_SetMDIOClockRange+0x3a>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d804      	bhi.n	8003602 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	e027      	b.n	8003652 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4a18      	ldr	r2, [pc, #96]	; (8003668 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d908      	bls.n	800361c <HAL_ETH_SetMDIOClockRange+0x54>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4a17      	ldr	r2, [pc, #92]	; (800366c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d204      	bcs.n	800361c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	e01a      	b.n	8003652 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4a13      	ldr	r2, [pc, #76]	; (800366c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d303      	bcc.n	800362c <HAL_ETH_SetMDIOClockRange+0x64>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4a12      	ldr	r2, [pc, #72]	; (8003670 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d911      	bls.n	8003650 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4a10      	ldr	r2, [pc, #64]	; (8003670 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d908      	bls.n	8003646 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4a0f      	ldr	r2, [pc, #60]	; (8003674 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d804      	bhi.n	8003646 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e005      	b.n	8003652 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	e000      	b.n	8003652 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003650:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	01312cff 	.word	0x01312cff
 8003668:	02160ebf 	.word	0x02160ebf
 800366c:	03938700 	.word	0x03938700
 8003670:	05f5e0ff 	.word	0x05f5e0ff
 8003674:	08f0d17f 	.word	0x08f0d17f

08003678 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800368a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	791b      	ldrb	r3, [r3, #4]
 8003690:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003692:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	7b1b      	ldrb	r3, [r3, #12]
 8003698:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800369a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	7b5b      	ldrb	r3, [r3, #13]
 80036a0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80036a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	7b9b      	ldrb	r3, [r3, #14]
 80036a8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80036aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	7bdb      	ldrb	r3, [r3, #15]
 80036b0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80036b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	7c12      	ldrb	r2, [r2, #16]
 80036b8:	2a00      	cmp	r2, #0
 80036ba:	d102      	bne.n	80036c2 <ETH_SetMACConfig+0x4a>
 80036bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036c0:	e000      	b.n	80036c4 <ETH_SetMACConfig+0x4c>
 80036c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80036c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	7c52      	ldrb	r2, [r2, #17]
 80036ca:	2a00      	cmp	r2, #0
 80036cc:	d102      	bne.n	80036d4 <ETH_SetMACConfig+0x5c>
 80036ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036d2:	e000      	b.n	80036d6 <ETH_SetMACConfig+0x5e>
 80036d4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80036d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	7c9b      	ldrb	r3, [r3, #18]
 80036dc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80036de:	431a      	orrs	r2, r3
               macconf->Speed |
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80036e4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80036ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	7f1b      	ldrb	r3, [r3, #28]
 80036f0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80036f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	7f5b      	ldrb	r3, [r3, #29]
 80036f8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80036fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	7f92      	ldrb	r2, [r2, #30]
 8003700:	2a00      	cmp	r2, #0
 8003702:	d102      	bne.n	800370a <ETH_SetMACConfig+0x92>
 8003704:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003708:	e000      	b.n	800370c <ETH_SetMACConfig+0x94>
 800370a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800370c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	7fdb      	ldrb	r3, [r3, #31]
 8003712:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003714:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	f892 2020 	ldrb.w	r2, [r2, #32]
 800371c:	2a00      	cmp	r2, #0
 800371e:	d102      	bne.n	8003726 <ETH_SetMACConfig+0xae>
 8003720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003724:	e000      	b.n	8003728 <ETH_SetMACConfig+0xb0>
 8003726:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003728:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800372e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003736:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003738:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b56      	ldr	r3, [pc, #344]	; (80038a4 <ETH_SetMACConfig+0x22c>)
 800374a:	4013      	ands	r3, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	68f9      	ldr	r1, [r7, #12]
 8003752:	430b      	orrs	r3, r1
 8003754:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003762:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003764:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800376c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800376e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003776:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003778:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003780:	2a00      	cmp	r2, #0
 8003782:	d102      	bne.n	800378a <ETH_SetMACConfig+0x112>
 8003784:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003788:	e000      	b.n	800378c <ETH_SetMACConfig+0x114>
 800378a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800378c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <ETH_SetMACConfig+0x230>)
 800379e:	4013      	ands	r3, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	68f9      	ldr	r1, [r7, #12]
 80037a6:	430b      	orrs	r3, r1
 80037a8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	4b3a      	ldr	r3, [pc, #232]	; (80038ac <ETH_SetMACConfig+0x234>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	68f9      	ldr	r1, [r7, #12]
 80037ca:	430b      	orrs	r3, r1
 80037cc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037d4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80037da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80037e2:	2a00      	cmp	r2, #0
 80037e4:	d101      	bne.n	80037ea <ETH_SetMACConfig+0x172>
 80037e6:	2280      	movs	r2, #128	; 0x80
 80037e8:	e000      	b.n	80037ec <ETH_SetMACConfig+0x174>
 80037ea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80037ec:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037fe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003802:	4013      	ands	r3, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	68f9      	ldr	r1, [r7, #12]
 800380a:	430b      	orrs	r3, r1
 800380c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003814:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800381c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f023 0103 	bic.w	r1, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	430a      	orrs	r2, r1
 8003836:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003842:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800385e:	2a00      	cmp	r2, #0
 8003860:	d101      	bne.n	8003866 <ETH_SetMACConfig+0x1ee>
 8003862:	2240      	movs	r2, #64	; 0x40
 8003864:	e000      	b.n	8003868 <ETH_SetMACConfig+0x1f0>
 8003866:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003868:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003870:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003872:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800387a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003888:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	430a      	orrs	r2, r1
 8003894:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	00048083 	.word	0x00048083
 80038a8:	c0f88000 	.word	0xc0f88000
 80038ac:	fffffef0 	.word	0xfffffef0

080038b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b38      	ldr	r3, [pc, #224]	; (80039a8 <ETH_SetDMAConfig+0xf8>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	6811      	ldr	r1, [r2, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038d6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	791b      	ldrb	r3, [r3, #4]
 80038dc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80038e2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	7b1b      	ldrb	r3, [r3, #12]
 80038e8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <ETH_SetDMAConfig+0xfc>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	430b      	orrs	r3, r1
 8003904:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003908:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	7b5b      	ldrb	r3, [r3, #13]
 800390e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003920:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <ETH_SetDMAConfig+0x100>)
 8003926:	4013      	ands	r3, r2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	68f9      	ldr	r1, [r7, #12]
 800392e:	430b      	orrs	r3, r1
 8003930:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003934:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	7d1b      	ldrb	r3, [r3, #20]
 8003940:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003942:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	7f5b      	ldrb	r3, [r3, #29]
 8003948:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003956:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <ETH_SetDMAConfig+0x104>)
 800395c:	4013      	ands	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	68f9      	ldr	r1, [r7, #12]
 8003964:	430b      	orrs	r3, r1
 8003966:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800396a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	7f1b      	ldrb	r3, [r3, #28]
 8003972:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003984:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <ETH_SetDMAConfig+0x108>)
 800398a:	4013      	ands	r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	68f9      	ldr	r1, [r7, #12]
 8003992:	430b      	orrs	r3, r1
 8003994:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003998:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	ffff87fd 	.word	0xffff87fd
 80039ac:	ffff2ffe 	.word	0xffff2ffe
 80039b0:	fffec000 	.word	0xfffec000
 80039b4:	ffc0efef 	.word	0xffc0efef
 80039b8:	7fc0ffff 	.word	0x7fc0ffff

080039bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b0a4      	sub	sp, #144	; 0x90
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80039ca:	2300      	movs	r3, #0
 80039cc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80039e0:	2301      	movs	r3, #1
 80039e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80039f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039fc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003a14:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003a18:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003a20:	2300      	movs	r3, #0
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003a36:	2300      	movs	r3, #0
 8003a38:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003a54:	2320      	movs	r3, #32
 8003a56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003a66:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003a6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a70:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003a96:	2300      	movs	r3, #0
 8003a98:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff fde6 	bl	8003678 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003aac:	2301      	movs	r3, #1
 8003aae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003ac6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003aca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003ad0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ad4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003adc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003ae2:	f107 0308 	add.w	r3, r7, #8
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff fee1 	bl	80038b0 <ETH_SetDMAConfig>
}
 8003aee:	bf00      	nop
 8003af0:	3790      	adds	r7, #144	; 0x90
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b085      	sub	sp, #20
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	e01d      	b.n	8003b40 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68d9      	ldr	r1, [r3, #12]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	440b      	add	r3, r1
 8003b14:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2200      	movs	r2, #0
 8003b26:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	3206      	adds	r2, #6
 8003b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d9de      	bls.n	8003b04 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b54:	461a      	mov	r2, r3
 8003b56:	2303      	movs	r3, #3
 8003b58:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b68:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b78:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	e023      	b.n	8003bde <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6919      	ldr	r1, [r3, #16]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	440b      	add	r3, r1
 8003ba6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	3212      	adds	r2, #18
 8003bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d9d8      	bls.n	8003b96 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c1e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c32:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003c52:	4b89      	ldr	r3, [pc, #548]	; (8003e78 <HAL_GPIO_Init+0x234>)
 8003c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c56:	e194      	b.n	8003f82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8186 	beq.w	8003f7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d005      	beq.n	8003c88 <HAL_GPIO_Init+0x44>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d130      	bne.n	8003cea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2203      	movs	r2, #3
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0201 	and.w	r2, r3, #1
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d017      	beq.n	8003d26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	2203      	movs	r2, #3
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d123      	bne.n	8003d7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	08da      	lsrs	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3208      	adds	r2, #8
 8003d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	220f      	movs	r2, #15
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	08da      	lsrs	r2, r3, #3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3208      	adds	r2, #8
 8003d74:	69b9      	ldr	r1, [r7, #24]
 8003d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	2203      	movs	r2, #3
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 0203 	and.w	r2, r3, #3
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80e0 	beq.w	8003f7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dbc:	4b2f      	ldr	r3, [pc, #188]	; (8003e7c <HAL_GPIO_Init+0x238>)
 8003dbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dc2:	4a2e      	ldr	r2, [pc, #184]	; (8003e7c <HAL_GPIO_Init+0x238>)
 8003dc4:	f043 0302 	orr.w	r3, r3, #2
 8003dc8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003dcc:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <HAL_GPIO_Init+0x238>)
 8003dce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dda:	4a29      	ldr	r2, [pc, #164]	; (8003e80 <HAL_GPIO_Init+0x23c>)
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	3302      	adds	r3, #2
 8003de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	220f      	movs	r2, #15
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a20      	ldr	r2, [pc, #128]	; (8003e84 <HAL_GPIO_Init+0x240>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d052      	beq.n	8003eac <HAL_GPIO_Init+0x268>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <HAL_GPIO_Init+0x244>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d031      	beq.n	8003e72 <HAL_GPIO_Init+0x22e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_GPIO_Init+0x248>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d02b      	beq.n	8003e6e <HAL_GPIO_Init+0x22a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <HAL_GPIO_Init+0x24c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d025      	beq.n	8003e6a <HAL_GPIO_Init+0x226>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a1c      	ldr	r2, [pc, #112]	; (8003e94 <HAL_GPIO_Init+0x250>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01f      	beq.n	8003e66 <HAL_GPIO_Init+0x222>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <HAL_GPIO_Init+0x254>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d019      	beq.n	8003e62 <HAL_GPIO_Init+0x21e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <HAL_GPIO_Init+0x258>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <HAL_GPIO_Init+0x21a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <HAL_GPIO_Init+0x25c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00d      	beq.n	8003e5a <HAL_GPIO_Init+0x216>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <HAL_GPIO_Init+0x260>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d007      	beq.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <HAL_GPIO_Init+0x264>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_GPIO_Init+0x20e>
 8003e4e:	2309      	movs	r3, #9
 8003e50:	e02d      	b.n	8003eae <HAL_GPIO_Init+0x26a>
 8003e52:	230a      	movs	r3, #10
 8003e54:	e02b      	b.n	8003eae <HAL_GPIO_Init+0x26a>
 8003e56:	2308      	movs	r3, #8
 8003e58:	e029      	b.n	8003eae <HAL_GPIO_Init+0x26a>
 8003e5a:	2307      	movs	r3, #7
 8003e5c:	e027      	b.n	8003eae <HAL_GPIO_Init+0x26a>
 8003e5e:	2306      	movs	r3, #6
 8003e60:	e025      	b.n	8003eae <HAL_GPIO_Init+0x26a>
 8003e62:	2305      	movs	r3, #5
 8003e64:	e023      	b.n	8003eae <HAL_GPIO_Init+0x26a>
 8003e66:	2304      	movs	r3, #4
 8003e68:	e021      	b.n	8003eae <HAL_GPIO_Init+0x26a>
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e01f      	b.n	8003eae <HAL_GPIO_Init+0x26a>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e01d      	b.n	8003eae <HAL_GPIO_Init+0x26a>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e01b      	b.n	8003eae <HAL_GPIO_Init+0x26a>
 8003e76:	bf00      	nop
 8003e78:	58000080 	.word	0x58000080
 8003e7c:	58024400 	.word	0x58024400
 8003e80:	58000400 	.word	0x58000400
 8003e84:	58020000 	.word	0x58020000
 8003e88:	58020400 	.word	0x58020400
 8003e8c:	58020800 	.word	0x58020800
 8003e90:	58020c00 	.word	0x58020c00
 8003e94:	58021000 	.word	0x58021000
 8003e98:	58021400 	.word	0x58021400
 8003e9c:	58021800 	.word	0x58021800
 8003ea0:	58021c00 	.word	0x58021c00
 8003ea4:	58022000 	.word	0x58022000
 8003ea8:	58022400 	.word	0x58022400
 8003eac:	2300      	movs	r3, #0
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	f002 0203 	and.w	r2, r2, #3
 8003eb4:	0092      	lsls	r2, r2, #2
 8003eb6:	4093      	lsls	r3, r2
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ebe:	4938      	ldr	r1, [pc, #224]	; (8003fa0 <HAL_GPIO_Init+0x35c>)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f47f ae63 	bne.w	8003c58 <HAL_GPIO_Init+0x14>
  }
}
 8003f92:	bf00      	nop
 8003f94:	bf00      	nop
 8003f96:	3724      	adds	r7, #36	; 0x24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	58000400 	.word	0x58000400

08003fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fb4:	787b      	ldrb	r3, [r7, #1]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003fc0:	e003      	b.n	8003fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003fc2:	887b      	ldrh	r3, [r7, #2]
 8003fc4:	041a      	lsls	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	619a      	str	r2, [r3, #24]
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fe8:	887a      	ldrh	r2, [r7, #2]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4013      	ands	r3, r2
 8003fee:	041a      	lsls	r2, r3, #16
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	43d9      	mvns	r1, r3
 8003ff4:	887b      	ldrh	r3, [r7, #2]
 8003ff6:	400b      	ands	r3, r1
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	619a      	str	r2, [r3, #24]
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004014:	4a08      	ldr	r2, [pc, #32]	; (8004038 <HAL_HSEM_FastTake+0x2c>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3320      	adds	r3, #32
 800401a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401e:	4a07      	ldr	r2, [pc, #28]	; (800403c <HAL_HSEM_FastTake+0x30>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	58026400 	.word	0x58026400
 800403c:	80000300 	.word	0x80000300

08004040 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800404a:	4906      	ldr	r1, [pc, #24]	; (8004064 <HAL_HSEM_Release+0x24>)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	58026400 	.word	0x58026400

08004068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e07f      	b.n	800417a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fd fa36 	bl	8001500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2224      	movs	r2, #36	; 0x24
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d107      	bne.n	80040e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	e006      	b.n	80040f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d104      	bne.n	8004102 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004100:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <HAL_I2C_Init+0x11c>)
 800410e:	430b      	orrs	r3, r1
 8004110:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004120:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69d9      	ldr	r1, [r3, #28]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1a      	ldr	r2, [r3, #32]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	02008000 	.word	0x02008000

08004188 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b20      	cmp	r3, #32
 800419c:	d138      	bne.n	8004210 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e032      	b.n	8004212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2224      	movs	r2, #36	; 0x24
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6819      	ldr	r1, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800421e:	b480      	push	{r7}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b20      	cmp	r3, #32
 8004232:	d139      	bne.n	80042a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800423e:	2302      	movs	r3, #2
 8004240:	e033      	b.n	80042aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2224      	movs	r2, #36	; 0x24
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0201 	bic.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004270:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042b8:	b08f      	sub	sp, #60	; 0x3c
 80042ba:	af0a      	add	r7, sp, #40	; 0x28
 80042bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e116      	b.n	80044f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fd faac 	bl	8001840 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2203      	movs	r2, #3
 80042ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f004 f998 	bl	800863c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	687e      	ldr	r6, [r7, #4]
 8004314:	466d      	mov	r5, sp
 8004316:	f106 0410 	add.w	r4, r6, #16
 800431a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800431c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800431e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004322:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004326:	e885 0003 	stmia.w	r5, {r0, r1}
 800432a:	1d33      	adds	r3, r6, #4
 800432c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800432e:	6838      	ldr	r0, [r7, #0]
 8004330:	f004 f916 	bl	8008560 <USB_CoreInit>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e0d7      	b.n	80044f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f004 f986 	bl	800865e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]
 8004356:	e04a      	b.n	80043ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004358:	7bfa      	ldrb	r2, [r7, #15]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4413      	add	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	333d      	adds	r3, #61	; 0x3d
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800436c:	7bfa      	ldrb	r2, [r7, #15]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	333c      	adds	r3, #60	; 0x3c
 800437c:	7bfa      	ldrb	r2, [r7, #15]
 800437e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004380:	7bfa      	ldrb	r2, [r7, #15]
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	b298      	uxth	r0, r3
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	3356      	adds	r3, #86	; 0x56
 8004394:	4602      	mov	r2, r0
 8004396:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004398:	7bfa      	ldrb	r2, [r7, #15]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	3340      	adds	r3, #64	; 0x40
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	3344      	adds	r3, #68	; 0x44
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043c0:	7bfa      	ldrb	r2, [r7, #15]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	3348      	adds	r3, #72	; 0x48
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043d4:	7bfa      	ldrb	r2, [r7, #15]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	334c      	adds	r3, #76	; 0x4c
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	3301      	adds	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d3af      	bcc.n	8004358 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f8:	2300      	movs	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]
 80043fc:	e044      	b.n	8004488 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043fe:	7bfa      	ldrb	r2, [r7, #15]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004414:	7bfa      	ldrb	r2, [r7, #15]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004426:	7bfa      	ldrb	r2, [r7, #15]
 8004428:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800442a:	7bfa      	ldrb	r2, [r7, #15]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004440:	7bfa      	ldrb	r2, [r7, #15]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004456:	7bfa      	ldrb	r2, [r7, #15]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800446c:	7bfa      	ldrb	r2, [r7, #15]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	3301      	adds	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
 8004488:	7bfa      	ldrb	r2, [r7, #15]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	429a      	cmp	r2, r3
 8004490:	d3b5      	bcc.n	80043fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	687e      	ldr	r6, [r7, #4]
 800449a:	466d      	mov	r5, sp
 800449c:	f106 0410 	add.w	r4, r6, #16
 80044a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80044b0:	1d33      	adds	r3, r6, #4
 80044b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044b4:	6838      	ldr	r0, [r7, #0]
 80044b6:	f004 f91f 	bl	80086f8 <USB_DevInit>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e014      	b.n	80044f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d102      	bne.n	80044ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f80b 	bl	8004500 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f004 fadd 	bl	8008aae <USB_DevDisconnect>

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004500 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_PCDEx_ActivateLPM+0x44>)
 8004530:	4313      	orrs	r3, r2
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	10000003 	.word	0x10000003

08004548 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004550:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	2b06      	cmp	r3, #6
 800455a:	d00a      	beq.n	8004572 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800455c:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	429a      	cmp	r2, r3
 8004568:	d001      	beq.n	800456e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e040      	b.n	80045f0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	e03e      	b.n	80045f0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004572:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800457a:	491f      	ldr	r1, [pc, #124]	; (80045f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4313      	orrs	r3, r2
 8004580:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004582:	f7fe fc7f 	bl	8002e84 <HAL_GetTick>
 8004586:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004588:	e009      	b.n	800459e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800458a:	f7fe fc7b 	bl	8002e84 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004598:	d901      	bls.n	800459e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e028      	b.n	80045f0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800459e:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	d1ee      	bne.n	800458a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b1e      	cmp	r3, #30
 80045b0:	d008      	beq.n	80045c4 <HAL_PWREx_ConfigSupply+0x7c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b2e      	cmp	r3, #46	; 0x2e
 80045b6:	d005      	beq.n	80045c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b1d      	cmp	r3, #29
 80045bc:	d002      	beq.n	80045c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b2d      	cmp	r3, #45	; 0x2d
 80045c2:	d114      	bne.n	80045ee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80045c4:	f7fe fc5e 	bl	8002e84 <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80045ca:	e009      	b.n	80045e0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045cc:	f7fe fc5a 	bl	8002e84 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045da:	d901      	bls.n	80045e0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e007      	b.n	80045f0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ec:	d1ee      	bne.n	80045cc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	58024800 	.word	0x58024800

080045fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800460a:	60d3      	str	r3, [r2, #12]
}
 800460c:	bf00      	nop
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	58024800 	.word	0x58024800

0800461c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af02      	add	r7, sp, #8
 8004622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004624:	f7fe fc2e 	bl	8002e84 <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e05f      	b.n	80046f4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d107      	bne.n	8004650 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fc ffc7 	bl	80015d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004646:	f241 3188 	movw	r1, #5000	; 0x1388
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f85a 	bl	8004704 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	3b01      	subs	r3, #1
 8004660:	021a      	lsls	r2, r3, #8
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	2120      	movs	r1, #32
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f852 	bl	8004720 <QSPI_WaitFlagStateUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004680:	7afb      	ldrb	r3, [r7, #11]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d135      	bne.n	80046f2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_QSPI_Init+0xe0>)
 800468e:	4013      	ands	r3, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6852      	ldr	r2, [r2, #4]
 8004694:	0611      	lsls	r1, r2, #24
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68d2      	ldr	r2, [r2, #12]
 800469a:	4311      	orrs	r1, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	69d2      	ldr	r2, [r2, #28]
 80046a0:	4311      	orrs	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6a12      	ldr	r2, [r2, #32]
 80046a6:	4311      	orrs	r1, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	430b      	orrs	r3, r1
 80046ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <HAL_QSPI_Init+0xe4>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6912      	ldr	r2, [r2, #16]
 80046be:	0411      	lsls	r1, r2, #16
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6952      	ldr	r2, [r2, #20]
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6992      	ldr	r2, [r2, #24]
 80046ca:	4311      	orrs	r1, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80046f2:	7afb      	ldrb	r3, [r7, #11]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	00ffff2f 	.word	0x00ffff2f
 8004700:	ffe0f8fe 	.word	0xffe0f8fe

08004704 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004730:	e01a      	b.n	8004768 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004738:	d016      	beq.n	8004768 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473a:	f7fe fba3 	bl	8002e84 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	429a      	cmp	r2, r3
 8004748:	d302      	bcc.n	8004750 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10b      	bne.n	8004768 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2204      	movs	r2, #4
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	f043 0201 	orr.w	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e00e      	b.n	8004786 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf14      	ite	ne
 8004776:	2301      	movne	r3, #1
 8004778:	2300      	moveq	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	429a      	cmp	r2, r3
 8004782:	d1d6      	bne.n	8004732 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	; 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f000 bc48 	b.w	8005034 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8088 	beq.w	80048c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b2:	4b99      	ldr	r3, [pc, #612]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047bc:	4b96      	ldr	r3, [pc, #600]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d007      	beq.n	80047d8 <HAL_RCC_OscConfig+0x48>
 80047c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ca:	2b18      	cmp	r3, #24
 80047cc:	d111      	bne.n	80047f2 <HAL_RCC_OscConfig+0x62>
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d10c      	bne.n	80047f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d8:	4b8f      	ldr	r3, [pc, #572]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d06d      	beq.n	80048c0 <HAL_RCC_OscConfig+0x130>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d169      	bne.n	80048c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f000 bc21 	b.w	8005034 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fa:	d106      	bne.n	800480a <HAL_RCC_OscConfig+0x7a>
 80047fc:	4b86      	ldr	r3, [pc, #536]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a85      	ldr	r2, [pc, #532]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	e02e      	b.n	8004868 <HAL_RCC_OscConfig+0xd8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10c      	bne.n	800482c <HAL_RCC_OscConfig+0x9c>
 8004812:	4b81      	ldr	r3, [pc, #516]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a80      	ldr	r2, [pc, #512]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b7e      	ldr	r3, [pc, #504]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a7d      	ldr	r2, [pc, #500]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e01d      	b.n	8004868 <HAL_RCC_OscConfig+0xd8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0xc0>
 8004836:	4b78      	ldr	r3, [pc, #480]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a77      	ldr	r2, [pc, #476]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 800483c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	4b75      	ldr	r3, [pc, #468]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a74      	ldr	r2, [pc, #464]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e00b      	b.n	8004868 <HAL_RCC_OscConfig+0xd8>
 8004850:	4b71      	ldr	r3, [pc, #452]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a70      	ldr	r2, [pc, #448]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	4b6e      	ldr	r3, [pc, #440]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a6d      	ldr	r2, [pc, #436]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d013      	beq.n	8004898 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fe fb08 	bl	8002e84 <HAL_GetTick>
 8004874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004878:	f7fe fb04 	bl	8002e84 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	; 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e3d4      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800488a:	4b63      	ldr	r3, [pc, #396]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0xe8>
 8004896:	e014      	b.n	80048c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fe faf4 	bl	8002e84 <HAL_GetTick>
 800489c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a0:	f7fe faf0 	bl	8002e84 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	; 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e3c0      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048b2:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x110>
 80048be:	e000      	b.n	80048c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80ca 	beq.w	8004a64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d0:	4b51      	ldr	r3, [pc, #324]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048da:	4b4f      	ldr	r3, [pc, #316]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <HAL_RCC_OscConfig+0x166>
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	2b18      	cmp	r3, #24
 80048ea:	d156      	bne.n	800499a <HAL_RCC_OscConfig+0x20a>
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d151      	bne.n	800499a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048f6:	4b48      	ldr	r3, [pc, #288]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_RCC_OscConfig+0x17e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e392      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800490e:	4b42      	ldr	r3, [pc, #264]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 0219 	bic.w	r2, r3, #25
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	493f      	ldr	r1, [pc, #252]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 800491c:	4313      	orrs	r3, r2
 800491e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004920:	f7fe fab0 	bl	8002e84 <HAL_GetTick>
 8004924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004928:	f7fe faac 	bl	8002e84 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e37c      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004946:	f7fe facd 	bl	8002ee4 <HAL_GetREVID>
 800494a:	4603      	mov	r3, r0
 800494c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004950:	4293      	cmp	r3, r2
 8004952:	d817      	bhi.n	8004984 <HAL_RCC_OscConfig+0x1f4>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d108      	bne.n	800496e <HAL_RCC_OscConfig+0x1de>
 800495c:	4b2e      	ldr	r3, [pc, #184]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004964:	4a2c      	ldr	r2, [pc, #176]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800496c:	e07a      	b.n	8004a64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496e:	4b2a      	ldr	r3, [pc, #168]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	031b      	lsls	r3, r3, #12
 800497c:	4926      	ldr	r1, [pc, #152]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 800497e:	4313      	orrs	r3, r2
 8004980:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004982:	e06f      	b.n	8004a64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004984:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	061b      	lsls	r3, r3, #24
 8004992:	4921      	ldr	r1, [pc, #132]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004994:	4313      	orrs	r3, r2
 8004996:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004998:	e064      	b.n	8004a64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d047      	beq.n	8004a32 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049a2:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 0219 	bic.w	r2, r3, #25
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	491a      	ldr	r1, [pc, #104]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fe fa66 	bl	8002e84 <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049bc:	f7fe fa62 	bl	8002e84 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e332      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049da:	f7fe fa83 	bl	8002ee4 <HAL_GetREVID>
 80049de:	4603      	mov	r3, r0
 80049e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d819      	bhi.n	8004a1c <HAL_RCC_OscConfig+0x28c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d108      	bne.n	8004a02 <HAL_RCC_OscConfig+0x272>
 80049f0:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80049f8:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 80049fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049fe:	6053      	str	r3, [r2, #4]
 8004a00:	e030      	b.n	8004a64 <HAL_RCC_OscConfig+0x2d4>
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	031b      	lsls	r3, r3, #12
 8004a10:	4901      	ldr	r1, [pc, #4]	; (8004a18 <HAL_RCC_OscConfig+0x288>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	604b      	str	r3, [r1, #4]
 8004a16:	e025      	b.n	8004a64 <HAL_RCC_OscConfig+0x2d4>
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	4b9a      	ldr	r3, [pc, #616]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	061b      	lsls	r3, r3, #24
 8004a2a:	4997      	ldr	r1, [pc, #604]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	604b      	str	r3, [r1, #4]
 8004a30:	e018      	b.n	8004a64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a32:	4b95      	ldr	r3, [pc, #596]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a94      	ldr	r2, [pc, #592]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004a38:	f023 0301 	bic.w	r3, r3, #1
 8004a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3e:	f7fe fa21 	bl	8002e84 <HAL_GetTick>
 8004a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a46:	f7fe fa1d 	bl	8002e84 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e2ed      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a58:	4b8b      	ldr	r3, [pc, #556]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f0      	bne.n	8004a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80a9 	beq.w	8004bc4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a72:	4b85      	ldr	r3, [pc, #532]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a7c:	4b82      	ldr	r3, [pc, #520]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d007      	beq.n	8004a98 <HAL_RCC_OscConfig+0x308>
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b18      	cmp	r3, #24
 8004a8c:	d13a      	bne.n	8004b04 <HAL_RCC_OscConfig+0x374>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d135      	bne.n	8004b04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a98:	4b7b      	ldr	r3, [pc, #492]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x320>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b80      	cmp	r3, #128	; 0x80
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e2c1      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ab0:	f7fe fa18 	bl	8002ee4 <HAL_GetREVID>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f241 0203 	movw	r2, #4099	; 0x1003
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d817      	bhi.n	8004aee <HAL_RCC_OscConfig+0x35e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d108      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x348>
 8004ac6:	4b70      	ldr	r3, [pc, #448]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ace:	4a6e      	ldr	r2, [pc, #440]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004ad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ad4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ad6:	e075      	b.n	8004bc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ad8:	4b6b      	ldr	r3, [pc, #428]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	069b      	lsls	r3, r3, #26
 8004ae6:	4968      	ldr	r1, [pc, #416]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004aec:	e06a      	b.n	8004bc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004aee:	4b66      	ldr	r3, [pc, #408]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	061b      	lsls	r3, r3, #24
 8004afc:	4962      	ldr	r1, [pc, #392]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b02:	e05f      	b.n	8004bc4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d042      	beq.n	8004b92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004b0c:	4b5e      	ldr	r3, [pc, #376]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a5d      	ldr	r2, [pc, #372]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fe f9b4 	bl	8002e84 <HAL_GetTick>
 8004b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b20:	f7fe f9b0 	bl	8002e84 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e280      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b32:	4b55      	ldr	r3, [pc, #340]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b3e:	f7fe f9d1 	bl	8002ee4 <HAL_GetREVID>
 8004b42:	4603      	mov	r3, r0
 8004b44:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d817      	bhi.n	8004b7c <HAL_RCC_OscConfig+0x3ec>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d108      	bne.n	8004b66 <HAL_RCC_OscConfig+0x3d6>
 8004b54:	4b4c      	ldr	r3, [pc, #304]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b5c:	4a4a      	ldr	r2, [pc, #296]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004b5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b62:	6053      	str	r3, [r2, #4]
 8004b64:	e02e      	b.n	8004bc4 <HAL_RCC_OscConfig+0x434>
 8004b66:	4b48      	ldr	r3, [pc, #288]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	069b      	lsls	r3, r3, #26
 8004b74:	4944      	ldr	r1, [pc, #272]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	604b      	str	r3, [r1, #4]
 8004b7a:	e023      	b.n	8004bc4 <HAL_RCC_OscConfig+0x434>
 8004b7c:	4b42      	ldr	r3, [pc, #264]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	061b      	lsls	r3, r3, #24
 8004b8a:	493f      	ldr	r1, [pc, #252]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60cb      	str	r3, [r1, #12]
 8004b90:	e018      	b.n	8004bc4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b92:	4b3d      	ldr	r3, [pc, #244]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a3c      	ldr	r2, [pc, #240]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004b98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9e:	f7fe f971 	bl	8002e84 <HAL_GetTick>
 8004ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ba6:	f7fe f96d 	bl	8002e84 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e23d      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bb8:	4b33      	ldr	r3, [pc, #204]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f0      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d036      	beq.n	8004c3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d019      	beq.n	8004c0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd8:	4b2b      	ldr	r3, [pc, #172]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bdc:	4a2a      	ldr	r2, [pc, #168]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be4:	f7fe f94e 	bl	8002e84 <HAL_GetTick>
 8004be8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bec:	f7fe f94a 	bl	8002e84 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e21a      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bfe:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x45c>
 8004c0a:	e018      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c10:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c18:	f7fe f934 	bl	8002e84 <HAL_GetTick>
 8004c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c20:	f7fe f930 	bl	8002e84 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e200      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c32:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d039      	beq.n	8004cbe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01c      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c52:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a0c      	ldr	r2, [pc, #48]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004c58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c5e:	f7fe f911 	bl	8002e84 <HAL_GetTick>
 8004c62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c66:	f7fe f90d 	bl	8002e84 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e1dd      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <HAL_RCC_OscConfig+0x4f8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_OscConfig+0x4d6>
 8004c84:	e01b      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
 8004c86:	bf00      	nop
 8004c88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c8c:	4b9b      	ldr	r3, [pc, #620]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a9a      	ldr	r2, [pc, #616]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c98:	f7fe f8f4 	bl	8002e84 <HAL_GetTick>
 8004c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ca0:	f7fe f8f0 	bl	8002e84 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e1c0      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cb2:	4b92      	ldr	r3, [pc, #584]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8081 	beq.w	8004dce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ccc:	4b8c      	ldr	r3, [pc, #560]	; (8004f00 <HAL_RCC_OscConfig+0x770>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a8b      	ldr	r2, [pc, #556]	; (8004f00 <HAL_RCC_OscConfig+0x770>)
 8004cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cd8:	f7fe f8d4 	bl	8002e84 <HAL_GetTick>
 8004cdc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce0:	f7fe f8d0 	bl	8002e84 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b64      	cmp	r3, #100	; 0x64
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e1a0      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cf2:	4b83      	ldr	r3, [pc, #524]	; (8004f00 <HAL_RCC_OscConfig+0x770>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d106      	bne.n	8004d14 <HAL_RCC_OscConfig+0x584>
 8004d06:	4b7d      	ldr	r3, [pc, #500]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	4a7c      	ldr	r2, [pc, #496]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	6713      	str	r3, [r2, #112]	; 0x70
 8004d12:	e02d      	b.n	8004d70 <HAL_RCC_OscConfig+0x5e0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10c      	bne.n	8004d36 <HAL_RCC_OscConfig+0x5a6>
 8004d1c:	4b77      	ldr	r3, [pc, #476]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d20:	4a76      	ldr	r2, [pc, #472]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	6713      	str	r3, [r2, #112]	; 0x70
 8004d28:	4b74      	ldr	r3, [pc, #464]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2c:	4a73      	ldr	r2, [pc, #460]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d2e:	f023 0304 	bic.w	r3, r3, #4
 8004d32:	6713      	str	r3, [r2, #112]	; 0x70
 8004d34:	e01c      	b.n	8004d70 <HAL_RCC_OscConfig+0x5e0>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x5c8>
 8004d3e:	4b6f      	ldr	r3, [pc, #444]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	4a6e      	ldr	r2, [pc, #440]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d44:	f043 0304 	orr.w	r3, r3, #4
 8004d48:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4a:	4b6c      	ldr	r3, [pc, #432]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	4a6b      	ldr	r2, [pc, #428]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	6713      	str	r3, [r2, #112]	; 0x70
 8004d56:	e00b      	b.n	8004d70 <HAL_RCC_OscConfig+0x5e0>
 8004d58:	4b68      	ldr	r3, [pc, #416]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	4a67      	ldr	r2, [pc, #412]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d5e:	f023 0301 	bic.w	r3, r3, #1
 8004d62:	6713      	str	r3, [r2, #112]	; 0x70
 8004d64:	4b65      	ldr	r3, [pc, #404]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d68:	4a64      	ldr	r2, [pc, #400]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d6a:	f023 0304 	bic.w	r3, r3, #4
 8004d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d015      	beq.n	8004da4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d78:	f7fe f884 	bl	8002e84 <HAL_GetTick>
 8004d7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d80:	f7fe f880 	bl	8002e84 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e14e      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d96:	4b59      	ldr	r3, [pc, #356]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0ee      	beq.n	8004d80 <HAL_RCC_OscConfig+0x5f0>
 8004da2:	e014      	b.n	8004dce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7fe f86e 	bl	8002e84 <HAL_GetTick>
 8004da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dac:	f7fe f86a 	bl	8002e84 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e138      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004dc2:	4b4e      	ldr	r3, [pc, #312]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1ee      	bne.n	8004dac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 812d 	beq.w	8005032 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004dd8:	4b48      	ldr	r3, [pc, #288]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004de0:	2b18      	cmp	r3, #24
 8004de2:	f000 80bd 	beq.w	8004f60 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	f040 809e 	bne.w	8004f2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df0:	4b42      	ldr	r3, [pc, #264]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a41      	ldr	r2, [pc, #260]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fe f842 	bl	8002e84 <HAL_GetTick>
 8004e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fe f83e 	bl	8002e84 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e10e      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e16:	4b39      	ldr	r3, [pc, #228]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e22:	4b36      	ldr	r3, [pc, #216]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e26:	4b37      	ldr	r3, [pc, #220]	; (8004f04 <HAL_RCC_OscConfig+0x774>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e32:	0112      	lsls	r2, r2, #4
 8004e34:	430a      	orrs	r2, r1
 8004e36:	4931      	ldr	r1, [pc, #196]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	628b      	str	r3, [r1, #40]	; 0x28
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	3b01      	subs	r3, #1
 8004e42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	025b      	lsls	r3, r3, #9
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	3b01      	subs	r3, #1
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	3b01      	subs	r3, #1
 8004e66:	061b      	lsls	r3, r3, #24
 8004e68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e6c:	4923      	ldr	r1, [pc, #140]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004e72:	4b22      	ldr	r3, [pc, #136]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	4a21      	ldr	r2, [pc, #132]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e7e:	4b1f      	ldr	r3, [pc, #124]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e82:	4b21      	ldr	r3, [pc, #132]	; (8004f08 <HAL_RCC_OscConfig+0x778>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e8a:	00d2      	lsls	r2, r2, #3
 8004e8c:	491b      	ldr	r1, [pc, #108]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e92:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	f023 020c 	bic.w	r2, r3, #12
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	4917      	ldr	r1, [pc, #92]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ea4:	4b15      	ldr	r3, [pc, #84]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	f023 0202 	bic.w	r2, r3, #2
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb0:	4912      	ldr	r1, [pc, #72]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004eb6:	4b11      	ldr	r3, [pc, #68]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	4a10      	ldr	r2, [pc, #64]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ece:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004eda:	4b08      	ldr	r3, [pc, #32]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	4a07      	ldr	r2, [pc, #28]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ee6:	4b05      	ldr	r3, [pc, #20]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a04      	ldr	r2, [pc, #16]	; (8004efc <HAL_RCC_OscConfig+0x76c>)
 8004eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef2:	f7fd ffc7 	bl	8002e84 <HAL_GetTick>
 8004ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ef8:	e011      	b.n	8004f1e <HAL_RCC_OscConfig+0x78e>
 8004efa:	bf00      	nop
 8004efc:	58024400 	.word	0x58024400
 8004f00:	58024800 	.word	0x58024800
 8004f04:	fffffc0c 	.word	0xfffffc0c
 8004f08:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0c:	f7fd ffba 	bl	8002e84 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e08a      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f1e:	4b47      	ldr	r3, [pc, #284]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f0      	beq.n	8004f0c <HAL_RCC_OscConfig+0x77c>
 8004f2a:	e082      	b.n	8005032 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2c:	4b43      	ldr	r3, [pc, #268]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a42      	ldr	r2, [pc, #264]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 8004f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fd ffa4 	bl	8002e84 <HAL_GetTick>
 8004f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f40:	f7fd ffa0 	bl	8002e84 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e070      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f52:	4b3a      	ldr	r3, [pc, #232]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x7b0>
 8004f5e:	e068      	b.n	8005032 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f60:	4b36      	ldr	r3, [pc, #216]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f66:	4b35      	ldr	r3, [pc, #212]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d031      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f003 0203 	and.w	r2, r3, #3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d12a      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d122      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d11a      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	0a5b      	lsrs	r3, r3, #9
 8004fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d111      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	0c1b      	lsrs	r3, r3, #16
 8004fb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d108      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	0e1b      	lsrs	r3, r3, #24
 8004fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d001      	beq.n	8004fdc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e02b      	b.n	8005034 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004fdc:	4b17      	ldr	r3, [pc, #92]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	08db      	lsrs	r3, r3, #3
 8004fe2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fe6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d01f      	beq.n	8005032 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	4a11      	ldr	r2, [pc, #68]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 8004ff8:	f023 0301 	bic.w	r3, r3, #1
 8004ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ffe:	f7fd ff41 	bl	8002e84 <HAL_GetTick>
 8005002:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005004:	bf00      	nop
 8005006:	f7fd ff3d 	bl	8002e84 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	4293      	cmp	r3, r2
 8005010:	d0f9      	beq.n	8005006 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005012:	4b0a      	ldr	r3, [pc, #40]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 8005014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005016:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <HAL_RCC_OscConfig+0x8b0>)
 8005018:	4013      	ands	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800501e:	00d2      	lsls	r2, r2, #3
 8005020:	4906      	ldr	r1, [pc, #24]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 8005022:	4313      	orrs	r3, r2
 8005024:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	4a04      	ldr	r2, [pc, #16]	; (800503c <HAL_RCC_OscConfig+0x8ac>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3730      	adds	r7, #48	; 0x30
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	58024400 	.word	0x58024400
 8005040:	ffff0007 	.word	0xffff0007

08005044 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e19c      	b.n	8005392 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005058:	4b8a      	ldr	r3, [pc, #552]	; (8005284 <HAL_RCC_ClockConfig+0x240>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d910      	bls.n	8005088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005066:	4b87      	ldr	r3, [pc, #540]	; (8005284 <HAL_RCC_ClockConfig+0x240>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 020f 	bic.w	r2, r3, #15
 800506e:	4985      	ldr	r1, [pc, #532]	; (8005284 <HAL_RCC_ClockConfig+0x240>)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005076:	4b83      	ldr	r3, [pc, #524]	; (8005284 <HAL_RCC_ClockConfig+0x240>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e184      	b.n	8005392 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d010      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	4b7b      	ldr	r3, [pc, #492]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d908      	bls.n	80050b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050a4:	4b78      	ldr	r3, [pc, #480]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	4975      	ldr	r1, [pc, #468]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d010      	beq.n	80050e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	4b70      	ldr	r3, [pc, #448]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d908      	bls.n	80050e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050d2:	4b6d      	ldr	r3, [pc, #436]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	496a      	ldr	r1, [pc, #424]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d010      	beq.n	8005112 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699a      	ldr	r2, [r3, #24]
 80050f4:	4b64      	ldr	r3, [pc, #400]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d908      	bls.n	8005112 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005100:	4b61      	ldr	r3, [pc, #388]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	495e      	ldr	r1, [pc, #376]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 800510e:	4313      	orrs	r3, r2
 8005110:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b00      	cmp	r3, #0
 800511c:	d010      	beq.n	8005140 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	4b59      	ldr	r3, [pc, #356]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800512a:	429a      	cmp	r2, r3
 800512c:	d908      	bls.n	8005140 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800512e:	4b56      	ldr	r3, [pc, #344]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	4953      	ldr	r1, [pc, #332]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 800513c:	4313      	orrs	r3, r2
 800513e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d010      	beq.n	800516e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	4b4d      	ldr	r3, [pc, #308]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	429a      	cmp	r2, r3
 800515a:	d908      	bls.n	800516e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800515c:	4b4a      	ldr	r3, [pc, #296]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f023 020f 	bic.w	r2, r3, #15
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4947      	ldr	r1, [pc, #284]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 800516a:	4313      	orrs	r3, r2
 800516c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d055      	beq.n	8005226 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800517a:	4b43      	ldr	r3, [pc, #268]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	4940      	ldr	r1, [pc, #256]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 8005188:	4313      	orrs	r3, r2
 800518a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d107      	bne.n	80051a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005194:	4b3c      	ldr	r3, [pc, #240]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d121      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0f6      	b.n	8005392 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051ac:	4b36      	ldr	r3, [pc, #216]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d115      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0ea      	b.n	8005392 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d107      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051c4:	4b30      	ldr	r3, [pc, #192]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d109      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0de      	b.n	8005392 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051d4:	4b2c      	ldr	r3, [pc, #176]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0d6      	b.n	8005392 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051e4:	4b28      	ldr	r3, [pc, #160]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f023 0207 	bic.w	r2, r3, #7
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4925      	ldr	r1, [pc, #148]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f6:	f7fd fe45 	bl	8002e84 <HAL_GetTick>
 80051fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fc:	e00a      	b.n	8005214 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051fe:	f7fd fe41 	bl	8002e84 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	f241 3288 	movw	r2, #5000	; 0x1388
 800520c:	4293      	cmp	r3, r2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e0be      	b.n	8005392 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005214:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	429a      	cmp	r2, r3
 8005224:	d1eb      	bne.n	80051fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d010      	beq.n	8005254 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	429a      	cmp	r2, r3
 8005240:	d208      	bcs.n	8005254 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005242:	4b11      	ldr	r3, [pc, #68]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	f023 020f 	bic.w	r2, r3, #15
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	490e      	ldr	r1, [pc, #56]	; (8005288 <HAL_RCC_ClockConfig+0x244>)
 8005250:	4313      	orrs	r3, r2
 8005252:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <HAL_RCC_ClockConfig+0x240>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d214      	bcs.n	800528c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005262:	4b08      	ldr	r3, [pc, #32]	; (8005284 <HAL_RCC_ClockConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 020f 	bic.w	r2, r3, #15
 800526a:	4906      	ldr	r1, [pc, #24]	; (8005284 <HAL_RCC_ClockConfig+0x240>)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4313      	orrs	r3, r2
 8005270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005272:	4b04      	ldr	r3, [pc, #16]	; (8005284 <HAL_RCC_ClockConfig+0x240>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d005      	beq.n	800528c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e086      	b.n	8005392 <HAL_RCC_ClockConfig+0x34e>
 8005284:	52002000 	.word	0x52002000
 8005288:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d010      	beq.n	80052ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	4b3f      	ldr	r3, [pc, #252]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d208      	bcs.n	80052ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052a8:	4b3c      	ldr	r3, [pc, #240]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	4939      	ldr	r1, [pc, #228]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d010      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695a      	ldr	r2, [r3, #20]
 80052ca:	4b34      	ldr	r3, [pc, #208]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d208      	bcs.n	80052e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052d6:	4b31      	ldr	r3, [pc, #196]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	492e      	ldr	r1, [pc, #184]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d010      	beq.n	8005316 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699a      	ldr	r2, [r3, #24]
 80052f8:	4b28      	ldr	r3, [pc, #160]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005300:	429a      	cmp	r2, r3
 8005302:	d208      	bcs.n	8005316 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005304:	4b25      	ldr	r3, [pc, #148]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	4922      	ldr	r1, [pc, #136]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 8005312:	4313      	orrs	r3, r2
 8005314:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b00      	cmp	r3, #0
 8005320:	d010      	beq.n	8005344 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69da      	ldr	r2, [r3, #28]
 8005326:	4b1d      	ldr	r3, [pc, #116]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800532e:	429a      	cmp	r2, r3
 8005330:	d208      	bcs.n	8005344 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005332:	4b1a      	ldr	r3, [pc, #104]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	4917      	ldr	r1, [pc, #92]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 8005340:	4313      	orrs	r3, r2
 8005342:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005344:	f000 f834 	bl	80053b0 <HAL_RCC_GetSysClockFreq>
 8005348:	4602      	mov	r2, r0
 800534a:	4b14      	ldr	r3, [pc, #80]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	4912      	ldr	r1, [pc, #72]	; (80053a0 <HAL_RCC_ClockConfig+0x35c>)
 8005356:	5ccb      	ldrb	r3, [r1, r3]
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
 8005360:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005362:	4b0e      	ldr	r3, [pc, #56]	; (800539c <HAL_RCC_ClockConfig+0x358>)
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <HAL_RCC_ClockConfig+0x35c>)
 800536c:	5cd3      	ldrb	r3, [r2, r3]
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
 8005378:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <HAL_RCC_ClockConfig+0x360>)
 800537a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800537c:	4a0a      	ldr	r2, [pc, #40]	; (80053a8 <HAL_RCC_ClockConfig+0x364>)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <HAL_RCC_ClockConfig+0x368>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7fd fd32 	bl	8002df0 <HAL_InitTick>
 800538c:	4603      	mov	r3, r0
 800538e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	58024400 	.word	0x58024400
 80053a0:	080096a8 	.word	0x080096a8
 80053a4:	24000004 	.word	0x24000004
 80053a8:	24000000 	.word	0x24000000
 80053ac:	2400001c 	.word	0x2400001c

080053b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b089      	sub	sp, #36	; 0x24
 80053b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053b6:	4bb3      	ldr	r3, [pc, #716]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053be:	2b18      	cmp	r3, #24
 80053c0:	f200 8155 	bhi.w	800566e <HAL_RCC_GetSysClockFreq+0x2be>
 80053c4:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80053c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ca:	bf00      	nop
 80053cc:	08005431 	.word	0x08005431
 80053d0:	0800566f 	.word	0x0800566f
 80053d4:	0800566f 	.word	0x0800566f
 80053d8:	0800566f 	.word	0x0800566f
 80053dc:	0800566f 	.word	0x0800566f
 80053e0:	0800566f 	.word	0x0800566f
 80053e4:	0800566f 	.word	0x0800566f
 80053e8:	0800566f 	.word	0x0800566f
 80053ec:	08005457 	.word	0x08005457
 80053f0:	0800566f 	.word	0x0800566f
 80053f4:	0800566f 	.word	0x0800566f
 80053f8:	0800566f 	.word	0x0800566f
 80053fc:	0800566f 	.word	0x0800566f
 8005400:	0800566f 	.word	0x0800566f
 8005404:	0800566f 	.word	0x0800566f
 8005408:	0800566f 	.word	0x0800566f
 800540c:	0800545d 	.word	0x0800545d
 8005410:	0800566f 	.word	0x0800566f
 8005414:	0800566f 	.word	0x0800566f
 8005418:	0800566f 	.word	0x0800566f
 800541c:	0800566f 	.word	0x0800566f
 8005420:	0800566f 	.word	0x0800566f
 8005424:	0800566f 	.word	0x0800566f
 8005428:	0800566f 	.word	0x0800566f
 800542c:	08005463 	.word	0x08005463
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005430:	4b94      	ldr	r3, [pc, #592]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d009      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800543c:	4b91      	ldr	r3, [pc, #580]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	08db      	lsrs	r3, r3, #3
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	4a90      	ldr	r2, [pc, #576]	; (8005688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005448:	fa22 f303 	lsr.w	r3, r2, r3
 800544c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800544e:	e111      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005450:	4b8d      	ldr	r3, [pc, #564]	; (8005688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005452:	61bb      	str	r3, [r7, #24]
      break;
 8005454:	e10e      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005456:	4b8d      	ldr	r3, [pc, #564]	; (800568c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005458:	61bb      	str	r3, [r7, #24]
      break;
 800545a:	e10b      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800545c:	4b8c      	ldr	r3, [pc, #560]	; (8005690 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800545e:	61bb      	str	r3, [r7, #24]
      break;
 8005460:	e108      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005462:	4b88      	ldr	r3, [pc, #544]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800546c:	4b85      	ldr	r3, [pc, #532]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	091b      	lsrs	r3, r3, #4
 8005472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005476:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005478:	4b82      	ldr	r3, [pc, #520]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005482:	4b80      	ldr	r3, [pc, #512]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	08db      	lsrs	r3, r3, #3
 8005488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80e1 	beq.w	8005668 <HAL_RCC_GetSysClockFreq+0x2b8>
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	f000 8083 	beq.w	80055b4 <HAL_RCC_GetSysClockFreq+0x204>
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	f200 80a1 	bhi.w	80055f8 <HAL_RCC_GetSysClockFreq+0x248>
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_RCC_GetSysClockFreq+0x114>
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d056      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0x1c0>
 80054c2:	e099      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054c4:	4b6f      	ldr	r3, [pc, #444]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d02d      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054d0:	4b6c      	ldr	r3, [pc, #432]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	08db      	lsrs	r3, r3, #3
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	4a6b      	ldr	r2, [pc, #428]	; (8005688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
 80054e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	ee07 3a90 	vmov	s15, r3
 80054e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054fa:	4b62      	ldr	r3, [pc, #392]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800550a:	ed97 6a02 	vldr	s12, [r7, #8]
 800550e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800551a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800551e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005526:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800552a:	e087      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005536:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005698 <HAL_RCC_GetSysClockFreq+0x2e8>
 800553a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800553e:	4b51      	ldr	r3, [pc, #324]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800554e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005552:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800555a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800555e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800556e:	e065      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800569c <HAL_RCC_GetSysClockFreq+0x2ec>
 800557e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005582:	4b40      	ldr	r3, [pc, #256]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005592:	ed97 6a02 	vldr	s12, [r7, #8]
 8005596:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005694 <HAL_RCC_GetSysClockFreq+0x2e4>
 800559a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800559e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055b2:	e043      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80056a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80055c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055c6:	4b2f      	ldr	r3, [pc, #188]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005694 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055f6:	e021      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	ee07 3a90 	vmov	s15, r3
 80055fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005602:	eddf 6a26 	vldr	s13, [pc, #152]	; 800569c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560a:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561a:	ed97 6a02 	vldr	s12, [r7, #8]
 800561e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800562e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800563a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800563c:	4b11      	ldr	r3, [pc, #68]	; (8005684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	0a5b      	lsrs	r3, r3, #9
 8005642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005646:	3301      	adds	r3, #1
 8005648:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	ee07 3a90 	vmov	s15, r3
 8005650:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005654:	edd7 6a07 	vldr	s13, [r7, #28]
 8005658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800565c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005660:	ee17 3a90 	vmov	r3, s15
 8005664:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005666:	e005      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	61bb      	str	r3, [r7, #24]
      break;
 800566c:	e002      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800566e:	4b07      	ldr	r3, [pc, #28]	; (800568c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005670:	61bb      	str	r3, [r7, #24]
      break;
 8005672:	bf00      	nop
  }

  return sysclockfreq;
 8005674:	69bb      	ldr	r3, [r7, #24]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3724      	adds	r7, #36	; 0x24
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	58024400 	.word	0x58024400
 8005688:	03d09000 	.word	0x03d09000
 800568c:	003d0900 	.word	0x003d0900
 8005690:	007a1200 	.word	0x007a1200
 8005694:	46000000 	.word	0x46000000
 8005698:	4c742400 	.word	0x4c742400
 800569c:	4a742400 	.word	0x4a742400
 80056a0:	4af42400 	.word	0x4af42400

080056a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80056aa:	f7ff fe81 	bl	80053b0 <HAL_RCC_GetSysClockFreq>
 80056ae:	4602      	mov	r2, r0
 80056b0:	4b10      	ldr	r3, [pc, #64]	; (80056f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	0a1b      	lsrs	r3, r3, #8
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	490f      	ldr	r1, [pc, #60]	; (80056f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80056bc:	5ccb      	ldrb	r3, [r1, r3]
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	fa22 f303 	lsr.w	r3, r2, r3
 80056c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056c8:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80056d2:	5cd3      	ldrb	r3, [r2, r3]
 80056d4:	f003 031f 	and.w	r3, r3, #31
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	fa22 f303 	lsr.w	r3, r2, r3
 80056de:	4a07      	ldr	r2, [pc, #28]	; (80056fc <HAL_RCC_GetHCLKFreq+0x58>)
 80056e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056e2:	4a07      	ldr	r2, [pc, #28]	; (8005700 <HAL_RCC_GetHCLKFreq+0x5c>)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80056e8:	4b04      	ldr	r3, [pc, #16]	; (80056fc <HAL_RCC_GetHCLKFreq+0x58>)
 80056ea:	681b      	ldr	r3, [r3, #0]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	58024400 	.word	0x58024400
 80056f8:	080096a8 	.word	0x080096a8
 80056fc:	24000004 	.word	0x24000004
 8005700:	24000000 	.word	0x24000000

08005704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005708:	f7ff ffcc 	bl	80056a4 <HAL_RCC_GetHCLKFreq>
 800570c:	4602      	mov	r2, r0
 800570e:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	091b      	lsrs	r3, r3, #4
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	4904      	ldr	r1, [pc, #16]	; (800572c <HAL_RCC_GetPCLK1Freq+0x28>)
 800571a:	5ccb      	ldrb	r3, [r1, r3]
 800571c:	f003 031f 	and.w	r3, r3, #31
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005724:	4618      	mov	r0, r3
 8005726:	bd80      	pop	{r7, pc}
 8005728:	58024400 	.word	0x58024400
 800572c:	080096a8 	.word	0x080096a8

08005730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005734:	f7ff ffb6 	bl	80056a4 <HAL_RCC_GetHCLKFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b06      	ldr	r3, [pc, #24]	; (8005754 <HAL_RCC_GetPCLK2Freq+0x24>)
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4904      	ldr	r1, [pc, #16]	; (8005758 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	f003 031f 	and.w	r3, r3, #31
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005750:	4618      	mov	r0, r3
 8005752:	bd80      	pop	{r7, pc}
 8005754:	58024400 	.word	0x58024400
 8005758:	080096a8 	.word	0x080096a8

0800575c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800575c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005760:	b0ca      	sub	sp, #296	; 0x128
 8005762:	af00      	add	r7, sp, #0
 8005764:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005768:	2300      	movs	r3, #0
 800576a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800576e:	2300      	movs	r3, #0
 8005770:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005780:	2500      	movs	r5, #0
 8005782:	ea54 0305 	orrs.w	r3, r4, r5
 8005786:	d049      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800578e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005792:	d02f      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005794:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005798:	d828      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800579a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800579e:	d01a      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057a4:	d822      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ae:	d007      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057b0:	e01c      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b2:	4bb8      	ldr	r3, [pc, #736]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	4ab7      	ldr	r2, [pc, #732]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057be:	e01a      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c4:	3308      	adds	r3, #8
 80057c6:	2102      	movs	r1, #2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 fc8f 	bl	80070ec <RCCEx_PLL2_Config>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057d4:	e00f      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057da:	3328      	adds	r3, #40	; 0x28
 80057dc:	2102      	movs	r1, #2
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 fd36 	bl	8007250 <RCCEx_PLL3_Config>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057ea:	e004      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057f2:	e000      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80057f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10a      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80057fe:	4ba5      	ldr	r3, [pc, #660]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005802:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800580c:	4aa1      	ldr	r2, [pc, #644]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800580e:	430b      	orrs	r3, r1
 8005810:	6513      	str	r3, [r2, #80]	; 0x50
 8005812:	e003      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005818:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800581c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005828:	f04f 0900 	mov.w	r9, #0
 800582c:	ea58 0309 	orrs.w	r3, r8, r9
 8005830:	d047      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005838:	2b04      	cmp	r3, #4
 800583a:	d82a      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800583c:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	08005859 	.word	0x08005859
 8005848:	08005867 	.word	0x08005867
 800584c:	0800587d 	.word	0x0800587d
 8005850:	0800589b 	.word	0x0800589b
 8005854:	0800589b 	.word	0x0800589b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005858:	4b8e      	ldr	r3, [pc, #568]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	4a8d      	ldr	r2, [pc, #564]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800585e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005864:	e01a      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586a:	3308      	adds	r3, #8
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fc3c 	bl	80070ec <RCCEx_PLL2_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800587a:	e00f      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005880:	3328      	adds	r3, #40	; 0x28
 8005882:	2100      	movs	r1, #0
 8005884:	4618      	mov	r0, r3
 8005886:	f001 fce3 	bl	8007250 <RCCEx_PLL3_Config>
 800588a:	4603      	mov	r3, r0
 800588c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005890:	e004      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005898:	e000      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800589a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800589c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058a4:	4b7b      	ldr	r3, [pc, #492]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a8:	f023 0107 	bic.w	r1, r3, #7
 80058ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b2:	4a78      	ldr	r2, [pc, #480]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6513      	str	r3, [r2, #80]	; 0x50
 80058b8:	e003      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80058ce:	f04f 0b00 	mov.w	fp, #0
 80058d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80058d6:	d04c      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80058d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e2:	d030      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80058e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e8:	d829      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058ea:	2bc0      	cmp	r3, #192	; 0xc0
 80058ec:	d02d      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80058ee:	2bc0      	cmp	r3, #192	; 0xc0
 80058f0:	d825      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d018      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80058f6:	2b80      	cmp	r3, #128	; 0x80
 80058f8:	d821      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d007      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005902:	e01c      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005904:	4b63      	ldr	r3, [pc, #396]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4a62      	ldr	r2, [pc, #392]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800590e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005910:	e01c      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005916:	3308      	adds	r3, #8
 8005918:	2100      	movs	r1, #0
 800591a:	4618      	mov	r0, r3
 800591c:	f001 fbe6 	bl	80070ec <RCCEx_PLL2_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005926:	e011      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800592c:	3328      	adds	r3, #40	; 0x28
 800592e:	2100      	movs	r1, #0
 8005930:	4618      	mov	r0, r3
 8005932:	f001 fc8d 	bl	8007250 <RCCEx_PLL3_Config>
 8005936:	4603      	mov	r3, r0
 8005938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800593c:	e006      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005944:	e002      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005946:	bf00      	nop
 8005948:	e000      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800594a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800594c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005954:	4b4f      	ldr	r3, [pc, #316]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005958:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005962:	4a4c      	ldr	r2, [pc, #304]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005964:	430b      	orrs	r3, r1
 8005966:	6513      	str	r3, [r2, #80]	; 0x50
 8005968:	e003      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800596e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800597e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005982:	2300      	movs	r3, #0
 8005984:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005988:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800598c:	460b      	mov	r3, r1
 800598e:	4313      	orrs	r3, r2
 8005990:	d053      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005996:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800599a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800599e:	d035      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80059a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059a4:	d82e      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059aa:	d031      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80059ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059b0:	d828      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b6:	d01a      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x292>
 80059b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059bc:	d822      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80059c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059c6:	d007      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80059c8:	e01c      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ca:	4b32      	ldr	r3, [pc, #200]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ce:	4a31      	ldr	r2, [pc, #196]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059d6:	e01c      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059dc:	3308      	adds	r3, #8
 80059de:	2100      	movs	r1, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 fb83 	bl	80070ec <RCCEx_PLL2_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80059ec:	e011      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f2:	3328      	adds	r3, #40	; 0x28
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 fc2a 	bl	8007250 <RCCEx_PLL3_Config>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a02:	e006      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a0a:	e002      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a0c:	bf00      	nop
 8005a0e:	e000      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10b      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a1a:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a2a:	4a1a      	ldr	r2, [pc, #104]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8005a30:	e003      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005a46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005a54:	460b      	mov	r3, r1
 8005a56:	4313      	orrs	r3, r2
 8005a58:	d056      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a66:	d038      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a6c:	d831      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a72:	d034      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005a74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a78:	d82b      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a7e:	d01d      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a84:	d825      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d006      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005a8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a8e:	d00a      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a90:	e01f      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a92:	bf00      	nop
 8005a94:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a98:	4ba2      	ldr	r3, [pc, #648]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	4aa1      	ldr	r2, [pc, #644]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aa4:	e01c      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aaa:	3308      	adds	r3, #8
 8005aac:	2100      	movs	r1, #0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f001 fb1c 	bl	80070ec <RCCEx_PLL2_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005aba:	e011      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac0:	3328      	adds	r3, #40	; 0x28
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f001 fbc3 	bl	8007250 <RCCEx_PLL3_Config>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ad0:	e006      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ad8:	e002      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005ada:	bf00      	nop
 8005adc:	e000      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10b      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ae8:	4b8e      	ldr	r3, [pc, #568]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005af8:	4a8a      	ldr	r2, [pc, #552]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005afa:	430b      	orrs	r3, r1
 8005afc:	6593      	str	r3, [r2, #88]	; 0x58
 8005afe:	e003      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005b22:	460b      	mov	r3, r1
 8005b24:	4313      	orrs	r3, r2
 8005b26:	d03a      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2e:	2b30      	cmp	r3, #48	; 0x30
 8005b30:	d01f      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005b32:	2b30      	cmp	r3, #48	; 0x30
 8005b34:	d819      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d00c      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d815      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d019      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005b42:	2b10      	cmp	r3, #16
 8005b44:	d111      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b46:	4b77      	ldr	r3, [pc, #476]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	4a76      	ldr	r2, [pc, #472]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b52:	e011      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b58:	3308      	adds	r3, #8
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 fac5 	bl	80070ec <RCCEx_PLL2_Config>
 8005b62:	4603      	mov	r3, r0
 8005b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b68:	e006      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b70:	e002      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b72:	bf00      	nop
 8005b74:	e000      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b80:	4b68      	ldr	r3, [pc, #416]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b84:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8e:	4a65      	ldr	r2, [pc, #404]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b90:	430b      	orrs	r3, r1
 8005b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b94:	e003      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005baa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bb4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	d051      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bc8:	d035      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bce:	d82e      	bhi.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bd4:	d031      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005bd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bda:	d828      	bhi.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be0:	d01a      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be6:	d822      	bhi.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf0:	d007      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005bf2:	e01c      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf4:	4b4b      	ldr	r3, [pc, #300]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	4a4a      	ldr	r2, [pc, #296]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c00:	e01c      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c06:	3308      	adds	r3, #8
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 fa6e 	bl	80070ec <RCCEx_PLL2_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c16:	e011      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1c:	3328      	adds	r3, #40	; 0x28
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 fb15 	bl	8007250 <RCCEx_PLL3_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c2c:	e006      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c34:	e002      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c36:	bf00      	nop
 8005c38:	e000      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c44:	4b37      	ldr	r3, [pc, #220]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c48:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c52:	4a34      	ldr	r2, [pc, #208]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c54:	430b      	orrs	r3, r1
 8005c56:	6513      	str	r3, [r2, #80]	; 0x50
 8005c58:	e003      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c72:	2300      	movs	r3, #0
 8005c74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c78:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	d056      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c8c:	d033      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c92:	d82c      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c98:	d02f      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005c9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c9e:	d826      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ca0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ca4:	d02b      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005ca6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005caa:	d820      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb0:	d012      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005cb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb6:	d81a      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d022      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc0:	d115      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	2101      	movs	r1, #1
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f001 fa0e 	bl	80070ec <RCCEx_PLL2_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cd6:	e015      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cdc:	3328      	adds	r3, #40	; 0x28
 8005cde:	2101      	movs	r1, #1
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f001 fab5 	bl	8007250 <RCCEx_PLL3_Config>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cec:	e00a      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cf4:	e006      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cf6:	bf00      	nop
 8005cf8:	e004      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cfa:	bf00      	nop
 8005cfc:	e002      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cfe:	bf00      	nop
 8005d00:	e000      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10d      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d0c:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d10:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d1a:	4a02      	ldr	r2, [pc, #8]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	6513      	str	r3, [r2, #80]	; 0x50
 8005d20:	e006      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005d22:	bf00      	nop
 8005d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d38:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d40:	2300      	movs	r3, #0
 8005d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d46:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	d055      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d5c:	d033      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d62:	d82c      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d68:	d02f      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6e:	d826      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d74:	d02b      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005d76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d7a:	d820      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d80:	d012      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d86:	d81a      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d022      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d90:	d115      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d96:	3308      	adds	r3, #8
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 f9a6 	bl	80070ec <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005da6:	e015      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dac:	3328      	adds	r3, #40	; 0x28
 8005dae:	2101      	movs	r1, #1
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 fa4d 	bl	8007250 <RCCEx_PLL3_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005dbc:	e00a      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005dc4:	e006      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dc6:	bf00      	nop
 8005dc8:	e004      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dca:	bf00      	nop
 8005dcc:	e002      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dce:	bf00      	nop
 8005dd0:	e000      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ddc:	4ba3      	ldr	r3, [pc, #652]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dec:	4a9f      	ldr	r2, [pc, #636]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dee:	430b      	orrs	r3, r1
 8005df0:	6593      	str	r3, [r2, #88]	; 0x58
 8005df2:	e003      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005e08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d037      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e26:	d00e      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2c:	d816      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d018      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e36:	d111      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e38:	4b8c      	ldr	r3, [pc, #560]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	4a8b      	ldr	r2, [pc, #556]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e44:	e00f      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 f94c 	bl	80070ec <RCCEx_PLL2_Config>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e5a:	e004      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e62:	e000      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10a      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e6e:	4b7f      	ldr	r3, [pc, #508]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e72:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7c:	4a7b      	ldr	r2, [pc, #492]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	6513      	str	r3, [r2, #80]	; 0x50
 8005e82:	e003      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ea2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	d039      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d81c      	bhi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005ef9 	.word	0x08005ef9
 8005ec0:	08005ecd 	.word	0x08005ecd
 8005ec4:	08005edb 	.word	0x08005edb
 8005ec8:	08005ef9 	.word	0x08005ef9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ecc:	4b67      	ldr	r3, [pc, #412]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	4a66      	ldr	r2, [pc, #408]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ed8:	e00f      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ede:	3308      	adds	r3, #8
 8005ee0:	2102      	movs	r1, #2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 f902 	bl	80070ec <RCCEx_PLL2_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005eee:	e004      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ef6:	e000      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f02:	4b5a      	ldr	r3, [pc, #360]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f06:	f023 0103 	bic.w	r1, r3, #3
 8005f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f10:	4a56      	ldr	r2, [pc, #344]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f12:	430b      	orrs	r3, r1
 8005f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f16:	e003      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005f2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f30:	2300      	movs	r3, #0
 8005f32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f36:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	f000 809f 	beq.w	8006080 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f42:	4b4b      	ldr	r3, [pc, #300]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a4a      	ldr	r2, [pc, #296]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f4e:	f7fc ff99 	bl	8002e84 <HAL_GetTick>
 8005f52:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f56:	e00b      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f58:	f7fc ff94 	bl	8002e84 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b64      	cmp	r3, #100	; 0x64
 8005f66:	d903      	bls.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f6e:	e005      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f70:	4b3f      	ldr	r3, [pc, #252]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0ed      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d179      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f84:	4b39      	ldr	r3, [pc, #228]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f90:	4053      	eors	r3, r2
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d015      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f9a:	4b34      	ldr	r3, [pc, #208]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fa6:	4b31      	ldr	r3, [pc, #196]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	4a30      	ldr	r2, [pc, #192]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fb2:	4b2e      	ldr	r3, [pc, #184]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	4a2d      	ldr	r2, [pc, #180]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fbc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005fbe:	4a2b      	ldr	r2, [pc, #172]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fc4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd2:	d118      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd4:	f7fc ff56 	bl	8002e84 <HAL_GetTick>
 8005fd8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fdc:	e00d      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fde:	f7fc ff51 	bl	8002e84 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005fe8:	1ad2      	subs	r2, r2, r3
 8005fea:	f241 3388 	movw	r3, #5000	; 0x1388
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d903      	bls.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005ff8:	e005      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ffa:	4b1c      	ldr	r3, [pc, #112]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0eb      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800600a:	2b00      	cmp	r3, #0
 800600c:	d129      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800600e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006012:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800601e:	d10e      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006020:	4b12      	ldr	r3, [pc, #72]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006030:	091a      	lsrs	r2, r3, #4
 8006032:	4b10      	ldr	r3, [pc, #64]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006034:	4013      	ands	r3, r2
 8006036:	4a0d      	ldr	r2, [pc, #52]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006038:	430b      	orrs	r3, r1
 800603a:	6113      	str	r3, [r2, #16]
 800603c:	e005      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800603e:	4b0b      	ldr	r3, [pc, #44]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	4a0a      	ldr	r2, [pc, #40]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006044:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006048:	6113      	str	r3, [r2, #16]
 800604a:	4b08      	ldr	r3, [pc, #32]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800604c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800604e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006052:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800605a:	4a04      	ldr	r2, [pc, #16]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800605c:	430b      	orrs	r3, r1
 800605e:	6713      	str	r3, [r2, #112]	; 0x70
 8006060:	e00e      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006062:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006066:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800606a:	e009      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800606c:	58024400 	.word	0x58024400
 8006070:	58024800 	.word	0x58024800
 8006074:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006078:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800607c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f002 0301 	and.w	r3, r2, #1
 800608c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006090:	2300      	movs	r3, #0
 8006092:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006096:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800609a:	460b      	mov	r3, r1
 800609c:	4313      	orrs	r3, r2
 800609e:	f000 8089 	beq.w	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a8:	2b28      	cmp	r3, #40	; 0x28
 80060aa:	d86b      	bhi.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80060ac:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80060ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b2:	bf00      	nop
 80060b4:	0800618d 	.word	0x0800618d
 80060b8:	08006185 	.word	0x08006185
 80060bc:	08006185 	.word	0x08006185
 80060c0:	08006185 	.word	0x08006185
 80060c4:	08006185 	.word	0x08006185
 80060c8:	08006185 	.word	0x08006185
 80060cc:	08006185 	.word	0x08006185
 80060d0:	08006185 	.word	0x08006185
 80060d4:	08006159 	.word	0x08006159
 80060d8:	08006185 	.word	0x08006185
 80060dc:	08006185 	.word	0x08006185
 80060e0:	08006185 	.word	0x08006185
 80060e4:	08006185 	.word	0x08006185
 80060e8:	08006185 	.word	0x08006185
 80060ec:	08006185 	.word	0x08006185
 80060f0:	08006185 	.word	0x08006185
 80060f4:	0800616f 	.word	0x0800616f
 80060f8:	08006185 	.word	0x08006185
 80060fc:	08006185 	.word	0x08006185
 8006100:	08006185 	.word	0x08006185
 8006104:	08006185 	.word	0x08006185
 8006108:	08006185 	.word	0x08006185
 800610c:	08006185 	.word	0x08006185
 8006110:	08006185 	.word	0x08006185
 8006114:	0800618d 	.word	0x0800618d
 8006118:	08006185 	.word	0x08006185
 800611c:	08006185 	.word	0x08006185
 8006120:	08006185 	.word	0x08006185
 8006124:	08006185 	.word	0x08006185
 8006128:	08006185 	.word	0x08006185
 800612c:	08006185 	.word	0x08006185
 8006130:	08006185 	.word	0x08006185
 8006134:	0800618d 	.word	0x0800618d
 8006138:	08006185 	.word	0x08006185
 800613c:	08006185 	.word	0x08006185
 8006140:	08006185 	.word	0x08006185
 8006144:	08006185 	.word	0x08006185
 8006148:	08006185 	.word	0x08006185
 800614c:	08006185 	.word	0x08006185
 8006150:	08006185 	.word	0x08006185
 8006154:	0800618d 	.word	0x0800618d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800615c:	3308      	adds	r3, #8
 800615e:	2101      	movs	r1, #1
 8006160:	4618      	mov	r0, r3
 8006162:	f000 ffc3 	bl	80070ec <RCCEx_PLL2_Config>
 8006166:	4603      	mov	r3, r0
 8006168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800616c:	e00f      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800616e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006172:	3328      	adds	r3, #40	; 0x28
 8006174:	2101      	movs	r1, #1
 8006176:	4618      	mov	r0, r3
 8006178:	f001 f86a 	bl	8007250 <RCCEx_PLL3_Config>
 800617c:	4603      	mov	r3, r0
 800617e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006182:	e004      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800618a:	e000      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800618c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10a      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006196:	4bbf      	ldr	r3, [pc, #764]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800619e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061a4:	4abb      	ldr	r2, [pc, #748]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061a6:	430b      	orrs	r3, r1
 80061a8:	6553      	str	r3, [r2, #84]	; 0x54
 80061aa:	e003      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	f002 0302 	and.w	r3, r2, #2
 80061c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061c4:	2300      	movs	r3, #0
 80061c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80061ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80061ce:	460b      	mov	r3, r1
 80061d0:	4313      	orrs	r3, r2
 80061d2:	d041      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061da:	2b05      	cmp	r3, #5
 80061dc:	d824      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80061de:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006231 	.word	0x08006231
 80061e8:	080061fd 	.word	0x080061fd
 80061ec:	08006213 	.word	0x08006213
 80061f0:	08006231 	.word	0x08006231
 80061f4:	08006231 	.word	0x08006231
 80061f8:	08006231 	.word	0x08006231
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006200:	3308      	adds	r3, #8
 8006202:	2101      	movs	r1, #1
 8006204:	4618      	mov	r0, r3
 8006206:	f000 ff71 	bl	80070ec <RCCEx_PLL2_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006210:	e00f      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006216:	3328      	adds	r3, #40	; 0x28
 8006218:	2101      	movs	r1, #1
 800621a:	4618      	mov	r0, r3
 800621c:	f001 f818 	bl	8007250 <RCCEx_PLL3_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006226:	e004      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800622e:	e000      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800623a:	4b96      	ldr	r3, [pc, #600]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800623c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623e:	f023 0107 	bic.w	r1, r3, #7
 8006242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006248:	4a92      	ldr	r2, [pc, #584]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800624a:	430b      	orrs	r3, r1
 800624c:	6553      	str	r3, [r2, #84]	; 0x54
 800624e:	e003      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006250:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006254:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	f002 0304 	and.w	r3, r2, #4
 8006264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006268:	2300      	movs	r3, #0
 800626a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800626e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006272:	460b      	mov	r3, r1
 8006274:	4313      	orrs	r3, r2
 8006276:	d044      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006280:	2b05      	cmp	r3, #5
 8006282:	d825      	bhi.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006284:	a201      	add	r2, pc, #4	; (adr r2, 800628c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628a:	bf00      	nop
 800628c:	080062d9 	.word	0x080062d9
 8006290:	080062a5 	.word	0x080062a5
 8006294:	080062bb 	.word	0x080062bb
 8006298:	080062d9 	.word	0x080062d9
 800629c:	080062d9 	.word	0x080062d9
 80062a0:	080062d9 	.word	0x080062d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a8:	3308      	adds	r3, #8
 80062aa:	2101      	movs	r1, #1
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 ff1d 	bl	80070ec <RCCEx_PLL2_Config>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062b8:	e00f      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062be:	3328      	adds	r3, #40	; 0x28
 80062c0:	2101      	movs	r1, #1
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 ffc4 	bl	8007250 <RCCEx_PLL3_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062ce:	e004      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062d6:	e000      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80062d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10b      	bne.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062e2:	4b6c      	ldr	r3, [pc, #432]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e6:	f023 0107 	bic.w	r1, r3, #7
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f2:	4a68      	ldr	r2, [pc, #416]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062f4:	430b      	orrs	r3, r1
 80062f6:	6593      	str	r3, [r2, #88]	; 0x58
 80062f8:	e003      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f002 0320 	and.w	r3, r2, #32
 800630e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006312:	2300      	movs	r3, #0
 8006314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006318:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800631c:	460b      	mov	r3, r1
 800631e:	4313      	orrs	r3, r2
 8006320:	d055      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800632e:	d033      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006334:	d82c      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633a:	d02f      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800633c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006340:	d826      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006342:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006346:	d02b      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006348:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800634c:	d820      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800634e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006352:	d012      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006358:	d81a      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d022      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800635e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006362:	d115      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006368:	3308      	adds	r3, #8
 800636a:	2100      	movs	r1, #0
 800636c:	4618      	mov	r0, r3
 800636e:	f000 febd 	bl	80070ec <RCCEx_PLL2_Config>
 8006372:	4603      	mov	r3, r0
 8006374:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006378:	e015      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637e:	3328      	adds	r3, #40	; 0x28
 8006380:	2102      	movs	r1, #2
 8006382:	4618      	mov	r0, r3
 8006384:	f000 ff64 	bl	8007250 <RCCEx_PLL3_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800638e:	e00a      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006396:	e006      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006398:	bf00      	nop
 800639a:	e004      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800639c:	bf00      	nop
 800639e:	e002      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063a0:	bf00      	nop
 80063a2:	e000      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063ae:	4b39      	ldr	r3, [pc, #228]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063be:	4a35      	ldr	r2, [pc, #212]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063c0:	430b      	orrs	r3, r1
 80063c2:	6553      	str	r3, [r2, #84]	; 0x54
 80063c4:	e003      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80063da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063de:	2300      	movs	r3, #0
 80063e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4313      	orrs	r3, r2
 80063ec:	d058      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80063fa:	d033      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80063fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006400:	d82c      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006406:	d02f      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d826      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800640e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006412:	d02b      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006414:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006418:	d820      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800641a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800641e:	d012      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006424:	d81a      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d022      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800642a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642e:	d115      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006434:	3308      	adds	r3, #8
 8006436:	2100      	movs	r1, #0
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fe57 	bl	80070ec <RCCEx_PLL2_Config>
 800643e:	4603      	mov	r3, r0
 8006440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006444:	e015      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644a:	3328      	adds	r3, #40	; 0x28
 800644c:	2102      	movs	r1, #2
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fefe 	bl	8007250 <RCCEx_PLL3_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800645a:	e00a      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006462:	e006      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006464:	bf00      	nop
 8006466:	e004      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006468:	bf00      	nop
 800646a:	e002      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800646c:	bf00      	nop
 800646e:	e000      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10e      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800647a:	4b06      	ldr	r3, [pc, #24]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800647c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006486:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800648a:	4a02      	ldr	r2, [pc, #8]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800648c:	430b      	orrs	r3, r1
 800648e:	6593      	str	r3, [r2, #88]	; 0x58
 8006490:	e006      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006492:	bf00      	nop
 8006494:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800649c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80064a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80064ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064b0:	2300      	movs	r3, #0
 80064b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80064ba:	460b      	mov	r3, r1
 80064bc:	4313      	orrs	r3, r2
 80064be:	d055      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80064c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064cc:	d033      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80064ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064d2:	d82c      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d8:	d02f      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80064da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064de:	d826      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064e4:	d02b      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80064e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064ea:	d820      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f0:	d012      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80064f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f6:	d81a      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d022      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80064fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006500:	d115      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006506:	3308      	adds	r3, #8
 8006508:	2100      	movs	r1, #0
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fdee 	bl	80070ec <RCCEx_PLL2_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006516:	e015      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651c:	3328      	adds	r3, #40	; 0x28
 800651e:	2102      	movs	r1, #2
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fe95 	bl	8007250 <RCCEx_PLL3_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800652c:	e00a      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006534:	e006      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006536:	bf00      	nop
 8006538:	e004      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800653a:	bf00      	nop
 800653c:	e002      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800653e:	bf00      	nop
 8006540:	e000      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10b      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800654c:	4ba1      	ldr	r3, [pc, #644]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800654e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006550:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006558:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800655c:	4a9d      	ldr	r2, [pc, #628]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800655e:	430b      	orrs	r3, r1
 8006560:	6593      	str	r3, [r2, #88]	; 0x58
 8006562:	e003      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006568:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800656c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	f002 0308 	and.w	r3, r2, #8
 8006578:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800657c:	2300      	movs	r3, #0
 800657e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006582:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006586:	460b      	mov	r3, r1
 8006588:	4313      	orrs	r3, r2
 800658a:	d01e      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800658c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006598:	d10c      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659e:	3328      	adds	r3, #40	; 0x28
 80065a0:	2102      	movs	r1, #2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fe54 	bl	8007250 <RCCEx_PLL3_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80065b4:	4b87      	ldr	r3, [pc, #540]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c4:	4a83      	ldr	r2, [pc, #524]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065c6:	430b      	orrs	r3, r1
 80065c8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f002 0310 	and.w	r3, r2, #16
 80065d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065da:	2300      	movs	r3, #0
 80065dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80065e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80065e4:	460b      	mov	r3, r1
 80065e6:	4313      	orrs	r3, r2
 80065e8:	d01e      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f6:	d10c      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fc:	3328      	adds	r3, #40	; 0x28
 80065fe:	2102      	movs	r1, #2
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fe25 	bl	8007250 <RCCEx_PLL3_Config>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006612:	4b70      	ldr	r3, [pc, #448]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800661e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006622:	4a6c      	ldr	r2, [pc, #432]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006624:	430b      	orrs	r3, r1
 8006626:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006638:	2300      	movs	r3, #0
 800663a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800663e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006642:	460b      	mov	r3, r1
 8006644:	4313      	orrs	r3, r2
 8006646:	d03e      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006654:	d022      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800665a:	d81b      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006664:	d00b      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006666:	e015      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800666c:	3308      	adds	r3, #8
 800666e:	2100      	movs	r1, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fd3b 	bl	80070ec <RCCEx_PLL2_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800667c:	e00f      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800667e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006682:	3328      	adds	r3, #40	; 0x28
 8006684:	2102      	movs	r1, #2
 8006686:	4618      	mov	r0, r3
 8006688:	f000 fde2 	bl	8007250 <RCCEx_PLL3_Config>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006692:	e004      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800669a:	e000      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800669c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800669e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10b      	bne.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066a6:	4b4b      	ldr	r3, [pc, #300]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80066ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066b6:	4a47      	ldr	r2, [pc, #284]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066b8:	430b      	orrs	r3, r1
 80066ba:	6593      	str	r3, [r2, #88]	; 0x58
 80066bc:	e003      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80066d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80066d4:	2300      	movs	r3, #0
 80066d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80066dc:	460b      	mov	r3, r1
 80066de:	4313      	orrs	r3, r2
 80066e0:	d03b      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066ee:	d01f      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80066f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066f4:	d818      	bhi.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80066f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066fa:	d003      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80066fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006700:	d007      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006702:	e011      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006704:	4b33      	ldr	r3, [pc, #204]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	4a32      	ldr	r2, [pc, #200]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800670a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800670e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006710:	e00f      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006716:	3328      	adds	r3, #40	; 0x28
 8006718:	2101      	movs	r1, #1
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fd98 	bl	8007250 <RCCEx_PLL3_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006726:	e004      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800672e:	e000      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10b      	bne.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800673a:	4b26      	ldr	r3, [pc, #152]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800673c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674a:	4a22      	ldr	r2, [pc, #136]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800674c:	430b      	orrs	r3, r1
 800674e:	6553      	str	r3, [r2, #84]	; 0x54
 8006750:	e003      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006766:	673b      	str	r3, [r7, #112]	; 0x70
 8006768:	2300      	movs	r3, #0
 800676a:	677b      	str	r3, [r7, #116]	; 0x74
 800676c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006770:	460b      	mov	r3, r1
 8006772:	4313      	orrs	r3, r2
 8006774:	d034      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800677a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006784:	d007      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006786:	e011      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006788:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	4a11      	ldr	r2, [pc, #68]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800678e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006794:	e00e      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800679a:	3308      	adds	r3, #8
 800679c:	2102      	movs	r1, #2
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fca4 	bl	80070ec <RCCEx_PLL2_Config>
 80067a4:	4603      	mov	r3, r0
 80067a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067aa:	e003      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10d      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80067bc:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ca:	4a02      	ldr	r2, [pc, #8]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067cc:	430b      	orrs	r3, r1
 80067ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067d0:	e006      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80067d2:	bf00      	nop
 80067d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80067ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80067ee:	2300      	movs	r3, #0
 80067f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80067f6:	460b      	mov	r3, r1
 80067f8:	4313      	orrs	r3, r2
 80067fa:	d00c      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006800:	3328      	adds	r3, #40	; 0x28
 8006802:	2102      	movs	r1, #2
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fd23 	bl	8007250 <RCCEx_PLL3_Config>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006822:	663b      	str	r3, [r7, #96]	; 0x60
 8006824:	2300      	movs	r3, #0
 8006826:	667b      	str	r3, [r7, #100]	; 0x64
 8006828:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800682c:	460b      	mov	r3, r1
 800682e:	4313      	orrs	r3, r2
 8006830:	d038      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800683a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800683e:	d018      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006844:	d811      	bhi.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800684a:	d014      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800684c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006850:	d80b      	bhi.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d011      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685a:	d106      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685c:	4bc3      	ldr	r3, [pc, #780]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4ac2      	ldr	r2, [pc, #776]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006868:	e008      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006870:	e004      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006872:	bf00      	nop
 8006874:	e002      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006876:	bf00      	nop
 8006878:	e000      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800687a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800687c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10b      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006884:	4bb9      	ldr	r3, [pc, #740]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006888:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006894:	4ab5      	ldr	r2, [pc, #724]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006896:	430b      	orrs	r3, r1
 8006898:	6553      	str	r3, [r2, #84]	; 0x54
 800689a:	e003      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80068b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80068b2:	2300      	movs	r3, #0
 80068b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80068ba:	460b      	mov	r3, r1
 80068bc:	4313      	orrs	r3, r2
 80068be:	d009      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068c0:	4baa      	ldr	r3, [pc, #680]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80068c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ce:	4aa7      	ldr	r2, [pc, #668]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068d0:	430b      	orrs	r3, r1
 80068d2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80068e0:	653b      	str	r3, [r7, #80]	; 0x50
 80068e2:	2300      	movs	r3, #0
 80068e4:	657b      	str	r3, [r7, #84]	; 0x54
 80068e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80068ea:	460b      	mov	r3, r1
 80068ec:	4313      	orrs	r3, r2
 80068ee:	d00a      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80068f0:	4b9e      	ldr	r3, [pc, #632]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006900:	4a9a      	ldr	r2, [pc, #616]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006902:	430b      	orrs	r3, r1
 8006904:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006912:	64bb      	str	r3, [r7, #72]	; 0x48
 8006914:	2300      	movs	r3, #0
 8006916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006918:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800691c:	460b      	mov	r3, r1
 800691e:	4313      	orrs	r3, r2
 8006920:	d009      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006922:	4b92      	ldr	r3, [pc, #584]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006926:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800692e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006930:	4a8e      	ldr	r2, [pc, #568]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006932:	430b      	orrs	r3, r1
 8006934:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006942:	643b      	str	r3, [r7, #64]	; 0x40
 8006944:	2300      	movs	r3, #0
 8006946:	647b      	str	r3, [r7, #68]	; 0x44
 8006948:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800694c:	460b      	mov	r3, r1
 800694e:	4313      	orrs	r3, r2
 8006950:	d00e      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006952:	4b86      	ldr	r3, [pc, #536]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	4a85      	ldr	r2, [pc, #532]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006958:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800695c:	6113      	str	r3, [r2, #16]
 800695e:	4b83      	ldr	r3, [pc, #524]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006960:	6919      	ldr	r1, [r3, #16]
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006966:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800696a:	4a80      	ldr	r2, [pc, #512]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800696c:	430b      	orrs	r3, r1
 800696e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800697c:	63bb      	str	r3, [r7, #56]	; 0x38
 800697e:	2300      	movs	r3, #0
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006982:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006986:	460b      	mov	r3, r1
 8006988:	4313      	orrs	r3, r2
 800698a:	d009      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800698c:	4b77      	ldr	r3, [pc, #476]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800698e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006990:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	4a74      	ldr	r2, [pc, #464]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800699c:	430b      	orrs	r3, r1
 800699e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80069ac:	633b      	str	r3, [r7, #48]	; 0x30
 80069ae:	2300      	movs	r3, #0
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34
 80069b2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80069b6:	460b      	mov	r3, r1
 80069b8:	4313      	orrs	r3, r2
 80069ba:	d00a      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069bc:	4b6b      	ldr	r3, [pc, #428]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80069c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069cc:	4a67      	ldr	r2, [pc, #412]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069ce:	430b      	orrs	r3, r1
 80069d0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	2100      	movs	r1, #0
 80069dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80069e8:	460b      	mov	r3, r1
 80069ea:	4313      	orrs	r3, r2
 80069ec:	d011      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f2:	3308      	adds	r3, #8
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fb78 	bl	80070ec <RCCEx_PLL2_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	6239      	str	r1, [r7, #32]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
 8006a24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	d011      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a32:	3308      	adds	r3, #8
 8006a34:	2101      	movs	r1, #1
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fb58 	bl	80070ec <RCCEx_PLL2_Config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	61b9      	str	r1, [r7, #24]
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	d011      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a72:	3308      	adds	r3, #8
 8006a74:	2102      	movs	r1, #2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fb38 	bl	80070ec <RCCEx_PLL2_Config>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006a82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	6139      	str	r1, [r7, #16]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	d011      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab2:	3328      	adds	r3, #40	; 0x28
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fbca 	bl	8007250 <RCCEx_PLL3_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ace:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	2100      	movs	r1, #0
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	f003 0310 	and.w	r3, r3, #16
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4313      	orrs	r3, r2
 8006aec:	d011      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006af2:	3328      	adds	r3, #40	; 0x28
 8006af4:	2101      	movs	r1, #1
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fbaa 	bl	8007250 <RCCEx_PLL3_Config>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	6039      	str	r1, [r7, #0]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	607b      	str	r3, [r7, #4]
 8006b24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	d011      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b32:	3328      	adds	r3, #40	; 0x28
 8006b34:	2102      	movs	r1, #2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fb8a 	bl	8007250 <RCCEx_PLL3_Config>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006b52:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e000      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006b66:	46bd      	mov	sp, r7
 8006b68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b6c:	58024400 	.word	0x58024400

08006b70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b74:	f7fe fd96 	bl	80056a4 <HAL_RCC_GetHCLKFreq>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	091b      	lsrs	r3, r3, #4
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	4904      	ldr	r1, [pc, #16]	; (8006b98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b86:	5ccb      	ldrb	r3, [r1, r3]
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	58024400 	.word	0x58024400
 8006b98:	080096a8 	.word	0x080096a8

08006b9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b089      	sub	sp, #36	; 0x24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ba4:	4ba1      	ldr	r3, [pc, #644]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006bae:	4b9f      	ldr	r3, [pc, #636]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb2:	0b1b      	lsrs	r3, r3, #12
 8006bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006bba:	4b9c      	ldr	r3, [pc, #624]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	091b      	lsrs	r3, r3, #4
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006bc6:	4b99      	ldr	r3, [pc, #612]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	fb02 f303 	mul.w	r3, r2, r3
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8111 	beq.w	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	f000 8083 	beq.w	8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	f200 80a1 	bhi.w	8006d3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d056      	beq.n	8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c06:	e099      	b.n	8006d3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c08:	4b88      	ldr	r3, [pc, #544]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02d      	beq.n	8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c14:	4b85      	ldr	r3, [pc, #532]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	08db      	lsrs	r3, r3, #3
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	4a84      	ldr	r2, [pc, #528]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
 8006c24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3e:	4b7b      	ldr	r3, [pc, #492]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c6e:	e087      	b.n	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	4b6a      	ldr	r3, [pc, #424]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb2:	e065      	b.n	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc6:	4b59      	ldr	r3, [pc, #356]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cf6:	e043      	b.n	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0a:	4b48      	ldr	r3, [pc, #288]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d3a:	e021      	b.n	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4e:	4b37      	ldr	r3, [pc, #220]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d80:	4b2a      	ldr	r3, [pc, #168]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	0a5b      	lsrs	r3, r3, #9
 8006d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006dae:	4b1f      	ldr	r3, [pc, #124]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd4:	ee17 2a90 	vmov	r2, s15
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ddc:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	0e1b      	lsrs	r3, r3, #24
 8006de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006df2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006df6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e02:	ee17 2a90 	vmov	r2, s15
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e0a:	e008      	b.n	8006e1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	609a      	str	r2, [r3, #8]
}
 8006e1e:	bf00      	nop
 8006e20:	3724      	adds	r7, #36	; 0x24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	03d09000 	.word	0x03d09000
 8006e34:	46000000 	.word	0x46000000
 8006e38:	4c742400 	.word	0x4c742400
 8006e3c:	4a742400 	.word	0x4a742400
 8006e40:	4af42400 	.word	0x4af42400

08006e44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b089      	sub	sp, #36	; 0x24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e4c:	4ba1      	ldr	r3, [pc, #644]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006e56:	4b9f      	ldr	r3, [pc, #636]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5a:	0d1b      	lsrs	r3, r3, #20
 8006e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e62:	4b9c      	ldr	r3, [pc, #624]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	0a1b      	lsrs	r3, r3, #8
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e6e:	4b99      	ldr	r3, [pc, #612]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e72:	08db      	lsrs	r3, r3, #3
 8006e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8111 	beq.w	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	f000 8083 	beq.w	8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	f200 80a1 	bhi.w	8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d056      	beq.n	8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006eae:	e099      	b.n	8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eb0:	4b88      	ldr	r3, [pc, #544]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d02d      	beq.n	8006f18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ebc:	4b85      	ldr	r3, [pc, #532]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	08db      	lsrs	r3, r3, #3
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	4a84      	ldr	r2, [pc, #528]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ecc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	ee07 3a90 	vmov	s15, r3
 8006ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee6:	4b7b      	ldr	r3, [pc, #492]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006efa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f16:	e087      	b.n	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2a:	4b6a      	ldr	r3, [pc, #424]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f5a:	e065      	b.n	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6e:	4b59      	ldr	r3, [pc, #356]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f82:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f9e:	e043      	b.n	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb2:	4b48      	ldr	r3, [pc, #288]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fe2:	e021      	b.n	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff6:	4b37      	ldr	r3, [pc, #220]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007006:	ed97 6a03 	vldr	s12, [r7, #12]
 800700a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800700e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800701a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007026:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007028:	4b2a      	ldr	r3, [pc, #168]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	0a5b      	lsrs	r3, r3, #9
 800702e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800703e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007042:	edd7 6a07 	vldr	s13, [r7, #28]
 8007046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704e:	ee17 2a90 	vmov	r2, s15
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007056:	4b1f      	ldr	r3, [pc, #124]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	0c1b      	lsrs	r3, r3, #16
 800705c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007060:	ee07 3a90 	vmov	s15, r3
 8007064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800706c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007070:	edd7 6a07 	vldr	s13, [r7, #28]
 8007074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707c:	ee17 2a90 	vmov	r2, s15
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007084:	4b13      	ldr	r3, [pc, #76]	; (80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007088:	0e1b      	lsrs	r3, r3, #24
 800708a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800709a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800709e:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070aa:	ee17 2a90 	vmov	r2, s15
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070b2:	e008      	b.n	80070c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	609a      	str	r2, [r3, #8]
}
 80070c6:	bf00      	nop
 80070c8:	3724      	adds	r7, #36	; 0x24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	58024400 	.word	0x58024400
 80070d8:	03d09000 	.word	0x03d09000
 80070dc:	46000000 	.word	0x46000000
 80070e0:	4c742400 	.word	0x4c742400
 80070e4:	4a742400 	.word	0x4a742400
 80070e8:	4af42400 	.word	0x4af42400

080070ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070fa:	4b53      	ldr	r3, [pc, #332]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	f003 0303 	and.w	r3, r3, #3
 8007102:	2b03      	cmp	r3, #3
 8007104:	d101      	bne.n	800710a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e099      	b.n	800723e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800710a:	4b4f      	ldr	r3, [pc, #316]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a4e      	ldr	r2, [pc, #312]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 8007110:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007116:	f7fb feb5 	bl	8002e84 <HAL_GetTick>
 800711a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800711c:	e008      	b.n	8007130 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800711e:	f7fb feb1 	bl	8002e84 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d901      	bls.n	8007130 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e086      	b.n	800723e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007130:	4b45      	ldr	r3, [pc, #276]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1f0      	bne.n	800711e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800713c:	4b42      	ldr	r3, [pc, #264]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 800713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007140:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	031b      	lsls	r3, r3, #12
 800714a:	493f      	ldr	r1, [pc, #252]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 800714c:	4313      	orrs	r3, r2
 800714e:	628b      	str	r3, [r1, #40]	; 0x28
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	3b01      	subs	r3, #1
 8007156:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	3b01      	subs	r3, #1
 8007160:	025b      	lsls	r3, r3, #9
 8007162:	b29b      	uxth	r3, r3
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	3b01      	subs	r3, #1
 800716c:	041b      	lsls	r3, r3, #16
 800716e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	3b01      	subs	r3, #1
 800717a:	061b      	lsls	r3, r3, #24
 800717c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007180:	4931      	ldr	r1, [pc, #196]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 8007182:	4313      	orrs	r3, r2
 8007184:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007186:	4b30      	ldr	r3, [pc, #192]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	492d      	ldr	r1, [pc, #180]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 8007194:	4313      	orrs	r3, r2
 8007196:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007198:	4b2b      	ldr	r3, [pc, #172]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	f023 0220 	bic.w	r2, r3, #32
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	4928      	ldr	r1, [pc, #160]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80071aa:	4b27      	ldr	r3, [pc, #156]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	4a26      	ldr	r2, [pc, #152]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 80071b0:	f023 0310 	bic.w	r3, r3, #16
 80071b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80071b6:	4b24      	ldr	r3, [pc, #144]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 80071b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071ba:	4b24      	ldr	r3, [pc, #144]	; (800724c <RCCEx_PLL2_Config+0x160>)
 80071bc:	4013      	ands	r3, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	69d2      	ldr	r2, [r2, #28]
 80071c2:	00d2      	lsls	r2, r2, #3
 80071c4:	4920      	ldr	r1, [pc, #128]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80071ca:	4b1f      	ldr	r3, [pc, #124]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	4a1e      	ldr	r2, [pc, #120]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 80071d0:	f043 0310 	orr.w	r3, r3, #16
 80071d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d106      	bne.n	80071ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80071dc:	4b1a      	ldr	r3, [pc, #104]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	4a19      	ldr	r2, [pc, #100]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 80071e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071e8:	e00f      	b.n	800720a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d106      	bne.n	80071fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80071f0:	4b15      	ldr	r3, [pc, #84]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	4a14      	ldr	r2, [pc, #80]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 80071f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071fc:	e005      	b.n	800720a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80071fe:	4b12      	ldr	r3, [pc, #72]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 8007200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007202:	4a11      	ldr	r2, [pc, #68]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 8007204:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007208:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800720a:	4b0f      	ldr	r3, [pc, #60]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a0e      	ldr	r2, [pc, #56]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 8007210:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007216:	f7fb fe35 	bl	8002e84 <HAL_GetTick>
 800721a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800721c:	e008      	b.n	8007230 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800721e:	f7fb fe31 	bl	8002e84 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d901      	bls.n	8007230 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e006      	b.n	800723e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <RCCEx_PLL2_Config+0x15c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0f0      	beq.n	800721e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	58024400 	.word	0x58024400
 800724c:	ffff0007 	.word	0xffff0007

08007250 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800725e:	4b53      	ldr	r3, [pc, #332]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	2b03      	cmp	r3, #3
 8007268:	d101      	bne.n	800726e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e099      	b.n	80073a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800726e:	4b4f      	ldr	r3, [pc, #316]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a4e      	ldr	r2, [pc, #312]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800727a:	f7fb fe03 	bl	8002e84 <HAL_GetTick>
 800727e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007280:	e008      	b.n	8007294 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007282:	f7fb fdff 	bl	8002e84 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b02      	cmp	r3, #2
 800728e:	d901      	bls.n	8007294 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e086      	b.n	80073a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007294:	4b45      	ldr	r3, [pc, #276]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1f0      	bne.n	8007282 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80072a0:	4b42      	ldr	r3, [pc, #264]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	051b      	lsls	r3, r3, #20
 80072ae:	493f      	ldr	r1, [pc, #252]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	628b      	str	r3, [r1, #40]	; 0x28
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	025b      	lsls	r3, r3, #9
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	431a      	orrs	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072d6:	431a      	orrs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	3b01      	subs	r3, #1
 80072de:	061b      	lsls	r3, r3, #24
 80072e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80072e4:	4931      	ldr	r1, [pc, #196]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80072ea:	4b30      	ldr	r3, [pc, #192]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	492d      	ldr	r1, [pc, #180]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80072fc:	4b2b      	ldr	r3, [pc, #172]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	4928      	ldr	r1, [pc, #160]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 800730a:	4313      	orrs	r3, r2
 800730c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800730e:	4b27      	ldr	r3, [pc, #156]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007312:	4a26      	ldr	r2, [pc, #152]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007318:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800731a:	4b24      	ldr	r3, [pc, #144]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 800731c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800731e:	4b24      	ldr	r3, [pc, #144]	; (80073b0 <RCCEx_PLL3_Config+0x160>)
 8007320:	4013      	ands	r3, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	69d2      	ldr	r2, [r2, #28]
 8007326:	00d2      	lsls	r2, r2, #3
 8007328:	4920      	ldr	r1, [pc, #128]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 800732a:	4313      	orrs	r3, r2
 800732c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800732e:	4b1f      	ldr	r3, [pc, #124]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	4a1e      	ldr	r2, [pc, #120]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007338:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007340:	4b1a      	ldr	r3, [pc, #104]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	4a19      	ldr	r2, [pc, #100]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007346:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800734a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800734c:	e00f      	b.n	800736e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d106      	bne.n	8007362 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007354:	4b15      	ldr	r3, [pc, #84]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	4a14      	ldr	r2, [pc, #80]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 800735a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800735e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007360:	e005      	b.n	800736e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007362:	4b12      	ldr	r3, [pc, #72]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	4a11      	ldr	r2, [pc, #68]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007368:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800736c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800736e:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a0e      	ldr	r2, [pc, #56]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800737a:	f7fb fd83 	bl	8002e84 <HAL_GetTick>
 800737e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007380:	e008      	b.n	8007394 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007382:	f7fb fd7f 	bl	8002e84 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e006      	b.n	80073a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <RCCEx_PLL3_Config+0x15c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0f0      	beq.n	8007382 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	58024400 	.word	0x58024400
 80073b0:	ffff0007 	.word	0xffff0007

080073b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e042      	b.n	800744c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d106      	bne.n	80073de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7fa f9c7 	bl	800176c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2224      	movs	r2, #36	; 0x24
 80073e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0201 	bic.w	r2, r2, #1
 80073f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f82c 	bl	8007454 <UART_SetConfig>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d101      	bne.n	8007406 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e022      	b.n	800744c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fd88 	bl	8007f24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fe0f 	bl	8008068 <UART_CheckIdleState>
 800744a:	4603      	mov	r3, r0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007458:	b092      	sub	sp, #72	; 0x48
 800745a:	af00      	add	r7, sp, #0
 800745c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	431a      	orrs	r2, r3
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	431a      	orrs	r2, r3
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	4313      	orrs	r3, r2
 800747a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4bbe      	ldr	r3, [pc, #760]	; (800777c <UART_SetConfig+0x328>)
 8007484:	4013      	ands	r3, r2
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	6812      	ldr	r2, [r2, #0]
 800748a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800748c:	430b      	orrs	r3, r1
 800748e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4ab3      	ldr	r2, [pc, #716]	; (8007780 <UART_SetConfig+0x32c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d004      	beq.n	80074c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074bc:	4313      	orrs	r3, r2
 80074be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	4baf      	ldr	r3, [pc, #700]	; (8007784 <UART_SetConfig+0x330>)
 80074c8:	4013      	ands	r3, r2
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	6812      	ldr	r2, [r2, #0]
 80074ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074d0:	430b      	orrs	r3, r1
 80074d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074da:	f023 010f 	bic.w	r1, r3, #15
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4aa6      	ldr	r2, [pc, #664]	; (8007788 <UART_SetConfig+0x334>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d177      	bne.n	80075e4 <UART_SetConfig+0x190>
 80074f4:	4ba5      	ldr	r3, [pc, #660]	; (800778c <UART_SetConfig+0x338>)
 80074f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074fc:	2b28      	cmp	r3, #40	; 0x28
 80074fe:	d86d      	bhi.n	80075dc <UART_SetConfig+0x188>
 8007500:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <UART_SetConfig+0xb4>)
 8007502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007506:	bf00      	nop
 8007508:	080075ad 	.word	0x080075ad
 800750c:	080075dd 	.word	0x080075dd
 8007510:	080075dd 	.word	0x080075dd
 8007514:	080075dd 	.word	0x080075dd
 8007518:	080075dd 	.word	0x080075dd
 800751c:	080075dd 	.word	0x080075dd
 8007520:	080075dd 	.word	0x080075dd
 8007524:	080075dd 	.word	0x080075dd
 8007528:	080075b5 	.word	0x080075b5
 800752c:	080075dd 	.word	0x080075dd
 8007530:	080075dd 	.word	0x080075dd
 8007534:	080075dd 	.word	0x080075dd
 8007538:	080075dd 	.word	0x080075dd
 800753c:	080075dd 	.word	0x080075dd
 8007540:	080075dd 	.word	0x080075dd
 8007544:	080075dd 	.word	0x080075dd
 8007548:	080075bd 	.word	0x080075bd
 800754c:	080075dd 	.word	0x080075dd
 8007550:	080075dd 	.word	0x080075dd
 8007554:	080075dd 	.word	0x080075dd
 8007558:	080075dd 	.word	0x080075dd
 800755c:	080075dd 	.word	0x080075dd
 8007560:	080075dd 	.word	0x080075dd
 8007564:	080075dd 	.word	0x080075dd
 8007568:	080075c5 	.word	0x080075c5
 800756c:	080075dd 	.word	0x080075dd
 8007570:	080075dd 	.word	0x080075dd
 8007574:	080075dd 	.word	0x080075dd
 8007578:	080075dd 	.word	0x080075dd
 800757c:	080075dd 	.word	0x080075dd
 8007580:	080075dd 	.word	0x080075dd
 8007584:	080075dd 	.word	0x080075dd
 8007588:	080075cd 	.word	0x080075cd
 800758c:	080075dd 	.word	0x080075dd
 8007590:	080075dd 	.word	0x080075dd
 8007594:	080075dd 	.word	0x080075dd
 8007598:	080075dd 	.word	0x080075dd
 800759c:	080075dd 	.word	0x080075dd
 80075a0:	080075dd 	.word	0x080075dd
 80075a4:	080075dd 	.word	0x080075dd
 80075a8:	080075d5 	.word	0x080075d5
 80075ac:	2301      	movs	r3, #1
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075b2:	e222      	b.n	80079fa <UART_SetConfig+0x5a6>
 80075b4:	2304      	movs	r3, #4
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ba:	e21e      	b.n	80079fa <UART_SetConfig+0x5a6>
 80075bc:	2308      	movs	r3, #8
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c2:	e21a      	b.n	80079fa <UART_SetConfig+0x5a6>
 80075c4:	2310      	movs	r3, #16
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ca:	e216      	b.n	80079fa <UART_SetConfig+0x5a6>
 80075cc:	2320      	movs	r3, #32
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075d2:	e212      	b.n	80079fa <UART_SetConfig+0x5a6>
 80075d4:	2340      	movs	r3, #64	; 0x40
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075da:	e20e      	b.n	80079fa <UART_SetConfig+0x5a6>
 80075dc:	2380      	movs	r3, #128	; 0x80
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e2:	e20a      	b.n	80079fa <UART_SetConfig+0x5a6>
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a69      	ldr	r2, [pc, #420]	; (8007790 <UART_SetConfig+0x33c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d130      	bne.n	8007650 <UART_SetConfig+0x1fc>
 80075ee:	4b67      	ldr	r3, [pc, #412]	; (800778c <UART_SetConfig+0x338>)
 80075f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	2b05      	cmp	r3, #5
 80075f8:	d826      	bhi.n	8007648 <UART_SetConfig+0x1f4>
 80075fa:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <UART_SetConfig+0x1ac>)
 80075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007600:	08007619 	.word	0x08007619
 8007604:	08007621 	.word	0x08007621
 8007608:	08007629 	.word	0x08007629
 800760c:	08007631 	.word	0x08007631
 8007610:	08007639 	.word	0x08007639
 8007614:	08007641 	.word	0x08007641
 8007618:	2300      	movs	r3, #0
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761e:	e1ec      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007620:	2304      	movs	r3, #4
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007626:	e1e8      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007628:	2308      	movs	r3, #8
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762e:	e1e4      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007630:	2310      	movs	r3, #16
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007636:	e1e0      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007638:	2320      	movs	r3, #32
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763e:	e1dc      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007640:	2340      	movs	r3, #64	; 0x40
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007646:	e1d8      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007648:	2380      	movs	r3, #128	; 0x80
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764e:	e1d4      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a4f      	ldr	r2, [pc, #316]	; (8007794 <UART_SetConfig+0x340>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d130      	bne.n	80076bc <UART_SetConfig+0x268>
 800765a:	4b4c      	ldr	r3, [pc, #304]	; (800778c <UART_SetConfig+0x338>)
 800765c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	2b05      	cmp	r3, #5
 8007664:	d826      	bhi.n	80076b4 <UART_SetConfig+0x260>
 8007666:	a201      	add	r2, pc, #4	; (adr r2, 800766c <UART_SetConfig+0x218>)
 8007668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766c:	08007685 	.word	0x08007685
 8007670:	0800768d 	.word	0x0800768d
 8007674:	08007695 	.word	0x08007695
 8007678:	0800769d 	.word	0x0800769d
 800767c:	080076a5 	.word	0x080076a5
 8007680:	080076ad 	.word	0x080076ad
 8007684:	2300      	movs	r3, #0
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768a:	e1b6      	b.n	80079fa <UART_SetConfig+0x5a6>
 800768c:	2304      	movs	r3, #4
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007692:	e1b2      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007694:	2308      	movs	r3, #8
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769a:	e1ae      	b.n	80079fa <UART_SetConfig+0x5a6>
 800769c:	2310      	movs	r3, #16
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a2:	e1aa      	b.n	80079fa <UART_SetConfig+0x5a6>
 80076a4:	2320      	movs	r3, #32
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076aa:	e1a6      	b.n	80079fa <UART_SetConfig+0x5a6>
 80076ac:	2340      	movs	r3, #64	; 0x40
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076b2:	e1a2      	b.n	80079fa <UART_SetConfig+0x5a6>
 80076b4:	2380      	movs	r3, #128	; 0x80
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ba:	e19e      	b.n	80079fa <UART_SetConfig+0x5a6>
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a35      	ldr	r2, [pc, #212]	; (8007798 <UART_SetConfig+0x344>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d130      	bne.n	8007728 <UART_SetConfig+0x2d4>
 80076c6:	4b31      	ldr	r3, [pc, #196]	; (800778c <UART_SetConfig+0x338>)
 80076c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	2b05      	cmp	r3, #5
 80076d0:	d826      	bhi.n	8007720 <UART_SetConfig+0x2cc>
 80076d2:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <UART_SetConfig+0x284>)
 80076d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d8:	080076f1 	.word	0x080076f1
 80076dc:	080076f9 	.word	0x080076f9
 80076e0:	08007701 	.word	0x08007701
 80076e4:	08007709 	.word	0x08007709
 80076e8:	08007711 	.word	0x08007711
 80076ec:	08007719 	.word	0x08007719
 80076f0:	2300      	movs	r3, #0
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f6:	e180      	b.n	80079fa <UART_SetConfig+0x5a6>
 80076f8:	2304      	movs	r3, #4
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fe:	e17c      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007700:	2308      	movs	r3, #8
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007706:	e178      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007708:	2310      	movs	r3, #16
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770e:	e174      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007710:	2320      	movs	r3, #32
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007716:	e170      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007718:	2340      	movs	r3, #64	; 0x40
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771e:	e16c      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007720:	2380      	movs	r3, #128	; 0x80
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007726:	e168      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a1b      	ldr	r2, [pc, #108]	; (800779c <UART_SetConfig+0x348>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d142      	bne.n	80077b8 <UART_SetConfig+0x364>
 8007732:	4b16      	ldr	r3, [pc, #88]	; (800778c <UART_SetConfig+0x338>)
 8007734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	2b05      	cmp	r3, #5
 800773c:	d838      	bhi.n	80077b0 <UART_SetConfig+0x35c>
 800773e:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <UART_SetConfig+0x2f0>)
 8007740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007744:	0800775d 	.word	0x0800775d
 8007748:	08007765 	.word	0x08007765
 800774c:	0800776d 	.word	0x0800776d
 8007750:	08007775 	.word	0x08007775
 8007754:	080077a1 	.word	0x080077a1
 8007758:	080077a9 	.word	0x080077a9
 800775c:	2300      	movs	r3, #0
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007762:	e14a      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007764:	2304      	movs	r3, #4
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776a:	e146      	b.n	80079fa <UART_SetConfig+0x5a6>
 800776c:	2308      	movs	r3, #8
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007772:	e142      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007774:	2310      	movs	r3, #16
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777a:	e13e      	b.n	80079fa <UART_SetConfig+0x5a6>
 800777c:	cfff69f3 	.word	0xcfff69f3
 8007780:	58000c00 	.word	0x58000c00
 8007784:	11fff4ff 	.word	0x11fff4ff
 8007788:	40011000 	.word	0x40011000
 800778c:	58024400 	.word	0x58024400
 8007790:	40004400 	.word	0x40004400
 8007794:	40004800 	.word	0x40004800
 8007798:	40004c00 	.word	0x40004c00
 800779c:	40005000 	.word	0x40005000
 80077a0:	2320      	movs	r3, #32
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077a6:	e128      	b.n	80079fa <UART_SetConfig+0x5a6>
 80077a8:	2340      	movs	r3, #64	; 0x40
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ae:	e124      	b.n	80079fa <UART_SetConfig+0x5a6>
 80077b0:	2380      	movs	r3, #128	; 0x80
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b6:	e120      	b.n	80079fa <UART_SetConfig+0x5a6>
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4acb      	ldr	r2, [pc, #812]	; (8007aec <UART_SetConfig+0x698>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d176      	bne.n	80078b0 <UART_SetConfig+0x45c>
 80077c2:	4bcb      	ldr	r3, [pc, #812]	; (8007af0 <UART_SetConfig+0x69c>)
 80077c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077ca:	2b28      	cmp	r3, #40	; 0x28
 80077cc:	d86c      	bhi.n	80078a8 <UART_SetConfig+0x454>
 80077ce:	a201      	add	r2, pc, #4	; (adr r2, 80077d4 <UART_SetConfig+0x380>)
 80077d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d4:	08007879 	.word	0x08007879
 80077d8:	080078a9 	.word	0x080078a9
 80077dc:	080078a9 	.word	0x080078a9
 80077e0:	080078a9 	.word	0x080078a9
 80077e4:	080078a9 	.word	0x080078a9
 80077e8:	080078a9 	.word	0x080078a9
 80077ec:	080078a9 	.word	0x080078a9
 80077f0:	080078a9 	.word	0x080078a9
 80077f4:	08007881 	.word	0x08007881
 80077f8:	080078a9 	.word	0x080078a9
 80077fc:	080078a9 	.word	0x080078a9
 8007800:	080078a9 	.word	0x080078a9
 8007804:	080078a9 	.word	0x080078a9
 8007808:	080078a9 	.word	0x080078a9
 800780c:	080078a9 	.word	0x080078a9
 8007810:	080078a9 	.word	0x080078a9
 8007814:	08007889 	.word	0x08007889
 8007818:	080078a9 	.word	0x080078a9
 800781c:	080078a9 	.word	0x080078a9
 8007820:	080078a9 	.word	0x080078a9
 8007824:	080078a9 	.word	0x080078a9
 8007828:	080078a9 	.word	0x080078a9
 800782c:	080078a9 	.word	0x080078a9
 8007830:	080078a9 	.word	0x080078a9
 8007834:	08007891 	.word	0x08007891
 8007838:	080078a9 	.word	0x080078a9
 800783c:	080078a9 	.word	0x080078a9
 8007840:	080078a9 	.word	0x080078a9
 8007844:	080078a9 	.word	0x080078a9
 8007848:	080078a9 	.word	0x080078a9
 800784c:	080078a9 	.word	0x080078a9
 8007850:	080078a9 	.word	0x080078a9
 8007854:	08007899 	.word	0x08007899
 8007858:	080078a9 	.word	0x080078a9
 800785c:	080078a9 	.word	0x080078a9
 8007860:	080078a9 	.word	0x080078a9
 8007864:	080078a9 	.word	0x080078a9
 8007868:	080078a9 	.word	0x080078a9
 800786c:	080078a9 	.word	0x080078a9
 8007870:	080078a9 	.word	0x080078a9
 8007874:	080078a1 	.word	0x080078a1
 8007878:	2301      	movs	r3, #1
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787e:	e0bc      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007886:	e0b8      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788e:	e0b4      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007896:	e0b0      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007898:	2320      	movs	r3, #32
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800789e:	e0ac      	b.n	80079fa <UART_SetConfig+0x5a6>
 80078a0:	2340      	movs	r3, #64	; 0x40
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a6:	e0a8      	b.n	80079fa <UART_SetConfig+0x5a6>
 80078a8:	2380      	movs	r3, #128	; 0x80
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ae:	e0a4      	b.n	80079fa <UART_SetConfig+0x5a6>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a8f      	ldr	r2, [pc, #572]	; (8007af4 <UART_SetConfig+0x6a0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d130      	bne.n	800791c <UART_SetConfig+0x4c8>
 80078ba:	4b8d      	ldr	r3, [pc, #564]	; (8007af0 <UART_SetConfig+0x69c>)
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	2b05      	cmp	r3, #5
 80078c4:	d826      	bhi.n	8007914 <UART_SetConfig+0x4c0>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <UART_SetConfig+0x478>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078e5 	.word	0x080078e5
 80078d0:	080078ed 	.word	0x080078ed
 80078d4:	080078f5 	.word	0x080078f5
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007905 	.word	0x08007905
 80078e0:	0800790d 	.word	0x0800790d
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ea:	e086      	b.n	80079fa <UART_SetConfig+0x5a6>
 80078ec:	2304      	movs	r3, #4
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f2:	e082      	b.n	80079fa <UART_SetConfig+0x5a6>
 80078f4:	2308      	movs	r3, #8
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fa:	e07e      	b.n	80079fa <UART_SetConfig+0x5a6>
 80078fc:	2310      	movs	r3, #16
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007902:	e07a      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007904:	2320      	movs	r3, #32
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790a:	e076      	b.n	80079fa <UART_SetConfig+0x5a6>
 800790c:	2340      	movs	r3, #64	; 0x40
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007912:	e072      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007914:	2380      	movs	r3, #128	; 0x80
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791a:	e06e      	b.n	80079fa <UART_SetConfig+0x5a6>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a75      	ldr	r2, [pc, #468]	; (8007af8 <UART_SetConfig+0x6a4>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d130      	bne.n	8007988 <UART_SetConfig+0x534>
 8007926:	4b72      	ldr	r3, [pc, #456]	; (8007af0 <UART_SetConfig+0x69c>)
 8007928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792a:	f003 0307 	and.w	r3, r3, #7
 800792e:	2b05      	cmp	r3, #5
 8007930:	d826      	bhi.n	8007980 <UART_SetConfig+0x52c>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <UART_SetConfig+0x4e4>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007951 	.word	0x08007951
 800793c:	08007959 	.word	0x08007959
 8007940:	08007961 	.word	0x08007961
 8007944:	08007969 	.word	0x08007969
 8007948:	08007971 	.word	0x08007971
 800794c:	08007979 	.word	0x08007979
 8007950:	2300      	movs	r3, #0
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007956:	e050      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007958:	2304      	movs	r3, #4
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795e:	e04c      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007960:	2308      	movs	r3, #8
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007966:	e048      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007968:	2310      	movs	r3, #16
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796e:	e044      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007970:	2320      	movs	r3, #32
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007976:	e040      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007978:	2340      	movs	r3, #64	; 0x40
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797e:	e03c      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007980:	2380      	movs	r3, #128	; 0x80
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007986:	e038      	b.n	80079fa <UART_SetConfig+0x5a6>
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a5b      	ldr	r2, [pc, #364]	; (8007afc <UART_SetConfig+0x6a8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d130      	bne.n	80079f4 <UART_SetConfig+0x5a0>
 8007992:	4b57      	ldr	r3, [pc, #348]	; (8007af0 <UART_SetConfig+0x69c>)
 8007994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	2b05      	cmp	r3, #5
 800799c:	d826      	bhi.n	80079ec <UART_SetConfig+0x598>
 800799e:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <UART_SetConfig+0x550>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	080079bd 	.word	0x080079bd
 80079a8:	080079c5 	.word	0x080079c5
 80079ac:	080079cd 	.word	0x080079cd
 80079b0:	080079d5 	.word	0x080079d5
 80079b4:	080079dd 	.word	0x080079dd
 80079b8:	080079e5 	.word	0x080079e5
 80079bc:	2302      	movs	r3, #2
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c2:	e01a      	b.n	80079fa <UART_SetConfig+0x5a6>
 80079c4:	2304      	movs	r3, #4
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ca:	e016      	b.n	80079fa <UART_SetConfig+0x5a6>
 80079cc:	2308      	movs	r3, #8
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d2:	e012      	b.n	80079fa <UART_SetConfig+0x5a6>
 80079d4:	2310      	movs	r3, #16
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079da:	e00e      	b.n	80079fa <UART_SetConfig+0x5a6>
 80079dc:	2320      	movs	r3, #32
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e2:	e00a      	b.n	80079fa <UART_SetConfig+0x5a6>
 80079e4:	2340      	movs	r3, #64	; 0x40
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ea:	e006      	b.n	80079fa <UART_SetConfig+0x5a6>
 80079ec:	2380      	movs	r3, #128	; 0x80
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f2:	e002      	b.n	80079fa <UART_SetConfig+0x5a6>
 80079f4:	2380      	movs	r3, #128	; 0x80
 80079f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a3f      	ldr	r2, [pc, #252]	; (8007afc <UART_SetConfig+0x6a8>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	f040 80f8 	bne.w	8007bf6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	dc46      	bgt.n	8007a9c <UART_SetConfig+0x648>
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	f2c0 8082 	blt.w	8007b18 <UART_SetConfig+0x6c4>
 8007a14:	3b02      	subs	r3, #2
 8007a16:	2b1e      	cmp	r3, #30
 8007a18:	d87e      	bhi.n	8007b18 <UART_SetConfig+0x6c4>
 8007a1a:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <UART_SetConfig+0x5cc>)
 8007a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a20:	08007aa3 	.word	0x08007aa3
 8007a24:	08007b19 	.word	0x08007b19
 8007a28:	08007aab 	.word	0x08007aab
 8007a2c:	08007b19 	.word	0x08007b19
 8007a30:	08007b19 	.word	0x08007b19
 8007a34:	08007b19 	.word	0x08007b19
 8007a38:	08007abb 	.word	0x08007abb
 8007a3c:	08007b19 	.word	0x08007b19
 8007a40:	08007b19 	.word	0x08007b19
 8007a44:	08007b19 	.word	0x08007b19
 8007a48:	08007b19 	.word	0x08007b19
 8007a4c:	08007b19 	.word	0x08007b19
 8007a50:	08007b19 	.word	0x08007b19
 8007a54:	08007b19 	.word	0x08007b19
 8007a58:	08007acb 	.word	0x08007acb
 8007a5c:	08007b19 	.word	0x08007b19
 8007a60:	08007b19 	.word	0x08007b19
 8007a64:	08007b19 	.word	0x08007b19
 8007a68:	08007b19 	.word	0x08007b19
 8007a6c:	08007b19 	.word	0x08007b19
 8007a70:	08007b19 	.word	0x08007b19
 8007a74:	08007b19 	.word	0x08007b19
 8007a78:	08007b19 	.word	0x08007b19
 8007a7c:	08007b19 	.word	0x08007b19
 8007a80:	08007b19 	.word	0x08007b19
 8007a84:	08007b19 	.word	0x08007b19
 8007a88:	08007b19 	.word	0x08007b19
 8007a8c:	08007b19 	.word	0x08007b19
 8007a90:	08007b19 	.word	0x08007b19
 8007a94:	08007b19 	.word	0x08007b19
 8007a98:	08007b0b 	.word	0x08007b0b
 8007a9c:	2b40      	cmp	r3, #64	; 0x40
 8007a9e:	d037      	beq.n	8007b10 <UART_SetConfig+0x6bc>
 8007aa0:	e03a      	b.n	8007b18 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007aa2:	f7ff f865 	bl	8006b70 <HAL_RCCEx_GetD3PCLK1Freq>
 8007aa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007aa8:	e03c      	b.n	8007b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff f874 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ab8:	e034      	b.n	8007b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aba:	f107 0318 	add.w	r3, r7, #24
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff f9c0 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ac8:	e02c      	b.n	8007b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aca:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <UART_SetConfig+0x69c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d016      	beq.n	8007b04 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ad6:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <UART_SetConfig+0x69c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	08db      	lsrs	r3, r3, #3
 8007adc:	f003 0303 	and.w	r3, r3, #3
 8007ae0:	4a07      	ldr	r2, [pc, #28]	; (8007b00 <UART_SetConfig+0x6ac>)
 8007ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ae8:	e01c      	b.n	8007b24 <UART_SetConfig+0x6d0>
 8007aea:	bf00      	nop
 8007aec:	40011400 	.word	0x40011400
 8007af0:	58024400 	.word	0x58024400
 8007af4:	40007800 	.word	0x40007800
 8007af8:	40007c00 	.word	0x40007c00
 8007afc:	58000c00 	.word	0x58000c00
 8007b00:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007b04:	4b9d      	ldr	r3, [pc, #628]	; (8007d7c <UART_SetConfig+0x928>)
 8007b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b08:	e00c      	b.n	8007b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b0a:	4b9d      	ldr	r3, [pc, #628]	; (8007d80 <UART_SetConfig+0x92c>)
 8007b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b0e:	e009      	b.n	8007b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b16:	e005      	b.n	8007b24 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 81de 	beq.w	8007ee8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	4a94      	ldr	r2, [pc, #592]	; (8007d84 <UART_SetConfig+0x930>)
 8007b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b36:	461a      	mov	r2, r3
 8007b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b3e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	4613      	mov	r3, r2
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	4413      	add	r3, r2
 8007b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d305      	bcc.n	8007b5c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d903      	bls.n	8007b64 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b62:	e1c1      	b.n	8007ee8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b66:	2200      	movs	r2, #0
 8007b68:	60bb      	str	r3, [r7, #8]
 8007b6a:	60fa      	str	r2, [r7, #12]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	4a84      	ldr	r2, [pc, #528]	; (8007d84 <UART_SetConfig+0x930>)
 8007b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	2200      	movs	r2, #0
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	607a      	str	r2, [r7, #4]
 8007b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b86:	f7f8 fbfb 	bl	8000380 <__aeabi_uldivmod>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4610      	mov	r0, r2
 8007b90:	4619      	mov	r1, r3
 8007b92:	f04f 0200 	mov.w	r2, #0
 8007b96:	f04f 0300 	mov.w	r3, #0
 8007b9a:	020b      	lsls	r3, r1, #8
 8007b9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ba0:	0202      	lsls	r2, r0, #8
 8007ba2:	6979      	ldr	r1, [r7, #20]
 8007ba4:	6849      	ldr	r1, [r1, #4]
 8007ba6:	0849      	lsrs	r1, r1, #1
 8007ba8:	2000      	movs	r0, #0
 8007baa:	460c      	mov	r4, r1
 8007bac:	4605      	mov	r5, r0
 8007bae:	eb12 0804 	adds.w	r8, r2, r4
 8007bb2:	eb43 0905 	adc.w	r9, r3, r5
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	469a      	mov	sl, r3
 8007bbe:	4693      	mov	fp, r2
 8007bc0:	4652      	mov	r2, sl
 8007bc2:	465b      	mov	r3, fp
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	f7f8 fbda 	bl	8000380 <__aeabi_uldivmod>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bda:	d308      	bcc.n	8007bee <UART_SetConfig+0x79a>
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007be2:	d204      	bcs.n	8007bee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bea:	60da      	str	r2, [r3, #12]
 8007bec:	e17c      	b.n	8007ee8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007bf4:	e178      	b.n	8007ee8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bfe:	f040 80c5 	bne.w	8007d8c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007c02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	dc48      	bgt.n	8007c9c <UART_SetConfig+0x848>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	db7b      	blt.n	8007d06 <UART_SetConfig+0x8b2>
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d879      	bhi.n	8007d06 <UART_SetConfig+0x8b2>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <UART_SetConfig+0x7c4>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007ca3 	.word	0x08007ca3
 8007c1c:	08007cab 	.word	0x08007cab
 8007c20:	08007d07 	.word	0x08007d07
 8007c24:	08007d07 	.word	0x08007d07
 8007c28:	08007cb3 	.word	0x08007cb3
 8007c2c:	08007d07 	.word	0x08007d07
 8007c30:	08007d07 	.word	0x08007d07
 8007c34:	08007d07 	.word	0x08007d07
 8007c38:	08007cc3 	.word	0x08007cc3
 8007c3c:	08007d07 	.word	0x08007d07
 8007c40:	08007d07 	.word	0x08007d07
 8007c44:	08007d07 	.word	0x08007d07
 8007c48:	08007d07 	.word	0x08007d07
 8007c4c:	08007d07 	.word	0x08007d07
 8007c50:	08007d07 	.word	0x08007d07
 8007c54:	08007d07 	.word	0x08007d07
 8007c58:	08007cd3 	.word	0x08007cd3
 8007c5c:	08007d07 	.word	0x08007d07
 8007c60:	08007d07 	.word	0x08007d07
 8007c64:	08007d07 	.word	0x08007d07
 8007c68:	08007d07 	.word	0x08007d07
 8007c6c:	08007d07 	.word	0x08007d07
 8007c70:	08007d07 	.word	0x08007d07
 8007c74:	08007d07 	.word	0x08007d07
 8007c78:	08007d07 	.word	0x08007d07
 8007c7c:	08007d07 	.word	0x08007d07
 8007c80:	08007d07 	.word	0x08007d07
 8007c84:	08007d07 	.word	0x08007d07
 8007c88:	08007d07 	.word	0x08007d07
 8007c8c:	08007d07 	.word	0x08007d07
 8007c90:	08007d07 	.word	0x08007d07
 8007c94:	08007d07 	.word	0x08007d07
 8007c98:	08007cf9 	.word	0x08007cf9
 8007c9c:	2b40      	cmp	r3, #64	; 0x40
 8007c9e:	d02e      	beq.n	8007cfe <UART_SetConfig+0x8aa>
 8007ca0:	e031      	b.n	8007d06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ca2:	f7fd fd2f 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
 8007ca6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ca8:	e033      	b.n	8007d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007caa:	f7fd fd41 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 8007cae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cb0:	e02f      	b.n	8007d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe ff70 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc0:	e027      	b.n	8007d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cc2:	f107 0318 	add.w	r3, r7, #24
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff f8bc 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd0:	e01f      	b.n	8007d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cd2:	4b2d      	ldr	r3, [pc, #180]	; (8007d88 <UART_SetConfig+0x934>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0320 	and.w	r3, r3, #32
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cde:	4b2a      	ldr	r3, [pc, #168]	; (8007d88 <UART_SetConfig+0x934>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	08db      	lsrs	r3, r3, #3
 8007ce4:	f003 0303 	and.w	r3, r3, #3
 8007ce8:	4a24      	ldr	r2, [pc, #144]	; (8007d7c <UART_SetConfig+0x928>)
 8007cea:	fa22 f303 	lsr.w	r3, r2, r3
 8007cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cf0:	e00f      	b.n	8007d12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007cf2:	4b22      	ldr	r3, [pc, #136]	; (8007d7c <UART_SetConfig+0x928>)
 8007cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cf6:	e00c      	b.n	8007d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cf8:	4b21      	ldr	r3, [pc, #132]	; (8007d80 <UART_SetConfig+0x92c>)
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cfc:	e009      	b.n	8007d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d04:	e005      	b.n	8007d12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 80e7 	beq.w	8007ee8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	4a19      	ldr	r2, [pc, #100]	; (8007d84 <UART_SetConfig+0x930>)
 8007d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d24:	461a      	mov	r2, r3
 8007d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d2c:	005a      	lsls	r2, r3, #1
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	085b      	lsrs	r3, r3, #1
 8007d34:	441a      	add	r2, r3
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	2b0f      	cmp	r3, #15
 8007d44:	d916      	bls.n	8007d74 <UART_SetConfig+0x920>
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d4c:	d212      	bcs.n	8007d74 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	f023 030f 	bic.w	r3, r3, #15
 8007d56:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d66:	4313      	orrs	r3, r2
 8007d68:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007d70:	60da      	str	r2, [r3, #12]
 8007d72:	e0b9      	b.n	8007ee8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d7a:	e0b5      	b.n	8007ee8 <UART_SetConfig+0xa94>
 8007d7c:	03d09000 	.word	0x03d09000
 8007d80:	003d0900 	.word	0x003d0900
 8007d84:	0800aa04 	.word	0x0800aa04
 8007d88:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	dc49      	bgt.n	8007e28 <UART_SetConfig+0x9d4>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	db7c      	blt.n	8007e92 <UART_SetConfig+0xa3e>
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d87a      	bhi.n	8007e92 <UART_SetConfig+0xa3e>
 8007d9c:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <UART_SetConfig+0x950>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007e2f 	.word	0x08007e2f
 8007da8:	08007e37 	.word	0x08007e37
 8007dac:	08007e93 	.word	0x08007e93
 8007db0:	08007e93 	.word	0x08007e93
 8007db4:	08007e3f 	.word	0x08007e3f
 8007db8:	08007e93 	.word	0x08007e93
 8007dbc:	08007e93 	.word	0x08007e93
 8007dc0:	08007e93 	.word	0x08007e93
 8007dc4:	08007e4f 	.word	0x08007e4f
 8007dc8:	08007e93 	.word	0x08007e93
 8007dcc:	08007e93 	.word	0x08007e93
 8007dd0:	08007e93 	.word	0x08007e93
 8007dd4:	08007e93 	.word	0x08007e93
 8007dd8:	08007e93 	.word	0x08007e93
 8007ddc:	08007e93 	.word	0x08007e93
 8007de0:	08007e93 	.word	0x08007e93
 8007de4:	08007e5f 	.word	0x08007e5f
 8007de8:	08007e93 	.word	0x08007e93
 8007dec:	08007e93 	.word	0x08007e93
 8007df0:	08007e93 	.word	0x08007e93
 8007df4:	08007e93 	.word	0x08007e93
 8007df8:	08007e93 	.word	0x08007e93
 8007dfc:	08007e93 	.word	0x08007e93
 8007e00:	08007e93 	.word	0x08007e93
 8007e04:	08007e93 	.word	0x08007e93
 8007e08:	08007e93 	.word	0x08007e93
 8007e0c:	08007e93 	.word	0x08007e93
 8007e10:	08007e93 	.word	0x08007e93
 8007e14:	08007e93 	.word	0x08007e93
 8007e18:	08007e93 	.word	0x08007e93
 8007e1c:	08007e93 	.word	0x08007e93
 8007e20:	08007e93 	.word	0x08007e93
 8007e24:	08007e85 	.word	0x08007e85
 8007e28:	2b40      	cmp	r3, #64	; 0x40
 8007e2a:	d02e      	beq.n	8007e8a <UART_SetConfig+0xa36>
 8007e2c:	e031      	b.n	8007e92 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e2e:	f7fd fc69 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
 8007e32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e34:	e033      	b.n	8007e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e36:	f7fd fc7b 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 8007e3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e3c:	e02f      	b.n	8007e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe feaa 	bl	8006b9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e4c:	e027      	b.n	8007e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e4e:	f107 0318 	add.w	r3, r7, #24
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fe fff6 	bl	8006e44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e5c:	e01f      	b.n	8007e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e5e:	4b2d      	ldr	r3, [pc, #180]	; (8007f14 <UART_SetConfig+0xac0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d009      	beq.n	8007e7e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e6a:	4b2a      	ldr	r3, [pc, #168]	; (8007f14 <UART_SetConfig+0xac0>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	08db      	lsrs	r3, r3, #3
 8007e70:	f003 0303 	and.w	r3, r3, #3
 8007e74:	4a28      	ldr	r2, [pc, #160]	; (8007f18 <UART_SetConfig+0xac4>)
 8007e76:	fa22 f303 	lsr.w	r3, r2, r3
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e7c:	e00f      	b.n	8007e9e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e7e:	4b26      	ldr	r3, [pc, #152]	; (8007f18 <UART_SetConfig+0xac4>)
 8007e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e82:	e00c      	b.n	8007e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e84:	4b25      	ldr	r3, [pc, #148]	; (8007f1c <UART_SetConfig+0xac8>)
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e88:	e009      	b.n	8007e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e90:	e005      	b.n	8007e9e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e9c:	bf00      	nop
    }

    if (pclk != 0U)
 8007e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d021      	beq.n	8007ee8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	4a1d      	ldr	r2, [pc, #116]	; (8007f20 <UART_SetConfig+0xacc>)
 8007eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	085b      	lsrs	r3, r3, #1
 8007ebc:	441a      	add	r2, r3
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	2b0f      	cmp	r3, #15
 8007ecc:	d909      	bls.n	8007ee2 <UART_SetConfig+0xa8e>
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ed4:	d205      	bcs.n	8007ee2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60da      	str	r2, [r3, #12]
 8007ee0:	e002      	b.n	8007ee8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2200      	movs	r2, #0
 8007efc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2200      	movs	r2, #0
 8007f02:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007f04:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3748      	adds	r7, #72	; 0x48
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f12:	bf00      	nop
 8007f14:	58024400 	.word	0x58024400
 8007f18:	03d09000 	.word	0x03d09000
 8007f1c:	003d0900 	.word	0x003d0900
 8007f20:	0800aa04 	.word	0x0800aa04

08007f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00a      	beq.n	8007f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	f003 0308 	and.w	r3, r3, #8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb8:	f003 0310 	and.w	r3, r3, #16
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00a      	beq.n	8007fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fda:	f003 0320 	and.w	r3, r3, #32
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00a      	beq.n	8007ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008000:	2b00      	cmp	r3, #0
 8008002:	d01a      	beq.n	800803a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008022:	d10a      	bne.n	800803a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	430a      	orrs	r2, r1
 800805a:	605a      	str	r2, [r3, #4]
  }
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b098      	sub	sp, #96	; 0x60
 800806c:	af02      	add	r7, sp, #8
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008078:	f7fa ff04 	bl	8002e84 <HAL_GetTick>
 800807c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0308 	and.w	r3, r3, #8
 8008088:	2b08      	cmp	r3, #8
 800808a:	d12f      	bne.n	80080ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800808c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008094:	2200      	movs	r2, #0
 8008096:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f88e 	bl	80081bc <UART_WaitOnFlagUntilTimeout>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d022      	beq.n	80080ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ba:	653b      	str	r3, [r7, #80]	; 0x50
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	461a      	mov	r2, r3
 80080c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080c4:	647b      	str	r3, [r7, #68]	; 0x44
 80080c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e6      	bne.n	80080a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2220      	movs	r2, #32
 80080dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e063      	b.n	80081b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0304 	and.w	r3, r3, #4
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d149      	bne.n	800818e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008102:	2200      	movs	r2, #0
 8008104:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f857 	bl	80081bc <UART_WaitOnFlagUntilTimeout>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d03c      	beq.n	800818e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	623b      	str	r3, [r7, #32]
   return(result);
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008132:	633b      	str	r3, [r7, #48]	; 0x30
 8008134:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e6      	bne.n	8008114 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3308      	adds	r3, #8
 800814c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	60fb      	str	r3, [r7, #12]
   return(result);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f023 0301 	bic.w	r3, r3, #1
 800815c:	64bb      	str	r3, [r7, #72]	; 0x48
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3308      	adds	r3, #8
 8008164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008166:	61fa      	str	r2, [r7, #28]
 8008168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	69b9      	ldr	r1, [r7, #24]
 800816c:	69fa      	ldr	r2, [r7, #28]
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	617b      	str	r3, [r7, #20]
   return(result);
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e5      	bne.n	8008146 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e012      	b.n	80081b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2220      	movs	r2, #32
 8008192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2220      	movs	r2, #32
 800819a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3758      	adds	r7, #88	; 0x58
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	4613      	mov	r3, r2
 80081ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081cc:	e049      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d4:	d045      	beq.n	8008262 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d6:	f7fa fe55 	bl	8002e84 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d302      	bcc.n	80081ec <UART_WaitOnFlagUntilTimeout+0x30>
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e048      	b.n	8008282 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d031      	beq.n	8008262 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	f003 0308 	and.w	r3, r3, #8
 8008208:	2b08      	cmp	r3, #8
 800820a:	d110      	bne.n	800822e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2208      	movs	r2, #8
 8008212:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 f839 	bl	800828c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2208      	movs	r2, #8
 800821e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e029      	b.n	8008282 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800823c:	d111      	bne.n	8008262 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f81f 	bl	800828c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2220      	movs	r2, #32
 8008252:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e00f      	b.n	8008282 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69da      	ldr	r2, [r3, #28]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	4013      	ands	r3, r2
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	429a      	cmp	r2, r3
 8008270:	bf0c      	ite	eq
 8008272:	2301      	moveq	r3, #1
 8008274:	2300      	movne	r3, #0
 8008276:	b2db      	uxtb	r3, r3
 8008278:	461a      	mov	r2, r3
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	429a      	cmp	r2, r3
 800827e:	d0a6      	beq.n	80081ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800828c:	b480      	push	{r7}
 800828e:	b095      	sub	sp, #84	; 0x54
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b2:	643b      	str	r3, [r7, #64]	; 0x40
 80082b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e6      	bne.n	8008294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3308      	adds	r3, #8
 80082cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80082d6:	69fa      	ldr	r2, [r7, #28]
 80082d8:	4b1e      	ldr	r3, [pc, #120]	; (8008354 <UART_EndRxTransfer+0xc8>)
 80082da:	4013      	ands	r3, r2
 80082dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e5      	bne.n	80082c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d118      	bne.n	8008334 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	e853 3f00 	ldrex	r3, [r3]
 800830e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f023 0310 	bic.w	r3, r3, #16
 8008316:	647b      	str	r3, [r7, #68]	; 0x44
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	461a      	mov	r2, r3
 800831e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008324:	6979      	ldr	r1, [r7, #20]
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	e841 2300 	strex	r3, r2, [r1]
 800832c:	613b      	str	r3, [r7, #16]
   return(result);
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1e6      	bne.n	8008302 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2220      	movs	r2, #32
 8008338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008348:	bf00      	nop
 800834a:	3754      	adds	r7, #84	; 0x54
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	effffffe 	.word	0xeffffffe

08008358 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008366:	2b01      	cmp	r3, #1
 8008368:	d101      	bne.n	800836e <HAL_UARTEx_DisableFifoMode+0x16>
 800836a:	2302      	movs	r3, #2
 800836c:	e027      	b.n	80083be <HAL_UARTEx_DisableFifoMode+0x66>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2224      	movs	r2, #36	; 0x24
 800837a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f022 0201 	bic.w	r2, r2, #1
 8008394:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800839c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083de:	2302      	movs	r3, #2
 80083e0:	e02d      	b.n	800843e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2224      	movs	r2, #36	; 0x24
 80083ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0201 	bic.w	r2, r2, #1
 8008408:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f850 	bl	80084c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2220      	movs	r2, #32
 8008430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008456:	2b01      	cmp	r3, #1
 8008458:	d101      	bne.n	800845e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800845a:	2302      	movs	r3, #2
 800845c:	e02d      	b.n	80084ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2224      	movs	r2, #36	; 0x24
 800846a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0201 	bic.w	r2, r2, #1
 8008484:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	430a      	orrs	r2, r1
 8008498:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f812 	bl	80084c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
	...

080084c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d108      	bne.n	80084e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084e4:	e031      	b.n	800854a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084e6:	2310      	movs	r3, #16
 80084e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084ea:	2310      	movs	r3, #16
 80084ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	0e5b      	lsrs	r3, r3, #25
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	f003 0307 	and.w	r3, r3, #7
 80084fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	0f5b      	lsrs	r3, r3, #29
 8008506:	b2db      	uxtb	r3, r3
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	7b3a      	ldrb	r2, [r7, #12]
 8008512:	4911      	ldr	r1, [pc, #68]	; (8008558 <UARTEx_SetNbDataToProcess+0x94>)
 8008514:	5c8a      	ldrb	r2, [r1, r2]
 8008516:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800851a:	7b3a      	ldrb	r2, [r7, #12]
 800851c:	490f      	ldr	r1, [pc, #60]	; (800855c <UARTEx_SetNbDataToProcess+0x98>)
 800851e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008520:	fb93 f3f2 	sdiv	r3, r3, r2
 8008524:	b29a      	uxth	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	7b7a      	ldrb	r2, [r7, #13]
 8008530:	4909      	ldr	r1, [pc, #36]	; (8008558 <UARTEx_SetNbDataToProcess+0x94>)
 8008532:	5c8a      	ldrb	r2, [r1, r2]
 8008534:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008538:	7b7a      	ldrb	r2, [r7, #13]
 800853a:	4908      	ldr	r1, [pc, #32]	; (800855c <UARTEx_SetNbDataToProcess+0x98>)
 800853c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800853e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008542:	b29a      	uxth	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800854a:	bf00      	nop
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	0800aa1c 	.word	0x0800aa1c
 800855c:	0800aa24 	.word	0x0800aa24

08008560 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008560:	b084      	sub	sp, #16
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	f107 001c 	add.w	r0, r7, #28
 800856e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008574:	2b01      	cmp	r3, #1
 8008576:	d120      	bne.n	80085ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	4b2a      	ldr	r3, [pc, #168]	; (8008634 <USB_CoreInit+0xd4>)
 800858a:	4013      	ands	r3, r2
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800859c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d105      	bne.n	80085ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 faac 	bl	8008b0c <USB_CoreReset>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]
 80085b8:	e01a      	b.n	80085f0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 faa0 	bl	8008b0c <USB_CoreReset>
 80085cc:	4603      	mov	r3, r0
 80085ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80085d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38
 80085e2:	e005      	b.n	80085f0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d116      	bne.n	8008624 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008604:	4b0c      	ldr	r3, [pc, #48]	; (8008638 <USB_CoreInit+0xd8>)
 8008606:	4313      	orrs	r3, r2
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f043 0206 	orr.w	r2, r3, #6
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f043 0220 	orr.w	r2, r3, #32
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008624:	7bfb      	ldrb	r3, [r7, #15]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008630:	b004      	add	sp, #16
 8008632:	4770      	bx	lr
 8008634:	ffbdffbf 	.word	0xffbdffbf
 8008638:	03ee0000 	.word	0x03ee0000

0800863c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f023 0201 	bic.w	r2, r3, #1
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr

0800865e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d115      	bne.n	80086ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800868c:	2001      	movs	r0, #1
 800868e:	f7fa fc05 	bl	8002e9c <HAL_Delay>
      ms++;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3301      	adds	r3, #1
 8008696:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fa29 	bl	8008af0 <USB_GetMode>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d01e      	beq.n	80086e2 <USB_SetCurrentMode+0x84>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b31      	cmp	r3, #49	; 0x31
 80086a8:	d9f0      	bls.n	800868c <USB_SetCurrentMode+0x2e>
 80086aa:	e01a      	b.n	80086e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d115      	bne.n	80086de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086be:	2001      	movs	r0, #1
 80086c0:	f7fa fbec 	bl	8002e9c <HAL_Delay>
      ms++;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3301      	adds	r3, #1
 80086c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fa10 	bl	8008af0 <USB_GetMode>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d005      	beq.n	80086e2 <USB_SetCurrentMode+0x84>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2b31      	cmp	r3, #49	; 0x31
 80086da:	d9f0      	bls.n	80086be <USB_SetCurrentMode+0x60>
 80086dc:	e001      	b.n	80086e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e005      	b.n	80086ee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b32      	cmp	r3, #50	; 0x32
 80086e6:	d101      	bne.n	80086ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e000      	b.n	80086ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086f8:	b084      	sub	sp, #16
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b086      	sub	sp, #24
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008712:	2300      	movs	r3, #0
 8008714:	613b      	str	r3, [r7, #16]
 8008716:	e009      	b.n	800872c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	3340      	adds	r3, #64	; 0x40
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	2200      	movs	r2, #0
 8008724:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	3301      	adds	r3, #1
 800872a:	613b      	str	r3, [r7, #16]
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2b0e      	cmp	r3, #14
 8008730:	d9f2      	bls.n	8008718 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008734:	2b00      	cmp	r3, #0
 8008736:	d11c      	bne.n	8008772 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008746:	f043 0302 	orr.w	r3, r3, #2
 800874a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008750:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	e005      	b.n	800877e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008776:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008784:	461a      	mov	r2, r3
 8008786:	2300      	movs	r3, #0
 8008788:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008790:	4619      	mov	r1, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008798:	461a      	mov	r2, r3
 800879a:	680b      	ldr	r3, [r1, #0]
 800879c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d10c      	bne.n	80087be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d104      	bne.n	80087b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087aa:	2100      	movs	r1, #0
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f965 	bl	8008a7c <USB_SetDevSpeed>
 80087b2:	e008      	b.n	80087c6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087b4:	2101      	movs	r1, #1
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f960 	bl	8008a7c <USB_SetDevSpeed>
 80087bc:	e003      	b.n	80087c6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087be:	2103      	movs	r1, #3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f95b 	bl	8008a7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087c6:	2110      	movs	r1, #16
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f8f3 	bl	80089b4 <USB_FlushTxFifo>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f91f 	bl	8008a1c <USB_FlushRxFifo>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ee:	461a      	mov	r2, r3
 80087f0:	2300      	movs	r3, #0
 80087f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087fa:	461a      	mov	r2, r3
 80087fc:	2300      	movs	r3, #0
 80087fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008806:	461a      	mov	r2, r3
 8008808:	2300      	movs	r3, #0
 800880a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800880c:	2300      	movs	r3, #0
 800880e:	613b      	str	r3, [r7, #16]
 8008810:	e043      	b.n	800889a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	015a      	lsls	r2, r3, #5
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	4413      	add	r3, r2
 800881a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008828:	d118      	bne.n	800885c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10a      	bne.n	8008846 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800883c:	461a      	mov	r2, r3
 800883e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008842:	6013      	str	r3, [r2, #0]
 8008844:	e013      	b.n	800886e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	4413      	add	r3, r2
 800884e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008852:	461a      	mov	r2, r3
 8008854:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008858:	6013      	str	r3, [r2, #0]
 800885a:	e008      	b.n	800886e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008868:	461a      	mov	r2, r3
 800886a:	2300      	movs	r3, #0
 800886c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800887a:	461a      	mov	r2, r3
 800887c:	2300      	movs	r3, #0
 800887e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888c:	461a      	mov	r2, r3
 800888e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008892:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	3301      	adds	r3, #1
 8008898:	613b      	str	r3, [r7, #16]
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d3b7      	bcc.n	8008812 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]
 80088a6:	e043      	b.n	8008930 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088be:	d118      	bne.n	80088f2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10a      	bne.n	80088dc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d2:	461a      	mov	r2, r3
 80088d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	e013      	b.n	8008904 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e8:	461a      	mov	r2, r3
 80088ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	e008      	b.n	8008904 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fe:	461a      	mov	r2, r3
 8008900:	2300      	movs	r3, #0
 8008902:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008910:	461a      	mov	r2, r3
 8008912:	2300      	movs	r3, #0
 8008914:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008922:	461a      	mov	r2, r3
 8008924:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008928:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	3301      	adds	r3, #1
 800892e:	613b      	str	r3, [r7, #16]
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	429a      	cmp	r2, r3
 8008936:	d3b7      	bcc.n	80088a8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800894a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008958:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895c:	2b00      	cmp	r3, #0
 800895e:	d105      	bne.n	800896c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	f043 0210 	orr.w	r2, r3, #16
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	699a      	ldr	r2, [r3, #24]
 8008970:	4b0e      	ldr	r3, [pc, #56]	; (80089ac <USB_DevInit+0x2b4>)
 8008972:	4313      	orrs	r3, r2
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	f043 0208 	orr.w	r2, r3, #8
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800898a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898c:	2b01      	cmp	r3, #1
 800898e:	d105      	bne.n	800899c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	699a      	ldr	r2, [r3, #24]
 8008994:	4b06      	ldr	r3, [pc, #24]	; (80089b0 <USB_DevInit+0x2b8>)
 8008996:	4313      	orrs	r3, r2
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800899c:	7dfb      	ldrb	r3, [r7, #23]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089a8:	b004      	add	sp, #16
 80089aa:	4770      	bx	lr
 80089ac:	803c3800 	.word	0x803c3800
 80089b0:	40000004 	.word	0x40000004

080089b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089be:	2300      	movs	r3, #0
 80089c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3301      	adds	r3, #1
 80089c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4a13      	ldr	r2, [pc, #76]	; (8008a18 <USB_FlushTxFifo+0x64>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d901      	bls.n	80089d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e01b      	b.n	8008a0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	daf2      	bge.n	80089c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	019b      	lsls	r3, r3, #6
 80089e4:	f043 0220 	orr.w	r2, r3, #32
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3301      	adds	r3, #1
 80089f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	4a08      	ldr	r2, [pc, #32]	; (8008a18 <USB_FlushTxFifo+0x64>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d901      	bls.n	80089fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e006      	b.n	8008a0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f003 0320 	and.w	r3, r3, #32
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	d0f0      	beq.n	80089ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	00030d40 	.word	0x00030d40

08008a1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4a11      	ldr	r2, [pc, #68]	; (8008a78 <USB_FlushRxFifo+0x5c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d901      	bls.n	8008a3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e018      	b.n	8008a6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	daf2      	bge.n	8008a28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2210      	movs	r2, #16
 8008a4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4a08      	ldr	r2, [pc, #32]	; (8008a78 <USB_FlushRxFifo+0x5c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d901      	bls.n	8008a5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e006      	b.n	8008a6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f003 0310 	and.w	r3, r3, #16
 8008a66:	2b10      	cmp	r3, #16
 8008a68:	d0f0      	beq.n	8008a4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	00030d40 	.word	0x00030d40

08008a7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	78fb      	ldrb	r3, [r7, #3]
 8008a96:	68f9      	ldr	r1, [r7, #12]
 8008a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b085      	sub	sp, #20
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ac8:	f023 0303 	bic.w	r3, r3, #3
 8008acc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008adc:	f043 0302 	orr.w	r3, r3, #2
 8008ae0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	f003 0301 	and.w	r3, r3, #1
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4a13      	ldr	r2, [pc, #76]	; (8008b70 <USB_CoreReset+0x64>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d901      	bls.n	8008b2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e01b      	b.n	8008b62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	daf2      	bge.n	8008b18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f043 0201 	orr.w	r2, r3, #1
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3301      	adds	r3, #1
 8008b46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4a09      	ldr	r2, [pc, #36]	; (8008b70 <USB_CoreReset+0x64>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d901      	bls.n	8008b54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e006      	b.n	8008b62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d0f0      	beq.n	8008b42 <USB_CoreReset+0x36>

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	00030d40 	.word	0x00030d40

08008b74 <ceilf>:
 8008b74:	ee10 3a10 	vmov	r3, s0
 8008b78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008b7c:	3a7f      	subs	r2, #127	; 0x7f
 8008b7e:	2a16      	cmp	r2, #22
 8008b80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008b84:	dc2a      	bgt.n	8008bdc <ceilf+0x68>
 8008b86:	2a00      	cmp	r2, #0
 8008b88:	da11      	bge.n	8008bae <ceilf+0x3a>
 8008b8a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008bf0 <ceilf+0x7c>
 8008b8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008b92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9a:	dd05      	ble.n	8008ba8 <ceilf+0x34>
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	db23      	blt.n	8008be8 <ceilf+0x74>
 8008ba0:	2900      	cmp	r1, #0
 8008ba2:	bf18      	it	ne
 8008ba4:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8008ba8:	ee00 3a10 	vmov	s0, r3
 8008bac:	4770      	bx	lr
 8008bae:	4911      	ldr	r1, [pc, #68]	; (8008bf4 <ceilf+0x80>)
 8008bb0:	4111      	asrs	r1, r2
 8008bb2:	420b      	tst	r3, r1
 8008bb4:	d0fa      	beq.n	8008bac <ceilf+0x38>
 8008bb6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008bf0 <ceilf+0x7c>
 8008bba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008bbe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc6:	ddef      	ble.n	8008ba8 <ceilf+0x34>
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	bfc2      	ittt	gt
 8008bcc:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8008bd0:	fa40 f202 	asrgt.w	r2, r0, r2
 8008bd4:	189b      	addgt	r3, r3, r2
 8008bd6:	ea23 0301 	bic.w	r3, r3, r1
 8008bda:	e7e5      	b.n	8008ba8 <ceilf+0x34>
 8008bdc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008be0:	d3e4      	bcc.n	8008bac <ceilf+0x38>
 8008be2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008be6:	4770      	bx	lr
 8008be8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bec:	e7dc      	b.n	8008ba8 <ceilf+0x34>
 8008bee:	bf00      	nop
 8008bf0:	7149f2ca 	.word	0x7149f2ca
 8008bf4:	007fffff 	.word	0x007fffff

08008bf8 <siprintf>:
 8008bf8:	b40e      	push	{r1, r2, r3}
 8008bfa:	b500      	push	{lr}
 8008bfc:	b09c      	sub	sp, #112	; 0x70
 8008bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8008c00:	9002      	str	r0, [sp, #8]
 8008c02:	9006      	str	r0, [sp, #24]
 8008c04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c08:	4809      	ldr	r0, [pc, #36]	; (8008c30 <siprintf+0x38>)
 8008c0a:	9107      	str	r1, [sp, #28]
 8008c0c:	9104      	str	r1, [sp, #16]
 8008c0e:	4909      	ldr	r1, [pc, #36]	; (8008c34 <siprintf+0x3c>)
 8008c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c14:	9105      	str	r1, [sp, #20]
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	a902      	add	r1, sp, #8
 8008c1c:	f000 f992 	bl	8008f44 <_svfiprintf_r>
 8008c20:	9b02      	ldr	r3, [sp, #8]
 8008c22:	2200      	movs	r2, #0
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	b01c      	add	sp, #112	; 0x70
 8008c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c2c:	b003      	add	sp, #12
 8008c2e:	4770      	bx	lr
 8008c30:	24000070 	.word	0x24000070
 8008c34:	ffff0208 	.word	0xffff0208

08008c38 <memset>:
 8008c38:	4402      	add	r2, r0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d100      	bne.n	8008c42 <memset+0xa>
 8008c40:	4770      	bx	lr
 8008c42:	f803 1b01 	strb.w	r1, [r3], #1
 8008c46:	e7f9      	b.n	8008c3c <memset+0x4>

08008c48 <__errno>:
 8008c48:	4b01      	ldr	r3, [pc, #4]	; (8008c50 <__errno+0x8>)
 8008c4a:	6818      	ldr	r0, [r3, #0]
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	24000070 	.word	0x24000070

08008c54 <__libc_init_array>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	4d0d      	ldr	r5, [pc, #52]	; (8008c8c <__libc_init_array+0x38>)
 8008c58:	4c0d      	ldr	r4, [pc, #52]	; (8008c90 <__libc_init_array+0x3c>)
 8008c5a:	1b64      	subs	r4, r4, r5
 8008c5c:	10a4      	asrs	r4, r4, #2
 8008c5e:	2600      	movs	r6, #0
 8008c60:	42a6      	cmp	r6, r4
 8008c62:	d109      	bne.n	8008c78 <__libc_init_array+0x24>
 8008c64:	4d0b      	ldr	r5, [pc, #44]	; (8008c94 <__libc_init_array+0x40>)
 8008c66:	4c0c      	ldr	r4, [pc, #48]	; (8008c98 <__libc_init_array+0x44>)
 8008c68:	f000 fc6a 	bl	8009540 <_init>
 8008c6c:	1b64      	subs	r4, r4, r5
 8008c6e:	10a4      	asrs	r4, r4, #2
 8008c70:	2600      	movs	r6, #0
 8008c72:	42a6      	cmp	r6, r4
 8008c74:	d105      	bne.n	8008c82 <__libc_init_array+0x2e>
 8008c76:	bd70      	pop	{r4, r5, r6, pc}
 8008c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c7c:	4798      	blx	r3
 8008c7e:	3601      	adds	r6, #1
 8008c80:	e7ee      	b.n	8008c60 <__libc_init_array+0xc>
 8008c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c86:	4798      	blx	r3
 8008c88:	3601      	adds	r6, #1
 8008c8a:	e7f2      	b.n	8008c72 <__libc_init_array+0x1e>
 8008c8c:	0800aa68 	.word	0x0800aa68
 8008c90:	0800aa68 	.word	0x0800aa68
 8008c94:	0800aa68 	.word	0x0800aa68
 8008c98:	0800aa6c 	.word	0x0800aa6c

08008c9c <__retarget_lock_acquire_recursive>:
 8008c9c:	4770      	bx	lr

08008c9e <__retarget_lock_release_recursive>:
 8008c9e:	4770      	bx	lr

08008ca0 <_free_r>:
 8008ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ca2:	2900      	cmp	r1, #0
 8008ca4:	d044      	beq.n	8008d30 <_free_r+0x90>
 8008ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008caa:	9001      	str	r0, [sp, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f1a1 0404 	sub.w	r4, r1, #4
 8008cb2:	bfb8      	it	lt
 8008cb4:	18e4      	addlt	r4, r4, r3
 8008cb6:	f000 f8df 	bl	8008e78 <__malloc_lock>
 8008cba:	4a1e      	ldr	r2, [pc, #120]	; (8008d34 <_free_r+0x94>)
 8008cbc:	9801      	ldr	r0, [sp, #4]
 8008cbe:	6813      	ldr	r3, [r2, #0]
 8008cc0:	b933      	cbnz	r3, 8008cd0 <_free_r+0x30>
 8008cc2:	6063      	str	r3, [r4, #4]
 8008cc4:	6014      	str	r4, [r2, #0]
 8008cc6:	b003      	add	sp, #12
 8008cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ccc:	f000 b8da 	b.w	8008e84 <__malloc_unlock>
 8008cd0:	42a3      	cmp	r3, r4
 8008cd2:	d908      	bls.n	8008ce6 <_free_r+0x46>
 8008cd4:	6825      	ldr	r5, [r4, #0]
 8008cd6:	1961      	adds	r1, r4, r5
 8008cd8:	428b      	cmp	r3, r1
 8008cda:	bf01      	itttt	eq
 8008cdc:	6819      	ldreq	r1, [r3, #0]
 8008cde:	685b      	ldreq	r3, [r3, #4]
 8008ce0:	1949      	addeq	r1, r1, r5
 8008ce2:	6021      	streq	r1, [r4, #0]
 8008ce4:	e7ed      	b.n	8008cc2 <_free_r+0x22>
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	b10b      	cbz	r3, 8008cf0 <_free_r+0x50>
 8008cec:	42a3      	cmp	r3, r4
 8008cee:	d9fa      	bls.n	8008ce6 <_free_r+0x46>
 8008cf0:	6811      	ldr	r1, [r2, #0]
 8008cf2:	1855      	adds	r5, r2, r1
 8008cf4:	42a5      	cmp	r5, r4
 8008cf6:	d10b      	bne.n	8008d10 <_free_r+0x70>
 8008cf8:	6824      	ldr	r4, [r4, #0]
 8008cfa:	4421      	add	r1, r4
 8008cfc:	1854      	adds	r4, r2, r1
 8008cfe:	42a3      	cmp	r3, r4
 8008d00:	6011      	str	r1, [r2, #0]
 8008d02:	d1e0      	bne.n	8008cc6 <_free_r+0x26>
 8008d04:	681c      	ldr	r4, [r3, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	6053      	str	r3, [r2, #4]
 8008d0a:	440c      	add	r4, r1
 8008d0c:	6014      	str	r4, [r2, #0]
 8008d0e:	e7da      	b.n	8008cc6 <_free_r+0x26>
 8008d10:	d902      	bls.n	8008d18 <_free_r+0x78>
 8008d12:	230c      	movs	r3, #12
 8008d14:	6003      	str	r3, [r0, #0]
 8008d16:	e7d6      	b.n	8008cc6 <_free_r+0x26>
 8008d18:	6825      	ldr	r5, [r4, #0]
 8008d1a:	1961      	adds	r1, r4, r5
 8008d1c:	428b      	cmp	r3, r1
 8008d1e:	bf04      	itt	eq
 8008d20:	6819      	ldreq	r1, [r3, #0]
 8008d22:	685b      	ldreq	r3, [r3, #4]
 8008d24:	6063      	str	r3, [r4, #4]
 8008d26:	bf04      	itt	eq
 8008d28:	1949      	addeq	r1, r1, r5
 8008d2a:	6021      	streq	r1, [r4, #0]
 8008d2c:	6054      	str	r4, [r2, #4]
 8008d2e:	e7ca      	b.n	8008cc6 <_free_r+0x26>
 8008d30:	b003      	add	sp, #12
 8008d32:	bd30      	pop	{r4, r5, pc}
 8008d34:	24000aa0 	.word	0x24000aa0

08008d38 <sbrk_aligned>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	4e0e      	ldr	r6, [pc, #56]	; (8008d74 <sbrk_aligned+0x3c>)
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	6831      	ldr	r1, [r6, #0]
 8008d40:	4605      	mov	r5, r0
 8008d42:	b911      	cbnz	r1, 8008d4a <sbrk_aligned+0x12>
 8008d44:	f000 fba6 	bl	8009494 <_sbrk_r>
 8008d48:	6030      	str	r0, [r6, #0]
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f000 fba1 	bl	8009494 <_sbrk_r>
 8008d52:	1c43      	adds	r3, r0, #1
 8008d54:	d00a      	beq.n	8008d6c <sbrk_aligned+0x34>
 8008d56:	1cc4      	adds	r4, r0, #3
 8008d58:	f024 0403 	bic.w	r4, r4, #3
 8008d5c:	42a0      	cmp	r0, r4
 8008d5e:	d007      	beq.n	8008d70 <sbrk_aligned+0x38>
 8008d60:	1a21      	subs	r1, r4, r0
 8008d62:	4628      	mov	r0, r5
 8008d64:	f000 fb96 	bl	8009494 <_sbrk_r>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d101      	bne.n	8008d70 <sbrk_aligned+0x38>
 8008d6c:	f04f 34ff 	mov.w	r4, #4294967295
 8008d70:	4620      	mov	r0, r4
 8008d72:	bd70      	pop	{r4, r5, r6, pc}
 8008d74:	24000aa4 	.word	0x24000aa4

08008d78 <_malloc_r>:
 8008d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d7c:	1ccd      	adds	r5, r1, #3
 8008d7e:	f025 0503 	bic.w	r5, r5, #3
 8008d82:	3508      	adds	r5, #8
 8008d84:	2d0c      	cmp	r5, #12
 8008d86:	bf38      	it	cc
 8008d88:	250c      	movcc	r5, #12
 8008d8a:	2d00      	cmp	r5, #0
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	db01      	blt.n	8008d94 <_malloc_r+0x1c>
 8008d90:	42a9      	cmp	r1, r5
 8008d92:	d905      	bls.n	8008da0 <_malloc_r+0x28>
 8008d94:	230c      	movs	r3, #12
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	2600      	movs	r6, #0
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008da0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e74 <_malloc_r+0xfc>
 8008da4:	f000 f868 	bl	8008e78 <__malloc_lock>
 8008da8:	f8d8 3000 	ldr.w	r3, [r8]
 8008dac:	461c      	mov	r4, r3
 8008dae:	bb5c      	cbnz	r4, 8008e08 <_malloc_r+0x90>
 8008db0:	4629      	mov	r1, r5
 8008db2:	4638      	mov	r0, r7
 8008db4:	f7ff ffc0 	bl	8008d38 <sbrk_aligned>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	4604      	mov	r4, r0
 8008dbc:	d155      	bne.n	8008e6a <_malloc_r+0xf2>
 8008dbe:	f8d8 4000 	ldr.w	r4, [r8]
 8008dc2:	4626      	mov	r6, r4
 8008dc4:	2e00      	cmp	r6, #0
 8008dc6:	d145      	bne.n	8008e54 <_malloc_r+0xdc>
 8008dc8:	2c00      	cmp	r4, #0
 8008dca:	d048      	beq.n	8008e5e <_malloc_r+0xe6>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	eb04 0903 	add.w	r9, r4, r3
 8008dd6:	f000 fb5d 	bl	8009494 <_sbrk_r>
 8008dda:	4581      	cmp	r9, r0
 8008ddc:	d13f      	bne.n	8008e5e <_malloc_r+0xe6>
 8008dde:	6821      	ldr	r1, [r4, #0]
 8008de0:	1a6d      	subs	r5, r5, r1
 8008de2:	4629      	mov	r1, r5
 8008de4:	4638      	mov	r0, r7
 8008de6:	f7ff ffa7 	bl	8008d38 <sbrk_aligned>
 8008dea:	3001      	adds	r0, #1
 8008dec:	d037      	beq.n	8008e5e <_malloc_r+0xe6>
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	442b      	add	r3, r5
 8008df2:	6023      	str	r3, [r4, #0]
 8008df4:	f8d8 3000 	ldr.w	r3, [r8]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d038      	beq.n	8008e6e <_malloc_r+0xf6>
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	42a2      	cmp	r2, r4
 8008e00:	d12b      	bne.n	8008e5a <_malloc_r+0xe2>
 8008e02:	2200      	movs	r2, #0
 8008e04:	605a      	str	r2, [r3, #4]
 8008e06:	e00f      	b.n	8008e28 <_malloc_r+0xb0>
 8008e08:	6822      	ldr	r2, [r4, #0]
 8008e0a:	1b52      	subs	r2, r2, r5
 8008e0c:	d41f      	bmi.n	8008e4e <_malloc_r+0xd6>
 8008e0e:	2a0b      	cmp	r2, #11
 8008e10:	d917      	bls.n	8008e42 <_malloc_r+0xca>
 8008e12:	1961      	adds	r1, r4, r5
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	6025      	str	r5, [r4, #0]
 8008e18:	bf18      	it	ne
 8008e1a:	6059      	strne	r1, [r3, #4]
 8008e1c:	6863      	ldr	r3, [r4, #4]
 8008e1e:	bf08      	it	eq
 8008e20:	f8c8 1000 	streq.w	r1, [r8]
 8008e24:	5162      	str	r2, [r4, r5]
 8008e26:	604b      	str	r3, [r1, #4]
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f104 060b 	add.w	r6, r4, #11
 8008e2e:	f000 f829 	bl	8008e84 <__malloc_unlock>
 8008e32:	f026 0607 	bic.w	r6, r6, #7
 8008e36:	1d23      	adds	r3, r4, #4
 8008e38:	1af2      	subs	r2, r6, r3
 8008e3a:	d0ae      	beq.n	8008d9a <_malloc_r+0x22>
 8008e3c:	1b9b      	subs	r3, r3, r6
 8008e3e:	50a3      	str	r3, [r4, r2]
 8008e40:	e7ab      	b.n	8008d9a <_malloc_r+0x22>
 8008e42:	42a3      	cmp	r3, r4
 8008e44:	6862      	ldr	r2, [r4, #4]
 8008e46:	d1dd      	bne.n	8008e04 <_malloc_r+0x8c>
 8008e48:	f8c8 2000 	str.w	r2, [r8]
 8008e4c:	e7ec      	b.n	8008e28 <_malloc_r+0xb0>
 8008e4e:	4623      	mov	r3, r4
 8008e50:	6864      	ldr	r4, [r4, #4]
 8008e52:	e7ac      	b.n	8008dae <_malloc_r+0x36>
 8008e54:	4634      	mov	r4, r6
 8008e56:	6876      	ldr	r6, [r6, #4]
 8008e58:	e7b4      	b.n	8008dc4 <_malloc_r+0x4c>
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	e7cc      	b.n	8008df8 <_malloc_r+0x80>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	603b      	str	r3, [r7, #0]
 8008e62:	4638      	mov	r0, r7
 8008e64:	f000 f80e 	bl	8008e84 <__malloc_unlock>
 8008e68:	e797      	b.n	8008d9a <_malloc_r+0x22>
 8008e6a:	6025      	str	r5, [r4, #0]
 8008e6c:	e7dc      	b.n	8008e28 <_malloc_r+0xb0>
 8008e6e:	605b      	str	r3, [r3, #4]
 8008e70:	deff      	udf	#255	; 0xff
 8008e72:	bf00      	nop
 8008e74:	24000aa0 	.word	0x24000aa0

08008e78 <__malloc_lock>:
 8008e78:	4801      	ldr	r0, [pc, #4]	; (8008e80 <__malloc_lock+0x8>)
 8008e7a:	f7ff bf0f 	b.w	8008c9c <__retarget_lock_acquire_recursive>
 8008e7e:	bf00      	nop
 8008e80:	24000a9c 	.word	0x24000a9c

08008e84 <__malloc_unlock>:
 8008e84:	4801      	ldr	r0, [pc, #4]	; (8008e8c <__malloc_unlock+0x8>)
 8008e86:	f7ff bf0a 	b.w	8008c9e <__retarget_lock_release_recursive>
 8008e8a:	bf00      	nop
 8008e8c:	24000a9c 	.word	0x24000a9c

08008e90 <__ssputs_r>:
 8008e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e94:	688e      	ldr	r6, [r1, #8]
 8008e96:	461f      	mov	r7, r3
 8008e98:	42be      	cmp	r6, r7
 8008e9a:	680b      	ldr	r3, [r1, #0]
 8008e9c:	4682      	mov	sl, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	4690      	mov	r8, r2
 8008ea2:	d82c      	bhi.n	8008efe <__ssputs_r+0x6e>
 8008ea4:	898a      	ldrh	r2, [r1, #12]
 8008ea6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008eaa:	d026      	beq.n	8008efa <__ssputs_r+0x6a>
 8008eac:	6965      	ldr	r5, [r4, #20]
 8008eae:	6909      	ldr	r1, [r1, #16]
 8008eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008eb4:	eba3 0901 	sub.w	r9, r3, r1
 8008eb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ebc:	1c7b      	adds	r3, r7, #1
 8008ebe:	444b      	add	r3, r9
 8008ec0:	106d      	asrs	r5, r5, #1
 8008ec2:	429d      	cmp	r5, r3
 8008ec4:	bf38      	it	cc
 8008ec6:	461d      	movcc	r5, r3
 8008ec8:	0553      	lsls	r3, r2, #21
 8008eca:	d527      	bpl.n	8008f1c <__ssputs_r+0x8c>
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f7ff ff53 	bl	8008d78 <_malloc_r>
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	b360      	cbz	r0, 8008f30 <__ssputs_r+0xa0>
 8008ed6:	6921      	ldr	r1, [r4, #16]
 8008ed8:	464a      	mov	r2, r9
 8008eda:	f000 faeb 	bl	80094b4 <memcpy>
 8008ede:	89a3      	ldrh	r3, [r4, #12]
 8008ee0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee8:	81a3      	strh	r3, [r4, #12]
 8008eea:	6126      	str	r6, [r4, #16]
 8008eec:	6165      	str	r5, [r4, #20]
 8008eee:	444e      	add	r6, r9
 8008ef0:	eba5 0509 	sub.w	r5, r5, r9
 8008ef4:	6026      	str	r6, [r4, #0]
 8008ef6:	60a5      	str	r5, [r4, #8]
 8008ef8:	463e      	mov	r6, r7
 8008efa:	42be      	cmp	r6, r7
 8008efc:	d900      	bls.n	8008f00 <__ssputs_r+0x70>
 8008efe:	463e      	mov	r6, r7
 8008f00:	6820      	ldr	r0, [r4, #0]
 8008f02:	4632      	mov	r2, r6
 8008f04:	4641      	mov	r1, r8
 8008f06:	f000 faab 	bl	8009460 <memmove>
 8008f0a:	68a3      	ldr	r3, [r4, #8]
 8008f0c:	1b9b      	subs	r3, r3, r6
 8008f0e:	60a3      	str	r3, [r4, #8]
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	4433      	add	r3, r6
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	2000      	movs	r0, #0
 8008f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f1c:	462a      	mov	r2, r5
 8008f1e:	f000 fad7 	bl	80094d0 <_realloc_r>
 8008f22:	4606      	mov	r6, r0
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d1e0      	bne.n	8008eea <__ssputs_r+0x5a>
 8008f28:	6921      	ldr	r1, [r4, #16]
 8008f2a:	4650      	mov	r0, sl
 8008f2c:	f7ff feb8 	bl	8008ca0 <_free_r>
 8008f30:	230c      	movs	r3, #12
 8008f32:	f8ca 3000 	str.w	r3, [sl]
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f42:	e7e9      	b.n	8008f18 <__ssputs_r+0x88>

08008f44 <_svfiprintf_r>:
 8008f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f48:	4698      	mov	r8, r3
 8008f4a:	898b      	ldrh	r3, [r1, #12]
 8008f4c:	061b      	lsls	r3, r3, #24
 8008f4e:	b09d      	sub	sp, #116	; 0x74
 8008f50:	4607      	mov	r7, r0
 8008f52:	460d      	mov	r5, r1
 8008f54:	4614      	mov	r4, r2
 8008f56:	d50e      	bpl.n	8008f76 <_svfiprintf_r+0x32>
 8008f58:	690b      	ldr	r3, [r1, #16]
 8008f5a:	b963      	cbnz	r3, 8008f76 <_svfiprintf_r+0x32>
 8008f5c:	2140      	movs	r1, #64	; 0x40
 8008f5e:	f7ff ff0b 	bl	8008d78 <_malloc_r>
 8008f62:	6028      	str	r0, [r5, #0]
 8008f64:	6128      	str	r0, [r5, #16]
 8008f66:	b920      	cbnz	r0, 8008f72 <_svfiprintf_r+0x2e>
 8008f68:	230c      	movs	r3, #12
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f70:	e0d0      	b.n	8009114 <_svfiprintf_r+0x1d0>
 8008f72:	2340      	movs	r3, #64	; 0x40
 8008f74:	616b      	str	r3, [r5, #20]
 8008f76:	2300      	movs	r3, #0
 8008f78:	9309      	str	r3, [sp, #36]	; 0x24
 8008f7a:	2320      	movs	r3, #32
 8008f7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f80:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f84:	2330      	movs	r3, #48	; 0x30
 8008f86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800912c <_svfiprintf_r+0x1e8>
 8008f8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f8e:	f04f 0901 	mov.w	r9, #1
 8008f92:	4623      	mov	r3, r4
 8008f94:	469a      	mov	sl, r3
 8008f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f9a:	b10a      	cbz	r2, 8008fa0 <_svfiprintf_r+0x5c>
 8008f9c:	2a25      	cmp	r2, #37	; 0x25
 8008f9e:	d1f9      	bne.n	8008f94 <_svfiprintf_r+0x50>
 8008fa0:	ebba 0b04 	subs.w	fp, sl, r4
 8008fa4:	d00b      	beq.n	8008fbe <_svfiprintf_r+0x7a>
 8008fa6:	465b      	mov	r3, fp
 8008fa8:	4622      	mov	r2, r4
 8008faa:	4629      	mov	r1, r5
 8008fac:	4638      	mov	r0, r7
 8008fae:	f7ff ff6f 	bl	8008e90 <__ssputs_r>
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	f000 80a9 	beq.w	800910a <_svfiprintf_r+0x1c6>
 8008fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fba:	445a      	add	r2, fp
 8008fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8008fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 80a1 	beq.w	800910a <_svfiprintf_r+0x1c6>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f04f 32ff 	mov.w	r2, #4294967295
 8008fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fd2:	f10a 0a01 	add.w	sl, sl, #1
 8008fd6:	9304      	str	r3, [sp, #16]
 8008fd8:	9307      	str	r3, [sp, #28]
 8008fda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fde:	931a      	str	r3, [sp, #104]	; 0x68
 8008fe0:	4654      	mov	r4, sl
 8008fe2:	2205      	movs	r2, #5
 8008fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe8:	4850      	ldr	r0, [pc, #320]	; (800912c <_svfiprintf_r+0x1e8>)
 8008fea:	f7f7 f979 	bl	80002e0 <memchr>
 8008fee:	9a04      	ldr	r2, [sp, #16]
 8008ff0:	b9d8      	cbnz	r0, 800902a <_svfiprintf_r+0xe6>
 8008ff2:	06d0      	lsls	r0, r2, #27
 8008ff4:	bf44      	itt	mi
 8008ff6:	2320      	movmi	r3, #32
 8008ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ffc:	0711      	lsls	r1, r2, #28
 8008ffe:	bf44      	itt	mi
 8009000:	232b      	movmi	r3, #43	; 0x2b
 8009002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009006:	f89a 3000 	ldrb.w	r3, [sl]
 800900a:	2b2a      	cmp	r3, #42	; 0x2a
 800900c:	d015      	beq.n	800903a <_svfiprintf_r+0xf6>
 800900e:	9a07      	ldr	r2, [sp, #28]
 8009010:	4654      	mov	r4, sl
 8009012:	2000      	movs	r0, #0
 8009014:	f04f 0c0a 	mov.w	ip, #10
 8009018:	4621      	mov	r1, r4
 800901a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800901e:	3b30      	subs	r3, #48	; 0x30
 8009020:	2b09      	cmp	r3, #9
 8009022:	d94d      	bls.n	80090c0 <_svfiprintf_r+0x17c>
 8009024:	b1b0      	cbz	r0, 8009054 <_svfiprintf_r+0x110>
 8009026:	9207      	str	r2, [sp, #28]
 8009028:	e014      	b.n	8009054 <_svfiprintf_r+0x110>
 800902a:	eba0 0308 	sub.w	r3, r0, r8
 800902e:	fa09 f303 	lsl.w	r3, r9, r3
 8009032:	4313      	orrs	r3, r2
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	46a2      	mov	sl, r4
 8009038:	e7d2      	b.n	8008fe0 <_svfiprintf_r+0x9c>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	1d19      	adds	r1, r3, #4
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	9103      	str	r1, [sp, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	bfbb      	ittet	lt
 8009046:	425b      	neglt	r3, r3
 8009048:	f042 0202 	orrlt.w	r2, r2, #2
 800904c:	9307      	strge	r3, [sp, #28]
 800904e:	9307      	strlt	r3, [sp, #28]
 8009050:	bfb8      	it	lt
 8009052:	9204      	strlt	r2, [sp, #16]
 8009054:	7823      	ldrb	r3, [r4, #0]
 8009056:	2b2e      	cmp	r3, #46	; 0x2e
 8009058:	d10c      	bne.n	8009074 <_svfiprintf_r+0x130>
 800905a:	7863      	ldrb	r3, [r4, #1]
 800905c:	2b2a      	cmp	r3, #42	; 0x2a
 800905e:	d134      	bne.n	80090ca <_svfiprintf_r+0x186>
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	1d1a      	adds	r2, r3, #4
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	9203      	str	r2, [sp, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	bfb8      	it	lt
 800906c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009070:	3402      	adds	r4, #2
 8009072:	9305      	str	r3, [sp, #20]
 8009074:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800913c <_svfiprintf_r+0x1f8>
 8009078:	7821      	ldrb	r1, [r4, #0]
 800907a:	2203      	movs	r2, #3
 800907c:	4650      	mov	r0, sl
 800907e:	f7f7 f92f 	bl	80002e0 <memchr>
 8009082:	b138      	cbz	r0, 8009094 <_svfiprintf_r+0x150>
 8009084:	9b04      	ldr	r3, [sp, #16]
 8009086:	eba0 000a 	sub.w	r0, r0, sl
 800908a:	2240      	movs	r2, #64	; 0x40
 800908c:	4082      	lsls	r2, r0
 800908e:	4313      	orrs	r3, r2
 8009090:	3401      	adds	r4, #1
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009098:	4825      	ldr	r0, [pc, #148]	; (8009130 <_svfiprintf_r+0x1ec>)
 800909a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800909e:	2206      	movs	r2, #6
 80090a0:	f7f7 f91e 	bl	80002e0 <memchr>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d038      	beq.n	800911a <_svfiprintf_r+0x1d6>
 80090a8:	4b22      	ldr	r3, [pc, #136]	; (8009134 <_svfiprintf_r+0x1f0>)
 80090aa:	bb1b      	cbnz	r3, 80090f4 <_svfiprintf_r+0x1b0>
 80090ac:	9b03      	ldr	r3, [sp, #12]
 80090ae:	3307      	adds	r3, #7
 80090b0:	f023 0307 	bic.w	r3, r3, #7
 80090b4:	3308      	adds	r3, #8
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ba:	4433      	add	r3, r6
 80090bc:	9309      	str	r3, [sp, #36]	; 0x24
 80090be:	e768      	b.n	8008f92 <_svfiprintf_r+0x4e>
 80090c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80090c4:	460c      	mov	r4, r1
 80090c6:	2001      	movs	r0, #1
 80090c8:	e7a6      	b.n	8009018 <_svfiprintf_r+0xd4>
 80090ca:	2300      	movs	r3, #0
 80090cc:	3401      	adds	r4, #1
 80090ce:	9305      	str	r3, [sp, #20]
 80090d0:	4619      	mov	r1, r3
 80090d2:	f04f 0c0a 	mov.w	ip, #10
 80090d6:	4620      	mov	r0, r4
 80090d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090dc:	3a30      	subs	r2, #48	; 0x30
 80090de:	2a09      	cmp	r2, #9
 80090e0:	d903      	bls.n	80090ea <_svfiprintf_r+0x1a6>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0c6      	beq.n	8009074 <_svfiprintf_r+0x130>
 80090e6:	9105      	str	r1, [sp, #20]
 80090e8:	e7c4      	b.n	8009074 <_svfiprintf_r+0x130>
 80090ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80090ee:	4604      	mov	r4, r0
 80090f0:	2301      	movs	r3, #1
 80090f2:	e7f0      	b.n	80090d6 <_svfiprintf_r+0x192>
 80090f4:	ab03      	add	r3, sp, #12
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	462a      	mov	r2, r5
 80090fa:	4b0f      	ldr	r3, [pc, #60]	; (8009138 <_svfiprintf_r+0x1f4>)
 80090fc:	a904      	add	r1, sp, #16
 80090fe:	4638      	mov	r0, r7
 8009100:	f3af 8000 	nop.w
 8009104:	1c42      	adds	r2, r0, #1
 8009106:	4606      	mov	r6, r0
 8009108:	d1d6      	bne.n	80090b8 <_svfiprintf_r+0x174>
 800910a:	89ab      	ldrh	r3, [r5, #12]
 800910c:	065b      	lsls	r3, r3, #25
 800910e:	f53f af2d 	bmi.w	8008f6c <_svfiprintf_r+0x28>
 8009112:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009114:	b01d      	add	sp, #116	; 0x74
 8009116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911a:	ab03      	add	r3, sp, #12
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	462a      	mov	r2, r5
 8009120:	4b05      	ldr	r3, [pc, #20]	; (8009138 <_svfiprintf_r+0x1f4>)
 8009122:	a904      	add	r1, sp, #16
 8009124:	4638      	mov	r0, r7
 8009126:	f000 f879 	bl	800921c <_printf_i>
 800912a:	e7eb      	b.n	8009104 <_svfiprintf_r+0x1c0>
 800912c:	0800aa2c 	.word	0x0800aa2c
 8009130:	0800aa36 	.word	0x0800aa36
 8009134:	00000000 	.word	0x00000000
 8009138:	08008e91 	.word	0x08008e91
 800913c:	0800aa32 	.word	0x0800aa32

08009140 <_printf_common>:
 8009140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	4616      	mov	r6, r2
 8009146:	4699      	mov	r9, r3
 8009148:	688a      	ldr	r2, [r1, #8]
 800914a:	690b      	ldr	r3, [r1, #16]
 800914c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009150:	4293      	cmp	r3, r2
 8009152:	bfb8      	it	lt
 8009154:	4613      	movlt	r3, r2
 8009156:	6033      	str	r3, [r6, #0]
 8009158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800915c:	4607      	mov	r7, r0
 800915e:	460c      	mov	r4, r1
 8009160:	b10a      	cbz	r2, 8009166 <_printf_common+0x26>
 8009162:	3301      	adds	r3, #1
 8009164:	6033      	str	r3, [r6, #0]
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	0699      	lsls	r1, r3, #26
 800916a:	bf42      	ittt	mi
 800916c:	6833      	ldrmi	r3, [r6, #0]
 800916e:	3302      	addmi	r3, #2
 8009170:	6033      	strmi	r3, [r6, #0]
 8009172:	6825      	ldr	r5, [r4, #0]
 8009174:	f015 0506 	ands.w	r5, r5, #6
 8009178:	d106      	bne.n	8009188 <_printf_common+0x48>
 800917a:	f104 0a19 	add.w	sl, r4, #25
 800917e:	68e3      	ldr	r3, [r4, #12]
 8009180:	6832      	ldr	r2, [r6, #0]
 8009182:	1a9b      	subs	r3, r3, r2
 8009184:	42ab      	cmp	r3, r5
 8009186:	dc26      	bgt.n	80091d6 <_printf_common+0x96>
 8009188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800918c:	1e13      	subs	r3, r2, #0
 800918e:	6822      	ldr	r2, [r4, #0]
 8009190:	bf18      	it	ne
 8009192:	2301      	movne	r3, #1
 8009194:	0692      	lsls	r2, r2, #26
 8009196:	d42b      	bmi.n	80091f0 <_printf_common+0xb0>
 8009198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800919c:	4649      	mov	r1, r9
 800919e:	4638      	mov	r0, r7
 80091a0:	47c0      	blx	r8
 80091a2:	3001      	adds	r0, #1
 80091a4:	d01e      	beq.n	80091e4 <_printf_common+0xa4>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	6922      	ldr	r2, [r4, #16]
 80091aa:	f003 0306 	and.w	r3, r3, #6
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	bf02      	ittt	eq
 80091b2:	68e5      	ldreq	r5, [r4, #12]
 80091b4:	6833      	ldreq	r3, [r6, #0]
 80091b6:	1aed      	subeq	r5, r5, r3
 80091b8:	68a3      	ldr	r3, [r4, #8]
 80091ba:	bf0c      	ite	eq
 80091bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091c0:	2500      	movne	r5, #0
 80091c2:	4293      	cmp	r3, r2
 80091c4:	bfc4      	itt	gt
 80091c6:	1a9b      	subgt	r3, r3, r2
 80091c8:	18ed      	addgt	r5, r5, r3
 80091ca:	2600      	movs	r6, #0
 80091cc:	341a      	adds	r4, #26
 80091ce:	42b5      	cmp	r5, r6
 80091d0:	d11a      	bne.n	8009208 <_printf_common+0xc8>
 80091d2:	2000      	movs	r0, #0
 80091d4:	e008      	b.n	80091e8 <_printf_common+0xa8>
 80091d6:	2301      	movs	r3, #1
 80091d8:	4652      	mov	r2, sl
 80091da:	4649      	mov	r1, r9
 80091dc:	4638      	mov	r0, r7
 80091de:	47c0      	blx	r8
 80091e0:	3001      	adds	r0, #1
 80091e2:	d103      	bne.n	80091ec <_printf_common+0xac>
 80091e4:	f04f 30ff 	mov.w	r0, #4294967295
 80091e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ec:	3501      	adds	r5, #1
 80091ee:	e7c6      	b.n	800917e <_printf_common+0x3e>
 80091f0:	18e1      	adds	r1, r4, r3
 80091f2:	1c5a      	adds	r2, r3, #1
 80091f4:	2030      	movs	r0, #48	; 0x30
 80091f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091fa:	4422      	add	r2, r4
 80091fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009204:	3302      	adds	r3, #2
 8009206:	e7c7      	b.n	8009198 <_printf_common+0x58>
 8009208:	2301      	movs	r3, #1
 800920a:	4622      	mov	r2, r4
 800920c:	4649      	mov	r1, r9
 800920e:	4638      	mov	r0, r7
 8009210:	47c0      	blx	r8
 8009212:	3001      	adds	r0, #1
 8009214:	d0e6      	beq.n	80091e4 <_printf_common+0xa4>
 8009216:	3601      	adds	r6, #1
 8009218:	e7d9      	b.n	80091ce <_printf_common+0x8e>
	...

0800921c <_printf_i>:
 800921c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	7e0f      	ldrb	r7, [r1, #24]
 8009222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009224:	2f78      	cmp	r7, #120	; 0x78
 8009226:	4691      	mov	r9, r2
 8009228:	4680      	mov	r8, r0
 800922a:	460c      	mov	r4, r1
 800922c:	469a      	mov	sl, r3
 800922e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009232:	d807      	bhi.n	8009244 <_printf_i+0x28>
 8009234:	2f62      	cmp	r7, #98	; 0x62
 8009236:	d80a      	bhi.n	800924e <_printf_i+0x32>
 8009238:	2f00      	cmp	r7, #0
 800923a:	f000 80d4 	beq.w	80093e6 <_printf_i+0x1ca>
 800923e:	2f58      	cmp	r7, #88	; 0x58
 8009240:	f000 80c0 	beq.w	80093c4 <_printf_i+0x1a8>
 8009244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800924c:	e03a      	b.n	80092c4 <_printf_i+0xa8>
 800924e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009252:	2b15      	cmp	r3, #21
 8009254:	d8f6      	bhi.n	8009244 <_printf_i+0x28>
 8009256:	a101      	add	r1, pc, #4	; (adr r1, 800925c <_printf_i+0x40>)
 8009258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800925c:	080092b5 	.word	0x080092b5
 8009260:	080092c9 	.word	0x080092c9
 8009264:	08009245 	.word	0x08009245
 8009268:	08009245 	.word	0x08009245
 800926c:	08009245 	.word	0x08009245
 8009270:	08009245 	.word	0x08009245
 8009274:	080092c9 	.word	0x080092c9
 8009278:	08009245 	.word	0x08009245
 800927c:	08009245 	.word	0x08009245
 8009280:	08009245 	.word	0x08009245
 8009284:	08009245 	.word	0x08009245
 8009288:	080093cd 	.word	0x080093cd
 800928c:	080092f5 	.word	0x080092f5
 8009290:	08009387 	.word	0x08009387
 8009294:	08009245 	.word	0x08009245
 8009298:	08009245 	.word	0x08009245
 800929c:	080093ef 	.word	0x080093ef
 80092a0:	08009245 	.word	0x08009245
 80092a4:	080092f5 	.word	0x080092f5
 80092a8:	08009245 	.word	0x08009245
 80092ac:	08009245 	.word	0x08009245
 80092b0:	0800938f 	.word	0x0800938f
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	1d1a      	adds	r2, r3, #4
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	602a      	str	r2, [r5, #0]
 80092bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092c4:	2301      	movs	r3, #1
 80092c6:	e09f      	b.n	8009408 <_printf_i+0x1ec>
 80092c8:	6820      	ldr	r0, [r4, #0]
 80092ca:	682b      	ldr	r3, [r5, #0]
 80092cc:	0607      	lsls	r7, r0, #24
 80092ce:	f103 0104 	add.w	r1, r3, #4
 80092d2:	6029      	str	r1, [r5, #0]
 80092d4:	d501      	bpl.n	80092da <_printf_i+0xbe>
 80092d6:	681e      	ldr	r6, [r3, #0]
 80092d8:	e003      	b.n	80092e2 <_printf_i+0xc6>
 80092da:	0646      	lsls	r6, r0, #25
 80092dc:	d5fb      	bpl.n	80092d6 <_printf_i+0xba>
 80092de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80092e2:	2e00      	cmp	r6, #0
 80092e4:	da03      	bge.n	80092ee <_printf_i+0xd2>
 80092e6:	232d      	movs	r3, #45	; 0x2d
 80092e8:	4276      	negs	r6, r6
 80092ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ee:	485a      	ldr	r0, [pc, #360]	; (8009458 <_printf_i+0x23c>)
 80092f0:	230a      	movs	r3, #10
 80092f2:	e012      	b.n	800931a <_printf_i+0xfe>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	6820      	ldr	r0, [r4, #0]
 80092f8:	1d19      	adds	r1, r3, #4
 80092fa:	6029      	str	r1, [r5, #0]
 80092fc:	0605      	lsls	r5, r0, #24
 80092fe:	d501      	bpl.n	8009304 <_printf_i+0xe8>
 8009300:	681e      	ldr	r6, [r3, #0]
 8009302:	e002      	b.n	800930a <_printf_i+0xee>
 8009304:	0641      	lsls	r1, r0, #25
 8009306:	d5fb      	bpl.n	8009300 <_printf_i+0xe4>
 8009308:	881e      	ldrh	r6, [r3, #0]
 800930a:	4853      	ldr	r0, [pc, #332]	; (8009458 <_printf_i+0x23c>)
 800930c:	2f6f      	cmp	r7, #111	; 0x6f
 800930e:	bf0c      	ite	eq
 8009310:	2308      	moveq	r3, #8
 8009312:	230a      	movne	r3, #10
 8009314:	2100      	movs	r1, #0
 8009316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800931a:	6865      	ldr	r5, [r4, #4]
 800931c:	60a5      	str	r5, [r4, #8]
 800931e:	2d00      	cmp	r5, #0
 8009320:	bfa2      	ittt	ge
 8009322:	6821      	ldrge	r1, [r4, #0]
 8009324:	f021 0104 	bicge.w	r1, r1, #4
 8009328:	6021      	strge	r1, [r4, #0]
 800932a:	b90e      	cbnz	r6, 8009330 <_printf_i+0x114>
 800932c:	2d00      	cmp	r5, #0
 800932e:	d04b      	beq.n	80093c8 <_printf_i+0x1ac>
 8009330:	4615      	mov	r5, r2
 8009332:	fbb6 f1f3 	udiv	r1, r6, r3
 8009336:	fb03 6711 	mls	r7, r3, r1, r6
 800933a:	5dc7      	ldrb	r7, [r0, r7]
 800933c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009340:	4637      	mov	r7, r6
 8009342:	42bb      	cmp	r3, r7
 8009344:	460e      	mov	r6, r1
 8009346:	d9f4      	bls.n	8009332 <_printf_i+0x116>
 8009348:	2b08      	cmp	r3, #8
 800934a:	d10b      	bne.n	8009364 <_printf_i+0x148>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	07de      	lsls	r6, r3, #31
 8009350:	d508      	bpl.n	8009364 <_printf_i+0x148>
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	6861      	ldr	r1, [r4, #4]
 8009356:	4299      	cmp	r1, r3
 8009358:	bfde      	ittt	le
 800935a:	2330      	movle	r3, #48	; 0x30
 800935c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009360:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009364:	1b52      	subs	r2, r2, r5
 8009366:	6122      	str	r2, [r4, #16]
 8009368:	f8cd a000 	str.w	sl, [sp]
 800936c:	464b      	mov	r3, r9
 800936e:	aa03      	add	r2, sp, #12
 8009370:	4621      	mov	r1, r4
 8009372:	4640      	mov	r0, r8
 8009374:	f7ff fee4 	bl	8009140 <_printf_common>
 8009378:	3001      	adds	r0, #1
 800937a:	d14a      	bne.n	8009412 <_printf_i+0x1f6>
 800937c:	f04f 30ff 	mov.w	r0, #4294967295
 8009380:	b004      	add	sp, #16
 8009382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	f043 0320 	orr.w	r3, r3, #32
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	4833      	ldr	r0, [pc, #204]	; (800945c <_printf_i+0x240>)
 8009390:	2778      	movs	r7, #120	; 0x78
 8009392:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	6829      	ldr	r1, [r5, #0]
 800939a:	061f      	lsls	r7, r3, #24
 800939c:	f851 6b04 	ldr.w	r6, [r1], #4
 80093a0:	d402      	bmi.n	80093a8 <_printf_i+0x18c>
 80093a2:	065f      	lsls	r7, r3, #25
 80093a4:	bf48      	it	mi
 80093a6:	b2b6      	uxthmi	r6, r6
 80093a8:	07df      	lsls	r7, r3, #31
 80093aa:	bf48      	it	mi
 80093ac:	f043 0320 	orrmi.w	r3, r3, #32
 80093b0:	6029      	str	r1, [r5, #0]
 80093b2:	bf48      	it	mi
 80093b4:	6023      	strmi	r3, [r4, #0]
 80093b6:	b91e      	cbnz	r6, 80093c0 <_printf_i+0x1a4>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	f023 0320 	bic.w	r3, r3, #32
 80093be:	6023      	str	r3, [r4, #0]
 80093c0:	2310      	movs	r3, #16
 80093c2:	e7a7      	b.n	8009314 <_printf_i+0xf8>
 80093c4:	4824      	ldr	r0, [pc, #144]	; (8009458 <_printf_i+0x23c>)
 80093c6:	e7e4      	b.n	8009392 <_printf_i+0x176>
 80093c8:	4615      	mov	r5, r2
 80093ca:	e7bd      	b.n	8009348 <_printf_i+0x12c>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	6826      	ldr	r6, [r4, #0]
 80093d0:	6961      	ldr	r1, [r4, #20]
 80093d2:	1d18      	adds	r0, r3, #4
 80093d4:	6028      	str	r0, [r5, #0]
 80093d6:	0635      	lsls	r5, r6, #24
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	d501      	bpl.n	80093e0 <_printf_i+0x1c4>
 80093dc:	6019      	str	r1, [r3, #0]
 80093de:	e002      	b.n	80093e6 <_printf_i+0x1ca>
 80093e0:	0670      	lsls	r0, r6, #25
 80093e2:	d5fb      	bpl.n	80093dc <_printf_i+0x1c0>
 80093e4:	8019      	strh	r1, [r3, #0]
 80093e6:	2300      	movs	r3, #0
 80093e8:	6123      	str	r3, [r4, #16]
 80093ea:	4615      	mov	r5, r2
 80093ec:	e7bc      	b.n	8009368 <_printf_i+0x14c>
 80093ee:	682b      	ldr	r3, [r5, #0]
 80093f0:	1d1a      	adds	r2, r3, #4
 80093f2:	602a      	str	r2, [r5, #0]
 80093f4:	681d      	ldr	r5, [r3, #0]
 80093f6:	6862      	ldr	r2, [r4, #4]
 80093f8:	2100      	movs	r1, #0
 80093fa:	4628      	mov	r0, r5
 80093fc:	f7f6 ff70 	bl	80002e0 <memchr>
 8009400:	b108      	cbz	r0, 8009406 <_printf_i+0x1ea>
 8009402:	1b40      	subs	r0, r0, r5
 8009404:	6060      	str	r0, [r4, #4]
 8009406:	6863      	ldr	r3, [r4, #4]
 8009408:	6123      	str	r3, [r4, #16]
 800940a:	2300      	movs	r3, #0
 800940c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009410:	e7aa      	b.n	8009368 <_printf_i+0x14c>
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	462a      	mov	r2, r5
 8009416:	4649      	mov	r1, r9
 8009418:	4640      	mov	r0, r8
 800941a:	47d0      	blx	sl
 800941c:	3001      	adds	r0, #1
 800941e:	d0ad      	beq.n	800937c <_printf_i+0x160>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	079b      	lsls	r3, r3, #30
 8009424:	d413      	bmi.n	800944e <_printf_i+0x232>
 8009426:	68e0      	ldr	r0, [r4, #12]
 8009428:	9b03      	ldr	r3, [sp, #12]
 800942a:	4298      	cmp	r0, r3
 800942c:	bfb8      	it	lt
 800942e:	4618      	movlt	r0, r3
 8009430:	e7a6      	b.n	8009380 <_printf_i+0x164>
 8009432:	2301      	movs	r3, #1
 8009434:	4632      	mov	r2, r6
 8009436:	4649      	mov	r1, r9
 8009438:	4640      	mov	r0, r8
 800943a:	47d0      	blx	sl
 800943c:	3001      	adds	r0, #1
 800943e:	d09d      	beq.n	800937c <_printf_i+0x160>
 8009440:	3501      	adds	r5, #1
 8009442:	68e3      	ldr	r3, [r4, #12]
 8009444:	9903      	ldr	r1, [sp, #12]
 8009446:	1a5b      	subs	r3, r3, r1
 8009448:	42ab      	cmp	r3, r5
 800944a:	dcf2      	bgt.n	8009432 <_printf_i+0x216>
 800944c:	e7eb      	b.n	8009426 <_printf_i+0x20a>
 800944e:	2500      	movs	r5, #0
 8009450:	f104 0619 	add.w	r6, r4, #25
 8009454:	e7f5      	b.n	8009442 <_printf_i+0x226>
 8009456:	bf00      	nop
 8009458:	0800aa3d 	.word	0x0800aa3d
 800945c:	0800aa4e 	.word	0x0800aa4e

08009460 <memmove>:
 8009460:	4288      	cmp	r0, r1
 8009462:	b510      	push	{r4, lr}
 8009464:	eb01 0402 	add.w	r4, r1, r2
 8009468:	d902      	bls.n	8009470 <memmove+0x10>
 800946a:	4284      	cmp	r4, r0
 800946c:	4623      	mov	r3, r4
 800946e:	d807      	bhi.n	8009480 <memmove+0x20>
 8009470:	1e43      	subs	r3, r0, #1
 8009472:	42a1      	cmp	r1, r4
 8009474:	d008      	beq.n	8009488 <memmove+0x28>
 8009476:	f811 2b01 	ldrb.w	r2, [r1], #1
 800947a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800947e:	e7f8      	b.n	8009472 <memmove+0x12>
 8009480:	4402      	add	r2, r0
 8009482:	4601      	mov	r1, r0
 8009484:	428a      	cmp	r2, r1
 8009486:	d100      	bne.n	800948a <memmove+0x2a>
 8009488:	bd10      	pop	{r4, pc}
 800948a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800948e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009492:	e7f7      	b.n	8009484 <memmove+0x24>

08009494 <_sbrk_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4d06      	ldr	r5, [pc, #24]	; (80094b0 <_sbrk_r+0x1c>)
 8009498:	2300      	movs	r3, #0
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	602b      	str	r3, [r5, #0]
 80094a0:	f7f8 fa7e 	bl	80019a0 <_sbrk>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_sbrk_r+0x1a>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_sbrk_r+0x1a>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	24000a98 	.word	0x24000a98

080094b4 <memcpy>:
 80094b4:	440a      	add	r2, r1
 80094b6:	4291      	cmp	r1, r2
 80094b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80094bc:	d100      	bne.n	80094c0 <memcpy+0xc>
 80094be:	4770      	bx	lr
 80094c0:	b510      	push	{r4, lr}
 80094c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094ca:	4291      	cmp	r1, r2
 80094cc:	d1f9      	bne.n	80094c2 <memcpy+0xe>
 80094ce:	bd10      	pop	{r4, pc}

080094d0 <_realloc_r>:
 80094d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d4:	4680      	mov	r8, r0
 80094d6:	4614      	mov	r4, r2
 80094d8:	460e      	mov	r6, r1
 80094da:	b921      	cbnz	r1, 80094e6 <_realloc_r+0x16>
 80094dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094e0:	4611      	mov	r1, r2
 80094e2:	f7ff bc49 	b.w	8008d78 <_malloc_r>
 80094e6:	b92a      	cbnz	r2, 80094f4 <_realloc_r+0x24>
 80094e8:	f7ff fbda 	bl	8008ca0 <_free_r>
 80094ec:	4625      	mov	r5, r4
 80094ee:	4628      	mov	r0, r5
 80094f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f4:	f000 f81b 	bl	800952e <_malloc_usable_size_r>
 80094f8:	4284      	cmp	r4, r0
 80094fa:	4607      	mov	r7, r0
 80094fc:	d802      	bhi.n	8009504 <_realloc_r+0x34>
 80094fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009502:	d812      	bhi.n	800952a <_realloc_r+0x5a>
 8009504:	4621      	mov	r1, r4
 8009506:	4640      	mov	r0, r8
 8009508:	f7ff fc36 	bl	8008d78 <_malloc_r>
 800950c:	4605      	mov	r5, r0
 800950e:	2800      	cmp	r0, #0
 8009510:	d0ed      	beq.n	80094ee <_realloc_r+0x1e>
 8009512:	42bc      	cmp	r4, r7
 8009514:	4622      	mov	r2, r4
 8009516:	4631      	mov	r1, r6
 8009518:	bf28      	it	cs
 800951a:	463a      	movcs	r2, r7
 800951c:	f7ff ffca 	bl	80094b4 <memcpy>
 8009520:	4631      	mov	r1, r6
 8009522:	4640      	mov	r0, r8
 8009524:	f7ff fbbc 	bl	8008ca0 <_free_r>
 8009528:	e7e1      	b.n	80094ee <_realloc_r+0x1e>
 800952a:	4635      	mov	r5, r6
 800952c:	e7df      	b.n	80094ee <_realloc_r+0x1e>

0800952e <_malloc_usable_size_r>:
 800952e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009532:	1f18      	subs	r0, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	bfbc      	itt	lt
 8009538:	580b      	ldrlt	r3, [r1, r0]
 800953a:	18c0      	addlt	r0, r0, r3
 800953c:	4770      	bx	lr
	...

08009540 <_init>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	bf00      	nop
 8009544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009546:	bc08      	pop	{r3}
 8009548:	469e      	mov	lr, r3
 800954a:	4770      	bx	lr

0800954c <_fini>:
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954e:	bf00      	nop
 8009550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009552:	bc08      	pop	{r3}
 8009554:	469e      	mov	lr, r3
 8009556:	4770      	bx	lr
