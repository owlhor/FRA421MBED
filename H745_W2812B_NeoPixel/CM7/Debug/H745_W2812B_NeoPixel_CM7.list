
H745_W2812B_NeoPixel_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009534  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b0c  08009b0c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009b0c  08009b0c  00019b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b14  08009b14  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b14  08009b14  00019b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b18  08009b18  00019b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08009b2c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08009b8c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000824  240000d0  08009bec  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240008f4  08009bec  000208f4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d8b2  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000030d6  00000000  00000000  0003d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012e0  00000000  00000000  00040a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011c8  00000000  00000000  00041d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b45d  00000000  00000000  00042f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019e33  00000000  00000000  0007e38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00184b49  00000000  00000000  000981c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021cd09  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005080  00000000  00000000  0021cd5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080097b4 	.word	0x080097b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080097b4 	.word	0x080097b4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <byteToW2812BEncode1>:
//// +20 --> Gap reset LED for 64 uSec
uint8_t LEDBuffer[NUM_LED_WS2812S*9 + 20];

/// non prototype in .h -> can use in this .c only
void byteToW2812BEncode1(uint8_t dataIn, uint8_t* Array3Output)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
	//// Array Copy[Big LUT] in assembly
	memcpy(Array3Output,&W2812LUT[dataIn*3],3);
 8000714:	79fa      	ldrb	r2, [r7, #7]
 8000716:	4613      	mov	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	4413      	add	r3, r2
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <byteToW2812BEncode1+0x2c>)
 800071e:	4413      	add	r3, r2
 8000720:	2203      	movs	r2, #3
 8000722:	4619      	mov	r1, r3
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f009 f82f 	bl	8009788 <memcpy>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	080097dc 	.word	0x080097dc

08000738 <W2812B_Init>:
					| (((dataIn >> 1) & 0x1) << 4) | (((dataIn ) & 0x1) << 1);

}

void W2812B_Init(SPI_HandleTypeDef *hspi)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(hspi,LEDBuffer,NUM_LED_WS2812S  * 9 + 20);
 8000740:	225c      	movs	r2, #92	; 0x5c
 8000742:	4904      	ldr	r1, [pc, #16]	; (8000754 <W2812B_Init+0x1c>)
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f007 f80f 	bl	8007768 <HAL_SPI_Transmit_DMA>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	240000ec 	.word	0x240000ec

08000758 <W2812B_UpdateData>:

void W2812B_UpdateData(W2812BStructure *input)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	for(int i = 0;i<NUM_LED_WS2812S;i++)
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e035      	b.n	80007d2 <W2812B_UpdateData+0x7a>
	{
		byteToW2812BEncode1(input[i].G,&LEDBuffer[20+i*9]);
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	4613      	mov	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	4413      	add	r3, r2
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	7858      	ldrb	r0, [r3, #1]
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4613      	mov	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	4413      	add	r3, r2
 800077c:	3314      	adds	r3, #20
 800077e:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <W2812B_UpdateData+0x8c>)
 8000780:	4413      	add	r3, r2
 8000782:	4619      	mov	r1, r3
 8000784:	f7ff ffc0 	bl	8000708 <byteToW2812BEncode1>
		byteToW2812BEncode1(input[i].R,&LEDBuffer[20+i*9+3]);
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	4613      	mov	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	7818      	ldrb	r0, [r3, #0]
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	4613      	mov	r3, r2
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	4413      	add	r3, r2
 800079e:	3317      	adds	r3, #23
 80007a0:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <W2812B_UpdateData+0x8c>)
 80007a2:	4413      	add	r3, r2
 80007a4:	4619      	mov	r1, r3
 80007a6:	f7ff ffaf 	bl	8000708 <byteToW2812BEncode1>
		byteToW2812BEncode1(input[i].B,&LEDBuffer[20+i*9+6]);
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	4613      	mov	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4413      	add	r3, r2
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	7898      	ldrb	r0, [r3, #2]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	4613      	mov	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	4413      	add	r3, r2
 80007c0:	331a      	adds	r3, #26
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <W2812B_UpdateData+0x8c>)
 80007c4:	4413      	add	r3, r2
 80007c6:	4619      	mov	r1, r3
 80007c8:	f7ff ff9e 	bl	8000708 <byteToW2812BEncode1>
	for(int i = 0;i<NUM_LED_WS2812S;i++)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2b07      	cmp	r3, #7
 80007d6:	ddc6      	ble.n	8000766 <W2812B_UpdateData+0xe>
	}
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	240000ec 	.word	0x240000ec

080007e8 <HToRGB>:
void HToRGB(int h,W2812BStructure *input)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	uint8_t mode= h/256;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	da00      	bge.n	80007fa <HToRGB+0x12>
 80007f8:	33ff      	adds	r3, #255	; 0xff
 80007fa:	121b      	asrs	r3, r3, #8
 80007fc:	73fb      	strb	r3, [r7, #15]
	uint8_t state = h%256;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	425a      	negs	r2, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	bf58      	it	pl
 8000808:	4253      	negpl	r3, r2
 800080a:	73bb      	strb	r3, [r7, #14]

	switch (mode) {
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2b04      	cmp	r3, #4
 8000810:	d842      	bhi.n	8000898 <HToRGB+0xb0>
 8000812:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <HToRGB+0x30>)
 8000814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000818:	0800082d 	.word	0x0800082d
 800081c:	08000841 	.word	0x08000841
 8000820:	08000859 	.word	0x08000859
 8000824:	0800086d 	.word	0x0800086d
 8000828:	08000885 	.word	0x08000885
	case 0:
		input->B = 0;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2200      	movs	r2, #0
 8000830:	709a      	strb	r2, [r3, #2]
		input->G = state;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	7bba      	ldrb	r2, [r7, #14]
 8000836:	705a      	strb	r2, [r3, #1]
		input->R = 255;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	701a      	strb	r2, [r3, #0]
		break;
 800083e:	e037      	b.n	80008b0 <HToRGB+0xc8>
	case 1:
		input->B = 0;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2200      	movs	r2, #0
 8000844:	709a      	strb	r2, [r3, #2]
		input->G = 255;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	22ff      	movs	r2, #255	; 0xff
 800084a:	705a      	strb	r2, [r3, #1]
		input->R = 255-state;
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	43db      	mvns	r3, r3
 8000850:	b2da      	uxtb	r2, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	701a      	strb	r2, [r3, #0]
		break;
 8000856:	e02b      	b.n	80008b0 <HToRGB+0xc8>
	case 2:
		input->B = state;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	7bba      	ldrb	r2, [r7, #14]
 800085c:	709a      	strb	r2, [r3, #2]
		input->G = 255;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	22ff      	movs	r2, #255	; 0xff
 8000862:	705a      	strb	r2, [r3, #1]
		input->R = 0;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
		break;
 800086a:	e021      	b.n	80008b0 <HToRGB+0xc8>
	case 3:
		input->B = 255;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	22ff      	movs	r2, #255	; 0xff
 8000870:	709a      	strb	r2, [r3, #2]
		input->G = 255-state;
 8000872:	7bbb      	ldrb	r3, [r7, #14]
 8000874:	43db      	mvns	r3, r3
 8000876:	b2da      	uxtb	r2, r3
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	705a      	strb	r2, [r3, #1]
		input->R = 0;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
		break;
 8000882:	e015      	b.n	80008b0 <HToRGB+0xc8>
	case 4:
		input->B = 255;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	22ff      	movs	r2, #255	; 0xff
 8000888:	709a      	strb	r2, [r3, #2]
		input->G = 0;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	705a      	strb	r2, [r3, #1]
		input->R = state;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	7bba      	ldrb	r2, [r7, #14]
 8000894:	701a      	strb	r2, [r3, #0]
		break;
 8000896:	e00b      	b.n	80008b0 <HToRGB+0xc8>
	default:
	case 5:
		input->B = 255-state;
 8000898:	7bbb      	ldrb	r3, [r7, #14]
 800089a:	43db      	mvns	r3, r3
 800089c:	b2da      	uxtb	r2, r3
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	709a      	strb	r2, [r3, #2]
		input->G = 0;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2200      	movs	r2, #0
 80008a6:	705a      	strb	r2, [r3, #1]
		input->R = 255;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	701a      	strb	r2, [r3, #0]
		break;
 80008ae:	bf00      	nop


	}
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c6:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008c8:	bf00      	nop
 80008ca:	4b4e      	ldr	r3, [pc, #312]	; (8000a04 <main+0x148>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d004      	beq.n	80008e0 <main+0x24>
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	60fa      	str	r2, [r7, #12]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	dcf4      	bgt.n	80008ca <main+0xe>
  if ( timeout < 0 )
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	da01      	bge.n	80008ea <main+0x2e>
  {
  Error_Handler();
 80008e6:	f000 fb05 	bl	8000ef4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fe1d 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f897 	bl	8000a20 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008f2:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <main+0x148>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	4a42      	ldr	r2, [pc, #264]	; (8000a04 <main+0x148>)
 80008fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000902:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <main+0x148>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000910:	2000      	movs	r0, #0
 8000912:	f004 f921 	bl	8004b58 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000916:	2100      	movs	r1, #0
 8000918:	2000      	movs	r0, #0
 800091a:	f004 f937 	bl	8004b8c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800091e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000922:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000924:	bf00      	nop
 8000926:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <main+0x148>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800092e:	2b00      	cmp	r3, #0
 8000930:	d104      	bne.n	800093c <main+0x80>
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	1e5a      	subs	r2, r3, #1
 8000936:	60fa      	str	r2, [r7, #12]
 8000938:	2b00      	cmp	r3, #0
 800093a:	dcf4      	bgt.n	8000926 <main+0x6a>
if ( timeout < 0 )
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2b00      	cmp	r3, #0
 8000940:	da01      	bge.n	8000946 <main+0x8a>
{
Error_Handler();
 8000942:	f000 fad7 	bl	8000ef4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f000 fa2f 	bl	8000da8 <MX_GPIO_Init>
  MX_ETH_Init();
 800094a:	f000 f8ed 	bl	8000b28 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800094e:	f000 f98d 	bl	8000c6c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000952:	f000 f9d7 	bl	8000d04 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8000956:	f000 fa07 	bl	8000d68 <MX_DMA_Init>
  MX_SPI1_Init();
 800095a:	f000 f931 	bl	8000bc0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // set output  open drain - cant do in .ioc
  GPIOB->OTYPER = GPIOB->OTYPER | GPIO_PIN_5;
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <main+0x14c>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <main+0x14c>)
 8000964:	f043 0320 	orr.w	r3, r3, #32
 8000968:	6053      	str	r3, [r2, #4]
  // hal spi for Neopixel start
   W2812B_Init(&hspi1);
 800096a:	4828      	ldr	r0, [pc, #160]	; (8000a0c <main+0x150>)
 800096c:	f7ff fee4 	bl	8000738 <W2812B_Init>

	  static int h =0;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000970:	2102      	movs	r1, #2
 8000972:	4827      	ldr	r0, [pc, #156]	; (8000a10 <main+0x154>)
 8000974:	f004 f8d5 	bl	8004b22 <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 8000978:	2001      	movs	r0, #1
 800097a:	f000 fe67 	bl	800164c <HAL_Delay>
	  		for (int i = 0; i < 8; i++) {
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	e01f      	b.n	80009c4 <main+0x108>

	  			HToRGB((h + 192*i) % 1536, &LED[i]);
 8000984:	68ba      	ldr	r2, [r7, #8]
 8000986:	4613      	mov	r3, r2
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4413      	add	r3, r2
 800098c:	019b      	lsls	r3, r3, #6
 800098e:	461a      	mov	r2, r3
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <main+0x158>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	441a      	add	r2, r3
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <main+0x15c>)
 8000998:	fb83 1302 	smull	r1, r3, r3, r2
 800099c:	1219      	asrs	r1, r3, #8
 800099e:	17d3      	asrs	r3, r2, #31
 80009a0:	1ac8      	subs	r0, r1, r3
 80009a2:	4603      	mov	r3, r0
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4403      	add	r3, r0
 80009a8:	025b      	lsls	r3, r3, #9
 80009aa:	1ad0      	subs	r0, r2, r3
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <main+0x160>)
 80009b6:	4413      	add	r3, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	f7ff ff15 	bl	80007e8 <HToRGB>
	  		for (int i = 0; i < 8; i++) {
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	3301      	adds	r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	2b07      	cmp	r3, #7
 80009c8:	dddc      	ble.n	8000984 <main+0xc8>
	  		}

	  		h++;
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <main+0x158>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <main+0x158>)
 80009d2:	6013      	str	r3, [r2, #0]
	  		h%=1536;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <main+0x158>)
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <main+0x15c>)
 80009da:	fb83 2301 	smull	r2, r3, r3, r1
 80009de:	121a      	asrs	r2, r3, #8
 80009e0:	17cb      	asrs	r3, r1, #31
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	025b      	lsls	r3, r3, #9
 80009ec:	1aca      	subs	r2, r1, r3
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <main+0x158>)
 80009f0:	601a      	str	r2, [r3, #0]
	  W2812B_UpdateData(LED);
 80009f2:	480a      	ldr	r0, [pc, #40]	; (8000a1c <main+0x160>)
 80009f4:	f7ff feb0 	bl	8000758 <W2812B_UpdateData>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <main+0x14c>)
 80009fe:	f004 f890 	bl	8004b22 <HAL_GPIO_TogglePin>
  {
 8000a02:	e7b5      	b.n	8000970 <main+0xb4>
 8000a04:	58024400 	.word	0x58024400
 8000a08:	58020400 	.word	0x58020400
 8000a0c:	24000230 	.word	0x24000230
 8000a10:	58021000 	.word	0x58021000
 8000a14:	240008e4 	.word	0x240008e4
 8000a18:	2aaaaaab 	.word	0x2aaaaaab
 8000a1c:	240008cc 	.word	0x240008cc

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b09c      	sub	sp, #112	; 0x70
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	224c      	movs	r2, #76	; 0x4c
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f008 feb8 	bl	80097a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2220      	movs	r2, #32
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f008 feb2 	bl	80097a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a40:	2004      	movs	r0, #4
 8000a42:	f004 f9ff 	bl	8004e44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <SystemClock_Config+0xfc>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a33      	ldr	r2, [pc, #204]	; (8000b1c <SystemClock_Config+0xfc>)
 8000a50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <SystemClock_Config+0xfc>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	4b2f      	ldr	r3, [pc, #188]	; (8000b20 <SystemClock_Config+0x100>)
 8000a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a64:	4a2e      	ldr	r2, [pc, #184]	; (8000b20 <SystemClock_Config+0x100>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a6c:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <SystemClock_Config+0x100>)
 8000a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a78:	bf00      	nop
 8000a7a:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <SystemClock_Config+0xfc>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a86:	d1f8      	bne.n	8000a7a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a88:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <SystemClock_Config+0x104>)
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8c:	f023 0303 	bic.w	r3, r3, #3
 8000a90:	4a24      	ldr	r2, [pc, #144]	; (8000b24 <SystemClock_Config+0x104>)
 8000a92:	f043 0302 	orr.w	r3, r3, #2
 8000a96:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000aae:	2378      	movs	r3, #120	; 0x78
 8000ab0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f004 fa22 	bl	8004f18 <HAL_RCC_OscConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000ada:	f000 fa0b 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	233f      	movs	r3, #63	; 0x3f
 8000ae0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000aea:	2308      	movs	r3, #8
 8000aec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aee:	2340      	movs	r3, #64	; 0x40
 8000af0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000afc:	2340      	movs	r3, #64	; 0x40
 8000afe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2104      	movs	r1, #4
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fe35 	bl	8005774 <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000b10:	f000 f9f0 	bl	8000ef4 <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3770      	adds	r7, #112	; 0x70
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	58024800 	.word	0x58024800
 8000b20:	58000400 	.word	0x58000400
 8000b24:	58024400 	.word	0x58024400

08000b28 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_ETH_Init+0x80>)
 8000b2e:	4a1f      	ldr	r2, [pc, #124]	; (8000bac <MX_ETH_Init+0x84>)
 8000b30:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_ETH_Init+0x88>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_ETH_Init+0x88>)
 8000b3a:	2280      	movs	r2, #128	; 0x80
 8000b3c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_ETH_Init+0x88>)
 8000b40:	22e1      	movs	r2, #225	; 0xe1
 8000b42:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_ETH_Init+0x88>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_ETH_Init+0x88>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_ETH_Init+0x88>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_ETH_Init+0x80>)
 8000b58:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <MX_ETH_Init+0x88>)
 8000b5a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_ETH_Init+0x80>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_ETH_Init+0x80>)
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <MX_ETH_Init+0x8c>)
 8000b66:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_ETH_Init+0x80>)
 8000b6a:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <MX_ETH_Init+0x90>)
 8000b6c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_ETH_Init+0x80>)
 8000b70:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b74:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_ETH_Init+0x80>)
 8000b78:	f003 f9e6 	bl	8003f48 <HAL_ETH_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b82:	f000 f9b7 	bl	8000ef4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b86:	2238      	movs	r2, #56	; 0x38
 8000b88:	2100      	movs	r1, #0
 8000b8a:	480c      	ldr	r0, [pc, #48]	; (8000bbc <MX_ETH_Init+0x94>)
 8000b8c:	f008 fe0a 	bl	80097a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <MX_ETH_Init+0x94>)
 8000b92:	2221      	movs	r2, #33	; 0x21
 8000b94:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_ETH_Init+0x94>)
 8000b98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b9c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <MX_ETH_Init+0x94>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	24000180 	.word	0x24000180
 8000bac:	40028000 	.word	0x40028000
 8000bb0:	240008e8 	.word	0x240008e8
 8000bb4:	24000070 	.word	0x24000070
 8000bb8:	24000010 	.word	0x24000010
 8000bbc:	24000148 	.word	0x24000148

08000bc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000bc6:	4a28      	ldr	r2, [pc, #160]	; (8000c68 <MX_SPI1_Init+0xa8>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000bcc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000bda:	2207      	movs	r2, #7
 8000bdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000bec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bf0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000bf4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bf8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_SPI1_Init+0xa4>)
 8000c52:	f006 fc83 	bl	800755c <HAL_SPI_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000c5c:	f000 f94a 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	24000230 	.word	0x24000230
 8000c68:	40013000 	.word	0x40013000

08000c6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c72:	4a23      	ldr	r2, [pc, #140]	; (8000d00 <MX_USART3_UART_Init+0x94>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb4:	4811      	ldr	r0, [pc, #68]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cb6:	f007 f9c8 	bl	800804a <HAL_UART_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cc0:	f000 f918 	bl	8000ef4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cc8:	f008 f966 	bl	8008f98 <HAL_UARTEx_SetTxFifoThreshold>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd2:	f000 f90f 	bl	8000ef4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cda:	f008 f99b 	bl	8009014 <HAL_UARTEx_SetRxFifoThreshold>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce4:	f000 f906 	bl	8000ef4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cea:	f008 f91c 	bl	8008f26 <HAL_UARTEx_DisableFifoMode>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf4:	f000 f8fe 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	24000330 	.word	0x24000330
 8000d00:	40004800 	.word	0x40004800

08000d04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0a:	4a16      	ldr	r2, [pc, #88]	; (8000d64 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d10:	2209      	movs	r2, #9
 8000d12:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d4c:	f003 ff32 	bl	8004bb4 <HAL_PCD_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d56:	f000 f8cd 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	240003c0 	.word	0x240003c0
 8000d64:	40080000 	.word	0x40080000

08000d68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <MX_DMA_Init+0x3c>)
 8000d70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d74:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <MX_DMA_Init+0x3c>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_DMA_Init+0x3c>)
 8000d80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	200b      	movs	r0, #11
 8000d92:	f000 fd7a 	bl	800188a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d96:	200b      	movs	r0, #11
 8000d98:	f000 fd91 	bl	80018be <HAL_NVIC_EnableIRQ>

}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	58024400 	.word	0x58024400

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	4b4a      	ldr	r3, [pc, #296]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc4:	4a48      	ldr	r2, [pc, #288]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dce:	4b46      	ldr	r3, [pc, #280]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ddc:	4b42      	ldr	r3, [pc, #264]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de2:	4a41      	ldr	r2, [pc, #260]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dec:	4b3e      	ldr	r3, [pc, #248]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e00:	4a39      	ldr	r2, [pc, #228]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0a:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	4b33      	ldr	r3, [pc, #204]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	4a32      	ldr	r2, [pc, #200]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e28:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	4a2a      	ldr	r2, [pc, #168]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	f003 0308 	and.w	r3, r3, #8
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e7a:	f043 0310 	orr.w	r3, r3, #16
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <MX_GPIO_Init+0x140>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e96:	4815      	ldr	r0, [pc, #84]	; (8000eec <MX_GPIO_Init+0x144>)
 8000e98:	f003 fe2a 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <MX_GPIO_Init+0x148>)
 8000ea2:	f003 fe25 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ea6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <MX_GPIO_Init+0x144>)
 8000ec0:	f003 fc66 	bl	8004790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_GPIO_Init+0x148>)
 8000edc:	f003 fc58 	bl	8004790 <HAL_GPIO_Init>

}
 8000ee0:	bf00      	nop
 8000ee2:	3730      	adds	r7, #48	; 0x30
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	58020400 	.word	0x58020400
 8000ef0:	58021000 	.word	0x58021000

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efc:	e7fe      	b.n	8000efc <Error_Handler+0x8>
	...

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_MspInit+0x30>)
 8000f08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_MspInit+0x30>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_MspInit+0x30>)
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	58024400 	.word	0x58024400

08000f34 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08e      	sub	sp, #56	; 0x38
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a59      	ldr	r2, [pc, #356]	; (80010b8 <HAL_ETH_MspInit+0x184>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	f040 80ab 	bne.w	80010ae <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f58:	4b58      	ldr	r3, [pc, #352]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000f5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f5e:	4a57      	ldr	r2, [pc, #348]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f68:	4b54      	ldr	r3, [pc, #336]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000f6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f72:	623b      	str	r3, [r7, #32]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f76:	4b51      	ldr	r3, [pc, #324]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000f78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f7c:	4a4f      	ldr	r2, [pc, #316]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f86:	4b4d      	ldr	r3, [pc, #308]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f94:	4b49      	ldr	r3, [pc, #292]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000f96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f9a:	4a48      	ldr	r2, [pc, #288]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fa4:	4b45      	ldr	r3, [pc, #276]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000fa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b42      	ldr	r3, [pc, #264]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	4a40      	ldr	r2, [pc, #256]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc2:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	4a39      	ldr	r2, [pc, #228]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe0:	4b36      	ldr	r3, [pc, #216]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	4a31      	ldr	r2, [pc, #196]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <HAL_ETH_MspInit+0x188>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	4a2a      	ldr	r2, [pc, #168]	; (80010bc <HAL_ETH_MspInit+0x188>)
 8001014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <HAL_ETH_MspInit+0x188>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800102a:	2332      	movs	r3, #50	; 0x32
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800103a:	230b      	movs	r3, #11
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	481e      	ldr	r0, [pc, #120]	; (80010c0 <HAL_ETH_MspInit+0x18c>)
 8001046:	f003 fba3 	bl	8004790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800104a:	2386      	movs	r3, #134	; 0x86
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105a:	230b      	movs	r3, #11
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	4619      	mov	r1, r3
 8001064:	4817      	ldr	r0, [pc, #92]	; (80010c4 <HAL_ETH_MspInit+0x190>)
 8001066:	f003 fb93 	bl	8004790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800106a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800107c:	230b      	movs	r3, #11
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	4619      	mov	r1, r3
 8001086:	4810      	ldr	r0, [pc, #64]	; (80010c8 <HAL_ETH_MspInit+0x194>)
 8001088:	f003 fb82 	bl	8004790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800108c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800109e:	230b      	movs	r3, #11
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <HAL_ETH_MspInit+0x198>)
 80010aa:	f003 fb71 	bl	8004790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3738      	adds	r7, #56	; 0x38
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40028000 	.word	0x40028000
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58020800 	.word	0x58020800
 80010c4:	58020000 	.word	0x58020000
 80010c8:	58020400 	.word	0x58020400
 80010cc:	58021800 	.word	0x58021800

080010d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0ba      	sub	sp, #232	; 0xe8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	22bc      	movs	r2, #188	; 0xbc
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f008 fb57 	bl	80097a4 <memset>
  if(hspi->Instance==SPI1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a5a      	ldr	r2, [pc, #360]	; (8001264 <HAL_SPI_MspInit+0x194>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	f040 80ad 	bne.w	800125c <HAL_SPI_MspInit+0x18c>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001106:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001108:	2301      	movs	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 36;
 800110c:	2324      	movs	r3, #36	; 0x24
 800110e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001110:	2302      	movs	r3, #2
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001114:	2302      	movs	r3, #2
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800111c:	23c0      	movs	r3, #192	; 0xc0
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001120:	2300      	movs	r3, #0
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	4618      	mov	r0, r3
 8001134:	f004 feaa 	bl	8005e8c <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 800113e:	f7ff fed9 	bl	8000ef4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001142:	4b49      	ldr	r3, [pc, #292]	; (8001268 <HAL_SPI_MspInit+0x198>)
 8001144:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001148:	4a47      	ldr	r2, [pc, #284]	; (8001268 <HAL_SPI_MspInit+0x198>)
 800114a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800114e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001152:	4b45      	ldr	r3, [pc, #276]	; (8001268 <HAL_SPI_MspInit+0x198>)
 8001154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_SPI_MspInit+0x198>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001166:	4a40      	ldr	r2, [pc, #256]	; (8001268 <HAL_SPI_MspInit+0x198>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001170:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <HAL_SPI_MspInit+0x198>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <HAL_SPI_MspInit+0x198>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	4a38      	ldr	r2, [pc, #224]	; (8001268 <HAL_SPI_MspInit+0x198>)
 8001186:	f043 0302 	orr.w	r3, r3, #2
 800118a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118e:	4b36      	ldr	r3, [pc, #216]	; (8001268 <HAL_SPI_MspInit+0x198>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800119c:	2360      	movs	r3, #96	; 0x60
 800119e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b4:	2305      	movs	r3, #5
 80011b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011be:	4619      	mov	r1, r3
 80011c0:	482a      	ldr	r0, [pc, #168]	; (800126c <HAL_SPI_MspInit+0x19c>)
 80011c2:	f003 fae5 	bl	8004790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011c6:	2320      	movs	r3, #32
 80011c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011de:	2305      	movs	r3, #5
 80011e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4821      	ldr	r0, [pc, #132]	; (8001270 <HAL_SPI_MspInit+0x1a0>)
 80011ec:	f003 fad0 	bl	8004790 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 80011f2:	4a21      	ldr	r2, [pc, #132]	; (8001278 <HAL_SPI_MspInit+0x1a8>)
 80011f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 80011f8:	2226      	movs	r2, #38	; 0x26
 80011fa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 80011fe:	2240      	movs	r2, #64	; 0x40
 8001200:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 800120a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800120e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 800121e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001222:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001230:	4810      	ldr	r0, [pc, #64]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 8001232:	f000 fb5f 	bl	80018f4 <HAL_DMA_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_SPI_MspInit+0x170>
    {
      Error_Handler();
 800123c:	f7ff fe5a 	bl	8000ef4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 8001244:	679a      	str	r2, [r3, #120]	; 0x78
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_SPI_MspInit+0x1a4>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2023      	movs	r0, #35	; 0x23
 8001252:	f000 fb1a 	bl	800188a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001256:	2023      	movs	r0, #35	; 0x23
 8001258:	f000 fb31 	bl	80018be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800125c:	bf00      	nop
 800125e:	37e8      	adds	r7, #232	; 0xe8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40013000 	.word	0x40013000
 8001268:	58024400 	.word	0x58024400
 800126c:	58020000 	.word	0x58020000
 8001270:	58020400 	.word	0x58020400
 8001274:	240002b8 	.word	0x240002b8
 8001278:	40020010 	.word	0x40020010

0800127c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0b8      	sub	sp, #224	; 0xe0
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	22bc      	movs	r2, #188	; 0xbc
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f008 fa81 	bl	80097a4 <memset>
  if(huart->Instance==USART3)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a25      	ldr	r2, [pc, #148]	; (800133c <HAL_UART_MspInit+0xc0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d142      	bne.n	8001332 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ac:	2302      	movs	r3, #2
 80012ae:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fde6 	bl	8005e8c <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012c6:	f7ff fe15 	bl	8000ef4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_UART_MspInit+0xc4>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001306:	f44f 7340 	mov.w	r3, #768	; 0x300
 800130a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001320:	2307      	movs	r3, #7
 8001322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001326:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <HAL_UART_MspInit+0xc8>)
 800132e:	f003 fa2f 	bl	8004790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	37e0      	adds	r7, #224	; 0xe0
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40004800 	.word	0x40004800
 8001340:	58024400 	.word	0x58024400
 8001344:	58020c00 	.word	0x58020c00

08001348 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0b8      	sub	sp, #224	; 0xe0
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	22bc      	movs	r2, #188	; 0xbc
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f008 fa1b 	bl	80097a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a36      	ldr	r2, [pc, #216]	; (800144c <HAL_PCD_MspInit+0x104>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d165      	bne.n	8001444 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001378:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800137c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800137e:	2301      	movs	r3, #1
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001382:	2318      	movs	r3, #24
 8001384:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001386:	2302      	movs	r3, #2
 8001388:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800138a:	2304      	movs	r3, #4
 800138c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800138e:	2302      	movs	r3, #2
 8001390:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001392:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001396:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800139c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4618      	mov	r0, r3
 80013aa:	f004 fd6f 	bl	8005e8c <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80013b4:	f7ff fd9e 	bl	8000ef4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013b8:	f003 fd9e 	bl	8004ef8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_PCD_MspInit+0x108>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <HAL_PCD_MspInit+0x108>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_PCD_MspInit+0x108>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013da:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80013de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013f4:	230a      	movs	r3, #10
 80013f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013fe:	4619      	mov	r1, r3
 8001400:	4814      	ldr	r0, [pc, #80]	; (8001454 <HAL_PCD_MspInit+0x10c>)
 8001402:	f003 f9c5 	bl	8004790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <HAL_PCD_MspInit+0x10c>)
 8001422:	f003 f9b5 	bl	8004790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_PCD_MspInit+0x108>)
 8001428:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800142c:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_PCD_MspInit+0x108>)
 800142e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001432:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_PCD_MspInit+0x108>)
 8001438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800143c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	37e0      	adds	r7, #224	; 0xe0
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40080000 	.word	0x40080000
 8001450:	58024400 	.word	0x58024400
 8001454:	58020000 	.word	0x58020000

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800145c:	e7fe      	b.n	800145c <NMI_Handler+0x4>

0800145e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <MemManage_Handler+0x4>

0800146a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <UsageFault_Handler+0x4>

08001476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a4:	f000 f8b2 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <DMA1_Stream0_IRQHandler+0x10>)
 80014b2:	f001 fa2b 	bl	800290c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	240002b8 	.word	0x240002b8

080014c0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <SPI1_IRQHandler+0x10>)
 80014c6:	f006 fa99 	bl	80079fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	24000230 	.word	0x24000230

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d8:	f7ff f880 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	; (8001514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	; (8001520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f008 f91d 	bl	8009740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff f9d9 	bl	80008bc <main>
  bx  lr
 800150a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800150c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001510:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001514:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001518:	08009b1c 	.word	0x08009b1c
  ldr r2, =_sbss
 800151c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001520:	240008f4 	.word	0x240008f4

08001524 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC3_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152e:	2003      	movs	r0, #3
 8001530:	f000 f9a0 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001534:	f004 fad4 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8001538:	4602      	mov	r2, r0
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_Init+0x68>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	4913      	ldr	r1, [pc, #76]	; (8001594 <HAL_Init+0x6c>)
 8001546:	5ccb      	ldrb	r3, [r1, r3]
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_Init+0x68>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_Init+0x6c>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <HAL_Init+0x70>)
 800156a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800156c:	4a0b      	ldr	r2, [pc, #44]	; (800159c <HAL_Init+0x74>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001572:	2000      	movs	r0, #0
 8001574:	f000 f814 	bl	80015a0 <HAL_InitTick>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e002      	b.n	8001588 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001582:	f7ff fcbd 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	58024400 	.word	0x58024400
 8001594:	080097cc 	.word	0x080097cc
 8001598:	24000004 	.word	0x24000004
 800159c:	24000000 	.word	0x24000000

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_InitTick+0x60>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e021      	b.n	80015f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_InitTick+0x64>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_InitTick+0x60>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f985 	bl	80018da <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 f94f 	bl	800188a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_InitTick+0x68>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2400000c 	.word	0x2400000c
 8001604:	24000000 	.word	0x24000000
 8001608:	24000008 	.word	0x24000008

0800160c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_IncTick+0x20>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x24>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <HAL_IncTick+0x24>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2400000c 	.word	0x2400000c
 8001630:	240008f0 	.word	0x240008f0

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_GetTick+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	240008f0 	.word	0x240008f0

0800164c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff ffee 	bl	8001634 <HAL_GetTick>
 8001658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001664:	d005      	beq.n	8001672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_Delay+0x44>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001672:	bf00      	nop
 8001674:	f7ff ffde 	bl	8001634 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	429a      	cmp	r2, r3
 8001682:	d8f7      	bhi.n	8001674 <HAL_Delay+0x28>
  {
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2400000c 	.word	0x2400000c

08001694 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_GetREVID+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0c1b      	lsrs	r3, r3, #16
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	5c001000 	.word	0x5c001000

080016ac <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	58000400 	.word	0x58000400

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <__NVIC_SetPriorityGrouping+0x40>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x40>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00
 8001718:	05fa0000 	.word	0x05fa0000

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <__NVIC_EnableIRQ+0x38>)
 8001752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001840:	d301      	bcc.n	8001846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001842:	2301      	movs	r3, #1
 8001844:	e00f      	b.n	8001866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <SysTick_Config+0x40>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184e:	210f      	movs	r1, #15
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f7ff ff8e 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <SysTick_Config+0x40>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <SysTick_Config+0x40>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000e010 	.word	0xe000e010

08001874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff29 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001898:	f7ff ff40 	bl	800171c <__NVIC_GetPriorityGrouping>
 800189c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	6978      	ldr	r0, [r7, #20]
 80018a4:	f7ff ff90 	bl	80017c8 <NVIC_EncodePriority>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff5f 	bl	8001774 <__NVIC_SetPriority>
}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff33 	bl	8001738 <__NVIC_EnableIRQ>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffa4 	bl	8001830 <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff fe9a 	bl	8001634 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e316      	b.n	8001f3a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a66      	ldr	r2, [pc, #408]	; (8001aac <HAL_DMA_Init+0x1b8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d04a      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a65      	ldr	r2, [pc, #404]	; (8001ab0 <HAL_DMA_Init+0x1bc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d045      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a63      	ldr	r2, [pc, #396]	; (8001ab4 <HAL_DMA_Init+0x1c0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d040      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a62      	ldr	r2, [pc, #392]	; (8001ab8 <HAL_DMA_Init+0x1c4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d03b      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a60      	ldr	r2, [pc, #384]	; (8001abc <HAL_DMA_Init+0x1c8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d036      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5f      	ldr	r2, [pc, #380]	; (8001ac0 <HAL_DMA_Init+0x1cc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d031      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a5d      	ldr	r2, [pc, #372]	; (8001ac4 <HAL_DMA_Init+0x1d0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d02c      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a5c      	ldr	r2, [pc, #368]	; (8001ac8 <HAL_DMA_Init+0x1d4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d027      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a5a      	ldr	r2, [pc, #360]	; (8001acc <HAL_DMA_Init+0x1d8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d022      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a59      	ldr	r2, [pc, #356]	; (8001ad0 <HAL_DMA_Init+0x1dc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d01d      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a57      	ldr	r2, [pc, #348]	; (8001ad4 <HAL_DMA_Init+0x1e0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d018      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a56      	ldr	r2, [pc, #344]	; (8001ad8 <HAL_DMA_Init+0x1e4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d013      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a54      	ldr	r2, [pc, #336]	; (8001adc <HAL_DMA_Init+0x1e8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00e      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a53      	ldr	r2, [pc, #332]	; (8001ae0 <HAL_DMA_Init+0x1ec>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d009      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a51      	ldr	r2, [pc, #324]	; (8001ae4 <HAL_DMA_Init+0x1f0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d004      	beq.n	80019ac <HAL_DMA_Init+0xb8>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a50      	ldr	r2, [pc, #320]	; (8001ae8 <HAL_DMA_Init+0x1f4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_DMA_Init+0xbc>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_DMA_Init+0xbe>
 80019b0:	2300      	movs	r3, #0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 813b 	beq.w	8001c2e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a37      	ldr	r2, [pc, #220]	; (8001aac <HAL_DMA_Init+0x1b8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d04a      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a36      	ldr	r2, [pc, #216]	; (8001ab0 <HAL_DMA_Init+0x1bc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d045      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a34      	ldr	r2, [pc, #208]	; (8001ab4 <HAL_DMA_Init+0x1c0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d040      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a33      	ldr	r2, [pc, #204]	; (8001ab8 <HAL_DMA_Init+0x1c4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d03b      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a31      	ldr	r2, [pc, #196]	; (8001abc <HAL_DMA_Init+0x1c8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d036      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a30      	ldr	r2, [pc, #192]	; (8001ac0 <HAL_DMA_Init+0x1cc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d031      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a2e      	ldr	r2, [pc, #184]	; (8001ac4 <HAL_DMA_Init+0x1d0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d02c      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a2d      	ldr	r2, [pc, #180]	; (8001ac8 <HAL_DMA_Init+0x1d4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d027      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2b      	ldr	r2, [pc, #172]	; (8001acc <HAL_DMA_Init+0x1d8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d022      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a2a      	ldr	r2, [pc, #168]	; (8001ad0 <HAL_DMA_Init+0x1dc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d01d      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a28      	ldr	r2, [pc, #160]	; (8001ad4 <HAL_DMA_Init+0x1e0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d018      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_DMA_Init+0x1e4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d013      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a25      	ldr	r2, [pc, #148]	; (8001adc <HAL_DMA_Init+0x1e8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d00e      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <HAL_DMA_Init+0x1ec>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d009      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a22      	ldr	r2, [pc, #136]	; (8001ae4 <HAL_DMA_Init+0x1f0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d004      	beq.n	8001a68 <HAL_DMA_Init+0x174>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <HAL_DMA_Init+0x1f4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d108      	bne.n	8001a7a <HAL_DMA_Init+0x186>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e007      	b.n	8001a8a <HAL_DMA_Init+0x196>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0201 	bic.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a8a:	e02f      	b.n	8001aec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a8c:	f7ff fdd2 	bl	8001634 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d928      	bls.n	8001aec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e246      	b.n	8001f3a <HAL_DMA_Init+0x646>
 8001aac:	40020010 	.word	0x40020010
 8001ab0:	40020028 	.word	0x40020028
 8001ab4:	40020040 	.word	0x40020040
 8001ab8:	40020058 	.word	0x40020058
 8001abc:	40020070 	.word	0x40020070
 8001ac0:	40020088 	.word	0x40020088
 8001ac4:	400200a0 	.word	0x400200a0
 8001ac8:	400200b8 	.word	0x400200b8
 8001acc:	40020410 	.word	0x40020410
 8001ad0:	40020428 	.word	0x40020428
 8001ad4:	40020440 	.word	0x40020440
 8001ad8:	40020458 	.word	0x40020458
 8001adc:	40020470 	.word	0x40020470
 8001ae0:	40020488 	.word	0x40020488
 8001ae4:	400204a0 	.word	0x400204a0
 8001ae8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1c8      	bne.n	8001a8c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4b83      	ldr	r3, [pc, #524]	; (8001d14 <HAL_DMA_Init+0x420>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b12:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d107      	bne.n	8001b50 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b50:	4b71      	ldr	r3, [pc, #452]	; (8001d18 <HAL_DMA_Init+0x424>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b71      	ldr	r3, [pc, #452]	; (8001d1c <HAL_DMA_Init+0x428>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b5c:	d328      	bcc.n	8001bb0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b28      	cmp	r3, #40	; 0x28
 8001b64:	d903      	bls.n	8001b6e <HAL_DMA_Init+0x27a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8001b6c:	d917      	bls.n	8001b9e <HAL_DMA_Init+0x2aa>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b3e      	cmp	r3, #62	; 0x3e
 8001b74:	d903      	bls.n	8001b7e <HAL_DMA_Init+0x28a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b42      	cmp	r3, #66	; 0x42
 8001b7c:	d90f      	bls.n	8001b9e <HAL_DMA_Init+0x2aa>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b46      	cmp	r3, #70	; 0x46
 8001b84:	d903      	bls.n	8001b8e <HAL_DMA_Init+0x29a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b48      	cmp	r3, #72	; 0x48
 8001b8c:	d907      	bls.n	8001b9e <HAL_DMA_Init+0x2aa>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b4e      	cmp	r3, #78	; 0x4e
 8001b94:	d905      	bls.n	8001ba2 <HAL_DMA_Init+0x2ae>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b52      	cmp	r3, #82	; 0x52
 8001b9c:	d801      	bhi.n	8001ba2 <HAL_DMA_Init+0x2ae>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_DMA_Init+0x2b0>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f023 0307 	bic.w	r3, r3, #7
 8001bc6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d117      	bne.n	8001c0a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00e      	beq.n	8001c0a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f002 f821 	bl	8003c34 <DMA_CheckFifoParam>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2240      	movs	r2, #64	; 0x40
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e197      	b.n	8001f3a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f001 ff5c 	bl	8003ad0 <DMA_CalcBaseAndBitshift>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	223f      	movs	r2, #63	; 0x3f
 8001c26:	409a      	lsls	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	e0cd      	b.n	8001dca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a3b      	ldr	r2, [pc, #236]	; (8001d20 <HAL_DMA_Init+0x42c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d022      	beq.n	8001c7e <HAL_DMA_Init+0x38a>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a39      	ldr	r2, [pc, #228]	; (8001d24 <HAL_DMA_Init+0x430>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01d      	beq.n	8001c7e <HAL_DMA_Init+0x38a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a38      	ldr	r2, [pc, #224]	; (8001d28 <HAL_DMA_Init+0x434>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d018      	beq.n	8001c7e <HAL_DMA_Init+0x38a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a36      	ldr	r2, [pc, #216]	; (8001d2c <HAL_DMA_Init+0x438>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_DMA_Init+0x38a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a35      	ldr	r2, [pc, #212]	; (8001d30 <HAL_DMA_Init+0x43c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00e      	beq.n	8001c7e <HAL_DMA_Init+0x38a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a33      	ldr	r2, [pc, #204]	; (8001d34 <HAL_DMA_Init+0x440>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d009      	beq.n	8001c7e <HAL_DMA_Init+0x38a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a32      	ldr	r2, [pc, #200]	; (8001d38 <HAL_DMA_Init+0x444>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d004      	beq.n	8001c7e <HAL_DMA_Init+0x38a>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a30      	ldr	r2, [pc, #192]	; (8001d3c <HAL_DMA_Init+0x448>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_DMA_Init+0x38e>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_DMA_Init+0x390>
 8001c82:	2300      	movs	r3, #0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 8097 	beq.w	8001db8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a24      	ldr	r2, [pc, #144]	; (8001d20 <HAL_DMA_Init+0x42c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d021      	beq.n	8001cd8 <HAL_DMA_Init+0x3e4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a22      	ldr	r2, [pc, #136]	; (8001d24 <HAL_DMA_Init+0x430>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01c      	beq.n	8001cd8 <HAL_DMA_Init+0x3e4>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <HAL_DMA_Init+0x434>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d017      	beq.n	8001cd8 <HAL_DMA_Init+0x3e4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <HAL_DMA_Init+0x438>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d012      	beq.n	8001cd8 <HAL_DMA_Init+0x3e4>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1e      	ldr	r2, [pc, #120]	; (8001d30 <HAL_DMA_Init+0x43c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00d      	beq.n	8001cd8 <HAL_DMA_Init+0x3e4>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1c      	ldr	r2, [pc, #112]	; (8001d34 <HAL_DMA_Init+0x440>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d008      	beq.n	8001cd8 <HAL_DMA_Init+0x3e4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <HAL_DMA_Init+0x444>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d003      	beq.n	8001cd8 <HAL_DMA_Init+0x3e4>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_DMA_Init+0x448>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_DMA_Init+0x44c>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b40      	cmp	r3, #64	; 0x40
 8001d00:	d020      	beq.n	8001d44 <HAL_DMA_Init+0x450>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b80      	cmp	r3, #128	; 0x80
 8001d08:	d102      	bne.n	8001d10 <HAL_DMA_Init+0x41c>
 8001d0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d0e:	e01a      	b.n	8001d46 <HAL_DMA_Init+0x452>
 8001d10:	2300      	movs	r3, #0
 8001d12:	e018      	b.n	8001d46 <HAL_DMA_Init+0x452>
 8001d14:	fe10803f 	.word	0xfe10803f
 8001d18:	5c001000 	.word	0x5c001000
 8001d1c:	ffff0000 	.word	0xffff0000
 8001d20:	58025408 	.word	0x58025408
 8001d24:	5802541c 	.word	0x5802541c
 8001d28:	58025430 	.word	0x58025430
 8001d2c:	58025444 	.word	0x58025444
 8001d30:	58025458 	.word	0x58025458
 8001d34:	5802546c 	.word	0x5802546c
 8001d38:	58025480 	.word	0x58025480
 8001d3c:	58025494 	.word	0x58025494
 8001d40:	fffe000f 	.word	0xfffe000f
 8001d44:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68d2      	ldr	r2, [r2, #12]
 8001d4a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d74:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b6e      	ldr	r3, [pc, #440]	; (8001f44 <HAL_DMA_Init+0x650>)
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a6e      	ldr	r2, [pc, #440]	; (8001f48 <HAL_DMA_Init+0x654>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	009a      	lsls	r2, r3, #2
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f001 fe97 	bl	8003ad0 <DMA_CalcBaseAndBitshift>
 8001da2:	4603      	mov	r3, r0
 8001da4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2201      	movs	r2, #1
 8001db0:	409a      	lsls	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	e008      	b.n	8001dca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0b7      	b.n	8001f3a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a5f      	ldr	r2, [pc, #380]	; (8001f4c <HAL_DMA_Init+0x658>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d072      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a5d      	ldr	r2, [pc, #372]	; (8001f50 <HAL_DMA_Init+0x65c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d06d      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a5c      	ldr	r2, [pc, #368]	; (8001f54 <HAL_DMA_Init+0x660>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d068      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a5a      	ldr	r2, [pc, #360]	; (8001f58 <HAL_DMA_Init+0x664>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d063      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a59      	ldr	r2, [pc, #356]	; (8001f5c <HAL_DMA_Init+0x668>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d05e      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a57      	ldr	r2, [pc, #348]	; (8001f60 <HAL_DMA_Init+0x66c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d059      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a56      	ldr	r2, [pc, #344]	; (8001f64 <HAL_DMA_Init+0x670>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d054      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a54      	ldr	r2, [pc, #336]	; (8001f68 <HAL_DMA_Init+0x674>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d04f      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a53      	ldr	r2, [pc, #332]	; (8001f6c <HAL_DMA_Init+0x678>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d04a      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a51      	ldr	r2, [pc, #324]	; (8001f70 <HAL_DMA_Init+0x67c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d045      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a50      	ldr	r2, [pc, #320]	; (8001f74 <HAL_DMA_Init+0x680>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d040      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a4e      	ldr	r2, [pc, #312]	; (8001f78 <HAL_DMA_Init+0x684>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d03b      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a4d      	ldr	r2, [pc, #308]	; (8001f7c <HAL_DMA_Init+0x688>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d036      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	; (8001f80 <HAL_DMA_Init+0x68c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d031      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a4a      	ldr	r2, [pc, #296]	; (8001f84 <HAL_DMA_Init+0x690>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d02c      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a48      	ldr	r2, [pc, #288]	; (8001f88 <HAL_DMA_Init+0x694>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d027      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a47      	ldr	r2, [pc, #284]	; (8001f8c <HAL_DMA_Init+0x698>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d022      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a45      	ldr	r2, [pc, #276]	; (8001f90 <HAL_DMA_Init+0x69c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01d      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a44      	ldr	r2, [pc, #272]	; (8001f94 <HAL_DMA_Init+0x6a0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d018      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a42      	ldr	r2, [pc, #264]	; (8001f98 <HAL_DMA_Init+0x6a4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a41      	ldr	r2, [pc, #260]	; (8001f9c <HAL_DMA_Init+0x6a8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00e      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a3f      	ldr	r2, [pc, #252]	; (8001fa0 <HAL_DMA_Init+0x6ac>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d009      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a3e      	ldr	r2, [pc, #248]	; (8001fa4 <HAL_DMA_Init+0x6b0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d004      	beq.n	8001eba <HAL_DMA_Init+0x5c6>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <HAL_DMA_Init+0x6b4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_DMA_Init+0x5ca>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_DMA_Init+0x5cc>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d032      	beq.n	8001f2a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f001 ff31 	bl	8003d2c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b80      	cmp	r3, #128	; 0x80
 8001ed0:	d102      	bne.n	8001ed8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001eec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d010      	beq.n	8001f18 <HAL_DMA_Init+0x624>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d80c      	bhi.n	8001f18 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f001 ffae 	bl	8003e60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	e008      	b.n	8001f2a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	a7fdabf8 	.word	0xa7fdabf8
 8001f48:	cccccccd 	.word	0xcccccccd
 8001f4c:	40020010 	.word	0x40020010
 8001f50:	40020028 	.word	0x40020028
 8001f54:	40020040 	.word	0x40020040
 8001f58:	40020058 	.word	0x40020058
 8001f5c:	40020070 	.word	0x40020070
 8001f60:	40020088 	.word	0x40020088
 8001f64:	400200a0 	.word	0x400200a0
 8001f68:	400200b8 	.word	0x400200b8
 8001f6c:	40020410 	.word	0x40020410
 8001f70:	40020428 	.word	0x40020428
 8001f74:	40020440 	.word	0x40020440
 8001f78:	40020458 	.word	0x40020458
 8001f7c:	40020470 	.word	0x40020470
 8001f80:	40020488 	.word	0x40020488
 8001f84:	400204a0 	.word	0x400204a0
 8001f88:	400204b8 	.word	0x400204b8
 8001f8c:	58025408 	.word	0x58025408
 8001f90:	5802541c 	.word	0x5802541c
 8001f94:	58025430 	.word	0x58025430
 8001f98:	58025444 	.word	0x58025444
 8001f9c:	58025458 	.word	0x58025458
 8001fa0:	5802546c 	.word	0x5802546c
 8001fa4:	58025480 	.word	0x58025480
 8001fa8:	58025494 	.word	0x58025494

08001fac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e226      	b.n	8002416 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_DMA_Start_IT+0x2a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e21f      	b.n	8002416 <HAL_DMA_Start_IT+0x46a>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	f040 820a 	bne.w	8002400 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a68      	ldr	r2, [pc, #416]	; (80021a0 <HAL_DMA_Start_IT+0x1f4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d04a      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a66      	ldr	r2, [pc, #408]	; (80021a4 <HAL_DMA_Start_IT+0x1f8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d045      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a65      	ldr	r2, [pc, #404]	; (80021a8 <HAL_DMA_Start_IT+0x1fc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d040      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a63      	ldr	r2, [pc, #396]	; (80021ac <HAL_DMA_Start_IT+0x200>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d03b      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a62      	ldr	r2, [pc, #392]	; (80021b0 <HAL_DMA_Start_IT+0x204>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d036      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a60      	ldr	r2, [pc, #384]	; (80021b4 <HAL_DMA_Start_IT+0x208>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d031      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a5f      	ldr	r2, [pc, #380]	; (80021b8 <HAL_DMA_Start_IT+0x20c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d02c      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <HAL_DMA_Start_IT+0x210>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d027      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <HAL_DMA_Start_IT+0x214>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d022      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a5a      	ldr	r2, [pc, #360]	; (80021c4 <HAL_DMA_Start_IT+0x218>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01d      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a59      	ldr	r2, [pc, #356]	; (80021c8 <HAL_DMA_Start_IT+0x21c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d018      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a57      	ldr	r2, [pc, #348]	; (80021cc <HAL_DMA_Start_IT+0x220>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a56      	ldr	r2, [pc, #344]	; (80021d0 <HAL_DMA_Start_IT+0x224>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d00e      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a54      	ldr	r2, [pc, #336]	; (80021d4 <HAL_DMA_Start_IT+0x228>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d009      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a53      	ldr	r2, [pc, #332]	; (80021d8 <HAL_DMA_Start_IT+0x22c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d004      	beq.n	800209a <HAL_DMA_Start_IT+0xee>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a51      	ldr	r2, [pc, #324]	; (80021dc <HAL_DMA_Start_IT+0x230>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d108      	bne.n	80020ac <HAL_DMA_Start_IT+0x100>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e007      	b.n	80020bc <HAL_DMA_Start_IT+0x110>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f001 fb58 	bl	8003778 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <HAL_DMA_Start_IT+0x1f4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d04a      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <HAL_DMA_Start_IT+0x1f8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d045      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a31      	ldr	r2, [pc, #196]	; (80021a8 <HAL_DMA_Start_IT+0x1fc>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d040      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a30      	ldr	r2, [pc, #192]	; (80021ac <HAL_DMA_Start_IT+0x200>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d03b      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2e      	ldr	r2, [pc, #184]	; (80021b0 <HAL_DMA_Start_IT+0x204>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d036      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a2d      	ldr	r2, [pc, #180]	; (80021b4 <HAL_DMA_Start_IT+0x208>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d031      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a2b      	ldr	r2, [pc, #172]	; (80021b8 <HAL_DMA_Start_IT+0x20c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d02c      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a2a      	ldr	r2, [pc, #168]	; (80021bc <HAL_DMA_Start_IT+0x210>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d027      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a28      	ldr	r2, [pc, #160]	; (80021c0 <HAL_DMA_Start_IT+0x214>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d022      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <HAL_DMA_Start_IT+0x218>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d01d      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <HAL_DMA_Start_IT+0x21c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d018      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a24      	ldr	r2, [pc, #144]	; (80021cc <HAL_DMA_Start_IT+0x220>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d013      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <HAL_DMA_Start_IT+0x224>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00e      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a21      	ldr	r2, [pc, #132]	; (80021d4 <HAL_DMA_Start_IT+0x228>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d009      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1f      	ldr	r2, [pc, #124]	; (80021d8 <HAL_DMA_Start_IT+0x22c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d004      	beq.n	8002168 <HAL_DMA_Start_IT+0x1bc>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1e      	ldr	r2, [pc, #120]	; (80021dc <HAL_DMA_Start_IT+0x230>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_DMA_Start_IT+0x1c0>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_DMA_Start_IT+0x1c2>
 800216c:	2300      	movs	r3, #0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d036      	beq.n	80021e0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 021e 	bic.w	r2, r3, #30
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0216 	orr.w	r2, r2, #22
 8002184:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d03e      	beq.n	800220c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0208 	orr.w	r2, r2, #8
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e035      	b.n	800220c <HAL_DMA_Start_IT+0x260>
 80021a0:	40020010 	.word	0x40020010
 80021a4:	40020028 	.word	0x40020028
 80021a8:	40020040 	.word	0x40020040
 80021ac:	40020058 	.word	0x40020058
 80021b0:	40020070 	.word	0x40020070
 80021b4:	40020088 	.word	0x40020088
 80021b8:	400200a0 	.word	0x400200a0
 80021bc:	400200b8 	.word	0x400200b8
 80021c0:	40020410 	.word	0x40020410
 80021c4:	40020428 	.word	0x40020428
 80021c8:	40020440 	.word	0x40020440
 80021cc:	40020458 	.word	0x40020458
 80021d0:	40020470 	.word	0x40020470
 80021d4:	40020488 	.word	0x40020488
 80021d8:	400204a0 	.word	0x400204a0
 80021dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 020e 	bic.w	r2, r3, #14
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 020a 	orr.w	r2, r2, #10
 80021f2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0204 	orr.w	r2, r2, #4
 800220a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a83      	ldr	r2, [pc, #524]	; (8002420 <HAL_DMA_Start_IT+0x474>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d072      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a82      	ldr	r2, [pc, #520]	; (8002424 <HAL_DMA_Start_IT+0x478>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d06d      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a80      	ldr	r2, [pc, #512]	; (8002428 <HAL_DMA_Start_IT+0x47c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d068      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a7f      	ldr	r2, [pc, #508]	; (800242c <HAL_DMA_Start_IT+0x480>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d063      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a7d      	ldr	r2, [pc, #500]	; (8002430 <HAL_DMA_Start_IT+0x484>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d05e      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7c      	ldr	r2, [pc, #496]	; (8002434 <HAL_DMA_Start_IT+0x488>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d059      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a7a      	ldr	r2, [pc, #488]	; (8002438 <HAL_DMA_Start_IT+0x48c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d054      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a79      	ldr	r2, [pc, #484]	; (800243c <HAL_DMA_Start_IT+0x490>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d04f      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a77      	ldr	r2, [pc, #476]	; (8002440 <HAL_DMA_Start_IT+0x494>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d04a      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a76      	ldr	r2, [pc, #472]	; (8002444 <HAL_DMA_Start_IT+0x498>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d045      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a74      	ldr	r2, [pc, #464]	; (8002448 <HAL_DMA_Start_IT+0x49c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d040      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a73      	ldr	r2, [pc, #460]	; (800244c <HAL_DMA_Start_IT+0x4a0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d03b      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a71      	ldr	r2, [pc, #452]	; (8002450 <HAL_DMA_Start_IT+0x4a4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d036      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a70      	ldr	r2, [pc, #448]	; (8002454 <HAL_DMA_Start_IT+0x4a8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d031      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a6e      	ldr	r2, [pc, #440]	; (8002458 <HAL_DMA_Start_IT+0x4ac>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d02c      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a6d      	ldr	r2, [pc, #436]	; (800245c <HAL_DMA_Start_IT+0x4b0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d027      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a6b      	ldr	r2, [pc, #428]	; (8002460 <HAL_DMA_Start_IT+0x4b4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d022      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6a      	ldr	r2, [pc, #424]	; (8002464 <HAL_DMA_Start_IT+0x4b8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d01d      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a68      	ldr	r2, [pc, #416]	; (8002468 <HAL_DMA_Start_IT+0x4bc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d018      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a67      	ldr	r2, [pc, #412]	; (800246c <HAL_DMA_Start_IT+0x4c0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d013      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a65      	ldr	r2, [pc, #404]	; (8002470 <HAL_DMA_Start_IT+0x4c4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00e      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a64      	ldr	r2, [pc, #400]	; (8002474 <HAL_DMA_Start_IT+0x4c8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d009      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a62      	ldr	r2, [pc, #392]	; (8002478 <HAL_DMA_Start_IT+0x4cc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_DMA_Start_IT+0x350>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a61      	ldr	r2, [pc, #388]	; (800247c <HAL_DMA_Start_IT+0x4d0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_DMA_Start_IT+0x354>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_DMA_Start_IT+0x356>
 8002300:	2300      	movs	r3, #0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d01a      	beq.n	800233c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002322:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a37      	ldr	r2, [pc, #220]	; (8002420 <HAL_DMA_Start_IT+0x474>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d04a      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a36      	ldr	r2, [pc, #216]	; (8002424 <HAL_DMA_Start_IT+0x478>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d045      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a34      	ldr	r2, [pc, #208]	; (8002428 <HAL_DMA_Start_IT+0x47c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d040      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a33      	ldr	r2, [pc, #204]	; (800242c <HAL_DMA_Start_IT+0x480>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d03b      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a31      	ldr	r2, [pc, #196]	; (8002430 <HAL_DMA_Start_IT+0x484>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d036      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a30      	ldr	r2, [pc, #192]	; (8002434 <HAL_DMA_Start_IT+0x488>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d031      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a2e      	ldr	r2, [pc, #184]	; (8002438 <HAL_DMA_Start_IT+0x48c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d02c      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a2d      	ldr	r2, [pc, #180]	; (800243c <HAL_DMA_Start_IT+0x490>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d027      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a2b      	ldr	r2, [pc, #172]	; (8002440 <HAL_DMA_Start_IT+0x494>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d022      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a2a      	ldr	r2, [pc, #168]	; (8002444 <HAL_DMA_Start_IT+0x498>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d01d      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a28      	ldr	r2, [pc, #160]	; (8002448 <HAL_DMA_Start_IT+0x49c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d018      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a27      	ldr	r2, [pc, #156]	; (800244c <HAL_DMA_Start_IT+0x4a0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d013      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a25      	ldr	r2, [pc, #148]	; (8002450 <HAL_DMA_Start_IT+0x4a4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00e      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a24      	ldr	r2, [pc, #144]	; (8002454 <HAL_DMA_Start_IT+0x4a8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d009      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a22      	ldr	r2, [pc, #136]	; (8002458 <HAL_DMA_Start_IT+0x4ac>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d004      	beq.n	80023dc <HAL_DMA_Start_IT+0x430>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a21      	ldr	r2, [pc, #132]	; (800245c <HAL_DMA_Start_IT+0x4b0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d108      	bne.n	80023ee <HAL_DMA_Start_IT+0x442>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e012      	b.n	8002414 <HAL_DMA_Start_IT+0x468>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e009      	b.n	8002414 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002406:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002414:	7dfb      	ldrb	r3, [r7, #23]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40020010 	.word	0x40020010
 8002424:	40020028 	.word	0x40020028
 8002428:	40020040 	.word	0x40020040
 800242c:	40020058 	.word	0x40020058
 8002430:	40020070 	.word	0x40020070
 8002434:	40020088 	.word	0x40020088
 8002438:	400200a0 	.word	0x400200a0
 800243c:	400200b8 	.word	0x400200b8
 8002440:	40020410 	.word	0x40020410
 8002444:	40020428 	.word	0x40020428
 8002448:	40020440 	.word	0x40020440
 800244c:	40020458 	.word	0x40020458
 8002450:	40020470 	.word	0x40020470
 8002454:	40020488 	.word	0x40020488
 8002458:	400204a0 	.word	0x400204a0
 800245c:	400204b8 	.word	0x400204b8
 8002460:	58025408 	.word	0x58025408
 8002464:	5802541c 	.word	0x5802541c
 8002468:	58025430 	.word	0x58025430
 800246c:	58025444 	.word	0x58025444
 8002470:	58025458 	.word	0x58025458
 8002474:	5802546c 	.word	0x5802546c
 8002478:	58025480 	.word	0x58025480
 800247c:	58025494 	.word	0x58025494

08002480 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e237      	b.n	8002902 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d004      	beq.n	80024a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e22c      	b.n	8002902 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a5c      	ldr	r2, [pc, #368]	; (8002620 <HAL_DMA_Abort_IT+0x1a0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d04a      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a5b      	ldr	r2, [pc, #364]	; (8002624 <HAL_DMA_Abort_IT+0x1a4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d045      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a59      	ldr	r2, [pc, #356]	; (8002628 <HAL_DMA_Abort_IT+0x1a8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d040      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a58      	ldr	r2, [pc, #352]	; (800262c <HAL_DMA_Abort_IT+0x1ac>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d03b      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a56      	ldr	r2, [pc, #344]	; (8002630 <HAL_DMA_Abort_IT+0x1b0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d036      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a55      	ldr	r2, [pc, #340]	; (8002634 <HAL_DMA_Abort_IT+0x1b4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d031      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a53      	ldr	r2, [pc, #332]	; (8002638 <HAL_DMA_Abort_IT+0x1b8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d02c      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_DMA_Abort_IT+0x1bc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d027      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a50      	ldr	r2, [pc, #320]	; (8002640 <HAL_DMA_Abort_IT+0x1c0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d022      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a4f      	ldr	r2, [pc, #316]	; (8002644 <HAL_DMA_Abort_IT+0x1c4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d01d      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a4d      	ldr	r2, [pc, #308]	; (8002648 <HAL_DMA_Abort_IT+0x1c8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d018      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a4c      	ldr	r2, [pc, #304]	; (800264c <HAL_DMA_Abort_IT+0x1cc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a4a      	ldr	r2, [pc, #296]	; (8002650 <HAL_DMA_Abort_IT+0x1d0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00e      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a49      	ldr	r2, [pc, #292]	; (8002654 <HAL_DMA_Abort_IT+0x1d4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a47      	ldr	r2, [pc, #284]	; (8002658 <HAL_DMA_Abort_IT+0x1d8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_DMA_Abort_IT+0xc8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a46      	ldr	r2, [pc, #280]	; (800265c <HAL_DMA_Abort_IT+0x1dc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_DMA_Abort_IT+0xcc>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_DMA_Abort_IT+0xce>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 8086 	beq.w	8002660 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2204      	movs	r2, #4
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a2f      	ldr	r2, [pc, #188]	; (8002620 <HAL_DMA_Abort_IT+0x1a0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d04a      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a2e      	ldr	r2, [pc, #184]	; (8002624 <HAL_DMA_Abort_IT+0x1a4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d045      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <HAL_DMA_Abort_IT+0x1a8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d040      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2b      	ldr	r2, [pc, #172]	; (800262c <HAL_DMA_Abort_IT+0x1ac>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d03b      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a29      	ldr	r2, [pc, #164]	; (8002630 <HAL_DMA_Abort_IT+0x1b0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d036      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a28      	ldr	r2, [pc, #160]	; (8002634 <HAL_DMA_Abort_IT+0x1b4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d031      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a26      	ldr	r2, [pc, #152]	; (8002638 <HAL_DMA_Abort_IT+0x1b8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d02c      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a25      	ldr	r2, [pc, #148]	; (800263c <HAL_DMA_Abort_IT+0x1bc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d027      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a23      	ldr	r2, [pc, #140]	; (8002640 <HAL_DMA_Abort_IT+0x1c0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d022      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a22      	ldr	r2, [pc, #136]	; (8002644 <HAL_DMA_Abort_IT+0x1c4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d01d      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a20      	ldr	r2, [pc, #128]	; (8002648 <HAL_DMA_Abort_IT+0x1c8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d018      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_DMA_Abort_IT+0x1cc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <HAL_DMA_Abort_IT+0x1d0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00e      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <HAL_DMA_Abort_IT+0x1d4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d009      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <HAL_DMA_Abort_IT+0x1d8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_DMA_Abort_IT+0x1dc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d108      	bne.n	800260e <HAL_DMA_Abort_IT+0x18e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e178      	b.n	8002900 <HAL_DMA_Abort_IT+0x480>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e16f      	b.n	8002900 <HAL_DMA_Abort_IT+0x480>
 8002620:	40020010 	.word	0x40020010
 8002624:	40020028 	.word	0x40020028
 8002628:	40020040 	.word	0x40020040
 800262c:	40020058 	.word	0x40020058
 8002630:	40020070 	.word	0x40020070
 8002634:	40020088 	.word	0x40020088
 8002638:	400200a0 	.word	0x400200a0
 800263c:	400200b8 	.word	0x400200b8
 8002640:	40020410 	.word	0x40020410
 8002644:	40020428 	.word	0x40020428
 8002648:	40020440 	.word	0x40020440
 800264c:	40020458 	.word	0x40020458
 8002650:	40020470 	.word	0x40020470
 8002654:	40020488 	.word	0x40020488
 8002658:	400204a0 	.word	0x400204a0
 800265c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 020e 	bic.w	r2, r2, #14
 800266e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a6c      	ldr	r2, [pc, #432]	; (8002828 <HAL_DMA_Abort_IT+0x3a8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d04a      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6b      	ldr	r2, [pc, #428]	; (800282c <HAL_DMA_Abort_IT+0x3ac>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d045      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a69      	ldr	r2, [pc, #420]	; (8002830 <HAL_DMA_Abort_IT+0x3b0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d040      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a68      	ldr	r2, [pc, #416]	; (8002834 <HAL_DMA_Abort_IT+0x3b4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d03b      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a66      	ldr	r2, [pc, #408]	; (8002838 <HAL_DMA_Abort_IT+0x3b8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d036      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a65      	ldr	r2, [pc, #404]	; (800283c <HAL_DMA_Abort_IT+0x3bc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d031      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a63      	ldr	r2, [pc, #396]	; (8002840 <HAL_DMA_Abort_IT+0x3c0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d02c      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a62      	ldr	r2, [pc, #392]	; (8002844 <HAL_DMA_Abort_IT+0x3c4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d027      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a60      	ldr	r2, [pc, #384]	; (8002848 <HAL_DMA_Abort_IT+0x3c8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d022      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a5f      	ldr	r2, [pc, #380]	; (800284c <HAL_DMA_Abort_IT+0x3cc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d01d      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a5d      	ldr	r2, [pc, #372]	; (8002850 <HAL_DMA_Abort_IT+0x3d0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d018      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a5c      	ldr	r2, [pc, #368]	; (8002854 <HAL_DMA_Abort_IT+0x3d4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d013      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a5a      	ldr	r2, [pc, #360]	; (8002858 <HAL_DMA_Abort_IT+0x3d8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00e      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a59      	ldr	r2, [pc, #356]	; (800285c <HAL_DMA_Abort_IT+0x3dc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a57      	ldr	r2, [pc, #348]	; (8002860 <HAL_DMA_Abort_IT+0x3e0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_DMA_Abort_IT+0x290>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a56      	ldr	r2, [pc, #344]	; (8002864 <HAL_DMA_Abort_IT+0x3e4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d108      	bne.n	8002722 <HAL_DMA_Abort_IT+0x2a2>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e007      	b.n	8002732 <HAL_DMA_Abort_IT+0x2b2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a3c      	ldr	r2, [pc, #240]	; (8002828 <HAL_DMA_Abort_IT+0x3a8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d072      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a3a      	ldr	r2, [pc, #232]	; (800282c <HAL_DMA_Abort_IT+0x3ac>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d06d      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a39      	ldr	r2, [pc, #228]	; (8002830 <HAL_DMA_Abort_IT+0x3b0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d068      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a37      	ldr	r2, [pc, #220]	; (8002834 <HAL_DMA_Abort_IT+0x3b4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d063      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a36      	ldr	r2, [pc, #216]	; (8002838 <HAL_DMA_Abort_IT+0x3b8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d05e      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a34      	ldr	r2, [pc, #208]	; (800283c <HAL_DMA_Abort_IT+0x3bc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d059      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a33      	ldr	r2, [pc, #204]	; (8002840 <HAL_DMA_Abort_IT+0x3c0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d054      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a31      	ldr	r2, [pc, #196]	; (8002844 <HAL_DMA_Abort_IT+0x3c4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d04f      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a30      	ldr	r2, [pc, #192]	; (8002848 <HAL_DMA_Abort_IT+0x3c8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d04a      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a2e      	ldr	r2, [pc, #184]	; (800284c <HAL_DMA_Abort_IT+0x3cc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d045      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a2d      	ldr	r2, [pc, #180]	; (8002850 <HAL_DMA_Abort_IT+0x3d0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d040      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a2b      	ldr	r2, [pc, #172]	; (8002854 <HAL_DMA_Abort_IT+0x3d4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d03b      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a2a      	ldr	r2, [pc, #168]	; (8002858 <HAL_DMA_Abort_IT+0x3d8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d036      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a28      	ldr	r2, [pc, #160]	; (800285c <HAL_DMA_Abort_IT+0x3dc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d031      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a27      	ldr	r2, [pc, #156]	; (8002860 <HAL_DMA_Abort_IT+0x3e0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d02c      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a25      	ldr	r2, [pc, #148]	; (8002864 <HAL_DMA_Abort_IT+0x3e4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d027      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a24      	ldr	r2, [pc, #144]	; (8002868 <HAL_DMA_Abort_IT+0x3e8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d022      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a22      	ldr	r2, [pc, #136]	; (800286c <HAL_DMA_Abort_IT+0x3ec>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01d      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a21      	ldr	r2, [pc, #132]	; (8002870 <HAL_DMA_Abort_IT+0x3f0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d018      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <HAL_DMA_Abort_IT+0x3f4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1e      	ldr	r2, [pc, #120]	; (8002878 <HAL_DMA_Abort_IT+0x3f8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00e      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_DMA_Abort_IT+0x3fc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d009      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <HAL_DMA_Abort_IT+0x400>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_DMA_Abort_IT+0x3a2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a19      	ldr	r2, [pc, #100]	; (8002884 <HAL_DMA_Abort_IT+0x404>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d132      	bne.n	8002888 <HAL_DMA_Abort_IT+0x408>
 8002822:	2301      	movs	r3, #1
 8002824:	e031      	b.n	800288a <HAL_DMA_Abort_IT+0x40a>
 8002826:	bf00      	nop
 8002828:	40020010 	.word	0x40020010
 800282c:	40020028 	.word	0x40020028
 8002830:	40020040 	.word	0x40020040
 8002834:	40020058 	.word	0x40020058
 8002838:	40020070 	.word	0x40020070
 800283c:	40020088 	.word	0x40020088
 8002840:	400200a0 	.word	0x400200a0
 8002844:	400200b8 	.word	0x400200b8
 8002848:	40020410 	.word	0x40020410
 800284c:	40020428 	.word	0x40020428
 8002850:	40020440 	.word	0x40020440
 8002854:	40020458 	.word	0x40020458
 8002858:	40020470 	.word	0x40020470
 800285c:	40020488 	.word	0x40020488
 8002860:	400204a0 	.word	0x400204a0
 8002864:	400204b8 	.word	0x400204b8
 8002868:	58025408 	.word	0x58025408
 800286c:	5802541c 	.word	0x5802541c
 8002870:	58025430 	.word	0x58025430
 8002874:	58025444 	.word	0x58025444
 8002878:	58025458 	.word	0x58025458
 800287c:	5802546c 	.word	0x5802546c
 8002880:	58025480 	.word	0x58025480
 8002884:	58025494 	.word	0x58025494
 8002888:	2300      	movs	r3, #0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d028      	beq.n	80028e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800289c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	2201      	movs	r2, #1
 80028ae:	409a      	lsls	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00c      	beq.n	80028e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop

0800290c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002918:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <HAL_DMA_IRQHandler+0x1ac>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a67      	ldr	r2, [pc, #412]	; (8002abc <HAL_DMA_IRQHandler+0x1b0>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0a9b      	lsrs	r3, r3, #10
 8002924:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a5f      	ldr	r2, [pc, #380]	; (8002ac0 <HAL_DMA_IRQHandler+0x1b4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d04a      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a5d      	ldr	r2, [pc, #372]	; (8002ac4 <HAL_DMA_IRQHandler+0x1b8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d045      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a5c      	ldr	r2, [pc, #368]	; (8002ac8 <HAL_DMA_IRQHandler+0x1bc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d040      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a5a      	ldr	r2, [pc, #360]	; (8002acc <HAL_DMA_IRQHandler+0x1c0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d03b      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a59      	ldr	r2, [pc, #356]	; (8002ad0 <HAL_DMA_IRQHandler+0x1c4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d036      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a57      	ldr	r2, [pc, #348]	; (8002ad4 <HAL_DMA_IRQHandler+0x1c8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d031      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a56      	ldr	r2, [pc, #344]	; (8002ad8 <HAL_DMA_IRQHandler+0x1cc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d02c      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a54      	ldr	r2, [pc, #336]	; (8002adc <HAL_DMA_IRQHandler+0x1d0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d027      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a53      	ldr	r2, [pc, #332]	; (8002ae0 <HAL_DMA_IRQHandler+0x1d4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a51      	ldr	r2, [pc, #324]	; (8002ae4 <HAL_DMA_IRQHandler+0x1d8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01d      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a50      	ldr	r2, [pc, #320]	; (8002ae8 <HAL_DMA_IRQHandler+0x1dc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d018      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a4e      	ldr	r2, [pc, #312]	; (8002aec <HAL_DMA_IRQHandler+0x1e0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a4d      	ldr	r2, [pc, #308]	; (8002af0 <HAL_DMA_IRQHandler+0x1e4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00e      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a4b      	ldr	r2, [pc, #300]	; (8002af4 <HAL_DMA_IRQHandler+0x1e8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a4a      	ldr	r2, [pc, #296]	; (8002af8 <HAL_DMA_IRQHandler+0x1ec>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a48      	ldr	r2, [pc, #288]	; (8002afc <HAL_DMA_IRQHandler+0x1f0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d101      	bne.n	80029e2 <HAL_DMA_IRQHandler+0xd6>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_DMA_IRQHandler+0xd8>
 80029e2:	2300      	movs	r3, #0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 842b 	beq.w	8003240 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2208      	movs	r2, #8
 80029f4:	409a      	lsls	r2, r3
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80a2 	beq.w	8002b44 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a2e      	ldr	r2, [pc, #184]	; (8002ac0 <HAL_DMA_IRQHandler+0x1b4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d04a      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a2d      	ldr	r2, [pc, #180]	; (8002ac4 <HAL_DMA_IRQHandler+0x1b8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d045      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2b      	ldr	r2, [pc, #172]	; (8002ac8 <HAL_DMA_IRQHandler+0x1bc>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d040      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2a      	ldr	r2, [pc, #168]	; (8002acc <HAL_DMA_IRQHandler+0x1c0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d03b      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a28      	ldr	r2, [pc, #160]	; (8002ad0 <HAL_DMA_IRQHandler+0x1c4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d036      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a27      	ldr	r2, [pc, #156]	; (8002ad4 <HAL_DMA_IRQHandler+0x1c8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d031      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a25      	ldr	r2, [pc, #148]	; (8002ad8 <HAL_DMA_IRQHandler+0x1cc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d02c      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a24      	ldr	r2, [pc, #144]	; (8002adc <HAL_DMA_IRQHandler+0x1d0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d027      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <HAL_DMA_IRQHandler+0x1d4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d022      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <HAL_DMA_IRQHandler+0x1d8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d01d      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1f      	ldr	r2, [pc, #124]	; (8002ae8 <HAL_DMA_IRQHandler+0x1dc>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d018      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a1e      	ldr	r2, [pc, #120]	; (8002aec <HAL_DMA_IRQHandler+0x1e0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d013      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <HAL_DMA_IRQHandler+0x1e4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00e      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <HAL_DMA_IRQHandler+0x1e8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d009      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <HAL_DMA_IRQHandler+0x1ec>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x194>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_DMA_IRQHandler+0x1f0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d12f      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x1f4>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf14      	ite	ne
 8002aae:	2301      	movne	r3, #1
 8002ab0:	2300      	moveq	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	e02e      	b.n	8002b14 <HAL_DMA_IRQHandler+0x208>
 8002ab6:	bf00      	nop
 8002ab8:	24000000 	.word	0x24000000
 8002abc:	1b4e81b5 	.word	0x1b4e81b5
 8002ac0:	40020010 	.word	0x40020010
 8002ac4:	40020028 	.word	0x40020028
 8002ac8:	40020040 	.word	0x40020040
 8002acc:	40020058 	.word	0x40020058
 8002ad0:	40020070 	.word	0x40020070
 8002ad4:	40020088 	.word	0x40020088
 8002ad8:	400200a0 	.word	0x400200a0
 8002adc:	400200b8 	.word	0x400200b8
 8002ae0:	40020410 	.word	0x40020410
 8002ae4:	40020428 	.word	0x40020428
 8002ae8:	40020440 	.word	0x40020440
 8002aec:	40020458 	.word	0x40020458
 8002af0:	40020470 	.word	0x40020470
 8002af4:	40020488 	.word	0x40020488
 8002af8:	400204a0 	.word	0x400204a0
 8002afc:	400204b8 	.word	0x400204b8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bf14      	ite	ne
 8002b0e:	2301      	movne	r3, #1
 8002b10:	2300      	moveq	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	2208      	movs	r2, #8
 8002b32:	409a      	lsls	r2, r3
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d06e      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a69      	ldr	r2, [pc, #420]	; (8002d04 <HAL_DMA_IRQHandler+0x3f8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d04a      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a67      	ldr	r2, [pc, #412]	; (8002d08 <HAL_DMA_IRQHandler+0x3fc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d045      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a66      	ldr	r2, [pc, #408]	; (8002d0c <HAL_DMA_IRQHandler+0x400>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d040      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a64      	ldr	r2, [pc, #400]	; (8002d10 <HAL_DMA_IRQHandler+0x404>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d03b      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a63      	ldr	r2, [pc, #396]	; (8002d14 <HAL_DMA_IRQHandler+0x408>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d036      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a61      	ldr	r2, [pc, #388]	; (8002d18 <HAL_DMA_IRQHandler+0x40c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d031      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a60      	ldr	r2, [pc, #384]	; (8002d1c <HAL_DMA_IRQHandler+0x410>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d02c      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a5e      	ldr	r2, [pc, #376]	; (8002d20 <HAL_DMA_IRQHandler+0x414>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d027      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a5d      	ldr	r2, [pc, #372]	; (8002d24 <HAL_DMA_IRQHandler+0x418>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d022      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a5b      	ldr	r2, [pc, #364]	; (8002d28 <HAL_DMA_IRQHandler+0x41c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01d      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a5a      	ldr	r2, [pc, #360]	; (8002d2c <HAL_DMA_IRQHandler+0x420>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d018      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a58      	ldr	r2, [pc, #352]	; (8002d30 <HAL_DMA_IRQHandler+0x424>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <HAL_DMA_IRQHandler+0x428>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00e      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a55      	ldr	r2, [pc, #340]	; (8002d38 <HAL_DMA_IRQHandler+0x42c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a54      	ldr	r2, [pc, #336]	; (8002d3c <HAL_DMA_IRQHandler+0x430>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2ee>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a52      	ldr	r2, [pc, #328]	; (8002d40 <HAL_DMA_IRQHandler+0x434>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d10a      	bne.n	8002c10 <HAL_DMA_IRQHandler+0x304>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf14      	ite	ne
 8002c08:	2301      	movne	r3, #1
 8002c0a:	2300      	moveq	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	e003      	b.n	8002c18 <HAL_DMA_IRQHandler+0x30c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2300      	movs	r3, #0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00d      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	2201      	movs	r2, #1
 8002c26:	409a      	lsls	r2, r3
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c30:	f043 0202 	orr.w	r2, r3, #2
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2204      	movs	r2, #4
 8002c42:	409a      	lsls	r2, r3
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 808f 	beq.w	8002d6c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <HAL_DMA_IRQHandler+0x3f8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d04a      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <HAL_DMA_IRQHandler+0x3fc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d045      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a29      	ldr	r2, [pc, #164]	; (8002d0c <HAL_DMA_IRQHandler+0x400>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d040      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a27      	ldr	r2, [pc, #156]	; (8002d10 <HAL_DMA_IRQHandler+0x404>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d03b      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a26      	ldr	r2, [pc, #152]	; (8002d14 <HAL_DMA_IRQHandler+0x408>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d036      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <HAL_DMA_IRQHandler+0x40c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d031      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a23      	ldr	r2, [pc, #140]	; (8002d1c <HAL_DMA_IRQHandler+0x410>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d02c      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <HAL_DMA_IRQHandler+0x414>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d027      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a20      	ldr	r2, [pc, #128]	; (8002d24 <HAL_DMA_IRQHandler+0x418>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d022      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <HAL_DMA_IRQHandler+0x41c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01d      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <HAL_DMA_IRQHandler+0x420>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d018      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <HAL_DMA_IRQHandler+0x424>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <HAL_DMA_IRQHandler+0x428>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00e      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_DMA_IRQHandler+0x42c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <HAL_DMA_IRQHandler+0x430>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_DMA_IRQHandler+0x3e2>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <HAL_DMA_IRQHandler+0x434>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d12a      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x438>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf14      	ite	ne
 8002cfc:	2301      	movne	r3, #1
 8002cfe:	2300      	moveq	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e023      	b.n	8002d4c <HAL_DMA_IRQHandler+0x440>
 8002d04:	40020010 	.word	0x40020010
 8002d08:	40020028 	.word	0x40020028
 8002d0c:	40020040 	.word	0x40020040
 8002d10:	40020058 	.word	0x40020058
 8002d14:	40020070 	.word	0x40020070
 8002d18:	40020088 	.word	0x40020088
 8002d1c:	400200a0 	.word	0x400200a0
 8002d20:	400200b8 	.word	0x400200b8
 8002d24:	40020410 	.word	0x40020410
 8002d28:	40020428 	.word	0x40020428
 8002d2c:	40020440 	.word	0x40020440
 8002d30:	40020458 	.word	0x40020458
 8002d34:	40020470 	.word	0x40020470
 8002d38:	40020488 	.word	0x40020488
 8002d3c:	400204a0 	.word	0x400204a0
 8002d40:	400204b8 	.word	0x400204b8
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2204      	movs	r2, #4
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f043 0204 	orr.w	r2, r3, #4
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2210      	movs	r2, #16
 8002d76:	409a      	lsls	r2, r3
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80a6 	beq.w	8002ece <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a85      	ldr	r2, [pc, #532]	; (8002f9c <HAL_DMA_IRQHandler+0x690>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d04a      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a83      	ldr	r2, [pc, #524]	; (8002fa0 <HAL_DMA_IRQHandler+0x694>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d045      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a82      	ldr	r2, [pc, #520]	; (8002fa4 <HAL_DMA_IRQHandler+0x698>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d040      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a80      	ldr	r2, [pc, #512]	; (8002fa8 <HAL_DMA_IRQHandler+0x69c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d03b      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7f      	ldr	r2, [pc, #508]	; (8002fac <HAL_DMA_IRQHandler+0x6a0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d036      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a7d      	ldr	r2, [pc, #500]	; (8002fb0 <HAL_DMA_IRQHandler+0x6a4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d031      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7c      	ldr	r2, [pc, #496]	; (8002fb4 <HAL_DMA_IRQHandler+0x6a8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d02c      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a7a      	ldr	r2, [pc, #488]	; (8002fb8 <HAL_DMA_IRQHandler+0x6ac>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d027      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a79      	ldr	r2, [pc, #484]	; (8002fbc <HAL_DMA_IRQHandler+0x6b0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d022      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a77      	ldr	r2, [pc, #476]	; (8002fc0 <HAL_DMA_IRQHandler+0x6b4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01d      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a76      	ldr	r2, [pc, #472]	; (8002fc4 <HAL_DMA_IRQHandler+0x6b8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d018      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a74      	ldr	r2, [pc, #464]	; (8002fc8 <HAL_DMA_IRQHandler+0x6bc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a73      	ldr	r2, [pc, #460]	; (8002fcc <HAL_DMA_IRQHandler+0x6c0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00e      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a71      	ldr	r2, [pc, #452]	; (8002fd0 <HAL_DMA_IRQHandler+0x6c4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a70      	ldr	r2, [pc, #448]	; (8002fd4 <HAL_DMA_IRQHandler+0x6c8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x516>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6e      	ldr	r2, [pc, #440]	; (8002fd8 <HAL_DMA_IRQHandler+0x6cc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d10a      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x52c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e009      	b.n	8002e4c <HAL_DMA_IRQHandler+0x540>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf14      	ite	ne
 8002e46:	2301      	movne	r3, #1
 8002e48:	2300      	moveq	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d03e      	beq.n	8002ece <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2210      	movs	r2, #16
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d018      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d108      	bne.n	8002e8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d024      	beq.n	8002ece <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
 8002e8c:	e01f      	b.n	8002ece <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d01b      	beq.n	8002ece <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	4798      	blx	r3
 8002e9e:	e016      	b.n	8002ece <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d107      	bne.n	8002ebe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0208 	bic.w	r2, r2, #8
 8002ebc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8110 	beq.w	8003104 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a2c      	ldr	r2, [pc, #176]	; (8002f9c <HAL_DMA_IRQHandler+0x690>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d04a      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2b      	ldr	r2, [pc, #172]	; (8002fa0 <HAL_DMA_IRQHandler+0x694>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d045      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a29      	ldr	r2, [pc, #164]	; (8002fa4 <HAL_DMA_IRQHandler+0x698>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d040      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a28      	ldr	r2, [pc, #160]	; (8002fa8 <HAL_DMA_IRQHandler+0x69c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d03b      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a26      	ldr	r2, [pc, #152]	; (8002fac <HAL_DMA_IRQHandler+0x6a0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d036      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <HAL_DMA_IRQHandler+0x6a4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d031      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a23      	ldr	r2, [pc, #140]	; (8002fb4 <HAL_DMA_IRQHandler+0x6a8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d02c      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <HAL_DMA_IRQHandler+0x6ac>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d027      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a20      	ldr	r2, [pc, #128]	; (8002fbc <HAL_DMA_IRQHandler+0x6b0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d022      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1f      	ldr	r2, [pc, #124]	; (8002fc0 <HAL_DMA_IRQHandler+0x6b4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d01d      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <HAL_DMA_IRQHandler+0x6b8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d018      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <HAL_DMA_IRQHandler+0x6bc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <HAL_DMA_IRQHandler+0x6c0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00e      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <HAL_DMA_IRQHandler+0x6c4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d009      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <HAL_DMA_IRQHandler+0x6c8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d004      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x678>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <HAL_DMA_IRQHandler+0x6cc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d12b      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x6d0>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf14      	ite	ne
 8002f92:	2301      	movne	r3, #1
 8002f94:	2300      	moveq	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	e02a      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x6e4>
 8002f9a:	bf00      	nop
 8002f9c:	40020010 	.word	0x40020010
 8002fa0:	40020028 	.word	0x40020028
 8002fa4:	40020040 	.word	0x40020040
 8002fa8:	40020058 	.word	0x40020058
 8002fac:	40020070 	.word	0x40020070
 8002fb0:	40020088 	.word	0x40020088
 8002fb4:	400200a0 	.word	0x400200a0
 8002fb8:	400200b8 	.word	0x400200b8
 8002fbc:	40020410 	.word	0x40020410
 8002fc0:	40020428 	.word	0x40020428
 8002fc4:	40020440 	.word	0x40020440
 8002fc8:	40020458 	.word	0x40020458
 8002fcc:	40020470 	.word	0x40020470
 8002fd0:	40020488 	.word	0x40020488
 8002fd4:	400204a0 	.word	0x400204a0
 8002fd8:	400204b8 	.word	0x400204b8
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf14      	ite	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	2300      	moveq	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 8087 	beq.w	8003104 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	2220      	movs	r2, #32
 8003000:	409a      	lsls	r2, r3
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b04      	cmp	r3, #4
 8003010:	d139      	bne.n	8003086 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0216 	bic.w	r2, r2, #22
 8003020:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003030:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <HAL_DMA_IRQHandler+0x736>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0208 	bic.w	r2, r2, #8
 8003050:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	223f      	movs	r2, #63	; 0x3f
 800305c:	409a      	lsls	r2, r3
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 834a 	beq.w	8003710 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
          }
          return;
 8003084:	e344      	b.n	8003710 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d018      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d108      	bne.n	80030b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d02c      	beq.n	8003104 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4798      	blx	r3
 80030b2:	e027      	b.n	8003104 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d023      	beq.n	8003104 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
 80030c4:	e01e      	b.n	8003104 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10f      	bne.n	80030f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0210 	bic.w	r2, r2, #16
 80030e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8306 	beq.w	800371a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8088 	beq.w	800322c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2204      	movs	r2, #4
 8003120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a7a      	ldr	r2, [pc, #488]	; (8003314 <HAL_DMA_IRQHandler+0xa08>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d04a      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a79      	ldr	r2, [pc, #484]	; (8003318 <HAL_DMA_IRQHandler+0xa0c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d045      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a77      	ldr	r2, [pc, #476]	; (800331c <HAL_DMA_IRQHandler+0xa10>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d040      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a76      	ldr	r2, [pc, #472]	; (8003320 <HAL_DMA_IRQHandler+0xa14>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d03b      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a74      	ldr	r2, [pc, #464]	; (8003324 <HAL_DMA_IRQHandler+0xa18>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d036      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a73      	ldr	r2, [pc, #460]	; (8003328 <HAL_DMA_IRQHandler+0xa1c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d031      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a71      	ldr	r2, [pc, #452]	; (800332c <HAL_DMA_IRQHandler+0xa20>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d02c      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a70      	ldr	r2, [pc, #448]	; (8003330 <HAL_DMA_IRQHandler+0xa24>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d027      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a6e      	ldr	r2, [pc, #440]	; (8003334 <HAL_DMA_IRQHandler+0xa28>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d022      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a6d      	ldr	r2, [pc, #436]	; (8003338 <HAL_DMA_IRQHandler+0xa2c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d01d      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6b      	ldr	r2, [pc, #428]	; (800333c <HAL_DMA_IRQHandler+0xa30>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d018      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6a      	ldr	r2, [pc, #424]	; (8003340 <HAL_DMA_IRQHandler+0xa34>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d013      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a68      	ldr	r2, [pc, #416]	; (8003344 <HAL_DMA_IRQHandler+0xa38>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a67      	ldr	r2, [pc, #412]	; (8003348 <HAL_DMA_IRQHandler+0xa3c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a65      	ldr	r2, [pc, #404]	; (800334c <HAL_DMA_IRQHandler+0xa40>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x8b8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a64      	ldr	r2, [pc, #400]	; (8003350 <HAL_DMA_IRQHandler+0xa44>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d108      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x8ca>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e007      	b.n	80031e6 <HAL_DMA_IRQHandler+0x8da>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0201 	bic.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3301      	adds	r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d307      	bcc.n	8003202 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f2      	bne.n	80031e6 <HAL_DMA_IRQHandler+0x8da>
 8003200:	e000      	b.n	8003204 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003202:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d004      	beq.n	800321c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2203      	movs	r2, #3
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800321a:	e003      	b.n	8003224 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8272 	beq.w	800371a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
 800323e:	e26c      	b.n	800371a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a43      	ldr	r2, [pc, #268]	; (8003354 <HAL_DMA_IRQHandler+0xa48>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d022      	beq.n	8003290 <HAL_DMA_IRQHandler+0x984>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a42      	ldr	r2, [pc, #264]	; (8003358 <HAL_DMA_IRQHandler+0xa4c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d01d      	beq.n	8003290 <HAL_DMA_IRQHandler+0x984>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a40      	ldr	r2, [pc, #256]	; (800335c <HAL_DMA_IRQHandler+0xa50>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d018      	beq.n	8003290 <HAL_DMA_IRQHandler+0x984>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a3f      	ldr	r2, [pc, #252]	; (8003360 <HAL_DMA_IRQHandler+0xa54>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d013      	beq.n	8003290 <HAL_DMA_IRQHandler+0x984>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a3d      	ldr	r2, [pc, #244]	; (8003364 <HAL_DMA_IRQHandler+0xa58>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00e      	beq.n	8003290 <HAL_DMA_IRQHandler+0x984>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a3c      	ldr	r2, [pc, #240]	; (8003368 <HAL_DMA_IRQHandler+0xa5c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d009      	beq.n	8003290 <HAL_DMA_IRQHandler+0x984>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a3a      	ldr	r2, [pc, #232]	; (800336c <HAL_DMA_IRQHandler+0xa60>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d004      	beq.n	8003290 <HAL_DMA_IRQHandler+0x984>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a39      	ldr	r2, [pc, #228]	; (8003370 <HAL_DMA_IRQHandler+0xa64>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d101      	bne.n	8003294 <HAL_DMA_IRQHandler+0x988>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_DMA_IRQHandler+0x98a>
 8003294:	2300      	movs	r3, #0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 823f 	beq.w	800371a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2204      	movs	r2, #4
 80032ae:	409a      	lsls	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80cd 	beq.w	8003454 <HAL_DMA_IRQHandler+0xb48>
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80c7 	beq.w	8003454 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2204      	movs	r2, #4
 80032d0:	409a      	lsls	r2, r3
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d049      	beq.n	8003374 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8210 	beq.w	8003714 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032fc:	e20a      	b.n	8003714 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8206 	beq.w	8003714 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003310:	e200      	b.n	8003714 <HAL_DMA_IRQHandler+0xe08>
 8003312:	bf00      	nop
 8003314:	40020010 	.word	0x40020010
 8003318:	40020028 	.word	0x40020028
 800331c:	40020040 	.word	0x40020040
 8003320:	40020058 	.word	0x40020058
 8003324:	40020070 	.word	0x40020070
 8003328:	40020088 	.word	0x40020088
 800332c:	400200a0 	.word	0x400200a0
 8003330:	400200b8 	.word	0x400200b8
 8003334:	40020410 	.word	0x40020410
 8003338:	40020428 	.word	0x40020428
 800333c:	40020440 	.word	0x40020440
 8003340:	40020458 	.word	0x40020458
 8003344:	40020470 	.word	0x40020470
 8003348:	40020488 	.word	0x40020488
 800334c:	400204a0 	.word	0x400204a0
 8003350:	400204b8 	.word	0x400204b8
 8003354:	58025408 	.word	0x58025408
 8003358:	5802541c 	.word	0x5802541c
 800335c:	58025430 	.word	0x58025430
 8003360:	58025444 	.word	0x58025444
 8003364:	58025458 	.word	0x58025458
 8003368:	5802546c 	.word	0x5802546c
 800336c:	58025480 	.word	0x58025480
 8003370:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d160      	bne.n	8003440 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a7f      	ldr	r2, [pc, #508]	; (8003580 <HAL_DMA_IRQHandler+0xc74>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d04a      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a7d      	ldr	r2, [pc, #500]	; (8003584 <HAL_DMA_IRQHandler+0xc78>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d045      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a7c      	ldr	r2, [pc, #496]	; (8003588 <HAL_DMA_IRQHandler+0xc7c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d040      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a7a      	ldr	r2, [pc, #488]	; (800358c <HAL_DMA_IRQHandler+0xc80>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d03b      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a79      	ldr	r2, [pc, #484]	; (8003590 <HAL_DMA_IRQHandler+0xc84>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d036      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a77      	ldr	r2, [pc, #476]	; (8003594 <HAL_DMA_IRQHandler+0xc88>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d031      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a76      	ldr	r2, [pc, #472]	; (8003598 <HAL_DMA_IRQHandler+0xc8c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d02c      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a74      	ldr	r2, [pc, #464]	; (800359c <HAL_DMA_IRQHandler+0xc90>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d027      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a73      	ldr	r2, [pc, #460]	; (80035a0 <HAL_DMA_IRQHandler+0xc94>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d022      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a71      	ldr	r2, [pc, #452]	; (80035a4 <HAL_DMA_IRQHandler+0xc98>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01d      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a70      	ldr	r2, [pc, #448]	; (80035a8 <HAL_DMA_IRQHandler+0xc9c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d018      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a6e      	ldr	r2, [pc, #440]	; (80035ac <HAL_DMA_IRQHandler+0xca0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a6d      	ldr	r2, [pc, #436]	; (80035b0 <HAL_DMA_IRQHandler+0xca4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00e      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a6b      	ldr	r2, [pc, #428]	; (80035b4 <HAL_DMA_IRQHandler+0xca8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d009      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6a      	ldr	r2, [pc, #424]	; (80035b8 <HAL_DMA_IRQHandler+0xcac>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d004      	beq.n	800341e <HAL_DMA_IRQHandler+0xb12>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a68      	ldr	r2, [pc, #416]	; (80035bc <HAL_DMA_IRQHandler+0xcb0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d108      	bne.n	8003430 <HAL_DMA_IRQHandler+0xb24>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0208 	bic.w	r2, r2, #8
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	e007      	b.n	8003440 <HAL_DMA_IRQHandler+0xb34>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0204 	bic.w	r2, r2, #4
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8165 	beq.w	8003714 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003452:	e15f      	b.n	8003714 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2202      	movs	r2, #2
 800345e:	409a      	lsls	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80c5 	beq.w	80035f4 <HAL_DMA_IRQHandler+0xce8>
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80bf 	beq.w	80035f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2202      	movs	r2, #2
 8003480:	409a      	lsls	r2, r3
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d018      	beq.n	80034c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 813a 	beq.w	8003718 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ac:	e134      	b.n	8003718 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8130 	beq.w	8003718 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034c0:	e12a      	b.n	8003718 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f040 8089 	bne.w	80035e0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2b      	ldr	r2, [pc, #172]	; (8003580 <HAL_DMA_IRQHandler+0xc74>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d04a      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a29      	ldr	r2, [pc, #164]	; (8003584 <HAL_DMA_IRQHandler+0xc78>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d045      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a28      	ldr	r2, [pc, #160]	; (8003588 <HAL_DMA_IRQHandler+0xc7c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d040      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a26      	ldr	r2, [pc, #152]	; (800358c <HAL_DMA_IRQHandler+0xc80>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d03b      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a25      	ldr	r2, [pc, #148]	; (8003590 <HAL_DMA_IRQHandler+0xc84>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d036      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a23      	ldr	r2, [pc, #140]	; (8003594 <HAL_DMA_IRQHandler+0xc88>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d031      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a22      	ldr	r2, [pc, #136]	; (8003598 <HAL_DMA_IRQHandler+0xc8c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d02c      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a20      	ldr	r2, [pc, #128]	; (800359c <HAL_DMA_IRQHandler+0xc90>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d027      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <HAL_DMA_IRQHandler+0xc94>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d022      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <HAL_DMA_IRQHandler+0xc98>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01d      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <HAL_DMA_IRQHandler+0xc9c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d018      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1a      	ldr	r2, [pc, #104]	; (80035ac <HAL_DMA_IRQHandler+0xca0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <HAL_DMA_IRQHandler+0xca4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00e      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <HAL_DMA_IRQHandler+0xca8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a16      	ldr	r2, [pc, #88]	; (80035b8 <HAL_DMA_IRQHandler+0xcac>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d004      	beq.n	800356e <HAL_DMA_IRQHandler+0xc62>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a14      	ldr	r2, [pc, #80]	; (80035bc <HAL_DMA_IRQHandler+0xcb0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d128      	bne.n	80035c0 <HAL_DMA_IRQHandler+0xcb4>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0214 	bic.w	r2, r2, #20
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e027      	b.n	80035d0 <HAL_DMA_IRQHandler+0xcc4>
 8003580:	40020010 	.word	0x40020010
 8003584:	40020028 	.word	0x40020028
 8003588:	40020040 	.word	0x40020040
 800358c:	40020058 	.word	0x40020058
 8003590:	40020070 	.word	0x40020070
 8003594:	40020088 	.word	0x40020088
 8003598:	400200a0 	.word	0x400200a0
 800359c:	400200b8 	.word	0x400200b8
 80035a0:	40020410 	.word	0x40020410
 80035a4:	40020428 	.word	0x40020428
 80035a8:	40020440 	.word	0x40020440
 80035ac:	40020458 	.word	0x40020458
 80035b0:	40020470 	.word	0x40020470
 80035b4:	40020488 	.word	0x40020488
 80035b8:	400204a0 	.word	0x400204a0
 80035bc:	400204b8 	.word	0x400204b8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 020a 	bic.w	r2, r2, #10
 80035ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8097 	beq.w	8003718 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035f2:	e091      	b.n	8003718 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	2208      	movs	r2, #8
 80035fe:	409a      	lsls	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8088 	beq.w	800371a <HAL_DMA_IRQHandler+0xe0e>
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8082 	beq.w	800371a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a41      	ldr	r2, [pc, #260]	; (8003720 <HAL_DMA_IRQHandler+0xe14>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d04a      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a3f      	ldr	r2, [pc, #252]	; (8003724 <HAL_DMA_IRQHandler+0xe18>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d045      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a3e      	ldr	r2, [pc, #248]	; (8003728 <HAL_DMA_IRQHandler+0xe1c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d040      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a3c      	ldr	r2, [pc, #240]	; (800372c <HAL_DMA_IRQHandler+0xe20>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d03b      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a3b      	ldr	r2, [pc, #236]	; (8003730 <HAL_DMA_IRQHandler+0xe24>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d036      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a39      	ldr	r2, [pc, #228]	; (8003734 <HAL_DMA_IRQHandler+0xe28>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d031      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a38      	ldr	r2, [pc, #224]	; (8003738 <HAL_DMA_IRQHandler+0xe2c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d02c      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a36      	ldr	r2, [pc, #216]	; (800373c <HAL_DMA_IRQHandler+0xe30>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d027      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a35      	ldr	r2, [pc, #212]	; (8003740 <HAL_DMA_IRQHandler+0xe34>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d022      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a33      	ldr	r2, [pc, #204]	; (8003744 <HAL_DMA_IRQHandler+0xe38>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01d      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a32      	ldr	r2, [pc, #200]	; (8003748 <HAL_DMA_IRQHandler+0xe3c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d018      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a30      	ldr	r2, [pc, #192]	; (800374c <HAL_DMA_IRQHandler+0xe40>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a2f      	ldr	r2, [pc, #188]	; (8003750 <HAL_DMA_IRQHandler+0xe44>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00e      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <HAL_DMA_IRQHandler+0xe48>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <HAL_DMA_IRQHandler+0xe4c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xdaa>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2a      	ldr	r2, [pc, #168]	; (800375c <HAL_DMA_IRQHandler+0xe50>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d108      	bne.n	80036c8 <HAL_DMA_IRQHandler+0xdbc>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 021c 	bic.w	r2, r2, #28
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e007      	b.n	80036d8 <HAL_DMA_IRQHandler+0xdcc>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 020e 	bic.w	r2, r2, #14
 80036d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2201      	movs	r2, #1
 80036e2:	409a      	lsls	r2, r3
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
 800370e:	e004      	b.n	800371a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003710:	bf00      	nop
 8003712:	e002      	b.n	800371a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003714:	bf00      	nop
 8003716:	e000      	b.n	800371a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003718:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800371a:	3728      	adds	r7, #40	; 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40020010 	.word	0x40020010
 8003724:	40020028 	.word	0x40020028
 8003728:	40020040 	.word	0x40020040
 800372c:	40020058 	.word	0x40020058
 8003730:	40020070 	.word	0x40020070
 8003734:	40020088 	.word	0x40020088
 8003738:	400200a0 	.word	0x400200a0
 800373c:	400200b8 	.word	0x400200b8
 8003740:	40020410 	.word	0x40020410
 8003744:	40020428 	.word	0x40020428
 8003748:	40020440 	.word	0x40020440
 800374c:	40020458 	.word	0x40020458
 8003750:	40020470 	.word	0x40020470
 8003754:	40020488 	.word	0x40020488
 8003758:	400204a0 	.word	0x400204a0
 800375c:	400204b8 	.word	0x400204b8

08003760 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a7f      	ldr	r2, [pc, #508]	; (8003994 <DMA_SetConfig+0x21c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d072      	beq.n	8003882 <DMA_SetConfig+0x10a>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a7d      	ldr	r2, [pc, #500]	; (8003998 <DMA_SetConfig+0x220>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d06d      	beq.n	8003882 <DMA_SetConfig+0x10a>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a7c      	ldr	r2, [pc, #496]	; (800399c <DMA_SetConfig+0x224>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d068      	beq.n	8003882 <DMA_SetConfig+0x10a>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a7a      	ldr	r2, [pc, #488]	; (80039a0 <DMA_SetConfig+0x228>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d063      	beq.n	8003882 <DMA_SetConfig+0x10a>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a79      	ldr	r2, [pc, #484]	; (80039a4 <DMA_SetConfig+0x22c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d05e      	beq.n	8003882 <DMA_SetConfig+0x10a>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a77      	ldr	r2, [pc, #476]	; (80039a8 <DMA_SetConfig+0x230>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d059      	beq.n	8003882 <DMA_SetConfig+0x10a>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a76      	ldr	r2, [pc, #472]	; (80039ac <DMA_SetConfig+0x234>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d054      	beq.n	8003882 <DMA_SetConfig+0x10a>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a74      	ldr	r2, [pc, #464]	; (80039b0 <DMA_SetConfig+0x238>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d04f      	beq.n	8003882 <DMA_SetConfig+0x10a>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a73      	ldr	r2, [pc, #460]	; (80039b4 <DMA_SetConfig+0x23c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d04a      	beq.n	8003882 <DMA_SetConfig+0x10a>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a71      	ldr	r2, [pc, #452]	; (80039b8 <DMA_SetConfig+0x240>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d045      	beq.n	8003882 <DMA_SetConfig+0x10a>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a70      	ldr	r2, [pc, #448]	; (80039bc <DMA_SetConfig+0x244>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d040      	beq.n	8003882 <DMA_SetConfig+0x10a>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a6e      	ldr	r2, [pc, #440]	; (80039c0 <DMA_SetConfig+0x248>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d03b      	beq.n	8003882 <DMA_SetConfig+0x10a>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6d      	ldr	r2, [pc, #436]	; (80039c4 <DMA_SetConfig+0x24c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d036      	beq.n	8003882 <DMA_SetConfig+0x10a>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6b      	ldr	r2, [pc, #428]	; (80039c8 <DMA_SetConfig+0x250>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d031      	beq.n	8003882 <DMA_SetConfig+0x10a>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6a      	ldr	r2, [pc, #424]	; (80039cc <DMA_SetConfig+0x254>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d02c      	beq.n	8003882 <DMA_SetConfig+0x10a>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a68      	ldr	r2, [pc, #416]	; (80039d0 <DMA_SetConfig+0x258>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d027      	beq.n	8003882 <DMA_SetConfig+0x10a>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a67      	ldr	r2, [pc, #412]	; (80039d4 <DMA_SetConfig+0x25c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d022      	beq.n	8003882 <DMA_SetConfig+0x10a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a65      	ldr	r2, [pc, #404]	; (80039d8 <DMA_SetConfig+0x260>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01d      	beq.n	8003882 <DMA_SetConfig+0x10a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a64      	ldr	r2, [pc, #400]	; (80039dc <DMA_SetConfig+0x264>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d018      	beq.n	8003882 <DMA_SetConfig+0x10a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a62      	ldr	r2, [pc, #392]	; (80039e0 <DMA_SetConfig+0x268>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <DMA_SetConfig+0x10a>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a61      	ldr	r2, [pc, #388]	; (80039e4 <DMA_SetConfig+0x26c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00e      	beq.n	8003882 <DMA_SetConfig+0x10a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a5f      	ldr	r2, [pc, #380]	; (80039e8 <DMA_SetConfig+0x270>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d009      	beq.n	8003882 <DMA_SetConfig+0x10a>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a5e      	ldr	r2, [pc, #376]	; (80039ec <DMA_SetConfig+0x274>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <DMA_SetConfig+0x10a>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a5c      	ldr	r2, [pc, #368]	; (80039f0 <DMA_SetConfig+0x278>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <DMA_SetConfig+0x10e>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <DMA_SetConfig+0x110>
 8003886:	2300      	movs	r3, #0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00d      	beq.n	80038a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003894:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d004      	beq.n	80038a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a39      	ldr	r2, [pc, #228]	; (8003994 <DMA_SetConfig+0x21c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d04a      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a38      	ldr	r2, [pc, #224]	; (8003998 <DMA_SetConfig+0x220>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d045      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a36      	ldr	r2, [pc, #216]	; (800399c <DMA_SetConfig+0x224>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d040      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a35      	ldr	r2, [pc, #212]	; (80039a0 <DMA_SetConfig+0x228>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d03b      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a33      	ldr	r2, [pc, #204]	; (80039a4 <DMA_SetConfig+0x22c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d036      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a32      	ldr	r2, [pc, #200]	; (80039a8 <DMA_SetConfig+0x230>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d031      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a30      	ldr	r2, [pc, #192]	; (80039ac <DMA_SetConfig+0x234>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d02c      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <DMA_SetConfig+0x238>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d027      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a2d      	ldr	r2, [pc, #180]	; (80039b4 <DMA_SetConfig+0x23c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d022      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2c      	ldr	r2, [pc, #176]	; (80039b8 <DMA_SetConfig+0x240>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d01d      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <DMA_SetConfig+0x244>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d018      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a29      	ldr	r2, [pc, #164]	; (80039c0 <DMA_SetConfig+0x248>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d013      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a27      	ldr	r2, [pc, #156]	; (80039c4 <DMA_SetConfig+0x24c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00e      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a26      	ldr	r2, [pc, #152]	; (80039c8 <DMA_SetConfig+0x250>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d009      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a24      	ldr	r2, [pc, #144]	; (80039cc <DMA_SetConfig+0x254>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d004      	beq.n	8003948 <DMA_SetConfig+0x1d0>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a23      	ldr	r2, [pc, #140]	; (80039d0 <DMA_SetConfig+0x258>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d101      	bne.n	800394c <DMA_SetConfig+0x1d4>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <DMA_SetConfig+0x1d6>
 800394c:	2300      	movs	r3, #0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d059      	beq.n	8003a06 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	223f      	movs	r2, #63	; 0x3f
 800395c:	409a      	lsls	r2, r3
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003970:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d138      	bne.n	80039f4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003992:	e086      	b.n	8003aa2 <DMA_SetConfig+0x32a>
 8003994:	40020010 	.word	0x40020010
 8003998:	40020028 	.word	0x40020028
 800399c:	40020040 	.word	0x40020040
 80039a0:	40020058 	.word	0x40020058
 80039a4:	40020070 	.word	0x40020070
 80039a8:	40020088 	.word	0x40020088
 80039ac:	400200a0 	.word	0x400200a0
 80039b0:	400200b8 	.word	0x400200b8
 80039b4:	40020410 	.word	0x40020410
 80039b8:	40020428 	.word	0x40020428
 80039bc:	40020440 	.word	0x40020440
 80039c0:	40020458 	.word	0x40020458
 80039c4:	40020470 	.word	0x40020470
 80039c8:	40020488 	.word	0x40020488
 80039cc:	400204a0 	.word	0x400204a0
 80039d0:	400204b8 	.word	0x400204b8
 80039d4:	58025408 	.word	0x58025408
 80039d8:	5802541c 	.word	0x5802541c
 80039dc:	58025430 	.word	0x58025430
 80039e0:	58025444 	.word	0x58025444
 80039e4:	58025458 	.word	0x58025458
 80039e8:	5802546c 	.word	0x5802546c
 80039ec:	58025480 	.word	0x58025480
 80039f0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	60da      	str	r2, [r3, #12]
}
 8003a04:	e04d      	b.n	8003aa2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a29      	ldr	r2, [pc, #164]	; (8003ab0 <DMA_SetConfig+0x338>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d022      	beq.n	8003a56 <DMA_SetConfig+0x2de>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a27      	ldr	r2, [pc, #156]	; (8003ab4 <DMA_SetConfig+0x33c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d01d      	beq.n	8003a56 <DMA_SetConfig+0x2de>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a26      	ldr	r2, [pc, #152]	; (8003ab8 <DMA_SetConfig+0x340>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d018      	beq.n	8003a56 <DMA_SetConfig+0x2de>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a24      	ldr	r2, [pc, #144]	; (8003abc <DMA_SetConfig+0x344>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <DMA_SetConfig+0x2de>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a23      	ldr	r2, [pc, #140]	; (8003ac0 <DMA_SetConfig+0x348>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <DMA_SetConfig+0x2de>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a21      	ldr	r2, [pc, #132]	; (8003ac4 <DMA_SetConfig+0x34c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d009      	beq.n	8003a56 <DMA_SetConfig+0x2de>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a20      	ldr	r2, [pc, #128]	; (8003ac8 <DMA_SetConfig+0x350>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <DMA_SetConfig+0x2de>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <DMA_SetConfig+0x354>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d101      	bne.n	8003a5a <DMA_SetConfig+0x2e2>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <DMA_SetConfig+0x2e4>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d020      	beq.n	8003aa2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2201      	movs	r2, #1
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d108      	bne.n	8003a92 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	60da      	str	r2, [r3, #12]
}
 8003a90:	e007      	b.n	8003aa2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	60da      	str	r2, [r3, #12]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	58025408 	.word	0x58025408
 8003ab4:	5802541c 	.word	0x5802541c
 8003ab8:	58025430 	.word	0x58025430
 8003abc:	58025444 	.word	0x58025444
 8003ac0:	58025458 	.word	0x58025458
 8003ac4:	5802546c 	.word	0x5802546c
 8003ac8:	58025480 	.word	0x58025480
 8003acc:	58025494 	.word	0x58025494

08003ad0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a42      	ldr	r2, [pc, #264]	; (8003be8 <DMA_CalcBaseAndBitshift+0x118>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d04a      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a41      	ldr	r2, [pc, #260]	; (8003bec <DMA_CalcBaseAndBitshift+0x11c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d045      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a3f      	ldr	r2, [pc, #252]	; (8003bf0 <DMA_CalcBaseAndBitshift+0x120>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d040      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a3e      	ldr	r2, [pc, #248]	; (8003bf4 <DMA_CalcBaseAndBitshift+0x124>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d03b      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a3c      	ldr	r2, [pc, #240]	; (8003bf8 <DMA_CalcBaseAndBitshift+0x128>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d036      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a3b      	ldr	r2, [pc, #236]	; (8003bfc <DMA_CalcBaseAndBitshift+0x12c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d031      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a39      	ldr	r2, [pc, #228]	; (8003c00 <DMA_CalcBaseAndBitshift+0x130>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d02c      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a38      	ldr	r2, [pc, #224]	; (8003c04 <DMA_CalcBaseAndBitshift+0x134>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d027      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a36      	ldr	r2, [pc, #216]	; (8003c08 <DMA_CalcBaseAndBitshift+0x138>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a35      	ldr	r2, [pc, #212]	; (8003c0c <DMA_CalcBaseAndBitshift+0x13c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01d      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a33      	ldr	r2, [pc, #204]	; (8003c10 <DMA_CalcBaseAndBitshift+0x140>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d018      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a32      	ldr	r2, [pc, #200]	; (8003c14 <DMA_CalcBaseAndBitshift+0x144>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <DMA_CalcBaseAndBitshift+0x148>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2f      	ldr	r2, [pc, #188]	; (8003c1c <DMA_CalcBaseAndBitshift+0x14c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2d      	ldr	r2, [pc, #180]	; (8003c20 <DMA_CalcBaseAndBitshift+0x150>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <DMA_CalcBaseAndBitshift+0xa8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2c      	ldr	r2, [pc, #176]	; (8003c24 <DMA_CalcBaseAndBitshift+0x154>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <DMA_CalcBaseAndBitshift+0xac>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <DMA_CalcBaseAndBitshift+0xae>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d024      	beq.n	8003bcc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3b10      	subs	r3, #16
 8003b8a:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <DMA_CalcBaseAndBitshift+0x158>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	4a24      	ldr	r2, [pc, #144]	; (8003c2c <DMA_CalcBaseAndBitshift+0x15c>)
 8003b9c:	5cd3      	ldrb	r3, [r2, r3]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d908      	bls.n	8003bbc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4b1f      	ldr	r3, [pc, #124]	; (8003c30 <DMA_CalcBaseAndBitshift+0x160>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	1d1a      	adds	r2, r3, #4
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	659a      	str	r2, [r3, #88]	; 0x58
 8003bba:	e00d      	b.n	8003bd8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <DMA_CalcBaseAndBitshift+0x160>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8003bca:	e005      	b.n	8003bd8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40020010 	.word	0x40020010
 8003bec:	40020028 	.word	0x40020028
 8003bf0:	40020040 	.word	0x40020040
 8003bf4:	40020058 	.word	0x40020058
 8003bf8:	40020070 	.word	0x40020070
 8003bfc:	40020088 	.word	0x40020088
 8003c00:	400200a0 	.word	0x400200a0
 8003c04:	400200b8 	.word	0x400200b8
 8003c08:	40020410 	.word	0x40020410
 8003c0c:	40020428 	.word	0x40020428
 8003c10:	40020440 	.word	0x40020440
 8003c14:	40020458 	.word	0x40020458
 8003c18:	40020470 	.word	0x40020470
 8003c1c:	40020488 	.word	0x40020488
 8003c20:	400204a0 	.word	0x400204a0
 8003c24:	400204b8 	.word	0x400204b8
 8003c28:	aaaaaaab 	.word	0xaaaaaaab
 8003c2c:	08009adc 	.word	0x08009adc
 8003c30:	fffffc00 	.word	0xfffffc00

08003c34 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d120      	bne.n	8003c8a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d858      	bhi.n	8003d02 <DMA_CheckFifoParam+0xce>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <DMA_CheckFifoParam+0x24>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c69 	.word	0x08003c69
 8003c5c:	08003c7b 	.word	0x08003c7b
 8003c60:	08003c69 	.word	0x08003c69
 8003c64:	08003d03 	.word	0x08003d03
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d048      	beq.n	8003d06 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c78:	e045      	b.n	8003d06 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c82:	d142      	bne.n	8003d0a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c88:	e03f      	b.n	8003d0a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c92:	d123      	bne.n	8003cdc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d838      	bhi.n	8003d0e <DMA_CheckFifoParam+0xda>
 8003c9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <DMA_CheckFifoParam+0x70>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003cb5 	.word	0x08003cb5
 8003ca8:	08003cbb 	.word	0x08003cbb
 8003cac:	08003cb5 	.word	0x08003cb5
 8003cb0:	08003ccd 	.word	0x08003ccd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
        break;
 8003cb8:	e030      	b.n	8003d1c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d025      	beq.n	8003d12 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cca:	e022      	b.n	8003d12 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cd4:	d11f      	bne.n	8003d16 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cda:	e01c      	b.n	8003d16 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d902      	bls.n	8003cea <DMA_CheckFifoParam+0xb6>
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d003      	beq.n	8003cf0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ce8:	e018      	b.n	8003d1c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
        break;
 8003cee:	e015      	b.n	8003d1c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00e      	beq.n	8003d1a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8003d00:	e00b      	b.n	8003d1a <DMA_CheckFifoParam+0xe6>
        break;
 8003d02:	bf00      	nop
 8003d04:	e00a      	b.n	8003d1c <DMA_CheckFifoParam+0xe8>
        break;
 8003d06:	bf00      	nop
 8003d08:	e008      	b.n	8003d1c <DMA_CheckFifoParam+0xe8>
        break;
 8003d0a:	bf00      	nop
 8003d0c:	e006      	b.n	8003d1c <DMA_CheckFifoParam+0xe8>
        break;
 8003d0e:	bf00      	nop
 8003d10:	e004      	b.n	8003d1c <DMA_CheckFifoParam+0xe8>
        break;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <DMA_CheckFifoParam+0xe8>
        break;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <DMA_CheckFifoParam+0xe8>
    break;
 8003d1a:	bf00      	nop
    }
  }

  return status;
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop

08003d2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a38      	ldr	r2, [pc, #224]	; (8003e20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d022      	beq.n	8003d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a36      	ldr	r2, [pc, #216]	; (8003e24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01d      	beq.n	8003d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a33      	ldr	r2, [pc, #204]	; (8003e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a32      	ldr	r2, [pc, #200]	; (8003e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a30      	ldr	r2, [pc, #192]	; (8003e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a2d      	ldr	r2, [pc, #180]	; (8003e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d101      	bne.n	8003d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01a      	beq.n	8003dca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	3b08      	subs	r3, #8
 8003d9c:	4a28      	ldr	r2, [pc, #160]	; (8003e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	461a      	mov	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a24      	ldr	r2, [pc, #144]	; (8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003db8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003dc8:	e024      	b.n	8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	3b10      	subs	r3, #16
 8003dd2:	4a1e      	ldr	r2, [pc, #120]	; (8003e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d806      	bhi.n	8003df2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d902      	bls.n	8003df2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3308      	adds	r3, #8
 8003df0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a16      	ldr	r2, [pc, #88]	; (8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	58025408 	.word	0x58025408
 8003e24:	5802541c 	.word	0x5802541c
 8003e28:	58025430 	.word	0x58025430
 8003e2c:	58025444 	.word	0x58025444
 8003e30:	58025458 	.word	0x58025458
 8003e34:	5802546c 	.word	0x5802546c
 8003e38:	58025480 	.word	0x58025480
 8003e3c:	58025494 	.word	0x58025494
 8003e40:	cccccccd 	.word	0xcccccccd
 8003e44:	16009600 	.word	0x16009600
 8003e48:	58025880 	.word	0x58025880
 8003e4c:	aaaaaaab 	.word	0xaaaaaaab
 8003e50:	400204b8 	.word	0x400204b8
 8003e54:	4002040f 	.word	0x4002040f
 8003e58:	10008200 	.word	0x10008200
 8003e5c:	40020880 	.word	0x40020880

08003e60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d04a      	beq.n	8003f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d847      	bhi.n	8003f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a25      	ldr	r2, [pc, #148]	; (8003f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d022      	beq.n	8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a24      	ldr	r2, [pc, #144]	; (8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d01d      	beq.n	8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a22      	ldr	r2, [pc, #136]	; (8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d018      	beq.n	8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a21      	ldr	r2, [pc, #132]	; (8003f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d013      	beq.n	8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1f      	ldr	r2, [pc, #124]	; (8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00e      	beq.n	8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	; (8003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d009      	beq.n	8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1b      	ldr	r2, [pc, #108]	; (8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d101      	bne.n	8003ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4b17      	ldr	r3, [pc, #92]	; (8003f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	461a      	mov	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003ee8:	671a      	str	r2, [r3, #112]	; 0x70
 8003eea:	e009      	b.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a11      	ldr	r2, [pc, #68]	; (8003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003efe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	2201      	movs	r2, #1
 8003f06:	409a      	lsls	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	58025408 	.word	0x58025408
 8003f1c:	5802541c 	.word	0x5802541c
 8003f20:	58025430 	.word	0x58025430
 8003f24:	58025444 	.word	0x58025444
 8003f28:	58025458 	.word	0x58025458
 8003f2c:	5802546c 	.word	0x5802546c
 8003f30:	58025480 	.word	0x58025480
 8003f34:	58025494 	.word	0x58025494
 8003f38:	1600963f 	.word	0x1600963f
 8003f3c:	58025940 	.word	0x58025940
 8003f40:	1000823f 	.word	0x1000823f
 8003f44:	40020940 	.word	0x40020940

08003f48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0cf      	b.n	80040fa <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2223      	movs	r2, #35	; 0x23
 8003f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7fc ffe1 	bl	8000f34 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f72:	4b64      	ldr	r3, [pc, #400]	; (8004104 <HAL_ETH_Init+0x1bc>)
 8003f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f78:	4a62      	ldr	r2, [pc, #392]	; (8004104 <HAL_ETH_Init+0x1bc>)
 8003f7a:	f043 0302 	orr.w	r3, r3, #2
 8003f7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f82:	4b60      	ldr	r3, [pc, #384]	; (8004104 <HAL_ETH_Init+0x1bc>)
 8003f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7a1b      	ldrb	r3, [r3, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d103      	bne.n	8003fa0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f7fd fb87 	bl	80016ac <HAL_SYSCFG_ETHInterfaceSelect>
 8003f9e:	e003      	b.n	8003fa8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003fa0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003fa4:	f7fd fb82 	bl	80016ac <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003fa8:	4b57      	ldr	r3, [pc, #348]	; (8004108 <HAL_ETH_Init+0x1c0>)
 8003faa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fc4:	f7fd fb36 	bl	8001634 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fca:	e011      	b.n	8003ff0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003fcc:	f7fd fb32 	bl	8001634 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fda:	d909      	bls.n	8003ff0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2204      	movs	r2, #4
 8003fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	22e0      	movs	r2, #224	; 0xe0
 8003fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e084      	b.n	80040fa <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e4      	bne.n	8003fcc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f886 	bl	8004114 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004008:	f001 fee4 	bl	8005dd4 <HAL_RCC_GetHCLKFreq>
 800400c:	4603      	mov	r3, r0
 800400e:	4a3f      	ldr	r2, [pc, #252]	; (800410c <HAL_ETH_Init+0x1c4>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	0c9a      	lsrs	r2, r3, #18
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3a01      	subs	r2, #1
 800401c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fa71 	bl	8004508 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004032:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800403e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004042:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	22e0      	movs	r2, #224	; 0xe0
 800405e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e049      	b.n	80040fa <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004072:	4b27      	ldr	r3, [pc, #156]	; (8004110 <HAL_ETH_Init+0x1c8>)
 8004074:	4013      	ands	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6952      	ldr	r2, [r2, #20]
 800407a:	0051      	lsls	r1, r2, #1
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	430b      	orrs	r3, r1
 8004082:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004086:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fad9 	bl	8004642 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fb1f 	bl	80046d4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	3305      	adds	r3, #5
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	021a      	lsls	r2, r3, #8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	3304      	adds	r3, #4
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	4619      	mov	r1, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	3303      	adds	r3, #3
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	061a      	lsls	r2, r3, #24
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	3302      	adds	r3, #2
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	041b      	lsls	r3, r3, #16
 80040c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	3301      	adds	r3, #1
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2210      	movs	r2, #16
 80040f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	58024400 	.word	0x58024400
 8004108:	58000400 	.word	0x58000400
 800410c:	431bde83 	.word	0x431bde83
 8004110:	ffff8001 	.word	0xffff8001

08004114 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004124:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800412c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800412e:	f001 fe51 	bl	8005dd4 <HAL_RCC_GetHCLKFreq>
 8004132:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d908      	bls.n	800414e <HAL_ETH_SetMDIOClockRange+0x3a>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d804      	bhi.n	800414e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e027      	b.n	800419e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d908      	bls.n	8004168 <HAL_ETH_SetMDIOClockRange+0x54>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d204      	bcs.n	8004168 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e01a      	b.n	800419e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d303      	bcc.n	8004178 <HAL_ETH_SetMDIOClockRange+0x64>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d911      	bls.n	800419c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d908      	bls.n	8004192 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4a0f      	ldr	r2, [pc, #60]	; (80041c0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d804      	bhi.n	8004192 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e005      	b.n	800419e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e000      	b.n	800419e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800419c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	01312cff 	.word	0x01312cff
 80041b4:	02160ebf 	.word	0x02160ebf
 80041b8:	03938700 	.word	0x03938700
 80041bc:	05f5e0ff 	.word	0x05f5e0ff
 80041c0:	08f0d17f 	.word	0x08f0d17f

080041c4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80041d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	791b      	ldrb	r3, [r3, #4]
 80041dc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80041de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	7b1b      	ldrb	r3, [r3, #12]
 80041e4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	7b5b      	ldrb	r3, [r3, #13]
 80041ec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	7b9b      	ldrb	r3, [r3, #14]
 80041f4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80041f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	7bdb      	ldrb	r3, [r3, #15]
 80041fc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	7c12      	ldrb	r2, [r2, #16]
 8004204:	2a00      	cmp	r2, #0
 8004206:	d102      	bne.n	800420e <ETH_SetMACConfig+0x4a>
 8004208:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800420c:	e000      	b.n	8004210 <ETH_SetMACConfig+0x4c>
 800420e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004210:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	7c52      	ldrb	r2, [r2, #17]
 8004216:	2a00      	cmp	r2, #0
 8004218:	d102      	bne.n	8004220 <ETH_SetMACConfig+0x5c>
 800421a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800421e:	e000      	b.n	8004222 <ETH_SetMACConfig+0x5e>
 8004220:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	7c9b      	ldrb	r3, [r3, #18]
 8004228:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800422a:	431a      	orrs	r2, r3
               macconf->Speed |
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004230:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004236:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	7f1b      	ldrb	r3, [r3, #28]
 800423c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800423e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	7f5b      	ldrb	r3, [r3, #29]
 8004244:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004246:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	7f92      	ldrb	r2, [r2, #30]
 800424c:	2a00      	cmp	r2, #0
 800424e:	d102      	bne.n	8004256 <ETH_SetMACConfig+0x92>
 8004250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004254:	e000      	b.n	8004258 <ETH_SetMACConfig+0x94>
 8004256:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004258:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	7fdb      	ldrb	r3, [r3, #31]
 800425e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004260:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004268:	2a00      	cmp	r2, #0
 800426a:	d102      	bne.n	8004272 <ETH_SetMACConfig+0xae>
 800426c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004270:	e000      	b.n	8004274 <ETH_SetMACConfig+0xb0>
 8004272:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004274:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800427a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004282:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004284:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b56      	ldr	r3, [pc, #344]	; (80043f0 <ETH_SetMACConfig+0x22c>)
 8004296:	4013      	ands	r3, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	68f9      	ldr	r1, [r7, #12]
 800429e:	430b      	orrs	r3, r1
 80042a0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042ae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042b8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042c2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80042cc:	2a00      	cmp	r2, #0
 80042ce:	d102      	bne.n	80042d6 <ETH_SetMACConfig+0x112>
 80042d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042d4:	e000      	b.n	80042d8 <ETH_SetMACConfig+0x114>
 80042d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042d8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	4b42      	ldr	r3, [pc, #264]	; (80043f4 <ETH_SetMACConfig+0x230>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	68f9      	ldr	r1, [r7, #12]
 80042f2:	430b      	orrs	r3, r1
 80042f4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042fc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	4b3a      	ldr	r3, [pc, #232]	; (80043f8 <ETH_SetMACConfig+0x234>)
 800430e:	4013      	ands	r3, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	430b      	orrs	r3, r1
 8004318:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004320:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004326:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800432e:	2a00      	cmp	r2, #0
 8004330:	d101      	bne.n	8004336 <ETH_SetMACConfig+0x172>
 8004332:	2280      	movs	r2, #128	; 0x80
 8004334:	e000      	b.n	8004338 <ETH_SetMACConfig+0x174>
 8004336:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004338:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800434a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800434e:	4013      	ands	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	68f9      	ldr	r1, [r7, #12]
 8004356:	430b      	orrs	r3, r1
 8004358:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004360:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004368:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	f023 0103 	bic.w	r1, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	430a      	orrs	r2, r1
 8004382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800438e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d101      	bne.n	80043b2 <ETH_SetMACConfig+0x1ee>
 80043ae:	2240      	movs	r2, #64	; 0x40
 80043b0:	e000      	b.n	80043b4 <ETH_SetMACConfig+0x1f0>
 80043b2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80043b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80043bc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80043c6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80043d4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	430a      	orrs	r2, r1
 80043e0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	00048083 	.word	0x00048083
 80043f4:	c0f88000 	.word	0xc0f88000
 80043f8:	fffffef0 	.word	0xfffffef0

080043fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4b38      	ldr	r3, [pc, #224]	; (80044f4 <ETH_SetDMAConfig+0xf8>)
 8004412:	4013      	ands	r3, r2
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	6811      	ldr	r1, [r2, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	430b      	orrs	r3, r1
 800441e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004422:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	791b      	ldrb	r3, [r3, #4]
 8004428:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800442e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	7b1b      	ldrb	r3, [r3, #12]
 8004434:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	4b2c      	ldr	r3, [pc, #176]	; (80044f8 <ETH_SetDMAConfig+0xfc>)
 8004446:	4013      	ands	r3, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	68f9      	ldr	r1, [r7, #12]
 800444e:	430b      	orrs	r3, r1
 8004450:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004454:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	7b5b      	ldrb	r3, [r3, #13]
 800445a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004470:	4b22      	ldr	r3, [pc, #136]	; (80044fc <ETH_SetDMAConfig+0x100>)
 8004472:	4013      	ands	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	430b      	orrs	r3, r1
 800447c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004480:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	7d1b      	ldrb	r3, [r3, #20]
 800448c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800448e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	7f5b      	ldrb	r3, [r3, #29]
 8004494:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80044a6:	4b16      	ldr	r3, [pc, #88]	; (8004500 <ETH_SetDMAConfig+0x104>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	7f1b      	ldrb	r3, [r3, #28]
 80044be:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <ETH_SetDMAConfig+0x108>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	68f9      	ldr	r1, [r7, #12]
 80044de:	430b      	orrs	r3, r1
 80044e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044e4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	ffff87fd 	.word	0xffff87fd
 80044f8:	ffff2ffe 	.word	0xffff2ffe
 80044fc:	fffec000 	.word	0xfffec000
 8004500:	ffc0efef 	.word	0xffc0efef
 8004504:	7fc0ffff 	.word	0x7fc0ffff

08004508 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b0a4      	sub	sp, #144	; 0x90
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004516:	2300      	movs	r3, #0
 8004518:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800451a:	2300      	movs	r3, #0
 800451c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004520:	2300      	movs	r3, #0
 8004522:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004526:	2301      	movs	r3, #1
 8004528:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004538:	2300      	movs	r3, #0
 800453a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004548:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004550:	2300      	movs	r3, #0
 8004552:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004554:	2300      	movs	r3, #0
 8004556:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800455a:	2300      	movs	r3, #0
 800455c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004560:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004564:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004566:	2300      	movs	r3, #0
 8004568:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800456c:	2300      	movs	r3, #0
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004576:	2300      	movs	r3, #0
 8004578:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800457c:	2300      	movs	r3, #0
 800457e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004582:	2300      	movs	r3, #0
 8004584:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004586:	2300      	movs	r3, #0
 8004588:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800458a:	2300      	movs	r3, #0
 800458c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800458e:	2300      	movs	r3, #0
 8004590:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004594:	2300      	movs	r3, #0
 8004596:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80045a0:	2320      	movs	r3, #32
 80045a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80045b2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80045b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045bc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80045c4:	2302      	movs	r3, #2
 80045c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80045e2:	2300      	movs	r3, #0
 80045e4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80045ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045f0:	4619      	mov	r1, r3
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff fde6 	bl	80041c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80045fc:	2301      	movs	r3, #1
 80045fe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004600:	2300      	movs	r3, #0
 8004602:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800460e:	2300      	movs	r3, #0
 8004610:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004612:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004616:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004618:	2300      	movs	r3, #0
 800461a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800461c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004620:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004622:	2300      	movs	r3, #0
 8004624:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004628:	f44f 7306 	mov.w	r3, #536	; 0x218
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff fee1 	bl	80043fc <ETH_SetDMAConfig>
}
 800463a:	bf00      	nop
 800463c:	3790      	adds	r7, #144	; 0x90
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	e01d      	b.n	800468c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68d9      	ldr	r1, [r3, #12]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	440b      	add	r3, r1
 8004660:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2200      	movs	r2, #0
 800466c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2200      	movs	r2, #0
 8004678:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	3206      	adds	r2, #6
 8004682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3301      	adds	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b03      	cmp	r3, #3
 8004690:	d9de      	bls.n	8004650 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a0:	461a      	mov	r2, r3
 80046a2:	2303      	movs	r3, #3
 80046a4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e023      	b.n	800472a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6919      	ldr	r1, [r3, #16]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4613      	mov	r3, r2
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	4413      	add	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	440b      	add	r3, r1
 80046f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2200      	movs	r2, #0
 80046fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2200      	movs	r2, #0
 800470a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2200      	movs	r2, #0
 8004710:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2200      	movs	r2, #0
 8004716:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	3212      	adds	r2, #18
 8004720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3301      	adds	r3, #1
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d9d8      	bls.n	80046e2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	461a      	mov	r2, r3
 8004758:	2303      	movs	r3, #3
 800475a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004790:	b480      	push	{r7}
 8004792:	b089      	sub	sp, #36	; 0x24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800479e:	4b89      	ldr	r3, [pc, #548]	; (80049c4 <HAL_GPIO_Init+0x234>)
 80047a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047a2:	e194      	b.n	8004ace <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	2101      	movs	r1, #1
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	fa01 f303 	lsl.w	r3, r1, r3
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8186 	beq.w	8004ac8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d005      	beq.n	80047d4 <HAL_GPIO_Init+0x44>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d130      	bne.n	8004836 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	2203      	movs	r2, #3
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4013      	ands	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800480a:	2201      	movs	r2, #1
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	f003 0201 	and.w	r2, r3, #1
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b03      	cmp	r3, #3
 8004840:	d017      	beq.n	8004872 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	2203      	movs	r2, #3
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4313      	orrs	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d123      	bne.n	80048c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	08da      	lsrs	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3208      	adds	r2, #8
 8004886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	220f      	movs	r2, #15
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	08da      	lsrs	r2, r3, #3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3208      	adds	r2, #8
 80048c0:	69b9      	ldr	r1, [r7, #24]
 80048c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	2203      	movs	r2, #3
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43db      	mvns	r3, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4013      	ands	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 0203 	and.w	r2, r3, #3
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80e0 	beq.w	8004ac8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004908:	4b2f      	ldr	r3, [pc, #188]	; (80049c8 <HAL_GPIO_Init+0x238>)
 800490a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800490e:	4a2e      	ldr	r2, [pc, #184]	; (80049c8 <HAL_GPIO_Init+0x238>)
 8004910:	f043 0302 	orr.w	r3, r3, #2
 8004914:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004918:	4b2b      	ldr	r3, [pc, #172]	; (80049c8 <HAL_GPIO_Init+0x238>)
 800491a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004926:	4a29      	ldr	r2, [pc, #164]	; (80049cc <HAL_GPIO_Init+0x23c>)
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	089b      	lsrs	r3, r3, #2
 800492c:	3302      	adds	r3, #2
 800492e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	220f      	movs	r2, #15
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a20      	ldr	r2, [pc, #128]	; (80049d0 <HAL_GPIO_Init+0x240>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d052      	beq.n	80049f8 <HAL_GPIO_Init+0x268>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1f      	ldr	r2, [pc, #124]	; (80049d4 <HAL_GPIO_Init+0x244>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d031      	beq.n	80049be <HAL_GPIO_Init+0x22e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <HAL_GPIO_Init+0x248>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02b      	beq.n	80049ba <HAL_GPIO_Init+0x22a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_GPIO_Init+0x24c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d025      	beq.n	80049b6 <HAL_GPIO_Init+0x226>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1c      	ldr	r2, [pc, #112]	; (80049e0 <HAL_GPIO_Init+0x250>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01f      	beq.n	80049b2 <HAL_GPIO_Init+0x222>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1b      	ldr	r2, [pc, #108]	; (80049e4 <HAL_GPIO_Init+0x254>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d019      	beq.n	80049ae <HAL_GPIO_Init+0x21e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a1a      	ldr	r2, [pc, #104]	; (80049e8 <HAL_GPIO_Init+0x258>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <HAL_GPIO_Init+0x21a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a19      	ldr	r2, [pc, #100]	; (80049ec <HAL_GPIO_Init+0x25c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00d      	beq.n	80049a6 <HAL_GPIO_Init+0x216>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a18      	ldr	r2, [pc, #96]	; (80049f0 <HAL_GPIO_Init+0x260>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <HAL_GPIO_Init+0x212>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <HAL_GPIO_Init+0x264>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <HAL_GPIO_Init+0x20e>
 800499a:	2309      	movs	r3, #9
 800499c:	e02d      	b.n	80049fa <HAL_GPIO_Init+0x26a>
 800499e:	230a      	movs	r3, #10
 80049a0:	e02b      	b.n	80049fa <HAL_GPIO_Init+0x26a>
 80049a2:	2308      	movs	r3, #8
 80049a4:	e029      	b.n	80049fa <HAL_GPIO_Init+0x26a>
 80049a6:	2307      	movs	r3, #7
 80049a8:	e027      	b.n	80049fa <HAL_GPIO_Init+0x26a>
 80049aa:	2306      	movs	r3, #6
 80049ac:	e025      	b.n	80049fa <HAL_GPIO_Init+0x26a>
 80049ae:	2305      	movs	r3, #5
 80049b0:	e023      	b.n	80049fa <HAL_GPIO_Init+0x26a>
 80049b2:	2304      	movs	r3, #4
 80049b4:	e021      	b.n	80049fa <HAL_GPIO_Init+0x26a>
 80049b6:	2303      	movs	r3, #3
 80049b8:	e01f      	b.n	80049fa <HAL_GPIO_Init+0x26a>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e01d      	b.n	80049fa <HAL_GPIO_Init+0x26a>
 80049be:	2301      	movs	r3, #1
 80049c0:	e01b      	b.n	80049fa <HAL_GPIO_Init+0x26a>
 80049c2:	bf00      	nop
 80049c4:	58000080 	.word	0x58000080
 80049c8:	58024400 	.word	0x58024400
 80049cc:	58000400 	.word	0x58000400
 80049d0:	58020000 	.word	0x58020000
 80049d4:	58020400 	.word	0x58020400
 80049d8:	58020800 	.word	0x58020800
 80049dc:	58020c00 	.word	0x58020c00
 80049e0:	58021000 	.word	0x58021000
 80049e4:	58021400 	.word	0x58021400
 80049e8:	58021800 	.word	0x58021800
 80049ec:	58021c00 	.word	0x58021c00
 80049f0:	58022000 	.word	0x58022000
 80049f4:	58022400 	.word	0x58022400
 80049f8:	2300      	movs	r3, #0
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	f002 0203 	and.w	r2, r2, #3
 8004a00:	0092      	lsls	r2, r2, #2
 8004a02:	4093      	lsls	r3, r2
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a0a:	4938      	ldr	r1, [pc, #224]	; (8004aec <HAL_GPIO_Init+0x35c>)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	089b      	lsrs	r3, r3, #2
 8004a10:	3302      	adds	r3, #2
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4013      	ands	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	3301      	adds	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f47f ae63 	bne.w	80047a4 <HAL_GPIO_Init+0x14>
  }
}
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
 8004ae2:	3724      	adds	r7, #36	; 0x24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	58000400 	.word	0x58000400

08004af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	4613      	mov	r3, r2
 8004afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b00:	787b      	ldrb	r3, [r7, #1]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b0c:	e003      	b.n	8004b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b0e:	887b      	ldrh	r3, [r7, #2]
 8004b10:	041a      	lsls	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	619a      	str	r2, [r3, #24]
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b34:	887a      	ldrh	r2, [r7, #2]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	041a      	lsls	r2, r3, #16
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	43d9      	mvns	r1, r3
 8004b40:	887b      	ldrh	r3, [r7, #2]
 8004b42:	400b      	ands	r3, r1
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	619a      	str	r2, [r3, #24]
}
 8004b4a:	bf00      	nop
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004b60:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <HAL_HSEM_FastTake+0x2c>)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3320      	adds	r3, #32
 8004b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6a:	4a07      	ldr	r2, [pc, #28]	; (8004b88 <HAL_HSEM_FastTake+0x30>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d101      	bne.n	8004b74 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	e000      	b.n	8004b76 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	58026400 	.word	0x58026400
 8004b88:	80000300 	.word	0x80000300

08004b8c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004b96:	4906      	ldr	r1, [pc, #24]	; (8004bb0 <HAL_HSEM_Release+0x24>)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	58026400 	.word	0x58026400

08004bb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb6:	b08f      	sub	sp, #60	; 0x3c
 8004bb8:	af0a      	add	r7, sp, #40	; 0x28
 8004bba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e116      	b.n	8004df4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d106      	bne.n	8004be6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fc fbb1 	bl	8001348 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2203      	movs	r2, #3
 8004bea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f004 faff 	bl	8009208 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	687e      	ldr	r6, [r7, #4]
 8004c12:	466d      	mov	r5, sp
 8004c14:	f106 0410 	add.w	r4, r6, #16
 8004c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c24:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c28:	1d33      	adds	r3, r6, #4
 8004c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c2c:	6838      	ldr	r0, [r7, #0]
 8004c2e:	f004 fa7d 	bl	800912c <USB_CoreInit>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0d7      	b.n	8004df4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f004 faed 	bl	800922a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	e04a      	b.n	8004cec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c56:	7bfa      	ldrb	r2, [r7, #15]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	333d      	adds	r3, #61	; 0x3d
 8004c66:	2201      	movs	r2, #1
 8004c68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c6a:	7bfa      	ldrb	r2, [r7, #15]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	333c      	adds	r3, #60	; 0x3c
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c7e:	7bfa      	ldrb	r2, [r7, #15]
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	b298      	uxth	r0, r3
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	3344      	adds	r3, #68	; 0x44
 8004c92:	4602      	mov	r2, r0
 8004c94:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c96:	7bfa      	ldrb	r2, [r7, #15]
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	3340      	adds	r3, #64	; 0x40
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	3348      	adds	r3, #72	; 0x48
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cbe:	7bfa      	ldrb	r2, [r7, #15]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	334c      	adds	r3, #76	; 0x4c
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cd2:	7bfa      	ldrb	r2, [r7, #15]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	3354      	adds	r3, #84	; 0x54
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
 8004cec:	7bfa      	ldrb	r2, [r7, #15]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d3af      	bcc.n	8004c56 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	e044      	b.n	8004d86 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cfc:	7bfa      	ldrb	r2, [r7, #15]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004d0e:	2200      	movs	r2, #0
 8004d10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d12:	7bfa      	ldrb	r2, [r7, #15]
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004d24:	7bfa      	ldrb	r2, [r7, #15]
 8004d26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d28:	7bfa      	ldrb	r2, [r7, #15]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d3e:	7bfa      	ldrb	r2, [r7, #15]
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d54:	7bfa      	ldrb	r2, [r7, #15]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d6a:	7bfa      	ldrb	r2, [r7, #15]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	3301      	adds	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
 8004d86:	7bfa      	ldrb	r2, [r7, #15]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d3b5      	bcc.n	8004cfc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	687e      	ldr	r6, [r7, #4]
 8004d98:	466d      	mov	r5, sp
 8004d9a:	f106 0410 	add.w	r4, r6, #16
 8004d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004da6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004daa:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dae:	1d33      	adds	r3, r6, #4
 8004db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004db2:	6838      	ldr	r0, [r7, #0]
 8004db4:	f004 fa86 	bl	80092c4 <USB_DevInit>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e014      	b.n	8004df4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d102      	bne.n	8004de8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f80a 	bl	8004dfc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f004 fc44 	bl	800967a <USB_DevDisconnect>

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004dfc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_PCDEx_ActivateLPM+0x44>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	10000003 	.word	0x10000003

08004e44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004e4c:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	2b06      	cmp	r3, #6
 8004e56:	d00a      	beq.n	8004e6e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e58:	4b26      	ldr	r3, [pc, #152]	; (8004ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d001      	beq.n	8004e6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e040      	b.n	8004eec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e03e      	b.n	8004eec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e6e:	4b21      	ldr	r3, [pc, #132]	; (8004ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004e76:	491f      	ldr	r1, [pc, #124]	; (8004ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e7e:	f7fc fbd9 	bl	8001634 <HAL_GetTick>
 8004e82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e84:	e009      	b.n	8004e9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e86:	f7fc fbd5 	bl	8001634 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e94:	d901      	bls.n	8004e9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e028      	b.n	8004eec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e9a:	4b16      	ldr	r3, [pc, #88]	; (8004ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea6:	d1ee      	bne.n	8004e86 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b1e      	cmp	r3, #30
 8004eac:	d008      	beq.n	8004ec0 <HAL_PWREx_ConfigSupply+0x7c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8004eb2:	d005      	beq.n	8004ec0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b1d      	cmp	r3, #29
 8004eb8:	d002      	beq.n	8004ec0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b2d      	cmp	r3, #45	; 0x2d
 8004ebe:	d114      	bne.n	8004eea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004ec0:	f7fc fbb8 	bl	8001634 <HAL_GetTick>
 8004ec4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004ec6:	e009      	b.n	8004edc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ec8:	f7fc fbb4 	bl	8001634 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ed6:	d901      	bls.n	8004edc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e007      	b.n	8004eec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004edc:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee8:	d1ee      	bne.n	8004ec8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	58024800 	.word	0x58024800

08004ef8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a04      	ldr	r2, [pc, #16]	; (8004f14 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f06:	60d3      	str	r3, [r2, #12]
}
 8004f08:	bf00      	nop
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	58024800 	.word	0x58024800

08004f18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08c      	sub	sp, #48	; 0x30
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f000 bc1d 	b.w	8005766 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8087 	beq.w	8005048 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3a:	4b99      	ldr	r3, [pc, #612]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f44:	4b96      	ldr	r3, [pc, #600]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d007      	beq.n	8004f60 <HAL_RCC_OscConfig+0x48>
 8004f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f52:	2b18      	cmp	r3, #24
 8004f54:	d110      	bne.n	8004f78 <HAL_RCC_OscConfig+0x60>
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d10b      	bne.n	8004f78 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f60:	4b8f      	ldr	r3, [pc, #572]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d06c      	beq.n	8005046 <HAL_RCC_OscConfig+0x12e>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d168      	bne.n	8005046 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e3f6      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f80:	d106      	bne.n	8004f90 <HAL_RCC_OscConfig+0x78>
 8004f82:	4b87      	ldr	r3, [pc, #540]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a86      	ldr	r2, [pc, #536]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	e02e      	b.n	8004fee <HAL_RCC_OscConfig+0xd6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10c      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x9a>
 8004f98:	4b81      	ldr	r3, [pc, #516]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a80      	ldr	r2, [pc, #512]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	4b7e      	ldr	r3, [pc, #504]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a7d      	ldr	r2, [pc, #500]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e01d      	b.n	8004fee <HAL_RCC_OscConfig+0xd6>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fba:	d10c      	bne.n	8004fd6 <HAL_RCC_OscConfig+0xbe>
 8004fbc:	4b78      	ldr	r3, [pc, #480]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a77      	ldr	r2, [pc, #476]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004fc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4b75      	ldr	r3, [pc, #468]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a74      	ldr	r2, [pc, #464]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	e00b      	b.n	8004fee <HAL_RCC_OscConfig+0xd6>
 8004fd6:	4b72      	ldr	r3, [pc, #456]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a71      	ldr	r2, [pc, #452]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	4b6f      	ldr	r3, [pc, #444]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a6e      	ldr	r2, [pc, #440]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8004fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d013      	beq.n	800501e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff6:	f7fc fb1d 	bl	8001634 <HAL_GetTick>
 8004ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ffe:	f7fc fb19 	bl	8001634 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b64      	cmp	r3, #100	; 0x64
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e3aa      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005010:	4b63      	ldr	r3, [pc, #396]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0xe6>
 800501c:	e014      	b.n	8005048 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fc fb09 	bl	8001634 <HAL_GetTick>
 8005022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005026:	f7fc fb05 	bl	8001634 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b64      	cmp	r3, #100	; 0x64
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e396      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005038:	4b59      	ldr	r3, [pc, #356]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f0      	bne.n	8005026 <HAL_RCC_OscConfig+0x10e>
 8005044:	e000      	b.n	8005048 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005046:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80cb 	beq.w	80051ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005056:	4b52      	ldr	r3, [pc, #328]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800505e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005060:	4b4f      	ldr	r3, [pc, #316]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <HAL_RCC_OscConfig+0x164>
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	2b18      	cmp	r3, #24
 8005070:	d156      	bne.n	8005120 <HAL_RCC_OscConfig+0x208>
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d151      	bne.n	8005120 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800507c:	4b48      	ldr	r3, [pc, #288]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_RCC_OscConfig+0x17c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e368      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005094:	4b42      	ldr	r3, [pc, #264]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f023 0219 	bic.w	r2, r3, #25
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	493f      	ldr	r1, [pc, #252]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050a6:	f7fc fac5 	bl	8001634 <HAL_GetTick>
 80050aa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ae:	f7fc fac1 	bl	8001634 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e352      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050c0:	4b37      	ldr	r3, [pc, #220]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050cc:	f7fc fae2 	bl	8001694 <HAL_GetREVID>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d817      	bhi.n	800510a <HAL_RCC_OscConfig+0x1f2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	d108      	bne.n	80050f4 <HAL_RCC_OscConfig+0x1dc>
 80050e2:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80050ea:	4a2d      	ldr	r2, [pc, #180]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 80050ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f2:	e07b      	b.n	80051ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f4:	4b2a      	ldr	r3, [pc, #168]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	031b      	lsls	r3, r3, #12
 8005102:	4927      	ldr	r1, [pc, #156]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8005104:	4313      	orrs	r3, r2
 8005106:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005108:	e070      	b.n	80051ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510a:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	061b      	lsls	r3, r3, #24
 8005118:	4921      	ldr	r1, [pc, #132]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 800511a:	4313      	orrs	r3, r2
 800511c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800511e:	e065      	b.n	80051ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d048      	beq.n	80051ba <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f023 0219 	bic.w	r2, r3, #25
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	491a      	ldr	r1, [pc, #104]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513a:	f7fc fa7b 	bl	8001634 <HAL_GetTick>
 800513e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005142:	f7fc fa77 	bl	8001634 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e308      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005154:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005160:	f7fc fa98 	bl	8001694 <HAL_GetREVID>
 8005164:	4603      	mov	r3, r0
 8005166:	f241 0203 	movw	r2, #4099	; 0x1003
 800516a:	4293      	cmp	r3, r2
 800516c:	d81a      	bhi.n	80051a4 <HAL_RCC_OscConfig+0x28c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b40      	cmp	r3, #64	; 0x40
 8005174:	d108      	bne.n	8005188 <HAL_RCC_OscConfig+0x270>
 8005176:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800517e:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8005180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005184:	6053      	str	r3, [r2, #4]
 8005186:	e031      	b.n	80051ec <HAL_RCC_OscConfig+0x2d4>
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	031b      	lsls	r3, r3, #12
 8005196:	4902      	ldr	r1, [pc, #8]	; (80051a0 <HAL_RCC_OscConfig+0x288>)
 8005198:	4313      	orrs	r3, r2
 800519a:	604b      	str	r3, [r1, #4]
 800519c:	e026      	b.n	80051ec <HAL_RCC_OscConfig+0x2d4>
 800519e:	bf00      	nop
 80051a0:	58024400 	.word	0x58024400
 80051a4:	4b9a      	ldr	r3, [pc, #616]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	061b      	lsls	r3, r3, #24
 80051b2:	4997      	ldr	r1, [pc, #604]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	604b      	str	r3, [r1, #4]
 80051b8:	e018      	b.n	80051ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ba:	4b95      	ldr	r3, [pc, #596]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a94      	ldr	r2, [pc, #592]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c6:	f7fc fa35 	bl	8001634 <HAL_GetTick>
 80051ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ce:	f7fc fa31 	bl	8001634 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e2c2      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051e0:	4b8b      	ldr	r3, [pc, #556]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1f0      	bne.n	80051ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80a9 	beq.w	800534c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051fa:	4b85      	ldr	r3, [pc, #532]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005202:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005204:	4b82      	ldr	r3, [pc, #520]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d007      	beq.n	8005220 <HAL_RCC_OscConfig+0x308>
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	2b18      	cmp	r3, #24
 8005214:	d13a      	bne.n	800528c <HAL_RCC_OscConfig+0x374>
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d135      	bne.n	800528c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005220:	4b7b      	ldr	r3, [pc, #492]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_RCC_OscConfig+0x320>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	2b80      	cmp	r3, #128	; 0x80
 8005232:	d001      	beq.n	8005238 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e296      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005238:	f7fc fa2c 	bl	8001694 <HAL_GetREVID>
 800523c:	4603      	mov	r3, r0
 800523e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005242:	4293      	cmp	r3, r2
 8005244:	d817      	bhi.n	8005276 <HAL_RCC_OscConfig+0x35e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	2b20      	cmp	r3, #32
 800524c:	d108      	bne.n	8005260 <HAL_RCC_OscConfig+0x348>
 800524e:	4b70      	ldr	r3, [pc, #448]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005256:	4a6e      	ldr	r2, [pc, #440]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005258:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800525c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800525e:	e075      	b.n	800534c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005260:	4b6b      	ldr	r3, [pc, #428]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	069b      	lsls	r3, r3, #26
 800526e:	4968      	ldr	r1, [pc, #416]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005274:	e06a      	b.n	800534c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005276:	4b66      	ldr	r3, [pc, #408]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	061b      	lsls	r3, r3, #24
 8005284:	4962      	ldr	r1, [pc, #392]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005286:	4313      	orrs	r3, r2
 8005288:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800528a:	e05f      	b.n	800534c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d042      	beq.n	800531a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005294:	4b5e      	ldr	r3, [pc, #376]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a5d      	ldr	r2, [pc, #372]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 800529a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fc f9c8 	bl	8001634 <HAL_GetTick>
 80052a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80052a8:	f7fc f9c4 	bl	8001634 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e255      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052ba:	4b55      	ldr	r3, [pc, #340]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052c6:	f7fc f9e5 	bl	8001694 <HAL_GetREVID>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d817      	bhi.n	8005304 <HAL_RCC_OscConfig+0x3ec>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d108      	bne.n	80052ee <HAL_RCC_OscConfig+0x3d6>
 80052dc:	4b4c      	ldr	r3, [pc, #304]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80052e4:	4a4a      	ldr	r2, [pc, #296]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80052e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ea:	6053      	str	r3, [r2, #4]
 80052ec:	e02e      	b.n	800534c <HAL_RCC_OscConfig+0x434>
 80052ee:	4b48      	ldr	r3, [pc, #288]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	069b      	lsls	r3, r3, #26
 80052fc:	4944      	ldr	r1, [pc, #272]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	604b      	str	r3, [r1, #4]
 8005302:	e023      	b.n	800534c <HAL_RCC_OscConfig+0x434>
 8005304:	4b42      	ldr	r3, [pc, #264]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	061b      	lsls	r3, r3, #24
 8005312:	493f      	ldr	r1, [pc, #252]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005314:	4313      	orrs	r3, r2
 8005316:	60cb      	str	r3, [r1, #12]
 8005318:	e018      	b.n	800534c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800531a:	4b3d      	ldr	r3, [pc, #244]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a3c      	ldr	r2, [pc, #240]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fc f985 	bl	8001634 <HAL_GetTick>
 800532a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800532e:	f7fc f981 	bl	8001634 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e212      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005340:	4b33      	ldr	r3, [pc, #204]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f0      	bne.n	800532e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d036      	beq.n	80053c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d019      	beq.n	8005394 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005360:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005364:	4a2a      	ldr	r2, [pc, #168]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536c:	f7fc f962 	bl	8001634 <HAL_GetTick>
 8005370:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005374:	f7fc f95e 	bl	8001634 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e1ef      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005386:	4b22      	ldr	r3, [pc, #136]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f0      	beq.n	8005374 <HAL_RCC_OscConfig+0x45c>
 8005392:	e018      	b.n	80053c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005394:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005398:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a0:	f7fc f948 	bl	8001634 <HAL_GetTick>
 80053a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053a8:	f7fc f944 	bl	8001634 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e1d5      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053ba:	4b15      	ldr	r3, [pc, #84]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80053bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d039      	beq.n	8005446 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01c      	beq.n	8005414 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053da:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a0c      	ldr	r2, [pc, #48]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 80053e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053e6:	f7fc f925 	bl	8001634 <HAL_GetTick>
 80053ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80053ee:	f7fc f921 	bl	8001634 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e1b2      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005400:	4b03      	ldr	r3, [pc, #12]	; (8005410 <HAL_RCC_OscConfig+0x4f8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x4d6>
 800540c:	e01b      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
 800540e:	bf00      	nop
 8005410:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005414:	4b9b      	ldr	r3, [pc, #620]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a9a      	ldr	r2, [pc, #616]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 800541a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800541e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005420:	f7fc f908 	bl	8001634 <HAL_GetTick>
 8005424:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005428:	f7fc f904 	bl	8001634 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e195      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800543a:	4b92      	ldr	r3, [pc, #584]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f0      	bne.n	8005428 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 8081 	beq.w	8005556 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005454:	4b8c      	ldr	r3, [pc, #560]	; (8005688 <HAL_RCC_OscConfig+0x770>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a8b      	ldr	r2, [pc, #556]	; (8005688 <HAL_RCC_OscConfig+0x770>)
 800545a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005460:	f7fc f8e8 	bl	8001634 <HAL_GetTick>
 8005464:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005468:	f7fc f8e4 	bl	8001634 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	; 0x64
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e175      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800547a:	4b83      	ldr	r3, [pc, #524]	; (8005688 <HAL_RCC_OscConfig+0x770>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d106      	bne.n	800549c <HAL_RCC_OscConfig+0x584>
 800548e:	4b7d      	ldr	r3, [pc, #500]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	4a7c      	ldr	r2, [pc, #496]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005494:	f043 0301 	orr.w	r3, r3, #1
 8005498:	6713      	str	r3, [r2, #112]	; 0x70
 800549a:	e02d      	b.n	80054f8 <HAL_RCC_OscConfig+0x5e0>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10c      	bne.n	80054be <HAL_RCC_OscConfig+0x5a6>
 80054a4:	4b77      	ldr	r3, [pc, #476]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80054a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a8:	4a76      	ldr	r2, [pc, #472]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	6713      	str	r3, [r2, #112]	; 0x70
 80054b0:	4b74      	ldr	r3, [pc, #464]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80054b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b4:	4a73      	ldr	r2, [pc, #460]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80054b6:	f023 0304 	bic.w	r3, r3, #4
 80054ba:	6713      	str	r3, [r2, #112]	; 0x70
 80054bc:	e01c      	b.n	80054f8 <HAL_RCC_OscConfig+0x5e0>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	2b05      	cmp	r3, #5
 80054c4:	d10c      	bne.n	80054e0 <HAL_RCC_OscConfig+0x5c8>
 80054c6:	4b6f      	ldr	r3, [pc, #444]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	4a6e      	ldr	r2, [pc, #440]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80054cc:	f043 0304 	orr.w	r3, r3, #4
 80054d0:	6713      	str	r3, [r2, #112]	; 0x70
 80054d2:	4b6c      	ldr	r3, [pc, #432]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	4a6b      	ldr	r2, [pc, #428]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	6713      	str	r3, [r2, #112]	; 0x70
 80054de:	e00b      	b.n	80054f8 <HAL_RCC_OscConfig+0x5e0>
 80054e0:	4b68      	ldr	r3, [pc, #416]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	4a67      	ldr	r2, [pc, #412]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	6713      	str	r3, [r2, #112]	; 0x70
 80054ec:	4b65      	ldr	r3, [pc, #404]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80054ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f0:	4a64      	ldr	r2, [pc, #400]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80054f2:	f023 0304 	bic.w	r3, r3, #4
 80054f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d015      	beq.n	800552c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005500:	f7fc f898 	bl	8001634 <HAL_GetTick>
 8005504:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005506:	e00a      	b.n	800551e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005508:	f7fc f894 	bl	8001634 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	f241 3288 	movw	r2, #5000	; 0x1388
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e123      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800551e:	4b59      	ldr	r3, [pc, #356]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0ee      	beq.n	8005508 <HAL_RCC_OscConfig+0x5f0>
 800552a:	e014      	b.n	8005556 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fc f882 	bl	8001634 <HAL_GetTick>
 8005530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005532:	e00a      	b.n	800554a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005534:	f7fc f87e 	bl	8001634 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005542:	4293      	cmp	r3, r2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e10d      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800554a:	4b4e      	ldr	r3, [pc, #312]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 800554c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1ee      	bne.n	8005534 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8102 	beq.w	8005764 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005560:	4b48      	ldr	r3, [pc, #288]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005568:	2b18      	cmp	r3, #24
 800556a:	f000 80bd 	beq.w	80056e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	2b02      	cmp	r3, #2
 8005574:	f040 809e 	bne.w	80056b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005578:	4b42      	ldr	r3, [pc, #264]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a41      	ldr	r2, [pc, #260]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 800557e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fc f856 	bl	8001634 <HAL_GetTick>
 8005588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800558c:	f7fc f852 	bl	8001634 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e0e3      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800559e:	4b39      	ldr	r3, [pc, #228]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055aa:	4b36      	ldr	r3, [pc, #216]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80055ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ae:	4b37      	ldr	r3, [pc, #220]	; (800568c <HAL_RCC_OscConfig+0x774>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055ba:	0112      	lsls	r2, r2, #4
 80055bc:	430a      	orrs	r2, r1
 80055be:	4931      	ldr	r1, [pc, #196]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	628b      	str	r3, [r1, #40]	; 0x28
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	3b01      	subs	r3, #1
 80055ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	3b01      	subs	r3, #1
 80055d4:	025b      	lsls	r3, r3, #9
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	3b01      	subs	r3, #1
 80055e0:	041b      	lsls	r3, r3, #16
 80055e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ec:	3b01      	subs	r3, #1
 80055ee:	061b      	lsls	r3, r3, #24
 80055f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055f4:	4923      	ldr	r1, [pc, #140]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80055fa:	4b22      	ldr	r3, [pc, #136]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	4a21      	ldr	r2, [pc, #132]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005600:	f023 0301 	bic.w	r3, r3, #1
 8005604:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005606:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800560a:	4b21      	ldr	r3, [pc, #132]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 800560c:	4013      	ands	r3, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005612:	00d2      	lsls	r2, r2, #3
 8005614:	491b      	ldr	r1, [pc, #108]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005616:	4313      	orrs	r3, r2
 8005618:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800561a:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	f023 020c 	bic.w	r2, r3, #12
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	4917      	ldr	r1, [pc, #92]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005628:	4313      	orrs	r3, r2
 800562a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800562c:	4b15      	ldr	r3, [pc, #84]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	f023 0202 	bic.w	r2, r3, #2
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005638:	4912      	ldr	r1, [pc, #72]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 800563a:	4313      	orrs	r3, r2
 800563c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800563e:	4b11      	ldr	r3, [pc, #68]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	4a10      	ldr	r2, [pc, #64]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005648:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564a:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	4a0d      	ldr	r2, [pc, #52]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005654:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	4a0a      	ldr	r2, [pc, #40]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 800565c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005660:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005662:	4b08      	ldr	r3, [pc, #32]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	4a07      	ldr	r2, [pc, #28]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a04      	ldr	r2, [pc, #16]	; (8005684 <HAL_RCC_OscConfig+0x76c>)
 8005674:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567a:	f7fb ffdb 	bl	8001634 <HAL_GetTick>
 800567e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005680:	e011      	b.n	80056a6 <HAL_RCC_OscConfig+0x78e>
 8005682:	bf00      	nop
 8005684:	58024400 	.word	0x58024400
 8005688:	58024800 	.word	0x58024800
 800568c:	fffffc0c 	.word	0xfffffc0c
 8005690:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005694:	f7fb ffce 	bl	8001634 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e05f      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056a6:	4b32      	ldr	r3, [pc, #200]	; (8005770 <HAL_RCC_OscConfig+0x858>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0f0      	beq.n	8005694 <HAL_RCC_OscConfig+0x77c>
 80056b2:	e057      	b.n	8005764 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b4:	4b2e      	ldr	r3, [pc, #184]	; (8005770 <HAL_RCC_OscConfig+0x858>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a2d      	ldr	r2, [pc, #180]	; (8005770 <HAL_RCC_OscConfig+0x858>)
 80056ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fb ffb8 	bl	8001634 <HAL_GetTick>
 80056c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c8:	f7fb ffb4 	bl	8001634 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e045      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056da:	4b25      	ldr	r3, [pc, #148]	; (8005770 <HAL_RCC_OscConfig+0x858>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1f0      	bne.n	80056c8 <HAL_RCC_OscConfig+0x7b0>
 80056e6:	e03d      	b.n	8005764 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056e8:	4b21      	ldr	r3, [pc, #132]	; (8005770 <HAL_RCC_OscConfig+0x858>)
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056ee:	4b20      	ldr	r3, [pc, #128]	; (8005770 <HAL_RCC_OscConfig+0x858>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d031      	beq.n	8005760 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f003 0203 	and.w	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d12a      	bne.n	8005760 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	091b      	lsrs	r3, r3, #4
 800570e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005716:	429a      	cmp	r2, r3
 8005718:	d122      	bne.n	8005760 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005726:	429a      	cmp	r2, r3
 8005728:	d11a      	bne.n	8005760 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	0a5b      	lsrs	r3, r3, #9
 800572e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005736:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005738:	429a      	cmp	r2, r3
 800573a:	d111      	bne.n	8005760 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	0c1b      	lsrs	r3, r3, #16
 8005740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800574a:	429a      	cmp	r2, r3
 800574c:	d108      	bne.n	8005760 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	0e1b      	lsrs	r3, r3, #24
 8005752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800575c:	429a      	cmp	r2, r3
 800575e:	d001      	beq.n	8005764 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3730      	adds	r7, #48	; 0x30
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	58024400 	.word	0x58024400

08005774 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e19c      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005788:	4b8a      	ldr	r3, [pc, #552]	; (80059b4 <HAL_RCC_ClockConfig+0x240>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d910      	bls.n	80057b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005796:	4b87      	ldr	r3, [pc, #540]	; (80059b4 <HAL_RCC_ClockConfig+0x240>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f023 020f 	bic.w	r2, r3, #15
 800579e:	4985      	ldr	r1, [pc, #532]	; (80059b4 <HAL_RCC_ClockConfig+0x240>)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b83      	ldr	r3, [pc, #524]	; (80059b4 <HAL_RCC_ClockConfig+0x240>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e184      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d010      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	4b7b      	ldr	r3, [pc, #492]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d908      	bls.n	80057e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057d4:	4b78      	ldr	r3, [pc, #480]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	4975      	ldr	r1, [pc, #468]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d010      	beq.n	8005814 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	4b70      	ldr	r3, [pc, #448]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057fe:	429a      	cmp	r2, r3
 8005800:	d908      	bls.n	8005814 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005802:	4b6d      	ldr	r3, [pc, #436]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	496a      	ldr	r1, [pc, #424]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005810:	4313      	orrs	r3, r2
 8005812:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	2b00      	cmp	r3, #0
 800581e:	d010      	beq.n	8005842 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699a      	ldr	r2, [r3, #24]
 8005824:	4b64      	ldr	r3, [pc, #400]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800582c:	429a      	cmp	r2, r3
 800582e:	d908      	bls.n	8005842 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005830:	4b61      	ldr	r3, [pc, #388]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	495e      	ldr	r1, [pc, #376]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 800583e:	4313      	orrs	r3, r2
 8005840:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d010      	beq.n	8005870 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69da      	ldr	r2, [r3, #28]
 8005852:	4b59      	ldr	r3, [pc, #356]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800585a:	429a      	cmp	r2, r3
 800585c:	d908      	bls.n	8005870 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800585e:	4b56      	ldr	r3, [pc, #344]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	4953      	ldr	r1, [pc, #332]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 800586c:	4313      	orrs	r3, r2
 800586e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d010      	beq.n	800589e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	4b4d      	ldr	r3, [pc, #308]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	429a      	cmp	r2, r3
 800588a:	d908      	bls.n	800589e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800588c:	4b4a      	ldr	r3, [pc, #296]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f023 020f 	bic.w	r2, r3, #15
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	4947      	ldr	r1, [pc, #284]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 800589a:	4313      	orrs	r3, r2
 800589c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d055      	beq.n	8005956 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058aa:	4b43      	ldr	r3, [pc, #268]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	4940      	ldr	r1, [pc, #256]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d107      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058c4:	4b3c      	ldr	r3, [pc, #240]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d121      	bne.n	8005914 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0f6      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d107      	bne.n	80058ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058dc:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d115      	bne.n	8005914 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0ea      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d107      	bne.n	8005904 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058f4:	4b30      	ldr	r3, [pc, #192]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d109      	bne.n	8005914 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0de      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005904:	4b2c      	ldr	r3, [pc, #176]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0d6      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005914:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f023 0207 	bic.w	r2, r3, #7
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	4925      	ldr	r1, [pc, #148]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005922:	4313      	orrs	r3, r2
 8005924:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005926:	f7fb fe85 	bl	8001634 <HAL_GetTick>
 800592a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592c:	e00a      	b.n	8005944 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800592e:	f7fb fe81 	bl	8001634 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f241 3288 	movw	r2, #5000	; 0x1388
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e0be      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005944:	4b1c      	ldr	r3, [pc, #112]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	429a      	cmp	r2, r3
 8005954:	d1eb      	bne.n	800592e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d010      	beq.n	8005984 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	4b14      	ldr	r3, [pc, #80]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	429a      	cmp	r2, r3
 8005970:	d208      	bcs.n	8005984 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f023 020f 	bic.w	r2, r3, #15
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	490e      	ldr	r1, [pc, #56]	; (80059b8 <HAL_RCC_ClockConfig+0x244>)
 8005980:	4313      	orrs	r3, r2
 8005982:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <HAL_RCC_ClockConfig+0x240>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d214      	bcs.n	80059bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005992:	4b08      	ldr	r3, [pc, #32]	; (80059b4 <HAL_RCC_ClockConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 020f 	bic.w	r2, r3, #15
 800599a:	4906      	ldr	r1, [pc, #24]	; (80059b4 <HAL_RCC_ClockConfig+0x240>)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	4313      	orrs	r3, r2
 80059a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <HAL_RCC_ClockConfig+0x240>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e086      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x34e>
 80059b4:	52002000 	.word	0x52002000
 80059b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d010      	beq.n	80059ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	4b3f      	ldr	r3, [pc, #252]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d208      	bcs.n	80059ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059d8:	4b3c      	ldr	r3, [pc, #240]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	4939      	ldr	r1, [pc, #228]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d010      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695a      	ldr	r2, [r3, #20]
 80059fa:	4b34      	ldr	r3, [pc, #208]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d208      	bcs.n	8005a18 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a06:	4b31      	ldr	r3, [pc, #196]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	492e      	ldr	r1, [pc, #184]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d010      	beq.n	8005a46 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	4b28      	ldr	r3, [pc, #160]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d208      	bcs.n	8005a46 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a34:	4b25      	ldr	r3, [pc, #148]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	4922      	ldr	r1, [pc, #136]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d010      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69da      	ldr	r2, [r3, #28]
 8005a56:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d208      	bcs.n	8005a74 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a62:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	4917      	ldr	r1, [pc, #92]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a74:	f000 f834 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b14      	ldr	r3, [pc, #80]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	0a1b      	lsrs	r3, r3, #8
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	4912      	ldr	r1, [pc, #72]	; (8005ad0 <HAL_RCC_ClockConfig+0x35c>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a92:	4b0e      	ldr	r3, [pc, #56]	; (8005acc <HAL_RCC_ClockConfig+0x358>)
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	4a0d      	ldr	r2, [pc, #52]	; (8005ad0 <HAL_RCC_ClockConfig+0x35c>)
 8005a9c:	5cd3      	ldrb	r3, [r2, r3]
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa8:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <HAL_RCC_ClockConfig+0x360>)
 8005aaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005aac:	4a0a      	ldr	r2, [pc, #40]	; (8005ad8 <HAL_RCC_ClockConfig+0x364>)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <HAL_RCC_ClockConfig+0x368>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fb fd72 	bl	80015a0 <HAL_InitTick>
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	58024400 	.word	0x58024400
 8005ad0:	080097cc 	.word	0x080097cc
 8005ad4:	24000004 	.word	0x24000004
 8005ad8:	24000000 	.word	0x24000000
 8005adc:	24000008 	.word	0x24000008

08005ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b089      	sub	sp, #36	; 0x24
 8005ae4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ae6:	4bb3      	ldr	r3, [pc, #716]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aee:	2b18      	cmp	r3, #24
 8005af0:	f200 8155 	bhi.w	8005d9e <HAL_RCC_GetSysClockFreq+0x2be>
 8005af4:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afa:	bf00      	nop
 8005afc:	08005b61 	.word	0x08005b61
 8005b00:	08005d9f 	.word	0x08005d9f
 8005b04:	08005d9f 	.word	0x08005d9f
 8005b08:	08005d9f 	.word	0x08005d9f
 8005b0c:	08005d9f 	.word	0x08005d9f
 8005b10:	08005d9f 	.word	0x08005d9f
 8005b14:	08005d9f 	.word	0x08005d9f
 8005b18:	08005d9f 	.word	0x08005d9f
 8005b1c:	08005b87 	.word	0x08005b87
 8005b20:	08005d9f 	.word	0x08005d9f
 8005b24:	08005d9f 	.word	0x08005d9f
 8005b28:	08005d9f 	.word	0x08005d9f
 8005b2c:	08005d9f 	.word	0x08005d9f
 8005b30:	08005d9f 	.word	0x08005d9f
 8005b34:	08005d9f 	.word	0x08005d9f
 8005b38:	08005d9f 	.word	0x08005d9f
 8005b3c:	08005b8d 	.word	0x08005b8d
 8005b40:	08005d9f 	.word	0x08005d9f
 8005b44:	08005d9f 	.word	0x08005d9f
 8005b48:	08005d9f 	.word	0x08005d9f
 8005b4c:	08005d9f 	.word	0x08005d9f
 8005b50:	08005d9f 	.word	0x08005d9f
 8005b54:	08005d9f 	.word	0x08005d9f
 8005b58:	08005d9f 	.word	0x08005d9f
 8005b5c:	08005b93 	.word	0x08005b93
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b60:	4b94      	ldr	r3, [pc, #592]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b6c:	4b91      	ldr	r3, [pc, #580]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	08db      	lsrs	r3, r3, #3
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	4a90      	ldr	r2, [pc, #576]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b78:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005b7e:	e111      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b80:	4b8d      	ldr	r3, [pc, #564]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b82:	61bb      	str	r3, [r7, #24]
    break;
 8005b84:	e10e      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005b86:	4b8d      	ldr	r3, [pc, #564]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b88:	61bb      	str	r3, [r7, #24]
    break;
 8005b8a:	e10b      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005b8c:	4b8c      	ldr	r3, [pc, #560]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b8e:	61bb      	str	r3, [r7, #24]
    break;
 8005b90:	e108      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b92:	4b88      	ldr	r3, [pc, #544]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005b9c:	4b85      	ldr	r3, [pc, #532]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	091b      	lsrs	r3, r3, #4
 8005ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ba6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ba8:	4b82      	ldr	r3, [pc, #520]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005bb2:	4b80      	ldr	r3, [pc, #512]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb6:	08db      	lsrs	r3, r3, #3
 8005bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80e1 	beq.w	8005d98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	f000 8083 	beq.w	8005ce4 <HAL_RCC_GetSysClockFreq+0x204>
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	f200 80a1 	bhi.w	8005d28 <HAL_RCC_GetSysClockFreq+0x248>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x114>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d056      	beq.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005bf2:	e099      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bf4:	4b6f      	ldr	r3, [pc, #444]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d02d      	beq.n	8005c5c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c00:	4b6c      	ldr	r3, [pc, #432]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	08db      	lsrs	r3, r3, #3
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	4a6b      	ldr	r2, [pc, #428]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c10:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	ee07 3a90 	vmov	s15, r3
 8005c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2a:	4b62      	ldr	r3, [pc, #392]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005c5a:	e087      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c66:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c6e:	4b51      	ldr	r3, [pc, #324]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c82:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c9e:	e065      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005caa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005dcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb2:	4b40      	ldr	r3, [pc, #256]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cc6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ce2:	e043      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005dd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf6:	4b2f      	ldr	r3, [pc, #188]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d26:	e021      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005dcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3a:	4b1e      	ldr	r3, [pc, #120]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d6a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005d6c:	4b11      	ldr	r3, [pc, #68]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	0a5b      	lsrs	r3, r3, #9
 8005d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d76:	3301      	adds	r3, #1
 8005d78:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	ee07 3a90 	vmov	s15, r3
 8005d80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d90:	ee17 3a90 	vmov	r3, s15
 8005d94:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005d96:	e005      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61bb      	str	r3, [r7, #24]
    break;
 8005d9c:	e002      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005d9e:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005da0:	61bb      	str	r3, [r7, #24]
    break;
 8005da2:	bf00      	nop
  }

  return sysclockfreq;
 8005da4:	69bb      	ldr	r3, [r7, #24]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3724      	adds	r7, #36	; 0x24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	58024400 	.word	0x58024400
 8005db8:	03d09000 	.word	0x03d09000
 8005dbc:	003d0900 	.word	0x003d0900
 8005dc0:	007a1200 	.word	0x007a1200
 8005dc4:	46000000 	.word	0x46000000
 8005dc8:	4c742400 	.word	0x4c742400
 8005dcc:	4a742400 	.word	0x4a742400
 8005dd0:	4af42400 	.word	0x4af42400

08005dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005dda:	f7ff fe81 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8005dde:	4602      	mov	r2, r0
 8005de0:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <HAL_RCC_GetHCLKFreq+0x50>)
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	0a1b      	lsrs	r3, r3, #8
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	490f      	ldr	r1, [pc, #60]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x54>)
 8005dec:	5ccb      	ldrb	r3, [r1, r3]
 8005dee:	f003 031f 	and.w	r3, r3, #31
 8005df2:	fa22 f303 	lsr.w	r3, r2, r3
 8005df6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <HAL_RCC_GetHCLKFreq+0x50>)
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	4a09      	ldr	r2, [pc, #36]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x54>)
 8005e02:	5cd3      	ldrb	r3, [r2, r3]
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0e:	4a07      	ldr	r2, [pc, #28]	; (8005e2c <HAL_RCC_GetHCLKFreq+0x58>)
 8005e10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e12:	4a07      	ldr	r2, [pc, #28]	; (8005e30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e18:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <HAL_RCC_GetHCLKFreq+0x58>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	58024400 	.word	0x58024400
 8005e28:	080097cc 	.word	0x080097cc
 8005e2c:	24000004 	.word	0x24000004
 8005e30:	24000000 	.word	0x24000000

08005e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e38:	f7ff ffcc 	bl	8005dd4 <HAL_RCC_GetHCLKFreq>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	091b      	lsrs	r3, r3, #4
 8005e44:	f003 0307 	and.w	r3, r3, #7
 8005e48:	4904      	ldr	r1, [pc, #16]	; (8005e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e4a:	5ccb      	ldrb	r3, [r1, r3]
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	58024400 	.word	0x58024400
 8005e5c:	080097cc 	.word	0x080097cc

08005e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e64:	f7ff ffb6 	bl	8005dd4 <HAL_RCC_GetHCLKFreq>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	4904      	ldr	r1, [pc, #16]	; (8005e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e76:	5ccb      	ldrb	r3, [r1, r3]
 8005e78:	f003 031f 	and.w	r3, r3, #31
 8005e7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	58024400 	.word	0x58024400
 8005e88:	080097cc 	.word	0x080097cc

08005e8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e94:	2300      	movs	r3, #0
 8005e96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e98:	2300      	movs	r3, #0
 8005e9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d03f      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eb0:	d02a      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005eb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eb6:	d824      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005eb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ebc:	d018      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec2:	d81e      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ecc:	d007      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005ece:	e018      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed0:	4ba3      	ldr	r3, [pc, #652]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	4aa2      	ldr	r2, [pc, #648]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005edc:	e015      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	2102      	movs	r1, #2
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 f9d5 	bl	8007294 <RCCEx_PLL2_Config>
 8005eea:	4603      	mov	r3, r0
 8005eec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005eee:	e00c      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3324      	adds	r3, #36	; 0x24
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 fa7e 	bl	80073f8 <RCCEx_PLL3_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f00:	e003      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	75fb      	strb	r3, [r7, #23]
      break;
 8005f06:	e000      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f10:	4b93      	ldr	r3, [pc, #588]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f1c:	4990      	ldr	r1, [pc, #576]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	650b      	str	r3, [r1, #80]	; 0x50
 8005f22:	e001      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
 8005f26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d03d      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d826      	bhi.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f59 	.word	0x08005f59
 8005f48:	08005f67 	.word	0x08005f67
 8005f4c:	08005f79 	.word	0x08005f79
 8005f50:	08005f91 	.word	0x08005f91
 8005f54:	08005f91 	.word	0x08005f91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f58:	4b81      	ldr	r3, [pc, #516]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	4a80      	ldr	r2, [pc, #512]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f64:	e015      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 f991 	bl	8007294 <RCCEx_PLL2_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f76:	e00c      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3324      	adds	r3, #36	; 0x24
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 fa3a 	bl	80073f8 <RCCEx_PLL3_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f88:	e003      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f8e:	e000      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d109      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f98:	4b71      	ldr	r3, [pc, #452]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9c:	f023 0207 	bic.w	r2, r3, #7
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa4:	496e      	ldr	r1, [pc, #440]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	650b      	str	r3, [r1, #80]	; 0x50
 8005faa:	e001      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d042      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc4:	d02b      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fca:	d825      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005fcc:	2bc0      	cmp	r3, #192	; 0xc0
 8005fce:	d028      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005fd0:	2bc0      	cmp	r3, #192	; 0xc0
 8005fd2:	d821      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005fd4:	2b80      	cmp	r3, #128	; 0x80
 8005fd6:	d016      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005fd8:	2b80      	cmp	r3, #128	; 0x80
 8005fda:	d81d      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d007      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005fe4:	e018      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fe6:	4b5e      	ldr	r3, [pc, #376]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	4a5d      	ldr	r2, [pc, #372]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ff2:	e017      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f001 f94a 	bl	8007294 <RCCEx_PLL2_Config>
 8006000:	4603      	mov	r3, r0
 8006002:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006004:	e00e      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	3324      	adds	r3, #36	; 0x24
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f001 f9f3 	bl	80073f8 <RCCEx_PLL3_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006016:	e005      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	75fb      	strb	r3, [r7, #23]
      break;
 800601c:	e002      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800601e:	bf00      	nop
 8006020:	e000      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006024:	7dfb      	ldrb	r3, [r7, #23]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d109      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800602a:	4b4d      	ldr	r3, [pc, #308]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800602c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006036:	494a      	ldr	r1, [pc, #296]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006038:	4313      	orrs	r3, r2
 800603a:	650b      	str	r3, [r1, #80]	; 0x50
 800603c:	e001      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603e:	7dfb      	ldrb	r3, [r7, #23]
 8006040:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604a:	2b00      	cmp	r3, #0
 800604c:	d049      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006058:	d030      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800605a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800605e:	d82a      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006060:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006064:	d02c      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006066:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800606a:	d824      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800606c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006070:	d018      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006076:	d81e      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800607c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006080:	d007      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006082:	e018      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006084:	4b36      	ldr	r3, [pc, #216]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	4a35      	ldr	r2, [pc, #212]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800608a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800608e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006090:	e017      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3304      	adds	r3, #4
 8006096:	2100      	movs	r1, #0
 8006098:	4618      	mov	r0, r3
 800609a:	f001 f8fb 	bl	8007294 <RCCEx_PLL2_Config>
 800609e:	4603      	mov	r3, r0
 80060a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80060a2:	e00e      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3324      	adds	r3, #36	; 0x24
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 f9a4 	bl	80073f8 <RCCEx_PLL3_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060b4:	e005      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]
      break;
 80060ba:	e002      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80060bc:	bf00      	nop
 80060be:	e000      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80060c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060c8:	4b25      	ldr	r3, [pc, #148]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060d6:	4922      	ldr	r1, [pc, #136]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	658b      	str	r3, [r1, #88]	; 0x58
 80060dc:	e001      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060de:	7dfb      	ldrb	r3, [r7, #23]
 80060e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d04b      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060f8:	d030      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80060fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060fe:	d82a      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006100:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006104:	d02e      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006106:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800610a:	d824      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800610c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006110:	d018      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006116:	d81e      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800611c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006120:	d007      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006122:	e018      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006124:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	4a0d      	ldr	r2, [pc, #52]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800612a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800612e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006130:	e019      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3304      	adds	r3, #4
 8006136:	2100      	movs	r1, #0
 8006138:	4618      	mov	r0, r3
 800613a:	f001 f8ab 	bl	8007294 <RCCEx_PLL2_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006142:	e010      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3324      	adds	r3, #36	; 0x24
 8006148:	2100      	movs	r1, #0
 800614a:	4618      	mov	r0, r3
 800614c:	f001 f954 	bl	80073f8 <RCCEx_PLL3_Config>
 8006150:	4603      	mov	r3, r0
 8006152:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006154:	e007      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]
      break;
 800615a:	e004      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800615c:	bf00      	nop
 800615e:	e002      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006160:	58024400 	.word	0x58024400
      break;
 8006164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006166:	7dfb      	ldrb	r3, [r7, #23]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800616c:	4b99      	ldr	r3, [pc, #612]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800616e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006170:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800617a:	4996      	ldr	r1, [pc, #600]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800617c:	4313      	orrs	r3, r2
 800617e:	658b      	str	r3, [r1, #88]	; 0x58
 8006180:	e001      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d032      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006196:	2b30      	cmp	r3, #48	; 0x30
 8006198:	d01c      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800619a:	2b30      	cmp	r3, #48	; 0x30
 800619c:	d817      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x342>
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d00c      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d813      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x342>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d016      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d10f      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ae:	4b89      	ldr	r3, [pc, #548]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	4a88      	ldr	r2, [pc, #544]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80061ba:	e00e      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3304      	adds	r3, #4
 80061c0:	2102      	movs	r1, #2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 f866 	bl	8007294 <RCCEx_PLL2_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80061cc:	e005      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	75fb      	strb	r3, [r7, #23]
      break;
 80061d2:	e002      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80061d4:	bf00      	nop
 80061d6:	e000      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80061d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d109      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80061e0:	4b7c      	ldr	r3, [pc, #496]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ec:	4979      	ldr	r1, [pc, #484]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061f2:	e001      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f4:	7dfb      	ldrb	r3, [r7, #23]
 80061f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d047      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800620c:	d030      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800620e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006212:	d82a      	bhi.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006214:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006218:	d02c      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800621a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800621e:	d824      	bhi.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006224:	d018      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800622a:	d81e      	bhi.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006234:	d007      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006236:	e018      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006238:	4b66      	ldr	r3, [pc, #408]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	4a65      	ldr	r2, [pc, #404]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800623e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006244:	e017      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3304      	adds	r3, #4
 800624a:	2100      	movs	r1, #0
 800624c:	4618      	mov	r0, r3
 800624e:	f001 f821 	bl	8007294 <RCCEx_PLL2_Config>
 8006252:	4603      	mov	r3, r0
 8006254:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006256:	e00e      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3324      	adds	r3, #36	; 0x24
 800625c:	2100      	movs	r1, #0
 800625e:	4618      	mov	r0, r3
 8006260:	f001 f8ca 	bl	80073f8 <RCCEx_PLL3_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006268:	e005      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	75fb      	strb	r3, [r7, #23]
      break;
 800626e:	e002      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d109      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800627c:	4b55      	ldr	r3, [pc, #340]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800627e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006280:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006288:	4952      	ldr	r1, [pc, #328]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800628a:	4313      	orrs	r3, r2
 800628c:	650b      	str	r3, [r1, #80]	; 0x50
 800628e:	e001      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006290:	7dfb      	ldrb	r3, [r7, #23]
 8006292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d049      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062a8:	d02e      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80062aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ae:	d828      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80062b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062b4:	d02a      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80062b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062ba:	d822      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80062bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062c0:	d026      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80062c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062c6:	d81c      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80062c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062cc:	d010      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80062ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062d2:	d816      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01d      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80062d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062dc:	d111      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3304      	adds	r3, #4
 80062e2:	2101      	movs	r1, #1
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 ffd5 	bl	8007294 <RCCEx_PLL2_Config>
 80062ea:	4603      	mov	r3, r0
 80062ec:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80062ee:	e012      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3324      	adds	r3, #36	; 0x24
 80062f4:	2101      	movs	r1, #1
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 f87e 	bl	80073f8 <RCCEx_PLL3_Config>
 80062fc:	4603      	mov	r3, r0
 80062fe:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006300:	e009      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	75fb      	strb	r3, [r7, #23]
      break;
 8006306:	e006      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006308:	bf00      	nop
 800630a:	e004      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800630c:	bf00      	nop
 800630e:	e002      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006310:	bf00      	nop
 8006312:	e000      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d109      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800631c:	4b2d      	ldr	r3, [pc, #180]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800631e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006320:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006328:	492a      	ldr	r1, [pc, #168]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800632a:	4313      	orrs	r3, r2
 800632c:	650b      	str	r3, [r1, #80]	; 0x50
 800632e:	e001      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d04d      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800634a:	d02e      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800634c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006350:	d828      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006356:	d02a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635c:	d822      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800635e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006362:	d026      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006364:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006368:	d81c      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800636a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800636e:	d010      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006374:	d816      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d01d      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800637a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800637e:	d111      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	2101      	movs	r1, #1
 8006386:	4618      	mov	r0, r3
 8006388:	f000 ff84 	bl	8007294 <RCCEx_PLL2_Config>
 800638c:	4603      	mov	r3, r0
 800638e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006390:	e012      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3324      	adds	r3, #36	; 0x24
 8006396:	2101      	movs	r1, #1
 8006398:	4618      	mov	r0, r3
 800639a:	f001 f82d 	bl	80073f8 <RCCEx_PLL3_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80063a2:	e009      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	75fb      	strb	r3, [r7, #23]
      break;
 80063a8:	e006      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80063aa:	bf00      	nop
 80063ac:	e004      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80063ae:	bf00      	nop
 80063b0:	e002      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80063b2:	bf00      	nop
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80063b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10c      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80063be:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063cc:	4901      	ldr	r1, [pc, #4]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	658b      	str	r3, [r1, #88]	; 0x58
 80063d2:	e003      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80063d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
 80063da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d02f      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f0:	d00e      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80063f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f6:	d814      	bhi.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d015      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80063fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006400:	d10f      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006402:	4baf      	ldr	r3, [pc, #700]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	4aae      	ldr	r2, [pc, #696]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800640c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800640e:	e00c      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3304      	adds	r3, #4
 8006414:	2101      	movs	r1, #1
 8006416:	4618      	mov	r0, r3
 8006418:	f000 ff3c 	bl	8007294 <RCCEx_PLL2_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006420:	e003      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]
      break;
 8006426:	e000      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800642a:	7dfb      	ldrb	r3, [r7, #23]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d109      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006430:	4ba3      	ldr	r3, [pc, #652]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006434:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800643c:	49a0      	ldr	r1, [pc, #640]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800643e:	4313      	orrs	r3, r2
 8006440:	650b      	str	r3, [r1, #80]	; 0x50
 8006442:	e001      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006444:	7dfb      	ldrb	r3, [r7, #23]
 8006446:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d032      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006458:	2b03      	cmp	r3, #3
 800645a:	d81b      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800645c:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006462:	bf00      	nop
 8006464:	0800649b 	.word	0x0800649b
 8006468:	08006475 	.word	0x08006475
 800646c:	08006483 	.word	0x08006483
 8006470:	0800649b 	.word	0x0800649b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006474:	4b92      	ldr	r3, [pc, #584]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	4a91      	ldr	r2, [pc, #580]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800647a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800647e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006480:	e00c      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3304      	adds	r3, #4
 8006486:	2102      	movs	r1, #2
 8006488:	4618      	mov	r0, r3
 800648a:	f000 ff03 	bl	8007294 <RCCEx_PLL2_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006492:	e003      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
      break;
 8006498:	e000      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800649a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800649c:	7dfb      	ldrb	r3, [r7, #23]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d109      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80064a2:	4b87      	ldr	r3, [pc, #540]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a6:	f023 0203 	bic.w	r2, r3, #3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ae:	4984      	ldr	r1, [pc, #528]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064b4:	e001      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8086 	beq.w	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064c8:	4b7e      	ldr	r3, [pc, #504]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a7d      	ldr	r2, [pc, #500]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80064ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064d4:	f7fb f8ae 	bl	8001634 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064da:	e009      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064dc:	f7fb f8aa 	bl	8001634 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b64      	cmp	r3, #100	; 0x64
 80064e8:	d902      	bls.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	75fb      	strb	r3, [r7, #23]
        break;
 80064ee:	e005      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064f0:	4b74      	ldr	r3, [pc, #464]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0ef      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d166      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006502:	4b6f      	ldr	r3, [pc, #444]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006504:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800650c:	4053      	eors	r3, r2
 800650e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006512:	2b00      	cmp	r3, #0
 8006514:	d013      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006516:	4b6a      	ldr	r3, [pc, #424]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006520:	4b67      	ldr	r3, [pc, #412]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006524:	4a66      	ldr	r2, [pc, #408]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800652a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800652c:	4b64      	ldr	r3, [pc, #400]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800652e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006530:	4a63      	ldr	r2, [pc, #396]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006536:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006538:	4a61      	ldr	r2, [pc, #388]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006548:	d115      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654a:	f7fb f873 	bl	8001634 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006550:	e00b      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006552:	f7fb f86f 	bl	8001634 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006560:	4293      	cmp	r3, r2
 8006562:	d902      	bls.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	75fb      	strb	r3, [r7, #23]
            break;
 8006568:	e005      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800656a:	4b55      	ldr	r3, [pc, #340]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0ed      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006576:	7dfb      	ldrb	r3, [r7, #23]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d126      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800658a:	d10d      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800658c:	4b4c      	ldr	r3, [pc, #304]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800659a:	0919      	lsrs	r1, r3, #4
 800659c:	4b4a      	ldr	r3, [pc, #296]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800659e:	400b      	ands	r3, r1
 80065a0:	4947      	ldr	r1, [pc, #284]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	610b      	str	r3, [r1, #16]
 80065a6:	e005      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80065a8:	4b45      	ldr	r3, [pc, #276]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	4a44      	ldr	r2, [pc, #272]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80065b2:	6113      	str	r3, [r2, #16]
 80065b4:	4b42      	ldr	r3, [pc, #264]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065c2:	493f      	ldr	r1, [pc, #252]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	670b      	str	r3, [r1, #112]	; 0x70
 80065c8:	e004      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	75bb      	strb	r3, [r7, #22]
 80065ce:	e001      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
 80065d2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 8085 	beq.w	80066ec <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065e6:	2b28      	cmp	r3, #40	; 0x28
 80065e8:	d866      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	080066cd 	.word	0x080066cd
 80065f4:	080066b9 	.word	0x080066b9
 80065f8:	080066b9 	.word	0x080066b9
 80065fc:	080066b9 	.word	0x080066b9
 8006600:	080066b9 	.word	0x080066b9
 8006604:	080066b9 	.word	0x080066b9
 8006608:	080066b9 	.word	0x080066b9
 800660c:	080066b9 	.word	0x080066b9
 8006610:	08006695 	.word	0x08006695
 8006614:	080066b9 	.word	0x080066b9
 8006618:	080066b9 	.word	0x080066b9
 800661c:	080066b9 	.word	0x080066b9
 8006620:	080066b9 	.word	0x080066b9
 8006624:	080066b9 	.word	0x080066b9
 8006628:	080066b9 	.word	0x080066b9
 800662c:	080066b9 	.word	0x080066b9
 8006630:	080066a7 	.word	0x080066a7
 8006634:	080066b9 	.word	0x080066b9
 8006638:	080066b9 	.word	0x080066b9
 800663c:	080066b9 	.word	0x080066b9
 8006640:	080066b9 	.word	0x080066b9
 8006644:	080066b9 	.word	0x080066b9
 8006648:	080066b9 	.word	0x080066b9
 800664c:	080066b9 	.word	0x080066b9
 8006650:	080066cd 	.word	0x080066cd
 8006654:	080066b9 	.word	0x080066b9
 8006658:	080066b9 	.word	0x080066b9
 800665c:	080066b9 	.word	0x080066b9
 8006660:	080066b9 	.word	0x080066b9
 8006664:	080066b9 	.word	0x080066b9
 8006668:	080066b9 	.word	0x080066b9
 800666c:	080066b9 	.word	0x080066b9
 8006670:	080066cd 	.word	0x080066cd
 8006674:	080066b9 	.word	0x080066b9
 8006678:	080066b9 	.word	0x080066b9
 800667c:	080066b9 	.word	0x080066b9
 8006680:	080066b9 	.word	0x080066b9
 8006684:	080066b9 	.word	0x080066b9
 8006688:	080066b9 	.word	0x080066b9
 800668c:	080066b9 	.word	0x080066b9
 8006690:	080066cd 	.word	0x080066cd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	2101      	movs	r1, #1
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fdfa 	bl	8007294 <RCCEx_PLL2_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80066a4:	e013      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3324      	adds	r3, #36	; 0x24
 80066aa:	2101      	movs	r1, #1
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fea3 	bl	80073f8 <RCCEx_PLL3_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80066b6:	e00a      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75fb      	strb	r3, [r7, #23]
      break;
 80066bc:	e007      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x842>
 80066be:	bf00      	nop
 80066c0:	58024400 	.word	0x58024400
 80066c4:	58024800 	.word	0x58024800
 80066c8:	00ffffcf 	.word	0x00ffffcf
      break;
 80066cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d109      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80066d4:	4b96      	ldr	r3, [pc, #600]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066e0:	4993      	ldr	r1, [pc, #588]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	654b      	str	r3, [r1, #84]	; 0x54
 80066e6:	e001      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d038      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066fc:	2b05      	cmp	r3, #5
 80066fe:	d821      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006700:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006706:	bf00      	nop
 8006708:	0800674b 	.word	0x0800674b
 800670c:	08006721 	.word	0x08006721
 8006710:	08006733 	.word	0x08006733
 8006714:	0800674b 	.word	0x0800674b
 8006718:	0800674b 	.word	0x0800674b
 800671c:	0800674b 	.word	0x0800674b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3304      	adds	r3, #4
 8006724:	2101      	movs	r1, #1
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fdb4 	bl	8007294 <RCCEx_PLL2_Config>
 800672c:	4603      	mov	r3, r0
 800672e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006730:	e00c      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3324      	adds	r3, #36	; 0x24
 8006736:	2101      	movs	r1, #1
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fe5d 	bl	80073f8 <RCCEx_PLL3_Config>
 800673e:	4603      	mov	r3, r0
 8006740:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006742:	e003      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	75fb      	strb	r3, [r7, #23]
      break;
 8006748:	e000      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800674a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006752:	4b77      	ldr	r3, [pc, #476]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006756:	f023 0207 	bic.w	r2, r3, #7
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675e:	4974      	ldr	r1, [pc, #464]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006760:	4313      	orrs	r3, r2
 8006762:	654b      	str	r3, [r1, #84]	; 0x54
 8006764:	e001      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b00      	cmp	r3, #0
 8006774:	d03a      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800677c:	2b05      	cmp	r3, #5
 800677e:	d821      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006780:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	080067cb 	.word	0x080067cb
 800678c:	080067a1 	.word	0x080067a1
 8006790:	080067b3 	.word	0x080067b3
 8006794:	080067cb 	.word	0x080067cb
 8006798:	080067cb 	.word	0x080067cb
 800679c:	080067cb 	.word	0x080067cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3304      	adds	r3, #4
 80067a4:	2101      	movs	r1, #1
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fd74 	bl	8007294 <RCCEx_PLL2_Config>
 80067ac:	4603      	mov	r3, r0
 80067ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80067b0:	e00c      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3324      	adds	r3, #36	; 0x24
 80067b6:	2101      	movs	r1, #1
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fe1d 	bl	80073f8 <RCCEx_PLL3_Config>
 80067be:	4603      	mov	r3, r0
 80067c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80067c2:	e003      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	75fb      	strb	r3, [r7, #23]
      break;
 80067c8:	e000      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80067ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067d2:	4b57      	ldr	r3, [pc, #348]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d6:	f023 0207 	bic.w	r2, r3, #7
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e0:	4953      	ldr	r1, [pc, #332]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	658b      	str	r3, [r1, #88]	; 0x58
 80067e6:	e001      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d04b      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006802:	d02e      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006808:	d828      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800680a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680e:	d02a      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006814:	d822      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006816:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800681a:	d026      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800681c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006820:	d81c      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006826:	d010      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682c:	d816      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01d      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006836:	d111      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	2100      	movs	r1, #0
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fd28 	bl	8007294 <RCCEx_PLL2_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006848:	e012      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3324      	adds	r3, #36	; 0x24
 800684e:	2102      	movs	r1, #2
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fdd1 	bl	80073f8 <RCCEx_PLL3_Config>
 8006856:	4603      	mov	r3, r0
 8006858:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800685a:	e009      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	75fb      	strb	r3, [r7, #23]
      break;
 8006860:	e006      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006862:	bf00      	nop
 8006864:	e004      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006866:	bf00      	nop
 8006868:	e002      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800686a:	bf00      	nop
 800686c:	e000      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800686e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10a      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006876:	4b2e      	ldr	r3, [pc, #184]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006884:	492a      	ldr	r1, [pc, #168]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006886:	4313      	orrs	r3, r2
 8006888:	654b      	str	r3, [r1, #84]	; 0x54
 800688a:	e001      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d04d      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068a6:	d02e      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80068a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068ac:	d828      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b2:	d02a      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80068b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b8:	d822      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80068ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068be:	d026      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80068c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068c4:	d81c      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80068c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ca:	d010      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80068cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d0:	d816      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d01d      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80068d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068da:	d111      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3304      	adds	r3, #4
 80068e0:	2100      	movs	r1, #0
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fcd6 	bl	8007294 <RCCEx_PLL2_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80068ec:	e012      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3324      	adds	r3, #36	; 0x24
 80068f2:	2102      	movs	r1, #2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fd7f 	bl	80073f8 <RCCEx_PLL3_Config>
 80068fa:	4603      	mov	r3, r0
 80068fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80068fe:	e009      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	75fb      	strb	r3, [r7, #23]
      break;
 8006904:	e006      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006906:	bf00      	nop
 8006908:	e004      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800690a:	bf00      	nop
 800690c:	e002      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800690e:	bf00      	nop
 8006910:	e000      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10c      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800691a:	4b05      	ldr	r3, [pc, #20]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800691c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006928:	4901      	ldr	r1, [pc, #4]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800692a:	4313      	orrs	r3, r2
 800692c:	658b      	str	r3, [r1, #88]	; 0x58
 800692e:	e003      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006940:	2b00      	cmp	r3, #0
 8006942:	d04b      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800694a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800694e:	d02e      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006950:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006954:	d828      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800695a:	d02a      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800695c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006960:	d822      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006962:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006966:	d026      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006968:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800696c:	d81c      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800696e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006972:	d010      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006978:	d816      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d01d      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800697e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006982:	d111      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3304      	adds	r3, #4
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fc82 	bl	8007294 <RCCEx_PLL2_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006994:	e012      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3324      	adds	r3, #36	; 0x24
 800699a:	2102      	movs	r1, #2
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fd2b 	bl	80073f8 <RCCEx_PLL3_Config>
 80069a2:	4603      	mov	r3, r0
 80069a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80069a6:	e009      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
      break;
 80069ac:	e006      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80069ae:	bf00      	nop
 80069b0:	e004      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80069b2:	bf00      	nop
 80069b4:	e002      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80069b6:	bf00      	nop
 80069b8:	e000      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80069ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80069c2:	4b9d      	ldr	r3, [pc, #628]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069d0:	4999      	ldr	r1, [pc, #612]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	658b      	str	r3, [r1, #88]	; 0x58
 80069d6:	e001      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
 80069da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01a      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f2:	d10a      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3324      	adds	r3, #36	; 0x24
 80069f8:	2102      	movs	r1, #2
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fcfc 	bl	80073f8 <RCCEx_PLL3_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a0a:	4b8b      	ldr	r3, [pc, #556]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a18:	4987      	ldr	r1, [pc, #540]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d01a      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a34:	d10a      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	3324      	adds	r3, #36	; 0x24
 8006a3a:	2102      	movs	r1, #2
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fcdb 	bl	80073f8 <RCCEx_PLL3_Config>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a4c:	4b7a      	ldr	r3, [pc, #488]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a5a:	4977      	ldr	r1, [pc, #476]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d034      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a76:	d01d      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a7c:	d817      	bhi.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a86:	d009      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006a88:	e011      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fbff 	bl	8007294 <RCCEx_PLL2_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006a9a:	e00c      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3324      	adds	r3, #36	; 0x24
 8006aa0:	2102      	movs	r1, #2
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fca8 	bl	80073f8 <RCCEx_PLL3_Config>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006aac:	e003      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab2:	e000      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006abc:	4b5e      	ldr	r3, [pc, #376]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006aca:	495b      	ldr	r1, [pc, #364]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	658b      	str	r3, [r1, #88]	; 0x58
 8006ad0:	e001      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d033      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ae8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006aec:	d01c      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006aee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006af2:	d816      	bhi.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006af8:	d003      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006afe:	d007      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006b00:	e00f      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b02:	4b4d      	ldr	r3, [pc, #308]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	4a4c      	ldr	r2, [pc, #304]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006b0e:	e00c      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3324      	adds	r3, #36	; 0x24
 8006b14:	2101      	movs	r1, #1
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 fc6e 	bl	80073f8 <RCCEx_PLL3_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006b20:	e003      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	75fb      	strb	r3, [r7, #23]
      break;
 8006b26:	e000      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b30:	4b41      	ldr	r3, [pc, #260]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b3e:	493e      	ldr	r1, [pc, #248]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	654b      	str	r3, [r1, #84]	; 0x54
 8006b44:	e001      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
 8006b48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d029      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b62:	d007      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006b64:	e00f      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b66:	4b34      	ldr	r3, [pc, #208]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6a:	4a33      	ldr	r2, [pc, #204]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006b72:	e00b      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3304      	adds	r3, #4
 8006b78:	2102      	movs	r1, #2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fb8a 	bl	8007294 <RCCEx_PLL2_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006b84:	e002      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	75fb      	strb	r3, [r7, #23]
      break;
 8006b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b92:	4b29      	ldr	r3, [pc, #164]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9e:	4926      	ldr	r1, [pc, #152]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ba4:	e001      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3324      	adds	r3, #36	; 0x24
 8006bba:	2102      	movs	r1, #2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 fc1b 	bl	80073f8 <RCCEx_PLL3_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d033      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006be0:	d017      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006be6:	d811      	bhi.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bec:	d013      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf2:	d80b      	bhi.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d010      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfc:	d106      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bfe:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	4a0d      	ldr	r2, [pc, #52]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006c0a:	e007      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c10:	e004      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006c12:	bf00      	nop
 8006c14:	e002      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006c16:	bf00      	nop
 8006c18:	e000      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10c      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c2e:	4902      	ldr	r1, [pc, #8]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	654b      	str	r3, [r1, #84]	; 0x54
 8006c34:	e004      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006c36:	bf00      	nop
 8006c38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d008      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c4c:	4b31      	ldr	r3, [pc, #196]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c58:	492e      	ldr	r1, [pc, #184]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006c6a:	4b2a      	ldr	r3, [pc, #168]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c78:	4926      	ldr	r1, [pc, #152]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d008      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c8a:	4b22      	ldr	r3, [pc, #136]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c96:	491f      	ldr	r1, [pc, #124]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00d      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ca8:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cb2:	6113      	str	r3, [r2, #16]
 8006cb4:	4b17      	ldr	r3, [pc, #92]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006cbe:	4915      	ldr	r1, [pc, #84]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	da08      	bge.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ccc:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd8:	490e      	ldr	r1, [pc, #56]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d009      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cea:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf8:	4906      	ldr	r1, [pc, #24]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006cfe:	7dbb      	ldrb	r3, [r7, #22]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e000      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	58024400 	.word	0x58024400

08006d18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006d1c:	f7ff f85a 	bl	8005dd4 <HAL_RCC_GetHCLKFreq>
 8006d20:	4602      	mov	r2, r0
 8006d22:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	091b      	lsrs	r3, r3, #4
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	4904      	ldr	r1, [pc, #16]	; (8006d40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006d2e:	5ccb      	ldrb	r3, [r1, r3]
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	58024400 	.word	0x58024400
 8006d40:	080097cc 	.word	0x080097cc

08006d44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b089      	sub	sp, #36	; 0x24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d4c:	4ba1      	ldr	r3, [pc, #644]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d50:	f003 0303 	and.w	r3, r3, #3
 8006d54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006d56:	4b9f      	ldr	r3, [pc, #636]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	0b1b      	lsrs	r3, r3, #12
 8006d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006d62:	4b9c      	ldr	r3, [pc, #624]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	091b      	lsrs	r3, r3, #4
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006d6e:	4b99      	ldr	r3, [pc, #612]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d72:	08db      	lsrs	r3, r3, #3
 8006d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	fb02 f303 	mul.w	r3, r2, r3
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8111 	beq.w	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	f000 8083 	beq.w	8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	f200 80a1 	bhi.w	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d056      	beq.n	8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006dae:	e099      	b.n	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006db0:	4b88      	ldr	r3, [pc, #544]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d02d      	beq.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dbc:	4b85      	ldr	r3, [pc, #532]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	08db      	lsrs	r3, r3, #3
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	4a84      	ldr	r2, [pc, #528]	; (8006fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dcc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	ee07 3a90 	vmov	s15, r3
 8006dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de6:	4b7b      	ldr	r3, [pc, #492]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e16:	e087      	b.n	8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2a:	4b6a      	ldr	r3, [pc, #424]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e5a:	e065      	b.n	8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e6e:	4b59      	ldr	r3, [pc, #356]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e9e:	e043      	b.n	8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb2:	4b48      	ldr	r3, [pc, #288]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ec6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ee2:	e021      	b.n	8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef6:	4b37      	ldr	r3, [pc, #220]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006f28:	4b2a      	ldr	r3, [pc, #168]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	0a5b      	lsrs	r3, r3, #9
 8006f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f4e:	ee17 2a90 	vmov	r2, s15
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006f56:	4b1f      	ldr	r3, [pc, #124]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	0c1b      	lsrs	r3, r3, #16
 8006f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f60:	ee07 3a90 	vmov	s15, r3
 8006f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f7c:	ee17 2a90 	vmov	r2, s15
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006f84:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	0e1b      	lsrs	r3, r3, #24
 8006f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006faa:	ee17 2a90 	vmov	r2, s15
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	609a      	str	r2, [r3, #8]
}
 8006fc6:	bf00      	nop
 8006fc8:	3724      	adds	r7, #36	; 0x24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	58024400 	.word	0x58024400
 8006fd8:	03d09000 	.word	0x03d09000
 8006fdc:	46000000 	.word	0x46000000
 8006fe0:	4c742400 	.word	0x4c742400
 8006fe4:	4a742400 	.word	0x4a742400
 8006fe8:	4af42400 	.word	0x4af42400

08006fec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b089      	sub	sp, #36	; 0x24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ff4:	4ba1      	ldr	r3, [pc, #644]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	f003 0303 	and.w	r3, r3, #3
 8006ffc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ffe:	4b9f      	ldr	r3, [pc, #636]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	0d1b      	lsrs	r3, r3, #20
 8007004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007008:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800700a:	4b9c      	ldr	r3, [pc, #624]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	0a1b      	lsrs	r3, r3, #8
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007016:	4b99      	ldr	r3, [pc, #612]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701a:	08db      	lsrs	r3, r3, #3
 800701c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	fb02 f303 	mul.w	r3, r2, r3
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 8111 	beq.w	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b02      	cmp	r3, #2
 800703e:	f000 8083 	beq.w	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b02      	cmp	r3, #2
 8007046:	f200 80a1 	bhi.w	800718c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d056      	beq.n	8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007056:	e099      	b.n	800718c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007058:	4b88      	ldr	r3, [pc, #544]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b00      	cmp	r3, #0
 8007062:	d02d      	beq.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007064:	4b85      	ldr	r3, [pc, #532]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	08db      	lsrs	r3, r3, #3
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	4a84      	ldr	r2, [pc, #528]	; (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007070:	fa22 f303 	lsr.w	r3, r2, r3
 8007074:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	ee07 3a90 	vmov	s15, r3
 800707c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708e:	4b7b      	ldr	r3, [pc, #492]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709e:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070be:	e087      	b.n	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80070ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d2:	4b6a      	ldr	r3, [pc, #424]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007102:	e065      	b.n	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007116:	4b59      	ldr	r3, [pc, #356]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007126:	ed97 6a03 	vldr	s12, [r7, #12]
 800712a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800712e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007146:	e043      	b.n	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715a:	4b48      	ldr	r3, [pc, #288]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716a:	ed97 6a03 	vldr	s12, [r7, #12]
 800716e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800718a:	e021      	b.n	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800719a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719e:	4b37      	ldr	r3, [pc, #220]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80071d0:	4b2a      	ldr	r3, [pc, #168]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	0a5b      	lsrs	r3, r3, #9
 80071d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f6:	ee17 2a90 	vmov	r2, s15
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80071fe:	4b1f      	ldr	r3, [pc, #124]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	0c1b      	lsrs	r3, r3, #16
 8007204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007208:	ee07 3a90 	vmov	s15, r3
 800720c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007218:	edd7 6a07 	vldr	s13, [r7, #28]
 800721c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007224:	ee17 2a90 	vmov	r2, s15
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800722c:	4b13      	ldr	r3, [pc, #76]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	0e1b      	lsrs	r3, r3, #24
 8007232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007246:	edd7 6a07 	vldr	s13, [r7, #28]
 800724a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007252:	ee17 2a90 	vmov	r2, s15
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800725a:	e008      	b.n	800726e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	609a      	str	r2, [r3, #8]
}
 800726e:	bf00      	nop
 8007270:	3724      	adds	r7, #36	; 0x24
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	58024400 	.word	0x58024400
 8007280:	03d09000 	.word	0x03d09000
 8007284:	46000000 	.word	0x46000000
 8007288:	4c742400 	.word	0x4c742400
 800728c:	4a742400 	.word	0x4a742400
 8007290:	4af42400 	.word	0x4af42400

08007294 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072a2:	4b53      	ldr	r3, [pc, #332]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d101      	bne.n	80072b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e099      	b.n	80073e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072b2:	4b4f      	ldr	r3, [pc, #316]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a4e      	ldr	r2, [pc, #312]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072be:	f7fa f9b9 	bl	8001634 <HAL_GetTick>
 80072c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072c4:	e008      	b.n	80072d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80072c6:	f7fa f9b5 	bl	8001634 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d901      	bls.n	80072d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e086      	b.n	80073e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072d8:	4b45      	ldr	r3, [pc, #276]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1f0      	bne.n	80072c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072e4:	4b42      	ldr	r3, [pc, #264]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	031b      	lsls	r3, r3, #12
 80072f2:	493f      	ldr	r1, [pc, #252]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	628b      	str	r3, [r1, #40]	; 0x28
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	3b01      	subs	r3, #1
 8007308:	025b      	lsls	r3, r3, #9
 800730a:	b29b      	uxth	r3, r3
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	3b01      	subs	r3, #1
 8007314:	041b      	lsls	r3, r3, #16
 8007316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	3b01      	subs	r3, #1
 8007322:	061b      	lsls	r3, r3, #24
 8007324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007328:	4931      	ldr	r1, [pc, #196]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800732a:	4313      	orrs	r3, r2
 800732c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800732e:	4b30      	ldr	r3, [pc, #192]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	492d      	ldr	r1, [pc, #180]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800733c:	4313      	orrs	r3, r2
 800733e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	f023 0220 	bic.w	r2, r3, #32
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	4928      	ldr	r1, [pc, #160]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800734e:	4313      	orrs	r3, r2
 8007350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007352:	4b27      	ldr	r3, [pc, #156]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	4a26      	ldr	r2, [pc, #152]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007358:	f023 0310 	bic.w	r3, r3, #16
 800735c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007362:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <RCCEx_PLL2_Config+0x160>)
 8007364:	4013      	ands	r3, r2
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	69d2      	ldr	r2, [r2, #28]
 800736a:	00d2      	lsls	r2, r2, #3
 800736c:	4920      	ldr	r1, [pc, #128]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800736e:	4313      	orrs	r3, r2
 8007370:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007372:	4b1f      	ldr	r3, [pc, #124]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	4a1e      	ldr	r2, [pc, #120]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007378:	f043 0310 	orr.w	r3, r3, #16
 800737c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007384:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	4a19      	ldr	r2, [pc, #100]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800738a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800738e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007390:	e00f      	b.n	80073b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d106      	bne.n	80073a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800739e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073a4:	e005      	b.n	80073b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073aa:	4a11      	ldr	r2, [pc, #68]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073b2:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a0e      	ldr	r2, [pc, #56]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073be:	f7fa f939 	bl	8001634 <HAL_GetTick>
 80073c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073c4:	e008      	b.n	80073d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073c6:	f7fa f935 	bl	8001634 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e006      	b.n	80073e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0f0      	beq.n	80073c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	58024400 	.word	0x58024400
 80073f4:	ffff0007 	.word	0xffff0007

080073f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007406:	4b53      	ldr	r3, [pc, #332]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	2b03      	cmp	r3, #3
 8007410:	d101      	bne.n	8007416 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e099      	b.n	800754a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007416:	4b4f      	ldr	r3, [pc, #316]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a4e      	ldr	r2, [pc, #312]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800741c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007422:	f7fa f907 	bl	8001634 <HAL_GetTick>
 8007426:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007428:	e008      	b.n	800743c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800742a:	f7fa f903 	bl	8001634 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e086      	b.n	800754a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800743c:	4b45      	ldr	r3, [pc, #276]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1f0      	bne.n	800742a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007448:	4b42      	ldr	r3, [pc, #264]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800744a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	051b      	lsls	r3, r3, #20
 8007456:	493f      	ldr	r1, [pc, #252]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007458:	4313      	orrs	r3, r2
 800745a:	628b      	str	r3, [r1, #40]	; 0x28
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	3b01      	subs	r3, #1
 8007462:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	3b01      	subs	r3, #1
 800746c:	025b      	lsls	r3, r3, #9
 800746e:	b29b      	uxth	r3, r3
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	3b01      	subs	r3, #1
 8007478:	041b      	lsls	r3, r3, #16
 800747a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	3b01      	subs	r3, #1
 8007486:	061b      	lsls	r3, r3, #24
 8007488:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800748c:	4931      	ldr	r1, [pc, #196]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800748e:	4313      	orrs	r3, r2
 8007490:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007492:	4b30      	ldr	r3, [pc, #192]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	492d      	ldr	r1, [pc, #180]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80074a4:	4b2b      	ldr	r3, [pc, #172]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	4928      	ldr	r1, [pc, #160]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074b6:	4b27      	ldr	r3, [pc, #156]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	4a26      	ldr	r2, [pc, #152]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074c2:	4b24      	ldr	r3, [pc, #144]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074c6:	4b24      	ldr	r3, [pc, #144]	; (8007558 <RCCEx_PLL3_Config+0x160>)
 80074c8:	4013      	ands	r3, r2
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	69d2      	ldr	r2, [r2, #28]
 80074ce:	00d2      	lsls	r2, r2, #3
 80074d0:	4920      	ldr	r1, [pc, #128]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80074d6:	4b1f      	ldr	r3, [pc, #124]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074da:	4a1e      	ldr	r2, [pc, #120]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d106      	bne.n	80074f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074e8:	4b1a      	ldr	r3, [pc, #104]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	4a19      	ldr	r2, [pc, #100]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074f4:	e00f      	b.n	8007516 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d106      	bne.n	800750a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80074fc:	4b15      	ldr	r3, [pc, #84]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	4a14      	ldr	r2, [pc, #80]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007502:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007506:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007508:	e005      	b.n	8007516 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800750a:	4b12      	ldr	r3, [pc, #72]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	4a11      	ldr	r2, [pc, #68]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007514:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007516:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a0e      	ldr	r2, [pc, #56]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800751c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007522:	f7fa f887 	bl	8001634 <HAL_GetTick>
 8007526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007528:	e008      	b.n	800753c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800752a:	f7fa f883 	bl	8001634 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e006      	b.n	800754a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800753c:	4b05      	ldr	r3, [pc, #20]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0f0      	beq.n	800752a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	58024400 	.word	0x58024400
 8007558:	ffff0007 	.word	0xffff0007

0800755c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e0f1      	b.n	8007752 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a78      	ldr	r2, [pc, #480]	; (800775c <HAL_SPI_Init+0x200>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00f      	beq.n	800759e <HAL_SPI_Init+0x42>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a77      	ldr	r2, [pc, #476]	; (8007760 <HAL_SPI_Init+0x204>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00a      	beq.n	800759e <HAL_SPI_Init+0x42>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a75      	ldr	r2, [pc, #468]	; (8007764 <HAL_SPI_Init+0x208>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d005      	beq.n	800759e <HAL_SPI_Init+0x42>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	2b0f      	cmp	r3, #15
 8007598:	d901      	bls.n	800759e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e0d9      	b.n	8007752 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fd38 	bl	8008014 <SPI_GetPacketSize>
 80075a4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a6c      	ldr	r2, [pc, #432]	; (800775c <HAL_SPI_Init+0x200>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00c      	beq.n	80075ca <HAL_SPI_Init+0x6e>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a6a      	ldr	r2, [pc, #424]	; (8007760 <HAL_SPI_Init+0x204>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d007      	beq.n	80075ca <HAL_SPI_Init+0x6e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a69      	ldr	r2, [pc, #420]	; (8007764 <HAL_SPI_Init+0x208>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d002      	beq.n	80075ca <HAL_SPI_Init+0x6e>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b08      	cmp	r3, #8
 80075c8:	d811      	bhi.n	80075ee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075ce:	4a63      	ldr	r2, [pc, #396]	; (800775c <HAL_SPI_Init+0x200>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d009      	beq.n	80075e8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a61      	ldr	r2, [pc, #388]	; (8007760 <HAL_SPI_Init+0x204>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d004      	beq.n	80075e8 <HAL_SPI_Init+0x8c>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a60      	ldr	r2, [pc, #384]	; (8007764 <HAL_SPI_Init+0x208>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d104      	bne.n	80075f2 <HAL_SPI_Init+0x96>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b10      	cmp	r3, #16
 80075ec:	d901      	bls.n	80075f2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e0af      	b.n	8007752 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7f9 fd62 	bl	80010d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0201 	bic.w	r2, r2, #1
 8007622:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800762e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007638:	d119      	bne.n	800766e <HAL_SPI_Init+0x112>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007642:	d103      	bne.n	800764c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007648:	2b00      	cmp	r3, #0
 800764a:	d008      	beq.n	800765e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10c      	bne.n	800766e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800765c:	d107      	bne.n	800766e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800766c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69da      	ldr	r2, [r3, #28]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	431a      	orrs	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007680:	ea42 0103 	orr.w	r1, r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	431a      	orrs	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	431a      	orrs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ce:	ea42 0103 	orr.w	r1, r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d113      	bne.n	800770e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800770c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 0201 	bic.w	r2, r2, #1
 800771c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	40013000 	.word	0x40013000
 8007760:	40003800 	.word	0x40003800
 8007764:	40003c00 	.word	0x40003c00

08007768 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_SPI_Transmit_DMA+0x20>
 8007784:	2302      	movs	r3, #2
 8007786:	e12c      	b.n	80079e2 <HAL_SPI_Transmit_DMA+0x27a>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b01      	cmp	r3, #1
 800779a:	d007      	beq.n	80077ac <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800779c:	2302      	movs	r3, #2
 800779e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
 80077aa:	e11a      	b.n	80079e2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <HAL_SPI_Transmit_DMA+0x50>
 80077b2:	88fb      	ldrh	r3, [r7, #6]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d107      	bne.n	80077c8 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
 80077c6:	e10c      	b.n	80079e2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2203      	movs	r2, #3
 80077cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	88fa      	ldrh	r2, [r7, #6]
 80077e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	88fa      	ldrh	r2, [r7, #6]
 80077ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007818:	d107      	bne.n	800782a <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007828:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	2b0f      	cmp	r3, #15
 8007830:	d905      	bls.n	800783e <HAL_SPI_Transmit_DMA+0xd6>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800783c:	d10f      	bne.n	800785e <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007842:	2b07      	cmp	r3, #7
 8007844:	d913      	bls.n	800786e <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007850:	d00d      	beq.n	800786e <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007856:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800785c:	d007      	beq.n	800786e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	e0b9      	b.n	80079e2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	2b07      	cmp	r3, #7
 8007874:	d820      	bhi.n	80078b8 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007880:	d109      	bne.n	8007896 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007888:	b29b      	uxth	r3, r3
 800788a:	3301      	adds	r3, #1
 800788c:	105b      	asrs	r3, r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078a0:	d11e      	bne.n	80078e0 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3303      	adds	r3, #3
 80078ac:	109b      	asrs	r3, r3, #2
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80078b6:	e013      	b.n	80078e0 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	2b0f      	cmp	r3, #15
 80078be:	d80f      	bhi.n	80078e0 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078ca:	d109      	bne.n	80078e0 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3301      	adds	r3, #1
 80078d6:	105b      	asrs	r3, r3, #1
 80078d8:	b29a      	uxth	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078e4:	4a41      	ldr	r2, [pc, #260]	; (80079ec <HAL_SPI_Transmit_DMA+0x284>)
 80078e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078ec:	4a40      	ldr	r2, [pc, #256]	; (80079f0 <HAL_SPI_Transmit_DMA+0x288>)
 80078ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078f4:	4a3f      	ldr	r2, [pc, #252]	; (80079f4 <HAL_SPI_Transmit_DMA+0x28c>)
 80078f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078fc:	2200      	movs	r2, #0
 80078fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689a      	ldr	r2, [r3, #8]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800790e:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007918:	4619      	mov	r1, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3320      	adds	r3, #32
 8007920:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007928:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800792a:	f7fa fb3f 	bl	8001fac <HAL_DMA_Start_IT>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d013      	beq.n	800795c <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800793a:	f043 0210 	orr.w	r2, r3, #16
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	e042      	b.n	80079e2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007966:	d108      	bne.n	800797a <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6859      	ldr	r1, [r3, #4]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	4b21      	ldr	r3, [pc, #132]	; (80079f8 <HAL_SPI_Transmit_DMA+0x290>)
 8007974:	400b      	ands	r3, r1
 8007976:	6053      	str	r3, [r2, #4]
 8007978:	e009      	b.n	800798e <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	4b1d      	ldr	r3, [pc, #116]	; (80079f8 <HAL_SPI_Transmit_DMA+0x290>)
 8007982:	4013      	ands	r3, r2
 8007984:	88f9      	ldrh	r1, [r7, #6]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	430b      	orrs	r3, r1
 800798c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800799c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691a      	ldr	r2, [r3, #16]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80079ac:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f042 0201 	orr.w	r2, r2, #1
 80079bc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079c6:	d107      	bne.n	80079d8 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079d6:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	08007e3f 	.word	0x08007e3f
 80079f0:	08007df9 	.word	0x08007df9
 80079f4:	08007e5b 	.word	0x08007e5b
 80079f8:	ffff0000 	.word	0xffff0000

080079fc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08a      	sub	sp, #40	; 0x28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007a14:	6a3a      	ldr	r2, [r7, #32]
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a2e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3330      	adds	r3, #48	; 0x30
 8007a36:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d113      	bne.n	8007a6a <HAL_SPI_IRQHandler+0x6e>
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10e      	bne.n	8007a6a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d009      	beq.n	8007a6a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	4798      	blx	r3
    handled = 1UL;
 8007a66:	2301      	movs	r3, #1
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10f      	bne.n	8007a94 <HAL_SPI_IRQHandler+0x98>
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d105      	bne.n	8007a94 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
    handled = 1UL;
 8007a90:	2301      	movs	r3, #1
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10f      	bne.n	8007abe <HAL_SPI_IRQHandler+0xc2>
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d105      	bne.n	8007abe <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
    handled = 1UL;
 8007aba:	2301      	movs	r3, #1
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f040 815a 	bne.w	8007d7a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	f003 0308 	and.w	r3, r3, #8
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 808b 	beq.w	8007be8 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699a      	ldr	r2, [r3, #24]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0208 	orr.w	r2, r2, #8
 8007ae0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	699a      	ldr	r2, [r3, #24]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f042 0210 	orr.w	r2, r2, #16
 8007af0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	699a      	ldr	r2, [r3, #24]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b00:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0208 	bic.w	r2, r2, #8
 8007b10:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d13d      	bne.n	8007b9c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007b20:	e036      	b.n	8007b90 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	2b0f      	cmp	r3, #15
 8007b28:	d90b      	bls.n	8007b42 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007b34:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b3a:	1d1a      	adds	r2, r3, #4
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	665a      	str	r2, [r3, #100]	; 0x64
 8007b40:	e01d      	b.n	8007b7e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	2b07      	cmp	r3, #7
 8007b48:	d90b      	bls.n	8007b62 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	8812      	ldrh	r2, [r2, #0]
 8007b52:	b292      	uxth	r2, r2
 8007b54:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b5a:	1c9a      	adds	r2, r3, #2
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	665a      	str	r2, [r3, #100]	; 0x64
 8007b60:	e00d      	b.n	8007b7e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	b2d2      	uxtb	r2, r2
 8007b72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b78:	1c5a      	adds	r2, r3, #1
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1c2      	bne.n	8007b22 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f999 	bl	8007ed4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f915 	bl	8007de4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007bba:	e0e3      	b.n	8007d84 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007bbc:	7cfb      	ldrb	r3, [r7, #19]
 8007bbe:	2b05      	cmp	r3, #5
 8007bc0:	d103      	bne.n	8007bca <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f8fa 	bl	8007dbc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007bc8:	e0d9      	b.n	8007d7e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007bca:	7cfb      	ldrb	r3, [r7, #19]
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	d103      	bne.n	8007bd8 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f8e9 	bl	8007da8 <HAL_SPI_RxCpltCallback>
    return;
 8007bd6:	e0d2      	b.n	8007d7e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007bd8:	7cfb      	ldrb	r3, [r7, #19]
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	f040 80cf 	bne.w	8007d7e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f8d7 	bl	8007d94 <HAL_SPI_TxCpltCallback>
    return;
 8007be6:	e0ca      	b.n	8007d7e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00d      	beq.n	8007c0e <HAL_SPI_IRQHandler+0x212>
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	f003 0308 	and.w	r3, r3, #8
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d008      	beq.n	8007c0e <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c0a:	619a      	str	r2, [r3, #24]

    return;
 8007c0c:	e0ba      	b.n	8007d84 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80b5 	beq.w	8007d84 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00f      	beq.n	8007c44 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c2a:	f043 0204 	orr.w	r2, r3, #4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699a      	ldr	r2, [r3, #24]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c42:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00f      	beq.n	8007c6e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c54:	f043 0201 	orr.w	r2, r3, #1
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	699a      	ldr	r2, [r3, #24]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c6c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00f      	beq.n	8007c98 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c7e:	f043 0208 	orr.w	r2, r3, #8
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699a      	ldr	r2, [r3, #24]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c96:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00f      	beq.n	8007cc2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ca8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699a      	ldr	r2, [r3, #24]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0220 	orr.w	r2, r2, #32
 8007cc0:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d05a      	beq.n	8007d82 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0201 	bic.w	r2, r2, #1
 8007cda:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6919      	ldr	r1, [r3, #16]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	4b29      	ldr	r3, [pc, #164]	; (8007d8c <HAL_SPI_IRQHandler+0x390>)
 8007ce8:	400b      	ands	r3, r1
 8007cea:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007cf2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007cf6:	d138      	bne.n	8007d6a <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689a      	ldr	r2, [r3, #8]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007d06:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d013      	beq.n	8007d38 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d14:	4a1e      	ldr	r2, [pc, #120]	; (8007d90 <HAL_SPI_IRQHandler+0x394>)
 8007d16:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fa fbaf 	bl	8002480 <HAL_DMA_Abort_IT>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d007      	beq.n	8007d38 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d020      	beq.n	8007d82 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d44:	4a12      	ldr	r2, [pc, #72]	; (8007d90 <HAL_SPI_IRQHandler+0x394>)
 8007d46:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fa fb97 	bl	8002480 <HAL_DMA_Abort_IT>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d014      	beq.n	8007d82 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007d68:	e00b      	b.n	8007d82 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f836 	bl	8007de4 <HAL_SPI_ErrorCallback>
    return;
 8007d78:	e003      	b.n	8007d82 <HAL_SPI_IRQHandler+0x386>
    return;
 8007d7a:	bf00      	nop
 8007d7c:	e002      	b.n	8007d84 <HAL_SPI_IRQHandler+0x388>
    return;
 8007d7e:	bf00      	nop
 8007d80:	e000      	b.n	8007d84 <HAL_SPI_IRQHandler+0x388>
    return;
 8007d82:	bf00      	nop
  }
}
 8007d84:	3728      	adds	r7, #40	; 0x28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	fffffc94 	.word	0xfffffc94
 8007d90:	08007ea1 	.word	0x08007ea1

08007d94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b07      	cmp	r3, #7
 8007e10:	d011      	beq.n	8007e36 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e1c:	d103      	bne.n	8007e26 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff ffb8 	bl	8007d94 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007e24:	e007      	b.n	8007e36 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	691a      	ldr	r2, [r3, #16]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f042 0208 	orr.w	r2, r2, #8
 8007e34:	611a      	str	r2, [r3, #16]
}
 8007e36:	bf00      	nop
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f7ff ffbf 	bl	8007dd0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7fb fc79 	bl	8003760 <HAL_DMA_GetError>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d011      	beq.n	8007e98 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 f82d 	bl	8007ed4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e80:	f043 0210 	orr.w	r2, r3, #16
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff ffa6 	bl	8007de4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7ff ff8c 	bl	8007de4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699a      	ldr	r2, [r3, #24]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0208 	orr.w	r2, r2, #8
 8007ef2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699a      	ldr	r2, [r3, #24]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0210 	orr.w	r2, r2, #16
 8007f02:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0201 	bic.w	r2, r2, #1
 8007f12:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6919      	ldr	r1, [r3, #16]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	4b3c      	ldr	r3, [pc, #240]	; (8008010 <SPI_CloseTransfer+0x13c>)
 8007f20:	400b      	ands	r3, r1
 8007f22:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689a      	ldr	r2, [r3, #8]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f32:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d014      	beq.n	8007f6a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f003 0320 	and.w	r3, r3, #32
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00f      	beq.n	8007f6a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	699a      	ldr	r2, [r3, #24]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f042 0220 	orr.w	r2, r2, #32
 8007f68:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d014      	beq.n	8007fa0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00f      	beq.n	8007fa0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f86:	f043 0204 	orr.w	r2, r3, #4
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699a      	ldr	r2, [r3, #24]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f9e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00f      	beq.n	8007fca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb0:	f043 0201 	orr.w	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fc8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00f      	beq.n	8007ff4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fda:	f043 0208 	orr.w	r2, r3, #8
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ff2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008004:	bf00      	nop
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	fffffc90 	.word	0xfffffc90

08008014 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008020:	095b      	lsrs	r3, r3, #5
 8008022:	3301      	adds	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	3301      	adds	r3, #1
 800802c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	3307      	adds	r3, #7
 8008032:	08db      	lsrs	r3, r3, #3
 8008034:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	fb02 f303 	mul.w	r3, r2, r3
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e042      	b.n	80080e2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008062:	2b00      	cmp	r3, #0
 8008064:	d106      	bne.n	8008074 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7f9 f904 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2224      	movs	r2, #36	; 0x24
 8008078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0201 	bic.w	r2, r2, #1
 800808a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f82d 	bl	80080ec <UART_SetConfig>
 8008092:	4603      	mov	r3, r0
 8008094:	2b01      	cmp	r3, #1
 8008096:	d101      	bne.n	800809c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e022      	b.n	80080e2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fd89 	bl	8008bbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f042 0201 	orr.w	r2, r2, #1
 80080d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fe10 	bl	8008d00 <UART_CheckIdleState>
 80080e0:	4603      	mov	r3, r0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080f0:	b092      	sub	sp, #72	; 0x48
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	689a      	ldr	r2, [r3, #8]
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	431a      	orrs	r2, r3
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	431a      	orrs	r2, r3
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	4313      	orrs	r3, r2
 8008112:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	4bbe      	ldr	r3, [pc, #760]	; (8008414 <UART_SetConfig+0x328>)
 800811c:	4013      	ands	r3, r2
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	6812      	ldr	r2, [r2, #0]
 8008122:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008124:	430b      	orrs	r3, r1
 8008126:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4ab3      	ldr	r2, [pc, #716]	; (8008418 <UART_SetConfig+0x32c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d004      	beq.n	8008158 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008154:	4313      	orrs	r3, r2
 8008156:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689a      	ldr	r2, [r3, #8]
 800815e:	4baf      	ldr	r3, [pc, #700]	; (800841c <UART_SetConfig+0x330>)
 8008160:	4013      	ands	r3, r2
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	6812      	ldr	r2, [r2, #0]
 8008166:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008168:	430b      	orrs	r3, r1
 800816a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	f023 010f 	bic.w	r1, r3, #15
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4aa6      	ldr	r2, [pc, #664]	; (8008420 <UART_SetConfig+0x334>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d177      	bne.n	800827c <UART_SetConfig+0x190>
 800818c:	4ba5      	ldr	r3, [pc, #660]	; (8008424 <UART_SetConfig+0x338>)
 800818e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008194:	2b28      	cmp	r3, #40	; 0x28
 8008196:	d86d      	bhi.n	8008274 <UART_SetConfig+0x188>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <UART_SetConfig+0xb4>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	08008245 	.word	0x08008245
 80081a4:	08008275 	.word	0x08008275
 80081a8:	08008275 	.word	0x08008275
 80081ac:	08008275 	.word	0x08008275
 80081b0:	08008275 	.word	0x08008275
 80081b4:	08008275 	.word	0x08008275
 80081b8:	08008275 	.word	0x08008275
 80081bc:	08008275 	.word	0x08008275
 80081c0:	0800824d 	.word	0x0800824d
 80081c4:	08008275 	.word	0x08008275
 80081c8:	08008275 	.word	0x08008275
 80081cc:	08008275 	.word	0x08008275
 80081d0:	08008275 	.word	0x08008275
 80081d4:	08008275 	.word	0x08008275
 80081d8:	08008275 	.word	0x08008275
 80081dc:	08008275 	.word	0x08008275
 80081e0:	08008255 	.word	0x08008255
 80081e4:	08008275 	.word	0x08008275
 80081e8:	08008275 	.word	0x08008275
 80081ec:	08008275 	.word	0x08008275
 80081f0:	08008275 	.word	0x08008275
 80081f4:	08008275 	.word	0x08008275
 80081f8:	08008275 	.word	0x08008275
 80081fc:	08008275 	.word	0x08008275
 8008200:	0800825d 	.word	0x0800825d
 8008204:	08008275 	.word	0x08008275
 8008208:	08008275 	.word	0x08008275
 800820c:	08008275 	.word	0x08008275
 8008210:	08008275 	.word	0x08008275
 8008214:	08008275 	.word	0x08008275
 8008218:	08008275 	.word	0x08008275
 800821c:	08008275 	.word	0x08008275
 8008220:	08008265 	.word	0x08008265
 8008224:	08008275 	.word	0x08008275
 8008228:	08008275 	.word	0x08008275
 800822c:	08008275 	.word	0x08008275
 8008230:	08008275 	.word	0x08008275
 8008234:	08008275 	.word	0x08008275
 8008238:	08008275 	.word	0x08008275
 800823c:	08008275 	.word	0x08008275
 8008240:	0800826d 	.word	0x0800826d
 8008244:	2301      	movs	r3, #1
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824a:	e222      	b.n	8008692 <UART_SetConfig+0x5a6>
 800824c:	2304      	movs	r3, #4
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008252:	e21e      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008254:	2308      	movs	r3, #8
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825a:	e21a      	b.n	8008692 <UART_SetConfig+0x5a6>
 800825c:	2310      	movs	r3, #16
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008262:	e216      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008264:	2320      	movs	r3, #32
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826a:	e212      	b.n	8008692 <UART_SetConfig+0x5a6>
 800826c:	2340      	movs	r3, #64	; 0x40
 800826e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008272:	e20e      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008274:	2380      	movs	r3, #128	; 0x80
 8008276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827a:	e20a      	b.n	8008692 <UART_SetConfig+0x5a6>
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a69      	ldr	r2, [pc, #420]	; (8008428 <UART_SetConfig+0x33c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d130      	bne.n	80082e8 <UART_SetConfig+0x1fc>
 8008286:	4b67      	ldr	r3, [pc, #412]	; (8008424 <UART_SetConfig+0x338>)
 8008288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	2b05      	cmp	r3, #5
 8008290:	d826      	bhi.n	80082e0 <UART_SetConfig+0x1f4>
 8008292:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <UART_SetConfig+0x1ac>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082b1 	.word	0x080082b1
 800829c:	080082b9 	.word	0x080082b9
 80082a0:	080082c1 	.word	0x080082c1
 80082a4:	080082c9 	.word	0x080082c9
 80082a8:	080082d1 	.word	0x080082d1
 80082ac:	080082d9 	.word	0x080082d9
 80082b0:	2300      	movs	r3, #0
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b6:	e1ec      	b.n	8008692 <UART_SetConfig+0x5a6>
 80082b8:	2304      	movs	r3, #4
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082be:	e1e8      	b.n	8008692 <UART_SetConfig+0x5a6>
 80082c0:	2308      	movs	r3, #8
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c6:	e1e4      	b.n	8008692 <UART_SetConfig+0x5a6>
 80082c8:	2310      	movs	r3, #16
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ce:	e1e0      	b.n	8008692 <UART_SetConfig+0x5a6>
 80082d0:	2320      	movs	r3, #32
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d6:	e1dc      	b.n	8008692 <UART_SetConfig+0x5a6>
 80082d8:	2340      	movs	r3, #64	; 0x40
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082de:	e1d8      	b.n	8008692 <UART_SetConfig+0x5a6>
 80082e0:	2380      	movs	r3, #128	; 0x80
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e6:	e1d4      	b.n	8008692 <UART_SetConfig+0x5a6>
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a4f      	ldr	r2, [pc, #316]	; (800842c <UART_SetConfig+0x340>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d130      	bne.n	8008354 <UART_SetConfig+0x268>
 80082f2:	4b4c      	ldr	r3, [pc, #304]	; (8008424 <UART_SetConfig+0x338>)
 80082f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	d826      	bhi.n	800834c <UART_SetConfig+0x260>
 80082fe:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <UART_SetConfig+0x218>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	0800831d 	.word	0x0800831d
 8008308:	08008325 	.word	0x08008325
 800830c:	0800832d 	.word	0x0800832d
 8008310:	08008335 	.word	0x08008335
 8008314:	0800833d 	.word	0x0800833d
 8008318:	08008345 	.word	0x08008345
 800831c:	2300      	movs	r3, #0
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008322:	e1b6      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008324:	2304      	movs	r3, #4
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832a:	e1b2      	b.n	8008692 <UART_SetConfig+0x5a6>
 800832c:	2308      	movs	r3, #8
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008332:	e1ae      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008334:	2310      	movs	r3, #16
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833a:	e1aa      	b.n	8008692 <UART_SetConfig+0x5a6>
 800833c:	2320      	movs	r3, #32
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008342:	e1a6      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008344:	2340      	movs	r3, #64	; 0x40
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834a:	e1a2      	b.n	8008692 <UART_SetConfig+0x5a6>
 800834c:	2380      	movs	r3, #128	; 0x80
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008352:	e19e      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a35      	ldr	r2, [pc, #212]	; (8008430 <UART_SetConfig+0x344>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d130      	bne.n	80083c0 <UART_SetConfig+0x2d4>
 800835e:	4b31      	ldr	r3, [pc, #196]	; (8008424 <UART_SetConfig+0x338>)
 8008360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008362:	f003 0307 	and.w	r3, r3, #7
 8008366:	2b05      	cmp	r3, #5
 8008368:	d826      	bhi.n	80083b8 <UART_SetConfig+0x2cc>
 800836a:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <UART_SetConfig+0x284>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	08008389 	.word	0x08008389
 8008374:	08008391 	.word	0x08008391
 8008378:	08008399 	.word	0x08008399
 800837c:	080083a1 	.word	0x080083a1
 8008380:	080083a9 	.word	0x080083a9
 8008384:	080083b1 	.word	0x080083b1
 8008388:	2300      	movs	r3, #0
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838e:	e180      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008390:	2304      	movs	r3, #4
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008396:	e17c      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008398:	2308      	movs	r3, #8
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839e:	e178      	b.n	8008692 <UART_SetConfig+0x5a6>
 80083a0:	2310      	movs	r3, #16
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a6:	e174      	b.n	8008692 <UART_SetConfig+0x5a6>
 80083a8:	2320      	movs	r3, #32
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ae:	e170      	b.n	8008692 <UART_SetConfig+0x5a6>
 80083b0:	2340      	movs	r3, #64	; 0x40
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b6:	e16c      	b.n	8008692 <UART_SetConfig+0x5a6>
 80083b8:	2380      	movs	r3, #128	; 0x80
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083be:	e168      	b.n	8008692 <UART_SetConfig+0x5a6>
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a1b      	ldr	r2, [pc, #108]	; (8008434 <UART_SetConfig+0x348>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d142      	bne.n	8008450 <UART_SetConfig+0x364>
 80083ca:	4b16      	ldr	r3, [pc, #88]	; (8008424 <UART_SetConfig+0x338>)
 80083cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ce:	f003 0307 	and.w	r3, r3, #7
 80083d2:	2b05      	cmp	r3, #5
 80083d4:	d838      	bhi.n	8008448 <UART_SetConfig+0x35c>
 80083d6:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <UART_SetConfig+0x2f0>)
 80083d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083dc:	080083f5 	.word	0x080083f5
 80083e0:	080083fd 	.word	0x080083fd
 80083e4:	08008405 	.word	0x08008405
 80083e8:	0800840d 	.word	0x0800840d
 80083ec:	08008439 	.word	0x08008439
 80083f0:	08008441 	.word	0x08008441
 80083f4:	2300      	movs	r3, #0
 80083f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fa:	e14a      	b.n	8008692 <UART_SetConfig+0x5a6>
 80083fc:	2304      	movs	r3, #4
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008402:	e146      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008404:	2308      	movs	r3, #8
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840a:	e142      	b.n	8008692 <UART_SetConfig+0x5a6>
 800840c:	2310      	movs	r3, #16
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008412:	e13e      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008414:	cfff69f3 	.word	0xcfff69f3
 8008418:	58000c00 	.word	0x58000c00
 800841c:	11fff4ff 	.word	0x11fff4ff
 8008420:	40011000 	.word	0x40011000
 8008424:	58024400 	.word	0x58024400
 8008428:	40004400 	.word	0x40004400
 800842c:	40004800 	.word	0x40004800
 8008430:	40004c00 	.word	0x40004c00
 8008434:	40005000 	.word	0x40005000
 8008438:	2320      	movs	r3, #32
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e128      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008440:	2340      	movs	r3, #64	; 0x40
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e124      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008448:	2380      	movs	r3, #128	; 0x80
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844e:	e120      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4acb      	ldr	r2, [pc, #812]	; (8008784 <UART_SetConfig+0x698>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d176      	bne.n	8008548 <UART_SetConfig+0x45c>
 800845a:	4bcb      	ldr	r3, [pc, #812]	; (8008788 <UART_SetConfig+0x69c>)
 800845c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008462:	2b28      	cmp	r3, #40	; 0x28
 8008464:	d86c      	bhi.n	8008540 <UART_SetConfig+0x454>
 8008466:	a201      	add	r2, pc, #4	; (adr r2, 800846c <UART_SetConfig+0x380>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	08008511 	.word	0x08008511
 8008470:	08008541 	.word	0x08008541
 8008474:	08008541 	.word	0x08008541
 8008478:	08008541 	.word	0x08008541
 800847c:	08008541 	.word	0x08008541
 8008480:	08008541 	.word	0x08008541
 8008484:	08008541 	.word	0x08008541
 8008488:	08008541 	.word	0x08008541
 800848c:	08008519 	.word	0x08008519
 8008490:	08008541 	.word	0x08008541
 8008494:	08008541 	.word	0x08008541
 8008498:	08008541 	.word	0x08008541
 800849c:	08008541 	.word	0x08008541
 80084a0:	08008541 	.word	0x08008541
 80084a4:	08008541 	.word	0x08008541
 80084a8:	08008541 	.word	0x08008541
 80084ac:	08008521 	.word	0x08008521
 80084b0:	08008541 	.word	0x08008541
 80084b4:	08008541 	.word	0x08008541
 80084b8:	08008541 	.word	0x08008541
 80084bc:	08008541 	.word	0x08008541
 80084c0:	08008541 	.word	0x08008541
 80084c4:	08008541 	.word	0x08008541
 80084c8:	08008541 	.word	0x08008541
 80084cc:	08008529 	.word	0x08008529
 80084d0:	08008541 	.word	0x08008541
 80084d4:	08008541 	.word	0x08008541
 80084d8:	08008541 	.word	0x08008541
 80084dc:	08008541 	.word	0x08008541
 80084e0:	08008541 	.word	0x08008541
 80084e4:	08008541 	.word	0x08008541
 80084e8:	08008541 	.word	0x08008541
 80084ec:	08008531 	.word	0x08008531
 80084f0:	08008541 	.word	0x08008541
 80084f4:	08008541 	.word	0x08008541
 80084f8:	08008541 	.word	0x08008541
 80084fc:	08008541 	.word	0x08008541
 8008500:	08008541 	.word	0x08008541
 8008504:	08008541 	.word	0x08008541
 8008508:	08008541 	.word	0x08008541
 800850c:	08008539 	.word	0x08008539
 8008510:	2301      	movs	r3, #1
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008516:	e0bc      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008518:	2304      	movs	r3, #4
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851e:	e0b8      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008520:	2308      	movs	r3, #8
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008526:	e0b4      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008528:	2310      	movs	r3, #16
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852e:	e0b0      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008530:	2320      	movs	r3, #32
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008536:	e0ac      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008538:	2340      	movs	r3, #64	; 0x40
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853e:	e0a8      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008540:	2380      	movs	r3, #128	; 0x80
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008546:	e0a4      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a8f      	ldr	r2, [pc, #572]	; (800878c <UART_SetConfig+0x6a0>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d130      	bne.n	80085b4 <UART_SetConfig+0x4c8>
 8008552:	4b8d      	ldr	r3, [pc, #564]	; (8008788 <UART_SetConfig+0x69c>)
 8008554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	2b05      	cmp	r3, #5
 800855c:	d826      	bhi.n	80085ac <UART_SetConfig+0x4c0>
 800855e:	a201      	add	r2, pc, #4	; (adr r2, 8008564 <UART_SetConfig+0x478>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	0800857d 	.word	0x0800857d
 8008568:	08008585 	.word	0x08008585
 800856c:	0800858d 	.word	0x0800858d
 8008570:	08008595 	.word	0x08008595
 8008574:	0800859d 	.word	0x0800859d
 8008578:	080085a5 	.word	0x080085a5
 800857c:	2300      	movs	r3, #0
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008582:	e086      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008584:	2304      	movs	r3, #4
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858a:	e082      	b.n	8008692 <UART_SetConfig+0x5a6>
 800858c:	2308      	movs	r3, #8
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008592:	e07e      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008594:	2310      	movs	r3, #16
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859a:	e07a      	b.n	8008692 <UART_SetConfig+0x5a6>
 800859c:	2320      	movs	r3, #32
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a2:	e076      	b.n	8008692 <UART_SetConfig+0x5a6>
 80085a4:	2340      	movs	r3, #64	; 0x40
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085aa:	e072      	b.n	8008692 <UART_SetConfig+0x5a6>
 80085ac:	2380      	movs	r3, #128	; 0x80
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b2:	e06e      	b.n	8008692 <UART_SetConfig+0x5a6>
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a75      	ldr	r2, [pc, #468]	; (8008790 <UART_SetConfig+0x6a4>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d130      	bne.n	8008620 <UART_SetConfig+0x534>
 80085be:	4b72      	ldr	r3, [pc, #456]	; (8008788 <UART_SetConfig+0x69c>)
 80085c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	d826      	bhi.n	8008618 <UART_SetConfig+0x52c>
 80085ca:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <UART_SetConfig+0x4e4>)
 80085cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d0:	080085e9 	.word	0x080085e9
 80085d4:	080085f1 	.word	0x080085f1
 80085d8:	080085f9 	.word	0x080085f9
 80085dc:	08008601 	.word	0x08008601
 80085e0:	08008609 	.word	0x08008609
 80085e4:	08008611 	.word	0x08008611
 80085e8:	2300      	movs	r3, #0
 80085ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ee:	e050      	b.n	8008692 <UART_SetConfig+0x5a6>
 80085f0:	2304      	movs	r3, #4
 80085f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085f6:	e04c      	b.n	8008692 <UART_SetConfig+0x5a6>
 80085f8:	2308      	movs	r3, #8
 80085fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085fe:	e048      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008600:	2310      	movs	r3, #16
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008606:	e044      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008608:	2320      	movs	r3, #32
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860e:	e040      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008610:	2340      	movs	r3, #64	; 0x40
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008616:	e03c      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008618:	2380      	movs	r3, #128	; 0x80
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861e:	e038      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a5b      	ldr	r2, [pc, #364]	; (8008794 <UART_SetConfig+0x6a8>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d130      	bne.n	800868c <UART_SetConfig+0x5a0>
 800862a:	4b57      	ldr	r3, [pc, #348]	; (8008788 <UART_SetConfig+0x69c>)
 800862c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800862e:	f003 0307 	and.w	r3, r3, #7
 8008632:	2b05      	cmp	r3, #5
 8008634:	d826      	bhi.n	8008684 <UART_SetConfig+0x598>
 8008636:	a201      	add	r2, pc, #4	; (adr r2, 800863c <UART_SetConfig+0x550>)
 8008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863c:	08008655 	.word	0x08008655
 8008640:	0800865d 	.word	0x0800865d
 8008644:	08008665 	.word	0x08008665
 8008648:	0800866d 	.word	0x0800866d
 800864c:	08008675 	.word	0x08008675
 8008650:	0800867d 	.word	0x0800867d
 8008654:	2302      	movs	r3, #2
 8008656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865a:	e01a      	b.n	8008692 <UART_SetConfig+0x5a6>
 800865c:	2304      	movs	r3, #4
 800865e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008662:	e016      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008664:	2308      	movs	r3, #8
 8008666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800866a:	e012      	b.n	8008692 <UART_SetConfig+0x5a6>
 800866c:	2310      	movs	r3, #16
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008672:	e00e      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008674:	2320      	movs	r3, #32
 8008676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867a:	e00a      	b.n	8008692 <UART_SetConfig+0x5a6>
 800867c:	2340      	movs	r3, #64	; 0x40
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008682:	e006      	b.n	8008692 <UART_SetConfig+0x5a6>
 8008684:	2380      	movs	r3, #128	; 0x80
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868a:	e002      	b.n	8008692 <UART_SetConfig+0x5a6>
 800868c:	2380      	movs	r3, #128	; 0x80
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a3f      	ldr	r2, [pc, #252]	; (8008794 <UART_SetConfig+0x6a8>)
 8008698:	4293      	cmp	r3, r2
 800869a:	f040 80f8 	bne.w	800888e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800869e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	dc46      	bgt.n	8008734 <UART_SetConfig+0x648>
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	f2c0 8082 	blt.w	80087b0 <UART_SetConfig+0x6c4>
 80086ac:	3b02      	subs	r3, #2
 80086ae:	2b1e      	cmp	r3, #30
 80086b0:	d87e      	bhi.n	80087b0 <UART_SetConfig+0x6c4>
 80086b2:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <UART_SetConfig+0x5cc>)
 80086b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b8:	0800873b 	.word	0x0800873b
 80086bc:	080087b1 	.word	0x080087b1
 80086c0:	08008743 	.word	0x08008743
 80086c4:	080087b1 	.word	0x080087b1
 80086c8:	080087b1 	.word	0x080087b1
 80086cc:	080087b1 	.word	0x080087b1
 80086d0:	08008753 	.word	0x08008753
 80086d4:	080087b1 	.word	0x080087b1
 80086d8:	080087b1 	.word	0x080087b1
 80086dc:	080087b1 	.word	0x080087b1
 80086e0:	080087b1 	.word	0x080087b1
 80086e4:	080087b1 	.word	0x080087b1
 80086e8:	080087b1 	.word	0x080087b1
 80086ec:	080087b1 	.word	0x080087b1
 80086f0:	08008763 	.word	0x08008763
 80086f4:	080087b1 	.word	0x080087b1
 80086f8:	080087b1 	.word	0x080087b1
 80086fc:	080087b1 	.word	0x080087b1
 8008700:	080087b1 	.word	0x080087b1
 8008704:	080087b1 	.word	0x080087b1
 8008708:	080087b1 	.word	0x080087b1
 800870c:	080087b1 	.word	0x080087b1
 8008710:	080087b1 	.word	0x080087b1
 8008714:	080087b1 	.word	0x080087b1
 8008718:	080087b1 	.word	0x080087b1
 800871c:	080087b1 	.word	0x080087b1
 8008720:	080087b1 	.word	0x080087b1
 8008724:	080087b1 	.word	0x080087b1
 8008728:	080087b1 	.word	0x080087b1
 800872c:	080087b1 	.word	0x080087b1
 8008730:	080087a3 	.word	0x080087a3
 8008734:	2b40      	cmp	r3, #64	; 0x40
 8008736:	d037      	beq.n	80087a8 <UART_SetConfig+0x6bc>
 8008738:	e03a      	b.n	80087b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800873a:	f7fe faed 	bl	8006d18 <HAL_RCCEx_GetD3PCLK1Freq>
 800873e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008740:	e03c      	b.n	80087bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fafc 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008750:	e034      	b.n	80087bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008752:	f107 0318 	add.w	r3, r7, #24
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe fc48 	bl	8006fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008760:	e02c      	b.n	80087bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008762:	4b09      	ldr	r3, [pc, #36]	; (8008788 <UART_SetConfig+0x69c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0320 	and.w	r3, r3, #32
 800876a:	2b00      	cmp	r3, #0
 800876c:	d016      	beq.n	800879c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800876e:	4b06      	ldr	r3, [pc, #24]	; (8008788 <UART_SetConfig+0x69c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	08db      	lsrs	r3, r3, #3
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	4a07      	ldr	r2, [pc, #28]	; (8008798 <UART_SetConfig+0x6ac>)
 800877a:	fa22 f303 	lsr.w	r3, r2, r3
 800877e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008780:	e01c      	b.n	80087bc <UART_SetConfig+0x6d0>
 8008782:	bf00      	nop
 8008784:	40011400 	.word	0x40011400
 8008788:	58024400 	.word	0x58024400
 800878c:	40007800 	.word	0x40007800
 8008790:	40007c00 	.word	0x40007c00
 8008794:	58000c00 	.word	0x58000c00
 8008798:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800879c:	4b9d      	ldr	r3, [pc, #628]	; (8008a14 <UART_SetConfig+0x928>)
 800879e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087a0:	e00c      	b.n	80087bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087a2:	4b9d      	ldr	r3, [pc, #628]	; (8008a18 <UART_SetConfig+0x92c>)
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087a6:	e009      	b.n	80087bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ae:	e005      	b.n	80087bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80087ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 81de 	beq.w	8008b80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	4a94      	ldr	r2, [pc, #592]	; (8008a1c <UART_SetConfig+0x930>)
 80087ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ce:	461a      	mov	r2, r3
 80087d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	4613      	mov	r3, r2
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	4413      	add	r3, r2
 80087e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d305      	bcc.n	80087f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d903      	bls.n	80087fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80087fa:	e1c1      	b.n	8008b80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fe:	2200      	movs	r2, #0
 8008800:	60bb      	str	r3, [r7, #8]
 8008802:	60fa      	str	r2, [r7, #12]
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	4a84      	ldr	r2, [pc, #528]	; (8008a1c <UART_SetConfig+0x930>)
 800880a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800880e:	b29b      	uxth	r3, r3
 8008810:	2200      	movs	r2, #0
 8008812:	603b      	str	r3, [r7, #0]
 8008814:	607a      	str	r2, [r7, #4]
 8008816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800881a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800881e:	f7f7 fd5b 	bl	80002d8 <__aeabi_uldivmod>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4610      	mov	r0, r2
 8008828:	4619      	mov	r1, r3
 800882a:	f04f 0200 	mov.w	r2, #0
 800882e:	f04f 0300 	mov.w	r3, #0
 8008832:	020b      	lsls	r3, r1, #8
 8008834:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008838:	0202      	lsls	r2, r0, #8
 800883a:	6979      	ldr	r1, [r7, #20]
 800883c:	6849      	ldr	r1, [r1, #4]
 800883e:	0849      	lsrs	r1, r1, #1
 8008840:	2000      	movs	r0, #0
 8008842:	460c      	mov	r4, r1
 8008844:	4605      	mov	r5, r0
 8008846:	eb12 0804 	adds.w	r8, r2, r4
 800884a:	eb43 0905 	adc.w	r9, r3, r5
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	469a      	mov	sl, r3
 8008856:	4693      	mov	fp, r2
 8008858:	4652      	mov	r2, sl
 800885a:	465b      	mov	r3, fp
 800885c:	4640      	mov	r0, r8
 800885e:	4649      	mov	r1, r9
 8008860:	f7f7 fd3a 	bl	80002d8 <__aeabi_uldivmod>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4613      	mov	r3, r2
 800886a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008872:	d308      	bcc.n	8008886 <UART_SetConfig+0x79a>
 8008874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800887a:	d204      	bcs.n	8008886 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008882:	60da      	str	r2, [r3, #12]
 8008884:	e17c      	b.n	8008b80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800888c:	e178      	b.n	8008b80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008896:	f040 80c5 	bne.w	8008a24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800889a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800889e:	2b20      	cmp	r3, #32
 80088a0:	dc48      	bgt.n	8008934 <UART_SetConfig+0x848>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	db7b      	blt.n	800899e <UART_SetConfig+0x8b2>
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	d879      	bhi.n	800899e <UART_SetConfig+0x8b2>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <UART_SetConfig+0x7c4>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	0800893b 	.word	0x0800893b
 80088b4:	08008943 	.word	0x08008943
 80088b8:	0800899f 	.word	0x0800899f
 80088bc:	0800899f 	.word	0x0800899f
 80088c0:	0800894b 	.word	0x0800894b
 80088c4:	0800899f 	.word	0x0800899f
 80088c8:	0800899f 	.word	0x0800899f
 80088cc:	0800899f 	.word	0x0800899f
 80088d0:	0800895b 	.word	0x0800895b
 80088d4:	0800899f 	.word	0x0800899f
 80088d8:	0800899f 	.word	0x0800899f
 80088dc:	0800899f 	.word	0x0800899f
 80088e0:	0800899f 	.word	0x0800899f
 80088e4:	0800899f 	.word	0x0800899f
 80088e8:	0800899f 	.word	0x0800899f
 80088ec:	0800899f 	.word	0x0800899f
 80088f0:	0800896b 	.word	0x0800896b
 80088f4:	0800899f 	.word	0x0800899f
 80088f8:	0800899f 	.word	0x0800899f
 80088fc:	0800899f 	.word	0x0800899f
 8008900:	0800899f 	.word	0x0800899f
 8008904:	0800899f 	.word	0x0800899f
 8008908:	0800899f 	.word	0x0800899f
 800890c:	0800899f 	.word	0x0800899f
 8008910:	0800899f 	.word	0x0800899f
 8008914:	0800899f 	.word	0x0800899f
 8008918:	0800899f 	.word	0x0800899f
 800891c:	0800899f 	.word	0x0800899f
 8008920:	0800899f 	.word	0x0800899f
 8008924:	0800899f 	.word	0x0800899f
 8008928:	0800899f 	.word	0x0800899f
 800892c:	0800899f 	.word	0x0800899f
 8008930:	08008991 	.word	0x08008991
 8008934:	2b40      	cmp	r3, #64	; 0x40
 8008936:	d02e      	beq.n	8008996 <UART_SetConfig+0x8aa>
 8008938:	e031      	b.n	800899e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800893a:	f7fd fa7b 	bl	8005e34 <HAL_RCC_GetPCLK1Freq>
 800893e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008940:	e033      	b.n	80089aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008942:	f7fd fa8d 	bl	8005e60 <HAL_RCC_GetPCLK2Freq>
 8008946:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008948:	e02f      	b.n	80089aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800894a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe f9f8 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008958:	e027      	b.n	80089aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800895a:	f107 0318 	add.w	r3, r7, #24
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe fb44 	bl	8006fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008968:	e01f      	b.n	80089aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800896a:	4b2d      	ldr	r3, [pc, #180]	; (8008a20 <UART_SetConfig+0x934>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b00      	cmp	r3, #0
 8008974:	d009      	beq.n	800898a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008976:	4b2a      	ldr	r3, [pc, #168]	; (8008a20 <UART_SetConfig+0x934>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	08db      	lsrs	r3, r3, #3
 800897c:	f003 0303 	and.w	r3, r3, #3
 8008980:	4a24      	ldr	r2, [pc, #144]	; (8008a14 <UART_SetConfig+0x928>)
 8008982:	fa22 f303 	lsr.w	r3, r2, r3
 8008986:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008988:	e00f      	b.n	80089aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800898a:	4b22      	ldr	r3, [pc, #136]	; (8008a14 <UART_SetConfig+0x928>)
 800898c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800898e:	e00c      	b.n	80089aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008990:	4b21      	ldr	r3, [pc, #132]	; (8008a18 <UART_SetConfig+0x92c>)
 8008992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008994:	e009      	b.n	80089aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800899a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800899c:	e005      	b.n	80089aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80089a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 80e7 	beq.w	8008b80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	4a19      	ldr	r2, [pc, #100]	; (8008a1c <UART_SetConfig+0x930>)
 80089b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089bc:	461a      	mov	r2, r3
 80089be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089c4:	005a      	lsls	r2, r3, #1
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	085b      	lsrs	r3, r3, #1
 80089cc:	441a      	add	r2, r3
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	2b0f      	cmp	r3, #15
 80089dc:	d916      	bls.n	8008a0c <UART_SetConfig+0x920>
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e4:	d212      	bcs.n	8008a0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	f023 030f 	bic.w	r3, r3, #15
 80089ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f2:	085b      	lsrs	r3, r3, #1
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80089fe:	4313      	orrs	r3, r2
 8008a00:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008a08:	60da      	str	r2, [r3, #12]
 8008a0a:	e0b9      	b.n	8008b80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a12:	e0b5      	b.n	8008b80 <UART_SetConfig+0xa94>
 8008a14:	03d09000 	.word	0x03d09000
 8008a18:	003d0900 	.word	0x003d0900
 8008a1c:	08009ae4 	.word	0x08009ae4
 8008a20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a28:	2b20      	cmp	r3, #32
 8008a2a:	dc49      	bgt.n	8008ac0 <UART_SetConfig+0x9d4>
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	db7c      	blt.n	8008b2a <UART_SetConfig+0xa3e>
 8008a30:	2b20      	cmp	r3, #32
 8008a32:	d87a      	bhi.n	8008b2a <UART_SetConfig+0xa3e>
 8008a34:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <UART_SetConfig+0x950>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008ac7 	.word	0x08008ac7
 8008a40:	08008acf 	.word	0x08008acf
 8008a44:	08008b2b 	.word	0x08008b2b
 8008a48:	08008b2b 	.word	0x08008b2b
 8008a4c:	08008ad7 	.word	0x08008ad7
 8008a50:	08008b2b 	.word	0x08008b2b
 8008a54:	08008b2b 	.word	0x08008b2b
 8008a58:	08008b2b 	.word	0x08008b2b
 8008a5c:	08008ae7 	.word	0x08008ae7
 8008a60:	08008b2b 	.word	0x08008b2b
 8008a64:	08008b2b 	.word	0x08008b2b
 8008a68:	08008b2b 	.word	0x08008b2b
 8008a6c:	08008b2b 	.word	0x08008b2b
 8008a70:	08008b2b 	.word	0x08008b2b
 8008a74:	08008b2b 	.word	0x08008b2b
 8008a78:	08008b2b 	.word	0x08008b2b
 8008a7c:	08008af7 	.word	0x08008af7
 8008a80:	08008b2b 	.word	0x08008b2b
 8008a84:	08008b2b 	.word	0x08008b2b
 8008a88:	08008b2b 	.word	0x08008b2b
 8008a8c:	08008b2b 	.word	0x08008b2b
 8008a90:	08008b2b 	.word	0x08008b2b
 8008a94:	08008b2b 	.word	0x08008b2b
 8008a98:	08008b2b 	.word	0x08008b2b
 8008a9c:	08008b2b 	.word	0x08008b2b
 8008aa0:	08008b2b 	.word	0x08008b2b
 8008aa4:	08008b2b 	.word	0x08008b2b
 8008aa8:	08008b2b 	.word	0x08008b2b
 8008aac:	08008b2b 	.word	0x08008b2b
 8008ab0:	08008b2b 	.word	0x08008b2b
 8008ab4:	08008b2b 	.word	0x08008b2b
 8008ab8:	08008b2b 	.word	0x08008b2b
 8008abc:	08008b1d 	.word	0x08008b1d
 8008ac0:	2b40      	cmp	r3, #64	; 0x40
 8008ac2:	d02e      	beq.n	8008b22 <UART_SetConfig+0xa36>
 8008ac4:	e031      	b.n	8008b2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ac6:	f7fd f9b5 	bl	8005e34 <HAL_RCC_GetPCLK1Freq>
 8008aca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008acc:	e033      	b.n	8008b36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ace:	f7fd f9c7 	bl	8005e60 <HAL_RCC_GetPCLK2Freq>
 8008ad2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ad4:	e02f      	b.n	8008b36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe f932 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae4:	e027      	b.n	8008b36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ae6:	f107 0318 	add.w	r3, r7, #24
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fa7e 	bl	8006fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008af4:	e01f      	b.n	8008b36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008af6:	4b2d      	ldr	r3, [pc, #180]	; (8008bac <UART_SetConfig+0xac0>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0320 	and.w	r3, r3, #32
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d009      	beq.n	8008b16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b02:	4b2a      	ldr	r3, [pc, #168]	; (8008bac <UART_SetConfig+0xac0>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	08db      	lsrs	r3, r3, #3
 8008b08:	f003 0303 	and.w	r3, r3, #3
 8008b0c:	4a28      	ldr	r2, [pc, #160]	; (8008bb0 <UART_SetConfig+0xac4>)
 8008b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b14:	e00f      	b.n	8008b36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008b16:	4b26      	ldr	r3, [pc, #152]	; (8008bb0 <UART_SetConfig+0xac4>)
 8008b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b1a:	e00c      	b.n	8008b36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b1c:	4b25      	ldr	r3, [pc, #148]	; (8008bb4 <UART_SetConfig+0xac8>)
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b20:	e009      	b.n	8008b36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b28:	e005      	b.n	8008b36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008b34:	bf00      	nop
    }

    if (pclk != 0U)
 8008b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d021      	beq.n	8008b80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	4a1d      	ldr	r2, [pc, #116]	; (8008bb8 <UART_SetConfig+0xacc>)
 8008b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b46:	461a      	mov	r2, r3
 8008b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	085b      	lsrs	r3, r3, #1
 8008b54:	441a      	add	r2, r3
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	2b0f      	cmp	r3, #15
 8008b64:	d909      	bls.n	8008b7a <UART_SetConfig+0xa8e>
 8008b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b6c:	d205      	bcs.n	8008b7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	60da      	str	r2, [r3, #12]
 8008b78:	e002      	b.n	8008b80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	2200      	movs	r2, #0
 8008b94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008b9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3748      	adds	r7, #72	; 0x48
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008baa:	bf00      	nop
 8008bac:	58024400 	.word	0x58024400
 8008bb0:	03d09000 	.word	0x03d09000
 8008bb4:	003d0900 	.word	0x003d0900
 8008bb8:	08009ae4 	.word	0x08009ae4

08008bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00a      	beq.n	8008be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00a      	beq.n	8008c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	430a      	orrs	r2, r1
 8008c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00a      	beq.n	8008c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	430a      	orrs	r2, r1
 8008c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2e:	f003 0308 	and.w	r3, r3, #8
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00a      	beq.n	8008c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	430a      	orrs	r2, r1
 8008c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00a      	beq.n	8008c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00a      	beq.n	8008c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d01a      	beq.n	8008cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cba:	d10a      	bne.n	8008cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00a      	beq.n	8008cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	605a      	str	r2, [r3, #4]
  }
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af02      	add	r7, sp, #8
 8008d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d10:	f7f8 fc90 	bl	8001634 <HAL_GetTick>
 8008d14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0308 	and.w	r3, r3, #8
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d10e      	bne.n	8008d42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f82f 	bl	8008d96 <UART_WaitOnFlagUntilTimeout>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e025      	b.n	8008d8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d10e      	bne.n	8008d6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f819 	bl	8008d96 <UART_WaitOnFlagUntilTimeout>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e00f      	b.n	8008d8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b09c      	sub	sp, #112	; 0x70
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	603b      	str	r3, [r7, #0]
 8008da2:	4613      	mov	r3, r2
 8008da4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008da6:	e0a9      	b.n	8008efc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dae:	f000 80a5 	beq.w	8008efc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008db2:	f7f8 fc3f 	bl	8001634 <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d302      	bcc.n	8008dc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d140      	bne.n	8008e4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008de8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dee:	e841 2300 	strex	r3, r2, [r1]
 8008df2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e6      	bne.n	8008dc8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3308      	adds	r3, #8
 8008e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0c:	f023 0301 	bic.w	r3, r3, #1
 8008e10:	663b      	str	r3, [r7, #96]	; 0x60
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3308      	adds	r3, #8
 8008e18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e22:	e841 2300 	strex	r3, r2, [r1]
 8008e26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1e5      	bne.n	8008dfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2220      	movs	r2, #32
 8008e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e069      	b.n	8008f1e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0304 	and.w	r3, r3, #4
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d051      	beq.n	8008efc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e66:	d149      	bne.n	8008efc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e90:	637b      	str	r3, [r7, #52]	; 0x34
 8008e92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e6      	bne.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	f023 0301 	bic.w	r3, r3, #1
 8008eba:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ec4:	623a      	str	r2, [r7, #32]
 8008ec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	69f9      	ldr	r1, [r7, #28]
 8008eca:	6a3a      	ldr	r2, [r7, #32]
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e5      	bne.n	8008ea4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2220      	movs	r2, #32
 8008edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2220      	movs	r2, #32
 8008eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e010      	b.n	8008f1e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	69da      	ldr	r2, [r3, #28]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	4013      	ands	r3, r2
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	bf0c      	ite	eq
 8008f0c:	2301      	moveq	r3, #1
 8008f0e:	2300      	movne	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	461a      	mov	r2, r3
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	f43f af46 	beq.w	8008da8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3770      	adds	r7, #112	; 0x70
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b085      	sub	sp, #20
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_UARTEx_DisableFifoMode+0x16>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e027      	b.n	8008f8c <HAL_UARTEx_DisableFifoMode+0x66>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2224      	movs	r2, #36	; 0x24
 8008f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 0201 	bic.w	r2, r2, #1
 8008f62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fac:	2302      	movs	r3, #2
 8008fae:	e02d      	b.n	800900c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2224      	movs	r2, #36	; 0x24
 8008fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0201 	bic.w	r2, r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f84f 	bl	8009090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2220      	movs	r2, #32
 8008ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009024:	2b01      	cmp	r3, #1
 8009026:	d101      	bne.n	800902c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009028:	2302      	movs	r3, #2
 800902a:	e02d      	b.n	8009088 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2224      	movs	r2, #36	; 0x24
 8009038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0201 	bic.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f811 	bl	8009090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2220      	movs	r2, #32
 800907a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800909c:	2b00      	cmp	r3, #0
 800909e:	d108      	bne.n	80090b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090b0:	e031      	b.n	8009116 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090b2:	2310      	movs	r3, #16
 80090b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090b6:	2310      	movs	r3, #16
 80090b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	0e5b      	lsrs	r3, r3, #25
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	f003 0307 	and.w	r3, r3, #7
 80090c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	0f5b      	lsrs	r3, r3, #29
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	f003 0307 	and.w	r3, r3, #7
 80090d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	7b3a      	ldrb	r2, [r7, #12]
 80090de:	4911      	ldr	r1, [pc, #68]	; (8009124 <UARTEx_SetNbDataToProcess+0x94>)
 80090e0:	5c8a      	ldrb	r2, [r1, r2]
 80090e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090e6:	7b3a      	ldrb	r2, [r7, #12]
 80090e8:	490f      	ldr	r1, [pc, #60]	; (8009128 <UARTEx_SetNbDataToProcess+0x98>)
 80090ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	7b7a      	ldrb	r2, [r7, #13]
 80090fc:	4909      	ldr	r1, [pc, #36]	; (8009124 <UARTEx_SetNbDataToProcess+0x94>)
 80090fe:	5c8a      	ldrb	r2, [r1, r2]
 8009100:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009104:	7b7a      	ldrb	r2, [r7, #13]
 8009106:	4908      	ldr	r1, [pc, #32]	; (8009128 <UARTEx_SetNbDataToProcess+0x98>)
 8009108:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800910a:	fb93 f3f2 	sdiv	r3, r3, r2
 800910e:	b29a      	uxth	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009116:	bf00      	nop
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	08009afc 	.word	0x08009afc
 8009128:	08009b04 	.word	0x08009b04

0800912c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800912c:	b084      	sub	sp, #16
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	f107 001c 	add.w	r0, r7, #28
 800913a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	2b01      	cmp	r3, #1
 8009142:	d120      	bne.n	8009186 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009148:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	4b2a      	ldr	r3, [pc, #168]	; (8009200 <USB_CoreInit+0xd4>)
 8009156:	4013      	ands	r3, r2
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800916a:	2b01      	cmp	r3, #1
 800916c:	d105      	bne.n	800917a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 faac 	bl	80096d8 <USB_CoreReset>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
 8009184:	e01a      	b.n	80091bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 faa0 	bl	80096d8 <USB_CoreReset>
 8009198:	4603      	mov	r3, r0
 800919a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800919c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d106      	bne.n	80091b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	639a      	str	r2, [r3, #56]	; 0x38
 80091ae:	e005      	b.n	80091bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d116      	bne.n	80091f0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091d0:	4b0c      	ldr	r3, [pc, #48]	; (8009204 <USB_CoreInit+0xd8>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f043 0206 	orr.w	r2, r3, #6
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f043 0220 	orr.w	r2, r3, #32
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091fc:	b004      	add	sp, #16
 80091fe:	4770      	bx	lr
 8009200:	ffbdffbf 	.word	0xffbdffbf
 8009204:	03ee0000 	.word	0x03ee0000

08009208 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f023 0201 	bic.w	r2, r3, #1
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009246:	78fb      	ldrb	r3, [r7, #3]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d115      	bne.n	8009278 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009258:	2001      	movs	r0, #1
 800925a:	f7f8 f9f7 	bl	800164c <HAL_Delay>
      ms++;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3301      	adds	r3, #1
 8009262:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fa29 	bl	80096bc <USB_GetMode>
 800926a:	4603      	mov	r3, r0
 800926c:	2b01      	cmp	r3, #1
 800926e:	d01e      	beq.n	80092ae <USB_SetCurrentMode+0x84>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b31      	cmp	r3, #49	; 0x31
 8009274:	d9f0      	bls.n	8009258 <USB_SetCurrentMode+0x2e>
 8009276:	e01a      	b.n	80092ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009278:	78fb      	ldrb	r3, [r7, #3]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d115      	bne.n	80092aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800928a:	2001      	movs	r0, #1
 800928c:	f7f8 f9de 	bl	800164c <HAL_Delay>
      ms++;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3301      	adds	r3, #1
 8009294:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fa10 	bl	80096bc <USB_GetMode>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d005      	beq.n	80092ae <USB_SetCurrentMode+0x84>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b31      	cmp	r3, #49	; 0x31
 80092a6:	d9f0      	bls.n	800928a <USB_SetCurrentMode+0x60>
 80092a8:	e001      	b.n	80092ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e005      	b.n	80092ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b32      	cmp	r3, #50	; 0x32
 80092b2:	d101      	bne.n	80092b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e000      	b.n	80092ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092c4:	b084      	sub	sp, #16
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b086      	sub	sp, #24
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80092d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80092de:	2300      	movs	r3, #0
 80092e0:	613b      	str	r3, [r7, #16]
 80092e2:	e009      	b.n	80092f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	3340      	adds	r3, #64	; 0x40
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	2200      	movs	r2, #0
 80092f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	3301      	adds	r3, #1
 80092f6:	613b      	str	r3, [r7, #16]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	2b0e      	cmp	r3, #14
 80092fc:	d9f2      	bls.n	80092e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009300:	2b00      	cmp	r3, #0
 8009302:	d11c      	bne.n	800933e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009312:	f043 0302 	orr.w	r3, r3, #2
 8009316:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	e005      	b.n	800934a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009342:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009350:	461a      	mov	r2, r3
 8009352:	2300      	movs	r3, #0
 8009354:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935c:	4619      	mov	r1, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009364:	461a      	mov	r2, r3
 8009366:	680b      	ldr	r3, [r1, #0]
 8009368:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	2b01      	cmp	r3, #1
 800936e:	d10c      	bne.n	800938a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009372:	2b00      	cmp	r3, #0
 8009374:	d104      	bne.n	8009380 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009376:	2100      	movs	r1, #0
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f965 	bl	8009648 <USB_SetDevSpeed>
 800937e:	e008      	b.n	8009392 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009380:	2101      	movs	r1, #1
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f960 	bl	8009648 <USB_SetDevSpeed>
 8009388:	e003      	b.n	8009392 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800938a:	2103      	movs	r1, #3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f95b 	bl	8009648 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009392:	2110      	movs	r1, #16
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f8f3 	bl	8009580 <USB_FlushTxFifo>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f91f 	bl	80095e8 <USB_FlushRxFifo>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ba:	461a      	mov	r2, r3
 80093bc:	2300      	movs	r3, #0
 80093be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c6:	461a      	mov	r2, r3
 80093c8:	2300      	movs	r3, #0
 80093ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d2:	461a      	mov	r2, r3
 80093d4:	2300      	movs	r3, #0
 80093d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093d8:	2300      	movs	r3, #0
 80093da:	613b      	str	r3, [r7, #16]
 80093dc:	e043      	b.n	8009466 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093f4:	d118      	bne.n	8009428 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10a      	bne.n	8009412 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009408:	461a      	mov	r2, r3
 800940a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	e013      	b.n	800943a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941e:	461a      	mov	r2, r3
 8009420:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	e008      	b.n	800943a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	4413      	add	r3, r2
 8009430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009434:	461a      	mov	r2, r3
 8009436:	2300      	movs	r3, #0
 8009438:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009446:	461a      	mov	r2, r3
 8009448:	2300      	movs	r3, #0
 800944a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4413      	add	r3, r2
 8009454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009458:	461a      	mov	r2, r3
 800945a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800945e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	3301      	adds	r3, #1
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	429a      	cmp	r2, r3
 800946c:	d3b7      	bcc.n	80093de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800946e:	2300      	movs	r3, #0
 8009470:	613b      	str	r3, [r7, #16]
 8009472:	e043      	b.n	80094fc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800948a:	d118      	bne.n	80094be <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10a      	bne.n	80094a8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	015a      	lsls	r2, r3, #5
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	4413      	add	r3, r2
 800949a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949e:	461a      	mov	r2, r3
 80094a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	e013      	b.n	80094d0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b4:	461a      	mov	r2, r3
 80094b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	e008      	b.n	80094d0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	015a      	lsls	r2, r3, #5
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	4413      	add	r3, r2
 80094c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ca:	461a      	mov	r2, r3
 80094cc:	2300      	movs	r3, #0
 80094ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094dc:	461a      	mov	r2, r3
 80094de:	2300      	movs	r3, #0
 80094e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ee:	461a      	mov	r2, r3
 80094f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	3301      	adds	r3, #1
 80094fa:	613b      	str	r3, [r7, #16]
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	429a      	cmp	r2, r3
 8009502:	d3b7      	bcc.n	8009474 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009516:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009524:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009528:	2b00      	cmp	r3, #0
 800952a:	d105      	bne.n	8009538 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	f043 0210 	orr.w	r2, r3, #16
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699a      	ldr	r2, [r3, #24]
 800953c:	4b0e      	ldr	r3, [pc, #56]	; (8009578 <USB_DevInit+0x2b4>)
 800953e:	4313      	orrs	r3, r2
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009546:	2b00      	cmp	r3, #0
 8009548:	d005      	beq.n	8009556 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	f043 0208 	orr.w	r2, r3, #8
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009558:	2b01      	cmp	r3, #1
 800955a:	d105      	bne.n	8009568 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	699a      	ldr	r2, [r3, #24]
 8009560:	4b06      	ldr	r3, [pc, #24]	; (800957c <USB_DevInit+0x2b8>)
 8009562:	4313      	orrs	r3, r2
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009568:	7dfb      	ldrb	r3, [r7, #23]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009574:	b004      	add	sp, #16
 8009576:	4770      	bx	lr
 8009578:	803c3800 	.word	0x803c3800
 800957c:	40000004 	.word	0x40000004

08009580 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800958a:	2300      	movs	r3, #0
 800958c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3301      	adds	r3, #1
 8009592:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	4a13      	ldr	r2, [pc, #76]	; (80095e4 <USB_FlushTxFifo+0x64>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d901      	bls.n	80095a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e01b      	b.n	80095d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	daf2      	bge.n	800958e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	019b      	lsls	r3, r3, #6
 80095b0:	f043 0220 	orr.w	r2, r3, #32
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3301      	adds	r3, #1
 80095bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	4a08      	ldr	r2, [pc, #32]	; (80095e4 <USB_FlushTxFifo+0x64>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d901      	bls.n	80095ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e006      	b.n	80095d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	f003 0320 	and.w	r3, r3, #32
 80095d2:	2b20      	cmp	r3, #32
 80095d4:	d0f0      	beq.n	80095b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	00030d40 	.word	0x00030d40

080095e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	3301      	adds	r3, #1
 80095f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	4a11      	ldr	r2, [pc, #68]	; (8009644 <USB_FlushRxFifo+0x5c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d901      	bls.n	8009606 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e018      	b.n	8009638 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	2b00      	cmp	r3, #0
 800960c:	daf2      	bge.n	80095f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2210      	movs	r2, #16
 8009616:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	3301      	adds	r3, #1
 800961c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4a08      	ldr	r2, [pc, #32]	; (8009644 <USB_FlushRxFifo+0x5c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d901      	bls.n	800962a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e006      	b.n	8009638 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	f003 0310 	and.w	r3, r3, #16
 8009632:	2b10      	cmp	r3, #16
 8009634:	d0f0      	beq.n	8009618 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	00030d40 	.word	0x00030d40

08009648 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	78fb      	ldrb	r3, [r7, #3]
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009668:	4313      	orrs	r3, r2
 800966a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3714      	adds	r7, #20
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800967a:	b480      	push	{r7}
 800967c:	b085      	sub	sp, #20
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009694:	f023 0303 	bic.w	r3, r3, #3
 8009698:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096a8:	f043 0302 	orr.w	r3, r3, #2
 80096ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	f003 0301 	and.w	r3, r3, #1
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	3301      	adds	r3, #1
 80096e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4a13      	ldr	r2, [pc, #76]	; (800973c <USB_CoreReset+0x64>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d901      	bls.n	80096f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e01b      	b.n	800972e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	daf2      	bge.n	80096e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096fe:	2300      	movs	r3, #0
 8009700:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	f043 0201 	orr.w	r2, r3, #1
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	3301      	adds	r3, #1
 8009712:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4a09      	ldr	r2, [pc, #36]	; (800973c <USB_CoreReset+0x64>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d901      	bls.n	8009720 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e006      	b.n	800972e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	2b01      	cmp	r3, #1
 800972a:	d0f0      	beq.n	800970e <USB_CoreReset+0x36>

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	00030d40 	.word	0x00030d40

08009740 <__libc_init_array>:
 8009740:	b570      	push	{r4, r5, r6, lr}
 8009742:	4d0d      	ldr	r5, [pc, #52]	; (8009778 <__libc_init_array+0x38>)
 8009744:	4c0d      	ldr	r4, [pc, #52]	; (800977c <__libc_init_array+0x3c>)
 8009746:	1b64      	subs	r4, r4, r5
 8009748:	10a4      	asrs	r4, r4, #2
 800974a:	2600      	movs	r6, #0
 800974c:	42a6      	cmp	r6, r4
 800974e:	d109      	bne.n	8009764 <__libc_init_array+0x24>
 8009750:	4d0b      	ldr	r5, [pc, #44]	; (8009780 <__libc_init_array+0x40>)
 8009752:	4c0c      	ldr	r4, [pc, #48]	; (8009784 <__libc_init_array+0x44>)
 8009754:	f000 f82e 	bl	80097b4 <_init>
 8009758:	1b64      	subs	r4, r4, r5
 800975a:	10a4      	asrs	r4, r4, #2
 800975c:	2600      	movs	r6, #0
 800975e:	42a6      	cmp	r6, r4
 8009760:	d105      	bne.n	800976e <__libc_init_array+0x2e>
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	f855 3b04 	ldr.w	r3, [r5], #4
 8009768:	4798      	blx	r3
 800976a:	3601      	adds	r6, #1
 800976c:	e7ee      	b.n	800974c <__libc_init_array+0xc>
 800976e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009772:	4798      	blx	r3
 8009774:	3601      	adds	r6, #1
 8009776:	e7f2      	b.n	800975e <__libc_init_array+0x1e>
 8009778:	08009b14 	.word	0x08009b14
 800977c:	08009b14 	.word	0x08009b14
 8009780:	08009b14 	.word	0x08009b14
 8009784:	08009b18 	.word	0x08009b18

08009788 <memcpy>:
 8009788:	440a      	add	r2, r1
 800978a:	4291      	cmp	r1, r2
 800978c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009790:	d100      	bne.n	8009794 <memcpy+0xc>
 8009792:	4770      	bx	lr
 8009794:	b510      	push	{r4, lr}
 8009796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800979a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800979e:	4291      	cmp	r1, r2
 80097a0:	d1f9      	bne.n	8009796 <memcpy+0xe>
 80097a2:	bd10      	pop	{r4, pc}

080097a4 <memset>:
 80097a4:	4402      	add	r2, r0
 80097a6:	4603      	mov	r3, r0
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d100      	bne.n	80097ae <memset+0xa>
 80097ac:	4770      	bx	lr
 80097ae:	f803 1b01 	strb.w	r1, [r3], #1
 80097b2:	e7f9      	b.n	80097a8 <memset+0x4>

080097b4 <_init>:
 80097b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b6:	bf00      	nop
 80097b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ba:	bc08      	pop	{r3}
 80097bc:	469e      	mov	lr, r3
 80097be:	4770      	bx	lr

080097c0 <_fini>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	bf00      	nop
 80097c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c6:	bc08      	pop	{r3}
 80097c8:	469e      	mov	lr, r3
 80097ca:	4770      	bx	lr
