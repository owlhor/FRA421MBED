
H745_W2812B_NeoPixel_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009788  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08009a20  08009a20  00019a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d60  08009d60  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009d60  08009d60  00019d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d68  08009d68  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d68  08009d68  00019d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d6c  08009d6c  00019d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08009d80  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08009de0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000828  240000d0  08009e40  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240008f8  08009e40  000208f8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001da32  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003131  00000000  00000000  0003db30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001318  00000000  00000000  00040c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001200  00000000  00000000  00041f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b475  00000000  00000000  00043180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019f38  00000000  00000000  0007e5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00184c04  00000000  00000000  0009852d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021d131  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005174  00000000  00000000  0021d184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009a08 	.word	0x08009a08

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009a08 	.word	0x08009a08

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <byteToW2812BEncode1>:
//// +20 --> Gap reset LED for 64 uSec
uint8_t LEDBuffer[NUM_LED_WS2812S*9 + 20];

/// non prototype in .h -> can use in this .c only
void byteToW2812BEncode1(uint8_t dataIn, uint8_t* Array3Output)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
	//// Array Copy[Big LUT] in assembly
	memcpy(Array3Output,&W2812LUT[dataIn*3],3);
 8000714:	79fa      	ldrb	r2, [r7, #7]
 8000716:	4613      	mov	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	4413      	add	r3, r2
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <byteToW2812BEncode1+0x2c>)
 800071e:	4413      	add	r3, r2
 8000720:	2203      	movs	r2, #3
 8000722:	4619      	mov	r1, r3
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f009 f959 	bl	80099dc <memcpy>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08009a30 	.word	0x08009a30

08000738 <W2812B_Init>:
					| (((dataIn >> 1) & 0x1) << 4) | (((dataIn ) & 0x1) << 1);

}

void W2812B_Init(SPI_HandleTypeDef *hspi)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(hspi,LEDBuffer,NUM_LED_WS2812S  * 9 + 20);
 8000740:	225c      	movs	r2, #92	; 0x5c
 8000742:	4904      	ldr	r1, [pc, #16]	; (8000754 <W2812B_Init+0x1c>)
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f007 f939 	bl	80079bc <HAL_SPI_Transmit_DMA>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	240000ec 	.word	0x240000ec

08000758 <W2812B_UpdateData>:

void W2812B_UpdateData(W2812BStructure *input)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	for(int i = 0;i<NUM_LED_WS2812S;i++)
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e035      	b.n	80007d2 <W2812B_UpdateData+0x7a>
	{
		byteToW2812BEncode1(input[i].G,&LEDBuffer[20+i*9]);
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	4613      	mov	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	4413      	add	r3, r2
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	7858      	ldrb	r0, [r3, #1]
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4613      	mov	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	4413      	add	r3, r2
 800077c:	3314      	adds	r3, #20
 800077e:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <W2812B_UpdateData+0x8c>)
 8000780:	4413      	add	r3, r2
 8000782:	4619      	mov	r1, r3
 8000784:	f7ff ffc0 	bl	8000708 <byteToW2812BEncode1>
		byteToW2812BEncode1(input[i].R,&LEDBuffer[20+i*9+3]);
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	4613      	mov	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	7818      	ldrb	r0, [r3, #0]
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	4613      	mov	r3, r2
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	4413      	add	r3, r2
 800079e:	3317      	adds	r3, #23
 80007a0:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <W2812B_UpdateData+0x8c>)
 80007a2:	4413      	add	r3, r2
 80007a4:	4619      	mov	r1, r3
 80007a6:	f7ff ffaf 	bl	8000708 <byteToW2812BEncode1>
		byteToW2812BEncode1(input[i].B,&LEDBuffer[20+i*9+6]);
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	4613      	mov	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4413      	add	r3, r2
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	7898      	ldrb	r0, [r3, #2]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	4613      	mov	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	4413      	add	r3, r2
 80007c0:	331a      	adds	r3, #26
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <W2812B_UpdateData+0x8c>)
 80007c4:	4413      	add	r3, r2
 80007c6:	4619      	mov	r1, r3
 80007c8:	f7ff ff9e 	bl	8000708 <byteToW2812BEncode1>
	for(int i = 0;i<NUM_LED_WS2812S;i++)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2b07      	cmp	r3, #7
 80007d6:	ddc6      	ble.n	8000766 <W2812B_UpdateData+0xe>
	}
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	240000ec 	.word	0x240000ec

080007e8 <HToRGB>:

void HToRGB(int h,W2812BStructure *input)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	uint8_t mode= h/256;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	da00      	bge.n	80007fa <HToRGB+0x12>
 80007f8:	33ff      	adds	r3, #255	; 0xff
 80007fa:	121b      	asrs	r3, r3, #8
 80007fc:	73fb      	strb	r3, [r7, #15]
	uint8_t state = h%256;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	425a      	negs	r2, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	bf58      	it	pl
 8000808:	4253      	negpl	r3, r2
 800080a:	73bb      	strb	r3, [r7, #14]

	switch (mode) {
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2b04      	cmp	r3, #4
 8000810:	d842      	bhi.n	8000898 <HToRGB+0xb0>
 8000812:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <HToRGB+0x30>)
 8000814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000818:	0800082d 	.word	0x0800082d
 800081c:	08000841 	.word	0x08000841
 8000820:	08000859 	.word	0x08000859
 8000824:	0800086d 	.word	0x0800086d
 8000828:	08000885 	.word	0x08000885
	case 0:
		input->B = 0;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2200      	movs	r2, #0
 8000830:	709a      	strb	r2, [r3, #2]
		input->G = state;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	7bba      	ldrb	r2, [r7, #14]
 8000836:	705a      	strb	r2, [r3, #1]
		input->R = 255;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	701a      	strb	r2, [r3, #0]
		break;
 800083e:	e037      	b.n	80008b0 <HToRGB+0xc8>
	case 1:
		input->B = 0;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2200      	movs	r2, #0
 8000844:	709a      	strb	r2, [r3, #2]
		input->G = 255;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	22ff      	movs	r2, #255	; 0xff
 800084a:	705a      	strb	r2, [r3, #1]
		input->R = 255-state;
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	43db      	mvns	r3, r3
 8000850:	b2da      	uxtb	r2, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	701a      	strb	r2, [r3, #0]
		break;
 8000856:	e02b      	b.n	80008b0 <HToRGB+0xc8>
	case 2:
		input->B = state;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	7bba      	ldrb	r2, [r7, #14]
 800085c:	709a      	strb	r2, [r3, #2]
		input->G = 255;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	22ff      	movs	r2, #255	; 0xff
 8000862:	705a      	strb	r2, [r3, #1]
		input->R = 0;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
		break;
 800086a:	e021      	b.n	80008b0 <HToRGB+0xc8>
	case 3:
		input->B = 255;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	22ff      	movs	r2, #255	; 0xff
 8000870:	709a      	strb	r2, [r3, #2]
		input->G = 255-state;
 8000872:	7bbb      	ldrb	r3, [r7, #14]
 8000874:	43db      	mvns	r3, r3
 8000876:	b2da      	uxtb	r2, r3
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	705a      	strb	r2, [r3, #1]
		input->R = 0;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
		break;
 8000882:	e015      	b.n	80008b0 <HToRGB+0xc8>
	case 4:
		input->B = 255;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	22ff      	movs	r2, #255	; 0xff
 8000888:	709a      	strb	r2, [r3, #2]
		input->G = 0;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	705a      	strb	r2, [r3, #1]
		input->R = state;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	7bba      	ldrb	r2, [r7, #14]
 8000894:	701a      	strb	r2, [r3, #0]
		break;
 8000896:	e00b      	b.n	80008b0 <HToRGB+0xc8>
	default:
	case 5:
		input->B = 255-state;
 8000898:	7bbb      	ldrb	r3, [r7, #14]
 800089a:	43db      	mvns	r3, r3
 800089c:	b2da      	uxtb	r2, r3
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	709a      	strb	r2, [r3, #2]
		input->G = 0;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2200      	movs	r2, #0
 80008a6:	705a      	strb	r2, [r3, #1]
		input->R = 255;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	701a      	strb	r2, [r3, #0]
		break;
 80008ae:	bf00      	nop
	}
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <HexToRGB_cat>:
		input->B = bb % 256;
		input->G = gg % 256;
		input->R = rr % 256;
}

void HexToRGB_cat(uint32_t hx,W2812BStructure *input){
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	/*Get input as [ 0xrrggbb ] 24-bit(uint32 form) Hex code
	 * #RRGGBB => xx -> each color val[0,256]
	 * */
	input->B = hx & 0xFF;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	709a      	strb	r2, [r3, #2]
	input->G = (hx >> 8) & 0xFF;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	705a      	strb	r2, [r3, #1]
	input->R = (hx >> 16) & 0xFF;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	701a      	strb	r2, [r3, #0]
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fa:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fc:	bf00      	nop
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <main+0xf4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d004      	beq.n	8000914 <main+0x24>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	1e5a      	subs	r2, r3, #1
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	dcf4      	bgt.n	80008fe <main+0xe>
  if ( timeout < 0 )
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	da01      	bge.n	800091e <main+0x2e>
  {
  Error_Handler();
 800091a:	f000 fbf3 	bl	8001104 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 ff13 	bl	8001748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f86b 	bl	80009fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <main+0xf4>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <main+0xf4>)
 800092e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <main+0xf4>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000944:	2000      	movs	r0, #0
 8000946:	f004 fa31 	bl	8004dac <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800094a:	2100      	movs	r1, #0
 800094c:	2000      	movs	r0, #0
 800094e:	f004 fa47 	bl	8004de0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000956:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000958:	bf00      	nop
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <main+0xf4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d104      	bne.n	8000970 <main+0x80>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	dcf4      	bgt.n	800095a <main+0x6a>
if ( timeout < 0 )
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	da01      	bge.n	800097a <main+0x8a>
{
Error_Handler();
 8000976:	f000 fbc5 	bl	8001104 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f000 fa03 	bl	8000d84 <MX_GPIO_Init>
  MX_ETH_Init();
 800097e:	f000 f8c1 	bl	8000b04 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000982:	f000 f961 	bl	8000c48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000986:	f000 f9ab 	bl	8000ce0 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 800098a:	f000 f9db 	bl	8000d44 <MX_DMA_Init>
  MX_SPI1_Init();
 800098e:	f000 f905 	bl	8000b9c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // set output  open drain - cant do in .ioc
  GPIOB->OTYPER = GPIOB->OTYPER | GPIO_PIN_5;
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <main+0xf8>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <main+0xf8>)
 8000998:	f043 0320 	orr.w	r3, r3, #32
 800099c:	6053      	str	r3, [r2, #4]
  // hal spi for Neopixel start
   W2812B_Init(&hspi1);
 800099e:	4813      	ldr	r0, [pc, #76]	; (80009ec <main+0xfc>)
 80009a0:	f7ff feca 	bl	8000738 <W2812B_Init>
	  //// H7 2 core init test

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009a4:	2102      	movs	r1, #2
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <main+0x100>)
 80009a8:	f004 f9cb 	bl	8004d42 <HAL_GPIO_TogglePin>
	  HAL_Delay(10);
 80009ac:	200a      	movs	r0, #10
 80009ae:	f000 ff5d 	bl	800186c <HAL_Delay>


		if(counter==0){
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <main+0x104>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d102      	bne.n	80009c0 <main+0xd0>
			Hex2RGBB_myrend();
 80009ba:	f000 fb41 	bl	8001040 <Hex2RGBB_myrend>
 80009be:	e008      	b.n	80009d2 <main+0xe2>

		}else if(counter==1){
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <main+0x104>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d102      	bne.n	80009ce <main+0xde>
			RainbowGen_NeoPixel();
 80009c8:	f000 fa9a 	bl	8000f00 <RainbowGen_NeoPixel>
 80009cc:	e001      	b.n	80009d2 <main+0xe2>
		}
		else{
			HtoRGB_myrend();
 80009ce:	f000 fae5 	bl	8000f9c <HtoRGB_myrend>
		}
	  W2812B_UpdateData(LED);
 80009d2:	4809      	ldr	r0, [pc, #36]	; (80009f8 <main+0x108>)
 80009d4:	f7ff fec0 	bl	8000758 <W2812B_UpdateData>

	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <main+0xf8>)
 80009de:	f004 f9b0 	bl	8004d42 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009e2:	e7df      	b.n	80009a4 <main+0xb4>
 80009e4:	58024400 	.word	0x58024400
 80009e8:	58020400 	.word	0x58020400
 80009ec:	24000230 	.word	0x24000230
 80009f0:	58021000 	.word	0x58021000
 80009f4:	240008e4 	.word	0x240008e4
 80009f8:	240008cc 	.word	0x240008cc

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09c      	sub	sp, #112	; 0x70
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	224c      	movs	r2, #76	; 0x4c
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f008 fff4 	bl	80099f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2220      	movs	r2, #32
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f008 ffee 	bl	80099f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a1c:	2004      	movs	r0, #4
 8000a1e:	f004 fb3b 	bl	8005098 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b34      	ldr	r3, [pc, #208]	; (8000af8 <SystemClock_Config+0xfc>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a33      	ldr	r2, [pc, #204]	; (8000af8 <SystemClock_Config+0xfc>)
 8000a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a30:	6193      	str	r3, [r2, #24]
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <SystemClock_Config+0xfc>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <SystemClock_Config+0x100>)
 8000a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a40:	4a2e      	ldr	r2, [pc, #184]	; (8000afc <SystemClock_Config+0x100>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a48:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <SystemClock_Config+0x100>)
 8000a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a54:	bf00      	nop
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <SystemClock_Config+0xfc>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a62:	d1f8      	bne.n	8000a56 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a64:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <SystemClock_Config+0x104>)
 8000a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a68:	f023 0303 	bic.w	r3, r3, #3
 8000a6c:	4a24      	ldr	r2, [pc, #144]	; (8000b00 <SystemClock_Config+0x104>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a8a:	2378      	movs	r3, #120	; 0x78
 8000a8c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 fb5e 	bl	800516c <HAL_RCC_OscConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000ab6:	f000 fb25 	bl	8001104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aba:	233f      	movs	r3, #63	; 0x3f
 8000abc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ace:	2340      	movs	r3, #64	; 0x40
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad8:	2340      	movs	r3, #64	; 0x40
 8000ada:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2104      	movs	r1, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f004 ff71 	bl	80059c8 <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000aec:	f000 fb0a 	bl	8001104 <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3770      	adds	r7, #112	; 0x70
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58024800 	.word	0x58024800
 8000afc:	58000400 	.word	0x58000400
 8000b00:	58024400 	.word	0x58024400

08000b04 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_ETH_Init+0x80>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <MX_ETH_Init+0x84>)
 8000b0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_ETH_Init+0x88>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <MX_ETH_Init+0x88>)
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_ETH_Init+0x88>)
 8000b1c:	22e1      	movs	r2, #225	; 0xe1
 8000b1e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_ETH_Init+0x88>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_ETH_Init+0x88>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_ETH_Init+0x88>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_ETH_Init+0x80>)
 8000b34:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <MX_ETH_Init+0x88>)
 8000b36:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_ETH_Init+0x80>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_ETH_Init+0x80>)
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <MX_ETH_Init+0x8c>)
 8000b42:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_ETH_Init+0x80>)
 8000b46:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <MX_ETH_Init+0x90>)
 8000b48:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_ETH_Init+0x80>)
 8000b4c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b50:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_ETH_Init+0x80>)
 8000b54:	f003 fb08 	bl	8004168 <HAL_ETH_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b5e:	f000 fad1 	bl	8001104 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b62:	2238      	movs	r2, #56	; 0x38
 8000b64:	2100      	movs	r1, #0
 8000b66:	480c      	ldr	r0, [pc, #48]	; (8000b98 <MX_ETH_Init+0x94>)
 8000b68:	f008 ff46 	bl	80099f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <MX_ETH_Init+0x94>)
 8000b6e:	2221      	movs	r2, #33	; 0x21
 8000b70:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_ETH_Init+0x94>)
 8000b74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b78:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <MX_ETH_Init+0x94>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	24000180 	.word	0x24000180
 8000b88:	40028000 	.word	0x40028000
 8000b8c:	240008e8 	.word	0x240008e8
 8000b90:	24000070 	.word	0x24000070
 8000b94:	24000010 	.word	0x24000010
 8000b98:	24000148 	.word	0x24000148

08000b9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000ba2:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <MX_SPI1_Init+0xa8>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000ba8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000bb6:	2207      	movs	r2, #7
 8000bb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000bc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000bd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_SPI1_Init+0xa4>)
 8000c2e:	f006 fdbf 	bl	80077b0 <HAL_SPI_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000c38:	f000 fa64 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	24000230 	.word	0x24000230
 8000c44:	40013000 	.word	0x40013000

08000c48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c4e:	4a23      	ldr	r2, [pc, #140]	; (8000cdc <MX_USART3_UART_Init+0x94>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c90:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c92:	f007 fb04 	bl	800829e <HAL_UART_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c9c:	f000 fa32 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000ca4:	f008 faa2 	bl	80091ec <HAL_UARTEx_SetTxFifoThreshold>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cae:	f000 fa29 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000cb6:	f008 fad7 	bl	8009268 <HAL_UARTEx_SetRxFifoThreshold>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc0:	f000 fa20 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000cc6:	f008 fa58 	bl	800917a <HAL_UARTEx_DisableFifoMode>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd0:	f000 fa18 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	24000330 	.word	0x24000330
 8000cdc:	40004800 	.word	0x40004800

08000ce0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce6:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cec:	2209      	movs	r2, #9
 8000cee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d28:	f004 f86e 	bl	8004e08 <HAL_PCD_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d32:	f000 f9e7 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240003c0 	.word	0x240003c0
 8000d40:	40080000 	.word	0x40080000

08000d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <MX_DMA_Init+0x3c>)
 8000d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <MX_DMA_Init+0x3c>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_DMA_Init+0x3c>)
 8000d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	200b      	movs	r0, #11
 8000d6e:	f000 fe9c 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d72:	200b      	movs	r0, #11
 8000d74:	f000 feb3 	bl	8001ade <HAL_NVIC_EnableIRQ>

}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	58024400 	.word	0x58024400

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	; 0x30
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	4b55      	ldr	r3, [pc, #340]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	4a53      	ldr	r2, [pc, #332]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000daa:	4b51      	ldr	r3, [pc, #324]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db8:	4b4d      	ldr	r3, [pc, #308]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	4a4c      	ldr	r2, [pc, #304]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc8:	4b49      	ldr	r3, [pc, #292]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b46      	ldr	r3, [pc, #280]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	4a44      	ldr	r2, [pc, #272]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de6:	4b42      	ldr	r3, [pc, #264]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b3e      	ldr	r3, [pc, #248]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	4a3d      	ldr	r2, [pc, #244]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e04:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	4a35      	ldr	r2, [pc, #212]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e22:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a2e      	ldr	r2, [pc, #184]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a26      	ldr	r2, [pc, #152]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000e56:	f043 0310 	orr.w	r3, r3, #16
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <MX_GPIO_Init+0x16c>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e72:	4820      	ldr	r0, [pc, #128]	; (8000ef4 <MX_GPIO_Init+0x170>)
 8000e74:	f003 ff4c 	bl	8004d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	481e      	ldr	r0, [pc, #120]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000e7e:	f003 ff47 	bl	8004d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4818      	ldr	r0, [pc, #96]	; (8000efc <MX_GPIO_Init+0x178>)
 8000e9a:	f003 fd89 	bl	80049b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000e9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <MX_GPIO_Init+0x170>)
 8000eb8:	f003 fd7a 	bl	80049b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000ed4:	f003 fd6c 	bl	80049b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2028      	movs	r0, #40	; 0x28
 8000ede:	f000 fde4 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ee2:	2028      	movs	r0, #40	; 0x28
 8000ee4:	f000 fdfb 	bl	8001ade <HAL_NVIC_EnableIRQ>

}
 8000ee8:	bf00      	nop
 8000eea:	3730      	adds	r7, #48	; 0x30
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	58020400 	.word	0x58020400
 8000ef8:	58021000 	.word	0x58021000
 8000efc:	58020800 	.word	0x58020800

08000f00 <RainbowGen_NeoPixel>:

/* USER CODE BEGIN 4 */

void RainbowGen_NeoPixel(){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
	if(counter==1){
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <RainbowGen_NeoPixel+0x8c>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d139      	bne.n	8000f82 <RainbowGen_NeoPixel+0x82>
	static int h =0;

	for (int i = 0; i < NUM_LEDPixel; i++) {
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	e01f      	b.n	8000f54 <RainbowGen_NeoPixel+0x54>

		  			HToRGB((h + 192*i) % 1536, &LED[i]);
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	019b      	lsls	r3, r3, #6
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <RainbowGen_NeoPixel+0x90>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	441a      	add	r2, r3
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <RainbowGen_NeoPixel+0x94>)
 8000f28:	fb83 1302 	smull	r1, r3, r3, r2
 8000f2c:	1219      	asrs	r1, r3, #8
 8000f2e:	17d3      	asrs	r3, r2, #31
 8000f30:	1ac8      	subs	r0, r1, r3
 8000f32:	4603      	mov	r3, r0
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4403      	add	r3, r0
 8000f38:	025b      	lsls	r3, r3, #9
 8000f3a:	1ad0      	subs	r0, r2, r3
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <RainbowGen_NeoPixel+0x98>)
 8000f46:	4413      	add	r3, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fc4d 	bl	80007e8 <HToRGB>
	for (int i = 0; i < NUM_LEDPixel; i++) {
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3301      	adds	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	dddc      	ble.n	8000f14 <RainbowGen_NeoPixel+0x14>
		  		}

		  		h++;
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <RainbowGen_NeoPixel+0x90>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <RainbowGen_NeoPixel+0x90>)
 8000f62:	6013      	str	r3, [r2, #0]
		  		h%=1536;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <RainbowGen_NeoPixel+0x90>)
 8000f66:	6819      	ldr	r1, [r3, #0]
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <RainbowGen_NeoPixel+0x94>)
 8000f6a:	fb83 2301 	smull	r2, r3, r3, r1
 8000f6e:	121a      	asrs	r2, r3, #8
 8000f70:	17cb      	asrs	r3, r1, #31
 8000f72:	1ad2      	subs	r2, r2, r3
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	025b      	lsls	r3, r3, #9
 8000f7c:	1aca      	subs	r2, r1, r3
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <RainbowGen_NeoPixel+0x90>)
 8000f80:	601a      	str	r2, [r3, #0]
		}
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	240008e4 	.word	0x240008e4
 8000f90:	240008f0 	.word	0x240008f0
 8000f94:	2aaaaaab 	.word	0x2aaaaaab
 8000f98:	240008cc 	.word	0x240008cc

08000f9c <HtoRGB_myrend>:

void HtoRGB_myrend(){
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	////// Insert R G B into [LED] Directly is enable and more OK
	//// Sample of inserting config
	LED[0].R = 0;
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
	LED[0].G = 0;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	705a      	strb	r2, [r3, #1]
	LED[0].B = 0;
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	709a      	strb	r2, [r3, #2]

	LED[1].R = 10;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fb4:	220a      	movs	r2, #10
 8000fb6:	70da      	strb	r2, [r3, #3]
	LED[1].G = 0;
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	711a      	strb	r2, [r3, #4]
	LED[1].B = 0;
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	715a      	strb	r2, [r3, #5]

	LED[2].R = 0;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	719a      	strb	r2, [r3, #6]
	LED[2].G = 10;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fcc:	220a      	movs	r2, #10
 8000fce:	71da      	strb	r2, [r3, #7]
	LED[2].B = 0;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	721a      	strb	r2, [r3, #8]

	LED[3].R = 0;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	725a      	strb	r2, [r3, #9]
	LED[3].G = 0;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	729a      	strb	r2, [r3, #10]
	LED[3].B = 10;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fe4:	220a      	movs	r2, #10
 8000fe6:	72da      	strb	r2, [r3, #11]

	LED[4].R = 0;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HtoRGB_myrend+0xa0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	731a      	strb	r2, [r3, #12]
	LED[4].G = 10;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <HtoRGB_myrend+0xa0>)
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	735a      	strb	r2, [r3, #13]
	LED[4].B = 10;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <HtoRGB_myrend+0xa0>)
 8000ff6:	220a      	movs	r2, #10
 8000ff8:	739a      	strb	r2, [r3, #14]

	LED[5].R = 10;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HtoRGB_myrend+0xa0>)
 8000ffc:	220a      	movs	r2, #10
 8000ffe:	73da      	strb	r2, [r3, #15]
	LED[5].G = 0;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HtoRGB_myrend+0xa0>)
 8001002:	2200      	movs	r2, #0
 8001004:	741a      	strb	r2, [r3, #16]
	LED[5].B = 10;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HtoRGB_myrend+0xa0>)
 8001008:	220a      	movs	r2, #10
 800100a:	745a      	strb	r2, [r3, #17]

	LED[6].R = 10;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HtoRGB_myrend+0xa0>)
 800100e:	220a      	movs	r2, #10
 8001010:	749a      	strb	r2, [r3, #18]
	LED[6].G = 10;
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HtoRGB_myrend+0xa0>)
 8001014:	220a      	movs	r2, #10
 8001016:	74da      	strb	r2, [r3, #19]
	LED[6].B = 0;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HtoRGB_myrend+0xa0>)
 800101a:	2200      	movs	r2, #0
 800101c:	751a      	strb	r2, [r3, #20]

	LED[7].R = 10;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <HtoRGB_myrend+0xa0>)
 8001020:	220a      	movs	r2, #10
 8001022:	755a      	strb	r2, [r3, #21]
	LED[7].G = 10;
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <HtoRGB_myrend+0xa0>)
 8001026:	220a      	movs	r2, #10
 8001028:	759a      	strb	r2, [r3, #22]
	LED[7].B = 10;
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <HtoRGB_myrend+0xa0>)
 800102c:	220a      	movs	r2, #10
 800102e:	75da      	strb	r2, [r3, #23]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	240008cc 	.word	0x240008cc

08001040 <Hex2RGBB_myrend>:

void Hex2RGBB_myrend(){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	////// use 55 to not too bright -> it distrub my eyes Arghhh
	HexToRGB_cat(0x000000, &LED[0]); // Black (no light)
 8001044:	4912      	ldr	r1, [pc, #72]	; (8001090 <Hex2RGBB_myrend+0x50>)
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff fc38 	bl	80008bc <HexToRGB_cat>
	HexToRGB_cat(0x550000, &LED[1]); // RED
 800104c:	4911      	ldr	r1, [pc, #68]	; (8001094 <Hex2RGBB_myrend+0x54>)
 800104e:	f44f 00aa 	mov.w	r0, #5570560	; 0x550000
 8001052:	f7ff fc33 	bl	80008bc <HexToRGB_cat>
	HexToRGB_cat(0x005500, &LED[2]); // Green
 8001056:	4910      	ldr	r1, [pc, #64]	; (8001098 <Hex2RGBB_myrend+0x58>)
 8001058:	f44f 40aa 	mov.w	r0, #21760	; 0x5500
 800105c:	f7ff fc2e 	bl	80008bc <HexToRGB_cat>
	HexToRGB_cat(0x000055, &LED[3]); // Blue
 8001060:	490e      	ldr	r1, [pc, #56]	; (800109c <Hex2RGBB_myrend+0x5c>)
 8001062:	2055      	movs	r0, #85	; 0x55
 8001064:	f7ff fc2a 	bl	80008bc <HexToRGB_cat>
	HexToRGB_cat(0x005555, &LED[4]); // Cyan blue
 8001068:	490d      	ldr	r1, [pc, #52]	; (80010a0 <Hex2RGBB_myrend+0x60>)
 800106a:	f245 5055 	movw	r0, #21845	; 0x5555
 800106e:	f7ff fc25 	bl	80008bc <HexToRGB_cat>
	HexToRGB_cat(0x550055, &LED[5]); // Magenta pink
 8001072:	490c      	ldr	r1, [pc, #48]	; (80010a4 <Hex2RGBB_myrend+0x64>)
 8001074:	f04f 1055 	mov.w	r0, #5570645	; 0x550055
 8001078:	f7ff fc20 	bl	80008bc <HexToRGB_cat>
	HexToRGB_cat(0x555500, &LED[6]); // Yellow
 800107c:	490a      	ldr	r1, [pc, #40]	; (80010a8 <Hex2RGBB_myrend+0x68>)
 800107e:	480b      	ldr	r0, [pc, #44]	; (80010ac <Hex2RGBB_myrend+0x6c>)
 8001080:	f7ff fc1c 	bl	80008bc <HexToRGB_cat>
	HexToRGB_cat(0x555555, &LED[7]); // K White
 8001084:	490a      	ldr	r1, [pc, #40]	; (80010b0 <Hex2RGBB_myrend+0x70>)
 8001086:	480b      	ldr	r0, [pc, #44]	; (80010b4 <Hex2RGBB_myrend+0x74>)
 8001088:	f7ff fc18 	bl	80008bc <HexToRGB_cat>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	240008cc 	.word	0x240008cc
 8001094:	240008cf 	.word	0x240008cf
 8001098:	240008d2 	.word	0x240008d2
 800109c:	240008d5 	.word	0x240008d5
 80010a0:	240008d8 	.word	0x240008d8
 80010a4:	240008db 	.word	0x240008db
 80010a8:	240008de 	.word	0x240008de
 80010ac:	00555500 	.word	0x00555500
 80010b0:	240008e1 	.word	0x240008e1
 80010b4:	00555555 	.word	0x00555555

080010b8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]

	//=========// work Blue button //=========//
	if(GPIO_Pin == GPIO_PIN_13){
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010c8:	d112      	bne.n	80010f0 <HAL_GPIO_EXTI_Callback+0x38>
//		}
//		else{
//			HtoRGB_myrend();
//		}
		//W2812B_UpdateData(LED);
		counter++; // test
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_GPIO_EXTI_Callback+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_GPIO_EXTI_Callback+0x44>)
 80010d4:	701a      	strb	r2, [r3, #0]
		counter%=3;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_GPIO_EXTI_Callback+0x44>)
 80010d8:	781a      	ldrb	r2, [r3, #0]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_GPIO_EXTI_Callback+0x48>)
 80010dc:	fba3 1302 	umull	r1, r3, r3, r2
 80010e0:	0859      	lsrs	r1, r3, #1
 80010e2:	460b      	mov	r3, r1
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	440b      	add	r3, r1
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GPIO_EXTI_Callback+0x44>)
 80010ee:	701a      	strb	r2, [r3, #0]
		}

	}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	240008e4 	.word	0x240008e4
 8001100:	aaaaaaab 	.word	0xaaaaaaab

08001104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800110c:	e7fe      	b.n	800110c <Error_Handler+0x8>
	...

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_MspInit+0x30>)
 8001118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800111c:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_MspInit+0x30>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_MspInit+0x30>)
 8001128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	58024400 	.word	0x58024400

08001144 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	; 0x38
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a59      	ldr	r2, [pc, #356]	; (80012c8 <HAL_ETH_MspInit+0x184>)
 8001162:	4293      	cmp	r3, r2
 8001164:	f040 80ab 	bne.w	80012be <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001168:	4b58      	ldr	r3, [pc, #352]	; (80012cc <HAL_ETH_MspInit+0x188>)
 800116a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800116e:	4a57      	ldr	r2, [pc, #348]	; (80012cc <HAL_ETH_MspInit+0x188>)
 8001170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001174:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001178:	4b54      	ldr	r3, [pc, #336]	; (80012cc <HAL_ETH_MspInit+0x188>)
 800117a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800117e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001182:	623b      	str	r3, [r7, #32]
 8001184:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001186:	4b51      	ldr	r3, [pc, #324]	; (80012cc <HAL_ETH_MspInit+0x188>)
 8001188:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800118c:	4a4f      	ldr	r2, [pc, #316]	; (80012cc <HAL_ETH_MspInit+0x188>)
 800118e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001192:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001196:	4b4d      	ldr	r3, [pc, #308]	; (80012cc <HAL_ETH_MspInit+0x188>)
 8001198:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011a4:	4b49      	ldr	r3, [pc, #292]	; (80012cc <HAL_ETH_MspInit+0x188>)
 80011a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011aa:	4a48      	ldr	r2, [pc, #288]	; (80012cc <HAL_ETH_MspInit+0x188>)
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011b4:	4b45      	ldr	r3, [pc, #276]	; (80012cc <HAL_ETH_MspInit+0x188>)
 80011b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	4b42      	ldr	r3, [pc, #264]	; (80012cc <HAL_ETH_MspInit+0x188>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	4a40      	ldr	r2, [pc, #256]	; (80012cc <HAL_ETH_MspInit+0x188>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d2:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <HAL_ETH_MspInit+0x188>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <HAL_ETH_MspInit+0x188>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	4a39      	ldr	r2, [pc, #228]	; (80012cc <HAL_ETH_MspInit+0x188>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f0:	4b36      	ldr	r3, [pc, #216]	; (80012cc <HAL_ETH_MspInit+0x188>)
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b33      	ldr	r3, [pc, #204]	; (80012cc <HAL_ETH_MspInit+0x188>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	4a31      	ldr	r2, [pc, #196]	; (80012cc <HAL_ETH_MspInit+0x188>)
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <HAL_ETH_MspInit+0x188>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <HAL_ETH_MspInit+0x188>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001222:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <HAL_ETH_MspInit+0x188>)
 8001224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <HAL_ETH_MspInit+0x188>)
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800123a:	2332      	movs	r3, #50	; 0x32
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800124a:	230b      	movs	r3, #11
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	4619      	mov	r1, r3
 8001254:	481e      	ldr	r0, [pc, #120]	; (80012d0 <HAL_ETH_MspInit+0x18c>)
 8001256:	f003 fbab 	bl	80049b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800125a:	2386      	movs	r3, #134	; 0x86
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800126a:	230b      	movs	r3, #11
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	4817      	ldr	r0, [pc, #92]	; (80012d4 <HAL_ETH_MspInit+0x190>)
 8001276:	f003 fb9b 	bl	80049b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800127a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800128c:	230b      	movs	r3, #11
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	4619      	mov	r1, r3
 8001296:	4810      	ldr	r0, [pc, #64]	; (80012d8 <HAL_ETH_MspInit+0x194>)
 8001298:	f003 fb8a 	bl	80049b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800129c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ae:	230b      	movs	r3, #11
 80012b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b6:	4619      	mov	r1, r3
 80012b8:	4808      	ldr	r0, [pc, #32]	; (80012dc <HAL_ETH_MspInit+0x198>)
 80012ba:	f003 fb79 	bl	80049b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012be:	bf00      	nop
 80012c0:	3738      	adds	r7, #56	; 0x38
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40028000 	.word	0x40028000
 80012cc:	58024400 	.word	0x58024400
 80012d0:	58020800 	.word	0x58020800
 80012d4:	58020000 	.word	0x58020000
 80012d8:	58020400 	.word	0x58020400
 80012dc:	58021800 	.word	0x58021800

080012e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0ba      	sub	sp, #232	; 0xe8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f8:	f107 0318 	add.w	r3, r7, #24
 80012fc:	22bc      	movs	r2, #188	; 0xbc
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f008 fb79 	bl	80099f8 <memset>
  if(hspi->Instance==SPI1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a5a      	ldr	r2, [pc, #360]	; (8001474 <HAL_SPI_MspInit+0x194>)
 800130c:	4293      	cmp	r3, r2
 800130e:	f040 80ad 	bne.w	800146c <HAL_SPI_MspInit+0x18c>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 36;
 800131c:	2324      	movs	r3, #36	; 0x24
 800131e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001320:	2302      	movs	r3, #2
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001324:	2302      	movs	r3, #2
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001328:	2302      	movs	r3, #2
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800132c:	23c0      	movs	r3, #192	; 0xc0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001330:	2300      	movs	r3, #0
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133e:	f107 0318 	add.w	r3, r7, #24
 8001342:	4618      	mov	r0, r3
 8001344:	f004 fecc 	bl	80060e0 <HAL_RCCEx_PeriphCLKConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 800134e:	f7ff fed9 	bl	8001104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <HAL_SPI_MspInit+0x198>)
 8001354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001358:	4a47      	ldr	r2, [pc, #284]	; (8001478 <HAL_SPI_MspInit+0x198>)
 800135a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800135e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <HAL_SPI_MspInit+0x198>)
 8001364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_SPI_MspInit+0x198>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	4a40      	ldr	r2, [pc, #256]	; (8001478 <HAL_SPI_MspInit+0x198>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001380:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_SPI_MspInit+0x198>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <HAL_SPI_MspInit+0x198>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001394:	4a38      	ldr	r2, [pc, #224]	; (8001478 <HAL_SPI_MspInit+0x198>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <HAL_SPI_MspInit+0x198>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013ac:	2360      	movs	r3, #96	; 0x60
 80013ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c4:	2305      	movs	r3, #5
 80013c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013ce:	4619      	mov	r1, r3
 80013d0:	482a      	ldr	r0, [pc, #168]	; (800147c <HAL_SPI_MspInit+0x19c>)
 80013d2:	f003 faed 	bl	80049b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013d6:	2320      	movs	r3, #32
 80013d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ee:	2305      	movs	r3, #5
 80013f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4821      	ldr	r0, [pc, #132]	; (8001480 <HAL_SPI_MspInit+0x1a0>)
 80013fc:	f003 fad8 	bl	80049b0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 8001402:	4a21      	ldr	r2, [pc, #132]	; (8001488 <HAL_SPI_MspInit+0x1a8>)
 8001404:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 8001408:	2226      	movs	r2, #38	; 0x26
 800140a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 800140e:	2240      	movs	r2, #64	; 0x40
 8001410:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 800141a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 800142e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001432:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 800143c:	2200      	movs	r2, #0
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001440:	4810      	ldr	r0, [pc, #64]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 8001442:	f000 fb67 	bl	8001b14 <HAL_DMA_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_SPI_MspInit+0x170>
    {
      Error_Handler();
 800144c:	f7ff fe5a 	bl	8001104 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 8001454:	679a      	str	r2, [r3, #120]	; 0x78
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <HAL_SPI_MspInit+0x1a4>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2023      	movs	r0, #35	; 0x23
 8001462:	f000 fb22 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001466:	2023      	movs	r0, #35	; 0x23
 8001468:	f000 fb39 	bl	8001ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800146c:	bf00      	nop
 800146e:	37e8      	adds	r7, #232	; 0xe8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40013000 	.word	0x40013000
 8001478:	58024400 	.word	0x58024400
 800147c:	58020000 	.word	0x58020000
 8001480:	58020400 	.word	0x58020400
 8001484:	240002b8 	.word	0x240002b8
 8001488:	40020010 	.word	0x40020010

0800148c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0b8      	sub	sp, #224	; 0xe0
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	22bc      	movs	r2, #188	; 0xbc
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f008 faa3 	bl	80099f8 <memset>
  if(huart->Instance==USART3)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a25      	ldr	r2, [pc, #148]	; (800154c <HAL_UART_MspInit+0xc0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d142      	bne.n	8001542 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014bc:	2302      	movs	r3, #2
 80014be:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 fe08 	bl	80060e0 <HAL_RCCEx_PeriphCLKConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014d6:	f7ff fe15 	bl	8001104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_UART_MspInit+0xc4>)
 80014dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014e0:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <HAL_UART_MspInit+0xc4>)
 80014e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_UART_MspInit+0xc4>)
 80014ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_UART_MspInit+0xc4>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fe:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_UART_MspInit+0xc4>)
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_UART_MspInit+0xc4>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001516:	f44f 7340 	mov.w	r3, #768	; 0x300
 800151a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001530:	2307      	movs	r3, #7
 8001532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001536:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_UART_MspInit+0xc8>)
 800153e:	f003 fa37 	bl	80049b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	37e0      	adds	r7, #224	; 0xe0
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40004800 	.word	0x40004800
 8001550:	58024400 	.word	0x58024400
 8001554:	58020c00 	.word	0x58020c00

08001558 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0b8      	sub	sp, #224	; 0xe0
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	22bc      	movs	r2, #188	; 0xbc
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f008 fa3d 	bl	80099f8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a36      	ldr	r2, [pc, #216]	; (800165c <HAL_PCD_MspInit+0x104>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d165      	bne.n	8001654 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001588:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800158c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800158e:	2301      	movs	r3, #1
 8001590:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001592:	2318      	movs	r3, #24
 8001594:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001596:	2302      	movs	r3, #2
 8001598:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800159a:	2304      	movs	r3, #4
 800159c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800159e:	2302      	movs	r3, #2
 80015a0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80015a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015a6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80015ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 fd91 	bl	80060e0 <HAL_RCCEx_PeriphCLKConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80015c4:	f7ff fd9e 	bl	8001104 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80015c8:	f003 fdc0 	bl	800514c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_PCD_MspInit+0x108>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <HAL_PCD_MspInit+0x108>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_PCD_MspInit+0x108>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80015ea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80015ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001604:	230a      	movs	r3, #10
 8001606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800160e:	4619      	mov	r1, r3
 8001610:	4814      	ldr	r0, [pc, #80]	; (8001664 <HAL_PCD_MspInit+0x10c>)
 8001612:	f003 f9cd 	bl	80049b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800162e:	4619      	mov	r1, r3
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <HAL_PCD_MspInit+0x10c>)
 8001632:	f003 f9bd 	bl	80049b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_PCD_MspInit+0x108>)
 8001638:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800163c:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_PCD_MspInit+0x108>)
 800163e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001642:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_PCD_MspInit+0x108>)
 8001648:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800164c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	37e0      	adds	r7, #224	; 0xe0
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40080000 	.word	0x40080000
 8001660:	58024400 	.word	0x58024400
 8001664:	58020000 	.word	0x58020000

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800166c:	e7fe      	b.n	800166c <NMI_Handler+0x4>

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler+0x4>

0800167a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler+0x4>

08001686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 f8ba 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <DMA1_Stream0_IRQHandler+0x10>)
 80016c2:	f001 fa33 	bl	8002b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	240002b8 	.word	0x240002b8

080016d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <SPI1_IRQHandler+0x10>)
 80016d6:	f006 fabb 	bl	8007c50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	24000230 	.word	0x24000230

080016e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016ec:	f003 fb43 	bl	8004d76 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016f8:	f7fe ff70 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016fe:	490d      	ldr	r1, [pc, #52]	; (8001734 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001714:	4c0a      	ldr	r4, [pc, #40]	; (8001740 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001722:	f008 f937 	bl	8009994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001726:	f7ff f8e3 	bl	80008f0 <main>
  bx  lr
 800172a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001730:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001734:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001738:	08009d70 	.word	0x08009d70
  ldr r2, =_sbss
 800173c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001740:	240008f8 	.word	0x240008f8

08001744 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC3_IRQHandler>
	...

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174e:	2003      	movs	r0, #3
 8001750:	f000 f9a0 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001754:	f004 faee 	bl	8005d34 <HAL_RCC_GetSysClockFreq>
 8001758:	4602      	mov	r2, r0
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_Init+0x68>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	4913      	ldr	r1, [pc, #76]	; (80017b4 <HAL_Init+0x6c>)
 8001766:	5ccb      	ldrb	r3, [r1, r3]
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
 8001770:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_Init+0x68>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_Init+0x6c>)
 800177c:	5cd3      	ldrb	r3, [r2, r3]
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <HAL_Init+0x70>)
 800178a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800178c:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <HAL_Init+0x74>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001792:	2000      	movs	r0, #0
 8001794:	f000 f814 	bl	80017c0 <HAL_InitTick>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e002      	b.n	80017a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017a2:	f7ff fcb5 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	58024400 	.word	0x58024400
 80017b4:	08009a20 	.word	0x08009a20
 80017b8:	24000004 	.word	0x24000004
 80017bc:	24000000 	.word	0x24000000

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_InitTick+0x60>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e021      	b.n	8001818 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_InitTick+0x64>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_InitTick+0x60>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f985 	bl	8001afa <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00e      	b.n	8001818 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	d80a      	bhi.n	8001816 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001800:	2200      	movs	r2, #0
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f000 f94f 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800180c:	4a06      	ldr	r2, [pc, #24]	; (8001828 <HAL_InitTick+0x68>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2400000c 	.word	0x2400000c
 8001824:	24000000 	.word	0x24000000
 8001828:	24000008 	.word	0x24000008

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	2400000c 	.word	0x2400000c
 8001850:	240008f4 	.word	0x240008f4

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	240008f4 	.word	0x240008f4

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff ffee 	bl	8001854 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_Delay+0x44>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001892:	bf00      	nop
 8001894:	f7ff ffde 	bl	8001854 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2400000c 	.word	0x2400000c

080018b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_GetREVID+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0c1b      	lsrs	r3, r3, #16
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	5c001000 	.word	0x5c001000

080018cc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80018dc:	4904      	ldr	r1, [pc, #16]	; (80018f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	58000400 	.word	0x58000400

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <__NVIC_SetPriorityGrouping+0x40>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	4313      	orrs	r3, r2
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	; (8001934 <__NVIC_SetPriorityGrouping+0x40>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00
 8001938:	05fa0000 	.word	0x05fa0000

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff29 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff40 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff90 	bl	80019e8 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5f 	bl	8001994 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff33 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffa4 	bl	8001a50 <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff fe9a 	bl	8001854 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e316      	b.n	800215a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a66      	ldr	r2, [pc, #408]	; (8001ccc <HAL_DMA_Init+0x1b8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d04a      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_DMA_Init+0x1bc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d045      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a63      	ldr	r2, [pc, #396]	; (8001cd4 <HAL_DMA_Init+0x1c0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d040      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a62      	ldr	r2, [pc, #392]	; (8001cd8 <HAL_DMA_Init+0x1c4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d03b      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a60      	ldr	r2, [pc, #384]	; (8001cdc <HAL_DMA_Init+0x1c8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d036      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a5f      	ldr	r2, [pc, #380]	; (8001ce0 <HAL_DMA_Init+0x1cc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d031      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a5d      	ldr	r2, [pc, #372]	; (8001ce4 <HAL_DMA_Init+0x1d0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d02c      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a5c      	ldr	r2, [pc, #368]	; (8001ce8 <HAL_DMA_Init+0x1d4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d027      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a5a      	ldr	r2, [pc, #360]	; (8001cec <HAL_DMA_Init+0x1d8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d022      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a59      	ldr	r2, [pc, #356]	; (8001cf0 <HAL_DMA_Init+0x1dc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d01d      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a57      	ldr	r2, [pc, #348]	; (8001cf4 <HAL_DMA_Init+0x1e0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d018      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a56      	ldr	r2, [pc, #344]	; (8001cf8 <HAL_DMA_Init+0x1e4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d013      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a54      	ldr	r2, [pc, #336]	; (8001cfc <HAL_DMA_Init+0x1e8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00e      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a53      	ldr	r2, [pc, #332]	; (8001d00 <HAL_DMA_Init+0x1ec>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d009      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a51      	ldr	r2, [pc, #324]	; (8001d04 <HAL_DMA_Init+0x1f0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d004      	beq.n	8001bcc <HAL_DMA_Init+0xb8>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a50      	ldr	r2, [pc, #320]	; (8001d08 <HAL_DMA_Init+0x1f4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d101      	bne.n	8001bd0 <HAL_DMA_Init+0xbc>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_DMA_Init+0xbe>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 813b 	beq.w	8001e4e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a37      	ldr	r2, [pc, #220]	; (8001ccc <HAL_DMA_Init+0x1b8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d04a      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a36      	ldr	r2, [pc, #216]	; (8001cd0 <HAL_DMA_Init+0x1bc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d045      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a34      	ldr	r2, [pc, #208]	; (8001cd4 <HAL_DMA_Init+0x1c0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d040      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <HAL_DMA_Init+0x1c4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d03b      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a31      	ldr	r2, [pc, #196]	; (8001cdc <HAL_DMA_Init+0x1c8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d036      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a30      	ldr	r2, [pc, #192]	; (8001ce0 <HAL_DMA_Init+0x1cc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d031      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2e      	ldr	r2, [pc, #184]	; (8001ce4 <HAL_DMA_Init+0x1d0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d02c      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a2d      	ldr	r2, [pc, #180]	; (8001ce8 <HAL_DMA_Init+0x1d4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d027      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a2b      	ldr	r2, [pc, #172]	; (8001cec <HAL_DMA_Init+0x1d8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d022      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a2a      	ldr	r2, [pc, #168]	; (8001cf0 <HAL_DMA_Init+0x1dc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d01d      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a28      	ldr	r2, [pc, #160]	; (8001cf4 <HAL_DMA_Init+0x1e0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d018      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a27      	ldr	r2, [pc, #156]	; (8001cf8 <HAL_DMA_Init+0x1e4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d013      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a25      	ldr	r2, [pc, #148]	; (8001cfc <HAL_DMA_Init+0x1e8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00e      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <HAL_DMA_Init+0x1ec>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d009      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a22      	ldr	r2, [pc, #136]	; (8001d04 <HAL_DMA_Init+0x1f0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d004      	beq.n	8001c88 <HAL_DMA_Init+0x174>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <HAL_DMA_Init+0x1f4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d108      	bne.n	8001c9a <HAL_DMA_Init+0x186>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e007      	b.n	8001caa <HAL_DMA_Init+0x196>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001caa:	e02f      	b.n	8001d0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cac:	f7ff fdd2 	bl	8001854 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d928      	bls.n	8001d0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e246      	b.n	800215a <HAL_DMA_Init+0x646>
 8001ccc:	40020010 	.word	0x40020010
 8001cd0:	40020028 	.word	0x40020028
 8001cd4:	40020040 	.word	0x40020040
 8001cd8:	40020058 	.word	0x40020058
 8001cdc:	40020070 	.word	0x40020070
 8001ce0:	40020088 	.word	0x40020088
 8001ce4:	400200a0 	.word	0x400200a0
 8001ce8:	400200b8 	.word	0x400200b8
 8001cec:	40020410 	.word	0x40020410
 8001cf0:	40020428 	.word	0x40020428
 8001cf4:	40020440 	.word	0x40020440
 8001cf8:	40020458 	.word	0x40020458
 8001cfc:	40020470 	.word	0x40020470
 8001d00:	40020488 	.word	0x40020488
 8001d04:	400204a0 	.word	0x400204a0
 8001d08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1c8      	bne.n	8001cac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4b83      	ldr	r3, [pc, #524]	; (8001f34 <HAL_DMA_Init+0x420>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d107      	bne.n	8001d70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d70:	4b71      	ldr	r3, [pc, #452]	; (8001f38 <HAL_DMA_Init+0x424>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b71      	ldr	r3, [pc, #452]	; (8001f3c <HAL_DMA_Init+0x428>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d7c:	d328      	bcc.n	8001dd0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b28      	cmp	r3, #40	; 0x28
 8001d84:	d903      	bls.n	8001d8e <HAL_DMA_Init+0x27a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8001d8c:	d917      	bls.n	8001dbe <HAL_DMA_Init+0x2aa>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b3e      	cmp	r3, #62	; 0x3e
 8001d94:	d903      	bls.n	8001d9e <HAL_DMA_Init+0x28a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b42      	cmp	r3, #66	; 0x42
 8001d9c:	d90f      	bls.n	8001dbe <HAL_DMA_Init+0x2aa>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b46      	cmp	r3, #70	; 0x46
 8001da4:	d903      	bls.n	8001dae <HAL_DMA_Init+0x29a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b48      	cmp	r3, #72	; 0x48
 8001dac:	d907      	bls.n	8001dbe <HAL_DMA_Init+0x2aa>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b4e      	cmp	r3, #78	; 0x4e
 8001db4:	d905      	bls.n	8001dc2 <HAL_DMA_Init+0x2ae>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b52      	cmp	r3, #82	; 0x52
 8001dbc:	d801      	bhi.n	8001dc2 <HAL_DMA_Init+0x2ae>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_DMA_Init+0x2b0>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f023 0307 	bic.w	r3, r3, #7
 8001de6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d117      	bne.n	8001e2a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00e      	beq.n	8001e2a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f002 f821 	bl	8003e54 <DMA_CheckFifoParam>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e197      	b.n	800215a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f001 ff5c 	bl	8003cf0 <DMA_CalcBaseAndBitshift>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	223f      	movs	r2, #63	; 0x3f
 8001e46:	409a      	lsls	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	e0cd      	b.n	8001fea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a3b      	ldr	r2, [pc, #236]	; (8001f40 <HAL_DMA_Init+0x42c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_Init+0x38a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a39      	ldr	r2, [pc, #228]	; (8001f44 <HAL_DMA_Init+0x430>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01d      	beq.n	8001e9e <HAL_DMA_Init+0x38a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a38      	ldr	r2, [pc, #224]	; (8001f48 <HAL_DMA_Init+0x434>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d018      	beq.n	8001e9e <HAL_DMA_Init+0x38a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a36      	ldr	r2, [pc, #216]	; (8001f4c <HAL_DMA_Init+0x438>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_DMA_Init+0x38a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a35      	ldr	r2, [pc, #212]	; (8001f50 <HAL_DMA_Init+0x43c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00e      	beq.n	8001e9e <HAL_DMA_Init+0x38a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a33      	ldr	r2, [pc, #204]	; (8001f54 <HAL_DMA_Init+0x440>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d009      	beq.n	8001e9e <HAL_DMA_Init+0x38a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a32      	ldr	r2, [pc, #200]	; (8001f58 <HAL_DMA_Init+0x444>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d004      	beq.n	8001e9e <HAL_DMA_Init+0x38a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <HAL_DMA_Init+0x448>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_DMA_Init+0x38e>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_DMA_Init+0x390>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8097 	beq.w	8001fd8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a24      	ldr	r2, [pc, #144]	; (8001f40 <HAL_DMA_Init+0x42c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d021      	beq.n	8001ef8 <HAL_DMA_Init+0x3e4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <HAL_DMA_Init+0x430>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01c      	beq.n	8001ef8 <HAL_DMA_Init+0x3e4>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <HAL_DMA_Init+0x434>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d017      	beq.n	8001ef8 <HAL_DMA_Init+0x3e4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <HAL_DMA_Init+0x438>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d012      	beq.n	8001ef8 <HAL_DMA_Init+0x3e4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <HAL_DMA_Init+0x43c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_DMA_Init+0x3e4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <HAL_DMA_Init+0x440>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d008      	beq.n	8001ef8 <HAL_DMA_Init+0x3e4>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1b      	ldr	r2, [pc, #108]	; (8001f58 <HAL_DMA_Init+0x444>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d003      	beq.n	8001ef8 <HAL_DMA_Init+0x3e4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <HAL_DMA_Init+0x448>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_DMA_Init+0x44c>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b40      	cmp	r3, #64	; 0x40
 8001f20:	d020      	beq.n	8001f64 <HAL_DMA_Init+0x450>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b80      	cmp	r3, #128	; 0x80
 8001f28:	d102      	bne.n	8001f30 <HAL_DMA_Init+0x41c>
 8001f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f2e:	e01a      	b.n	8001f66 <HAL_DMA_Init+0x452>
 8001f30:	2300      	movs	r3, #0
 8001f32:	e018      	b.n	8001f66 <HAL_DMA_Init+0x452>
 8001f34:	fe10803f 	.word	0xfe10803f
 8001f38:	5c001000 	.word	0x5c001000
 8001f3c:	ffff0000 	.word	0xffff0000
 8001f40:	58025408 	.word	0x58025408
 8001f44:	5802541c 	.word	0x5802541c
 8001f48:	58025430 	.word	0x58025430
 8001f4c:	58025444 	.word	0x58025444
 8001f50:	58025458 	.word	0x58025458
 8001f54:	5802546c 	.word	0x5802546c
 8001f58:	58025480 	.word	0x58025480
 8001f5c:	58025494 	.word	0x58025494
 8001f60:	fffe000f 	.word	0xfffe000f
 8001f64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68d2      	ldr	r2, [r2, #12]
 8001f6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b6e      	ldr	r3, [pc, #440]	; (8002164 <HAL_DMA_Init+0x650>)
 8001fac:	4413      	add	r3, r2
 8001fae:	4a6e      	ldr	r2, [pc, #440]	; (8002168 <HAL_DMA_Init+0x654>)
 8001fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	009a      	lsls	r2, r3, #2
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f001 fe97 	bl	8003cf0 <DMA_CalcBaseAndBitshift>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	2201      	movs	r2, #1
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	e008      	b.n	8001fea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0b7      	b.n	800215a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a5f      	ldr	r2, [pc, #380]	; (800216c <HAL_DMA_Init+0x658>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d072      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a5d      	ldr	r2, [pc, #372]	; (8002170 <HAL_DMA_Init+0x65c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d06d      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a5c      	ldr	r2, [pc, #368]	; (8002174 <HAL_DMA_Init+0x660>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d068      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a5a      	ldr	r2, [pc, #360]	; (8002178 <HAL_DMA_Init+0x664>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d063      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a59      	ldr	r2, [pc, #356]	; (800217c <HAL_DMA_Init+0x668>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d05e      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a57      	ldr	r2, [pc, #348]	; (8002180 <HAL_DMA_Init+0x66c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d059      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a56      	ldr	r2, [pc, #344]	; (8002184 <HAL_DMA_Init+0x670>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d054      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a54      	ldr	r2, [pc, #336]	; (8002188 <HAL_DMA_Init+0x674>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d04f      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a53      	ldr	r2, [pc, #332]	; (800218c <HAL_DMA_Init+0x678>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d04a      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a51      	ldr	r2, [pc, #324]	; (8002190 <HAL_DMA_Init+0x67c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d045      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a50      	ldr	r2, [pc, #320]	; (8002194 <HAL_DMA_Init+0x680>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d040      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a4e      	ldr	r2, [pc, #312]	; (8002198 <HAL_DMA_Init+0x684>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d03b      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a4d      	ldr	r2, [pc, #308]	; (800219c <HAL_DMA_Init+0x688>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d036      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a4b      	ldr	r2, [pc, #300]	; (80021a0 <HAL_DMA_Init+0x68c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d031      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a4a      	ldr	r2, [pc, #296]	; (80021a4 <HAL_DMA_Init+0x690>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d02c      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a48      	ldr	r2, [pc, #288]	; (80021a8 <HAL_DMA_Init+0x694>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d027      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a47      	ldr	r2, [pc, #284]	; (80021ac <HAL_DMA_Init+0x698>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d022      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a45      	ldr	r2, [pc, #276]	; (80021b0 <HAL_DMA_Init+0x69c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01d      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a44      	ldr	r2, [pc, #272]	; (80021b4 <HAL_DMA_Init+0x6a0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d018      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a42      	ldr	r2, [pc, #264]	; (80021b8 <HAL_DMA_Init+0x6a4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a41      	ldr	r2, [pc, #260]	; (80021bc <HAL_DMA_Init+0x6a8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00e      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a3f      	ldr	r2, [pc, #252]	; (80021c0 <HAL_DMA_Init+0x6ac>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d009      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a3e      	ldr	r2, [pc, #248]	; (80021c4 <HAL_DMA_Init+0x6b0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d004      	beq.n	80020da <HAL_DMA_Init+0x5c6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a3c      	ldr	r2, [pc, #240]	; (80021c8 <HAL_DMA_Init+0x6b4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_DMA_Init+0x5ca>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_DMA_Init+0x5cc>
 80020de:	2300      	movs	r3, #0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d032      	beq.n	800214a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f001 ff31 	bl	8003f4c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d102      	bne.n	80020f8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800210c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d010      	beq.n	8002138 <HAL_DMA_Init+0x624>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b08      	cmp	r3, #8
 800211c:	d80c      	bhi.n	8002138 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f001 ffae 	bl	8004080 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	e008      	b.n	800214a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	a7fdabf8 	.word	0xa7fdabf8
 8002168:	cccccccd 	.word	0xcccccccd
 800216c:	40020010 	.word	0x40020010
 8002170:	40020028 	.word	0x40020028
 8002174:	40020040 	.word	0x40020040
 8002178:	40020058 	.word	0x40020058
 800217c:	40020070 	.word	0x40020070
 8002180:	40020088 	.word	0x40020088
 8002184:	400200a0 	.word	0x400200a0
 8002188:	400200b8 	.word	0x400200b8
 800218c:	40020410 	.word	0x40020410
 8002190:	40020428 	.word	0x40020428
 8002194:	40020440 	.word	0x40020440
 8002198:	40020458 	.word	0x40020458
 800219c:	40020470 	.word	0x40020470
 80021a0:	40020488 	.word	0x40020488
 80021a4:	400204a0 	.word	0x400204a0
 80021a8:	400204b8 	.word	0x400204b8
 80021ac:	58025408 	.word	0x58025408
 80021b0:	5802541c 	.word	0x5802541c
 80021b4:	58025430 	.word	0x58025430
 80021b8:	58025444 	.word	0x58025444
 80021bc:	58025458 	.word	0x58025458
 80021c0:	5802546c 	.word	0x5802546c
 80021c4:	58025480 	.word	0x58025480
 80021c8:	58025494 	.word	0x58025494

080021cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e226      	b.n	8002636 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_DMA_Start_IT+0x2a>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e21f      	b.n	8002636 <HAL_DMA_Start_IT+0x46a>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b01      	cmp	r3, #1
 8002208:	f040 820a 	bne.w	8002620 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a68      	ldr	r2, [pc, #416]	; (80023c0 <HAL_DMA_Start_IT+0x1f4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d04a      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a66      	ldr	r2, [pc, #408]	; (80023c4 <HAL_DMA_Start_IT+0x1f8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d045      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a65      	ldr	r2, [pc, #404]	; (80023c8 <HAL_DMA_Start_IT+0x1fc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d040      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a63      	ldr	r2, [pc, #396]	; (80023cc <HAL_DMA_Start_IT+0x200>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d03b      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a62      	ldr	r2, [pc, #392]	; (80023d0 <HAL_DMA_Start_IT+0x204>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d036      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a60      	ldr	r2, [pc, #384]	; (80023d4 <HAL_DMA_Start_IT+0x208>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d031      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a5f      	ldr	r2, [pc, #380]	; (80023d8 <HAL_DMA_Start_IT+0x20c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d02c      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a5d      	ldr	r2, [pc, #372]	; (80023dc <HAL_DMA_Start_IT+0x210>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d027      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a5c      	ldr	r2, [pc, #368]	; (80023e0 <HAL_DMA_Start_IT+0x214>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d022      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a5a      	ldr	r2, [pc, #360]	; (80023e4 <HAL_DMA_Start_IT+0x218>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01d      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a59      	ldr	r2, [pc, #356]	; (80023e8 <HAL_DMA_Start_IT+0x21c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d018      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a57      	ldr	r2, [pc, #348]	; (80023ec <HAL_DMA_Start_IT+0x220>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a56      	ldr	r2, [pc, #344]	; (80023f0 <HAL_DMA_Start_IT+0x224>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d00e      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a54      	ldr	r2, [pc, #336]	; (80023f4 <HAL_DMA_Start_IT+0x228>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d009      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a53      	ldr	r2, [pc, #332]	; (80023f8 <HAL_DMA_Start_IT+0x22c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d004      	beq.n	80022ba <HAL_DMA_Start_IT+0xee>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a51      	ldr	r2, [pc, #324]	; (80023fc <HAL_DMA_Start_IT+0x230>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d108      	bne.n	80022cc <HAL_DMA_Start_IT+0x100>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	e007      	b.n	80022dc <HAL_DMA_Start_IT+0x110>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f001 fb58 	bl	8003998 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a34      	ldr	r2, [pc, #208]	; (80023c0 <HAL_DMA_Start_IT+0x1f4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d04a      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a33      	ldr	r2, [pc, #204]	; (80023c4 <HAL_DMA_Start_IT+0x1f8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d045      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a31      	ldr	r2, [pc, #196]	; (80023c8 <HAL_DMA_Start_IT+0x1fc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d040      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a30      	ldr	r2, [pc, #192]	; (80023cc <HAL_DMA_Start_IT+0x200>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d03b      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a2e      	ldr	r2, [pc, #184]	; (80023d0 <HAL_DMA_Start_IT+0x204>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d036      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a2d      	ldr	r2, [pc, #180]	; (80023d4 <HAL_DMA_Start_IT+0x208>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d031      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a2b      	ldr	r2, [pc, #172]	; (80023d8 <HAL_DMA_Start_IT+0x20c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d02c      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a2a      	ldr	r2, [pc, #168]	; (80023dc <HAL_DMA_Start_IT+0x210>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d027      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a28      	ldr	r2, [pc, #160]	; (80023e0 <HAL_DMA_Start_IT+0x214>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d022      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a27      	ldr	r2, [pc, #156]	; (80023e4 <HAL_DMA_Start_IT+0x218>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d01d      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <HAL_DMA_Start_IT+0x21c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d018      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a24      	ldr	r2, [pc, #144]	; (80023ec <HAL_DMA_Start_IT+0x220>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <HAL_DMA_Start_IT+0x224>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00e      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <HAL_DMA_Start_IT+0x228>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d009      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <HAL_DMA_Start_IT+0x22c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_DMA_Start_IT+0x1bc>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1e      	ldr	r2, [pc, #120]	; (80023fc <HAL_DMA_Start_IT+0x230>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_DMA_Start_IT+0x1c0>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_DMA_Start_IT+0x1c2>
 800238c:	2300      	movs	r3, #0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d036      	beq.n	8002400 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 021e 	bic.w	r2, r3, #30
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0216 	orr.w	r2, r2, #22
 80023a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d03e      	beq.n	800242c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0208 	orr.w	r2, r2, #8
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e035      	b.n	800242c <HAL_DMA_Start_IT+0x260>
 80023c0:	40020010 	.word	0x40020010
 80023c4:	40020028 	.word	0x40020028
 80023c8:	40020040 	.word	0x40020040
 80023cc:	40020058 	.word	0x40020058
 80023d0:	40020070 	.word	0x40020070
 80023d4:	40020088 	.word	0x40020088
 80023d8:	400200a0 	.word	0x400200a0
 80023dc:	400200b8 	.word	0x400200b8
 80023e0:	40020410 	.word	0x40020410
 80023e4:	40020428 	.word	0x40020428
 80023e8:	40020440 	.word	0x40020440
 80023ec:	40020458 	.word	0x40020458
 80023f0:	40020470 	.word	0x40020470
 80023f4:	40020488 	.word	0x40020488
 80023f8:	400204a0 	.word	0x400204a0
 80023fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 020e 	bic.w	r2, r3, #14
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 020a 	orr.w	r2, r2, #10
 8002412:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0204 	orr.w	r2, r2, #4
 800242a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a83      	ldr	r2, [pc, #524]	; (8002640 <HAL_DMA_Start_IT+0x474>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d072      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a82      	ldr	r2, [pc, #520]	; (8002644 <HAL_DMA_Start_IT+0x478>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d06d      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a80      	ldr	r2, [pc, #512]	; (8002648 <HAL_DMA_Start_IT+0x47c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d068      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7f      	ldr	r2, [pc, #508]	; (800264c <HAL_DMA_Start_IT+0x480>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d063      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a7d      	ldr	r2, [pc, #500]	; (8002650 <HAL_DMA_Start_IT+0x484>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d05e      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a7c      	ldr	r2, [pc, #496]	; (8002654 <HAL_DMA_Start_IT+0x488>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d059      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a7a      	ldr	r2, [pc, #488]	; (8002658 <HAL_DMA_Start_IT+0x48c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d054      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a79      	ldr	r2, [pc, #484]	; (800265c <HAL_DMA_Start_IT+0x490>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d04f      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a77      	ldr	r2, [pc, #476]	; (8002660 <HAL_DMA_Start_IT+0x494>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d04a      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a76      	ldr	r2, [pc, #472]	; (8002664 <HAL_DMA_Start_IT+0x498>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d045      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a74      	ldr	r2, [pc, #464]	; (8002668 <HAL_DMA_Start_IT+0x49c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d040      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a73      	ldr	r2, [pc, #460]	; (800266c <HAL_DMA_Start_IT+0x4a0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d03b      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a71      	ldr	r2, [pc, #452]	; (8002670 <HAL_DMA_Start_IT+0x4a4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d036      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a70      	ldr	r2, [pc, #448]	; (8002674 <HAL_DMA_Start_IT+0x4a8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d031      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a6e      	ldr	r2, [pc, #440]	; (8002678 <HAL_DMA_Start_IT+0x4ac>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d02c      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a6d      	ldr	r2, [pc, #436]	; (800267c <HAL_DMA_Start_IT+0x4b0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d027      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6b      	ldr	r2, [pc, #428]	; (8002680 <HAL_DMA_Start_IT+0x4b4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d022      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6a      	ldr	r2, [pc, #424]	; (8002684 <HAL_DMA_Start_IT+0x4b8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d01d      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a68      	ldr	r2, [pc, #416]	; (8002688 <HAL_DMA_Start_IT+0x4bc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d018      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a67      	ldr	r2, [pc, #412]	; (800268c <HAL_DMA_Start_IT+0x4c0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d013      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a65      	ldr	r2, [pc, #404]	; (8002690 <HAL_DMA_Start_IT+0x4c4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00e      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a64      	ldr	r2, [pc, #400]	; (8002694 <HAL_DMA_Start_IT+0x4c8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d009      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a62      	ldr	r2, [pc, #392]	; (8002698 <HAL_DMA_Start_IT+0x4cc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d004      	beq.n	800251c <HAL_DMA_Start_IT+0x350>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a61      	ldr	r2, [pc, #388]	; (800269c <HAL_DMA_Start_IT+0x4d0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_DMA_Start_IT+0x354>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <HAL_DMA_Start_IT+0x356>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01a      	beq.n	800255c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002542:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800255a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a37      	ldr	r2, [pc, #220]	; (8002640 <HAL_DMA_Start_IT+0x474>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d04a      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a36      	ldr	r2, [pc, #216]	; (8002644 <HAL_DMA_Start_IT+0x478>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d045      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a34      	ldr	r2, [pc, #208]	; (8002648 <HAL_DMA_Start_IT+0x47c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d040      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a33      	ldr	r2, [pc, #204]	; (800264c <HAL_DMA_Start_IT+0x480>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d03b      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a31      	ldr	r2, [pc, #196]	; (8002650 <HAL_DMA_Start_IT+0x484>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d036      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a30      	ldr	r2, [pc, #192]	; (8002654 <HAL_DMA_Start_IT+0x488>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d031      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2e      	ldr	r2, [pc, #184]	; (8002658 <HAL_DMA_Start_IT+0x48c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d02c      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2d      	ldr	r2, [pc, #180]	; (800265c <HAL_DMA_Start_IT+0x490>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d027      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2b      	ldr	r2, [pc, #172]	; (8002660 <HAL_DMA_Start_IT+0x494>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d022      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2a      	ldr	r2, [pc, #168]	; (8002664 <HAL_DMA_Start_IT+0x498>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d01d      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a28      	ldr	r2, [pc, #160]	; (8002668 <HAL_DMA_Start_IT+0x49c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d018      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a27      	ldr	r2, [pc, #156]	; (800266c <HAL_DMA_Start_IT+0x4a0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a25      	ldr	r2, [pc, #148]	; (8002670 <HAL_DMA_Start_IT+0x4a4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00e      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a24      	ldr	r2, [pc, #144]	; (8002674 <HAL_DMA_Start_IT+0x4a8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d009      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a22      	ldr	r2, [pc, #136]	; (8002678 <HAL_DMA_Start_IT+0x4ac>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_DMA_Start_IT+0x430>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a21      	ldr	r2, [pc, #132]	; (800267c <HAL_DMA_Start_IT+0x4b0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d108      	bne.n	800260e <HAL_DMA_Start_IT+0x442>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e012      	b.n	8002634 <HAL_DMA_Start_IT+0x468>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e009      	b.n	8002634 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002626:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002634:	7dfb      	ldrb	r3, [r7, #23]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40020010 	.word	0x40020010
 8002644:	40020028 	.word	0x40020028
 8002648:	40020040 	.word	0x40020040
 800264c:	40020058 	.word	0x40020058
 8002650:	40020070 	.word	0x40020070
 8002654:	40020088 	.word	0x40020088
 8002658:	400200a0 	.word	0x400200a0
 800265c:	400200b8 	.word	0x400200b8
 8002660:	40020410 	.word	0x40020410
 8002664:	40020428 	.word	0x40020428
 8002668:	40020440 	.word	0x40020440
 800266c:	40020458 	.word	0x40020458
 8002670:	40020470 	.word	0x40020470
 8002674:	40020488 	.word	0x40020488
 8002678:	400204a0 	.word	0x400204a0
 800267c:	400204b8 	.word	0x400204b8
 8002680:	58025408 	.word	0x58025408
 8002684:	5802541c 	.word	0x5802541c
 8002688:	58025430 	.word	0x58025430
 800268c:	58025444 	.word	0x58025444
 8002690:	58025458 	.word	0x58025458
 8002694:	5802546c 	.word	0x5802546c
 8002698:	58025480 	.word	0x58025480
 800269c:	58025494 	.word	0x58025494

080026a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e237      	b.n	8002b22 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d004      	beq.n	80026c8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e22c      	b.n	8002b22 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a5c      	ldr	r2, [pc, #368]	; (8002840 <HAL_DMA_Abort_IT+0x1a0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d04a      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a5b      	ldr	r2, [pc, #364]	; (8002844 <HAL_DMA_Abort_IT+0x1a4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d045      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a59      	ldr	r2, [pc, #356]	; (8002848 <HAL_DMA_Abort_IT+0x1a8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d040      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_DMA_Abort_IT+0x1ac>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d03b      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a56      	ldr	r2, [pc, #344]	; (8002850 <HAL_DMA_Abort_IT+0x1b0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d036      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a55      	ldr	r2, [pc, #340]	; (8002854 <HAL_DMA_Abort_IT+0x1b4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d031      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a53      	ldr	r2, [pc, #332]	; (8002858 <HAL_DMA_Abort_IT+0x1b8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d02c      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a52      	ldr	r2, [pc, #328]	; (800285c <HAL_DMA_Abort_IT+0x1bc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d027      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a50      	ldr	r2, [pc, #320]	; (8002860 <HAL_DMA_Abort_IT+0x1c0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d022      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a4f      	ldr	r2, [pc, #316]	; (8002864 <HAL_DMA_Abort_IT+0x1c4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d01d      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a4d      	ldr	r2, [pc, #308]	; (8002868 <HAL_DMA_Abort_IT+0x1c8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d018      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4c      	ldr	r2, [pc, #304]	; (800286c <HAL_DMA_Abort_IT+0x1cc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d013      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a4a      	ldr	r2, [pc, #296]	; (8002870 <HAL_DMA_Abort_IT+0x1d0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00e      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a49      	ldr	r2, [pc, #292]	; (8002874 <HAL_DMA_Abort_IT+0x1d4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d009      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a47      	ldr	r2, [pc, #284]	; (8002878 <HAL_DMA_Abort_IT+0x1d8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a46      	ldr	r2, [pc, #280]	; (800287c <HAL_DMA_Abort_IT+0x1dc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_DMA_Abort_IT+0xcc>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <HAL_DMA_Abort_IT+0xce>
 800276c:	2300      	movs	r3, #0
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8086 	beq.w	8002880 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2204      	movs	r2, #4
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a2f      	ldr	r2, [pc, #188]	; (8002840 <HAL_DMA_Abort_IT+0x1a0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d04a      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a2e      	ldr	r2, [pc, #184]	; (8002844 <HAL_DMA_Abort_IT+0x1a4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d045      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2c      	ldr	r2, [pc, #176]	; (8002848 <HAL_DMA_Abort_IT+0x1a8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d040      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2b      	ldr	r2, [pc, #172]	; (800284c <HAL_DMA_Abort_IT+0x1ac>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d03b      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a29      	ldr	r2, [pc, #164]	; (8002850 <HAL_DMA_Abort_IT+0x1b0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d036      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a28      	ldr	r2, [pc, #160]	; (8002854 <HAL_DMA_Abort_IT+0x1b4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d031      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a26      	ldr	r2, [pc, #152]	; (8002858 <HAL_DMA_Abort_IT+0x1b8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d02c      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a25      	ldr	r2, [pc, #148]	; (800285c <HAL_DMA_Abort_IT+0x1bc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d027      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a23      	ldr	r2, [pc, #140]	; (8002860 <HAL_DMA_Abort_IT+0x1c0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d022      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a22      	ldr	r2, [pc, #136]	; (8002864 <HAL_DMA_Abort_IT+0x1c4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d01d      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a20      	ldr	r2, [pc, #128]	; (8002868 <HAL_DMA_Abort_IT+0x1c8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d018      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1f      	ldr	r2, [pc, #124]	; (800286c <HAL_DMA_Abort_IT+0x1cc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d013      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_DMA_Abort_IT+0x1d0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00e      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_DMA_Abort_IT+0x1d4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d009      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <HAL_DMA_Abort_IT+0x1d8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d004      	beq.n	800281c <HAL_DMA_Abort_IT+0x17c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_DMA_Abort_IT+0x1dc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d108      	bne.n	800282e <HAL_DMA_Abort_IT+0x18e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0201 	bic.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e178      	b.n	8002b20 <HAL_DMA_Abort_IT+0x480>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e16f      	b.n	8002b20 <HAL_DMA_Abort_IT+0x480>
 8002840:	40020010 	.word	0x40020010
 8002844:	40020028 	.word	0x40020028
 8002848:	40020040 	.word	0x40020040
 800284c:	40020058 	.word	0x40020058
 8002850:	40020070 	.word	0x40020070
 8002854:	40020088 	.word	0x40020088
 8002858:	400200a0 	.word	0x400200a0
 800285c:	400200b8 	.word	0x400200b8
 8002860:	40020410 	.word	0x40020410
 8002864:	40020428 	.word	0x40020428
 8002868:	40020440 	.word	0x40020440
 800286c:	40020458 	.word	0x40020458
 8002870:	40020470 	.word	0x40020470
 8002874:	40020488 	.word	0x40020488
 8002878:	400204a0 	.word	0x400204a0
 800287c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 020e 	bic.w	r2, r2, #14
 800288e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a6c      	ldr	r2, [pc, #432]	; (8002a48 <HAL_DMA_Abort_IT+0x3a8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d04a      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a6b      	ldr	r2, [pc, #428]	; (8002a4c <HAL_DMA_Abort_IT+0x3ac>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d045      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a69      	ldr	r2, [pc, #420]	; (8002a50 <HAL_DMA_Abort_IT+0x3b0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d040      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a68      	ldr	r2, [pc, #416]	; (8002a54 <HAL_DMA_Abort_IT+0x3b4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d03b      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a66      	ldr	r2, [pc, #408]	; (8002a58 <HAL_DMA_Abort_IT+0x3b8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d036      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a65      	ldr	r2, [pc, #404]	; (8002a5c <HAL_DMA_Abort_IT+0x3bc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d031      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a63      	ldr	r2, [pc, #396]	; (8002a60 <HAL_DMA_Abort_IT+0x3c0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d02c      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a62      	ldr	r2, [pc, #392]	; (8002a64 <HAL_DMA_Abort_IT+0x3c4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d027      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a60      	ldr	r2, [pc, #384]	; (8002a68 <HAL_DMA_Abort_IT+0x3c8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d022      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_DMA_Abort_IT+0x3cc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d01d      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a5d      	ldr	r2, [pc, #372]	; (8002a70 <HAL_DMA_Abort_IT+0x3d0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d018      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a5c      	ldr	r2, [pc, #368]	; (8002a74 <HAL_DMA_Abort_IT+0x3d4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d013      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a5a      	ldr	r2, [pc, #360]	; (8002a78 <HAL_DMA_Abort_IT+0x3d8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00e      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a59      	ldr	r2, [pc, #356]	; (8002a7c <HAL_DMA_Abort_IT+0x3dc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a57      	ldr	r2, [pc, #348]	; (8002a80 <HAL_DMA_Abort_IT+0x3e0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d004      	beq.n	8002930 <HAL_DMA_Abort_IT+0x290>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a56      	ldr	r2, [pc, #344]	; (8002a84 <HAL_DMA_Abort_IT+0x3e4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d108      	bne.n	8002942 <HAL_DMA_Abort_IT+0x2a2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e007      	b.n	8002952 <HAL_DMA_Abort_IT+0x2b2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a3c      	ldr	r2, [pc, #240]	; (8002a48 <HAL_DMA_Abort_IT+0x3a8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d072      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a3a      	ldr	r2, [pc, #232]	; (8002a4c <HAL_DMA_Abort_IT+0x3ac>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d06d      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a39      	ldr	r2, [pc, #228]	; (8002a50 <HAL_DMA_Abort_IT+0x3b0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d068      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a37      	ldr	r2, [pc, #220]	; (8002a54 <HAL_DMA_Abort_IT+0x3b4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d063      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a36      	ldr	r2, [pc, #216]	; (8002a58 <HAL_DMA_Abort_IT+0x3b8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d05e      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a34      	ldr	r2, [pc, #208]	; (8002a5c <HAL_DMA_Abort_IT+0x3bc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d059      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a33      	ldr	r2, [pc, #204]	; (8002a60 <HAL_DMA_Abort_IT+0x3c0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d054      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a31      	ldr	r2, [pc, #196]	; (8002a64 <HAL_DMA_Abort_IT+0x3c4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d04f      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a30      	ldr	r2, [pc, #192]	; (8002a68 <HAL_DMA_Abort_IT+0x3c8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d04a      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2e      	ldr	r2, [pc, #184]	; (8002a6c <HAL_DMA_Abort_IT+0x3cc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d045      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2d      	ldr	r2, [pc, #180]	; (8002a70 <HAL_DMA_Abort_IT+0x3d0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d040      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a2b      	ldr	r2, [pc, #172]	; (8002a74 <HAL_DMA_Abort_IT+0x3d4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d03b      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a2a      	ldr	r2, [pc, #168]	; (8002a78 <HAL_DMA_Abort_IT+0x3d8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d036      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a28      	ldr	r2, [pc, #160]	; (8002a7c <HAL_DMA_Abort_IT+0x3dc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d031      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_DMA_Abort_IT+0x3e0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d02c      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a25      	ldr	r2, [pc, #148]	; (8002a84 <HAL_DMA_Abort_IT+0x3e4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d027      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a24      	ldr	r2, [pc, #144]	; (8002a88 <HAL_DMA_Abort_IT+0x3e8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d022      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a22      	ldr	r2, [pc, #136]	; (8002a8c <HAL_DMA_Abort_IT+0x3ec>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01d      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a21      	ldr	r2, [pc, #132]	; (8002a90 <HAL_DMA_Abort_IT+0x3f0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d018      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1f      	ldr	r2, [pc, #124]	; (8002a94 <HAL_DMA_Abort_IT+0x3f4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <HAL_DMA_Abort_IT+0x3f8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00e      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <HAL_DMA_Abort_IT+0x3fc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d009      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <HAL_DMA_Abort_IT+0x400>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d004      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x3a2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <HAL_DMA_Abort_IT+0x404>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d132      	bne.n	8002aa8 <HAL_DMA_Abort_IT+0x408>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e031      	b.n	8002aaa <HAL_DMA_Abort_IT+0x40a>
 8002a46:	bf00      	nop
 8002a48:	40020010 	.word	0x40020010
 8002a4c:	40020028 	.word	0x40020028
 8002a50:	40020040 	.word	0x40020040
 8002a54:	40020058 	.word	0x40020058
 8002a58:	40020070 	.word	0x40020070
 8002a5c:	40020088 	.word	0x40020088
 8002a60:	400200a0 	.word	0x400200a0
 8002a64:	400200b8 	.word	0x400200b8
 8002a68:	40020410 	.word	0x40020410
 8002a6c:	40020428 	.word	0x40020428
 8002a70:	40020440 	.word	0x40020440
 8002a74:	40020458 	.word	0x40020458
 8002a78:	40020470 	.word	0x40020470
 8002a7c:	40020488 	.word	0x40020488
 8002a80:	400204a0 	.word	0x400204a0
 8002a84:	400204b8 	.word	0x400204b8
 8002a88:	58025408 	.word	0x58025408
 8002a8c:	5802541c 	.word	0x5802541c
 8002a90:	58025430 	.word	0x58025430
 8002a94:	58025444 	.word	0x58025444
 8002a98:	58025458 	.word	0x58025458
 8002a9c:	5802546c 	.word	0x5802546c
 8002aa0:	58025480 	.word	0x58025480
 8002aa4:	58025494 	.word	0x58025494
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d028      	beq.n	8002b00 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002abc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	2201      	movs	r2, #1
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002adc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00c      	beq.n	8002b00 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002af4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002afe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop

08002b2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b38:	4b67      	ldr	r3, [pc, #412]	; (8002cd8 <HAL_DMA_IRQHandler+0x1ac>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a67      	ldr	r2, [pc, #412]	; (8002cdc <HAL_DMA_IRQHandler+0x1b0>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	0a9b      	lsrs	r3, r3, #10
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a5f      	ldr	r2, [pc, #380]	; (8002ce0 <HAL_DMA_IRQHandler+0x1b4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d04a      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a5d      	ldr	r2, [pc, #372]	; (8002ce4 <HAL_DMA_IRQHandler+0x1b8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d045      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a5c      	ldr	r2, [pc, #368]	; (8002ce8 <HAL_DMA_IRQHandler+0x1bc>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d040      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a5a      	ldr	r2, [pc, #360]	; (8002cec <HAL_DMA_IRQHandler+0x1c0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d03b      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a59      	ldr	r2, [pc, #356]	; (8002cf0 <HAL_DMA_IRQHandler+0x1c4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d036      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a57      	ldr	r2, [pc, #348]	; (8002cf4 <HAL_DMA_IRQHandler+0x1c8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d031      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a56      	ldr	r2, [pc, #344]	; (8002cf8 <HAL_DMA_IRQHandler+0x1cc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d02c      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a54      	ldr	r2, [pc, #336]	; (8002cfc <HAL_DMA_IRQHandler+0x1d0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d027      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a53      	ldr	r2, [pc, #332]	; (8002d00 <HAL_DMA_IRQHandler+0x1d4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d022      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a51      	ldr	r2, [pc, #324]	; (8002d04 <HAL_DMA_IRQHandler+0x1d8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01d      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a50      	ldr	r2, [pc, #320]	; (8002d08 <HAL_DMA_IRQHandler+0x1dc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d018      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a4e      	ldr	r2, [pc, #312]	; (8002d0c <HAL_DMA_IRQHandler+0x1e0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a4d      	ldr	r2, [pc, #308]	; (8002d10 <HAL_DMA_IRQHandler+0x1e4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00e      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a4b      	ldr	r2, [pc, #300]	; (8002d14 <HAL_DMA_IRQHandler+0x1e8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d009      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a4a      	ldr	r2, [pc, #296]	; (8002d18 <HAL_DMA_IRQHandler+0x1ec>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d004      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xd2>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a48      	ldr	r2, [pc, #288]	; (8002d1c <HAL_DMA_IRQHandler+0x1f0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_DMA_IRQHandler+0xd6>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_DMA_IRQHandler+0xd8>
 8002c02:	2300      	movs	r3, #0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 842b 	beq.w	8003460 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	2208      	movs	r2, #8
 8002c14:	409a      	lsls	r2, r3
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80a2 	beq.w	8002d64 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2e      	ldr	r2, [pc, #184]	; (8002ce0 <HAL_DMA_IRQHandler+0x1b4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d04a      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a2d      	ldr	r2, [pc, #180]	; (8002ce4 <HAL_DMA_IRQHandler+0x1b8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d045      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2b      	ldr	r2, [pc, #172]	; (8002ce8 <HAL_DMA_IRQHandler+0x1bc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d040      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2a      	ldr	r2, [pc, #168]	; (8002cec <HAL_DMA_IRQHandler+0x1c0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d03b      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a28      	ldr	r2, [pc, #160]	; (8002cf0 <HAL_DMA_IRQHandler+0x1c4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d036      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a27      	ldr	r2, [pc, #156]	; (8002cf4 <HAL_DMA_IRQHandler+0x1c8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d031      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <HAL_DMA_IRQHandler+0x1cc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d02c      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <HAL_DMA_IRQHandler+0x1d0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d027      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <HAL_DMA_IRQHandler+0x1d4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d022      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <HAL_DMA_IRQHandler+0x1d8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d01d      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <HAL_DMA_IRQHandler+0x1dc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d018      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <HAL_DMA_IRQHandler+0x1e0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d013      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <HAL_DMA_IRQHandler+0x1e4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00e      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <HAL_DMA_IRQHandler+0x1e8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d009      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a19      	ldr	r2, [pc, #100]	; (8002d18 <HAL_DMA_IRQHandler+0x1ec>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d004      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x194>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <HAL_DMA_IRQHandler+0x1f0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d12f      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x1f4>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf14      	ite	ne
 8002cce:	2301      	movne	r3, #1
 8002cd0:	2300      	moveq	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	e02e      	b.n	8002d34 <HAL_DMA_IRQHandler+0x208>
 8002cd6:	bf00      	nop
 8002cd8:	24000000 	.word	0x24000000
 8002cdc:	1b4e81b5 	.word	0x1b4e81b5
 8002ce0:	40020010 	.word	0x40020010
 8002ce4:	40020028 	.word	0x40020028
 8002ce8:	40020040 	.word	0x40020040
 8002cec:	40020058 	.word	0x40020058
 8002cf0:	40020070 	.word	0x40020070
 8002cf4:	40020088 	.word	0x40020088
 8002cf8:	400200a0 	.word	0x400200a0
 8002cfc:	400200b8 	.word	0x400200b8
 8002d00:	40020410 	.word	0x40020410
 8002d04:	40020428 	.word	0x40020428
 8002d08:	40020440 	.word	0x40020440
 8002d0c:	40020458 	.word	0x40020458
 8002d10:	40020470 	.word	0x40020470
 8002d14:	40020488 	.word	0x40020488
 8002d18:	400204a0 	.word	0x400204a0
 8002d1c:	400204b8 	.word	0x400204b8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bf14      	ite	ne
 8002d2e:	2301      	movne	r3, #1
 8002d30:	2300      	moveq	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d015      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0204 	bic.w	r2, r2, #4
 8002d46:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2208      	movs	r2, #8
 8002d52:	409a      	lsls	r2, r3
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d06e      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a69      	ldr	r2, [pc, #420]	; (8002f24 <HAL_DMA_IRQHandler+0x3f8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d04a      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a67      	ldr	r2, [pc, #412]	; (8002f28 <HAL_DMA_IRQHandler+0x3fc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d045      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a66      	ldr	r2, [pc, #408]	; (8002f2c <HAL_DMA_IRQHandler+0x400>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d040      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a64      	ldr	r2, [pc, #400]	; (8002f30 <HAL_DMA_IRQHandler+0x404>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d03b      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a63      	ldr	r2, [pc, #396]	; (8002f34 <HAL_DMA_IRQHandler+0x408>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d036      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a61      	ldr	r2, [pc, #388]	; (8002f38 <HAL_DMA_IRQHandler+0x40c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d031      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a60      	ldr	r2, [pc, #384]	; (8002f3c <HAL_DMA_IRQHandler+0x410>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d02c      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a5e      	ldr	r2, [pc, #376]	; (8002f40 <HAL_DMA_IRQHandler+0x414>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d027      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a5d      	ldr	r2, [pc, #372]	; (8002f44 <HAL_DMA_IRQHandler+0x418>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d022      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a5b      	ldr	r2, [pc, #364]	; (8002f48 <HAL_DMA_IRQHandler+0x41c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d01d      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a5a      	ldr	r2, [pc, #360]	; (8002f4c <HAL_DMA_IRQHandler+0x420>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d018      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a58      	ldr	r2, [pc, #352]	; (8002f50 <HAL_DMA_IRQHandler+0x424>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <HAL_DMA_IRQHandler+0x428>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a55      	ldr	r2, [pc, #340]	; (8002f58 <HAL_DMA_IRQHandler+0x42c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d009      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a54      	ldr	r2, [pc, #336]	; (8002f5c <HAL_DMA_IRQHandler+0x430>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2ee>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a52      	ldr	r2, [pc, #328]	; (8002f60 <HAL_DMA_IRQHandler+0x434>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10a      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x304>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf14      	ite	ne
 8002e28:	2301      	movne	r3, #1
 8002e2a:	2300      	moveq	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e003      	b.n	8002e38 <HAL_DMA_IRQHandler+0x30c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2300      	movs	r3, #0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00d      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2201      	movs	r2, #1
 8002e46:	409a      	lsls	r2, r3
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	f043 0202 	orr.w	r2, r3, #2
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2204      	movs	r2, #4
 8002e62:	409a      	lsls	r2, r3
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 808f 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2c      	ldr	r2, [pc, #176]	; (8002f24 <HAL_DMA_IRQHandler+0x3f8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d04a      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2a      	ldr	r2, [pc, #168]	; (8002f28 <HAL_DMA_IRQHandler+0x3fc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d045      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <HAL_DMA_IRQHandler+0x400>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d040      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a27      	ldr	r2, [pc, #156]	; (8002f30 <HAL_DMA_IRQHandler+0x404>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d03b      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <HAL_DMA_IRQHandler+0x408>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d036      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_DMA_IRQHandler+0x40c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d031      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a23      	ldr	r2, [pc, #140]	; (8002f3c <HAL_DMA_IRQHandler+0x410>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d02c      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a21      	ldr	r2, [pc, #132]	; (8002f40 <HAL_DMA_IRQHandler+0x414>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d027      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a20      	ldr	r2, [pc, #128]	; (8002f44 <HAL_DMA_IRQHandler+0x418>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d022      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1e      	ldr	r2, [pc, #120]	; (8002f48 <HAL_DMA_IRQHandler+0x41c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01d      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <HAL_DMA_IRQHandler+0x420>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d018      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <HAL_DMA_IRQHandler+0x424>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d013      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <HAL_DMA_IRQHandler+0x428>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00e      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <HAL_DMA_IRQHandler+0x42c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <HAL_DMA_IRQHandler+0x430>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d004      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x3e2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <HAL_DMA_IRQHandler+0x434>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d12a      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x438>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e023      	b.n	8002f6c <HAL_DMA_IRQHandler+0x440>
 8002f24:	40020010 	.word	0x40020010
 8002f28:	40020028 	.word	0x40020028
 8002f2c:	40020040 	.word	0x40020040
 8002f30:	40020058 	.word	0x40020058
 8002f34:	40020070 	.word	0x40020070
 8002f38:	40020088 	.word	0x40020088
 8002f3c:	400200a0 	.word	0x400200a0
 8002f40:	400200b8 	.word	0x400200b8
 8002f44:	40020410 	.word	0x40020410
 8002f48:	40020428 	.word	0x40020428
 8002f4c:	40020440 	.word	0x40020440
 8002f50:	40020458 	.word	0x40020458
 8002f54:	40020470 	.word	0x40020470
 8002f58:	40020488 	.word	0x40020488
 8002f5c:	400204a0 	.word	0x400204a0
 8002f60:	400204b8 	.word	0x400204b8
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00d      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	2204      	movs	r2, #4
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f043 0204 	orr.w	r2, r3, #4
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	2210      	movs	r2, #16
 8002f96:	409a      	lsls	r2, r3
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 80a6 	beq.w	80030ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a85      	ldr	r2, [pc, #532]	; (80031bc <HAL_DMA_IRQHandler+0x690>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d04a      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a83      	ldr	r2, [pc, #524]	; (80031c0 <HAL_DMA_IRQHandler+0x694>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d045      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a82      	ldr	r2, [pc, #520]	; (80031c4 <HAL_DMA_IRQHandler+0x698>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d040      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a80      	ldr	r2, [pc, #512]	; (80031c8 <HAL_DMA_IRQHandler+0x69c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d03b      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a7f      	ldr	r2, [pc, #508]	; (80031cc <HAL_DMA_IRQHandler+0x6a0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d036      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a7d      	ldr	r2, [pc, #500]	; (80031d0 <HAL_DMA_IRQHandler+0x6a4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d031      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7c      	ldr	r2, [pc, #496]	; (80031d4 <HAL_DMA_IRQHandler+0x6a8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d02c      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a7a      	ldr	r2, [pc, #488]	; (80031d8 <HAL_DMA_IRQHandler+0x6ac>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d027      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a79      	ldr	r2, [pc, #484]	; (80031dc <HAL_DMA_IRQHandler+0x6b0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d022      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a77      	ldr	r2, [pc, #476]	; (80031e0 <HAL_DMA_IRQHandler+0x6b4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01d      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a76      	ldr	r2, [pc, #472]	; (80031e4 <HAL_DMA_IRQHandler+0x6b8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d018      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a74      	ldr	r2, [pc, #464]	; (80031e8 <HAL_DMA_IRQHandler+0x6bc>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a73      	ldr	r2, [pc, #460]	; (80031ec <HAL_DMA_IRQHandler+0x6c0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00e      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a71      	ldr	r2, [pc, #452]	; (80031f0 <HAL_DMA_IRQHandler+0x6c4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d009      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a70      	ldr	r2, [pc, #448]	; (80031f4 <HAL_DMA_IRQHandler+0x6c8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <HAL_DMA_IRQHandler+0x516>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a6e      	ldr	r2, [pc, #440]	; (80031f8 <HAL_DMA_IRQHandler+0x6cc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10a      	bne.n	8003058 <HAL_DMA_IRQHandler+0x52c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf14      	ite	ne
 8003050:	2301      	movne	r3, #1
 8003052:	2300      	moveq	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	e009      	b.n	800306c <HAL_DMA_IRQHandler+0x540>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d03e      	beq.n	80030ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2210      	movs	r2, #16
 800307a:	409a      	lsls	r2, r3
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d018      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d108      	bne.n	80030ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d024      	beq.n	80030ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
 80030ac:	e01f      	b.n	80030ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01b      	beq.n	80030ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
 80030be:	e016      	b.n	80030ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d107      	bne.n	80030de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0208 	bic.w	r2, r2, #8
 80030dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	2220      	movs	r2, #32
 80030f8:	409a      	lsls	r2, r3
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8110 	beq.w	8003324 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a2c      	ldr	r2, [pc, #176]	; (80031bc <HAL_DMA_IRQHandler+0x690>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d04a      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <HAL_DMA_IRQHandler+0x694>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d045      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <HAL_DMA_IRQHandler+0x698>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d040      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a28      	ldr	r2, [pc, #160]	; (80031c8 <HAL_DMA_IRQHandler+0x69c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d03b      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a26      	ldr	r2, [pc, #152]	; (80031cc <HAL_DMA_IRQHandler+0x6a0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d036      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a25      	ldr	r2, [pc, #148]	; (80031d0 <HAL_DMA_IRQHandler+0x6a4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d031      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a23      	ldr	r2, [pc, #140]	; (80031d4 <HAL_DMA_IRQHandler+0x6a8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d02c      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a22      	ldr	r2, [pc, #136]	; (80031d8 <HAL_DMA_IRQHandler+0x6ac>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d027      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a20      	ldr	r2, [pc, #128]	; (80031dc <HAL_DMA_IRQHandler+0x6b0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d022      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <HAL_DMA_IRQHandler+0x6b4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d01d      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <HAL_DMA_IRQHandler+0x6b8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d018      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1c      	ldr	r2, [pc, #112]	; (80031e8 <HAL_DMA_IRQHandler+0x6bc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d013      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1a      	ldr	r2, [pc, #104]	; (80031ec <HAL_DMA_IRQHandler+0x6c0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00e      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <HAL_DMA_IRQHandler+0x6c4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d009      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <HAL_DMA_IRQHandler+0x6c8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x678>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a16      	ldr	r2, [pc, #88]	; (80031f8 <HAL_DMA_IRQHandler+0x6cc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d12b      	bne.n	80031fc <HAL_DMA_IRQHandler+0x6d0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	e02a      	b.n	8003210 <HAL_DMA_IRQHandler+0x6e4>
 80031ba:	bf00      	nop
 80031bc:	40020010 	.word	0x40020010
 80031c0:	40020028 	.word	0x40020028
 80031c4:	40020040 	.word	0x40020040
 80031c8:	40020058 	.word	0x40020058
 80031cc:	40020070 	.word	0x40020070
 80031d0:	40020088 	.word	0x40020088
 80031d4:	400200a0 	.word	0x400200a0
 80031d8:	400200b8 	.word	0x400200b8
 80031dc:	40020410 	.word	0x40020410
 80031e0:	40020428 	.word	0x40020428
 80031e4:	40020440 	.word	0x40020440
 80031e8:	40020458 	.word	0x40020458
 80031ec:	40020470 	.word	0x40020470
 80031f0:	40020488 	.word	0x40020488
 80031f4:	400204a0 	.word	0x400204a0
 80031f8:	400204b8 	.word	0x400204b8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	bf14      	ite	ne
 800320a:	2301      	movne	r3, #1
 800320c:	2300      	moveq	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8087 	beq.w	8003324 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2220      	movs	r2, #32
 8003220:	409a      	lsls	r2, r3
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b04      	cmp	r3, #4
 8003230:	d139      	bne.n	80032a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0216 	bic.w	r2, r2, #22
 8003240:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003250:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_DMA_IRQHandler+0x736>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0208 	bic.w	r2, r2, #8
 8003270:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	223f      	movs	r2, #63	; 0x3f
 800327c:	409a      	lsls	r2, r3
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 834a 	beq.w	8003930 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
          }
          return;
 80032a4:	e344      	b.n	8003930 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d018      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d108      	bne.n	80032d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d02c      	beq.n	8003324 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
 80032d2:	e027      	b.n	8003324 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d023      	beq.n	8003324 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
 80032e4:	e01e      	b.n	8003324 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10f      	bne.n	8003314 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0210 	bic.w	r2, r2, #16
 8003302:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8306 	beq.w	800393a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8088 	beq.w	800344c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2204      	movs	r2, #4
 8003340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a7a      	ldr	r2, [pc, #488]	; (8003534 <HAL_DMA_IRQHandler+0xa08>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d04a      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a79      	ldr	r2, [pc, #484]	; (8003538 <HAL_DMA_IRQHandler+0xa0c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d045      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a77      	ldr	r2, [pc, #476]	; (800353c <HAL_DMA_IRQHandler+0xa10>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d040      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a76      	ldr	r2, [pc, #472]	; (8003540 <HAL_DMA_IRQHandler+0xa14>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d03b      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a74      	ldr	r2, [pc, #464]	; (8003544 <HAL_DMA_IRQHandler+0xa18>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d036      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a73      	ldr	r2, [pc, #460]	; (8003548 <HAL_DMA_IRQHandler+0xa1c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d031      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a71      	ldr	r2, [pc, #452]	; (800354c <HAL_DMA_IRQHandler+0xa20>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02c      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a70      	ldr	r2, [pc, #448]	; (8003550 <HAL_DMA_IRQHandler+0xa24>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d027      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6e      	ldr	r2, [pc, #440]	; (8003554 <HAL_DMA_IRQHandler+0xa28>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d022      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a6d      	ldr	r2, [pc, #436]	; (8003558 <HAL_DMA_IRQHandler+0xa2c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d01d      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a6b      	ldr	r2, [pc, #428]	; (800355c <HAL_DMA_IRQHandler+0xa30>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d018      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6a      	ldr	r2, [pc, #424]	; (8003560 <HAL_DMA_IRQHandler+0xa34>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d013      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a68      	ldr	r2, [pc, #416]	; (8003564 <HAL_DMA_IRQHandler+0xa38>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00e      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a67      	ldr	r2, [pc, #412]	; (8003568 <HAL_DMA_IRQHandler+0xa3c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d009      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a65      	ldr	r2, [pc, #404]	; (800356c <HAL_DMA_IRQHandler+0xa40>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x8b8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a64      	ldr	r2, [pc, #400]	; (8003570 <HAL_DMA_IRQHandler+0xa44>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d108      	bne.n	80033f6 <HAL_DMA_IRQHandler+0x8ca>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e007      	b.n	8003406 <HAL_DMA_IRQHandler+0x8da>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3301      	adds	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340e:	429a      	cmp	r2, r3
 8003410:	d307      	bcc.n	8003422 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f2      	bne.n	8003406 <HAL_DMA_IRQHandler+0x8da>
 8003420:	e000      	b.n	8003424 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003422:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d004      	beq.n	800343c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2203      	movs	r2, #3
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800343a:	e003      	b.n	8003444 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8272 	beq.w	800393a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
 800345e:	e26c      	b.n	800393a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a43      	ldr	r2, [pc, #268]	; (8003574 <HAL_DMA_IRQHandler+0xa48>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d022      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x984>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a42      	ldr	r2, [pc, #264]	; (8003578 <HAL_DMA_IRQHandler+0xa4c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d01d      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x984>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a40      	ldr	r2, [pc, #256]	; (800357c <HAL_DMA_IRQHandler+0xa50>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d018      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x984>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a3f      	ldr	r2, [pc, #252]	; (8003580 <HAL_DMA_IRQHandler+0xa54>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d013      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x984>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3d      	ldr	r2, [pc, #244]	; (8003584 <HAL_DMA_IRQHandler+0xa58>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00e      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x984>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a3c      	ldr	r2, [pc, #240]	; (8003588 <HAL_DMA_IRQHandler+0xa5c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x984>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a3a      	ldr	r2, [pc, #232]	; (800358c <HAL_DMA_IRQHandler+0xa60>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x984>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <HAL_DMA_IRQHandler+0xa64>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d101      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x988>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_DMA_IRQHandler+0x98a>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 823f 	beq.w	800393a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	2204      	movs	r2, #4
 80034ce:	409a      	lsls	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80cd 	beq.w	8003674 <HAL_DMA_IRQHandler+0xb48>
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80c7 	beq.w	8003674 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2204      	movs	r2, #4
 80034f0:	409a      	lsls	r2, r3
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d049      	beq.n	8003594 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8210 	beq.w	8003934 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800351c:	e20a      	b.n	8003934 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 8206 	beq.w	8003934 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003530:	e200      	b.n	8003934 <HAL_DMA_IRQHandler+0xe08>
 8003532:	bf00      	nop
 8003534:	40020010 	.word	0x40020010
 8003538:	40020028 	.word	0x40020028
 800353c:	40020040 	.word	0x40020040
 8003540:	40020058 	.word	0x40020058
 8003544:	40020070 	.word	0x40020070
 8003548:	40020088 	.word	0x40020088
 800354c:	400200a0 	.word	0x400200a0
 8003550:	400200b8 	.word	0x400200b8
 8003554:	40020410 	.word	0x40020410
 8003558:	40020428 	.word	0x40020428
 800355c:	40020440 	.word	0x40020440
 8003560:	40020458 	.word	0x40020458
 8003564:	40020470 	.word	0x40020470
 8003568:	40020488 	.word	0x40020488
 800356c:	400204a0 	.word	0x400204a0
 8003570:	400204b8 	.word	0x400204b8
 8003574:	58025408 	.word	0x58025408
 8003578:	5802541c 	.word	0x5802541c
 800357c:	58025430 	.word	0x58025430
 8003580:	58025444 	.word	0x58025444
 8003584:	58025458 	.word	0x58025458
 8003588:	5802546c 	.word	0x5802546c
 800358c:	58025480 	.word	0x58025480
 8003590:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d160      	bne.n	8003660 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a7f      	ldr	r2, [pc, #508]	; (80037a0 <HAL_DMA_IRQHandler+0xc74>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d04a      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a7d      	ldr	r2, [pc, #500]	; (80037a4 <HAL_DMA_IRQHandler+0xc78>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d045      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a7c      	ldr	r2, [pc, #496]	; (80037a8 <HAL_DMA_IRQHandler+0xc7c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d040      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a7a      	ldr	r2, [pc, #488]	; (80037ac <HAL_DMA_IRQHandler+0xc80>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d03b      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a79      	ldr	r2, [pc, #484]	; (80037b0 <HAL_DMA_IRQHandler+0xc84>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d036      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a77      	ldr	r2, [pc, #476]	; (80037b4 <HAL_DMA_IRQHandler+0xc88>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d031      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a76      	ldr	r2, [pc, #472]	; (80037b8 <HAL_DMA_IRQHandler+0xc8c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d02c      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a74      	ldr	r2, [pc, #464]	; (80037bc <HAL_DMA_IRQHandler+0xc90>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d027      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a73      	ldr	r2, [pc, #460]	; (80037c0 <HAL_DMA_IRQHandler+0xc94>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a71      	ldr	r2, [pc, #452]	; (80037c4 <HAL_DMA_IRQHandler+0xc98>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01d      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a70      	ldr	r2, [pc, #448]	; (80037c8 <HAL_DMA_IRQHandler+0xc9c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a6e      	ldr	r2, [pc, #440]	; (80037cc <HAL_DMA_IRQHandler+0xca0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6d      	ldr	r2, [pc, #436]	; (80037d0 <HAL_DMA_IRQHandler+0xca4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a6b      	ldr	r2, [pc, #428]	; (80037d4 <HAL_DMA_IRQHandler+0xca8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6a      	ldr	r2, [pc, #424]	; (80037d8 <HAL_DMA_IRQHandler+0xcac>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_DMA_IRQHandler+0xb12>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a68      	ldr	r2, [pc, #416]	; (80037dc <HAL_DMA_IRQHandler+0xcb0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d108      	bne.n	8003650 <HAL_DMA_IRQHandler+0xb24>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0208 	bic.w	r2, r2, #8
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e007      	b.n	8003660 <HAL_DMA_IRQHandler+0xb34>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0204 	bic.w	r2, r2, #4
 800365e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8165 	beq.w	8003934 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003672:	e15f      	b.n	8003934 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2202      	movs	r2, #2
 800367e:	409a      	lsls	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80c5 	beq.w	8003814 <HAL_DMA_IRQHandler+0xce8>
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80bf 	beq.w	8003814 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	2202      	movs	r2, #2
 80036a0:	409a      	lsls	r2, r3
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d018      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 813a 	beq.w	8003938 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036cc:	e134      	b.n	8003938 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8130 	beq.w	8003938 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036e0:	e12a      	b.n	8003938 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 8089 	bne.w	8003800 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2b      	ldr	r2, [pc, #172]	; (80037a0 <HAL_DMA_IRQHandler+0xc74>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d04a      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a29      	ldr	r2, [pc, #164]	; (80037a4 <HAL_DMA_IRQHandler+0xc78>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d045      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a28      	ldr	r2, [pc, #160]	; (80037a8 <HAL_DMA_IRQHandler+0xc7c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d040      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a26      	ldr	r2, [pc, #152]	; (80037ac <HAL_DMA_IRQHandler+0xc80>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d03b      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a25      	ldr	r2, [pc, #148]	; (80037b0 <HAL_DMA_IRQHandler+0xc84>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d036      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <HAL_DMA_IRQHandler+0xc88>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d031      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <HAL_DMA_IRQHandler+0xc8c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d02c      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a20      	ldr	r2, [pc, #128]	; (80037bc <HAL_DMA_IRQHandler+0xc90>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d027      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <HAL_DMA_IRQHandler+0xc94>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d022      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <HAL_DMA_IRQHandler+0xc98>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01d      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a1c      	ldr	r2, [pc, #112]	; (80037c8 <HAL_DMA_IRQHandler+0xc9c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d018      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1a      	ldr	r2, [pc, #104]	; (80037cc <HAL_DMA_IRQHandler+0xca0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <HAL_DMA_IRQHandler+0xca4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00e      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <HAL_DMA_IRQHandler+0xca8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a16      	ldr	r2, [pc, #88]	; (80037d8 <HAL_DMA_IRQHandler+0xcac>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_DMA_IRQHandler+0xc62>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a14      	ldr	r2, [pc, #80]	; (80037dc <HAL_DMA_IRQHandler+0xcb0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d128      	bne.n	80037e0 <HAL_DMA_IRQHandler+0xcb4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0214 	bic.w	r2, r2, #20
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e027      	b.n	80037f0 <HAL_DMA_IRQHandler+0xcc4>
 80037a0:	40020010 	.word	0x40020010
 80037a4:	40020028 	.word	0x40020028
 80037a8:	40020040 	.word	0x40020040
 80037ac:	40020058 	.word	0x40020058
 80037b0:	40020070 	.word	0x40020070
 80037b4:	40020088 	.word	0x40020088
 80037b8:	400200a0 	.word	0x400200a0
 80037bc:	400200b8 	.word	0x400200b8
 80037c0:	40020410 	.word	0x40020410
 80037c4:	40020428 	.word	0x40020428
 80037c8:	40020440 	.word	0x40020440
 80037cc:	40020458 	.word	0x40020458
 80037d0:	40020470 	.word	0x40020470
 80037d4:	40020488 	.word	0x40020488
 80037d8:	400204a0 	.word	0x400204a0
 80037dc:	400204b8 	.word	0x400204b8
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 020a 	bic.w	r2, r2, #10
 80037ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8097 	beq.w	8003938 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003812:	e091      	b.n	8003938 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	2208      	movs	r2, #8
 800381e:	409a      	lsls	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8088 	beq.w	800393a <HAL_DMA_IRQHandler+0xe0e>
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8082 	beq.w	800393a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a41      	ldr	r2, [pc, #260]	; (8003940 <HAL_DMA_IRQHandler+0xe14>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d04a      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a3f      	ldr	r2, [pc, #252]	; (8003944 <HAL_DMA_IRQHandler+0xe18>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d045      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a3e      	ldr	r2, [pc, #248]	; (8003948 <HAL_DMA_IRQHandler+0xe1c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d040      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a3c      	ldr	r2, [pc, #240]	; (800394c <HAL_DMA_IRQHandler+0xe20>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d03b      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a3b      	ldr	r2, [pc, #236]	; (8003950 <HAL_DMA_IRQHandler+0xe24>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d036      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a39      	ldr	r2, [pc, #228]	; (8003954 <HAL_DMA_IRQHandler+0xe28>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d031      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a38      	ldr	r2, [pc, #224]	; (8003958 <HAL_DMA_IRQHandler+0xe2c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d02c      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a36      	ldr	r2, [pc, #216]	; (800395c <HAL_DMA_IRQHandler+0xe30>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d027      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a35      	ldr	r2, [pc, #212]	; (8003960 <HAL_DMA_IRQHandler+0xe34>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d022      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a33      	ldr	r2, [pc, #204]	; (8003964 <HAL_DMA_IRQHandler+0xe38>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01d      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a32      	ldr	r2, [pc, #200]	; (8003968 <HAL_DMA_IRQHandler+0xe3c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d018      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a30      	ldr	r2, [pc, #192]	; (800396c <HAL_DMA_IRQHandler+0xe40>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2f      	ldr	r2, [pc, #188]	; (8003970 <HAL_DMA_IRQHandler+0xe44>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2d      	ldr	r2, [pc, #180]	; (8003974 <HAL_DMA_IRQHandler+0xe48>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <HAL_DMA_IRQHandler+0xe4c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xdaa>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a2a      	ldr	r2, [pc, #168]	; (800397c <HAL_DMA_IRQHandler+0xe50>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d108      	bne.n	80038e8 <HAL_DMA_IRQHandler+0xdbc>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 021c 	bic.w	r2, r2, #28
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	e007      	b.n	80038f8 <HAL_DMA_IRQHandler+0xdcc>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 020e 	bic.w	r2, r2, #14
 80038f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	2201      	movs	r2, #1
 8003902:	409a      	lsls	r2, r3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
 800392e:	e004      	b.n	800393a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003930:	bf00      	nop
 8003932:	e002      	b.n	800393a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003934:	bf00      	nop
 8003936:	e000      	b.n	800393a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003938:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800393a:	3728      	adds	r7, #40	; 0x28
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40020010 	.word	0x40020010
 8003944:	40020028 	.word	0x40020028
 8003948:	40020040 	.word	0x40020040
 800394c:	40020058 	.word	0x40020058
 8003950:	40020070 	.word	0x40020070
 8003954:	40020088 	.word	0x40020088
 8003958:	400200a0 	.word	0x400200a0
 800395c:	400200b8 	.word	0x400200b8
 8003960:	40020410 	.word	0x40020410
 8003964:	40020428 	.word	0x40020428
 8003968:	40020440 	.word	0x40020440
 800396c:	40020458 	.word	0x40020458
 8003970:	40020470 	.word	0x40020470
 8003974:	40020488 	.word	0x40020488
 8003978:	400204a0 	.word	0x400204a0
 800397c:	400204b8 	.word	0x400204b8

08003980 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a7f      	ldr	r2, [pc, #508]	; (8003bb4 <DMA_SetConfig+0x21c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d072      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a7d      	ldr	r2, [pc, #500]	; (8003bb8 <DMA_SetConfig+0x220>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d06d      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a7c      	ldr	r2, [pc, #496]	; (8003bbc <DMA_SetConfig+0x224>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d068      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a7a      	ldr	r2, [pc, #488]	; (8003bc0 <DMA_SetConfig+0x228>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d063      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a79      	ldr	r2, [pc, #484]	; (8003bc4 <DMA_SetConfig+0x22c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d05e      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a77      	ldr	r2, [pc, #476]	; (8003bc8 <DMA_SetConfig+0x230>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d059      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a76      	ldr	r2, [pc, #472]	; (8003bcc <DMA_SetConfig+0x234>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d054      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a74      	ldr	r2, [pc, #464]	; (8003bd0 <DMA_SetConfig+0x238>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d04f      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a73      	ldr	r2, [pc, #460]	; (8003bd4 <DMA_SetConfig+0x23c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d04a      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a71      	ldr	r2, [pc, #452]	; (8003bd8 <DMA_SetConfig+0x240>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d045      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a70      	ldr	r2, [pc, #448]	; (8003bdc <DMA_SetConfig+0x244>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d040      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a6e      	ldr	r2, [pc, #440]	; (8003be0 <DMA_SetConfig+0x248>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d03b      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6d      	ldr	r2, [pc, #436]	; (8003be4 <DMA_SetConfig+0x24c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d036      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a6b      	ldr	r2, [pc, #428]	; (8003be8 <DMA_SetConfig+0x250>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d031      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6a      	ldr	r2, [pc, #424]	; (8003bec <DMA_SetConfig+0x254>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d02c      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a68      	ldr	r2, [pc, #416]	; (8003bf0 <DMA_SetConfig+0x258>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d027      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a67      	ldr	r2, [pc, #412]	; (8003bf4 <DMA_SetConfig+0x25c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d022      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a65      	ldr	r2, [pc, #404]	; (8003bf8 <DMA_SetConfig+0x260>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01d      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a64      	ldr	r2, [pc, #400]	; (8003bfc <DMA_SetConfig+0x264>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d018      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a62      	ldr	r2, [pc, #392]	; (8003c00 <DMA_SetConfig+0x268>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d013      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a61      	ldr	r2, [pc, #388]	; (8003c04 <DMA_SetConfig+0x26c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00e      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a5f      	ldr	r2, [pc, #380]	; (8003c08 <DMA_SetConfig+0x270>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a5e      	ldr	r2, [pc, #376]	; (8003c0c <DMA_SetConfig+0x274>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d004      	beq.n	8003aa2 <DMA_SetConfig+0x10a>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a5c      	ldr	r2, [pc, #368]	; (8003c10 <DMA_SetConfig+0x278>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <DMA_SetConfig+0x10e>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <DMA_SetConfig+0x110>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ab4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d004      	beq.n	8003ac8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ac6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a39      	ldr	r2, [pc, #228]	; (8003bb4 <DMA_SetConfig+0x21c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d04a      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a38      	ldr	r2, [pc, #224]	; (8003bb8 <DMA_SetConfig+0x220>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d045      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a36      	ldr	r2, [pc, #216]	; (8003bbc <DMA_SetConfig+0x224>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d040      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a35      	ldr	r2, [pc, #212]	; (8003bc0 <DMA_SetConfig+0x228>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d03b      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a33      	ldr	r2, [pc, #204]	; (8003bc4 <DMA_SetConfig+0x22c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d036      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a32      	ldr	r2, [pc, #200]	; (8003bc8 <DMA_SetConfig+0x230>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d031      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <DMA_SetConfig+0x234>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d02c      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2f      	ldr	r2, [pc, #188]	; (8003bd0 <DMA_SetConfig+0x238>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d027      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2d      	ldr	r2, [pc, #180]	; (8003bd4 <DMA_SetConfig+0x23c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d022      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2c      	ldr	r2, [pc, #176]	; (8003bd8 <DMA_SetConfig+0x240>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d01d      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2a      	ldr	r2, [pc, #168]	; (8003bdc <DMA_SetConfig+0x244>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d018      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <DMA_SetConfig+0x248>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a27      	ldr	r2, [pc, #156]	; (8003be4 <DMA_SetConfig+0x24c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00e      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <DMA_SetConfig+0x250>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d009      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a24      	ldr	r2, [pc, #144]	; (8003bec <DMA_SetConfig+0x254>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d004      	beq.n	8003b68 <DMA_SetConfig+0x1d0>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a23      	ldr	r2, [pc, #140]	; (8003bf0 <DMA_SetConfig+0x258>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d101      	bne.n	8003b6c <DMA_SetConfig+0x1d4>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <DMA_SetConfig+0x1d6>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d059      	beq.n	8003c26 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	223f      	movs	r2, #63	; 0x3f
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b90:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d138      	bne.n	8003c14 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003bb2:	e086      	b.n	8003cc2 <DMA_SetConfig+0x32a>
 8003bb4:	40020010 	.word	0x40020010
 8003bb8:	40020028 	.word	0x40020028
 8003bbc:	40020040 	.word	0x40020040
 8003bc0:	40020058 	.word	0x40020058
 8003bc4:	40020070 	.word	0x40020070
 8003bc8:	40020088 	.word	0x40020088
 8003bcc:	400200a0 	.word	0x400200a0
 8003bd0:	400200b8 	.word	0x400200b8
 8003bd4:	40020410 	.word	0x40020410
 8003bd8:	40020428 	.word	0x40020428
 8003bdc:	40020440 	.word	0x40020440
 8003be0:	40020458 	.word	0x40020458
 8003be4:	40020470 	.word	0x40020470
 8003be8:	40020488 	.word	0x40020488
 8003bec:	400204a0 	.word	0x400204a0
 8003bf0:	400204b8 	.word	0x400204b8
 8003bf4:	58025408 	.word	0x58025408
 8003bf8:	5802541c 	.word	0x5802541c
 8003bfc:	58025430 	.word	0x58025430
 8003c00:	58025444 	.word	0x58025444
 8003c04:	58025458 	.word	0x58025458
 8003c08:	5802546c 	.word	0x5802546c
 8003c0c:	58025480 	.word	0x58025480
 8003c10:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	60da      	str	r2, [r3, #12]
}
 8003c24:	e04d      	b.n	8003cc2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <DMA_SetConfig+0x338>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <DMA_SetConfig+0x2de>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <DMA_SetConfig+0x33c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01d      	beq.n	8003c76 <DMA_SetConfig+0x2de>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <DMA_SetConfig+0x340>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d018      	beq.n	8003c76 <DMA_SetConfig+0x2de>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a24      	ldr	r2, [pc, #144]	; (8003cdc <DMA_SetConfig+0x344>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <DMA_SetConfig+0x2de>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <DMA_SetConfig+0x348>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <DMA_SetConfig+0x2de>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a21      	ldr	r2, [pc, #132]	; (8003ce4 <DMA_SetConfig+0x34c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d009      	beq.n	8003c76 <DMA_SetConfig+0x2de>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <DMA_SetConfig+0x350>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <DMA_SetConfig+0x2de>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <DMA_SetConfig+0x354>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <DMA_SetConfig+0x2e2>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <DMA_SetConfig+0x2e4>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2201      	movs	r2, #1
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	d108      	bne.n	8003cb2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	60da      	str	r2, [r3, #12]
}
 8003cb0:	e007      	b.n	8003cc2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	60da      	str	r2, [r3, #12]
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	58025408 	.word	0x58025408
 8003cd4:	5802541c 	.word	0x5802541c
 8003cd8:	58025430 	.word	0x58025430
 8003cdc:	58025444 	.word	0x58025444
 8003ce0:	58025458 	.word	0x58025458
 8003ce4:	5802546c 	.word	0x5802546c
 8003ce8:	58025480 	.word	0x58025480
 8003cec:	58025494 	.word	0x58025494

08003cf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a42      	ldr	r2, [pc, #264]	; (8003e08 <DMA_CalcBaseAndBitshift+0x118>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d04a      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a41      	ldr	r2, [pc, #260]	; (8003e0c <DMA_CalcBaseAndBitshift+0x11c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d045      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a3f      	ldr	r2, [pc, #252]	; (8003e10 <DMA_CalcBaseAndBitshift+0x120>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d040      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a3e      	ldr	r2, [pc, #248]	; (8003e14 <DMA_CalcBaseAndBitshift+0x124>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d03b      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a3c      	ldr	r2, [pc, #240]	; (8003e18 <DMA_CalcBaseAndBitshift+0x128>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d036      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a3b      	ldr	r2, [pc, #236]	; (8003e1c <DMA_CalcBaseAndBitshift+0x12c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d031      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a39      	ldr	r2, [pc, #228]	; (8003e20 <DMA_CalcBaseAndBitshift+0x130>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d02c      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a38      	ldr	r2, [pc, #224]	; (8003e24 <DMA_CalcBaseAndBitshift+0x134>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d027      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a36      	ldr	r2, [pc, #216]	; (8003e28 <DMA_CalcBaseAndBitshift+0x138>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d022      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a35      	ldr	r2, [pc, #212]	; (8003e2c <DMA_CalcBaseAndBitshift+0x13c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d01d      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a33      	ldr	r2, [pc, #204]	; (8003e30 <DMA_CalcBaseAndBitshift+0x140>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d018      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a32      	ldr	r2, [pc, #200]	; (8003e34 <DMA_CalcBaseAndBitshift+0x144>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a30      	ldr	r2, [pc, #192]	; (8003e38 <DMA_CalcBaseAndBitshift+0x148>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2f      	ldr	r2, [pc, #188]	; (8003e3c <DMA_CalcBaseAndBitshift+0x14c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d009      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2d      	ldr	r2, [pc, #180]	; (8003e40 <DMA_CalcBaseAndBitshift+0x150>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <DMA_CalcBaseAndBitshift+0xa8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a2c      	ldr	r2, [pc, #176]	; (8003e44 <DMA_CalcBaseAndBitshift+0x154>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d101      	bne.n	8003d9c <DMA_CalcBaseAndBitshift+0xac>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <DMA_CalcBaseAndBitshift+0xae>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d024      	beq.n	8003dec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	3b10      	subs	r3, #16
 8003daa:	4a27      	ldr	r2, [pc, #156]	; (8003e48 <DMA_CalcBaseAndBitshift+0x158>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	4a24      	ldr	r2, [pc, #144]	; (8003e4c <DMA_CalcBaseAndBitshift+0x15c>)
 8003dbc:	5cd3      	ldrb	r3, [r2, r3]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d908      	bls.n	8003ddc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4b1f      	ldr	r3, [pc, #124]	; (8003e50 <DMA_CalcBaseAndBitshift+0x160>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	1d1a      	adds	r2, r3, #4
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	659a      	str	r2, [r3, #88]	; 0x58
 8003dda:	e00d      	b.n	8003df8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <DMA_CalcBaseAndBitshift+0x160>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6593      	str	r3, [r2, #88]	; 0x58
 8003dea:	e005      	b.n	8003df8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	40020010 	.word	0x40020010
 8003e0c:	40020028 	.word	0x40020028
 8003e10:	40020040 	.word	0x40020040
 8003e14:	40020058 	.word	0x40020058
 8003e18:	40020070 	.word	0x40020070
 8003e1c:	40020088 	.word	0x40020088
 8003e20:	400200a0 	.word	0x400200a0
 8003e24:	400200b8 	.word	0x400200b8
 8003e28:	40020410 	.word	0x40020410
 8003e2c:	40020428 	.word	0x40020428
 8003e30:	40020440 	.word	0x40020440
 8003e34:	40020458 	.word	0x40020458
 8003e38:	40020470 	.word	0x40020470
 8003e3c:	40020488 	.word	0x40020488
 8003e40:	400204a0 	.word	0x400204a0
 8003e44:	400204b8 	.word	0x400204b8
 8003e48:	aaaaaaab 	.word	0xaaaaaaab
 8003e4c:	08009d30 	.word	0x08009d30
 8003e50:	fffffc00 	.word	0xfffffc00

08003e54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d120      	bne.n	8003eaa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d858      	bhi.n	8003f22 <DMA_CheckFifoParam+0xce>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <DMA_CheckFifoParam+0x24>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e89 	.word	0x08003e89
 8003e7c:	08003e9b 	.word	0x08003e9b
 8003e80:	08003e89 	.word	0x08003e89
 8003e84:	08003f23 	.word	0x08003f23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d048      	beq.n	8003f26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e98:	e045      	b.n	8003f26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ea2:	d142      	bne.n	8003f2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ea8:	e03f      	b.n	8003f2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb2:	d123      	bne.n	8003efc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d838      	bhi.n	8003f2e <DMA_CheckFifoParam+0xda>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <DMA_CheckFifoParam+0x70>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003edb 	.word	0x08003edb
 8003ecc:	08003ed5 	.word	0x08003ed5
 8003ed0:	08003eed 	.word	0x08003eed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ed8:	e030      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d025      	beq.n	8003f32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003eea:	e022      	b.n	8003f32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ef4:	d11f      	bne.n	8003f36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003efa:	e01c      	b.n	8003f36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d902      	bls.n	8003f0a <DMA_CheckFifoParam+0xb6>
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d003      	beq.n	8003f10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f08:	e018      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f0e:	e015      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8003f20:	e00b      	b.n	8003f3a <DMA_CheckFifoParam+0xe6>
        break;
 8003f22:	bf00      	nop
 8003f24:	e00a      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
        break;
 8003f26:	bf00      	nop
 8003f28:	e008      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
        break;
 8003f2a:	bf00      	nop
 8003f2c:	e006      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
        break;
 8003f2e:	bf00      	nop
 8003f30:	e004      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
        break;
 8003f32:	bf00      	nop
 8003f34:	e002      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
        break;
 8003f36:	bf00      	nop
 8003f38:	e000      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
    break;
 8003f3a:	bf00      	nop
    }
  }

  return status;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop

08003f4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a38      	ldr	r2, [pc, #224]	; (8004040 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d022      	beq.n	8003faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a36      	ldr	r2, [pc, #216]	; (8004044 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01d      	beq.n	8003faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a35      	ldr	r2, [pc, #212]	; (8004048 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d018      	beq.n	8003faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a33      	ldr	r2, [pc, #204]	; (800404c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a32      	ldr	r2, [pc, #200]	; (8004050 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a30      	ldr	r2, [pc, #192]	; (8004054 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d009      	beq.n	8003faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a2f      	ldr	r2, [pc, #188]	; (8004058 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2d      	ldr	r2, [pc, #180]	; (800405c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01a      	beq.n	8003fea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	3b08      	subs	r3, #8
 8003fbc:	4a28      	ldr	r2, [pc, #160]	; (8004060 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4b26      	ldr	r3, [pc, #152]	; (8004064 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	461a      	mov	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a24      	ldr	r2, [pc, #144]	; (8004068 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003fd8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003fe8:	e024      	b.n	8004034 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	3b10      	subs	r3, #16
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	; (800406c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4a1c      	ldr	r2, [pc, #112]	; (8004070 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d806      	bhi.n	8004012 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d902      	bls.n	8004012 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3308      	adds	r3, #8
 8004010:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4b18      	ldr	r3, [pc, #96]	; (8004078 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	461a      	mov	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a16      	ldr	r2, [pc, #88]	; (800407c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004024:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	2201      	movs	r2, #1
 800402e:	409a      	lsls	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	58025408 	.word	0x58025408
 8004044:	5802541c 	.word	0x5802541c
 8004048:	58025430 	.word	0x58025430
 800404c:	58025444 	.word	0x58025444
 8004050:	58025458 	.word	0x58025458
 8004054:	5802546c 	.word	0x5802546c
 8004058:	58025480 	.word	0x58025480
 800405c:	58025494 	.word	0x58025494
 8004060:	cccccccd 	.word	0xcccccccd
 8004064:	16009600 	.word	0x16009600
 8004068:	58025880 	.word	0x58025880
 800406c:	aaaaaaab 	.word	0xaaaaaaab
 8004070:	400204b8 	.word	0x400204b8
 8004074:	4002040f 	.word	0x4002040f
 8004078:	10008200 	.word	0x10008200
 800407c:	40020880 	.word	0x40020880

08004080 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d04a      	beq.n	800412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d847      	bhi.n	800412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a25      	ldr	r2, [pc, #148]	; (8004138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d022      	beq.n	80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a24      	ldr	r2, [pc, #144]	; (800413c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d01d      	beq.n	80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a22      	ldr	r2, [pc, #136]	; (8004140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d018      	beq.n	80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a21      	ldr	r2, [pc, #132]	; (8004144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00e      	beq.n	80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1e      	ldr	r2, [pc, #120]	; (800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d009      	beq.n	80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1c      	ldr	r2, [pc, #112]	; (8004150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d004      	beq.n	80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1b      	ldr	r2, [pc, #108]	; (8004154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d101      	bne.n	80040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80040f0:	2300      	movs	r3, #0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4b17      	ldr	r3, [pc, #92]	; (8004158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	461a      	mov	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a15      	ldr	r2, [pc, #84]	; (800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004108:	671a      	str	r2, [r3, #112]	; 0x70
 800410a:	e009      	b.n	8004120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4b14      	ldr	r3, [pc, #80]	; (8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	461a      	mov	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a11      	ldr	r2, [pc, #68]	; (8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800411e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3b01      	subs	r3, #1
 8004124:	2201      	movs	r2, #1
 8004126:	409a      	lsls	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	58025408 	.word	0x58025408
 800413c:	5802541c 	.word	0x5802541c
 8004140:	58025430 	.word	0x58025430
 8004144:	58025444 	.word	0x58025444
 8004148:	58025458 	.word	0x58025458
 800414c:	5802546c 	.word	0x5802546c
 8004150:	58025480 	.word	0x58025480
 8004154:	58025494 	.word	0x58025494
 8004158:	1600963f 	.word	0x1600963f
 800415c:	58025940 	.word	0x58025940
 8004160:	1000823f 	.word	0x1000823f
 8004164:	40020940 	.word	0x40020940

08004168 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e0cf      	b.n	800431a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2223      	movs	r2, #35	; 0x23
 8004188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fc ffd9 	bl	8001144 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004192:	4b64      	ldr	r3, [pc, #400]	; (8004324 <HAL_ETH_Init+0x1bc>)
 8004194:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004198:	4a62      	ldr	r2, [pc, #392]	; (8004324 <HAL_ETH_Init+0x1bc>)
 800419a:	f043 0302 	orr.w	r3, r3, #2
 800419e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80041a2:	4b60      	ldr	r3, [pc, #384]	; (8004324 <HAL_ETH_Init+0x1bc>)
 80041a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	7a1b      	ldrb	r3, [r3, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80041b8:	2000      	movs	r0, #0
 80041ba:	f7fd fb87 	bl	80018cc <HAL_SYSCFG_ETHInterfaceSelect>
 80041be:	e003      	b.n	80041c8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80041c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80041c4:	f7fd fb82 	bl	80018cc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80041c8:	4b57      	ldr	r3, [pc, #348]	; (8004328 <HAL_ETH_Init+0x1c0>)
 80041ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041e4:	f7fd fb36 	bl	8001854 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80041ea:	e011      	b.n	8004210 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80041ec:	f7fd fb32 	bl	8001854 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041fa:	d909      	bls.n	8004210 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2204      	movs	r2, #4
 8004200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	22e0      	movs	r2, #224	; 0xe0
 8004208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e084      	b.n	800431a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e4      	bne.n	80041ec <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f886 	bl	8004334 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004228:	f001 fefe 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 800422c:	4603      	mov	r3, r0
 800422e:	4a3f      	ldr	r2, [pc, #252]	; (800432c <HAL_ETH_Init+0x1c4>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	0c9a      	lsrs	r2, r3, #18
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3a01      	subs	r2, #1
 800423c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fa71 	bl	8004728 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004252:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800425e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004262:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	22e0      	movs	r2, #224	; 0xe0
 800427e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e049      	b.n	800431a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004292:	4b27      	ldr	r3, [pc, #156]	; (8004330 <HAL_ETH_Init+0x1c8>)
 8004294:	4013      	ands	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6952      	ldr	r2, [r2, #20]
 800429a:	0051      	lsls	r1, r2, #1
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	430b      	orrs	r3, r1
 80042a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042a6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fad9 	bl	8004862 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fb1f 	bl	80048f4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	3305      	adds	r3, #5
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	021a      	lsls	r2, r3, #8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	3304      	adds	r3, #4
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	4619      	mov	r1, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	3303      	adds	r3, #3
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	061a      	lsls	r2, r3, #24
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	3302      	adds	r3, #2
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	3301      	adds	r3, #1
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004302:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004304:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2210      	movs	r2, #16
 8004314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	58024400 	.word	0x58024400
 8004328:	58000400 	.word	0x58000400
 800432c:	431bde83 	.word	0x431bde83
 8004330:	ffff8001 	.word	0xffff8001

08004334 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004344:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800434c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800434e:	f001 fe6b 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 8004352:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d908      	bls.n	800436e <HAL_ETH_SetMDIOClockRange+0x3a>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d804      	bhi.n	800436e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e027      	b.n	80043be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d908      	bls.n	8004388 <HAL_ETH_SetMDIOClockRange+0x54>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d204      	bcs.n	8004388 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e01a      	b.n	80043be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4a13      	ldr	r2, [pc, #76]	; (80043d8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d303      	bcc.n	8004398 <HAL_ETH_SetMDIOClockRange+0x64>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4a12      	ldr	r2, [pc, #72]	; (80043dc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d911      	bls.n	80043bc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4a10      	ldr	r2, [pc, #64]	; (80043dc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d908      	bls.n	80043b2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4a0f      	ldr	r2, [pc, #60]	; (80043e0 <HAL_ETH_SetMDIOClockRange+0xac>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d804      	bhi.n	80043b2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e005      	b.n	80043be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e000      	b.n	80043be <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80043bc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	01312cff 	.word	0x01312cff
 80043d4:	02160ebf 	.word	0x02160ebf
 80043d8:	03938700 	.word	0x03938700
 80043dc:	05f5e0ff 	.word	0x05f5e0ff
 80043e0:	08f0d17f 	.word	0x08f0d17f

080043e4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80043f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	791b      	ldrb	r3, [r3, #4]
 80043fc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80043fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	7b1b      	ldrb	r3, [r3, #12]
 8004404:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004406:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	7b5b      	ldrb	r3, [r3, #13]
 800440c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800440e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	7b9b      	ldrb	r3, [r3, #14]
 8004414:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004416:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	7bdb      	ldrb	r3, [r3, #15]
 800441c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800441e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	7c12      	ldrb	r2, [r2, #16]
 8004424:	2a00      	cmp	r2, #0
 8004426:	d102      	bne.n	800442e <ETH_SetMACConfig+0x4a>
 8004428:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800442c:	e000      	b.n	8004430 <ETH_SetMACConfig+0x4c>
 800442e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004430:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	7c52      	ldrb	r2, [r2, #17]
 8004436:	2a00      	cmp	r2, #0
 8004438:	d102      	bne.n	8004440 <ETH_SetMACConfig+0x5c>
 800443a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800443e:	e000      	b.n	8004442 <ETH_SetMACConfig+0x5e>
 8004440:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004442:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	7c9b      	ldrb	r3, [r3, #18]
 8004448:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800444a:	431a      	orrs	r2, r3
               macconf->Speed |
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004450:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004456:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	7f1b      	ldrb	r3, [r3, #28]
 800445c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800445e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	7f5b      	ldrb	r3, [r3, #29]
 8004464:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004466:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	7f92      	ldrb	r2, [r2, #30]
 800446c:	2a00      	cmp	r2, #0
 800446e:	d102      	bne.n	8004476 <ETH_SetMACConfig+0x92>
 8004470:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004474:	e000      	b.n	8004478 <ETH_SetMACConfig+0x94>
 8004476:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004478:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	7fdb      	ldrb	r3, [r3, #31]
 800447e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004480:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004488:	2a00      	cmp	r2, #0
 800448a:	d102      	bne.n	8004492 <ETH_SetMACConfig+0xae>
 800448c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004490:	e000      	b.n	8004494 <ETH_SetMACConfig+0xb0>
 8004492:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004494:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800449a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80044a4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4b56      	ldr	r3, [pc, #344]	; (8004610 <ETH_SetMACConfig+0x22c>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	68f9      	ldr	r1, [r7, #12]
 80044be:	430b      	orrs	r3, r1
 80044c0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044ce:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80044d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044d8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80044da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044e2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80044e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80044ec:	2a00      	cmp	r2, #0
 80044ee:	d102      	bne.n	80044f6 <ETH_SetMACConfig+0x112>
 80044f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044f4:	e000      	b.n	80044f8 <ETH_SetMACConfig+0x114>
 80044f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80044f8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	4b42      	ldr	r3, [pc, #264]	; (8004614 <ETH_SetMACConfig+0x230>)
 800450a:	4013      	ands	r3, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	68f9      	ldr	r1, [r7, #12]
 8004512:	430b      	orrs	r3, r1
 8004514:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800451c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	4b3a      	ldr	r3, [pc, #232]	; (8004618 <ETH_SetMACConfig+0x234>)
 800452e:	4013      	ands	r3, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	68f9      	ldr	r1, [r7, #12]
 8004536:	430b      	orrs	r3, r1
 8004538:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004540:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004546:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800454e:	2a00      	cmp	r2, #0
 8004550:	d101      	bne.n	8004556 <ETH_SetMACConfig+0x172>
 8004552:	2280      	movs	r2, #128	; 0x80
 8004554:	e000      	b.n	8004558 <ETH_SetMACConfig+0x174>
 8004556:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004558:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800456a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800456e:	4013      	ands	r3, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	68f9      	ldr	r1, [r7, #12]
 8004576:	430b      	orrs	r3, r1
 8004578:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004580:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004588:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	f023 0103 	bic.w	r1, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80045ae:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80045ca:	2a00      	cmp	r2, #0
 80045cc:	d101      	bne.n	80045d2 <ETH_SetMACConfig+0x1ee>
 80045ce:	2240      	movs	r2, #64	; 0x40
 80045d0:	e000      	b.n	80045d4 <ETH_SetMACConfig+0x1f0>
 80045d2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80045d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80045dc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80045de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80045e6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80045f4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	430a      	orrs	r2, r1
 8004600:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	00048083 	.word	0x00048083
 8004614:	c0f88000 	.word	0xc0f88000
 8004618:	fffffef0 	.word	0xfffffef0

0800461c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4b38      	ldr	r3, [pc, #224]	; (8004714 <ETH_SetDMAConfig+0xf8>)
 8004632:	4013      	ands	r3, r2
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	6811      	ldr	r1, [r2, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	430b      	orrs	r3, r1
 800463e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004642:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	791b      	ldrb	r3, [r3, #4]
 8004648:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800464e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	7b1b      	ldrb	r3, [r3, #12]
 8004654:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	4b2c      	ldr	r3, [pc, #176]	; (8004718 <ETH_SetDMAConfig+0xfc>)
 8004666:	4013      	ands	r3, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	68f9      	ldr	r1, [r7, #12]
 800466e:	430b      	orrs	r3, r1
 8004670:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004674:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	7b5b      	ldrb	r3, [r3, #13]
 800467a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004690:	4b22      	ldr	r3, [pc, #136]	; (800471c <ETH_SetDMAConfig+0x100>)
 8004692:	4013      	ands	r3, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	68f9      	ldr	r1, [r7, #12]
 800469a:	430b      	orrs	r3, r1
 800469c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046a0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	7d1b      	ldrb	r3, [r3, #20]
 80046ac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80046ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	7f5b      	ldrb	r3, [r3, #29]
 80046b4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80046c6:	4b16      	ldr	r3, [pc, #88]	; (8004720 <ETH_SetDMAConfig+0x104>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	7f1b      	ldrb	r3, [r3, #28]
 80046de:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <ETH_SetDMAConfig+0x108>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	68f9      	ldr	r1, [r7, #12]
 80046fe:	430b      	orrs	r3, r1
 8004700:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004704:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	ffff87fd 	.word	0xffff87fd
 8004718:	ffff2ffe 	.word	0xffff2ffe
 800471c:	fffec000 	.word	0xfffec000
 8004720:	ffc0efef 	.word	0xffc0efef
 8004724:	7fc0ffff 	.word	0x7fc0ffff

08004728 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b0a4      	sub	sp, #144	; 0x90
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004736:	2300      	movs	r3, #0
 8004738:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800473a:	2300      	movs	r3, #0
 800473c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004740:	2300      	movs	r3, #0
 8004742:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800475e:	2301      	movs	r3, #1
 8004760:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004768:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800476a:	2300      	movs	r3, #0
 800476c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004770:	2300      	movs	r3, #0
 8004772:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800477a:	2300      	movs	r3, #0
 800477c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004780:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004784:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004786:	2300      	movs	r3, #0
 8004788:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800478c:	2300      	movs	r3, #0
 800478e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004790:	2301      	movs	r3, #1
 8004792:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004796:	2300      	movs	r3, #0
 8004798:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800479c:	2300      	movs	r3, #0
 800479e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80047a2:	2300      	movs	r3, #0
 80047a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80047aa:	2300      	movs	r3, #0
 80047ac:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80047ae:	2300      	movs	r3, #0
 80047b0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80047b4:	2300      	movs	r3, #0
 80047b6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80047c0:	2320      	movs	r3, #32
 80047c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80047d2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80047d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047dc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80047de:	2300      	movs	r3, #0
 80047e0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80047e4:	2302      	movs	r3, #2
 80047e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80047f0:	2300      	movs	r3, #0
 80047f2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004802:	2300      	movs	r3, #0
 8004804:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800480c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004810:	4619      	mov	r1, r3
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff fde6 	bl	80043e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004818:	2301      	movs	r3, #1
 800481a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800481c:	2301      	movs	r3, #1
 800481e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004820:	2300      	movs	r3, #0
 8004822:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004824:	2300      	movs	r3, #0
 8004826:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800482a:	2300      	movs	r3, #0
 800482c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800482e:	2300      	movs	r3, #0
 8004830:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004832:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004836:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004838:	2300      	movs	r3, #0
 800483a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800483c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004840:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004842:	2300      	movs	r3, #0
 8004844:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004848:	f44f 7306 	mov.w	r3, #536	; 0x218
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800484e:	f107 0308 	add.w	r3, r7, #8
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fee1 	bl	800461c <ETH_SetDMAConfig>
}
 800485a:	bf00      	nop
 800485c:	3790      	adds	r7, #144	; 0x90
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	e01d      	b.n	80048ac <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68d9      	ldr	r1, [r3, #12]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4613      	mov	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	440b      	add	r3, r1
 8004880:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2200      	movs	r2, #0
 800488c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2200      	movs	r2, #0
 8004892:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2200      	movs	r2, #0
 8004898:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	3206      	adds	r2, #6
 80048a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d9de      	bls.n	8004870 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c0:	461a      	mov	r2, r3
 80048c2:	2303      	movs	r3, #3
 80048c4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e023      	b.n	800494a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6919      	ldr	r1, [r3, #16]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4613      	mov	r3, r2
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4413      	add	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	440b      	add	r3, r1
 8004912:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2200      	movs	r2, #0
 800491e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2200      	movs	r2, #0
 8004924:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2200      	movs	r2, #0
 800492a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2200      	movs	r2, #0
 8004936:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	3212      	adds	r2, #18
 8004940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3301      	adds	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b03      	cmp	r3, #3
 800494e:	d9d8      	bls.n	8004902 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004976:	461a      	mov	r2, r3
 8004978:	2303      	movs	r3, #3
 800497a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b089      	sub	sp, #36	; 0x24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80049be:	4b89      	ldr	r3, [pc, #548]	; (8004be4 <HAL_GPIO_Init+0x234>)
 80049c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049c2:	e194      	b.n	8004cee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	2101      	movs	r1, #1
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	fa01 f303 	lsl.w	r3, r1, r3
 80049d0:	4013      	ands	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8186 	beq.w	8004ce8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d005      	beq.n	80049f4 <HAL_GPIO_Init+0x44>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d130      	bne.n	8004a56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	2203      	movs	r2, #3
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	43db      	mvns	r3, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43db      	mvns	r3, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4013      	ands	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	091b      	lsrs	r3, r3, #4
 8004a40:	f003 0201 	and.w	r2, r3, #1
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d017      	beq.n	8004a92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4013      	ands	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d123      	bne.n	8004ae6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	08da      	lsrs	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3208      	adds	r2, #8
 8004aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	220f      	movs	r2, #15
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43db      	mvns	r3, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	08da      	lsrs	r2, r3, #3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3208      	adds	r2, #8
 8004ae0:	69b9      	ldr	r1, [r7, #24]
 8004ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	2203      	movs	r2, #3
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4013      	ands	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 0203 	and.w	r2, r3, #3
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 80e0 	beq.w	8004ce8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b28:	4b2f      	ldr	r3, [pc, #188]	; (8004be8 <HAL_GPIO_Init+0x238>)
 8004b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b2e:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <HAL_GPIO_Init+0x238>)
 8004b30:	f043 0302 	orr.w	r3, r3, #2
 8004b34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004b38:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <HAL_GPIO_Init+0x238>)
 8004b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b46:	4a29      	ldr	r2, [pc, #164]	; (8004bec <HAL_GPIO_Init+0x23c>)
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	089b      	lsrs	r3, r3, #2
 8004b4c:	3302      	adds	r3, #2
 8004b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	220f      	movs	r2, #15
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43db      	mvns	r3, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4013      	ands	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a20      	ldr	r2, [pc, #128]	; (8004bf0 <HAL_GPIO_Init+0x240>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d052      	beq.n	8004c18 <HAL_GPIO_Init+0x268>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a1f      	ldr	r2, [pc, #124]	; (8004bf4 <HAL_GPIO_Init+0x244>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d031      	beq.n	8004bde <HAL_GPIO_Init+0x22e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <HAL_GPIO_Init+0x248>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d02b      	beq.n	8004bda <HAL_GPIO_Init+0x22a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <HAL_GPIO_Init+0x24c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d025      	beq.n	8004bd6 <HAL_GPIO_Init+0x226>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <HAL_GPIO_Init+0x250>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01f      	beq.n	8004bd2 <HAL_GPIO_Init+0x222>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a1b      	ldr	r2, [pc, #108]	; (8004c04 <HAL_GPIO_Init+0x254>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d019      	beq.n	8004bce <HAL_GPIO_Init+0x21e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1a      	ldr	r2, [pc, #104]	; (8004c08 <HAL_GPIO_Init+0x258>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <HAL_GPIO_Init+0x21a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <HAL_GPIO_Init+0x25c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00d      	beq.n	8004bc6 <HAL_GPIO_Init+0x216>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <HAL_GPIO_Init+0x260>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <HAL_GPIO_Init+0x212>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a17      	ldr	r2, [pc, #92]	; (8004c14 <HAL_GPIO_Init+0x264>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <HAL_GPIO_Init+0x20e>
 8004bba:	2309      	movs	r3, #9
 8004bbc:	e02d      	b.n	8004c1a <HAL_GPIO_Init+0x26a>
 8004bbe:	230a      	movs	r3, #10
 8004bc0:	e02b      	b.n	8004c1a <HAL_GPIO_Init+0x26a>
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	e029      	b.n	8004c1a <HAL_GPIO_Init+0x26a>
 8004bc6:	2307      	movs	r3, #7
 8004bc8:	e027      	b.n	8004c1a <HAL_GPIO_Init+0x26a>
 8004bca:	2306      	movs	r3, #6
 8004bcc:	e025      	b.n	8004c1a <HAL_GPIO_Init+0x26a>
 8004bce:	2305      	movs	r3, #5
 8004bd0:	e023      	b.n	8004c1a <HAL_GPIO_Init+0x26a>
 8004bd2:	2304      	movs	r3, #4
 8004bd4:	e021      	b.n	8004c1a <HAL_GPIO_Init+0x26a>
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e01f      	b.n	8004c1a <HAL_GPIO_Init+0x26a>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e01d      	b.n	8004c1a <HAL_GPIO_Init+0x26a>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e01b      	b.n	8004c1a <HAL_GPIO_Init+0x26a>
 8004be2:	bf00      	nop
 8004be4:	58000080 	.word	0x58000080
 8004be8:	58024400 	.word	0x58024400
 8004bec:	58000400 	.word	0x58000400
 8004bf0:	58020000 	.word	0x58020000
 8004bf4:	58020400 	.word	0x58020400
 8004bf8:	58020800 	.word	0x58020800
 8004bfc:	58020c00 	.word	0x58020c00
 8004c00:	58021000 	.word	0x58021000
 8004c04:	58021400 	.word	0x58021400
 8004c08:	58021800 	.word	0x58021800
 8004c0c:	58021c00 	.word	0x58021c00
 8004c10:	58022000 	.word	0x58022000
 8004c14:	58022400 	.word	0x58022400
 8004c18:	2300      	movs	r3, #0
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	f002 0203 	and.w	r2, r2, #3
 8004c20:	0092      	lsls	r2, r2, #2
 8004c22:	4093      	lsls	r3, r2
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c2a:	4938      	ldr	r1, [pc, #224]	; (8004d0c <HAL_GPIO_Init+0x35c>)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	089b      	lsrs	r3, r3, #2
 8004c30:	3302      	adds	r3, #2
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4013      	ands	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	3301      	adds	r3, #1
 8004cec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f47f ae63 	bne.w	80049c4 <HAL_GPIO_Init+0x14>
  }
}
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	3724      	adds	r7, #36	; 0x24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	58000400 	.word	0x58000400

08004d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	807b      	strh	r3, [r7, #2]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d20:	787b      	ldrb	r3, [r7, #1]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d26:	887a      	ldrh	r2, [r7, #2]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004d2c:	e003      	b.n	8004d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d2e:	887b      	ldrh	r3, [r7, #2]
 8004d30:	041a      	lsls	r2, r3, #16
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	619a      	str	r2, [r3, #24]
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d54:	887a      	ldrh	r2, [r7, #2]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	041a      	lsls	r2, r3, #16
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	43d9      	mvns	r1, r3
 8004d60:	887b      	ldrh	r3, [r7, #2]
 8004d62:	400b      	ands	r3, r1
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	619a      	str	r2, [r3, #24]
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fc f98b 	bl	80010b8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004db4:	4a08      	ldr	r2, [pc, #32]	; (8004dd8 <HAL_HSEM_FastTake+0x2c>)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3320      	adds	r3, #32
 8004dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbe:	4a07      	ldr	r2, [pc, #28]	; (8004ddc <HAL_HSEM_FastTake+0x30>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d101      	bne.n	8004dc8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e000      	b.n	8004dca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	58026400 	.word	0x58026400
 8004ddc:	80000300 	.word	0x80000300

08004de0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004dea:	4906      	ldr	r1, [pc, #24]	; (8004e04 <HAL_HSEM_Release+0x24>)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	58026400 	.word	0x58026400

08004e08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0a:	b08f      	sub	sp, #60	; 0x3c
 8004e0c:	af0a      	add	r7, sp, #40	; 0x28
 8004e0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e116      	b.n	8005048 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fc fb8f 	bl	8001558 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f004 faff 	bl	800945c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	687e      	ldr	r6, [r7, #4]
 8004e66:	466d      	mov	r5, sp
 8004e68:	f106 0410 	add.w	r4, r6, #16
 8004e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e78:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e7c:	1d33      	adds	r3, r6, #4
 8004e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e80:	6838      	ldr	r0, [r7, #0]
 8004e82:	f004 fa7d 	bl	8009380 <USB_CoreInit>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0d7      	b.n	8005048 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f004 faed 	bl	800947e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	73fb      	strb	r3, [r7, #15]
 8004ea8:	e04a      	b.n	8004f40 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004eaa:	7bfa      	ldrb	r2, [r7, #15]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	333d      	adds	r3, #61	; 0x3d
 8004eba:	2201      	movs	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ebe:	7bfa      	ldrb	r2, [r7, #15]
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	333c      	adds	r3, #60	; 0x3c
 8004ece:	7bfa      	ldrb	r2, [r7, #15]
 8004ed0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ed2:	7bfa      	ldrb	r2, [r7, #15]
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	b298      	uxth	r0, r3
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3344      	adds	r3, #68	; 0x44
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004eea:	7bfa      	ldrb	r2, [r7, #15]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3340      	adds	r3, #64	; 0x40
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004efe:	7bfa      	ldrb	r2, [r7, #15]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3348      	adds	r3, #72	; 0x48
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f12:	7bfa      	ldrb	r2, [r7, #15]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	334c      	adds	r3, #76	; 0x4c
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f26:	7bfa      	ldrb	r2, [r7, #15]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3354      	adds	r3, #84	; 0x54
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
 8004f40:	7bfa      	ldrb	r2, [r7, #15]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d3af      	bcc.n	8004eaa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
 8004f4e:	e044      	b.n	8004fda <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f50:	7bfa      	ldrb	r2, [r7, #15]
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f66:	7bfa      	ldrb	r2, [r7, #15]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004f78:	7bfa      	ldrb	r2, [r7, #15]
 8004f7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f7c:	7bfa      	ldrb	r2, [r7, #15]
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	4613      	mov	r3, r2
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	4413      	add	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f92:	7bfa      	ldrb	r2, [r7, #15]
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fa8:	7bfa      	ldrb	r2, [r7, #15]
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fbe:	7bfa      	ldrb	r2, [r7, #15]
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
 8004fda:	7bfa      	ldrb	r2, [r7, #15]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d3b5      	bcc.n	8004f50 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	687e      	ldr	r6, [r7, #4]
 8004fec:	466d      	mov	r5, sp
 8004fee:	f106 0410 	add.w	r4, r6, #16
 8004ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ffa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ffe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005002:	1d33      	adds	r3, r6, #4
 8005004:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005006:	6838      	ldr	r0, [r7, #0]
 8005008:	f004 fa86 	bl	8009518 <USB_DevInit>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e014      	b.n	8005048 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	2b01      	cmp	r3, #1
 8005034:	d102      	bne.n	800503c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f80a 	bl	8005050 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	f004 fc44 	bl	80098ce <USB_DevDisconnect>

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005050 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800507e:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_PCDEx_ActivateLPM+0x44>)
 8005080:	4313      	orrs	r3, r2
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	10000003 	.word	0x10000003

08005098 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80050a0:	4b29      	ldr	r3, [pc, #164]	; (8005148 <HAL_PWREx_ConfigSupply+0xb0>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	2b06      	cmp	r3, #6
 80050aa:	d00a      	beq.n	80050c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80050ac:	4b26      	ldr	r3, [pc, #152]	; (8005148 <HAL_PWREx_ConfigSupply+0xb0>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d001      	beq.n	80050be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e040      	b.n	8005140 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	e03e      	b.n	8005140 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80050c2:	4b21      	ldr	r3, [pc, #132]	; (8005148 <HAL_PWREx_ConfigSupply+0xb0>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80050ca:	491f      	ldr	r1, [pc, #124]	; (8005148 <HAL_PWREx_ConfigSupply+0xb0>)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80050d2:	f7fc fbbf 	bl	8001854 <HAL_GetTick>
 80050d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050d8:	e009      	b.n	80050ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80050da:	f7fc fbbb 	bl	8001854 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050e8:	d901      	bls.n	80050ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e028      	b.n	8005140 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050ee:	4b16      	ldr	r3, [pc, #88]	; (8005148 <HAL_PWREx_ConfigSupply+0xb0>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fa:	d1ee      	bne.n	80050da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b1e      	cmp	r3, #30
 8005100:	d008      	beq.n	8005114 <HAL_PWREx_ConfigSupply+0x7c>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b2e      	cmp	r3, #46	; 0x2e
 8005106:	d005      	beq.n	8005114 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b1d      	cmp	r3, #29
 800510c:	d002      	beq.n	8005114 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b2d      	cmp	r3, #45	; 0x2d
 8005112:	d114      	bne.n	800513e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005114:	f7fc fb9e 	bl	8001854 <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800511a:	e009      	b.n	8005130 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800511c:	f7fc fb9a 	bl	8001854 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800512a:	d901      	bls.n	8005130 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e007      	b.n	8005140 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <HAL_PWREx_ConfigSupply+0xb0>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d1ee      	bne.n	800511c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	58024800 	.word	0x58024800

0800514c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a04      	ldr	r2, [pc, #16]	; (8005168 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800515a:	60d3      	str	r3, [r2, #12]
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	58024800 	.word	0x58024800

0800516c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08c      	sub	sp, #48	; 0x30
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f000 bc1d 	b.w	80059ba <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8087 	beq.w	800529c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518e:	4b99      	ldr	r3, [pc, #612]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005196:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005198:	4b96      	ldr	r3, [pc, #600]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d007      	beq.n	80051b4 <HAL_RCC_OscConfig+0x48>
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	2b18      	cmp	r3, #24
 80051a8:	d110      	bne.n	80051cc <HAL_RCC_OscConfig+0x60>
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d10b      	bne.n	80051cc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b4:	4b8f      	ldr	r3, [pc, #572]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d06c      	beq.n	800529a <HAL_RCC_OscConfig+0x12e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d168      	bne.n	800529a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e3f6      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d106      	bne.n	80051e4 <HAL_RCC_OscConfig+0x78>
 80051d6:	4b87      	ldr	r3, [pc, #540]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a86      	ldr	r2, [pc, #536]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e02e      	b.n	8005242 <HAL_RCC_OscConfig+0xd6>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10c      	bne.n	8005206 <HAL_RCC_OscConfig+0x9a>
 80051ec:	4b81      	ldr	r3, [pc, #516]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a80      	ldr	r2, [pc, #512]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	4b7e      	ldr	r3, [pc, #504]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a7d      	ldr	r2, [pc, #500]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	e01d      	b.n	8005242 <HAL_RCC_OscConfig+0xd6>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800520e:	d10c      	bne.n	800522a <HAL_RCC_OscConfig+0xbe>
 8005210:	4b78      	ldr	r3, [pc, #480]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a77      	ldr	r2, [pc, #476]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005216:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	4b75      	ldr	r3, [pc, #468]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a74      	ldr	r2, [pc, #464]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e00b      	b.n	8005242 <HAL_RCC_OscConfig+0xd6>
 800522a:	4b72      	ldr	r3, [pc, #456]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a71      	ldr	r2, [pc, #452]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	4b6f      	ldr	r3, [pc, #444]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a6e      	ldr	r2, [pc, #440]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800523c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005240:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d013      	beq.n	8005272 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524a:	f7fc fb03 	bl	8001854 <HAL_GetTick>
 800524e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005252:	f7fc faff 	bl	8001854 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b64      	cmp	r3, #100	; 0x64
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e3aa      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005264:	4b63      	ldr	r3, [pc, #396]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <HAL_RCC_OscConfig+0xe6>
 8005270:	e014      	b.n	800529c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7fc faef 	bl	8001854 <HAL_GetTick>
 8005276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800527a:	f7fc faeb 	bl	8001854 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b64      	cmp	r3, #100	; 0x64
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e396      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800528c:	4b59      	ldr	r3, [pc, #356]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f0      	bne.n	800527a <HAL_RCC_OscConfig+0x10e>
 8005298:	e000      	b.n	800529c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800529a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80cb 	beq.w	8005440 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052aa:	4b52      	ldr	r3, [pc, #328]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052b4:	4b4f      	ldr	r3, [pc, #316]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_RCC_OscConfig+0x164>
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	2b18      	cmp	r3, #24
 80052c4:	d156      	bne.n	8005374 <HAL_RCC_OscConfig+0x208>
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d151      	bne.n	8005374 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052d0:	4b48      	ldr	r3, [pc, #288]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_RCC_OscConfig+0x17c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e368      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052e8:	4b42      	ldr	r3, [pc, #264]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f023 0219 	bic.w	r2, r3, #25
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	493f      	ldr	r1, [pc, #252]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052fa:	f7fc faab 	bl	8001854 <HAL_GetTick>
 80052fe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005302:	f7fc faa7 	bl	8001854 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e352      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005314:	4b37      	ldr	r3, [pc, #220]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0f0      	beq.n	8005302 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005320:	f7fc fac8 	bl	80018b4 <HAL_GetREVID>
 8005324:	4603      	mov	r3, r0
 8005326:	f241 0203 	movw	r2, #4099	; 0x1003
 800532a:	4293      	cmp	r3, r2
 800532c:	d817      	bhi.n	800535e <HAL_RCC_OscConfig+0x1f2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d108      	bne.n	8005348 <HAL_RCC_OscConfig+0x1dc>
 8005336:	4b2f      	ldr	r3, [pc, #188]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800533e:	4a2d      	ldr	r2, [pc, #180]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005344:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005346:	e07b      	b.n	8005440 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005348:	4b2a      	ldr	r3, [pc, #168]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	031b      	lsls	r3, r3, #12
 8005356:	4927      	ldr	r1, [pc, #156]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005358:	4313      	orrs	r3, r2
 800535a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800535c:	e070      	b.n	8005440 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535e:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	061b      	lsls	r3, r3, #24
 800536c:	4921      	ldr	r1, [pc, #132]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800536e:	4313      	orrs	r3, r2
 8005370:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005372:	e065      	b.n	8005440 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d048      	beq.n	800540e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800537c:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f023 0219 	bic.w	r2, r3, #25
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	491a      	ldr	r1, [pc, #104]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fc fa61 	bl	8001854 <HAL_GetTick>
 8005392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005396:	f7fc fa5d 	bl	8001854 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e308      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053a8:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b4:	f7fc fa7e 	bl	80018b4 <HAL_GetREVID>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80053be:	4293      	cmp	r3, r2
 80053c0:	d81a      	bhi.n	80053f8 <HAL_RCC_OscConfig+0x28c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d108      	bne.n	80053dc <HAL_RCC_OscConfig+0x270>
 80053ca:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80053d2:	4a08      	ldr	r2, [pc, #32]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d8:	6053      	str	r3, [r2, #4]
 80053da:	e031      	b.n	8005440 <HAL_RCC_OscConfig+0x2d4>
 80053dc:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	031b      	lsls	r3, r3, #12
 80053ea:	4902      	ldr	r1, [pc, #8]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	604b      	str	r3, [r1, #4]
 80053f0:	e026      	b.n	8005440 <HAL_RCC_OscConfig+0x2d4>
 80053f2:	bf00      	nop
 80053f4:	58024400 	.word	0x58024400
 80053f8:	4b9a      	ldr	r3, [pc, #616]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	061b      	lsls	r3, r3, #24
 8005406:	4997      	ldr	r1, [pc, #604]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005408:	4313      	orrs	r3, r2
 800540a:	604b      	str	r3, [r1, #4]
 800540c:	e018      	b.n	8005440 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800540e:	4b95      	ldr	r3, [pc, #596]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a94      	ldr	r2, [pc, #592]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005414:	f023 0301 	bic.w	r3, r3, #1
 8005418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541a:	f7fc fa1b 	bl	8001854 <HAL_GetTick>
 800541e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005422:	f7fc fa17 	bl	8001854 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e2c2      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005434:	4b8b      	ldr	r3, [pc, #556]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f0      	bne.n	8005422 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80a9 	beq.w	80055a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544e:	4b85      	ldr	r3, [pc, #532]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005456:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005458:	4b82      	ldr	r3, [pc, #520]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b08      	cmp	r3, #8
 8005462:	d007      	beq.n	8005474 <HAL_RCC_OscConfig+0x308>
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b18      	cmp	r3, #24
 8005468:	d13a      	bne.n	80054e0 <HAL_RCC_OscConfig+0x374>
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	2b01      	cmp	r3, #1
 8005472:	d135      	bne.n	80054e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005474:	4b7b      	ldr	r3, [pc, #492]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_RCC_OscConfig+0x320>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d001      	beq.n	800548c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e296      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800548c:	f7fc fa12 	bl	80018b4 <HAL_GetREVID>
 8005490:	4603      	mov	r3, r0
 8005492:	f241 0203 	movw	r2, #4099	; 0x1003
 8005496:	4293      	cmp	r3, r2
 8005498:	d817      	bhi.n	80054ca <HAL_RCC_OscConfig+0x35e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d108      	bne.n	80054b4 <HAL_RCC_OscConfig+0x348>
 80054a2:	4b70      	ldr	r3, [pc, #448]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054aa:	4a6e      	ldr	r2, [pc, #440]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80054ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054b0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054b2:	e075      	b.n	80055a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054b4:	4b6b      	ldr	r3, [pc, #428]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	069b      	lsls	r3, r3, #26
 80054c2:	4968      	ldr	r1, [pc, #416]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054c8:	e06a      	b.n	80055a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054ca:	4b66      	ldr	r3, [pc, #408]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	061b      	lsls	r3, r3, #24
 80054d8:	4962      	ldr	r1, [pc, #392]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054de:	e05f      	b.n	80055a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d042      	beq.n	800556e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80054e8:	4b5e      	ldr	r3, [pc, #376]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a5d      	ldr	r2, [pc, #372]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80054ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f4:	f7fc f9ae 	bl	8001854 <HAL_GetTick>
 80054f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054fc:	f7fc f9aa 	bl	8001854 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e255      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800550e:	4b55      	ldr	r3, [pc, #340]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800551a:	f7fc f9cb 	bl	80018b4 <HAL_GetREVID>
 800551e:	4603      	mov	r3, r0
 8005520:	f241 0203 	movw	r2, #4099	; 0x1003
 8005524:	4293      	cmp	r3, r2
 8005526:	d817      	bhi.n	8005558 <HAL_RCC_OscConfig+0x3ec>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	2b20      	cmp	r3, #32
 800552e:	d108      	bne.n	8005542 <HAL_RCC_OscConfig+0x3d6>
 8005530:	4b4c      	ldr	r3, [pc, #304]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005538:	4a4a      	ldr	r2, [pc, #296]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 800553a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800553e:	6053      	str	r3, [r2, #4]
 8005540:	e02e      	b.n	80055a0 <HAL_RCC_OscConfig+0x434>
 8005542:	4b48      	ldr	r3, [pc, #288]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	069b      	lsls	r3, r3, #26
 8005550:	4944      	ldr	r1, [pc, #272]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005552:	4313      	orrs	r3, r2
 8005554:	604b      	str	r3, [r1, #4]
 8005556:	e023      	b.n	80055a0 <HAL_RCC_OscConfig+0x434>
 8005558:	4b42      	ldr	r3, [pc, #264]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	061b      	lsls	r3, r3, #24
 8005566:	493f      	ldr	r1, [pc, #252]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005568:	4313      	orrs	r3, r2
 800556a:	60cb      	str	r3, [r1, #12]
 800556c:	e018      	b.n	80055a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800556e:	4b3d      	ldr	r3, [pc, #244]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a3c      	ldr	r2, [pc, #240]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557a:	f7fc f96b 	bl	8001854 <HAL_GetTick>
 800557e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005582:	f7fc f967 	bl	8001854 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e212      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005594:	4b33      	ldr	r3, [pc, #204]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f0      	bne.n	8005582 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d036      	beq.n	800561a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d019      	beq.n	80055e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b4:	4b2b      	ldr	r3, [pc, #172]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80055b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b8:	4a2a      	ldr	r2, [pc, #168]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c0:	f7fc f948 	bl	8001854 <HAL_GetTick>
 80055c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c8:	f7fc f944 	bl	8001854 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e1ef      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055da:	4b22      	ldr	r3, [pc, #136]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80055dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f0      	beq.n	80055c8 <HAL_RCC_OscConfig+0x45c>
 80055e6:	e018      	b.n	800561a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e8:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80055ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ec:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f4:	f7fc f92e 	bl	8001854 <HAL_GetTick>
 80055f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055fc:	f7fc f92a 	bl	8001854 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e1d5      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800560e:	4b15      	ldr	r3, [pc, #84]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d039      	beq.n	800569a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01c      	beq.n	8005668 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800562e:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005638:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800563a:	f7fc f90b 	bl	8001854 <HAL_GetTick>
 800563e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005642:	f7fc f907 	bl	8001854 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e1b2      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005654:	4b03      	ldr	r3, [pc, #12]	; (8005664 <HAL_RCC_OscConfig+0x4f8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <HAL_RCC_OscConfig+0x4d6>
 8005660:	e01b      	b.n	800569a <HAL_RCC_OscConfig+0x52e>
 8005662:	bf00      	nop
 8005664:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005668:	4b9b      	ldr	r3, [pc, #620]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a9a      	ldr	r2, [pc, #616]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 800566e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005672:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005674:	f7fc f8ee 	bl	8001854 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800567c:	f7fc f8ea 	bl	8001854 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e195      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800568e:	4b92      	ldr	r3, [pc, #584]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 8081 	beq.w	80057aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056a8:	4b8c      	ldr	r3, [pc, #560]	; (80058dc <HAL_RCC_OscConfig+0x770>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a8b      	ldr	r2, [pc, #556]	; (80058dc <HAL_RCC_OscConfig+0x770>)
 80056ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056b4:	f7fc f8ce 	bl	8001854 <HAL_GetTick>
 80056b8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056bc:	f7fc f8ca 	bl	8001854 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b64      	cmp	r3, #100	; 0x64
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e175      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056ce:	4b83      	ldr	r3, [pc, #524]	; (80058dc <HAL_RCC_OscConfig+0x770>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f0      	beq.n	80056bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d106      	bne.n	80056f0 <HAL_RCC_OscConfig+0x584>
 80056e2:	4b7d      	ldr	r3, [pc, #500]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	4a7c      	ldr	r2, [pc, #496]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	6713      	str	r3, [r2, #112]	; 0x70
 80056ee:	e02d      	b.n	800574c <HAL_RCC_OscConfig+0x5e0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10c      	bne.n	8005712 <HAL_RCC_OscConfig+0x5a6>
 80056f8:	4b77      	ldr	r3, [pc, #476]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fc:	4a76      	ldr	r2, [pc, #472]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80056fe:	f023 0301 	bic.w	r3, r3, #1
 8005702:	6713      	str	r3, [r2, #112]	; 0x70
 8005704:	4b74      	ldr	r3, [pc, #464]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005708:	4a73      	ldr	r2, [pc, #460]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 800570a:	f023 0304 	bic.w	r3, r3, #4
 800570e:	6713      	str	r3, [r2, #112]	; 0x70
 8005710:	e01c      	b.n	800574c <HAL_RCC_OscConfig+0x5e0>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b05      	cmp	r3, #5
 8005718:	d10c      	bne.n	8005734 <HAL_RCC_OscConfig+0x5c8>
 800571a:	4b6f      	ldr	r3, [pc, #444]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 800571c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571e:	4a6e      	ldr	r2, [pc, #440]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005720:	f043 0304 	orr.w	r3, r3, #4
 8005724:	6713      	str	r3, [r2, #112]	; 0x70
 8005726:	4b6c      	ldr	r3, [pc, #432]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572a:	4a6b      	ldr	r2, [pc, #428]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	6713      	str	r3, [r2, #112]	; 0x70
 8005732:	e00b      	b.n	800574c <HAL_RCC_OscConfig+0x5e0>
 8005734:	4b68      	ldr	r3, [pc, #416]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	4a67      	ldr	r2, [pc, #412]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	6713      	str	r3, [r2, #112]	; 0x70
 8005740:	4b65      	ldr	r3, [pc, #404]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005744:	4a64      	ldr	r2, [pc, #400]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005746:	f023 0304 	bic.w	r3, r3, #4
 800574a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d015      	beq.n	8005780 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005754:	f7fc f87e 	bl	8001854 <HAL_GetTick>
 8005758:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800575a:	e00a      	b.n	8005772 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800575c:	f7fc f87a 	bl	8001854 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	f241 3288 	movw	r2, #5000	; 0x1388
 800576a:	4293      	cmp	r3, r2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e123      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005772:	4b59      	ldr	r3, [pc, #356]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0ee      	beq.n	800575c <HAL_RCC_OscConfig+0x5f0>
 800577e:	e014      	b.n	80057aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005780:	f7fc f868 	bl	8001854 <HAL_GetTick>
 8005784:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005786:	e00a      	b.n	800579e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005788:	f7fc f864 	bl	8001854 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f241 3288 	movw	r2, #5000	; 0x1388
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e10d      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800579e:	4b4e      	ldr	r3, [pc, #312]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80057a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1ee      	bne.n	8005788 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8102 	beq.w	80059b8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057b4:	4b48      	ldr	r3, [pc, #288]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057bc:	2b18      	cmp	r3, #24
 80057be:	f000 80bd 	beq.w	800593c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	f040 809e 	bne.w	8005908 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057cc:	4b42      	ldr	r3, [pc, #264]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a41      	ldr	r2, [pc, #260]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80057d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fc f83c 	bl	8001854 <HAL_GetTick>
 80057dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e0:	f7fc f838 	bl	8001854 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e0e3      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057f2:	4b39      	ldr	r3, [pc, #228]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057fe:	4b36      	ldr	r3, [pc, #216]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005802:	4b37      	ldr	r3, [pc, #220]	; (80058e0 <HAL_RCC_OscConfig+0x774>)
 8005804:	4013      	ands	r3, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800580e:	0112      	lsls	r2, r2, #4
 8005810:	430a      	orrs	r2, r1
 8005812:	4931      	ldr	r1, [pc, #196]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005814:	4313      	orrs	r3, r2
 8005816:	628b      	str	r3, [r1, #40]	; 0x28
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	3b01      	subs	r3, #1
 800581e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005826:	3b01      	subs	r3, #1
 8005828:	025b      	lsls	r3, r3, #9
 800582a:	b29b      	uxth	r3, r3
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	3b01      	subs	r3, #1
 8005834:	041b      	lsls	r3, r3, #16
 8005836:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005840:	3b01      	subs	r3, #1
 8005842:	061b      	lsls	r3, r3, #24
 8005844:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005848:	4923      	ldr	r1, [pc, #140]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 800584a:	4313      	orrs	r3, r2
 800584c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800584e:	4b22      	ldr	r3, [pc, #136]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	4a21      	ldr	r2, [pc, #132]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005854:	f023 0301 	bic.w	r3, r3, #1
 8005858:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800585a:	4b1f      	ldr	r3, [pc, #124]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 800585c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800585e:	4b21      	ldr	r3, [pc, #132]	; (80058e4 <HAL_RCC_OscConfig+0x778>)
 8005860:	4013      	ands	r3, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005866:	00d2      	lsls	r2, r2, #3
 8005868:	491b      	ldr	r1, [pc, #108]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 800586a:	4313      	orrs	r3, r2
 800586c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800586e:	4b1a      	ldr	r3, [pc, #104]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	f023 020c 	bic.w	r2, r3, #12
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	4917      	ldr	r1, [pc, #92]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 800587c:	4313      	orrs	r3, r2
 800587e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005880:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	f023 0202 	bic.w	r2, r3, #2
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588c:	4912      	ldr	r1, [pc, #72]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 800588e:	4313      	orrs	r3, r2
 8005890:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005892:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	4a10      	ldr	r2, [pc, #64]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 8005898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800589e:	4b0e      	ldr	r3, [pc, #56]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80058a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058aa:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80058b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80058b6:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80058bc:	f043 0301 	orr.w	r3, r3, #1
 80058c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058c2:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <HAL_RCC_OscConfig+0x76c>)
 80058c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ce:	f7fb ffc1 	bl	8001854 <HAL_GetTick>
 80058d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058d4:	e011      	b.n	80058fa <HAL_RCC_OscConfig+0x78e>
 80058d6:	bf00      	nop
 80058d8:	58024400 	.word	0x58024400
 80058dc:	58024800 	.word	0x58024800
 80058e0:	fffffc0c 	.word	0xfffffc0c
 80058e4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e8:	f7fb ffb4 	bl	8001854 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e05f      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058fa:	4b32      	ldr	r3, [pc, #200]	; (80059c4 <HAL_RCC_OscConfig+0x858>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f0      	beq.n	80058e8 <HAL_RCC_OscConfig+0x77c>
 8005906:	e057      	b.n	80059b8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005908:	4b2e      	ldr	r3, [pc, #184]	; (80059c4 <HAL_RCC_OscConfig+0x858>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a2d      	ldr	r2, [pc, #180]	; (80059c4 <HAL_RCC_OscConfig+0x858>)
 800590e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005914:	f7fb ff9e 	bl	8001854 <HAL_GetTick>
 8005918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800591c:	f7fb ff9a 	bl	8001854 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e045      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800592e:	4b25      	ldr	r3, [pc, #148]	; (80059c4 <HAL_RCC_OscConfig+0x858>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f0      	bne.n	800591c <HAL_RCC_OscConfig+0x7b0>
 800593a:	e03d      	b.n	80059b8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800593c:	4b21      	ldr	r3, [pc, #132]	; (80059c4 <HAL_RCC_OscConfig+0x858>)
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005942:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <HAL_RCC_OscConfig+0x858>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2b01      	cmp	r3, #1
 800594e:	d031      	beq.n	80059b4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f003 0203 	and.w	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800595a:	429a      	cmp	r2, r3
 800595c:	d12a      	bne.n	80059b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596a:	429a      	cmp	r2, r3
 800596c:	d122      	bne.n	80059b4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800597a:	429a      	cmp	r2, r3
 800597c:	d11a      	bne.n	80059b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	0a5b      	lsrs	r3, r3, #9
 8005982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800598c:	429a      	cmp	r2, r3
 800598e:	d111      	bne.n	80059b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	0c1b      	lsrs	r3, r3, #16
 8005994:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800599e:	429a      	cmp	r2, r3
 80059a0:	d108      	bne.n	80059b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	0e1b      	lsrs	r3, r3, #24
 80059a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e000      	b.n	80059ba <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3730      	adds	r7, #48	; 0x30
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	58024400 	.word	0x58024400

080059c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e19c      	b.n	8005d16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059dc:	4b8a      	ldr	r3, [pc, #552]	; (8005c08 <HAL_RCC_ClockConfig+0x240>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d910      	bls.n	8005a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ea:	4b87      	ldr	r3, [pc, #540]	; (8005c08 <HAL_RCC_ClockConfig+0x240>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f023 020f 	bic.w	r2, r3, #15
 80059f2:	4985      	ldr	r1, [pc, #532]	; (8005c08 <HAL_RCC_ClockConfig+0x240>)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fa:	4b83      	ldr	r3, [pc, #524]	; (8005c08 <HAL_RCC_ClockConfig+0x240>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d001      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e184      	b.n	8005d16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d010      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	4b7b      	ldr	r3, [pc, #492]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d908      	bls.n	8005a3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a28:	4b78      	ldr	r3, [pc, #480]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	4975      	ldr	r1, [pc, #468]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d010      	beq.n	8005a68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695a      	ldr	r2, [r3, #20]
 8005a4a:	4b70      	ldr	r3, [pc, #448]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d908      	bls.n	8005a68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a56:	4b6d      	ldr	r3, [pc, #436]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	496a      	ldr	r1, [pc, #424]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d010      	beq.n	8005a96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	4b64      	ldr	r3, [pc, #400]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d908      	bls.n	8005a96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a84:	4b61      	ldr	r3, [pc, #388]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	495e      	ldr	r1, [pc, #376]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0320 	and.w	r3, r3, #32
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d010      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69da      	ldr	r2, [r3, #28]
 8005aa6:	4b59      	ldr	r3, [pc, #356]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d908      	bls.n	8005ac4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ab2:	4b56      	ldr	r3, [pc, #344]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	4953      	ldr	r1, [pc, #332]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d010      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	4b4d      	ldr	r3, [pc, #308]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d908      	bls.n	8005af2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ae0:	4b4a      	ldr	r3, [pc, #296]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	f023 020f 	bic.w	r2, r3, #15
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4947      	ldr	r1, [pc, #284]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d055      	beq.n	8005baa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005afe:	4b43      	ldr	r3, [pc, #268]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	4940      	ldr	r1, [pc, #256]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d107      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b18:	4b3c      	ldr	r3, [pc, #240]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d121      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0f6      	b.n	8005d16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b30:	4b36      	ldr	r3, [pc, #216]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d115      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0ea      	b.n	8005d16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d107      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b48:	4b30      	ldr	r3, [pc, #192]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d109      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0de      	b.n	8005d16 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b58:	4b2c      	ldr	r3, [pc, #176]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0d6      	b.n	8005d16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b68:	4b28      	ldr	r3, [pc, #160]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f023 0207 	bic.w	r2, r3, #7
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	4925      	ldr	r1, [pc, #148]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7a:	f7fb fe6b 	bl	8001854 <HAL_GetTick>
 8005b7e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b80:	e00a      	b.n	8005b98 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b82:	f7fb fe67 	bl	8001854 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e0be      	b.n	8005d16 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b98:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d1eb      	bne.n	8005b82 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d010      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d208      	bcs.n	8005bd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc6:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	f023 020f 	bic.w	r2, r3, #15
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	490e      	ldr	r1, [pc, #56]	; (8005c0c <HAL_RCC_ClockConfig+0x244>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_RCC_ClockConfig+0x240>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d214      	bcs.n	8005c10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <HAL_RCC_ClockConfig+0x240>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 020f 	bic.w	r2, r3, #15
 8005bee:	4906      	ldr	r1, [pc, #24]	; (8005c08 <HAL_RCC_ClockConfig+0x240>)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf6:	4b04      	ldr	r3, [pc, #16]	; (8005c08 <HAL_RCC_ClockConfig+0x240>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e086      	b.n	8005d16 <HAL_RCC_ClockConfig+0x34e>
 8005c08:	52002000 	.word	0x52002000
 8005c0c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d010      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	4b3f      	ldr	r3, [pc, #252]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d208      	bcs.n	8005c3e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c2c:	4b3c      	ldr	r3, [pc, #240]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	4939      	ldr	r1, [pc, #228]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d010      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695a      	ldr	r2, [r3, #20]
 8005c4e:	4b34      	ldr	r3, [pc, #208]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d208      	bcs.n	8005c6c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c5a:	4b31      	ldr	r3, [pc, #196]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	492e      	ldr	r1, [pc, #184]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d010      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699a      	ldr	r2, [r3, #24]
 8005c7c:	4b28      	ldr	r3, [pc, #160]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d208      	bcs.n	8005c9a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c88:	4b25      	ldr	r3, [pc, #148]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	4922      	ldr	r1, [pc, #136]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d010      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69da      	ldr	r2, [r3, #28]
 8005caa:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d208      	bcs.n	8005cc8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cb6:	4b1a      	ldr	r3, [pc, #104]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	4917      	ldr	r1, [pc, #92]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cc8:	f000 f834 	bl	8005d34 <HAL_RCC_GetSysClockFreq>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	4b14      	ldr	r3, [pc, #80]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	0a1b      	lsrs	r3, r3, #8
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	4912      	ldr	r1, [pc, #72]	; (8005d24 <HAL_RCC_ClockConfig+0x35c>)
 8005cda:	5ccb      	ldrb	r3, [r1, r3]
 8005cdc:	f003 031f 	and.w	r3, r3, #31
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ce6:	4b0e      	ldr	r3, [pc, #56]	; (8005d20 <HAL_RCC_ClockConfig+0x358>)
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	4a0d      	ldr	r2, [pc, #52]	; (8005d24 <HAL_RCC_ClockConfig+0x35c>)
 8005cf0:	5cd3      	ldrb	r3, [r2, r3]
 8005cf2:	f003 031f 	and.w	r3, r3, #31
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfc:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <HAL_RCC_ClockConfig+0x360>)
 8005cfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d00:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <HAL_RCC_ClockConfig+0x364>)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <HAL_RCC_ClockConfig+0x368>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fb fd58 	bl	80017c0 <HAL_InitTick>
 8005d10:	4603      	mov	r3, r0
 8005d12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	58024400 	.word	0x58024400
 8005d24:	08009a20 	.word	0x08009a20
 8005d28:	24000004 	.word	0x24000004
 8005d2c:	24000000 	.word	0x24000000
 8005d30:	24000008 	.word	0x24000008

08005d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d3a:	4bb3      	ldr	r3, [pc, #716]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d42:	2b18      	cmp	r3, #24
 8005d44:	f200 8155 	bhi.w	8005ff2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005d48:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005db5 	.word	0x08005db5
 8005d54:	08005ff3 	.word	0x08005ff3
 8005d58:	08005ff3 	.word	0x08005ff3
 8005d5c:	08005ff3 	.word	0x08005ff3
 8005d60:	08005ff3 	.word	0x08005ff3
 8005d64:	08005ff3 	.word	0x08005ff3
 8005d68:	08005ff3 	.word	0x08005ff3
 8005d6c:	08005ff3 	.word	0x08005ff3
 8005d70:	08005ddb 	.word	0x08005ddb
 8005d74:	08005ff3 	.word	0x08005ff3
 8005d78:	08005ff3 	.word	0x08005ff3
 8005d7c:	08005ff3 	.word	0x08005ff3
 8005d80:	08005ff3 	.word	0x08005ff3
 8005d84:	08005ff3 	.word	0x08005ff3
 8005d88:	08005ff3 	.word	0x08005ff3
 8005d8c:	08005ff3 	.word	0x08005ff3
 8005d90:	08005de1 	.word	0x08005de1
 8005d94:	08005ff3 	.word	0x08005ff3
 8005d98:	08005ff3 	.word	0x08005ff3
 8005d9c:	08005ff3 	.word	0x08005ff3
 8005da0:	08005ff3 	.word	0x08005ff3
 8005da4:	08005ff3 	.word	0x08005ff3
 8005da8:	08005ff3 	.word	0x08005ff3
 8005dac:	08005ff3 	.word	0x08005ff3
 8005db0:	08005de7 	.word	0x08005de7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005db4:	4b94      	ldr	r3, [pc, #592]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d009      	beq.n	8005dd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dc0:	4b91      	ldr	r3, [pc, #580]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	08db      	lsrs	r3, r3, #3
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	4a90      	ldr	r2, [pc, #576]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005dd2:	e111      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005dd4:	4b8d      	ldr	r3, [pc, #564]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dd6:	61bb      	str	r3, [r7, #24]
    break;
 8005dd8:	e10e      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005dda:	4b8d      	ldr	r3, [pc, #564]	; (8006010 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ddc:	61bb      	str	r3, [r7, #24]
    break;
 8005dde:	e10b      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005de0:	4b8c      	ldr	r3, [pc, #560]	; (8006014 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005de2:	61bb      	str	r3, [r7, #24]
    break;
 8005de4:	e108      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005de6:	4b88      	ldr	r3, [pc, #544]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005df0:	4b85      	ldr	r3, [pc, #532]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dfa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005dfc:	4b82      	ldr	r3, [pc, #520]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e06:	4b80      	ldr	r3, [pc, #512]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0a:	08db      	lsrs	r3, r3, #3
 8005e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80e1 	beq.w	8005fec <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	f000 8083 	beq.w	8005f38 <HAL_RCC_GetSysClockFreq+0x204>
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	f200 80a1 	bhi.w	8005f7c <HAL_RCC_GetSysClockFreq+0x248>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_RCC_GetSysClockFreq+0x114>
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d056      	beq.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e46:	e099      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e48:	4b6f      	ldr	r3, [pc, #444]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d02d      	beq.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e54:	4b6c      	ldr	r3, [pc, #432]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	08db      	lsrs	r3, r3, #3
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	4a6b      	ldr	r2, [pc, #428]	; (800600c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e60:	fa22 f303 	lsr.w	r3, r2, r3
 8005e64:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	ee07 3a90 	vmov	s15, r3
 8005e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7e:	4b62      	ldr	r3, [pc, #392]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e92:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006018 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005eae:	e087      	b.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800601c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec2:	4b51      	ldr	r3, [pc, #324]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ed6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006018 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ef2:	e065      	b.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006020 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f06:	4b40      	ldr	r3, [pc, #256]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f1a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006018 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f36:	e043      	b.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f42:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006024 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4a:	4b2f      	ldr	r3, [pc, #188]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f5e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006018 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f7a:	e021      	b.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006020 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8e:	4b1e      	ldr	r3, [pc, #120]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006018 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fbe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005fc0:	4b11      	ldr	r3, [pc, #68]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	0a5b      	lsrs	r3, r3, #9
 8005fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fca:	3301      	adds	r3, #1
 8005fcc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	ee07 3a90 	vmov	s15, r3
 8005fd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fe4:	ee17 3a90 	vmov	r3, s15
 8005fe8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005fea:	e005      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	61bb      	str	r3, [r7, #24]
    break;
 8005ff0:	e002      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005ff2:	4b07      	ldr	r3, [pc, #28]	; (8006010 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ff4:	61bb      	str	r3, [r7, #24]
    break;
 8005ff6:	bf00      	nop
  }

  return sysclockfreq;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3724      	adds	r7, #36	; 0x24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	58024400 	.word	0x58024400
 800600c:	03d09000 	.word	0x03d09000
 8006010:	003d0900 	.word	0x003d0900
 8006014:	007a1200 	.word	0x007a1200
 8006018:	46000000 	.word	0x46000000
 800601c:	4c742400 	.word	0x4c742400
 8006020:	4a742400 	.word	0x4a742400
 8006024:	4af42400 	.word	0x4af42400

08006028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800602e:	f7ff fe81 	bl	8005d34 <HAL_RCC_GetSysClockFreq>
 8006032:	4602      	mov	r2, r0
 8006034:	4b10      	ldr	r3, [pc, #64]	; (8006078 <HAL_RCC_GetHCLKFreq+0x50>)
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	0a1b      	lsrs	r3, r3, #8
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	490f      	ldr	r1, [pc, #60]	; (800607c <HAL_RCC_GetHCLKFreq+0x54>)
 8006040:	5ccb      	ldrb	r3, [r1, r3]
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	fa22 f303 	lsr.w	r3, r2, r3
 800604a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <HAL_RCC_GetHCLKFreq+0x50>)
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	4a09      	ldr	r2, [pc, #36]	; (800607c <HAL_RCC_GetHCLKFreq+0x54>)
 8006056:	5cd3      	ldrb	r3, [r2, r3]
 8006058:	f003 031f 	and.w	r3, r3, #31
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	fa22 f303 	lsr.w	r3, r2, r3
 8006062:	4a07      	ldr	r2, [pc, #28]	; (8006080 <HAL_RCC_GetHCLKFreq+0x58>)
 8006064:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006066:	4a07      	ldr	r2, [pc, #28]	; (8006084 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800606c:	4b04      	ldr	r3, [pc, #16]	; (8006080 <HAL_RCC_GetHCLKFreq+0x58>)
 800606e:	681b      	ldr	r3, [r3, #0]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	58024400 	.word	0x58024400
 800607c:	08009a20 	.word	0x08009a20
 8006080:	24000004 	.word	0x24000004
 8006084:	24000000 	.word	0x24000000

08006088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800608c:	f7ff ffcc 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 8006090:	4602      	mov	r2, r0
 8006092:	4b06      	ldr	r3, [pc, #24]	; (80060ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	091b      	lsrs	r3, r3, #4
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	4904      	ldr	r1, [pc, #16]	; (80060b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800609e:	5ccb      	ldrb	r3, [r1, r3]
 80060a0:	f003 031f 	and.w	r3, r3, #31
 80060a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	58024400 	.word	0x58024400
 80060b0:	08009a20 	.word	0x08009a20

080060b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80060b8:	f7ff ffb6 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 80060bc:	4602      	mov	r2, r0
 80060be:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	0a1b      	lsrs	r3, r3, #8
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	4904      	ldr	r1, [pc, #16]	; (80060dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80060ca:	5ccb      	ldrb	r3, [r1, r3]
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	58024400 	.word	0x58024400
 80060dc:	08009a20 	.word	0x08009a20

080060e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060e8:	2300      	movs	r3, #0
 80060ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060ec:	2300      	movs	r3, #0
 80060ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d03f      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006100:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006104:	d02a      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006106:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800610a:	d824      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800610c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006110:	d018      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006116:	d81e      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800611c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006120:	d007      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006122:	e018      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006124:	4ba3      	ldr	r3, [pc, #652]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	4aa2      	ldr	r2, [pc, #648]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800612a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800612e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006130:	e015      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3304      	adds	r3, #4
 8006136:	2102      	movs	r1, #2
 8006138:	4618      	mov	r0, r3
 800613a:	f001 f9d5 	bl	80074e8 <RCCEx_PLL2_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006142:	e00c      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3324      	adds	r3, #36	; 0x24
 8006148:	2102      	movs	r1, #2
 800614a:	4618      	mov	r0, r3
 800614c:	f001 fa7e 	bl	800764c <RCCEx_PLL3_Config>
 8006150:	4603      	mov	r3, r0
 8006152:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006154:	e003      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]
      break;
 800615a:	e000      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800615c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006164:	4b93      	ldr	r3, [pc, #588]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006170:	4990      	ldr	r1, [pc, #576]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006172:	4313      	orrs	r3, r2
 8006174:	650b      	str	r3, [r1, #80]	; 0x50
 8006176:	e001      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006184:	2b00      	cmp	r3, #0
 8006186:	d03d      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618c:	2b04      	cmp	r3, #4
 800618e:	d826      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006190:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006196:	bf00      	nop
 8006198:	080061ad 	.word	0x080061ad
 800619c:	080061bb 	.word	0x080061bb
 80061a0:	080061cd 	.word	0x080061cd
 80061a4:	080061e5 	.word	0x080061e5
 80061a8:	080061e5 	.word	0x080061e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ac:	4b81      	ldr	r3, [pc, #516]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	4a80      	ldr	r2, [pc, #512]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061b8:	e015      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3304      	adds	r3, #4
 80061be:	2100      	movs	r1, #0
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 f991 	bl	80074e8 <RCCEx_PLL2_Config>
 80061c6:	4603      	mov	r3, r0
 80061c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061ca:	e00c      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3324      	adds	r3, #36	; 0x24
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f001 fa3a 	bl	800764c <RCCEx_PLL3_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061dc:	e003      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	75fb      	strb	r3, [r7, #23]
      break;
 80061e2:	e000      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80061e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d109      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061ec:	4b71      	ldr	r3, [pc, #452]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f0:	f023 0207 	bic.w	r2, r3, #7
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f8:	496e      	ldr	r1, [pc, #440]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	650b      	str	r3, [r1, #80]	; 0x50
 80061fe:	e001      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800620c:	2b00      	cmp	r3, #0
 800620e:	d042      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006218:	d02b      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800621a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621e:	d825      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006220:	2bc0      	cmp	r3, #192	; 0xc0
 8006222:	d028      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006224:	2bc0      	cmp	r3, #192	; 0xc0
 8006226:	d821      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006228:	2b80      	cmp	r3, #128	; 0x80
 800622a:	d016      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800622c:	2b80      	cmp	r3, #128	; 0x80
 800622e:	d81d      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d007      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006238:	e018      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800623a:	4b5e      	ldr	r3, [pc, #376]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	4a5d      	ldr	r2, [pc, #372]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006244:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006246:	e017      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3304      	adds	r3, #4
 800624c:	2100      	movs	r1, #0
 800624e:	4618      	mov	r0, r3
 8006250:	f001 f94a 	bl	80074e8 <RCCEx_PLL2_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006258:	e00e      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3324      	adds	r3, #36	; 0x24
 800625e:	2100      	movs	r1, #0
 8006260:	4618      	mov	r0, r3
 8006262:	f001 f9f3 	bl	800764c <RCCEx_PLL3_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800626a:	e005      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	75fb      	strb	r3, [r7, #23]
      break;
 8006270:	e002      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006276:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006278:	7dfb      	ldrb	r3, [r7, #23]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d109      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800627e:	4b4d      	ldr	r3, [pc, #308]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006282:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	494a      	ldr	r1, [pc, #296]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800628c:	4313      	orrs	r3, r2
 800628e:	650b      	str	r3, [r1, #80]	; 0x50
 8006290:	e001      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d049      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062ac:	d030      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80062ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062b2:	d82a      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80062b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062b8:	d02c      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80062ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062be:	d824      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80062c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062c4:	d018      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80062c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ca:	d81e      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80062d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062d4:	d007      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80062d6:	e018      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d8:	4b36      	ldr	r3, [pc, #216]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	4a35      	ldr	r2, [pc, #212]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062e4:	e017      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3304      	adds	r3, #4
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 f8fb 	bl	80074e8 <RCCEx_PLL2_Config>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80062f6:	e00e      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3324      	adds	r3, #36	; 0x24
 80062fc:	2100      	movs	r1, #0
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 f9a4 	bl	800764c <RCCEx_PLL3_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006308:	e005      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	75fb      	strb	r3, [r7, #23]
      break;
 800630e:	e002      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006310:	bf00      	nop
 8006312:	e000      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800631c:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800631e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006320:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800632a:	4922      	ldr	r1, [pc, #136]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800632c:	4313      	orrs	r3, r2
 800632e:	658b      	str	r3, [r1, #88]	; 0x58
 8006330:	e001      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006332:	7dfb      	ldrb	r3, [r7, #23]
 8006334:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800633e:	2b00      	cmp	r3, #0
 8006340:	d04b      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800634c:	d030      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800634e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006352:	d82a      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006354:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006358:	d02e      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800635a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800635e:	d824      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006360:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006364:	d018      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800636a:	d81e      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006374:	d007      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006376:	e018      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006378:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	4a0d      	ldr	r2, [pc, #52]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800637e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006384:	e019      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3304      	adds	r3, #4
 800638a:	2100      	movs	r1, #0
 800638c:	4618      	mov	r0, r3
 800638e:	f001 f8ab 	bl	80074e8 <RCCEx_PLL2_Config>
 8006392:	4603      	mov	r3, r0
 8006394:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006396:	e010      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3324      	adds	r3, #36	; 0x24
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f001 f954 	bl	800764c <RCCEx_PLL3_Config>
 80063a4:	4603      	mov	r3, r0
 80063a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063a8:	e007      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	75fb      	strb	r3, [r7, #23]
      break;
 80063ae:	e004      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80063b0:	bf00      	nop
 80063b2:	e002      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80063b4:	58024400 	.word	0x58024400
      break;
 80063b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063c0:	4b99      	ldr	r3, [pc, #612]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063ce:	4996      	ldr	r1, [pc, #600]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	658b      	str	r3, [r1, #88]	; 0x58
 80063d4:	e001      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d032      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ea:	2b30      	cmp	r3, #48	; 0x30
 80063ec:	d01c      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80063ee:	2b30      	cmp	r3, #48	; 0x30
 80063f0:	d817      	bhi.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d00c      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d813      	bhi.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d016      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80063fe:	2b10      	cmp	r3, #16
 8006400:	d10f      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006402:	4b89      	ldr	r3, [pc, #548]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	4a88      	ldr	r2, [pc, #544]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800640c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800640e:	e00e      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3304      	adds	r3, #4
 8006414:	2102      	movs	r1, #2
 8006416:	4618      	mov	r0, r3
 8006418:	f001 f866 	bl	80074e8 <RCCEx_PLL2_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006420:	e005      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]
      break;
 8006426:	e002      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006428:	bf00      	nop
 800642a:	e000      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800642c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006434:	4b7c      	ldr	r3, [pc, #496]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006438:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006440:	4979      	ldr	r1, [pc, #484]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006442:	4313      	orrs	r3, r2
 8006444:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006446:	e001      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d047      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006460:	d030      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006466:	d82a      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006468:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800646c:	d02c      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800646e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006472:	d824      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006478:	d018      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800647a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800647e:	d81e      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006488:	d007      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800648a:	e018      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800648c:	4b66      	ldr	r3, [pc, #408]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	4a65      	ldr	r2, [pc, #404]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006496:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006498:	e017      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3304      	adds	r3, #4
 800649e:	2100      	movs	r1, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 f821 	bl	80074e8 <RCCEx_PLL2_Config>
 80064a6:	4603      	mov	r3, r0
 80064a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064aa:	e00e      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3324      	adds	r3, #36	; 0x24
 80064b0:	2100      	movs	r1, #0
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 f8ca 	bl	800764c <RCCEx_PLL3_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064bc:	e005      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	75fb      	strb	r3, [r7, #23]
      break;
 80064c2:	e002      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80064c4:	bf00      	nop
 80064c6:	e000      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80064c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d109      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064d0:	4b55      	ldr	r3, [pc, #340]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064dc:	4952      	ldr	r1, [pc, #328]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	650b      	str	r3, [r1, #80]	; 0x50
 80064e2:	e001      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d049      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064fc:	d02e      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80064fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006502:	d828      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006504:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006508:	d02a      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800650a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800650e:	d822      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006510:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006514:	d026      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006516:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800651a:	d81c      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800651c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006520:	d010      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006526:	d816      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01d      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800652c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006530:	d111      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3304      	adds	r3, #4
 8006536:	2101      	movs	r1, #1
 8006538:	4618      	mov	r0, r3
 800653a:	f000 ffd5 	bl	80074e8 <RCCEx_PLL2_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006542:	e012      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3324      	adds	r3, #36	; 0x24
 8006548:	2101      	movs	r1, #1
 800654a:	4618      	mov	r0, r3
 800654c:	f001 f87e 	bl	800764c <RCCEx_PLL3_Config>
 8006550:	4603      	mov	r3, r0
 8006552:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006554:	e009      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	75fb      	strb	r3, [r7, #23]
      break;
 800655a:	e006      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800655c:	bf00      	nop
 800655e:	e004      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006560:	bf00      	nop
 8006562:	e002      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006564:	bf00      	nop
 8006566:	e000      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800656a:	7dfb      	ldrb	r3, [r7, #23]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d109      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006570:	4b2d      	ldr	r3, [pc, #180]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006574:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800657c:	492a      	ldr	r1, [pc, #168]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800657e:	4313      	orrs	r3, r2
 8006580:	650b      	str	r3, [r1, #80]	; 0x50
 8006582:	e001      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d04d      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800659a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800659e:	d02e      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80065a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065a4:	d828      	bhi.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80065a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065aa:	d02a      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b0:	d822      	bhi.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80065b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065b6:	d026      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80065b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065bc:	d81c      	bhi.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80065be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065c2:	d010      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80065c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065c8:	d816      	bhi.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d01d      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80065ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065d2:	d111      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3304      	adds	r3, #4
 80065d8:	2101      	movs	r1, #1
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 ff84 	bl	80074e8 <RCCEx_PLL2_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065e4:	e012      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3324      	adds	r3, #36	; 0x24
 80065ea:	2101      	movs	r1, #1
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 f82d 	bl	800764c <RCCEx_PLL3_Config>
 80065f2:	4603      	mov	r3, r0
 80065f4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065f6:	e009      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	75fb      	strb	r3, [r7, #23]
      break;
 80065fc:	e006      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80065fe:	bf00      	nop
 8006600:	e004      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006602:	bf00      	nop
 8006604:	e002      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006606:	bf00      	nop
 8006608:	e000      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800660a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10c      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006612:	4b05      	ldr	r3, [pc, #20]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006620:	4901      	ldr	r1, [pc, #4]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006622:	4313      	orrs	r3, r2
 8006624:	658b      	str	r3, [r1, #88]	; 0x58
 8006626:	e003      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d02f      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006644:	d00e      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800664a:	d814      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d015      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006654:	d10f      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006656:	4baf      	ldr	r3, [pc, #700]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	4aae      	ldr	r2, [pc, #696]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800665c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006660:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006662:	e00c      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3304      	adds	r3, #4
 8006668:	2101      	movs	r1, #1
 800666a:	4618      	mov	r0, r3
 800666c:	f000 ff3c 	bl	80074e8 <RCCEx_PLL2_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006674:	e003      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
      break;
 800667a:	e000      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800667c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d109      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006684:	4ba3      	ldr	r3, [pc, #652]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006688:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006690:	49a0      	ldr	r1, [pc, #640]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006692:	4313      	orrs	r3, r2
 8006694:	650b      	str	r3, [r1, #80]	; 0x50
 8006696:	e001      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d032      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d81b      	bhi.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80066b0:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066ef 	.word	0x080066ef
 80066bc:	080066c9 	.word	0x080066c9
 80066c0:	080066d7 	.word	0x080066d7
 80066c4:	080066ef 	.word	0x080066ef
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c8:	4b92      	ldr	r3, [pc, #584]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	4a91      	ldr	r2, [pc, #580]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066d4:	e00c      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3304      	adds	r3, #4
 80066da:	2102      	movs	r1, #2
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 ff03 	bl	80074e8 <RCCEx_PLL2_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066e6:	e003      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	75fb      	strb	r3, [r7, #23]
      break;
 80066ec:	e000      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80066ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d109      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80066f6:	4b87      	ldr	r3, [pc, #540]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066fa:	f023 0203 	bic.w	r2, r3, #3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	4984      	ldr	r1, [pc, #528]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006704:	4313      	orrs	r3, r2
 8006706:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006708:	e001      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8086 	beq.w	8006828 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800671c:	4b7e      	ldr	r3, [pc, #504]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a7d      	ldr	r2, [pc, #500]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006726:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006728:	f7fb f894 	bl	8001854 <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800672e:	e009      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006730:	f7fb f890 	bl	8001854 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b64      	cmp	r3, #100	; 0x64
 800673c:	d902      	bls.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	75fb      	strb	r3, [r7, #23]
        break;
 8006742:	e005      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006744:	4b74      	ldr	r3, [pc, #464]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0ef      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d166      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006756:	4b6f      	ldr	r3, [pc, #444]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006758:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006760:	4053      	eors	r3, r2
 8006762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006766:	2b00      	cmp	r3, #0
 8006768:	d013      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800676a:	4b6a      	ldr	r3, [pc, #424]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006772:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006774:	4b67      	ldr	r3, [pc, #412]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006778:	4a66      	ldr	r2, [pc, #408]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800677a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800677e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006780:	4b64      	ldr	r3, [pc, #400]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	4a63      	ldr	r2, [pc, #396]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800678a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800678c:	4a61      	ldr	r2, [pc, #388]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800679c:	d115      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679e:	f7fb f859 	bl	8001854 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067a4:	e00b      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a6:	f7fb f855 	bl	8001854 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d902      	bls.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	75fb      	strb	r3, [r7, #23]
            break;
 80067bc:	e005      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067be:	4b55      	ldr	r3, [pc, #340]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80067c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0ed      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d126      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067de:	d10d      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80067e0:	4b4c      	ldr	r3, [pc, #304]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067ee:	0919      	lsrs	r1, r3, #4
 80067f0:	4b4a      	ldr	r3, [pc, #296]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80067f2:	400b      	ands	r3, r1
 80067f4:	4947      	ldr	r1, [pc, #284]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	610b      	str	r3, [r1, #16]
 80067fa:	e005      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80067fc:	4b45      	ldr	r3, [pc, #276]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	4a44      	ldr	r2, [pc, #272]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006802:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006806:	6113      	str	r3, [r2, #16]
 8006808:	4b42      	ldr	r3, [pc, #264]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800680a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006816:	493f      	ldr	r1, [pc, #252]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006818:	4313      	orrs	r3, r2
 800681a:	670b      	str	r3, [r1, #112]	; 0x70
 800681c:	e004      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	75bb      	strb	r3, [r7, #22]
 8006822:	e001      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8085 	beq.w	8006940 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800683a:	2b28      	cmp	r3, #40	; 0x28
 800683c:	d866      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800683e:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	08006921 	.word	0x08006921
 8006848:	0800690d 	.word	0x0800690d
 800684c:	0800690d 	.word	0x0800690d
 8006850:	0800690d 	.word	0x0800690d
 8006854:	0800690d 	.word	0x0800690d
 8006858:	0800690d 	.word	0x0800690d
 800685c:	0800690d 	.word	0x0800690d
 8006860:	0800690d 	.word	0x0800690d
 8006864:	080068e9 	.word	0x080068e9
 8006868:	0800690d 	.word	0x0800690d
 800686c:	0800690d 	.word	0x0800690d
 8006870:	0800690d 	.word	0x0800690d
 8006874:	0800690d 	.word	0x0800690d
 8006878:	0800690d 	.word	0x0800690d
 800687c:	0800690d 	.word	0x0800690d
 8006880:	0800690d 	.word	0x0800690d
 8006884:	080068fb 	.word	0x080068fb
 8006888:	0800690d 	.word	0x0800690d
 800688c:	0800690d 	.word	0x0800690d
 8006890:	0800690d 	.word	0x0800690d
 8006894:	0800690d 	.word	0x0800690d
 8006898:	0800690d 	.word	0x0800690d
 800689c:	0800690d 	.word	0x0800690d
 80068a0:	0800690d 	.word	0x0800690d
 80068a4:	08006921 	.word	0x08006921
 80068a8:	0800690d 	.word	0x0800690d
 80068ac:	0800690d 	.word	0x0800690d
 80068b0:	0800690d 	.word	0x0800690d
 80068b4:	0800690d 	.word	0x0800690d
 80068b8:	0800690d 	.word	0x0800690d
 80068bc:	0800690d 	.word	0x0800690d
 80068c0:	0800690d 	.word	0x0800690d
 80068c4:	08006921 	.word	0x08006921
 80068c8:	0800690d 	.word	0x0800690d
 80068cc:	0800690d 	.word	0x0800690d
 80068d0:	0800690d 	.word	0x0800690d
 80068d4:	0800690d 	.word	0x0800690d
 80068d8:	0800690d 	.word	0x0800690d
 80068dc:	0800690d 	.word	0x0800690d
 80068e0:	0800690d 	.word	0x0800690d
 80068e4:	08006921 	.word	0x08006921
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	2101      	movs	r1, #1
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fdfa 	bl	80074e8 <RCCEx_PLL2_Config>
 80068f4:	4603      	mov	r3, r0
 80068f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068f8:	e013      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3324      	adds	r3, #36	; 0x24
 80068fe:	2101      	movs	r1, #1
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fea3 	bl	800764c <RCCEx_PLL3_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800690a:	e00a      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	75fb      	strb	r3, [r7, #23]
      break;
 8006910:	e007      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006912:	bf00      	nop
 8006914:	58024400 	.word	0x58024400
 8006918:	58024800 	.word	0x58024800
 800691c:	00ffffcf 	.word	0x00ffffcf
      break;
 8006920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d109      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006928:	4b96      	ldr	r3, [pc, #600]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800692a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006934:	4993      	ldr	r1, [pc, #588]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006936:	4313      	orrs	r3, r2
 8006938:	654b      	str	r3, [r1, #84]	; 0x54
 800693a:	e001      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d038      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006950:	2b05      	cmp	r3, #5
 8006952:	d821      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006954:	a201      	add	r2, pc, #4	; (adr r2, 800695c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695a:	bf00      	nop
 800695c:	0800699f 	.word	0x0800699f
 8006960:	08006975 	.word	0x08006975
 8006964:	08006987 	.word	0x08006987
 8006968:	0800699f 	.word	0x0800699f
 800696c:	0800699f 	.word	0x0800699f
 8006970:	0800699f 	.word	0x0800699f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3304      	adds	r3, #4
 8006978:	2101      	movs	r1, #1
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fdb4 	bl	80074e8 <RCCEx_PLL2_Config>
 8006980:	4603      	mov	r3, r0
 8006982:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006984:	e00c      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3324      	adds	r3, #36	; 0x24
 800698a:	2101      	movs	r1, #1
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fe5d 	bl	800764c <RCCEx_PLL3_Config>
 8006992:	4603      	mov	r3, r0
 8006994:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006996:	e003      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	75fb      	strb	r3, [r7, #23]
      break;
 800699c:	e000      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800699e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d109      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80069a6:	4b77      	ldr	r3, [pc, #476]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80069a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069aa:	f023 0207 	bic.w	r2, r3, #7
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b2:	4974      	ldr	r1, [pc, #464]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	654b      	str	r3, [r1, #84]	; 0x54
 80069b8:	e001      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
 80069bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d03a      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d0:	2b05      	cmp	r3, #5
 80069d2:	d821      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80069d4:	a201      	add	r2, pc, #4	; (adr r2, 80069dc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80069d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069da:	bf00      	nop
 80069dc:	08006a1f 	.word	0x08006a1f
 80069e0:	080069f5 	.word	0x080069f5
 80069e4:	08006a07 	.word	0x08006a07
 80069e8:	08006a1f 	.word	0x08006a1f
 80069ec:	08006a1f 	.word	0x08006a1f
 80069f0:	08006a1f 	.word	0x08006a1f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3304      	adds	r3, #4
 80069f8:	2101      	movs	r1, #1
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fd74 	bl	80074e8 <RCCEx_PLL2_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a04:	e00c      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3324      	adds	r3, #36	; 0x24
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 fe1d 	bl	800764c <RCCEx_PLL3_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a16:	e003      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1c:	e000      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a26:	4b57      	ldr	r3, [pc, #348]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2a:	f023 0207 	bic.w	r2, r3, #7
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a34:	4953      	ldr	r1, [pc, #332]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	658b      	str	r3, [r1, #88]	; 0x58
 8006a3a:	e001      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d04b      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a56:	d02e      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a5c:	d828      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a62:	d02a      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a68:	d822      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006a6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a6e:	d026      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006a70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a74:	d81c      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a7a:	d010      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a80:	d816      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01d      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a8a:	d111      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	2100      	movs	r1, #0
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fd28 	bl	80074e8 <RCCEx_PLL2_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a9c:	e012      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3324      	adds	r3, #36	; 0x24
 8006aa2:	2102      	movs	r1, #2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fdd1 	bl	800764c <RCCEx_PLL3_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006aae:	e009      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab4:	e006      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006ab6:	bf00      	nop
 8006ab8:	e004      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006aba:	bf00      	nop
 8006abc:	e002      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006abe:	bf00      	nop
 8006ac0:	e000      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aca:	4b2e      	ldr	r3, [pc, #184]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ace:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ad8:	492a      	ldr	r1, [pc, #168]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	654b      	str	r3, [r1, #84]	; 0x54
 8006ade:	e001      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
 8006ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d04d      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006af6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006afa:	d02e      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006afc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b00:	d828      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b06:	d02a      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0c:	d822      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006b0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b12:	d026      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006b14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b18:	d81c      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b1e:	d010      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b24:	d816      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d01d      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2e:	d111      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3304      	adds	r3, #4
 8006b34:	2100      	movs	r1, #0
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fcd6 	bl	80074e8 <RCCEx_PLL2_Config>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b40:	e012      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3324      	adds	r3, #36	; 0x24
 8006b46:	2102      	movs	r1, #2
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fd7f 	bl	800764c <RCCEx_PLL3_Config>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b52:	e009      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	75fb      	strb	r3, [r7, #23]
      break;
 8006b58:	e006      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006b5a:	bf00      	nop
 8006b5c:	e004      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006b5e:	bf00      	nop
 8006b60:	e002      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006b62:	bf00      	nop
 8006b64:	e000      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10c      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b6e:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b7c:	4901      	ldr	r1, [pc, #4]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	658b      	str	r3, [r1, #88]	; 0x58
 8006b82:	e003      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006b84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d04b      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ba2:	d02e      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006ba4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ba8:	d828      	bhi.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bae:	d02a      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb4:	d822      	bhi.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006bb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bba:	d026      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006bbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bc0:	d81c      	bhi.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bc6:	d010      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bcc:	d816      	bhi.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01d      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd6:	d111      	bne.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fc82 	bl	80074e8 <RCCEx_PLL2_Config>
 8006be4:	4603      	mov	r3, r0
 8006be6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006be8:	e012      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3324      	adds	r3, #36	; 0x24
 8006bee:	2102      	movs	r1, #2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fd2b 	bl	800764c <RCCEx_PLL3_Config>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006bfa:	e009      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8006c00:	e006      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006c02:	bf00      	nop
 8006c04:	e004      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006c06:	bf00      	nop
 8006c08:	e002      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006c0a:	bf00      	nop
 8006c0c:	e000      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10a      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c16:	4b9d      	ldr	r3, [pc, #628]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c24:	4999      	ldr	r1, [pc, #612]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	658b      	str	r3, [r1, #88]	; 0x58
 8006c2a:	e001      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01a      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c46:	d10a      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3324      	adds	r3, #36	; 0x24
 8006c4c:	2102      	movs	r1, #2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fcfc 	bl	800764c <RCCEx_PLL3_Config>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006c5e:	4b8b      	ldr	r3, [pc, #556]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c6c:	4987      	ldr	r1, [pc, #540]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d01a      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c88:	d10a      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3324      	adds	r3, #36	; 0x24
 8006c8e:	2102      	movs	r1, #2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fcdb 	bl	800764c <RCCEx_PLL3_Config>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ca0:	4b7a      	ldr	r3, [pc, #488]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cae:	4977      	ldr	r1, [pc, #476]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d034      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cca:	d01d      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cd0:	d817      	bhi.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cda:	d009      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006cdc:	e011      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fbff 	bl	80074e8 <RCCEx_PLL2_Config>
 8006cea:	4603      	mov	r3, r0
 8006cec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006cee:	e00c      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3324      	adds	r3, #36	; 0x24
 8006cf4:	2102      	movs	r1, #2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fca8 	bl	800764c <RCCEx_PLL3_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d00:	e003      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	75fb      	strb	r3, [r7, #23]
      break;
 8006d06:	e000      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d0a:	7dfb      	ldrb	r3, [r7, #23]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d10:	4b5e      	ldr	r3, [pc, #376]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d1e:	495b      	ldr	r1, [pc, #364]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	658b      	str	r3, [r1, #88]	; 0x58
 8006d24:	e001      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d033      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d40:	d01c      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006d42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d46:	d816      	bhi.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d4c:	d003      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006d4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d52:	d007      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006d54:	e00f      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d56:	4b4d      	ldr	r3, [pc, #308]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	4a4c      	ldr	r2, [pc, #304]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d62:	e00c      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3324      	adds	r3, #36	; 0x24
 8006d68:	2101      	movs	r1, #1
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fc6e 	bl	800764c <RCCEx_PLL3_Config>
 8006d70:	4603      	mov	r3, r0
 8006d72:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d74:	e003      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	75fb      	strb	r3, [r7, #23]
      break;
 8006d7a:	e000      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10a      	bne.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d84:	4b41      	ldr	r3, [pc, #260]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d92:	493e      	ldr	r1, [pc, #248]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	654b      	str	r3, [r1, #84]	; 0x54
 8006d98:	e001      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d029      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db6:	d007      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006db8:	e00f      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dba:	4b34      	ldr	r3, [pc, #208]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	4a33      	ldr	r2, [pc, #204]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006dc6:	e00b      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	2102      	movs	r1, #2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fb8a 	bl	80074e8 <RCCEx_PLL2_Config>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006dd8:	e002      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d109      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006de6:	4b29      	ldr	r3, [pc, #164]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df2:	4926      	ldr	r1, [pc, #152]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006df8:	e001      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
 8006dfc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	3324      	adds	r3, #36	; 0x24
 8006e0e:	2102      	movs	r1, #2
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fc1b 	bl	800764c <RCCEx_PLL3_Config>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d033      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e34:	d017      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006e36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e3a:	d811      	bhi.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e40:	d013      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e46:	d80b      	bhi.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d010      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e50:	d106      	bne.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e52:	4b0e      	ldr	r3, [pc, #56]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	4a0d      	ldr	r2, [pc, #52]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006e5e:	e007      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
      break;
 8006e64:	e004      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006e66:	bf00      	nop
 8006e68:	e002      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006e6a:	bf00      	nop
 8006e6c:	e000      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10c      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e82:	4902      	ldr	r1, [pc, #8]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	654b      	str	r3, [r1, #84]	; 0x54
 8006e88:	e004      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006e8a:	bf00      	nop
 8006e8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ea0:	4b31      	ldr	r3, [pc, #196]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eac:	492e      	ldr	r1, [pc, #184]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006ebe:	4b2a      	ldr	r3, [pc, #168]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ecc:	4926      	ldr	r1, [pc, #152]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d008      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ede:	4b22      	ldr	r3, [pc, #136]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eea:	491f      	ldr	r1, [pc, #124]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00d      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006efc:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f06:	6113      	str	r3, [r2, #16]
 8006f08:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f0a:	691a      	ldr	r2, [r3, #16]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006f12:	4915      	ldr	r1, [pc, #84]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	da08      	bge.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f20:	4b11      	ldr	r3, [pc, #68]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2c:	490e      	ldr	r1, [pc, #56]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4c:	4906      	ldr	r1, [pc, #24]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006f52:	7dbb      	ldrb	r3, [r7, #22]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e000      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	58024400 	.word	0x58024400

08006f6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f70:	f7ff f85a 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 8006f74:	4602      	mov	r2, r0
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	091b      	lsrs	r3, r3, #4
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	4904      	ldr	r1, [pc, #16]	; (8006f94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f82:	5ccb      	ldrb	r3, [r1, r3]
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	58024400 	.word	0x58024400
 8006f94:	08009a20 	.word	0x08009a20

08006f98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b089      	sub	sp, #36	; 0x24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fa0:	4ba1      	ldr	r3, [pc, #644]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	f003 0303 	and.w	r3, r3, #3
 8006fa8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006faa:	4b9f      	ldr	r3, [pc, #636]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	0b1b      	lsrs	r3, r3, #12
 8006fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fb4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006fb6:	4b9c      	ldr	r3, [pc, #624]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fba:	091b      	lsrs	r3, r3, #4
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006fc2:	4b99      	ldr	r3, [pc, #612]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc6:	08db      	lsrs	r3, r3, #3
 8006fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	fb02 f303 	mul.w	r3, r2, r3
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 8111 	beq.w	8007208 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	f000 8083 	beq.w	80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	f200 80a1 	bhi.w	8007138 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d056      	beq.n	80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007002:	e099      	b.n	8007138 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007004:	4b88      	ldr	r3, [pc, #544]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0320 	and.w	r3, r3, #32
 800700c:	2b00      	cmp	r3, #0
 800700e:	d02d      	beq.n	800706c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007010:	4b85      	ldr	r3, [pc, #532]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	08db      	lsrs	r3, r3, #3
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	4a84      	ldr	r2, [pc, #528]	; (800722c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800701c:	fa22 f303 	lsr.w	r3, r2, r3
 8007020:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	ee07 3a90 	vmov	s15, r3
 8007028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703a:	4b7b      	ldr	r3, [pc, #492]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704a:	ed97 6a03 	vldr	s12, [r7, #12]
 800704e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800705e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007066:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800706a:	e087      	b.n	800717c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	ee07 3a90 	vmov	s15, r3
 8007072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007076:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800707a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707e:	4b6a      	ldr	r3, [pc, #424]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007092:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070ae:	e065      	b.n	800717c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007238 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c2:	4b59      	ldr	r3, [pc, #356]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070f2:	e043      	b.n	800717c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800723c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007106:	4b48      	ldr	r3, [pc, #288]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007116:	ed97 6a03 	vldr	s12, [r7, #12]
 800711a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800711e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800712a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007136:	e021      	b.n	800717c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007142:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007238 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714a:	4b37      	ldr	r3, [pc, #220]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715a:	ed97 6a03 	vldr	s12, [r7, #12]
 800715e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800716e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800717a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800717c:	4b2a      	ldr	r3, [pc, #168]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	0a5b      	lsrs	r3, r3, #9
 8007182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007196:	edd7 6a07 	vldr	s13, [r7, #28]
 800719a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a2:	ee17 2a90 	vmov	r2, s15
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80071aa:	4b1f      	ldr	r3, [pc, #124]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	0c1b      	lsrs	r3, r3, #16
 80071b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b4:	ee07 3a90 	vmov	s15, r3
 80071b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071d0:	ee17 2a90 	vmov	r2, s15
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80071d8:	4b13      	ldr	r3, [pc, #76]	; (8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071dc:	0e1b      	lsrs	r3, r3, #24
 80071de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071fe:	ee17 2a90 	vmov	r2, s15
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007206:	e008      	b.n	800721a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	609a      	str	r2, [r3, #8]
}
 800721a:	bf00      	nop
 800721c:	3724      	adds	r7, #36	; 0x24
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	58024400 	.word	0x58024400
 800722c:	03d09000 	.word	0x03d09000
 8007230:	46000000 	.word	0x46000000
 8007234:	4c742400 	.word	0x4c742400
 8007238:	4a742400 	.word	0x4a742400
 800723c:	4af42400 	.word	0x4af42400

08007240 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007240:	b480      	push	{r7}
 8007242:	b089      	sub	sp, #36	; 0x24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007248:	4ba1      	ldr	r3, [pc, #644]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	f003 0303 	and.w	r3, r3, #3
 8007250:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007252:	4b9f      	ldr	r3, [pc, #636]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007256:	0d1b      	lsrs	r3, r3, #20
 8007258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800725c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800725e:	4b9c      	ldr	r3, [pc, #624]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	0a1b      	lsrs	r3, r3, #8
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800726a:	4b99      	ldr	r3, [pc, #612]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	08db      	lsrs	r3, r3, #3
 8007270:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	fb02 f303 	mul.w	r3, r2, r3
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8111 	beq.w	80074b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	2b02      	cmp	r3, #2
 8007292:	f000 8083 	beq.w	800739c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b02      	cmp	r3, #2
 800729a:	f200 80a1 	bhi.w	80073e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d056      	beq.n	8007358 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80072aa:	e099      	b.n	80073e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ac:	4b88      	ldr	r3, [pc, #544]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d02d      	beq.n	8007314 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072b8:	4b85      	ldr	r3, [pc, #532]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	08db      	lsrs	r3, r3, #3
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	4a84      	ldr	r2, [pc, #528]	; (80074d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80072c4:	fa22 f303 	lsr.w	r3, r2, r3
 80072c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	ee07 3a90 	vmov	s15, r3
 80072d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e2:	4b7b      	ldr	r3, [pc, #492]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007312:	e087      	b.n	8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007326:	4b6a      	ldr	r3, [pc, #424]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007336:	ed97 6a03 	vldr	s12, [r7, #12]
 800733a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800733e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800734a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007352:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007356:	e065      	b.n	8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736a:	4b59      	ldr	r3, [pc, #356]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737a:	ed97 6a03 	vldr	s12, [r7, #12]
 800737e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007396:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800739a:	e043      	b.n	8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80073aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ae:	4b48      	ldr	r3, [pc, #288]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073be:	ed97 6a03 	vldr	s12, [r7, #12]
 80073c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073de:	e021      	b.n	8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f2:	4b37      	ldr	r3, [pc, #220]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007402:	ed97 6a03 	vldr	s12, [r7, #12]
 8007406:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800740a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007422:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007424:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	0a5b      	lsrs	r3, r3, #9
 800742a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800743a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800743e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800744a:	ee17 2a90 	vmov	r2, s15
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007452:	4b1f      	ldr	r3, [pc, #124]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	0c1b      	lsrs	r3, r3, #16
 8007458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800745c:	ee07 3a90 	vmov	s15, r3
 8007460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007464:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007468:	ee37 7a87 	vadd.f32	s14, s15, s14
 800746c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007478:	ee17 2a90 	vmov	r2, s15
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007480:	4b13      	ldr	r3, [pc, #76]	; (80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	0e1b      	lsrs	r3, r3, #24
 8007486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800749a:	edd7 6a07 	vldr	s13, [r7, #28]
 800749e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074a6:	ee17 2a90 	vmov	r2, s15
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80074ae:	e008      	b.n	80074c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	609a      	str	r2, [r3, #8]
}
 80074c2:	bf00      	nop
 80074c4:	3724      	adds	r7, #36	; 0x24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	58024400 	.word	0x58024400
 80074d4:	03d09000 	.word	0x03d09000
 80074d8:	46000000 	.word	0x46000000
 80074dc:	4c742400 	.word	0x4c742400
 80074e0:	4a742400 	.word	0x4a742400
 80074e4:	4af42400 	.word	0x4af42400

080074e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074f6:	4b53      	ldr	r3, [pc, #332]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d101      	bne.n	8007506 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e099      	b.n	800763a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007506:	4b4f      	ldr	r3, [pc, #316]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a4e      	ldr	r2, [pc, #312]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 800750c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007512:	f7fa f99f 	bl	8001854 <HAL_GetTick>
 8007516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007518:	e008      	b.n	800752c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800751a:	f7fa f99b 	bl	8001854 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d901      	bls.n	800752c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e086      	b.n	800763a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800752c:	4b45      	ldr	r3, [pc, #276]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1f0      	bne.n	800751a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007538:	4b42      	ldr	r3, [pc, #264]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	031b      	lsls	r3, r3, #12
 8007546:	493f      	ldr	r1, [pc, #252]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 8007548:	4313      	orrs	r3, r2
 800754a:	628b      	str	r3, [r1, #40]	; 0x28
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	3b01      	subs	r3, #1
 8007552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	3b01      	subs	r3, #1
 800755c:	025b      	lsls	r3, r3, #9
 800755e:	b29b      	uxth	r3, r3
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	3b01      	subs	r3, #1
 8007568:	041b      	lsls	r3, r3, #16
 800756a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	3b01      	subs	r3, #1
 8007576:	061b      	lsls	r3, r3, #24
 8007578:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800757c:	4931      	ldr	r1, [pc, #196]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 800757e:	4313      	orrs	r3, r2
 8007580:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007582:	4b30      	ldr	r3, [pc, #192]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	492d      	ldr	r1, [pc, #180]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 8007590:	4313      	orrs	r3, r2
 8007592:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007594:	4b2b      	ldr	r3, [pc, #172]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007598:	f023 0220 	bic.w	r2, r3, #32
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	4928      	ldr	r1, [pc, #160]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80075a6:	4b27      	ldr	r3, [pc, #156]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075aa:	4a26      	ldr	r2, [pc, #152]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80075ac:	f023 0310 	bic.w	r3, r3, #16
 80075b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80075b2:	4b24      	ldr	r3, [pc, #144]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80075b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075b6:	4b24      	ldr	r3, [pc, #144]	; (8007648 <RCCEx_PLL2_Config+0x160>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	69d2      	ldr	r2, [r2, #28]
 80075be:	00d2      	lsls	r2, r2, #3
 80075c0:	4920      	ldr	r1, [pc, #128]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80075c6:	4b1f      	ldr	r3, [pc, #124]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	4a1e      	ldr	r2, [pc, #120]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80075cc:	f043 0310 	orr.w	r3, r3, #16
 80075d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80075d8:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	4a19      	ldr	r2, [pc, #100]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80075de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075e4:	e00f      	b.n	8007606 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d106      	bne.n	80075fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80075ec:	4b15      	ldr	r3, [pc, #84]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	4a14      	ldr	r2, [pc, #80]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80075f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075f8:	e005      	b.n	8007606 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80075fa:	4b12      	ldr	r3, [pc, #72]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fe:	4a11      	ldr	r2, [pc, #68]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 8007600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007604:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007606:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a0e      	ldr	r2, [pc, #56]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 800760c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007612:	f7fa f91f 	bl	8001854 <HAL_GetTick>
 8007616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007618:	e008      	b.n	800762c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800761a:	f7fa f91b 	bl	8001854 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e006      	b.n	800763a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800762c:	4b05      	ldr	r3, [pc, #20]	; (8007644 <RCCEx_PLL2_Config+0x15c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0f0      	beq.n	800761a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	58024400 	.word	0x58024400
 8007648:	ffff0007 	.word	0xffff0007

0800764c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800765a:	4b53      	ldr	r3, [pc, #332]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	2b03      	cmp	r3, #3
 8007664:	d101      	bne.n	800766a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e099      	b.n	800779e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800766a:	4b4f      	ldr	r3, [pc, #316]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a4e      	ldr	r2, [pc, #312]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007676:	f7fa f8ed 	bl	8001854 <HAL_GetTick>
 800767a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800767c:	e008      	b.n	8007690 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800767e:	f7fa f8e9 	bl	8001854 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d901      	bls.n	8007690 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e086      	b.n	800779e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007690:	4b45      	ldr	r3, [pc, #276]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f0      	bne.n	800767e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800769c:	4b42      	ldr	r3, [pc, #264]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 800769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	051b      	lsls	r3, r3, #20
 80076aa:	493f      	ldr	r1, [pc, #252]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	628b      	str	r3, [r1, #40]	; 0x28
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	3b01      	subs	r3, #1
 80076c0:	025b      	lsls	r3, r3, #9
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	431a      	orrs	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	041b      	lsls	r3, r3, #16
 80076ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	3b01      	subs	r3, #1
 80076da:	061b      	lsls	r3, r3, #24
 80076dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076e0:	4931      	ldr	r1, [pc, #196]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80076e6:	4b30      	ldr	r3, [pc, #192]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	492d      	ldr	r1, [pc, #180]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80076f8:	4b2b      	ldr	r3, [pc, #172]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	4928      	ldr	r1, [pc, #160]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007706:	4313      	orrs	r3, r2
 8007708:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800770a:	4b27      	ldr	r3, [pc, #156]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 800770c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770e:	4a26      	ldr	r2, [pc, #152]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007714:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007716:	4b24      	ldr	r3, [pc, #144]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800771a:	4b24      	ldr	r3, [pc, #144]	; (80077ac <RCCEx_PLL3_Config+0x160>)
 800771c:	4013      	ands	r3, r2
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	69d2      	ldr	r2, [r2, #28]
 8007722:	00d2      	lsls	r2, r2, #3
 8007724:	4920      	ldr	r1, [pc, #128]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007726:	4313      	orrs	r3, r2
 8007728:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800772a:	4b1f      	ldr	r3, [pc, #124]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	4a1e      	ldr	r2, [pc, #120]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d106      	bne.n	800774a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800773c:	4b1a      	ldr	r3, [pc, #104]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	4a19      	ldr	r2, [pc, #100]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007742:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007746:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007748:	e00f      	b.n	800776a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d106      	bne.n	800775e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007750:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	4a14      	ldr	r2, [pc, #80]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007756:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800775a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800775c:	e005      	b.n	800776a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800775e:	4b12      	ldr	r3, [pc, #72]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	4a11      	ldr	r2, [pc, #68]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007768:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800776a:	4b0f      	ldr	r3, [pc, #60]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a0e      	ldr	r2, [pc, #56]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007776:	f7fa f86d 	bl	8001854 <HAL_GetTick>
 800777a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800777c:	e008      	b.n	8007790 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800777e:	f7fa f869 	bl	8001854 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e006      	b.n	800779e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007790:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <RCCEx_PLL3_Config+0x15c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0f0      	beq.n	800777e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800779c:	7bfb      	ldrb	r3, [r7, #15]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	58024400 	.word	0x58024400
 80077ac:	ffff0007 	.word	0xffff0007

080077b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e0f1      	b.n	80079a6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a78      	ldr	r2, [pc, #480]	; (80079b0 <HAL_SPI_Init+0x200>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d00f      	beq.n	80077f2 <HAL_SPI_Init+0x42>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a77      	ldr	r2, [pc, #476]	; (80079b4 <HAL_SPI_Init+0x204>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00a      	beq.n	80077f2 <HAL_SPI_Init+0x42>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a75      	ldr	r2, [pc, #468]	; (80079b8 <HAL_SPI_Init+0x208>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d005      	beq.n	80077f2 <HAL_SPI_Init+0x42>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	2b0f      	cmp	r3, #15
 80077ec:	d901      	bls.n	80077f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e0d9      	b.n	80079a6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fd38 	bl	8008268 <SPI_GetPacketSize>
 80077f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a6c      	ldr	r2, [pc, #432]	; (80079b0 <HAL_SPI_Init+0x200>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d00c      	beq.n	800781e <HAL_SPI_Init+0x6e>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a6a      	ldr	r2, [pc, #424]	; (80079b4 <HAL_SPI_Init+0x204>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d007      	beq.n	800781e <HAL_SPI_Init+0x6e>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a69      	ldr	r2, [pc, #420]	; (80079b8 <HAL_SPI_Init+0x208>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d002      	beq.n	800781e <HAL_SPI_Init+0x6e>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b08      	cmp	r3, #8
 800781c:	d811      	bhi.n	8007842 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007822:	4a63      	ldr	r2, [pc, #396]	; (80079b0 <HAL_SPI_Init+0x200>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d009      	beq.n	800783c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a61      	ldr	r2, [pc, #388]	; (80079b4 <HAL_SPI_Init+0x204>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d004      	beq.n	800783c <HAL_SPI_Init+0x8c>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a60      	ldr	r2, [pc, #384]	; (80079b8 <HAL_SPI_Init+0x208>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d104      	bne.n	8007846 <HAL_SPI_Init+0x96>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b10      	cmp	r3, #16
 8007840:	d901      	bls.n	8007846 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e0af      	b.n	80079a6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7f9 fd40 	bl	80012e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0201 	bic.w	r2, r2, #1
 8007876:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007882:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800788c:	d119      	bne.n	80078c2 <HAL_SPI_Init+0x112>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007896:	d103      	bne.n	80078a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800789c:	2b00      	cmp	r3, #0
 800789e:	d008      	beq.n	80078b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10c      	bne.n	80078c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80078ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078b0:	d107      	bne.n	80078c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69da      	ldr	r2, [r3, #28]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	431a      	orrs	r2, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	431a      	orrs	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d4:	ea42 0103 	orr.w	r1, r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68da      	ldr	r2, [r3, #12]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	431a      	orrs	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	431a      	orrs	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	431a      	orrs	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	431a      	orrs	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007922:	ea42 0103 	orr.w	r1, r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d113      	bne.n	8007962 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800794c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007960:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0201 	bic.w	r2, r2, #1
 8007970:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40013000 	.word	0x40013000
 80079b4:	40003800 	.word	0x40003800
 80079b8:	40003c00 	.word	0x40003c00

080079bc <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_SPI_Transmit_DMA+0x20>
 80079d8:	2302      	movs	r3, #2
 80079da:	e12c      	b.n	8007c36 <HAL_SPI_Transmit_DMA+0x27a>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d007      	beq.n	8007a00 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 80079f0:	2302      	movs	r3, #2
 80079f2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80079fc:	7dfb      	ldrb	r3, [r7, #23]
 80079fe:	e11a      	b.n	8007c36 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <HAL_SPI_Transmit_DMA+0x50>
 8007a06:	88fb      	ldrh	r3, [r7, #6]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d107      	bne.n	8007a1c <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
 8007a1a:	e10c      	b.n	8007c36 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2203      	movs	r2, #3
 8007a20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	88fa      	ldrh	r2, [r7, #6]
 8007a36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	88fa      	ldrh	r2, [r7, #6]
 8007a3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007a6c:	d107      	bne.n	8007a7e <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a7c:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	2b0f      	cmp	r3, #15
 8007a84:	d905      	bls.n	8007a92 <HAL_SPI_Transmit_DMA+0xd6>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a90:	d10f      	bne.n	8007ab2 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007a96:	2b07      	cmp	r3, #7
 8007a98:	d913      	bls.n	8007ac2 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa4:	d00d      	beq.n	8007ac2 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aaa:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab0:	d007      	beq.n	8007ac2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	e0b9      	b.n	8007c36 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	2b07      	cmp	r3, #7
 8007ac8:	d820      	bhi.n	8007b0c <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ad4:	d109      	bne.n	8007aea <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	3301      	adds	r3, #1
 8007ae0:	105b      	asrs	r3, r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007af4:	d11e      	bne.n	8007b34 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3303      	adds	r3, #3
 8007b00:	109b      	asrs	r3, r3, #2
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007b0a:	e013      	b.n	8007b34 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b0f      	cmp	r3, #15
 8007b12:	d80f      	bhi.n	8007b34 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b1e:	d109      	bne.n	8007b34 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	3301      	adds	r3, #1
 8007b2a:	105b      	asrs	r3, r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b38:	4a41      	ldr	r2, [pc, #260]	; (8007c40 <HAL_SPI_Transmit_DMA+0x284>)
 8007b3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b40:	4a40      	ldr	r2, [pc, #256]	; (8007c44 <HAL_SPI_Transmit_DMA+0x288>)
 8007b42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b48:	4a3f      	ldr	r2, [pc, #252]	; (8007c48 <HAL_SPI_Transmit_DMA+0x28c>)
 8007b4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b50:	2200      	movs	r2, #0
 8007b52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b62:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3320      	adds	r3, #32
 8007b74:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b7c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007b7e:	f7fa fb25 	bl	80021cc <HAL_DMA_Start_IT>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d013      	beq.n	8007bb0 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8e:	f043 0210 	orr.w	r2, r3, #16
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	e042      	b.n	8007c36 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bba:	d108      	bne.n	8007bce <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6859      	ldr	r1, [r3, #4]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	4b21      	ldr	r3, [pc, #132]	; (8007c4c <HAL_SPI_Transmit_DMA+0x290>)
 8007bc8:	400b      	ands	r3, r1
 8007bca:	6053      	str	r3, [r2, #4]
 8007bcc:	e009      	b.n	8007be2 <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	4b1d      	ldr	r3, [pc, #116]	; (8007c4c <HAL_SPI_Transmit_DMA+0x290>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	88f9      	ldrh	r1, [r7, #6]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	6812      	ldr	r2, [r2, #0]
 8007bde:	430b      	orrs	r3, r1
 8007be0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bf0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8007c00:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0201 	orr.w	r2, r2, #1
 8007c10:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c1a:	d107      	bne.n	8007c2c <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c2a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	08008093 	.word	0x08008093
 8007c44:	0800804d 	.word	0x0800804d
 8007c48:	080080af 	.word	0x080080af
 8007c4c:	ffff0000 	.word	0xffff0000

08007c50 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b08a      	sub	sp, #40	; 0x28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007c68:	6a3a      	ldr	r2, [r7, #32]
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c82:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3330      	adds	r3, #48	; 0x30
 8007c8a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d113      	bne.n	8007cbe <HAL_SPI_IRQHandler+0x6e>
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	f003 0320 	and.w	r3, r3, #32
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10e      	bne.n	8007cbe <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
    handled = 1UL;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10f      	bne.n	8007ce8 <HAL_SPI_IRQHandler+0x98>
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d105      	bne.n	8007ce8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	4798      	blx	r3
    handled = 1UL;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	f003 0320 	and.w	r3, r3, #32
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10f      	bne.n	8007d12 <HAL_SPI_IRQHandler+0xc2>
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d105      	bne.n	8007d12 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
    handled = 1UL;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 815a 	bne.w	8007fce <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	f003 0308 	and.w	r3, r3, #8
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 808b 	beq.w	8007e3c <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699a      	ldr	r2, [r3, #24]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f042 0208 	orr.w	r2, r2, #8
 8007d34:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	699a      	ldr	r2, [r3, #24]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f042 0210 	orr.w	r2, r2, #16
 8007d44:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	699a      	ldr	r2, [r3, #24]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d54:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691a      	ldr	r2, [r3, #16]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0208 	bic.w	r2, r2, #8
 8007d64:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d13d      	bne.n	8007df0 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007d74:	e036      	b.n	8007de4 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	2b0f      	cmp	r3, #15
 8007d7c:	d90b      	bls.n	8007d96 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007d88:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d8e:	1d1a      	adds	r2, r3, #4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	665a      	str	r2, [r3, #100]	; 0x64
 8007d94:	e01d      	b.n	8007dd2 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	2b07      	cmp	r3, #7
 8007d9c:	d90b      	bls.n	8007db6 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	8812      	ldrh	r2, [r2, #0]
 8007da6:	b292      	uxth	r2, r2
 8007da8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dae:	1c9a      	adds	r2, r3, #2
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	665a      	str	r2, [r3, #100]	; 0x64
 8007db4:	e00d      	b.n	8007dd2 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1c2      	bne.n	8007d76 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f999 	bl	8008128 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f915 	bl	8008038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007e0e:	e0e3      	b.n	8007fd8 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007e10:	7cfb      	ldrb	r3, [r7, #19]
 8007e12:	2b05      	cmp	r3, #5
 8007e14:	d103      	bne.n	8007e1e <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f8fa 	bl	8008010 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007e1c:	e0d9      	b.n	8007fd2 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007e1e:	7cfb      	ldrb	r3, [r7, #19]
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d103      	bne.n	8007e2c <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8e9 	bl	8007ffc <HAL_SPI_RxCpltCallback>
    return;
 8007e2a:	e0d2      	b.n	8007fd2 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007e2c:	7cfb      	ldrb	r3, [r7, #19]
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	f040 80cf 	bne.w	8007fd2 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f8d7 	bl	8007fe8 <HAL_SPI_TxCpltCallback>
    return;
 8007e3a:	e0ca      	b.n	8007fd2 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00d      	beq.n	8007e62 <HAL_SPI_IRQHandler+0x212>
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e5e:	619a      	str	r2, [r3, #24]

    return;
 8007e60:	e0ba      	b.n	8007fd8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 80b5 	beq.w	8007fd8 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00f      	beq.n	8007e98 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e7e:	f043 0204 	orr.w	r2, r3, #4
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e96:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00f      	beq.n	8007ec2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ea8:	f043 0201 	orr.w	r2, r3, #1
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	699a      	ldr	r2, [r3, #24]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ec0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00f      	beq.n	8007eec <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ed2:	f043 0208 	orr.w	r2, r3, #8
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699a      	ldr	r2, [r3, #24]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eea:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	f003 0320 	and.w	r3, r3, #32
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00f      	beq.n	8007f16 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	699a      	ldr	r2, [r3, #24]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0220 	orr.w	r2, r2, #32
 8007f14:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d05a      	beq.n	8007fd6 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0201 	bic.w	r2, r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6919      	ldr	r1, [r3, #16]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	4b29      	ldr	r3, [pc, #164]	; (8007fe0 <HAL_SPI_IRQHandler+0x390>)
 8007f3c:	400b      	ands	r3, r1
 8007f3e:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f4a:	d138      	bne.n	8007fbe <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f5a:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d013      	beq.n	8007f8c <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f68:	4a1e      	ldr	r2, [pc, #120]	; (8007fe4 <HAL_SPI_IRQHandler+0x394>)
 8007f6a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fa fb95 	bl	80026a0 <HAL_DMA_Abort_IT>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d007      	beq.n	8007f8c <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d020      	beq.n	8007fd6 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f98:	4a12      	ldr	r2, [pc, #72]	; (8007fe4 <HAL_SPI_IRQHandler+0x394>)
 8007f9a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fa fb7d 	bl	80026a0 <HAL_DMA_Abort_IT>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d014      	beq.n	8007fd6 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007fbc:	e00b      	b.n	8007fd6 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f836 	bl	8008038 <HAL_SPI_ErrorCallback>
    return;
 8007fcc:	e003      	b.n	8007fd6 <HAL_SPI_IRQHandler+0x386>
    return;
 8007fce:	bf00      	nop
 8007fd0:	e002      	b.n	8007fd8 <HAL_SPI_IRQHandler+0x388>
    return;
 8007fd2:	bf00      	nop
 8007fd4:	e000      	b.n	8007fd8 <HAL_SPI_IRQHandler+0x388>
    return;
 8007fd6:	bf00      	nop
  }
}
 8007fd8:	3728      	adds	r7, #40	; 0x28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	fffffc94 	.word	0xfffffc94
 8007fe4:	080080f5 	.word	0x080080f5

08007fe8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b07      	cmp	r3, #7
 8008064:	d011      	beq.n	800808a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008070:	d103      	bne.n	800807a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f7ff ffb8 	bl	8007fe8 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008078:	e007      	b.n	800808a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	691a      	ldr	r2, [r3, #16]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f042 0208 	orr.w	r2, r2, #8
 8008088:	611a      	str	r2, [r3, #16]
}
 800808a:	bf00      	nop
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff ffbf 	bl	8008024 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b084      	sub	sp, #16
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7fb fc5f 	bl	8003980 <HAL_DMA_GetError>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d011      	beq.n	80080ec <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 f82d 	bl	8008128 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d4:	f043 0210 	orr.w	r2, r3, #16
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7ff ffa6 	bl	8008038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f7ff ff8c 	bl	8008038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008120:	bf00      	nop
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	699a      	ldr	r2, [r3, #24]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0208 	orr.w	r2, r2, #8
 8008146:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699a      	ldr	r2, [r3, #24]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0210 	orr.w	r2, r2, #16
 8008156:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 0201 	bic.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6919      	ldr	r1, [r3, #16]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4b3c      	ldr	r3, [pc, #240]	; (8008264 <SPI_CloseTransfer+0x13c>)
 8008174:	400b      	ands	r3, r1
 8008176:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008186:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b04      	cmp	r3, #4
 8008192:	d014      	beq.n	80081be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00f      	beq.n	80081be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	699a      	ldr	r2, [r3, #24]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f042 0220 	orr.w	r2, r2, #32
 80081bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d014      	beq.n	80081f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00f      	beq.n	80081f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081da:	f043 0204 	orr.w	r2, r3, #4
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00f      	beq.n	800821e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008204:	f043 0201 	orr.w	r2, r3, #1
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	699a      	ldr	r2, [r3, #24]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800821c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00f      	beq.n	8008248 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800822e:	f043 0208 	orr.w	r2, r3, #8
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	699a      	ldr	r2, [r3, #24]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008246:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008258:	bf00      	nop
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	fffffc90 	.word	0xfffffc90

08008268 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008274:	095b      	lsrs	r3, r3, #5
 8008276:	3301      	adds	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	3301      	adds	r3, #1
 8008280:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	3307      	adds	r3, #7
 8008286:	08db      	lsrs	r3, r3, #3
 8008288:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e042      	b.n	8008336 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d106      	bne.n	80082c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7f9 f8e2 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2224      	movs	r2, #36	; 0x24
 80082cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 0201 	bic.w	r2, r2, #1
 80082de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f82d 	bl	8008340 <UART_SetConfig>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d101      	bne.n	80082f0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e022      	b.n	8008336 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fd89 	bl	8008e10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800830c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800831c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f042 0201 	orr.w	r2, r2, #1
 800832c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fe10 	bl	8008f54 <UART_CheckIdleState>
 8008334:	4603      	mov	r3, r0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008344:	b092      	sub	sp, #72	; 0x48
 8008346:	af00      	add	r7, sp, #0
 8008348:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	431a      	orrs	r2, r3
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	431a      	orrs	r2, r3
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	4313      	orrs	r3, r2
 8008366:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	4bbe      	ldr	r3, [pc, #760]	; (8008668 <UART_SetConfig+0x328>)
 8008370:	4013      	ands	r3, r2
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	6812      	ldr	r2, [r2, #0]
 8008376:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008378:	430b      	orrs	r3, r1
 800837a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4ab3      	ldr	r2, [pc, #716]	; (800866c <UART_SetConfig+0x32c>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d004      	beq.n	80083ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083a8:	4313      	orrs	r3, r2
 80083aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	4baf      	ldr	r3, [pc, #700]	; (8008670 <UART_SetConfig+0x330>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	6812      	ldr	r2, [r2, #0]
 80083ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083bc:	430b      	orrs	r3, r1
 80083be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	f023 010f 	bic.w	r1, r3, #15
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4aa6      	ldr	r2, [pc, #664]	; (8008674 <UART_SetConfig+0x334>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d177      	bne.n	80084d0 <UART_SetConfig+0x190>
 80083e0:	4ba5      	ldr	r3, [pc, #660]	; (8008678 <UART_SetConfig+0x338>)
 80083e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083e8:	2b28      	cmp	r3, #40	; 0x28
 80083ea:	d86d      	bhi.n	80084c8 <UART_SetConfig+0x188>
 80083ec:	a201      	add	r2, pc, #4	; (adr r2, 80083f4 <UART_SetConfig+0xb4>)
 80083ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f2:	bf00      	nop
 80083f4:	08008499 	.word	0x08008499
 80083f8:	080084c9 	.word	0x080084c9
 80083fc:	080084c9 	.word	0x080084c9
 8008400:	080084c9 	.word	0x080084c9
 8008404:	080084c9 	.word	0x080084c9
 8008408:	080084c9 	.word	0x080084c9
 800840c:	080084c9 	.word	0x080084c9
 8008410:	080084c9 	.word	0x080084c9
 8008414:	080084a1 	.word	0x080084a1
 8008418:	080084c9 	.word	0x080084c9
 800841c:	080084c9 	.word	0x080084c9
 8008420:	080084c9 	.word	0x080084c9
 8008424:	080084c9 	.word	0x080084c9
 8008428:	080084c9 	.word	0x080084c9
 800842c:	080084c9 	.word	0x080084c9
 8008430:	080084c9 	.word	0x080084c9
 8008434:	080084a9 	.word	0x080084a9
 8008438:	080084c9 	.word	0x080084c9
 800843c:	080084c9 	.word	0x080084c9
 8008440:	080084c9 	.word	0x080084c9
 8008444:	080084c9 	.word	0x080084c9
 8008448:	080084c9 	.word	0x080084c9
 800844c:	080084c9 	.word	0x080084c9
 8008450:	080084c9 	.word	0x080084c9
 8008454:	080084b1 	.word	0x080084b1
 8008458:	080084c9 	.word	0x080084c9
 800845c:	080084c9 	.word	0x080084c9
 8008460:	080084c9 	.word	0x080084c9
 8008464:	080084c9 	.word	0x080084c9
 8008468:	080084c9 	.word	0x080084c9
 800846c:	080084c9 	.word	0x080084c9
 8008470:	080084c9 	.word	0x080084c9
 8008474:	080084b9 	.word	0x080084b9
 8008478:	080084c9 	.word	0x080084c9
 800847c:	080084c9 	.word	0x080084c9
 8008480:	080084c9 	.word	0x080084c9
 8008484:	080084c9 	.word	0x080084c9
 8008488:	080084c9 	.word	0x080084c9
 800848c:	080084c9 	.word	0x080084c9
 8008490:	080084c9 	.word	0x080084c9
 8008494:	080084c1 	.word	0x080084c1
 8008498:	2301      	movs	r3, #1
 800849a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849e:	e222      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80084a0:	2304      	movs	r3, #4
 80084a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a6:	e21e      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80084a8:	2308      	movs	r3, #8
 80084aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ae:	e21a      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80084b0:	2310      	movs	r3, #16
 80084b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b6:	e216      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80084b8:	2320      	movs	r3, #32
 80084ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084be:	e212      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80084c0:	2340      	movs	r3, #64	; 0x40
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c6:	e20e      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80084c8:	2380      	movs	r3, #128	; 0x80
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ce:	e20a      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a69      	ldr	r2, [pc, #420]	; (800867c <UART_SetConfig+0x33c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d130      	bne.n	800853c <UART_SetConfig+0x1fc>
 80084da:	4b67      	ldr	r3, [pc, #412]	; (8008678 <UART_SetConfig+0x338>)
 80084dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	d826      	bhi.n	8008534 <UART_SetConfig+0x1f4>
 80084e6:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <UART_SetConfig+0x1ac>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	08008505 	.word	0x08008505
 80084f0:	0800850d 	.word	0x0800850d
 80084f4:	08008515 	.word	0x08008515
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	08008525 	.word	0x08008525
 8008500:	0800852d 	.word	0x0800852d
 8008504:	2300      	movs	r3, #0
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850a:	e1ec      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800850c:	2304      	movs	r3, #4
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008512:	e1e8      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008514:	2308      	movs	r3, #8
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851a:	e1e4      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800851c:	2310      	movs	r3, #16
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008522:	e1e0      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008524:	2320      	movs	r3, #32
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852a:	e1dc      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800852c:	2340      	movs	r3, #64	; 0x40
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008532:	e1d8      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008534:	2380      	movs	r3, #128	; 0x80
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853a:	e1d4      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a4f      	ldr	r2, [pc, #316]	; (8008680 <UART_SetConfig+0x340>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d130      	bne.n	80085a8 <UART_SetConfig+0x268>
 8008546:	4b4c      	ldr	r3, [pc, #304]	; (8008678 <UART_SetConfig+0x338>)
 8008548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854a:	f003 0307 	and.w	r3, r3, #7
 800854e:	2b05      	cmp	r3, #5
 8008550:	d826      	bhi.n	80085a0 <UART_SetConfig+0x260>
 8008552:	a201      	add	r2, pc, #4	; (adr r2, 8008558 <UART_SetConfig+0x218>)
 8008554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008558:	08008571 	.word	0x08008571
 800855c:	08008579 	.word	0x08008579
 8008560:	08008581 	.word	0x08008581
 8008564:	08008589 	.word	0x08008589
 8008568:	08008591 	.word	0x08008591
 800856c:	08008599 	.word	0x08008599
 8008570:	2300      	movs	r3, #0
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008576:	e1b6      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008578:	2304      	movs	r3, #4
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857e:	e1b2      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008580:	2308      	movs	r3, #8
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008586:	e1ae      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008588:	2310      	movs	r3, #16
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858e:	e1aa      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008590:	2320      	movs	r3, #32
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008596:	e1a6      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008598:	2340      	movs	r3, #64	; 0x40
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859e:	e1a2      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80085a0:	2380      	movs	r3, #128	; 0x80
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a6:	e19e      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a35      	ldr	r2, [pc, #212]	; (8008684 <UART_SetConfig+0x344>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d130      	bne.n	8008614 <UART_SetConfig+0x2d4>
 80085b2:	4b31      	ldr	r3, [pc, #196]	; (8008678 <UART_SetConfig+0x338>)
 80085b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b05      	cmp	r3, #5
 80085bc:	d826      	bhi.n	800860c <UART_SetConfig+0x2cc>
 80085be:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <UART_SetConfig+0x284>)
 80085c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c4:	080085dd 	.word	0x080085dd
 80085c8:	080085e5 	.word	0x080085e5
 80085cc:	080085ed 	.word	0x080085ed
 80085d0:	080085f5 	.word	0x080085f5
 80085d4:	080085fd 	.word	0x080085fd
 80085d8:	08008605 	.word	0x08008605
 80085dc:	2300      	movs	r3, #0
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e2:	e180      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80085e4:	2304      	movs	r3, #4
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ea:	e17c      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80085ec:	2308      	movs	r3, #8
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085f2:	e178      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80085f4:	2310      	movs	r3, #16
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085fa:	e174      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80085fc:	2320      	movs	r3, #32
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008602:	e170      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008604:	2340      	movs	r3, #64	; 0x40
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860a:	e16c      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800860c:	2380      	movs	r3, #128	; 0x80
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008612:	e168      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a1b      	ldr	r2, [pc, #108]	; (8008688 <UART_SetConfig+0x348>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d142      	bne.n	80086a4 <UART_SetConfig+0x364>
 800861e:	4b16      	ldr	r3, [pc, #88]	; (8008678 <UART_SetConfig+0x338>)
 8008620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	2b05      	cmp	r3, #5
 8008628:	d838      	bhi.n	800869c <UART_SetConfig+0x35c>
 800862a:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <UART_SetConfig+0x2f0>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	08008649 	.word	0x08008649
 8008634:	08008651 	.word	0x08008651
 8008638:	08008659 	.word	0x08008659
 800863c:	08008661 	.word	0x08008661
 8008640:	0800868d 	.word	0x0800868d
 8008644:	08008695 	.word	0x08008695
 8008648:	2300      	movs	r3, #0
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864e:	e14a      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008650:	2304      	movs	r3, #4
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008656:	e146      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008658:	2308      	movs	r3, #8
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865e:	e142      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008660:	2310      	movs	r3, #16
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008666:	e13e      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008668:	cfff69f3 	.word	0xcfff69f3
 800866c:	58000c00 	.word	0x58000c00
 8008670:	11fff4ff 	.word	0x11fff4ff
 8008674:	40011000 	.word	0x40011000
 8008678:	58024400 	.word	0x58024400
 800867c:	40004400 	.word	0x40004400
 8008680:	40004800 	.word	0x40004800
 8008684:	40004c00 	.word	0x40004c00
 8008688:	40005000 	.word	0x40005000
 800868c:	2320      	movs	r3, #32
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008692:	e128      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008694:	2340      	movs	r3, #64	; 0x40
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869a:	e124      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800869c:	2380      	movs	r3, #128	; 0x80
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a2:	e120      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4acb      	ldr	r2, [pc, #812]	; (80089d8 <UART_SetConfig+0x698>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d176      	bne.n	800879c <UART_SetConfig+0x45c>
 80086ae:	4bcb      	ldr	r3, [pc, #812]	; (80089dc <UART_SetConfig+0x69c>)
 80086b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086b6:	2b28      	cmp	r3, #40	; 0x28
 80086b8:	d86c      	bhi.n	8008794 <UART_SetConfig+0x454>
 80086ba:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <UART_SetConfig+0x380>)
 80086bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c0:	08008765 	.word	0x08008765
 80086c4:	08008795 	.word	0x08008795
 80086c8:	08008795 	.word	0x08008795
 80086cc:	08008795 	.word	0x08008795
 80086d0:	08008795 	.word	0x08008795
 80086d4:	08008795 	.word	0x08008795
 80086d8:	08008795 	.word	0x08008795
 80086dc:	08008795 	.word	0x08008795
 80086e0:	0800876d 	.word	0x0800876d
 80086e4:	08008795 	.word	0x08008795
 80086e8:	08008795 	.word	0x08008795
 80086ec:	08008795 	.word	0x08008795
 80086f0:	08008795 	.word	0x08008795
 80086f4:	08008795 	.word	0x08008795
 80086f8:	08008795 	.word	0x08008795
 80086fc:	08008795 	.word	0x08008795
 8008700:	08008775 	.word	0x08008775
 8008704:	08008795 	.word	0x08008795
 8008708:	08008795 	.word	0x08008795
 800870c:	08008795 	.word	0x08008795
 8008710:	08008795 	.word	0x08008795
 8008714:	08008795 	.word	0x08008795
 8008718:	08008795 	.word	0x08008795
 800871c:	08008795 	.word	0x08008795
 8008720:	0800877d 	.word	0x0800877d
 8008724:	08008795 	.word	0x08008795
 8008728:	08008795 	.word	0x08008795
 800872c:	08008795 	.word	0x08008795
 8008730:	08008795 	.word	0x08008795
 8008734:	08008795 	.word	0x08008795
 8008738:	08008795 	.word	0x08008795
 800873c:	08008795 	.word	0x08008795
 8008740:	08008785 	.word	0x08008785
 8008744:	08008795 	.word	0x08008795
 8008748:	08008795 	.word	0x08008795
 800874c:	08008795 	.word	0x08008795
 8008750:	08008795 	.word	0x08008795
 8008754:	08008795 	.word	0x08008795
 8008758:	08008795 	.word	0x08008795
 800875c:	08008795 	.word	0x08008795
 8008760:	0800878d 	.word	0x0800878d
 8008764:	2301      	movs	r3, #1
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876a:	e0bc      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800876c:	2304      	movs	r3, #4
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008772:	e0b8      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008774:	2308      	movs	r3, #8
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877a:	e0b4      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800877c:	2310      	movs	r3, #16
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008782:	e0b0      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008784:	2320      	movs	r3, #32
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878a:	e0ac      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800878c:	2340      	movs	r3, #64	; 0x40
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008792:	e0a8      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008794:	2380      	movs	r3, #128	; 0x80
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879a:	e0a4      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a8f      	ldr	r2, [pc, #572]	; (80089e0 <UART_SetConfig+0x6a0>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d130      	bne.n	8008808 <UART_SetConfig+0x4c8>
 80087a6:	4b8d      	ldr	r3, [pc, #564]	; (80089dc <UART_SetConfig+0x69c>)
 80087a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	2b05      	cmp	r3, #5
 80087b0:	d826      	bhi.n	8008800 <UART_SetConfig+0x4c0>
 80087b2:	a201      	add	r2, pc, #4	; (adr r2, 80087b8 <UART_SetConfig+0x478>)
 80087b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b8:	080087d1 	.word	0x080087d1
 80087bc:	080087d9 	.word	0x080087d9
 80087c0:	080087e1 	.word	0x080087e1
 80087c4:	080087e9 	.word	0x080087e9
 80087c8:	080087f1 	.word	0x080087f1
 80087cc:	080087f9 	.word	0x080087f9
 80087d0:	2300      	movs	r3, #0
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d6:	e086      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80087d8:	2304      	movs	r3, #4
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087de:	e082      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80087e0:	2308      	movs	r3, #8
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e6:	e07e      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80087e8:	2310      	movs	r3, #16
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ee:	e07a      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80087f0:	2320      	movs	r3, #32
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f6:	e076      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80087f8:	2340      	movs	r3, #64	; 0x40
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fe:	e072      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008800:	2380      	movs	r3, #128	; 0x80
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008806:	e06e      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a75      	ldr	r2, [pc, #468]	; (80089e4 <UART_SetConfig+0x6a4>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d130      	bne.n	8008874 <UART_SetConfig+0x534>
 8008812:	4b72      	ldr	r3, [pc, #456]	; (80089dc <UART_SetConfig+0x69c>)
 8008814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	2b05      	cmp	r3, #5
 800881c:	d826      	bhi.n	800886c <UART_SetConfig+0x52c>
 800881e:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <UART_SetConfig+0x4e4>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	0800883d 	.word	0x0800883d
 8008828:	08008845 	.word	0x08008845
 800882c:	0800884d 	.word	0x0800884d
 8008830:	08008855 	.word	0x08008855
 8008834:	0800885d 	.word	0x0800885d
 8008838:	08008865 	.word	0x08008865
 800883c:	2300      	movs	r3, #0
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008842:	e050      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008844:	2304      	movs	r3, #4
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884a:	e04c      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800884c:	2308      	movs	r3, #8
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008852:	e048      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008854:	2310      	movs	r3, #16
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885a:	e044      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800885c:	2320      	movs	r3, #32
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008862:	e040      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886a:	e03c      	b.n	80088e6 <UART_SetConfig+0x5a6>
 800886c:	2380      	movs	r3, #128	; 0x80
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008872:	e038      	b.n	80088e6 <UART_SetConfig+0x5a6>
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a5b      	ldr	r2, [pc, #364]	; (80089e8 <UART_SetConfig+0x6a8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d130      	bne.n	80088e0 <UART_SetConfig+0x5a0>
 800887e:	4b57      	ldr	r3, [pc, #348]	; (80089dc <UART_SetConfig+0x69c>)
 8008880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	2b05      	cmp	r3, #5
 8008888:	d826      	bhi.n	80088d8 <UART_SetConfig+0x598>
 800888a:	a201      	add	r2, pc, #4	; (adr r2, 8008890 <UART_SetConfig+0x550>)
 800888c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008890:	080088a9 	.word	0x080088a9
 8008894:	080088b1 	.word	0x080088b1
 8008898:	080088b9 	.word	0x080088b9
 800889c:	080088c1 	.word	0x080088c1
 80088a0:	080088c9 	.word	0x080088c9
 80088a4:	080088d1 	.word	0x080088d1
 80088a8:	2302      	movs	r3, #2
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ae:	e01a      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80088b0:	2304      	movs	r3, #4
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b6:	e016      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80088b8:	2308      	movs	r3, #8
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088be:	e012      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80088c0:	2310      	movs	r3, #16
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c6:	e00e      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80088c8:	2320      	movs	r3, #32
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ce:	e00a      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80088d0:	2340      	movs	r3, #64	; 0x40
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d6:	e006      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80088d8:	2380      	movs	r3, #128	; 0x80
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088de:	e002      	b.n	80088e6 <UART_SetConfig+0x5a6>
 80088e0:	2380      	movs	r3, #128	; 0x80
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a3f      	ldr	r2, [pc, #252]	; (80089e8 <UART_SetConfig+0x6a8>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	f040 80f8 	bne.w	8008ae2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	dc46      	bgt.n	8008988 <UART_SetConfig+0x648>
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	f2c0 8082 	blt.w	8008a04 <UART_SetConfig+0x6c4>
 8008900:	3b02      	subs	r3, #2
 8008902:	2b1e      	cmp	r3, #30
 8008904:	d87e      	bhi.n	8008a04 <UART_SetConfig+0x6c4>
 8008906:	a201      	add	r2, pc, #4	; (adr r2, 800890c <UART_SetConfig+0x5cc>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	0800898f 	.word	0x0800898f
 8008910:	08008a05 	.word	0x08008a05
 8008914:	08008997 	.word	0x08008997
 8008918:	08008a05 	.word	0x08008a05
 800891c:	08008a05 	.word	0x08008a05
 8008920:	08008a05 	.word	0x08008a05
 8008924:	080089a7 	.word	0x080089a7
 8008928:	08008a05 	.word	0x08008a05
 800892c:	08008a05 	.word	0x08008a05
 8008930:	08008a05 	.word	0x08008a05
 8008934:	08008a05 	.word	0x08008a05
 8008938:	08008a05 	.word	0x08008a05
 800893c:	08008a05 	.word	0x08008a05
 8008940:	08008a05 	.word	0x08008a05
 8008944:	080089b7 	.word	0x080089b7
 8008948:	08008a05 	.word	0x08008a05
 800894c:	08008a05 	.word	0x08008a05
 8008950:	08008a05 	.word	0x08008a05
 8008954:	08008a05 	.word	0x08008a05
 8008958:	08008a05 	.word	0x08008a05
 800895c:	08008a05 	.word	0x08008a05
 8008960:	08008a05 	.word	0x08008a05
 8008964:	08008a05 	.word	0x08008a05
 8008968:	08008a05 	.word	0x08008a05
 800896c:	08008a05 	.word	0x08008a05
 8008970:	08008a05 	.word	0x08008a05
 8008974:	08008a05 	.word	0x08008a05
 8008978:	08008a05 	.word	0x08008a05
 800897c:	08008a05 	.word	0x08008a05
 8008980:	08008a05 	.word	0x08008a05
 8008984:	080089f7 	.word	0x080089f7
 8008988:	2b40      	cmp	r3, #64	; 0x40
 800898a:	d037      	beq.n	80089fc <UART_SetConfig+0x6bc>
 800898c:	e03a      	b.n	8008a04 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800898e:	f7fe faed 	bl	8006f6c <HAL_RCCEx_GetD3PCLK1Freq>
 8008992:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008994:	e03c      	b.n	8008a10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe fafc 	bl	8006f98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089a4:	e034      	b.n	8008a10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089a6:	f107 0318 	add.w	r3, r7, #24
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe fc48 	bl	8007240 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089b4:	e02c      	b.n	8008a10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089b6:	4b09      	ldr	r3, [pc, #36]	; (80089dc <UART_SetConfig+0x69c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d016      	beq.n	80089f0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089c2:	4b06      	ldr	r3, [pc, #24]	; (80089dc <UART_SetConfig+0x69c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	08db      	lsrs	r3, r3, #3
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	4a07      	ldr	r2, [pc, #28]	; (80089ec <UART_SetConfig+0x6ac>)
 80089ce:	fa22 f303 	lsr.w	r3, r2, r3
 80089d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089d4:	e01c      	b.n	8008a10 <UART_SetConfig+0x6d0>
 80089d6:	bf00      	nop
 80089d8:	40011400 	.word	0x40011400
 80089dc:	58024400 	.word	0x58024400
 80089e0:	40007800 	.word	0x40007800
 80089e4:	40007c00 	.word	0x40007c00
 80089e8:	58000c00 	.word	0x58000c00
 80089ec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80089f0:	4b9d      	ldr	r3, [pc, #628]	; (8008c68 <UART_SetConfig+0x928>)
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089f4:	e00c      	b.n	8008a10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089f6:	4b9d      	ldr	r3, [pc, #628]	; (8008c6c <UART_SetConfig+0x92c>)
 80089f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089fa:	e009      	b.n	8008a10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a02:	e005      	b.n	8008a10 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 81de 	beq.w	8008dd4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1c:	4a94      	ldr	r2, [pc, #592]	; (8008c70 <UART_SetConfig+0x930>)
 8008a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a22:	461a      	mov	r2, r3
 8008a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a2a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	4613      	mov	r3, r2
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	4413      	add	r3, r2
 8008a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d305      	bcc.n	8008a48 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d903      	bls.n	8008a50 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a4e:	e1c1      	b.n	8008dd4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a52:	2200      	movs	r2, #0
 8008a54:	60bb      	str	r3, [r7, #8]
 8008a56:	60fa      	str	r2, [r7, #12]
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	4a84      	ldr	r2, [pc, #528]	; (8008c70 <UART_SetConfig+0x930>)
 8008a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	2200      	movs	r2, #0
 8008a66:	603b      	str	r3, [r7, #0]
 8008a68:	607a      	str	r2, [r7, #4]
 8008a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a72:	f7f7 fc31 	bl	80002d8 <__aeabi_uldivmod>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	f04f 0200 	mov.w	r2, #0
 8008a82:	f04f 0300 	mov.w	r3, #0
 8008a86:	020b      	lsls	r3, r1, #8
 8008a88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a8c:	0202      	lsls	r2, r0, #8
 8008a8e:	6979      	ldr	r1, [r7, #20]
 8008a90:	6849      	ldr	r1, [r1, #4]
 8008a92:	0849      	lsrs	r1, r1, #1
 8008a94:	2000      	movs	r0, #0
 8008a96:	460c      	mov	r4, r1
 8008a98:	4605      	mov	r5, r0
 8008a9a:	eb12 0804 	adds.w	r8, r2, r4
 8008a9e:	eb43 0905 	adc.w	r9, r3, r5
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	469a      	mov	sl, r3
 8008aaa:	4693      	mov	fp, r2
 8008aac:	4652      	mov	r2, sl
 8008aae:	465b      	mov	r3, fp
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	f7f7 fc10 	bl	80002d8 <__aeabi_uldivmod>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	4613      	mov	r3, r2
 8008abe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ac6:	d308      	bcc.n	8008ada <UART_SetConfig+0x79a>
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ace:	d204      	bcs.n	8008ada <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ad6:	60da      	str	r2, [r3, #12]
 8008ad8:	e17c      	b.n	8008dd4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ae0:	e178      	b.n	8008dd4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aea:	f040 80c5 	bne.w	8008c78 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008aee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008af2:	2b20      	cmp	r3, #32
 8008af4:	dc48      	bgt.n	8008b88 <UART_SetConfig+0x848>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	db7b      	blt.n	8008bf2 <UART_SetConfig+0x8b2>
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d879      	bhi.n	8008bf2 <UART_SetConfig+0x8b2>
 8008afe:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <UART_SetConfig+0x7c4>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008b8f 	.word	0x08008b8f
 8008b08:	08008b97 	.word	0x08008b97
 8008b0c:	08008bf3 	.word	0x08008bf3
 8008b10:	08008bf3 	.word	0x08008bf3
 8008b14:	08008b9f 	.word	0x08008b9f
 8008b18:	08008bf3 	.word	0x08008bf3
 8008b1c:	08008bf3 	.word	0x08008bf3
 8008b20:	08008bf3 	.word	0x08008bf3
 8008b24:	08008baf 	.word	0x08008baf
 8008b28:	08008bf3 	.word	0x08008bf3
 8008b2c:	08008bf3 	.word	0x08008bf3
 8008b30:	08008bf3 	.word	0x08008bf3
 8008b34:	08008bf3 	.word	0x08008bf3
 8008b38:	08008bf3 	.word	0x08008bf3
 8008b3c:	08008bf3 	.word	0x08008bf3
 8008b40:	08008bf3 	.word	0x08008bf3
 8008b44:	08008bbf 	.word	0x08008bbf
 8008b48:	08008bf3 	.word	0x08008bf3
 8008b4c:	08008bf3 	.word	0x08008bf3
 8008b50:	08008bf3 	.word	0x08008bf3
 8008b54:	08008bf3 	.word	0x08008bf3
 8008b58:	08008bf3 	.word	0x08008bf3
 8008b5c:	08008bf3 	.word	0x08008bf3
 8008b60:	08008bf3 	.word	0x08008bf3
 8008b64:	08008bf3 	.word	0x08008bf3
 8008b68:	08008bf3 	.word	0x08008bf3
 8008b6c:	08008bf3 	.word	0x08008bf3
 8008b70:	08008bf3 	.word	0x08008bf3
 8008b74:	08008bf3 	.word	0x08008bf3
 8008b78:	08008bf3 	.word	0x08008bf3
 8008b7c:	08008bf3 	.word	0x08008bf3
 8008b80:	08008bf3 	.word	0x08008bf3
 8008b84:	08008be5 	.word	0x08008be5
 8008b88:	2b40      	cmp	r3, #64	; 0x40
 8008b8a:	d02e      	beq.n	8008bea <UART_SetConfig+0x8aa>
 8008b8c:	e031      	b.n	8008bf2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b8e:	f7fd fa7b 	bl	8006088 <HAL_RCC_GetPCLK1Freq>
 8008b92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b94:	e033      	b.n	8008bfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b96:	f7fd fa8d 	bl	80060b4 <HAL_RCC_GetPCLK2Freq>
 8008b9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b9c:	e02f      	b.n	8008bfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fe f9f8 	bl	8006f98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bac:	e027      	b.n	8008bfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bae:	f107 0318 	add.w	r3, r7, #24
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe fb44 	bl	8007240 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bbc:	e01f      	b.n	8008bfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bbe:	4b2d      	ldr	r3, [pc, #180]	; (8008c74 <UART_SetConfig+0x934>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0320 	and.w	r3, r3, #32
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bca:	4b2a      	ldr	r3, [pc, #168]	; (8008c74 <UART_SetConfig+0x934>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	08db      	lsrs	r3, r3, #3
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	4a24      	ldr	r2, [pc, #144]	; (8008c68 <UART_SetConfig+0x928>)
 8008bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bdc:	e00f      	b.n	8008bfe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008bde:	4b22      	ldr	r3, [pc, #136]	; (8008c68 <UART_SetConfig+0x928>)
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008be2:	e00c      	b.n	8008bfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008be4:	4b21      	ldr	r3, [pc, #132]	; (8008c6c <UART_SetConfig+0x92c>)
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008be8:	e009      	b.n	8008bfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bf0:	e005      	b.n	8008bfe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008bfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 80e7 	beq.w	8008dd4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	4a19      	ldr	r2, [pc, #100]	; (8008c70 <UART_SetConfig+0x930>)
 8008c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c10:	461a      	mov	r2, r3
 8008c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c18:	005a      	lsls	r2, r3, #1
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	085b      	lsrs	r3, r3, #1
 8008c20:	441a      	add	r2, r3
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	2b0f      	cmp	r3, #15
 8008c30:	d916      	bls.n	8008c60 <UART_SetConfig+0x920>
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c38:	d212      	bcs.n	8008c60 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	f023 030f 	bic.w	r3, r3, #15
 8008c42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	085b      	lsrs	r3, r3, #1
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	f003 0307 	and.w	r3, r3, #7
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008c52:	4313      	orrs	r3, r2
 8008c54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008c5c:	60da      	str	r2, [r3, #12]
 8008c5e:	e0b9      	b.n	8008dd4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008c66:	e0b5      	b.n	8008dd4 <UART_SetConfig+0xa94>
 8008c68:	03d09000 	.word	0x03d09000
 8008c6c:	003d0900 	.word	0x003d0900
 8008c70:	08009d38 	.word	0x08009d38
 8008c74:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c7c:	2b20      	cmp	r3, #32
 8008c7e:	dc49      	bgt.n	8008d14 <UART_SetConfig+0x9d4>
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	db7c      	blt.n	8008d7e <UART_SetConfig+0xa3e>
 8008c84:	2b20      	cmp	r3, #32
 8008c86:	d87a      	bhi.n	8008d7e <UART_SetConfig+0xa3e>
 8008c88:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <UART_SetConfig+0x950>)
 8008c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8e:	bf00      	nop
 8008c90:	08008d1b 	.word	0x08008d1b
 8008c94:	08008d23 	.word	0x08008d23
 8008c98:	08008d7f 	.word	0x08008d7f
 8008c9c:	08008d7f 	.word	0x08008d7f
 8008ca0:	08008d2b 	.word	0x08008d2b
 8008ca4:	08008d7f 	.word	0x08008d7f
 8008ca8:	08008d7f 	.word	0x08008d7f
 8008cac:	08008d7f 	.word	0x08008d7f
 8008cb0:	08008d3b 	.word	0x08008d3b
 8008cb4:	08008d7f 	.word	0x08008d7f
 8008cb8:	08008d7f 	.word	0x08008d7f
 8008cbc:	08008d7f 	.word	0x08008d7f
 8008cc0:	08008d7f 	.word	0x08008d7f
 8008cc4:	08008d7f 	.word	0x08008d7f
 8008cc8:	08008d7f 	.word	0x08008d7f
 8008ccc:	08008d7f 	.word	0x08008d7f
 8008cd0:	08008d4b 	.word	0x08008d4b
 8008cd4:	08008d7f 	.word	0x08008d7f
 8008cd8:	08008d7f 	.word	0x08008d7f
 8008cdc:	08008d7f 	.word	0x08008d7f
 8008ce0:	08008d7f 	.word	0x08008d7f
 8008ce4:	08008d7f 	.word	0x08008d7f
 8008ce8:	08008d7f 	.word	0x08008d7f
 8008cec:	08008d7f 	.word	0x08008d7f
 8008cf0:	08008d7f 	.word	0x08008d7f
 8008cf4:	08008d7f 	.word	0x08008d7f
 8008cf8:	08008d7f 	.word	0x08008d7f
 8008cfc:	08008d7f 	.word	0x08008d7f
 8008d00:	08008d7f 	.word	0x08008d7f
 8008d04:	08008d7f 	.word	0x08008d7f
 8008d08:	08008d7f 	.word	0x08008d7f
 8008d0c:	08008d7f 	.word	0x08008d7f
 8008d10:	08008d71 	.word	0x08008d71
 8008d14:	2b40      	cmp	r3, #64	; 0x40
 8008d16:	d02e      	beq.n	8008d76 <UART_SetConfig+0xa36>
 8008d18:	e031      	b.n	8008d7e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d1a:	f7fd f9b5 	bl	8006088 <HAL_RCC_GetPCLK1Freq>
 8008d1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d20:	e033      	b.n	8008d8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d22:	f7fd f9c7 	bl	80060b4 <HAL_RCC_GetPCLK2Freq>
 8008d26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d28:	e02f      	b.n	8008d8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fe f932 	bl	8006f98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d38:	e027      	b.n	8008d8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d3a:	f107 0318 	add.w	r3, r7, #24
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe fa7e 	bl	8007240 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d48:	e01f      	b.n	8008d8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d4a:	4b2d      	ldr	r3, [pc, #180]	; (8008e00 <UART_SetConfig+0xac0>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0320 	and.w	r3, r3, #32
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d56:	4b2a      	ldr	r3, [pc, #168]	; (8008e00 <UART_SetConfig+0xac0>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	08db      	lsrs	r3, r3, #3
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	4a28      	ldr	r2, [pc, #160]	; (8008e04 <UART_SetConfig+0xac4>)
 8008d62:	fa22 f303 	lsr.w	r3, r2, r3
 8008d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d68:	e00f      	b.n	8008d8a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008d6a:	4b26      	ldr	r3, [pc, #152]	; (8008e04 <UART_SetConfig+0xac4>)
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d6e:	e00c      	b.n	8008d8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d70:	4b25      	ldr	r3, [pc, #148]	; (8008e08 <UART_SetConfig+0xac8>)
 8008d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d74:	e009      	b.n	8008d8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d7c:	e005      	b.n	8008d8a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d88:	bf00      	nop
    }

    if (pclk != 0U)
 8008d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d021      	beq.n	8008dd4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	4a1d      	ldr	r2, [pc, #116]	; (8008e0c <UART_SetConfig+0xacc>)
 8008d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	441a      	add	r2, r3
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db6:	2b0f      	cmp	r3, #15
 8008db8:	d909      	bls.n	8008dce <UART_SetConfig+0xa8e>
 8008dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc0:	d205      	bcs.n	8008dce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60da      	str	r2, [r3, #12]
 8008dcc:	e002      	b.n	8008dd4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2200      	movs	r2, #0
 8008de8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2200      	movs	r2, #0
 8008dee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008df0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3748      	adds	r7, #72	; 0x48
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dfe:	bf00      	nop
 8008e00:	58024400 	.word	0x58024400
 8008e04:	03d09000 	.word	0x03d09000
 8008e08:	003d0900 	.word	0x003d0900
 8008e0c:	08009d38 	.word	0x08009d38

08008e10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00a      	beq.n	8008e3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00a      	beq.n	8008e5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00a      	beq.n	8008e7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e82:	f003 0308 	and.w	r3, r3, #8
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea4:	f003 0310 	and.w	r3, r3, #16
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00a      	beq.n	8008ec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00a      	beq.n	8008ee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d01a      	beq.n	8008f26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f0e:	d10a      	bne.n	8008f26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00a      	beq.n	8008f48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	605a      	str	r2, [r3, #4]
  }
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f64:	f7f8 fc76 	bl	8001854 <HAL_GetTick>
 8008f68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0308 	and.w	r3, r3, #8
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d10e      	bne.n	8008f96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f82f 	bl	8008fea <UART_WaitOnFlagUntilTimeout>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e025      	b.n	8008fe2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d10e      	bne.n	8008fc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f819 	bl	8008fea <UART_WaitOnFlagUntilTimeout>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e00f      	b.n	8008fe2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b09c      	sub	sp, #112	; 0x70
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	603b      	str	r3, [r7, #0]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ffa:	e0a9      	b.n	8009150 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009002:	f000 80a5 	beq.w	8009150 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009006:	f7f8 fc25 	bl	8001854 <HAL_GetTick>
 800900a:	4602      	mov	r2, r0
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009012:	429a      	cmp	r2, r3
 8009014:	d302      	bcc.n	800901c <UART_WaitOnFlagUntilTimeout+0x32>
 8009016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009018:	2b00      	cmp	r3, #0
 800901a:	d140      	bne.n	800909e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009024:	e853 3f00 	ldrex	r3, [r3]
 8009028:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800902a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009030:	667b      	str	r3, [r7, #100]	; 0x64
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800903a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800903c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009040:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009042:	e841 2300 	strex	r3, r2, [r1]
 8009046:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1e6      	bne.n	800901c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3308      	adds	r3, #8
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	f023 0301 	bic.w	r3, r3, #1
 8009064:	663b      	str	r3, [r7, #96]	; 0x60
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3308      	adds	r3, #8
 800906c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800906e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009070:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009076:	e841 2300 	strex	r3, r2, [r1]
 800907a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800907c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e5      	bne.n	800904e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2220      	movs	r2, #32
 8009086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2220      	movs	r2, #32
 800908e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e069      	b.n	8009172 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d051      	beq.n	8009150 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090ba:	d149      	bne.n	8009150 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090e4:	637b      	str	r3, [r7, #52]	; 0x34
 80090e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e6      	bne.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3308      	adds	r3, #8
 80090fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	613b      	str	r3, [r7, #16]
   return(result);
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f023 0301 	bic.w	r3, r3, #1
 800910e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	3308      	adds	r3, #8
 8009116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009118:	623a      	str	r2, [r7, #32]
 800911a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	69f9      	ldr	r1, [r7, #28]
 800911e:	6a3a      	ldr	r2, [r7, #32]
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	61bb      	str	r3, [r7, #24]
   return(result);
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e5      	bne.n	80090f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2220      	movs	r2, #32
 8009130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2220      	movs	r2, #32
 8009138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2220      	movs	r2, #32
 8009140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e010      	b.n	8009172 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	69da      	ldr	r2, [r3, #28]
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	4013      	ands	r3, r2
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	429a      	cmp	r2, r3
 800915e:	bf0c      	ite	eq
 8009160:	2301      	moveq	r3, #1
 8009162:	2300      	movne	r3, #0
 8009164:	b2db      	uxtb	r3, r3
 8009166:	461a      	mov	r2, r3
 8009168:	79fb      	ldrb	r3, [r7, #7]
 800916a:	429a      	cmp	r2, r3
 800916c:	f43f af46 	beq.w	8008ffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3770      	adds	r7, #112	; 0x70
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800917a:	b480      	push	{r7}
 800917c:	b085      	sub	sp, #20
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_UARTEx_DisableFifoMode+0x16>
 800918c:	2302      	movs	r3, #2
 800918e:	e027      	b.n	80091e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2224      	movs	r2, #36	; 0x24
 800919c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0201 	bic.w	r2, r2, #1
 80091b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d101      	bne.n	8009204 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009200:	2302      	movs	r3, #2
 8009202:	e02d      	b.n	8009260 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2224      	movs	r2, #36	; 0x24
 8009210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 0201 	bic.w	r2, r2, #1
 800922a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	430a      	orrs	r2, r1
 800923e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f84f 	bl	80092e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2220      	movs	r2, #32
 8009252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800927c:	2302      	movs	r3, #2
 800927e:	e02d      	b.n	80092dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2224      	movs	r2, #36	; 0x24
 800928c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 0201 	bic.w	r2, r2, #1
 80092a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f811 	bl	80092e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d108      	bne.n	8009306 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009304:	e031      	b.n	800936a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009306:	2310      	movs	r3, #16
 8009308:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800930a:	2310      	movs	r3, #16
 800930c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	0e5b      	lsrs	r3, r3, #25
 8009316:	b2db      	uxtb	r3, r3
 8009318:	f003 0307 	and.w	r3, r3, #7
 800931c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	0f5b      	lsrs	r3, r3, #29
 8009326:	b2db      	uxtb	r3, r3
 8009328:	f003 0307 	and.w	r3, r3, #7
 800932c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800932e:	7bbb      	ldrb	r3, [r7, #14]
 8009330:	7b3a      	ldrb	r2, [r7, #12]
 8009332:	4911      	ldr	r1, [pc, #68]	; (8009378 <UARTEx_SetNbDataToProcess+0x94>)
 8009334:	5c8a      	ldrb	r2, [r1, r2]
 8009336:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800933a:	7b3a      	ldrb	r2, [r7, #12]
 800933c:	490f      	ldr	r1, [pc, #60]	; (800937c <UARTEx_SetNbDataToProcess+0x98>)
 800933e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009340:	fb93 f3f2 	sdiv	r3, r3, r2
 8009344:	b29a      	uxth	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800934c:	7bfb      	ldrb	r3, [r7, #15]
 800934e:	7b7a      	ldrb	r2, [r7, #13]
 8009350:	4909      	ldr	r1, [pc, #36]	; (8009378 <UARTEx_SetNbDataToProcess+0x94>)
 8009352:	5c8a      	ldrb	r2, [r1, r2]
 8009354:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009358:	7b7a      	ldrb	r2, [r7, #13]
 800935a:	4908      	ldr	r1, [pc, #32]	; (800937c <UARTEx_SetNbDataToProcess+0x98>)
 800935c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800935e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009362:	b29a      	uxth	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800936a:	bf00      	nop
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	08009d50 	.word	0x08009d50
 800937c:	08009d58 	.word	0x08009d58

08009380 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009380:	b084      	sub	sp, #16
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	f107 001c 	add.w	r0, r7, #28
 800938e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009394:	2b01      	cmp	r3, #1
 8009396:	d120      	bne.n	80093da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68da      	ldr	r2, [r3, #12]
 80093a8:	4b2a      	ldr	r3, [pc, #168]	; (8009454 <USB_CoreInit+0xd4>)
 80093aa:	4013      	ands	r3, r2
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80093bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d105      	bne.n	80093ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 faac 	bl	800992c <USB_CoreReset>
 80093d4:	4603      	mov	r3, r0
 80093d6:	73fb      	strb	r3, [r7, #15]
 80093d8:	e01a      	b.n	8009410 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 faa0 	bl	800992c <USB_CoreReset>
 80093ec:	4603      	mov	r3, r0
 80093ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80093f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	639a      	str	r2, [r3, #56]	; 0x38
 8009402:	e005      	b.n	8009410 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	2b01      	cmp	r3, #1
 8009414:	d116      	bne.n	8009444 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800941a:	b29a      	uxth	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009424:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <USB_CoreInit+0xd8>)
 8009426:	4313      	orrs	r3, r2
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f043 0206 	orr.w	r2, r3, #6
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f043 0220 	orr.w	r2, r3, #32
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009444:	7bfb      	ldrb	r3, [r7, #15]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009450:	b004      	add	sp, #16
 8009452:	4770      	bx	lr
 8009454:	ffbdffbf 	.word	0xffbdffbf
 8009458:	03ee0000 	.word	0x03ee0000

0800945c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	f023 0201 	bic.w	r2, r3, #1
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	460b      	mov	r3, r1
 8009488:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d115      	bne.n	80094cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80094ac:	2001      	movs	r0, #1
 80094ae:	f7f8 f9dd 	bl	800186c <HAL_Delay>
      ms++;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3301      	adds	r3, #1
 80094b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fa29 	bl	8009910 <USB_GetMode>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d01e      	beq.n	8009502 <USB_SetCurrentMode+0x84>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2b31      	cmp	r3, #49	; 0x31
 80094c8:	d9f0      	bls.n	80094ac <USB_SetCurrentMode+0x2e>
 80094ca:	e01a      	b.n	8009502 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80094cc:	78fb      	ldrb	r3, [r7, #3]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d115      	bne.n	80094fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80094de:	2001      	movs	r0, #1
 80094e0:	f7f8 f9c4 	bl	800186c <HAL_Delay>
      ms++;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	3301      	adds	r3, #1
 80094e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fa10 	bl	8009910 <USB_GetMode>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d005      	beq.n	8009502 <USB_SetCurrentMode+0x84>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2b31      	cmp	r3, #49	; 0x31
 80094fa:	d9f0      	bls.n	80094de <USB_SetCurrentMode+0x60>
 80094fc:	e001      	b.n	8009502 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e005      	b.n	800950e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b32      	cmp	r3, #50	; 0x32
 8009506:	d101      	bne.n	800950c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e000      	b.n	800950e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009518:	b084      	sub	sp, #16
 800951a:	b580      	push	{r7, lr}
 800951c:	b086      	sub	sp, #24
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009532:	2300      	movs	r3, #0
 8009534:	613b      	str	r3, [r7, #16]
 8009536:	e009      	b.n	800954c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	3340      	adds	r3, #64	; 0x40
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	2200      	movs	r2, #0
 8009544:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	3301      	adds	r3, #1
 800954a:	613b      	str	r3, [r7, #16]
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	2b0e      	cmp	r3, #14
 8009550:	d9f2      	bls.n	8009538 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009554:	2b00      	cmp	r3, #0
 8009556:	d11c      	bne.n	8009592 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009566:	f043 0302 	orr.w	r3, r3, #2
 800956a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009570:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	e005      	b.n	800959e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095a4:	461a      	mov	r2, r3
 80095a6:	2300      	movs	r3, #0
 80095a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b0:	4619      	mov	r1, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b8:	461a      	mov	r2, r3
 80095ba:	680b      	ldr	r3, [r1, #0]
 80095bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d10c      	bne.n	80095de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80095c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d104      	bne.n	80095d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80095ca:	2100      	movs	r1, #0
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f965 	bl	800989c <USB_SetDevSpeed>
 80095d2:	e008      	b.n	80095e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80095d4:	2101      	movs	r1, #1
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f960 	bl	800989c <USB_SetDevSpeed>
 80095dc:	e003      	b.n	80095e6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80095de:	2103      	movs	r1, #3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f95b 	bl	800989c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095e6:	2110      	movs	r1, #16
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f8f3 	bl	80097d4 <USB_FlushTxFifo>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f91f 	bl	800983c <USB_FlushRxFifo>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960e:	461a      	mov	r2, r3
 8009610:	2300      	movs	r3, #0
 8009612:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800961a:	461a      	mov	r2, r3
 800961c:	2300      	movs	r3, #0
 800961e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009626:	461a      	mov	r2, r3
 8009628:	2300      	movs	r3, #0
 800962a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800962c:	2300      	movs	r3, #0
 800962e:	613b      	str	r3, [r7, #16]
 8009630:	e043      	b.n	80096ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009648:	d118      	bne.n	800967c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800965c:	461a      	mov	r2, r3
 800965e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	e013      	b.n	800968e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009672:	461a      	mov	r2, r3
 8009674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009678:	6013      	str	r3, [r2, #0]
 800967a:	e008      	b.n	800968e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4413      	add	r3, r2
 8009684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009688:	461a      	mov	r2, r3
 800968a:	2300      	movs	r3, #0
 800968c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	4413      	add	r3, r2
 8009696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800969a:	461a      	mov	r2, r3
 800969c:	2300      	movs	r3, #0
 800969e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ac:	461a      	mov	r2, r3
 80096ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	3301      	adds	r3, #1
 80096b8:	613b      	str	r3, [r7, #16]
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d3b7      	bcc.n	8009632 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096c2:	2300      	movs	r3, #0
 80096c4:	613b      	str	r3, [r7, #16]
 80096c6:	e043      	b.n	8009750 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096de:	d118      	bne.n	8009712 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10a      	bne.n	80096fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f2:	461a      	mov	r2, r3
 80096f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	e013      	b.n	8009724 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009708:	461a      	mov	r2, r3
 800970a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	e008      	b.n	8009724 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971e:	461a      	mov	r2, r3
 8009720:	2300      	movs	r3, #0
 8009722:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009730:	461a      	mov	r2, r3
 8009732:	2300      	movs	r3, #0
 8009734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4413      	add	r3, r2
 800973e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009742:	461a      	mov	r2, r3
 8009744:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009748:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	3301      	adds	r3, #1
 800974e:	613b      	str	r3, [r7, #16]
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	429a      	cmp	r2, r3
 8009756:	d3b7      	bcc.n	80096c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800976a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009778:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	2b00      	cmp	r3, #0
 800977e:	d105      	bne.n	800978c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	f043 0210 	orr.w	r2, r3, #16
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699a      	ldr	r2, [r3, #24]
 8009790:	4b0e      	ldr	r3, [pc, #56]	; (80097cc <USB_DevInit+0x2b4>)
 8009792:	4313      	orrs	r3, r2
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800979a:	2b00      	cmp	r3, #0
 800979c:	d005      	beq.n	80097aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	f043 0208 	orr.w	r2, r3, #8
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80097aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d105      	bne.n	80097bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	699a      	ldr	r2, [r3, #24]
 80097b4:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <USB_DevInit+0x2b8>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097c8:	b004      	add	sp, #16
 80097ca:	4770      	bx	lr
 80097cc:	803c3800 	.word	0x803c3800
 80097d0:	40000004 	.word	0x40000004

080097d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097de:	2300      	movs	r3, #0
 80097e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3301      	adds	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	4a13      	ldr	r2, [pc, #76]	; (8009838 <USB_FlushTxFifo+0x64>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d901      	bls.n	80097f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e01b      	b.n	800982c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	daf2      	bge.n	80097e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	019b      	lsls	r3, r3, #6
 8009804:	f043 0220 	orr.w	r2, r3, #32
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3301      	adds	r3, #1
 8009810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	4a08      	ldr	r2, [pc, #32]	; (8009838 <USB_FlushTxFifo+0x64>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d901      	bls.n	800981e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	e006      	b.n	800982c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	f003 0320 	and.w	r3, r3, #32
 8009826:	2b20      	cmp	r3, #32
 8009828:	d0f0      	beq.n	800980c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3714      	adds	r7, #20
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	00030d40 	.word	0x00030d40

0800983c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	3301      	adds	r3, #1
 800984c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4a11      	ldr	r2, [pc, #68]	; (8009898 <USB_FlushRxFifo+0x5c>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d901      	bls.n	800985a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e018      	b.n	800988c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	2b00      	cmp	r3, #0
 8009860:	daf2      	bge.n	8009848 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2210      	movs	r2, #16
 800986a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3301      	adds	r3, #1
 8009870:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4a08      	ldr	r2, [pc, #32]	; (8009898 <USB_FlushRxFifo+0x5c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d901      	bls.n	800987e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e006      	b.n	800988c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	f003 0310 	and.w	r3, r3, #16
 8009886:	2b10      	cmp	r3, #16
 8009888:	d0f0      	beq.n	800986c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	00030d40 	.word	0x00030d40

0800989c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	68f9      	ldr	r1, [r7, #12]
 80098b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098bc:	4313      	orrs	r3, r2
 80098be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b085      	sub	sp, #20
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098e8:	f023 0303 	bic.w	r3, r3, #3
 80098ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098fc:	f043 0302 	orr.w	r3, r3, #2
 8009900:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	695b      	ldr	r3, [r3, #20]
 800991c:	f003 0301 	and.w	r3, r3, #1
}
 8009920:	4618      	mov	r0, r3
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3301      	adds	r3, #1
 800993c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4a13      	ldr	r2, [pc, #76]	; (8009990 <USB_CoreReset+0x64>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d901      	bls.n	800994a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e01b      	b.n	8009982 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	2b00      	cmp	r3, #0
 8009950:	daf2      	bge.n	8009938 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009952:	2300      	movs	r3, #0
 8009954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	f043 0201 	orr.w	r2, r3, #1
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3301      	adds	r3, #1
 8009966:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4a09      	ldr	r2, [pc, #36]	; (8009990 <USB_CoreReset+0x64>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d901      	bls.n	8009974 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e006      	b.n	8009982 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b01      	cmp	r3, #1
 800997e:	d0f0      	beq.n	8009962 <USB_CoreReset+0x36>

  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	00030d40 	.word	0x00030d40

08009994 <__libc_init_array>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	4d0d      	ldr	r5, [pc, #52]	; (80099cc <__libc_init_array+0x38>)
 8009998:	4c0d      	ldr	r4, [pc, #52]	; (80099d0 <__libc_init_array+0x3c>)
 800999a:	1b64      	subs	r4, r4, r5
 800999c:	10a4      	asrs	r4, r4, #2
 800999e:	2600      	movs	r6, #0
 80099a0:	42a6      	cmp	r6, r4
 80099a2:	d109      	bne.n	80099b8 <__libc_init_array+0x24>
 80099a4:	4d0b      	ldr	r5, [pc, #44]	; (80099d4 <__libc_init_array+0x40>)
 80099a6:	4c0c      	ldr	r4, [pc, #48]	; (80099d8 <__libc_init_array+0x44>)
 80099a8:	f000 f82e 	bl	8009a08 <_init>
 80099ac:	1b64      	subs	r4, r4, r5
 80099ae:	10a4      	asrs	r4, r4, #2
 80099b0:	2600      	movs	r6, #0
 80099b2:	42a6      	cmp	r6, r4
 80099b4:	d105      	bne.n	80099c2 <__libc_init_array+0x2e>
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099bc:	4798      	blx	r3
 80099be:	3601      	adds	r6, #1
 80099c0:	e7ee      	b.n	80099a0 <__libc_init_array+0xc>
 80099c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c6:	4798      	blx	r3
 80099c8:	3601      	adds	r6, #1
 80099ca:	e7f2      	b.n	80099b2 <__libc_init_array+0x1e>
 80099cc:	08009d68 	.word	0x08009d68
 80099d0:	08009d68 	.word	0x08009d68
 80099d4:	08009d68 	.word	0x08009d68
 80099d8:	08009d6c 	.word	0x08009d6c

080099dc <memcpy>:
 80099dc:	440a      	add	r2, r1
 80099de:	4291      	cmp	r1, r2
 80099e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099e4:	d100      	bne.n	80099e8 <memcpy+0xc>
 80099e6:	4770      	bx	lr
 80099e8:	b510      	push	{r4, lr}
 80099ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099f2:	4291      	cmp	r1, r2
 80099f4:	d1f9      	bne.n	80099ea <memcpy+0xe>
 80099f6:	bd10      	pop	{r4, pc}

080099f8 <memset>:
 80099f8:	4402      	add	r2, r0
 80099fa:	4603      	mov	r3, r0
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d100      	bne.n	8009a02 <memset+0xa>
 8009a00:	4770      	bx	lr
 8009a02:	f803 1b01 	strb.w	r1, [r3], #1
 8009a06:	e7f9      	b.n	80099fc <memset+0x4>

08009a08 <_init>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	bf00      	nop
 8009a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a0e:	bc08      	pop	{r3}
 8009a10:	469e      	mov	lr, r3
 8009a12:	4770      	bx	lr

08009a14 <_fini>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	bf00      	nop
 8009a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1a:	bc08      	pop	{r3}
 8009a1c:	469e      	mov	lr, r3
 8009a1e:	4770      	bx	lr
