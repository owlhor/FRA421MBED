
H7A3_SDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a934  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800abe4  0800abe4  0001abe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aef0  0800aef0  0001aef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aef8  0800aef8  0001aef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aefc  0800aefc  0001aefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  24000000  0800af00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000384  2400008c  0800af8c  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24000410  0800af8c  00020410  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a4d7  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003265  00000000  00000000  0003a591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001458  00000000  00000000  0003d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001320  00000000  00000000  0003ec50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003296d  00000000  00000000  0003ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c56c  00000000  00000000  000728dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001452c5  00000000  00000000  0008ee49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d410e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a84  00000000  00000000  001d4160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400008c 	.word	0x2400008c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800abcc 	.word	0x0800abcc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000090 	.word	0x24000090
 80002ec:	0800abcc 	.word	0x0800abcc

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <SELECT>:
#define SD_CS_GPIO_Port GPIOD
#define SD_CS_Pin GPIO_PIN_14

/* SPI Chip Select */
static void SELECT(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ae:	4802      	ldr	r0, [pc, #8]	; (80006b8 <SELECT+0x14>)
 80006b0:	f004 f82a 	bl	8004708 <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	58020c00 	.word	0x58020c00

080006bc <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c6:	4802      	ldr	r0, [pc, #8]	; (80006d0 <DESELECT+0x14>)
 80006c8:	f004 f81e 	bl	8004708 <HAL_GPIO_WritePin>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	58020c00 	.word	0x58020c00

080006d4 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80006de:	bf00      	nop
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <SPI_TxByte+0x30>)
 80006e2:	f007 f897 	bl	8007814 <HAL_SPI_GetState>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d1f9      	bne.n	80006e0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80006ec:	1df9      	adds	r1, r7, #7
 80006ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f2:	2201      	movs	r2, #1
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <SPI_TxByte+0x30>)
 80006f6:	f006 fc73 	bl	8006fe0 <HAL_SPI_Transmit>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	240000ac 	.word	0x240000ac

08000708 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800070e:	23ff      	movs	r3, #255	; 0xff
 8000710:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000716:	bf00      	nop
 8000718:	4809      	ldr	r0, [pc, #36]	; (8000740 <SPI_RxByte+0x38>)
 800071a:	f007 f87b 	bl	8007814 <HAL_SPI_GetState>
 800071e:	4603      	mov	r3, r0
 8000720:	2b01      	cmp	r3, #1
 8000722:	d1f9      	bne.n	8000718 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000724:	1dba      	adds	r2, r7, #6
 8000726:	1df9      	adds	r1, r7, #7
 8000728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <SPI_RxByte+0x38>)
 8000732:	f006 fe47 	bl	80073c4 <HAL_SPI_TransmitReceive>

  return data;
 8000736:	79bb      	ldrb	r3, [r7, #6]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	240000ac 	.word	0x240000ac

08000744 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800074c:	f7ff ffdc 	bl	8000708 <SPI_RxByte>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	701a      	strb	r2, [r3, #0]
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <SD_ReadyWait+0x34>)
 8000768:	2232      	movs	r2, #50	; 0x32
 800076a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800076c:	f7ff ffcc 	bl	8000708 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000770:	f7ff ffca 	bl	8000708 <SPI_RxByte>
 8000774:	4603      	mov	r3, r0
 8000776:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2bff      	cmp	r3, #255	; 0xff
 800077c:	d004      	beq.n	8000788 <SD_ReadyWait+0x28>
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SD_ReadyWait+0x34>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1f3      	bne.n	8000770 <SD_ReadyWait+0x10>

  return res;
 8000788:	79fb      	ldrb	r3, [r7, #7]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	240003e2 	.word	0x240003e2

08000798 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800079e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80007a2:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80007a4:	f7ff ff8a 	bl	80006bc <DESELECT>

  for(int i = 0; i < 10; i++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	e005      	b.n	80007ba <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80007ae:	20ff      	movs	r0, #255	; 0xff
 80007b0:	f7ff ff90 	bl	80006d4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	3301      	adds	r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	2b09      	cmp	r3, #9
 80007be:	ddf6      	ble.n	80007ae <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80007c0:	f7ff ff70 	bl	80006a4 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80007d8:	2395      	movs	r3, #149	; 0x95
 80007da:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	e009      	b.n	80007f6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80007e2:	1d3a      	adds	r2, r7, #4
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff72 	bl	80006d4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2b05      	cmp	r3, #5
 80007fa:	ddf2      	ble.n	80007e2 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80007fc:	e002      	b.n	8000804 <SD_PowerOn+0x6c>
  {
    Count--;
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3b01      	subs	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000804:	f7ff ff80 	bl	8000708 <SPI_RxByte>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d002      	beq.n	8000814 <SD_PowerOn+0x7c>
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f4      	bne.n	80007fe <SD_PowerOn+0x66>
  }

  DESELECT();
 8000814:	f7ff ff52 	bl	80006bc <DESELECT>
  SPI_TxByte(0XFF);
 8000818:	20ff      	movs	r0, #255	; 0xff
 800081a:	f7ff ff5b 	bl	80006d4 <SPI_TxByte>

  PowerFlag = 1;
 800081e:	4b03      	ldr	r3, [pc, #12]	; (800082c <SD_PowerOn+0x94>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
}
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	240000a9 	.word	0x240000a9

08000830 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <SD_PowerOff+0x14>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	240000a9 	.word	0x240000a9

08000848 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <SD_CheckPower+0x14>)
 800084e:	781b      	ldrb	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	240000a9 	.word	0x240000a9

08000860 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <SD_RxDataBlock+0x68>)
 800086c:	220a      	movs	r2, #10
 800086e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000870:	f7ff ff4a 	bl	8000708 <SPI_RxByte>
 8000874:	4603      	mov	r3, r0
 8000876:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	2bff      	cmp	r3, #255	; 0xff
 800087c:	d104      	bne.n	8000888 <SD_RxDataBlock+0x28>
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <SD_RxDataBlock+0x68>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1f3      	bne.n	8000870 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2bfe      	cmp	r3, #254	; 0xfe
 800088c:	d001      	beq.n	8000892 <SD_RxDataBlock+0x32>
    return FALSE;
 800088e:	2300      	movs	r3, #0
 8000890:	e016      	b.n	80008c0 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff53 	bl	8000744 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff4d 	bl	8000744 <SPI_RxBytePtr>
  } while(btr -= 2);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	3b02      	subs	r3, #2
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1ed      	bne.n	8000892 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80008b6:	f7ff ff27 	bl	8000708 <SPI_RxByte>
  SPI_RxByte();
 80008ba:	f7ff ff25 	bl	8000708 <SPI_RxByte>

  return TRUE;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	240003e1 	.word	0x240003e1

080008cc <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80008dc:	f7ff ff40 	bl	8000760 <SD_ReadyWait>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2bff      	cmp	r3, #255	; 0xff
 80008e4:	d001      	beq.n	80008ea <SD_TxDataBlock+0x1e>
    return FALSE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e040      	b.n	800096c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fef1 	bl	80006d4 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	2bfd      	cmp	r3, #253	; 0xfd
 80008f6:	d031      	beq.n	800095c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fee5 	bl	80006d4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fede 	bl	80006d4 <SPI_TxByte>
    } while (--wc);
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	3b01      	subs	r3, #1
 800091c:	73bb      	strb	r3, [r7, #14]
 800091e:	7bbb      	ldrb	r3, [r7, #14]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1eb      	bne.n	80008fc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000924:	f7ff fef0 	bl	8000708 <SPI_RxByte>
    SPI_RxByte();
 8000928:	f7ff feee 	bl	8000708 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 800092c:	e00b      	b.n	8000946 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800092e:	f7ff feeb 	bl	8000708 <SPI_RxByte>
 8000932:	4603      	mov	r3, r0
 8000934:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	f003 031f 	and.w	r3, r3, #31
 800093c:	2b05      	cmp	r3, #5
 800093e:	d006      	beq.n	800094e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000940:	7b7b      	ldrb	r3, [r7, #13]
 8000942:	3301      	adds	r3, #1
 8000944:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000946:	7b7b      	ldrb	r3, [r7, #13]
 8000948:	2b40      	cmp	r3, #64	; 0x40
 800094a:	d9f0      	bls.n	800092e <SD_TxDataBlock+0x62>
 800094c:	e000      	b.n	8000950 <SD_TxDataBlock+0x84>
        break;
 800094e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000950:	bf00      	nop
 8000952:	f7ff fed9 	bl	8000708 <SPI_RxByte>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0fa      	beq.n	8000952 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	f003 031f 	and.w	r3, r3, #31
 8000962:	2b05      	cmp	r3, #5
 8000964:	d101      	bne.n	800096a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000980:	f7ff feee 	bl	8000760 <SD_ReadyWait>
 8000984:	4603      	mov	r3, r0
 8000986:	2bff      	cmp	r3, #255	; 0xff
 8000988:	d001      	beq.n	800098e <SD_SendCmd+0x1a>
    return 0xFF;
 800098a:	23ff      	movs	r3, #255	; 0xff
 800098c:	e040      	b.n	8000a10 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe9f 	bl	80006d4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	0e1b      	lsrs	r3, r3, #24
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fe99 	bl	80006d4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	0c1b      	lsrs	r3, r3, #16
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fe93 	bl	80006d4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fe8d 	bl	80006d4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe88 	bl	80006d4 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2b40      	cmp	r3, #64	; 0x40
 80009cc:	d101      	bne.n	80009d2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80009ce:	2395      	movs	r3, #149	; 0x95
 80009d0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b48      	cmp	r3, #72	; 0x48
 80009d6:	d101      	bne.n	80009dc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80009d8:	2387      	movs	r3, #135	; 0x87
 80009da:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fe78 	bl	80006d4 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b4c      	cmp	r3, #76	; 0x4c
 80009e8:	d101      	bne.n	80009ee <SD_SendCmd+0x7a>
    SPI_RxByte();
 80009ea:	f7ff fe8d 	bl	8000708 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80009ee:	230a      	movs	r3, #10
 80009f0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80009f2:	f7ff fe89 	bl	8000708 <SPI_RxByte>
 80009f6:	4603      	mov	r3, r0
 80009f8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80009fa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	da05      	bge.n	8000a0e <SD_SendCmd+0x9a>
 8000a02:	7bbb      	ldrb	r3, [r7, #14]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	73bb      	strb	r3, [r7, #14]
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d1f1      	bne.n	80009f2 <SD_SendCmd+0x7e>

  return res;
 8000a0e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e0d5      	b.n	8000bd8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000a2c:	4b6c      	ldr	r3, [pc, #432]	; (8000be0 <SD_disk_initialize+0x1c8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <SD_disk_initialize+0x2a>
    return Stat;
 8000a3a:	4b69      	ldr	r3, [pc, #420]	; (8000be0 <SD_disk_initialize+0x1c8>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	e0ca      	b.n	8000bd8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000a42:	f7ff fea9 	bl	8000798 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000a46:	f7ff fe2d 	bl	80006a4 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2040      	movs	r0, #64	; 0x40
 8000a52:	f7ff ff8f 	bl	8000974 <SD_SendCmd>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	f040 80a5 	bne.w	8000ba8 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000a5e:	4b61      	ldr	r3, [pc, #388]	; (8000be4 <SD_disk_initialize+0x1cc>)
 8000a60:	2264      	movs	r2, #100	; 0x64
 8000a62:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000a64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000a68:	2048      	movs	r0, #72	; 0x48
 8000a6a:	f7ff ff83 	bl	8000974 <SD_SendCmd>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d158      	bne.n	8000b26 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	e00c      	b.n	8000a94 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000a7a:	7bfc      	ldrb	r4, [r7, #15]
 8000a7c:	f7ff fe44 	bl	8000708 <SPI_RxByte>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	f104 0310 	add.w	r3, r4, #16
 8000a88:	443b      	add	r3, r7
 8000a8a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	3301      	adds	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d9ef      	bls.n	8000a7a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000a9a:	7abb      	ldrb	r3, [r7, #10]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	f040 8083 	bne.w	8000ba8 <SD_disk_initialize+0x190>
 8000aa2:	7afb      	ldrb	r3, [r7, #11]
 8000aa4:	2baa      	cmp	r3, #170	; 0xaa
 8000aa6:	d17f      	bne.n	8000ba8 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2077      	movs	r0, #119	; 0x77
 8000aac:	f7ff ff62 	bl	8000974 <SD_SendCmd>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d807      	bhi.n	8000ac6 <SD_disk_initialize+0xae>
 8000ab6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000aba:	2069      	movs	r0, #105	; 0x69
 8000abc:	f7ff ff5a 	bl	8000974 <SD_SendCmd>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d005      	beq.n	8000ad2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000ac6:	4b47      	ldr	r3, [pc, #284]	; (8000be4 <SD_disk_initialize+0x1cc>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1eb      	bne.n	8000aa8 <SD_disk_initialize+0x90>
 8000ad0:	e000      	b.n	8000ad4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000ad2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000ad4:	4b43      	ldr	r3, [pc, #268]	; (8000be4 <SD_disk_initialize+0x1cc>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d064      	beq.n	8000ba8 <SD_disk_initialize+0x190>
 8000ade:	2100      	movs	r1, #0
 8000ae0:	207a      	movs	r0, #122	; 0x7a
 8000ae2:	f7ff ff47 	bl	8000974 <SD_SendCmd>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d15d      	bne.n	8000ba8 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]
 8000af0:	e00c      	b.n	8000b0c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000af2:	7bfc      	ldrb	r4, [r7, #15]
 8000af4:	f7ff fe08 	bl	8000708 <SPI_RxByte>
 8000af8:	4603      	mov	r3, r0
 8000afa:	461a      	mov	r2, r3
 8000afc:	f104 0310 	add.w	r3, r4, #16
 8000b00:	443b      	add	r3, r7
 8000b02:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d9ef      	bls.n	8000af2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000b12:	7a3b      	ldrb	r3, [r7, #8]
 8000b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SD_disk_initialize+0x108>
 8000b1c:	2306      	movs	r3, #6
 8000b1e:	e000      	b.n	8000b22 <SD_disk_initialize+0x10a>
 8000b20:	2302      	movs	r3, #2
 8000b22:	73bb      	strb	r3, [r7, #14]
 8000b24:	e040      	b.n	8000ba8 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000b26:	2100      	movs	r1, #0
 8000b28:	2077      	movs	r0, #119	; 0x77
 8000b2a:	f7ff ff23 	bl	8000974 <SD_SendCmd>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d808      	bhi.n	8000b46 <SD_disk_initialize+0x12e>
 8000b34:	2100      	movs	r1, #0
 8000b36:	2069      	movs	r0, #105	; 0x69
 8000b38:	f7ff ff1c 	bl	8000974 <SD_SendCmd>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d801      	bhi.n	8000b46 <SD_disk_initialize+0x12e>
 8000b42:	2302      	movs	r3, #2
 8000b44:	e000      	b.n	8000b48 <SD_disk_initialize+0x130>
 8000b46:	2301      	movs	r3, #1
 8000b48:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000b4a:	7bbb      	ldrb	r3, [r7, #14]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d10e      	bne.n	8000b6e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000b50:	2100      	movs	r1, #0
 8000b52:	2077      	movs	r0, #119	; 0x77
 8000b54:	f7ff ff0e 	bl	8000974 <SD_SendCmd>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d80e      	bhi.n	8000b7c <SD_disk_initialize+0x164>
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2069      	movs	r0, #105	; 0x69
 8000b62:	f7ff ff07 	bl	8000974 <SD_SendCmd>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d107      	bne.n	8000b7c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000b6c:	e00d      	b.n	8000b8a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2041      	movs	r0, #65	; 0x41
 8000b72:	f7ff feff 	bl	8000974 <SD_SendCmd>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d005      	beq.n	8000b88 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <SD_disk_initialize+0x1cc>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1e1      	bne.n	8000b4a <SD_disk_initialize+0x132>
 8000b86:	e000      	b.n	8000b8a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000b88:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <SD_disk_initialize+0x1cc>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d007      	beq.n	8000ba4 <SD_disk_initialize+0x18c>
 8000b94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b98:	2050      	movs	r0, #80	; 0x50
 8000b9a:	f7ff feeb 	bl	8000974 <SD_SendCmd>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <SD_disk_initialize+0x1d0>)
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000bae:	f7ff fd85 	bl	80006bc <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000bb2:	f7ff fda9 	bl	8000708 <SPI_RxByte>

  if (type)
 8000bb6:	7bbb      	ldrb	r3, [r7, #14]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d008      	beq.n	8000bce <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <SD_disk_initialize+0x1c8>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f023 0301 	bic.w	r3, r3, #1
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SD_disk_initialize+0x1c8>)
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e001      	b.n	8000bd2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000bce:	f7ff fe2f 	bl	8000830 <SD_PowerOff>
  }

  return Stat;
 8000bd2:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <SD_disk_initialize+0x1c8>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	24000000 	.word	0x24000000
 8000be4:	240003e1 	.word	0x240003e1
 8000be8:	240000a8 	.word	0x240000a8

08000bec <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e002      	b.n	8000c06 <SD_disk_status+0x1a>

  return Stat;
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SD_disk_status+0x28>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2db      	uxtb	r3, r3
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	24000000 	.word	0x24000000

08000c18 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	4603      	mov	r3, r0
 8000c26:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <SD_disk_read+0x1c>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <SD_disk_read+0x20>
    return RES_PARERR;
 8000c34:	2304      	movs	r3, #4
 8000c36:	e051      	b.n	8000cdc <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000c38:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <SD_disk_read+0xcc>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e048      	b.n	8000cdc <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <SD_disk_read+0xd0>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	025b      	lsls	r3, r3, #9
 8000c5a:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c5c:	f7ff fd22 	bl	80006a4 <SELECT>

  if (count == 1)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d111      	bne.n	8000c8a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	2051      	movs	r0, #81	; 0x51
 8000c6a:	f7ff fe83 	bl	8000974 <SD_SendCmd>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d129      	bne.n	8000cc8 <SD_disk_read+0xb0>
 8000c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c78:	68b8      	ldr	r0, [r7, #8]
 8000c7a:	f7ff fdf1 	bl	8000860 <SD_RxDataBlock>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d021      	beq.n	8000cc8 <SD_disk_read+0xb0>
      count = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	e01e      	b.n	8000cc8 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	2052      	movs	r0, #82	; 0x52
 8000c8e:	f7ff fe71 	bl	8000974 <SD_SendCmd>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d117      	bne.n	8000cc8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000c98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c9c:	68b8      	ldr	r0, [r7, #8]
 8000c9e:	f7ff fddf 	bl	8000860 <SD_RxDataBlock>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00a      	beq.n	8000cbe <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cae:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1ed      	bne.n	8000c98 <SD_disk_read+0x80>
 8000cbc:	e000      	b.n	8000cc0 <SD_disk_read+0xa8>
          break;
 8000cbe:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	204c      	movs	r0, #76	; 0x4c
 8000cc4:	f7ff fe56 	bl	8000974 <SD_SendCmd>
    }
  }

  DESELECT();
 8000cc8:	f7ff fcf8 	bl	80006bc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000ccc:	f7ff fd1c 	bl	8000708 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	24000000 	.word	0x24000000
 8000ce8:	240000a8 	.word	0x240000a8

08000cec <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <SD_disk_write+0x1c>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <SD_disk_write+0x20>
    return RES_PARERR;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	e06b      	b.n	8000de4 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000d0c:	4b37      	ldr	r3, [pc, #220]	; (8000dec <SD_disk_write+0x100>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e062      	b.n	8000de4 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000d1e:	4b33      	ldr	r3, [pc, #204]	; (8000dec <SD_disk_write+0x100>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e059      	b.n	8000de4 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000d30:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <SD_disk_write+0x104>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	025b      	lsls	r3, r3, #9
 8000d40:	607b      	str	r3, [r7, #4]

  SELECT();
 8000d42:	f7ff fcaf 	bl	80006a4 <SELECT>

  if (count == 1)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d110      	bne.n	8000d6e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	2058      	movs	r0, #88	; 0x58
 8000d50:	f7ff fe10 	bl	8000974 <SD_SendCmd>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d13a      	bne.n	8000dd0 <SD_disk_write+0xe4>
 8000d5a:	21fe      	movs	r1, #254	; 0xfe
 8000d5c:	68b8      	ldr	r0, [r7, #8]
 8000d5e:	f7ff fdb5 	bl	80008cc <SD_TxDataBlock>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d033      	beq.n	8000dd0 <SD_disk_write+0xe4>
      count = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	e030      	b.n	8000dd0 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000d6e:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <SD_disk_write+0x104>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d007      	beq.n	8000d8a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2077      	movs	r0, #119	; 0x77
 8000d7e:	f7ff fdf9 	bl	8000974 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000d82:	6839      	ldr	r1, [r7, #0]
 8000d84:	2057      	movs	r0, #87	; 0x57
 8000d86:	f7ff fdf5 	bl	8000974 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	2059      	movs	r0, #89	; 0x59
 8000d8e:	f7ff fdf1 	bl	8000974 <SD_SendCmd>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d11b      	bne.n	8000dd0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000d98:	21fc      	movs	r1, #252	; 0xfc
 8000d9a:	68b8      	ldr	r0, [r7, #8]
 8000d9c:	f7ff fd96 	bl	80008cc <SD_TxDataBlock>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00a      	beq.n	8000dbc <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000dac:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1ee      	bne.n	8000d98 <SD_disk_write+0xac>
 8000dba:	e000      	b.n	8000dbe <SD_disk_write+0xd2>
          break;
 8000dbc:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000dbe:	21fd      	movs	r1, #253	; 0xfd
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff fd83 	bl	80008cc <SD_TxDataBlock>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <SD_disk_write+0xe4>
      {
        count = 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000dd0:	f7ff fc74 	bl	80006bc <DESELECT>
  SPI_RxByte();
 8000dd4:	f7ff fc98 	bl	8000708 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bf14      	ite	ne
 8000dde:	2301      	movne	r3, #1
 8000de0:	2300      	moveq	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	24000000 	.word	0x24000000
 8000df0:	240000a8 	.word	0x240000a8

08000df4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b08b      	sub	sp, #44	; 0x2c
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	603a      	str	r2, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	460b      	mov	r3, r1
 8000e02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	e11b      	b.n	800104a <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000e18:	79bb      	ldrb	r3, [r7, #6]
 8000e1a:	2b05      	cmp	r3, #5
 8000e1c:	d129      	bne.n	8000e72 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000e1e:	6a3b      	ldr	r3, [r7, #32]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d017      	beq.n	8000e56 <SD_disk_ioctl+0x62>
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	dc1f      	bgt.n	8000e6a <SD_disk_ioctl+0x76>
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <SD_disk_ioctl+0x40>
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d00b      	beq.n	8000e4a <SD_disk_ioctl+0x56>
 8000e32:	e01a      	b.n	8000e6a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000e34:	f7ff fd08 	bl	8000848 <SD_CheckPower>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000e3e:	f7ff fcf7 	bl	8000830 <SD_PowerOff>
      res = RES_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e48:	e0fd      	b.n	8001046 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000e4a:	f7ff fca5 	bl	8000798 <SD_PowerOn>
      res = RES_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e54:	e0f7      	b.n	8001046 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	1c5c      	adds	r4, r3, #1
 8000e5a:	f7ff fcf5 	bl	8000848 <SD_CheckPower>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000e62:	2300      	movs	r3, #0
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e68:	e0ed      	b.n	8001046 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e70:	e0e9      	b.n	8001046 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000e72:	4b78      	ldr	r3, [pc, #480]	; (8001054 <SD_disk_ioctl+0x260>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e0e2      	b.n	800104a <SD_disk_ioctl+0x256>

    SELECT();
 8000e84:	f7ff fc0e 	bl	80006a4 <SELECT>

    switch (ctrl)
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	2b0d      	cmp	r3, #13
 8000e8c:	f200 80cc 	bhi.w	8001028 <SD_disk_ioctl+0x234>
 8000e90:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <SD_disk_ioctl+0xa4>)
 8000e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e96:	bf00      	nop
 8000e98:	08000f93 	.word	0x08000f93
 8000e9c:	08000ed1 	.word	0x08000ed1
 8000ea0:	08000f83 	.word	0x08000f83
 8000ea4:	08001029 	.word	0x08001029
 8000ea8:	08001029 	.word	0x08001029
 8000eac:	08001029 	.word	0x08001029
 8000eb0:	08001029 	.word	0x08001029
 8000eb4:	08001029 	.word	0x08001029
 8000eb8:	08001029 	.word	0x08001029
 8000ebc:	08001029 	.word	0x08001029
 8000ec0:	08001029 	.word	0x08001029
 8000ec4:	08000fa5 	.word	0x08000fa5
 8000ec8:	08000fc9 	.word	0x08000fc9
 8000ecc:	08000fed 	.word	0x08000fed
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2049      	movs	r0, #73	; 0x49
 8000ed4:	f7ff fd4e 	bl	8000974 <SD_SendCmd>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 80a8 	bne.w	8001030 <SD_disk_ioctl+0x23c>
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fcba 	bl	8000860 <SD_RxDataBlock>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 809e 	beq.w	8001030 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000ef4:	7b3b      	ldrb	r3, [r7, #12]
 8000ef6:	099b      	lsrs	r3, r3, #6
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d10e      	bne.n	8000f1c <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000efe:	7d7b      	ldrb	r3, [r7, #21]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	7d3b      	ldrb	r3, [r7, #20]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	3301      	adds	r3, #1
 8000f10:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000f12:	8bfb      	ldrh	r3, [r7, #30]
 8000f14:	029a      	lsls	r2, r3, #10
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e02e      	b.n	8000f7a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000f1c:	7c7b      	ldrb	r3, [r7, #17]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	7dbb      	ldrb	r3, [r7, #22]
 8000f26:	09db      	lsrs	r3, r3, #7
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	7d7b      	ldrb	r3, [r7, #21]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f003 0306 	and.w	r3, r3, #6
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	3302      	adds	r3, #2
 8000f40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000f44:	7d3b      	ldrb	r3, [r7, #20]
 8000f46:	099b      	lsrs	r3, r3, #6
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	7cfb      	ldrb	r3, [r7, #19]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	4413      	add	r3, r2
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	7cbb      	ldrb	r3, [r7, #18]
 8000f5a:	029b      	lsls	r3, r3, #10
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	3301      	adds	r3, #1
 8000f6a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000f6c:	8bfa      	ldrh	r2, [r7, #30]
 8000f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f72:	3b09      	subs	r3, #9
 8000f74:	409a      	lsls	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000f80:	e056      	b.n	8001030 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f88:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f90:	e055      	b.n	800103e <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000f92:	f7ff fbe5 	bl	8000760 <SD_ReadyWait>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2bff      	cmp	r3, #255	; 0xff
 8000f9a:	d14b      	bne.n	8001034 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000fa2:	e047      	b.n	8001034 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2049      	movs	r0, #73	; 0x49
 8000fa8:	f7ff fce4 	bl	8000974 <SD_SendCmd>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d142      	bne.n	8001038 <SD_disk_ioctl+0x244>
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	6a38      	ldr	r0, [r7, #32]
 8000fb6:	f7ff fc53 	bl	8000860 <SD_RxDataBlock>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d03b      	beq.n	8001038 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000fc6:	e037      	b.n	8001038 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000fc8:	2100      	movs	r1, #0
 8000fca:	204a      	movs	r0, #74	; 0x4a
 8000fcc:	f7ff fcd2 	bl	8000974 <SD_SendCmd>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d132      	bne.n	800103c <SD_disk_ioctl+0x248>
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	6a38      	ldr	r0, [r7, #32]
 8000fda:	f7ff fc41 	bl	8000860 <SD_RxDataBlock>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d02b      	beq.n	800103c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000fea:	e027      	b.n	800103c <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000fec:	2100      	movs	r1, #0
 8000fee:	207a      	movs	r0, #122	; 0x7a
 8000ff0:	f7ff fcc0 	bl	8000974 <SD_SendCmd>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d116      	bne.n	8001028 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001000:	e00b      	b.n	800101a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001002:	6a3c      	ldr	r4, [r7, #32]
 8001004:	1c63      	adds	r3, r4, #1
 8001006:	623b      	str	r3, [r7, #32]
 8001008:	f7ff fb7e 	bl	8000708 <SPI_RxByte>
 800100c:	4603      	mov	r3, r0
 800100e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001014:	3301      	adds	r3, #1
 8001016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800101a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800101e:	2b03      	cmp	r3, #3
 8001020:	d9ef      	bls.n	8001002 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001028:	2304      	movs	r3, #4
 800102a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800102e:	e006      	b.n	800103e <SD_disk_ioctl+0x24a>
      break;
 8001030:	bf00      	nop
 8001032:	e004      	b.n	800103e <SD_disk_ioctl+0x24a>
      break;
 8001034:	bf00      	nop
 8001036:	e002      	b.n	800103e <SD_disk_ioctl+0x24a>
      break;
 8001038:	bf00      	nop
 800103a:	e000      	b.n	800103e <SD_disk_ioctl+0x24a>
      break;
 800103c:	bf00      	nop
    }

    DESELECT();
 800103e:	f7ff fb3d 	bl	80006bc <DESELECT>
    SPI_RxByte();
 8001042:	f7ff fb61 	bl	8000708 <SPI_RxByte>
  }

  return res;
 8001046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800104a:	4618      	mov	r0, r3
 800104c:	372c      	adds	r7, #44	; 0x2c
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}
 8001052:	bf00      	nop
 8001054:	24000000 	.word	0x24000000

08001058 <UART_Printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART_Printf(const char* fmt, ...) {
 8001058:	b40f      	push	{r0, r1, r2, r3}
 800105a:	b580      	push	{r7, lr}
 800105c:	b0c2      	sub	sp, #264	; 0x108
 800105e:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8001060:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001068:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800106c:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 800106e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001076:	f107 0008 	add.w	r0, r7, #8
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	f009 f954 	bl	800a330 <vsniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f92f 	bl	80002f0 <strlen>
 8001092:	4603      	mov	r3, r0
 8001094:	b29a      	uxth	r2, r3
 8001096:	f107 0108 	add.w	r1, r7, #8
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <UART_Printf+0x5c>)
 80010a0:	f007 fe04 	bl	8008cac <HAL_UART_Transmit>
    va_end(args);
}
 80010a4:	bf00      	nop
 80010a6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80010aa:	46bd      	mov	sp, r7
 80010ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b0:	b004      	add	sp, #16
 80010b2:	4770      	bx	lr
 80010b4:	24000180 	.word	0x24000180

080010b8 <SDCard_init_scr>:

void SDCard_init_scr() {
 80010b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ba:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80010be:	af08      	add	r7, sp, #32
    int code;
    UART_Printf("Ready!\r\n");
 80010c0:	4884      	ldr	r0, [pc, #528]	; (80012d4 <SDCard_init_scr+0x21c>)
 80010c2:	f7ff ffc9 	bl	8001058 <UART_Printf>

    code = SDCARD_Init();
 80010c6:	f000 fd6f 	bl	8001ba8 <SDCARD_Init>
 80010ca:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
    if(code < 0) {
 80010ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	da05      	bge.n	80010e2 <SDCard_init_scr+0x2a>
        UART_Printf("SDCARD_Init() failed: code = %d\r\n", code);
 80010d6:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80010da:	487f      	ldr	r0, [pc, #508]	; (80012d8 <SDCard_init_scr+0x220>)
 80010dc:	f7ff ffbc 	bl	8001058 <UART_Printf>
        return;
 80010e0:	e0f3      	b.n	80012ca <SDCard_init_scr+0x212>
    }

    UART_Printf("SDCARD_Init() done!\r\n");
 80010e2:	487e      	ldr	r0, [pc, #504]	; (80012dc <SDCard_init_scr+0x224>)
 80010e4:	f7ff ffb8 	bl	8001058 <UART_Printf>

    uint32_t blocksNum;
    code = SDCARD_GetBlocksNumber(&blocksNum);
 80010e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fe47 	bl	8001d80 <SDCARD_GetBlocksNumber>
 80010f2:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
    if(code < 0) {
 80010f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	da05      	bge.n	800110a <SDCard_init_scr+0x52>
        UART_Printf("SDCARD_GetBlocksNumber() failed: code = %d\r\n", code);
 80010fe:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8001102:	4877      	ldr	r0, [pc, #476]	; (80012e0 <SDCard_init_scr+0x228>)
 8001104:	f7ff ffa8 	bl	8001058 <UART_Printf>
        return;
 8001108:	e0df      	b.n	80012ca <SDCard_init_scr+0x212>
    }

    UART_Printf("SDCARD_GetBlocksNumber() done! blocksNum = %u (or %u Mb)\r\n",
 800110a:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 800110e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001112:	4a74      	ldr	r2, [pc, #464]	; (80012e4 <SDCard_init_scr+0x22c>)
 8001114:	fba2 2303 	umull	r2, r3, r2, r3
 8001118:	09db      	lsrs	r3, r3, #7
 800111a:	461a      	mov	r2, r3
 800111c:	4872      	ldr	r0, [pc, #456]	; (80012e8 <SDCard_init_scr+0x230>)
 800111e:	f7ff ff9b 	bl	8001058 <UART_Printf>
        blocksNum, blocksNum/2000 /* same as * 512 / 1000 / 1000 */);

    uint32_t startBlockAddr = 0x00AAAA;
 8001122:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8001126:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    uint32_t blockAddr = startBlockAddr;
 800112a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800112e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    uint8_t block[512];
//    for(int i = 0; i < 500; i++){
//    	block[i] = i % 256;
//    }
    block[0] = 0xAA; block[1] = 0xBB; block[2] = 0xCC; block[3] = 0xDD; block[4] = 0xEE;
 8001132:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001136:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800113a:	22aa      	movs	r2, #170	; 0xaa
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001142:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001146:	22bb      	movs	r2, #187	; 0xbb
 8001148:	705a      	strb	r2, [r3, #1]
 800114a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800114e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001152:	22cc      	movs	r2, #204	; 0xcc
 8001154:	709a      	strb	r2, [r3, #2]
 8001156:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800115a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800115e:	22dd      	movs	r2, #221	; 0xdd
 8001160:	70da      	strb	r2, [r3, #3]
 8001162:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001166:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800116a:	22ee      	movs	r2, #238	; 0xee
 800116c:	711a      	strb	r2, [r3, #4]

    snprintf((char*)block, sizeof(block), "0x%08X", (int)blockAddr);
 800116e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001172:	f107 0008 	add.w	r0, r7, #8
 8001176:	4a5d      	ldr	r2, [pc, #372]	; (80012ec <SDCard_init_scr+0x234>)
 8001178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800117c:	f009 f858 	bl	800a230 <sniprintf>

    code = SDCARD_WriteSingleBlock(blockAddr, &block[0]);
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	4619      	mov	r1, r3
 8001186:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800118a:	f000 fecf 	bl	8001f2c <SDCARD_WriteSingleBlock>
 800118e:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
    if(code < 0) {
 8001192:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001196:	2b00      	cmp	r3, #0
 8001198:	da05      	bge.n	80011a6 <SDCard_init_scr+0xee>
        UART_Printf("SDCARD_WriteSingleBlock() failed: code = %d\r\n", code);
 800119a:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800119e:	4854      	ldr	r0, [pc, #336]	; (80012f0 <SDCard_init_scr+0x238>)
 80011a0:	f7ff ff5a 	bl	8001058 <UART_Printf>
        return;
 80011a4:	e091      	b.n	80012ca <SDCard_init_scr+0x212>
    }
    UART_Printf("SDCARD_WriteSingleBlock(0x%08X, ...) done!\r\n", blockAddr);
 80011a6:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80011aa:	4852      	ldr	r0, [pc, #328]	; (80012f4 <SDCard_init_scr+0x23c>)
 80011ac:	f7ff ff54 	bl	8001058 <UART_Printf>

    memset(block, 0, sizeof(block));
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f009 f830 	bl	800a220 <memset>

    code = SDCARD_ReadSingleBlock(blockAddr, block);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4619      	mov	r1, r3
 80011c6:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80011ca:	f000 fe49 	bl	8001e60 <SDCARD_ReadSingleBlock>
 80011ce:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
    if(code < 0) {
 80011d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	da05      	bge.n	80011e6 <SDCard_init_scr+0x12e>
        UART_Printf("SDCARD_ReadSingleBlock() failed: code = %d\r\n", code);
 80011da:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80011de:	4846      	ldr	r0, [pc, #280]	; (80012f8 <SDCard_init_scr+0x240>)
 80011e0:	f7ff ff3a 	bl	8001058 <UART_Printf>
        return;
 80011e4:	e071      	b.n	80012ca <SDCard_init_scr+0x212>
    }

    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80011e6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80011ea:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80011ee:	781b      	ldrb	r3, [r3, #0]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80011f0:	469c      	mov	ip, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80011f2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80011f6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80011fa:	785b      	ldrb	r3, [r3, #1]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80011fc:	469e      	mov	lr, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80011fe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001202:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001206:	789b      	ldrb	r3, [r3, #2]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8001208:	461a      	mov	r2, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800120a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800120e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001212:	78db      	ldrb	r3, [r3, #3]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8001214:	4619      	mov	r1, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8001216:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800121a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800121e:	791b      	ldrb	r3, [r3, #4]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8001220:	4618      	mov	r0, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8001222:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001226:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800122a:	795b      	ldrb	r3, [r3, #5]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800122c:	461c      	mov	r4, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800122e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001232:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001236:	799b      	ldrb	r3, [r3, #6]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8001238:	461d      	mov	r5, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800123a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800123e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001242:	79db      	ldrb	r3, [r3, #7]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8001244:	461e      	mov	r6, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8001246:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800124a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800124e:	7a1b      	ldrb	r3, [r3, #8]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8001250:	607b      	str	r3, [r7, #4]
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8001252:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001256:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800125a:	7a5b      	ldrb	r3, [r3, #9]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800125c:	9307      	str	r3, [sp, #28]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	9306      	str	r3, [sp, #24]
 8001262:	9605      	str	r6, [sp, #20]
 8001264:	9504      	str	r5, [sp, #16]
 8001266:	9403      	str	r4, [sp, #12]
 8001268:	9002      	str	r0, [sp, #8]
 800126a:	9101      	str	r1, [sp, #4]
 800126c:	9200      	str	r2, [sp, #0]
 800126e:	4673      	mov	r3, lr
 8001270:	4662      	mov	r2, ip
 8001272:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8001276:	4821      	ldr	r0, [pc, #132]	; (80012fc <SDCard_init_scr+0x244>)
 8001278:	f7ff feee 	bl	8001058 <UART_Printf>
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 800127c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001280:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001284:	781b      	ldrb	r3, [r3, #0]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 8001286:	4618      	mov	r0, r3
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 8001288:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800128c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001290:	785b      	ldrb	r3, [r3, #1]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 8001292:	461c      	mov	r4, r3
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 8001294:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001298:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800129c:	789b      	ldrb	r3, [r3, #2]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 800129e:	461a      	mov	r2, r3
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 80012a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80012a4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80012a8:	78db      	ldrb	r3, [r3, #3]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 80012aa:	4619      	mov	r1, r3
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 80012ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80012b0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80012b4:	7a9b      	ldrb	r3, [r3, #10]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	9101      	str	r1, [sp, #4]
 80012ba:	9200      	str	r2, [sp, #0]
 80012bc:	4623      	mov	r3, r4
 80012be:	4602      	mov	r2, r0
 80012c0:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80012c4:	480e      	ldr	r0, [pc, #56]	; (8001300 <SDCard_init_scr+0x248>)
 80012c6:	f7ff fec7 	bl	8001058 <UART_Printf>
//    if(code < 0) {
//        UART_Printf("SDCARD_ReadEnd() failed: code = %d\r\n", code);
//        return;
//    }
//    UART_Printf("SDCARD_ReadEnd() done!\r\n");
}
 80012ca:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	0800abe4 	.word	0x0800abe4
 80012d8:	0800abf0 	.word	0x0800abf0
 80012dc:	0800ac14 	.word	0x0800ac14
 80012e0:	0800ac2c 	.word	0x0800ac2c
 80012e4:	10624dd3 	.word	0x10624dd3
 80012e8:	0800ac5c 	.word	0x0800ac5c
 80012ec:	0800ac98 	.word	0x0800ac98
 80012f0:	0800aca0 	.word	0x0800aca0
 80012f4:	0800acd0 	.word	0x0800acd0
 80012f8:	0800ad00 	.word	0x0800ad00
 80012fc:	0800ad30 	.word	0x0800ad30
 8001300:	0800ad80 	.word	0x0800ad80

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b09c      	sub	sp, #112	; 0x70
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130a:	f001 f97d 	bl	8002608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130e:	f000 f867 	bl	80013e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001312:	f000 fa5b 	bl	80017cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001316:	f000 f9a7 	bl	8001668 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800131a:	f000 f9f1 	bl	8001700 <MX_USB_OTG_HS_USB_Init>
  MX_DMA_Init();
 800131e:	f000 f9f7 	bl	8001710 <MX_DMA_Init>
  MX_SPI1_Init();
 8001322:	f000 f8d3 	bl	80014cc <MX_SPI1_Init>
  MX_TIM3_Init();
 8001326:	f000 f927 	bl	8001578 <MX_TIM3_Init>
  MX_FATFS_Init();
 800132a:	f008 fe79 	bl	800a020 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  //SDMMC_Ex1();
  char temp[]="--------------------H7A3_SDCard----------------------"
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <main+0xbc>)
 8001330:	463b      	mov	r3, r7
 8001332:	4611      	mov	r1, r2
 8001334:	226e      	movs	r2, #110	; 0x6e
 8001336:	4618      	mov	r0, r3
 8001338:	f008 ff64 	bl	800a204 <memcpy>
		  "\r\n Welcome to UART Port 115200 8 bit/stop1 none parity\r\n";
  HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp),30); // strlen = length of str -> config length of data
 800133c:	463b      	mov	r3, r7
 800133e:	4618      	mov	r0, r3
 8001340:	f7fe ffd6 	bl	80002f0 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	4639      	mov	r1, r7
 800134a:	231e      	movs	r3, #30
 800134c:	481d      	ldr	r0, [pc, #116]	; (80013c4 <main+0xc0>)
 800134e:	f007 fcad 	bl	8008cac <HAL_UART_Transmit>


  //// PWM Test
  HAL_TIM_Base_Start(&htim3);
 8001352:	481d      	ldr	r0, [pc, #116]	; (80013c8 <main+0xc4>)
 8001354:	f006 fbac 	bl	8007ab0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001358:	2108      	movs	r1, #8
 800135a:	481b      	ldr	r0, [pc, #108]	; (80013c8 <main+0xc4>)
 800135c:	f006 fc7a 	bl	8007c54 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - timestamp_one >= 1000){
 8001360:	f001 f9d8 	bl	8002714 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <main+0xc8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001370:	d3f6      	bcc.n	8001360 <main+0x5c>
		  timestamp_one = HAL_GetTick();
 8001372:	f001 f9cf 	bl	8002714 <HAL_GetTick>
 8001376:	4603      	mov	r3, r0
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <main+0xc8>)
 800137a:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800137c:	2102      	movs	r1, #2
 800137e:	4814      	ldr	r0, [pc, #80]	; (80013d0 <main+0xcc>)
 8001380:	f003 f9db 	bl	800473a <HAL_GPIO_TogglePin>

		  sprintf(txtUARTBF,"timestamp =  %d\r\n", (int)timestamp_one);
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <main+0xc8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4912      	ldr	r1, [pc, #72]	; (80013d4 <main+0xd0>)
 800138c:	4812      	ldr	r0, [pc, #72]	; (80013d8 <main+0xd4>)
 800138e:	f008 ff83 	bl	800a298 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8001392:	4811      	ldr	r0, [pc, #68]	; (80013d8 <main+0xd4>)
 8001394:	f7fe ffac 	bl	80002f0 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	230a      	movs	r3, #10
 800139e:	490e      	ldr	r1, [pc, #56]	; (80013d8 <main+0xd4>)
 80013a0:	4808      	ldr	r0, [pc, #32]	; (80013c4 <main+0xc0>)
 80013a2:	f007 fc83 	bl	8008cac <HAL_UART_Transmit>

		  PWMOut1 = PWMOut1 + 10 % 5000;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <main+0xd8>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	330a      	adds	r3, #10
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <main+0xd8>)
 80013b0:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, PWMOut1); // dutycycle
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <main+0xd8>)
 80013b4:	881a      	ldrh	r2, [r3, #0]
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <main+0xc4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c
	  if(HAL_GetTick() - timestamp_one >= 1000){
 80013bc:	e7d0      	b.n	8001360 <main+0x5c>
 80013be:	bf00      	nop
 80013c0:	0800addc 	.word	0x0800addc
 80013c4:	24000180 	.word	0x24000180
 80013c8:	24000134 	.word	0x24000134
 80013cc:	24000378 	.word	0x24000378
 80013d0:	58021000 	.word	0x58021000
 80013d4:	0800adc8 	.word	0x0800adc8
 80013d8:	2400037c 	.word	0x2400037c
 80013dc:	24000002 	.word	0x24000002

080013e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b09c      	sub	sp, #112	; 0x70
 80013e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	224c      	movs	r2, #76	; 0x4c
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f008 ff16 	bl	800a220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2220      	movs	r2, #32
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f008 ff10 	bl	800a220 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <SystemClock_Config+0xe4>)
 8001402:	f04f 32ff 	mov.w	r2, #4294967295
 8001406:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800140a:	2004      	movs	r0, #4
 800140c:	f003 f9ca 	bl	80047a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <SystemClock_Config+0xe8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <SystemClock_Config+0xe8>)
 800141a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <SystemClock_Config+0xe8>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800142c:	bf00      	nop
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <SystemClock_Config+0xe8>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800143a:	d1f8      	bne.n	800142e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800143c:	2321      	movs	r3, #33	; 0x21
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001446:	2301      	movs	r3, #1
 8001448:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144a:	2302      	movs	r3, #2
 800144c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800144e:	2302      	movs	r3, #2
 8001450:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001452:	2301      	movs	r3, #1
 8001454:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001456:	2319      	movs	r3, #25
 8001458:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800145a:	2302      	movs	r3, #2
 800145c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800145e:	2304      	movs	r3, #4
 8001460:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001462:	2302      	movs	r3, #2
 8001464:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001466:	230c      	movs	r3, #12
 8001468:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800146a:	2300      	movs	r3, #0
 800146c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	4618      	mov	r0, r3
 8001478:	f003 f9ee 	bl	8004858 <HAL_RCC_OscConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001482:	f000 fafc 	bl	8001a7e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001486:	233f      	movs	r3, #63	; 0x3f
 8001488:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148a:	2303      	movs	r3, #3
 800148c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2102      	movs	r1, #2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 fdd8 	bl	8005060 <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0xda>
  {
    Error_Handler();
 80014b6:	f000 fae2 	bl	8001a7e <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3770      	adds	r7, #112	; 0x70
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	58024400 	.word	0x58024400
 80014c8:	58024800 	.word	0x58024800

080014cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_SPI1_Init+0xa4>)
 80014d2:	4a28      	ldr	r2, [pc, #160]	; (8001574 <MX_SPI1_Init+0xa8>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_SPI1_Init+0xa4>)
 80014d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_SPI1_Init+0xa4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_SPI1_Init+0xa4>)
 80014e6:	2207      	movs	r2, #7
 80014e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_SPI1_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_SPI1_Init+0xa4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <MX_SPI1_Init+0xa4>)
 80014f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_SPI1_Init+0xa4>)
 8001500:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001504:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_SPI1_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_SPI1_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_SPI1_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_SPI1_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_SPI1_Init+0xa4>)
 8001520:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_SPI1_Init+0xa4>)
 8001528:	2200      	movs	r2, #0
 800152a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_SPI1_Init+0xa4>)
 800152e:	2200      	movs	r2, #0
 8001530:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_SPI1_Init+0xa4>)
 8001534:	2200      	movs	r2, #0
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_SPI1_Init+0xa4>)
 800153a:	2200      	movs	r2, #0
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_SPI1_Init+0xa4>)
 8001540:	2200      	movs	r2, #0
 8001542:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_SPI1_Init+0xa4>)
 8001546:	2200      	movs	r2, #0
 8001548:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_SPI1_Init+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <MX_SPI1_Init+0xa4>)
 8001552:	2200      	movs	r2, #0
 8001554:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_SPI1_Init+0xa4>)
 8001558:	2200      	movs	r2, #0
 800155a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_SPI1_Init+0xa4>)
 800155e:	f005 fc39 	bl	8006dd4 <HAL_SPI_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001568:	f000 fa89 	bl	8001a7e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	240000ac 	.word	0x240000ac
 8001574:	40013000 	.word	0x40013000

08001578 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	; 0x38
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <MX_TIM3_Init+0xe8>)
 80015ac:	4a2d      	ldr	r2, [pc, #180]	; (8001664 <MX_TIM3_Init+0xec>)
 80015ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <MX_TIM3_Init+0xe8>)
 80015b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80015b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <MX_TIM3_Init+0xe8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <MX_TIM3_Init+0xe8>)
 80015c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80015c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <MX_TIM3_Init+0xe8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <MX_TIM3_Init+0xe8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015d2:	4823      	ldr	r0, [pc, #140]	; (8001660 <MX_TIM3_Init+0xe8>)
 80015d4:	f006 fa15 	bl	8007a02 <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80015de:	f000 fa4e 	bl	8001a7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ec:	4619      	mov	r1, r3
 80015ee:	481c      	ldr	r0, [pc, #112]	; (8001660 <MX_TIM3_Init+0xe8>)
 80015f0:	f006 fd52 	bl	8008098 <HAL_TIM_ConfigClockSource>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80015fa:	f000 fa40 	bl	8001a7e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015fe:	4818      	ldr	r0, [pc, #96]	; (8001660 <MX_TIM3_Init+0xe8>)
 8001600:	f006 fac6 	bl	8007b90 <HAL_TIM_PWM_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800160a:	f000 fa38 	bl	8001a7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4810      	ldr	r0, [pc, #64]	; (8001660 <MX_TIM3_Init+0xe8>)
 800161e:	f007 fa67 	bl	8008af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001628:	f000 fa29 	bl	8001a7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162c:	2360      	movs	r3, #96	; 0x60
 800162e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	2208      	movs	r2, #8
 8001640:	4619      	mov	r1, r3
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <MX_TIM3_Init+0xe8>)
 8001644:	f006 fc14 	bl	8007e70 <HAL_TIM_PWM_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800164e:	f000 fa16 	bl	8001a7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <MX_TIM3_Init+0xe8>)
 8001654:	f000 fd80 	bl	8002158 <HAL_TIM_MspPostInit>

}
 8001658:	bf00      	nop
 800165a:	3738      	adds	r7, #56	; 0x38
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	24000134 	.word	0x24000134
 8001664:	40000400 	.word	0x40000400

08001668 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <MX_USART3_UART_Init+0x94>)
 8001670:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 8001674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001678:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016b0:	4811      	ldr	r0, [pc, #68]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 80016b2:	f007 faab 	bl	8008c0c <HAL_UART_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016bc:	f000 f9df 	bl	8001a7e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c0:	2100      	movs	r1, #0
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 80016c4:	f008 fbe2 	bl	8009e8c <HAL_UARTEx_SetTxFifoThreshold>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016ce:	f000 f9d6 	bl	8001a7e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d2:	2100      	movs	r1, #0
 80016d4:	4808      	ldr	r0, [pc, #32]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 80016d6:	f008 fc17 	bl	8009f08 <HAL_UARTEx_SetRxFifoThreshold>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016e0:	f000 f9cd 	bl	8001a7e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_USART3_UART_Init+0x90>)
 80016e6:	f008 fb98 	bl	8009e1a <HAL_UARTEx_DisableFifoMode>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016f0:	f000 f9c5 	bl	8001a7e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	24000180 	.word	0x24000180
 80016fc:	40004800 	.word	0x40004800

08001700 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001716:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <MX_DMA_Init+0xb0>)
 8001718:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800171c:	4a28      	ldr	r2, [pc, #160]	; (80017c0 <MX_DMA_Init+0xb0>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <MX_DMA_Init+0xb0>)
 8001728:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 8001734:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <MX_DMA_Init+0xb4>)
 8001736:	4a24      	ldr	r2, [pc, #144]	; (80017c8 <MX_DMA_Init+0xb8>)
 8001738:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 800173a:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <MX_DMA_Init+0xb4>)
 800173c:	2201      	movs	r2, #1
 800173e:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <MX_DMA_Init+0xb4>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_ENABLE;
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <MX_DMA_Init+0xb4>)
 8001748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174c:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <MX_DMA_Init+0xb4>)
 8001750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001754:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_DMA_Init+0xb4>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <MX_DMA_Init+0xb4>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_DMA_Init+0xb4>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_DMA_Init+0xb4>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <MX_DMA_Init+0xb4>)
 8001770:	2204      	movs	r2, #4
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_dma_generator0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_DMA_Init+0xb4>)
 8001776:	2203      	movs	r2, #3
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_dma_generator0.Init.MemBurst = DMA_MBURST_SINGLE;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_DMA_Init+0xb4>)
 800177c:	2200      	movs	r2, #0
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_dma_generator0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_DMA_Init+0xb4>)
 8001782:	2200      	movs	r2, #0
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8001786:	480f      	ldr	r0, [pc, #60]	; (80017c4 <MX_DMA_Init+0xb4>)
 8001788:	f001 f8e0 	bl	800294c <HAL_DMA_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_DMA_Init+0x86>
  {
    Error_Handler( );
 8001792:	f000 f974 	bl	8001a7e <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	200c      	movs	r0, #12
 800179c:	f001 f8a1 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017a0:	200c      	movs	r0, #12
 80017a2:	f001 f8b8 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	200d      	movs	r0, #13
 80017ac:	f001 f899 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80017b0:	200d      	movs	r0, #13
 80017b2:	f001 f8b0 	bl	8002916 <HAL_NVIC_EnableIRQ>

}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	58024400 	.word	0x58024400
 80017c4:	24000300 	.word	0x24000300
 80017c8:	40020010 	.word	0x40020010

080017cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	4b97      	ldr	r3, [pc, #604]	; (8001a40 <MX_GPIO_Init+0x274>)
 80017e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017e8:	4a95      	ldr	r2, [pc, #596]	; (8001a40 <MX_GPIO_Init+0x274>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017f2:	4b93      	ldr	r3, [pc, #588]	; (8001a40 <MX_GPIO_Init+0x274>)
 80017f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	623b      	str	r3, [r7, #32]
 80017fe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001800:	4b8f      	ldr	r3, [pc, #572]	; (8001a40 <MX_GPIO_Init+0x274>)
 8001802:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001806:	4a8e      	ldr	r2, [pc, #568]	; (8001a40 <MX_GPIO_Init+0x274>)
 8001808:	f043 0320 	orr.w	r3, r3, #32
 800180c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001810:	4b8b      	ldr	r3, [pc, #556]	; (8001a40 <MX_GPIO_Init+0x274>)
 8001812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181e:	4b88      	ldr	r3, [pc, #544]	; (8001a40 <MX_GPIO_Init+0x274>)
 8001820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001824:	4a86      	ldr	r2, [pc, #536]	; (8001a40 <MX_GPIO_Init+0x274>)
 8001826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800182e:	4b84      	ldr	r3, [pc, #528]	; (8001a40 <MX_GPIO_Init+0x274>)
 8001830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4b80      	ldr	r3, [pc, #512]	; (8001a40 <MX_GPIO_Init+0x274>)
 800183e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001842:	4a7f      	ldr	r2, [pc, #508]	; (8001a40 <MX_GPIO_Init+0x274>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800184c:	4b7c      	ldr	r3, [pc, #496]	; (8001a40 <MX_GPIO_Init+0x274>)
 800184e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	4b79      	ldr	r3, [pc, #484]	; (8001a40 <MX_GPIO_Init+0x274>)
 800185c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001860:	4a77      	ldr	r2, [pc, #476]	; (8001a40 <MX_GPIO_Init+0x274>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800186a:	4b75      	ldr	r3, [pc, #468]	; (8001a40 <MX_GPIO_Init+0x274>)
 800186c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001878:	4b71      	ldr	r3, [pc, #452]	; (8001a40 <MX_GPIO_Init+0x274>)
 800187a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800187e:	4a70      	ldr	r2, [pc, #448]	; (8001a40 <MX_GPIO_Init+0x274>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001888:	4b6d      	ldr	r3, [pc, #436]	; (8001a40 <MX_GPIO_Init+0x274>)
 800188a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001896:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <MX_GPIO_Init+0x274>)
 8001898:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800189c:	4a68      	ldr	r2, [pc, #416]	; (8001a40 <MX_GPIO_Init+0x274>)
 800189e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <MX_GPIO_Init+0x274>)
 80018a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018b4:	4b62      	ldr	r3, [pc, #392]	; (8001a40 <MX_GPIO_Init+0x274>)
 80018b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018ba:	4a61      	ldr	r2, [pc, #388]	; (8001a40 <MX_GPIO_Init+0x274>)
 80018bc:	f043 0310 	orr.w	r3, r3, #16
 80018c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018c4:	4b5e      	ldr	r3, [pc, #376]	; (8001a40 <MX_GPIO_Init+0x274>)
 80018c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d8:	485a      	ldr	r0, [pc, #360]	; (8001a44 <MX_GPIO_Init+0x278>)
 80018da:	f002 ff15 	bl	8004708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e4:	4858      	ldr	r0, [pc, #352]	; (8001a48 <MX_GPIO_Init+0x27c>)
 80018e6:	f002 ff0f 	bl	8004708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SDCard_CS_GPIO_Port, SPI1_SDCard_CS_Pin, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018f0:	4856      	ldr	r0, [pc, #344]	; (8001a4c <MX_GPIO_Init+0x280>)
 80018f2:	f002 ff09 	bl	8004708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2102      	movs	r1, #2
 80018fa:	4855      	ldr	r0, [pc, #340]	; (8001a50 <MX_GPIO_Init+0x284>)
 80018fc:	f002 ff04 	bl	8004708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001906:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001914:	4619      	mov	r1, r3
 8001916:	484f      	ldr	r0, [pc, #316]	; (8001a54 <MX_GPIO_Init+0x288>)
 8001918:	f002 fd46 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800191c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001932:	4619      	mov	r1, r3
 8001934:	4843      	ldr	r0, [pc, #268]	; (8001a44 <MX_GPIO_Init+0x278>)
 8001936:	f002 fd37 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800193a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	2301      	movs	r3, #1
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001950:	4619      	mov	r1, r3
 8001952:	483d      	ldr	r0, [pc, #244]	; (8001a48 <MX_GPIO_Init+0x27c>)
 8001954:	f002 fd28 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SDCard_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_SDCard_CS_Pin;
 8001958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_SDCard_CS_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	4836      	ldr	r0, [pc, #216]	; (8001a4c <MX_GPIO_Init+0x280>)
 8001972:	f002 fd19 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	4833      	ldr	r0, [pc, #204]	; (8001a58 <MX_GPIO_Init+0x28c>)
 800198c:	f002 fd0c 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019a2:	230c      	movs	r3, #12
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	4829      	ldr	r0, [pc, #164]	; (8001a54 <MX_GPIO_Init+0x288>)
 80019ae:	f002 fcfb 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80019b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4825      	ldr	r0, [pc, #148]	; (8001a5c <MX_GPIO_Init+0x290>)
 80019c8:	f002 fcee 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80019cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80019de:	230a      	movs	r3, #10
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	481c      	ldr	r0, [pc, #112]	; (8001a5c <MX_GPIO_Init+0x290>)
 80019ea:	f002 fcdd 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80019ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	4815      	ldr	r0, [pc, #84]	; (8001a5c <MX_GPIO_Init+0x290>)
 8001a08:	f002 fcce 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	480b      	ldr	r0, [pc, #44]	; (8001a50 <MX_GPIO_Init+0x284>)
 8001a24:	f002 fcc0 	bl	80043a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2028      	movs	r0, #40	; 0x28
 8001a2e:	f000 ff58 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a32:	2028      	movs	r0, #40	; 0x28
 8001a34:	f000 ff6f 	bl	8002916 <HAL_NVIC_EnableIRQ>

}
 8001a38:	bf00      	nop
 8001a3a:	3738      	adds	r7, #56	; 0x38
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	58024400 	.word	0x58024400
 8001a44:	58021400 	.word	0x58021400
 8001a48:	58020400 	.word	0x58020400
 8001a4c:	58020c00 	.word	0x58020c00
 8001a50:	58021000 	.word	0x58021000
 8001a54:	58020800 	.word	0x58020800
 8001a58:	58021800 	.word	0x58021800
 8001a5c:	58020000 	.word	0x58020000

08001a60 <HAL_GPIO_EXTI_Callback>:
	    f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
}
#endif


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a70:	d101      	bne.n	8001a76 <HAL_GPIO_EXTI_Callback+0x16>
			//timerefresh_wwdg = 1000;
			SDCard_init_scr();
 8001a72:	f7ff fb21 	bl	80010b8 <SDCard_init_scr>
		}
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a82:	b672      	cpsid	i
}
 8001a84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <Error_Handler+0x8>

08001a88 <SDCARD_Select>:
/* vim: set ai et ts=4 sw=4: */

#include "sdcard.h"

static void SDCARD_Select() {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a92:	4802      	ldr	r0, [pc, #8]	; (8001a9c <SDCARD_Select+0x14>)
 8001a94:	f002 fe38 	bl	8004708 <HAL_GPIO_WritePin>
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	58020c00 	.word	0x58020c00

08001aa0 <SDCARD_Unselect>:

void SDCARD_Unselect() {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aaa:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <SDCARD_Unselect+0x14>)
 8001aac:	f002 fe2c 	bl	8004708 <HAL_GPIO_WritePin>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	58020c00 	.word	0x58020c00

08001ab8 <SDCARD_ReadR1>:
     ||`----- 5th bit (c): error in the sequence of erase commands
     |`------ 6th bit (b): misaligned addres used in command
     `------- 7th bit (a): command argument outside allowed range
             (8th bit is always zero)
*/
static uint8_t SDCARD_ReadR1() {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af02      	add	r7, sp, #8
    uint8_t r1;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8001abe:	23ff      	movs	r3, #255	; 0xff
 8001ac0:	71bb      	strb	r3, [r7, #6]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8001ac2:	1dfa      	adds	r2, r7, #7
 8001ac4:	1db9      	adds	r1, r7, #6
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2301      	movs	r3, #1
 8001ace:	4807      	ldr	r0, [pc, #28]	; (8001aec <SDCARD_ReadR1+0x34>)
 8001ad0:	f005 fc78 	bl	80073c4 <HAL_SPI_TransmitReceive>
        if((r1 & 0x80) == 0) // 8th bit alwyas zero, r1 recevied
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da00      	bge.n	8001ade <SDCARD_ReadR1+0x26>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8001adc:	e7f1      	b.n	8001ac2 <SDCARD_ReadR1+0xa>
            break;
 8001ade:	bf00      	nop
    }
    return r1;
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	240000ac 	.word	0x240000ac

08001af0 <SDCARD_WaitDataToken>:
#define DATA_TOKEN_CMD17 0xFE
#define DATA_TOKEN_CMD18 0xFE
#define DATA_TOKEN_CMD24 0xFE
#define DATA_TOKEN_CMD25 0xFC

static int SDCARD_WaitDataToken(uint8_t token) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
    uint8_t fb;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8001afa:	23ff      	movs	r3, #255	; 0xff
 8001afc:	73bb      	strb	r3, [r7, #14]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &fb, sizeof(fb), HAL_MAX_DELAY);
 8001afe:	f107 020f 	add.w	r2, r7, #15
 8001b02:	f107 010e 	add.w	r1, r7, #14
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	4809      	ldr	r0, [pc, #36]	; (8001b34 <SDCARD_WaitDataToken+0x44>)
 8001b10:	f005 fc58 	bl	80073c4 <HAL_SPI_TransmitReceive>
        if(fb == token)
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d005      	beq.n	8001b28 <SDCARD_WaitDataToken+0x38>
            break;

        if(fb != 0xFF)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2bff      	cmp	r3, #255	; 0xff
 8001b20:	d0ed      	beq.n	8001afe <SDCARD_WaitDataToken+0xe>
            return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e001      	b.n	8001b2c <SDCARD_WaitDataToken+0x3c>
            break;
 8001b28:	bf00      	nop
    }
    return 0;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	240000ac 	.word	0x240000ac

08001b38 <SDCARD_ReadBytes>:

static int SDCARD_ReadBytes(uint8_t* buff, size_t buff_size) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8001b42:	23ff      	movs	r3, #255	; 0xff
 8001b44:	73fb      	strb	r3, [r7, #15]
    while(buff_size > 0) {
 8001b46:	e00f      	b.n	8001b68 <SDCARD_ReadBytes+0x30>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 8001b48:	f107 010f 	add.w	r1, r7, #15
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2301      	movs	r3, #1
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4808      	ldr	r0, [pc, #32]	; (8001b78 <SDCARD_ReadBytes+0x40>)
 8001b58:	f005 fc34 	bl	80073c4 <HAL_SPI_TransmitReceive>
        buff++;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	607b      	str	r3, [r7, #4]
        buff_size--;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ec      	bne.n	8001b48 <SDCARD_ReadBytes+0x10>
    }

    return 0;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	240000ac 	.word	0x240000ac

08001b7c <SDCARD_WaitNotBusy>:

static int SDCARD_WaitNotBusy() {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
    uint8_t busy;
    do {
        if(SDCARD_ReadBytes(&busy, sizeof(busy)) < 0) {
 8001b82:	1dfb      	adds	r3, r7, #7
 8001b84:	2101      	movs	r1, #1
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ffd6 	bl	8001b38 <SDCARD_ReadBytes>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	da02      	bge.n	8001b98 <SDCARD_WaitNotBusy+0x1c>
            return -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e003      	b.n	8001ba0 <SDCARD_WaitNotBusy+0x24>
        }
    } while(busy != 0xFF);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	2bff      	cmp	r3, #255	; 0xff
 8001b9c:	d1f1      	bne.n	8001b82 <SDCARD_WaitNotBusy+0x6>

    return 0;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <SDCARD_Init>:
 
int SDCARD_Init() {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0

    Set DI and CS high and apply 74 or more clock pulses to SCLK. Without this
    step under certain circumstances SD-card will not work. For instance, when
    multiple SPI devices are sharing the same bus (i.e. MISO, MOSI, CS).
    */
    SDCARD_Unselect();
 8001bae:	f7ff ff77 	bl	8001aa0 <SDCARD_Unselect>

    uint8_t high = 0xFF;
 8001bb2:	23ff      	movs	r3, #255	; 0xff
 8001bb4:	72bb      	strb	r3, [r7, #10]
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	e00a      	b.n	8001bd2 <SDCARD_Init+0x2a>
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, &high, sizeof(high), HAL_MAX_DELAY);
 8001bbc:	f107 010a 	add.w	r1, r7, #10
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4868      	ldr	r0, [pc, #416]	; (8001d68 <SDCARD_Init+0x1c0>)
 8001bc8:	f005 fa0a 	bl	8006fe0 <HAL_SPI_Transmit>
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b09      	cmp	r3, #9
 8001bd6:	ddf1      	ble.n	8001bbc <SDCARD_Init+0x14>
    }

    SDCARD_Select();
 8001bd8:	f7ff ff56 	bl	8001a88 <SDCARD_Select>
    /*
    Step 2.
    
    Send CMD0 (GO_IDLE_STATE): Reset the SD card.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001bdc:	f7ff ffce 	bl	8001b7c <SDCARD_WaitNotBusy>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da04      	bge.n	8001bf0 <SDCARD_Init+0x48>
        SDCARD_Unselect();
 8001be6:	f7ff ff5b 	bl	8001aa0 <SDCARD_Unselect>
        return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e0b6      	b.n	8001d5e <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x00 /* CMD0 */, 0x00, 0x00, 0x00, 0x00 /* ARG = 0 */, (0x4A << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	2206      	movs	r2, #6
 8001bf6:	495d      	ldr	r1, [pc, #372]	; (8001d6c <SDCARD_Init+0x1c4>)
 8001bf8:	485b      	ldr	r0, [pc, #364]	; (8001d68 <SDCARD_Init+0x1c0>)
 8001bfa:	f005 f9f1 	bl	8006fe0 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8001bfe:	f7ff ff5b 	bl	8001ab8 <SDCARD_ReadR1>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d004      	beq.n	8001c12 <SDCARD_Init+0x6a>
        SDCARD_Unselect();
 8001c08:	f7ff ff4a 	bl	8001aa0 <SDCARD_Unselect>
        return -1;
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c10:	e0a5      	b.n	8001d5e <SDCARD_Init+0x1b6>
    MMC version 3. If accepted, R7 response (R1(0x01) + 32-bit return value)
    will be returned. The lower 12 bits in the return value 0x1AA means that
    the card is SDC version 2 and it can work at voltage range of 2.7 to 3.6
    volts. If not the case, the card should be rejected.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001c12:	f7ff ffb3 	bl	8001b7c <SDCARD_WaitNotBusy>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	da04      	bge.n	8001c26 <SDCARD_Init+0x7e>
        SDCARD_Unselect();
 8001c1c:	f7ff ff40 	bl	8001aa0 <SDCARD_Unselect>
        return -1;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
 8001c24:	e09b      	b.n	8001d5e <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x08 /* CMD8 */, 0x00, 0x00, 0x01, 0xAA /* ARG */, (0x43 << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	2206      	movs	r2, #6
 8001c2c:	4950      	ldr	r1, [pc, #320]	; (8001d70 <SDCARD_Init+0x1c8>)
 8001c2e:	484e      	ldr	r0, [pc, #312]	; (8001d68 <SDCARD_Init+0x1c0>)
 8001c30:	f005 f9d6 	bl	8006fe0 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8001c34:	f7ff ff40 	bl	8001ab8 <SDCARD_ReadR1>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d004      	beq.n	8001c48 <SDCARD_Init+0xa0>
        SDCARD_Unselect();
 8001c3e:	f7ff ff2f 	bl	8001aa0 <SDCARD_Unselect>
        return -2; // not an SDHC/SDXC card (i.e. SDSC, not supported)
 8001c42:	f06f 0301 	mvn.w	r3, #1
 8001c46:	e08a      	b.n	8001d5e <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff73 	bl	8001b38 <SDCARD_ReadBytes>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	da04      	bge.n	8001c62 <SDCARD_Init+0xba>
            SDCARD_Unselect();
 8001c58:	f7ff ff22 	bl	8001aa0 <SDCARD_Unselect>
            return -3;
 8001c5c:	f06f 0302 	mvn.w	r3, #2
 8001c60:	e07d      	b.n	8001d5e <SDCARD_Init+0x1b6>
        }

        if(((resp[2] & 0x01) != 1) || (resp[3] != 0xAA)) {
 8001c62:	79bb      	ldrb	r3, [r7, #6]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <SDCARD_Init+0xca>
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	2baa      	cmp	r3, #170	; 0xaa
 8001c70:	d004      	beq.n	8001c7c <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 8001c72:	f7ff ff15 	bl	8001aa0 <SDCARD_Unselect>
            return -4;
 8001c76:	f06f 0303 	mvn.w	r3, #3
 8001c7a:	e070      	b.n	8001d5e <SDCARD_Init+0x1b6>
    Step 4.

    And then initiate initialization with ACMD41 with HCS flag (bit 30).
    */
    for(;;) {
        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001c7c:	f7ff ff7e 	bl	8001b7c <SDCARD_WaitNotBusy>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	da04      	bge.n	8001c90 <SDCARD_Init+0xe8>
            SDCARD_Unselect();
 8001c86:	f7ff ff0b 	bl	8001aa0 <SDCARD_Unselect>
            return -1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	e066      	b.n	8001d5e <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x37 /* CMD55 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	2206      	movs	r2, #6
 8001c96:	4937      	ldr	r1, [pc, #220]	; (8001d74 <SDCARD_Init+0x1cc>)
 8001c98:	4833      	ldr	r0, [pc, #204]	; (8001d68 <SDCARD_Init+0x1c0>)
 8001c9a:	f005 f9a1 	bl	8006fe0 <HAL_SPI_Transmit>
        }

        if(SDCARD_ReadR1() != 0x01) {
 8001c9e:	f7ff ff0b 	bl	8001ab8 <SDCARD_ReadR1>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d004      	beq.n	8001cb2 <SDCARD_Init+0x10a>
            SDCARD_Unselect();
 8001ca8:	f7ff fefa 	bl	8001aa0 <SDCARD_Unselect>
            return -5;
 8001cac:	f06f 0304 	mvn.w	r3, #4
 8001cb0:	e055      	b.n	8001d5e <SDCARD_Init+0x1b6>
        }

        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001cb2:	f7ff ff63 	bl	8001b7c <SDCARD_WaitNotBusy>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da04      	bge.n	8001cc6 <SDCARD_Init+0x11e>
            SDCARD_Unselect();
 8001cbc:	f7ff fef0 	bl	8001aa0 <SDCARD_Unselect>
            return -1;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	e04b      	b.n	8001d5e <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x29 /* ACMD41 */, 0x40, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	2206      	movs	r2, #6
 8001ccc:	492a      	ldr	r1, [pc, #168]	; (8001d78 <SDCARD_Init+0x1d0>)
 8001cce:	4826      	ldr	r0, [pc, #152]	; (8001d68 <SDCARD_Init+0x1c0>)
 8001cd0:	f005 f986 	bl	8006fe0 <HAL_SPI_Transmit>
        }

        uint8_t r1 = SDCARD_ReadR1();
 8001cd4:	f7ff fef0 	bl	8001ab8 <SDCARD_ReadR1>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	72fb      	strb	r3, [r7, #11]
        if(r1 == 0x00) {
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d007      	beq.n	8001cf2 <SDCARD_Init+0x14a>
            break;
        }

        if(r1 != 0x01) {
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d0c9      	beq.n	8001c7c <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 8001ce8:	f7ff feda 	bl	8001aa0 <SDCARD_Unselect>
            return -6;
 8001cec:	f06f 0305 	mvn.w	r3, #5
 8001cf0:	e035      	b.n	8001d5e <SDCARD_Init+0x1b6>
            break;
 8001cf2:	bf00      	nop

    After the initialization completed, read OCR register with CMD58 and check
    CCS flag (bit 30). When it is set, the card is a high-capacity card known
    as SDHC/SDXC.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001cf4:	f7ff ff42 	bl	8001b7c <SDCARD_WaitNotBusy>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da04      	bge.n	8001d08 <SDCARD_Init+0x160>
        SDCARD_Unselect();
 8001cfe:	f7ff fecf 	bl	8001aa0 <SDCARD_Unselect>
        return -1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	e02a      	b.n	8001d5e <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x3A /* CMD58 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	2206      	movs	r2, #6
 8001d0e:	491b      	ldr	r1, [pc, #108]	; (8001d7c <SDCARD_Init+0x1d4>)
 8001d10:	4815      	ldr	r0, [pc, #84]	; (8001d68 <SDCARD_Init+0x1c0>)
 8001d12:	f005 f965 	bl	8006fe0 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 8001d16:	f7ff fecf 	bl	8001ab8 <SDCARD_ReadR1>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <SDCARD_Init+0x182>
        SDCARD_Unselect();
 8001d20:	f7ff febe 	bl	8001aa0 <SDCARD_Unselect>
        return -7;
 8001d24:	f06f 0306 	mvn.w	r3, #6
 8001d28:	e019      	b.n	8001d5e <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 8001d2a:	463b      	mov	r3, r7
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff02 	bl	8001b38 <SDCARD_ReadBytes>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da04      	bge.n	8001d44 <SDCARD_Init+0x19c>
            SDCARD_Unselect();
 8001d3a:	f7ff feb1 	bl	8001aa0 <SDCARD_Unselect>
            return -8;
 8001d3e:	f06f 0307 	mvn.w	r3, #7
 8001d42:	e00c      	b.n	8001d5e <SDCARD_Init+0x1b6>
        }

        if((resp[0] & 0xC0) != 0xC0) {
 8001d44:	783b      	ldrb	r3, [r7, #0]
 8001d46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8001d4c:	d004      	beq.n	8001d58 <SDCARD_Init+0x1b0>
            SDCARD_Unselect();
 8001d4e:	f7ff fea7 	bl	8001aa0 <SDCARD_Unselect>
            return -9;
 8001d52:	f06f 0308 	mvn.w	r3, #8
 8001d56:	e002      	b.n	8001d5e <SDCARD_Init+0x1b6>
        }
    }

    SDCARD_Unselect();
 8001d58:	f7ff fea2 	bl	8001aa0 <SDCARD_Unselect>
    return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	240000ac 	.word	0x240000ac
 8001d6c:	0800ae4c 	.word	0x0800ae4c
 8001d70:	0800ae54 	.word	0x0800ae54
 8001d74:	0800ae5c 	.word	0x0800ae5c
 8001d78:	0800ae64 	.word	0x0800ae64
 8001d7c:	0800ae6c 	.word	0x0800ae6c

08001d80 <SDCARD_GetBlocksNumber>:


int SDCARD_GetBlocksNumber(uint32_t* num) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
    uint8_t csd[16];
    uint8_t crc[2];

    SDCARD_Select();
 8001d88:	f7ff fe7e 	bl	8001a88 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001d8c:	f7ff fef6 	bl	8001b7c <SDCARD_WaitNotBusy>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da04      	bge.n	8001da0 <SDCARD_GetBlocksNumber+0x20>
        SDCARD_Unselect();
 8001d96:	f7ff fe83 	bl	8001aa0 <SDCARD_Unselect>
        return -1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e057      	b.n	8001e50 <SDCARD_GetBlocksNumber+0xd0>

    /* CMD9 (SEND_CSD) command */
    {
        static const uint8_t cmd[] =
            { 0x40 | 0x09 /* CMD9 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	2206      	movs	r2, #6
 8001da6:	492c      	ldr	r1, [pc, #176]	; (8001e58 <SDCARD_GetBlocksNumber+0xd8>)
 8001da8:	482c      	ldr	r0, [pc, #176]	; (8001e5c <SDCARD_GetBlocksNumber+0xdc>)
 8001daa:	f005 f919 	bl	8006fe0 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 8001dae:	f7ff fe83 	bl	8001ab8 <SDCARD_ReadR1>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d004      	beq.n	8001dc2 <SDCARD_GetBlocksNumber+0x42>
        SDCARD_Unselect();
 8001db8:	f7ff fe72 	bl	8001aa0 <SDCARD_Unselect>
        return -2;
 8001dbc:	f06f 0301 	mvn.w	r3, #1
 8001dc0:	e046      	b.n	8001e50 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD9) < 0) {
 8001dc2:	20fe      	movs	r0, #254	; 0xfe
 8001dc4:	f7ff fe94 	bl	8001af0 <SDCARD_WaitDataToken>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da04      	bge.n	8001dd8 <SDCARD_GetBlocksNumber+0x58>
        SDCARD_Unselect();
 8001dce:	f7ff fe67 	bl	8001aa0 <SDCARD_Unselect>
        return -3;
 8001dd2:	f06f 0302 	mvn.w	r3, #2
 8001dd6:	e03b      	b.n	8001e50 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(csd, sizeof(csd)) < 0) {
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	2110      	movs	r1, #16
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff feaa 	bl	8001b38 <SDCARD_ReadBytes>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	da04      	bge.n	8001df4 <SDCARD_GetBlocksNumber+0x74>
        SDCARD_Unselect();
 8001dea:	f7ff fe59 	bl	8001aa0 <SDCARD_Unselect>
        return -4;
 8001dee:	f06f 0303 	mvn.w	r3, #3
 8001df2:	e02d      	b.n	8001e50 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(crc, sizeof(crc)) < 0) {
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	2102      	movs	r1, #2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fe9c 	bl	8001b38 <SDCARD_ReadBytes>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	da04      	bge.n	8001e10 <SDCARD_GetBlocksNumber+0x90>
        SDCARD_Unselect();
 8001e06:	f7ff fe4b 	bl	8001aa0 <SDCARD_Unselect>
        return -5;
 8001e0a:	f06f 0304 	mvn.w	r3, #4
 8001e0e:	e01f      	b.n	8001e50 <SDCARD_GetBlocksNumber+0xd0>
    }

    SDCARD_Unselect();
 8001e10:	f7ff fe46 	bl	8001aa0 <SDCARD_Unselect>

    // first byte is VVxxxxxxxx where VV is csd.version
    if((csd[0] & 0xC0) != 0x40) // csd.version != 1
 8001e14:	7b3b      	ldrb	r3, [r7, #12]
 8001e16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001e1a:	2b40      	cmp	r3, #64	; 0x40
 8001e1c:	d002      	beq.n	8001e24 <SDCARD_GetBlocksNumber+0xa4>
        return -6;
 8001e1e:	f06f 0305 	mvn.w	r3, #5
 8001e22:	e015      	b.n	8001e50 <SDCARD_GetBlocksNumber+0xd0>

    uint32_t tmp = csd[7] & 0x3F; // two bits are reserved
 8001e24:	7cfb      	ldrb	r3, [r7, #19]
 8001e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e2a:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[8];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	7d3a      	ldrb	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[9];
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	7d7a      	ldrb	r2, [r7, #21]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61fb      	str	r3, [r7, #28]
    // Full volume: (C_SIZE+1)*512KByte == (C_SIZE+1)<<19
    // Block size: 512Byte == 1<<9
    // Blocks number: CARD_SIZE/BLOCK_SIZE = (C_SIZE+1)*(1<<19) / (1<<9) = (C_SIZE+1)*(1<<10)
    tmp = (tmp + 1) << 10;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	3301      	adds	r3, #1
 8001e44:	029b      	lsls	r3, r3, #10
 8001e46:	61fb      	str	r3, [r7, #28]
    *num = tmp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	601a      	str	r2, [r3, #0]

    return 0;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	0800ae74 	.word	0x0800ae74
 8001e5c:	240000ac 	.word	0x240000ac

08001e60 <SDCARD_ReadSingleBlock>:

int SDCARD_ReadSingleBlock(uint32_t blockNum, uint8_t* buff) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
    uint8_t crc[2];

    SDCARD_Select();
 8001e6a:	f7ff fe0d 	bl	8001a88 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001e6e:	f7ff fe85 	bl	8001b7c <SDCARD_WaitNotBusy>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	da04      	bge.n	8001e82 <SDCARD_ReadSingleBlock+0x22>
        SDCARD_Unselect();
 8001e78:	f7ff fe12 	bl	8001aa0 <SDCARD_Unselect>
        return -1;
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	e04d      	b.n	8001f1e <SDCARD_ReadSingleBlock+0xbe>
    }

    /* CMD17 (SEND_SINGLE_BLOCK) command */
    uint8_t cmd[] = {
 8001e82:	2351      	movs	r3, #81	; 0x51
 8001e84:	733b      	strb	r3, [r7, #12]
        0x40 | 0x11 /* CMD17 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	737b      	strb	r3, [r7, #13]
        (blockNum >> 16) & 0xFF,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	73bb      	strb	r3, [r7, #14]
        (blockNum >> 8) & 0xFF,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	743b      	strb	r3, [r7, #16]
 8001ea4:	23ff      	movs	r3, #255	; 0xff
 8001ea6:	747b      	strb	r3, [r7, #17]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001ea8:	f107 010c 	add.w	r1, r7, #12
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb0:	2206      	movs	r2, #6
 8001eb2:	481d      	ldr	r0, [pc, #116]	; (8001f28 <SDCARD_ReadSingleBlock+0xc8>)
 8001eb4:	f005 f894 	bl	8006fe0 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8001eb8:	f7ff fdfe 	bl	8001ab8 <SDCARD_ReadR1>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d004      	beq.n	8001ecc <SDCARD_ReadSingleBlock+0x6c>
        SDCARD_Unselect();
 8001ec2:	f7ff fded 	bl	8001aa0 <SDCARD_Unselect>
        return -2;
 8001ec6:	f06f 0301 	mvn.w	r3, #1
 8001eca:	e028      	b.n	8001f1e <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD17) < 0) {
 8001ecc:	20fe      	movs	r0, #254	; 0xfe
 8001ece:	f7ff fe0f 	bl	8001af0 <SDCARD_WaitDataToken>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	da04      	bge.n	8001ee2 <SDCARD_ReadSingleBlock+0x82>
        SDCARD_Unselect();
 8001ed8:	f7ff fde2 	bl	8001aa0 <SDCARD_Unselect>
        return -3;
 8001edc:	f06f 0302 	mvn.w	r3, #2
 8001ee0:	e01d      	b.n	8001f1e <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_ReadBytes(buff, 512) < 0) {
 8001ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee6:	6838      	ldr	r0, [r7, #0]
 8001ee8:	f7ff fe26 	bl	8001b38 <SDCARD_ReadBytes>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da04      	bge.n	8001efc <SDCARD_ReadSingleBlock+0x9c>
        SDCARD_Unselect();
 8001ef2:	f7ff fdd5 	bl	8001aa0 <SDCARD_Unselect>
        return -4;
 8001ef6:	f06f 0303 	mvn.w	r3, #3
 8001efa:	e010      	b.n	8001f1e <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_ReadBytes(crc, 2) < 0) {
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2102      	movs	r1, #2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fe18 	bl	8001b38 <SDCARD_ReadBytes>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	da04      	bge.n	8001f18 <SDCARD_ReadSingleBlock+0xb8>
        SDCARD_Unselect();
 8001f0e:	f7ff fdc7 	bl	8001aa0 <SDCARD_Unselect>
        return -5;
 8001f12:	f06f 0304 	mvn.w	r3, #4
 8001f16:	e002      	b.n	8001f1e <SDCARD_ReadSingleBlock+0xbe>
    }

    SDCARD_Unselect();
 8001f18:	f7ff fdc2 	bl	8001aa0 <SDCARD_Unselect>
    return 0;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	240000ac 	.word	0x240000ac

08001f2c <SDCARD_WriteSingleBlock>:


int SDCARD_WriteSingleBlock(uint32_t blockNum, const uint8_t* buff) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
    SDCARD_Select();
 8001f36:	f7ff fda7 	bl	8001a88 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001f3a:	f7ff fe1f 	bl	8001b7c <SDCARD_WaitNotBusy>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da04      	bge.n	8001f4e <SDCARD_WriteSingleBlock+0x22>
        SDCARD_Unselect();
 8001f44:	f7ff fdac 	bl	8001aa0 <SDCARD_Unselect>
        return -1;
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4c:	e05e      	b.n	800200c <SDCARD_WriteSingleBlock+0xe0>
    }

    /* CMD24 (WRITE_BLOCK) command */
    uint8_t cmd[] = {
 8001f4e:	2358      	movs	r3, #88	; 0x58
 8001f50:	743b      	strb	r3, [r7, #16]
        0x40 | 0x18 /* CMD24 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	747b      	strb	r3, [r7, #17]
        (blockNum >> 16) & 0xFF,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	74bb      	strb	r3, [r7, #18]
        (blockNum >> 8) & 0xFF,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	74fb      	strb	r3, [r7, #19]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	753b      	strb	r3, [r7, #20]
 8001f70:	23ff      	movs	r3, #255	; 0xff
 8001f72:	757b      	strb	r3, [r7, #21]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001f74:	f107 0110 	add.w	r1, r7, #16
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7c:	2206      	movs	r2, #6
 8001f7e:	4825      	ldr	r0, [pc, #148]	; (8002014 <SDCARD_WriteSingleBlock+0xe8>)
 8001f80:	f005 f82e 	bl	8006fe0 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8001f84:	f7ff fd98 	bl	8001ab8 <SDCARD_ReadR1>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <SDCARD_WriteSingleBlock+0x6c>
        SDCARD_Unselect();
 8001f8e:	f7ff fd87 	bl	8001aa0 <SDCARD_Unselect>
        return -2;
 8001f92:	f06f 0301 	mvn.w	r3, #1
 8001f96:	e039      	b.n	800200c <SDCARD_WriteSingleBlock+0xe0>
    }

    uint8_t dataToken = DATA_TOKEN_CMD24;
 8001f98:	23fe      	movs	r3, #254	; 0xfe
 8001f9a:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 8001f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa0:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 8001fa2:	f107 010f 	add.w	r1, r7, #15
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	2201      	movs	r2, #1
 8001fac:	4819      	ldr	r0, [pc, #100]	; (8002014 <SDCARD_WriteSingleBlock+0xe8>)
 8001fae:	f005 f817 	bl	8006fe0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fba:	6839      	ldr	r1, [r7, #0]
 8001fbc:	4815      	ldr	r0, [pc, #84]	; (8002014 <SDCARD_WriteSingleBlock+0xe8>)
 8001fbe:	f005 f80f 	bl	8006fe0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 8001fc2:	f107 010c 	add.w	r1, r7, #12
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	2202      	movs	r2, #2
 8001fcc:	4811      	ldr	r0, [pc, #68]	; (8002014 <SDCARD_WriteSingleBlock+0xe8>)
 8001fce:	f005 f807 	bl	8006fe0 <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 8001fd2:	f107 030b 	add.w	r3, r7, #11
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fdad 	bl	8001b38 <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d004      	beq.n	8001ff2 <SDCARD_WriteSingleBlock+0xc6>
        SDCARD_Unselect();
 8001fe8:	f7ff fd5a 	bl	8001aa0 <SDCARD_Unselect>
        return -3;
 8001fec:	f06f 0302 	mvn.w	r3, #2
 8001ff0:	e00c      	b.n	800200c <SDCARD_WriteSingleBlock+0xe0>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 8001ff2:	f7ff fdc3 	bl	8001b7c <SDCARD_WaitNotBusy>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da04      	bge.n	8002006 <SDCARD_WriteSingleBlock+0xda>
        SDCARD_Unselect();
 8001ffc:	f7ff fd50 	bl	8001aa0 <SDCARD_Unselect>
        return -4;
 8002000:	f06f 0303 	mvn.w	r3, #3
 8002004:	e002      	b.n	800200c <SDCARD_WriteSingleBlock+0xe0>
    }

    SDCARD_Unselect();
 8002006:	f7ff fd4b 	bl	8001aa0 <SDCARD_Unselect>
    return 0;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	240000ac 	.word	0x240000ac

08002018 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_MspInit+0x30>)
 8002020:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002024:	4a08      	ldr	r2, [pc, #32]	; (8002048 <HAL_MspInit+0x30>)
 8002026:	f043 0302 	orr.w	r3, r3, #2
 800202a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_MspInit+0x30>)
 8002030:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	58024400 	.word	0x58024400

0800204c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b0b8      	sub	sp, #224	; 0xe0
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	22b8      	movs	r2, #184	; 0xb8
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f008 f8d7 	bl	800a220 <memset>
  if(hspi->Instance==SPI1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a24      	ldr	r2, [pc, #144]	; (8002108 <HAL_SPI_MspInit+0xbc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d141      	bne.n	8002100 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800207c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002080:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002082:	2300      	movs	r3, #0
 8002084:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fb74 	bl	8005778 <HAL_RCCEx_PeriphCLKConfig>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002096:	f7ff fcf2 	bl	8001a7e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_SPI_MspInit+0xc0>)
 800209c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80020a0:	4a1a      	ldr	r2, [pc, #104]	; (800210c <HAL_SPI_MspInit+0xc0>)
 80020a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_SPI_MspInit+0xc0>)
 80020ac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80020b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_SPI_MspInit+0xc0>)
 80020ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80020be:	4a13      	ldr	r2, [pc, #76]	; (800210c <HAL_SPI_MspInit+0xc0>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_SPI_MspInit+0xc0>)
 80020ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020d6:	23e0      	movs	r3, #224	; 0xe0
 80020d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ee:	2305      	movs	r3, #5
 80020f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020f8:	4619      	mov	r1, r3
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <HAL_SPI_MspInit+0xc4>)
 80020fc:	f002 f954 	bl	80043a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002100:	bf00      	nop
 8002102:	37e0      	adds	r7, #224	; 0xe0
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40013000 	.word	0x40013000
 800210c:	58024400 	.word	0x58024400
 8002110:	58020000 	.word	0x58020000

08002114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <HAL_TIM_Base_MspInit+0x3c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10e      	bne.n	8002144 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_TIM_Base_MspInit+0x40>)
 8002128:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800212c:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_TIM_Base_MspInit+0x40>)
 800212e:	f043 0302 	orr.w	r3, r3, #2
 8002132:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <HAL_TIM_Base_MspInit+0x40>)
 8002138:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40000400 	.word	0x40000400
 8002154:	58024400 	.word	0x58024400

08002158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <HAL_TIM_MspPostInit+0x68>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d11e      	bne.n	80021b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_TIM_MspPostInit+0x6c>)
 800217c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002180:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_TIM_MspPostInit+0x6c>)
 8002182:	f043 0302 	orr.w	r3, r3, #2
 8002186:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_TIM_MspPostInit+0x6c>)
 800218c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002198:	2301      	movs	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021a8:	2302      	movs	r3, #2
 80021aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	4619      	mov	r1, r3
 80021b2:	4805      	ldr	r0, [pc, #20]	; (80021c8 <HAL_TIM_MspPostInit+0x70>)
 80021b4:	f002 f8f8 	bl	80043a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021b8:	bf00      	nop
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40000400 	.word	0x40000400
 80021c4:	58024400 	.word	0x58024400
 80021c8:	58020400 	.word	0x58020400

080021cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b0b8      	sub	sp, #224	; 0xe0
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	22b8      	movs	r2, #184	; 0xb8
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f008 f817 	bl	800a220 <memset>
  if(huart->Instance==USART3)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a52      	ldr	r2, [pc, #328]	; (8002340 <HAL_UART_MspInit+0x174>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	f040 809d 	bne.w	8002338 <HAL_UART_MspInit+0x16c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021fe:	2302      	movs	r3, #2
 8002200:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002202:	2300      	movs	r3, #0
 8002204:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4618      	mov	r0, r3
 800220e:	f003 fab3 	bl	8005778 <HAL_RCCEx_PeriphCLKConfig>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002218:	f7ff fc31 	bl	8001a7e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800221c:	4b49      	ldr	r3, [pc, #292]	; (8002344 <HAL_UART_MspInit+0x178>)
 800221e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002222:	4a48      	ldr	r2, [pc, #288]	; (8002344 <HAL_UART_MspInit+0x178>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002228:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800222c:	4b45      	ldr	r3, [pc, #276]	; (8002344 <HAL_UART_MspInit+0x178>)
 800222e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800223a:	4b42      	ldr	r3, [pc, #264]	; (8002344 <HAL_UART_MspInit+0x178>)
 800223c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002240:	4a40      	ldr	r2, [pc, #256]	; (8002344 <HAL_UART_MspInit+0x178>)
 8002242:	f043 0308 	orr.w	r3, r3, #8
 8002246:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800224a:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <HAL_UART_MspInit+0x178>)
 800224c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800225c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002272:	2307      	movs	r3, #7
 8002274:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002278:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800227c:	4619      	mov	r1, r3
 800227e:	4832      	ldr	r0, [pc, #200]	; (8002348 <HAL_UART_MspInit+0x17c>)
 8002280:	f002 f892 	bl	80043a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002284:	4b31      	ldr	r3, [pc, #196]	; (800234c <HAL_UART_MspInit+0x180>)
 8002286:	4a32      	ldr	r2, [pc, #200]	; (8002350 <HAL_UART_MspInit+0x184>)
 8002288:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800228a:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_UART_MspInit+0x180>)
 800228c:	222d      	movs	r2, #45	; 0x2d
 800228e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002290:	4b2e      	ldr	r3, [pc, #184]	; (800234c <HAL_UART_MspInit+0x180>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_UART_MspInit+0x180>)
 8002298:	2200      	movs	r2, #0
 800229a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <HAL_UART_MspInit+0x180>)
 800229e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a4:	4b29      	ldr	r3, [pc, #164]	; (800234c <HAL_UART_MspInit+0x180>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022aa:	4b28      	ldr	r3, [pc, #160]	; (800234c <HAL_UART_MspInit+0x180>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80022b0:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_UART_MspInit+0x180>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022b6:	4b25      	ldr	r3, [pc, #148]	; (800234c <HAL_UART_MspInit+0x180>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022bc:	4b23      	ldr	r3, [pc, #140]	; (800234c <HAL_UART_MspInit+0x180>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80022c2:	4822      	ldr	r0, [pc, #136]	; (800234c <HAL_UART_MspInit+0x180>)
 80022c4:	f000 fb42 	bl	800294c <HAL_DMA_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 80022ce:	f7ff fbd6 	bl	8001a7e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_UART_MspInit+0x180>)
 80022d6:	67da      	str	r2, [r3, #124]	; 0x7c
 80022d8:	4a1c      	ldr	r2, [pc, #112]	; (800234c <HAL_UART_MspInit+0x180>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_UART_MspInit+0x188>)
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <HAL_UART_MspInit+0x18c>)
 80022e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_UART_MspInit+0x188>)
 80022e6:	222e      	movs	r2, #46	; 0x2e
 80022e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ea:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <HAL_UART_MspInit+0x188>)
 80022ec:	2240      	movs	r2, #64	; 0x40
 80022ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f0:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HAL_UART_MspInit+0x188>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_UART_MspInit+0x188>)
 80022f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_UART_MspInit+0x188>)
 8002300:	2200      	movs	r2, #0
 8002302:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_UART_MspInit+0x188>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_UART_MspInit+0x188>)
 800230c:	2200      	movs	r2, #0
 800230e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <HAL_UART_MspInit+0x188>)
 8002312:	2200      	movs	r2, #0
 8002314:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_UART_MspInit+0x188>)
 8002318:	2200      	movs	r2, #0
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800231c:	480d      	ldr	r0, [pc, #52]	; (8002354 <HAL_UART_MspInit+0x188>)
 800231e:	f000 fb15 	bl	800294c <HAL_DMA_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8002328:	f7ff fba9 	bl	8001a7e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HAL_UART_MspInit+0x188>)
 8002330:	679a      	str	r2, [r3, #120]	; 0x78
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <HAL_UART_MspInit+0x188>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002338:	bf00      	nop
 800233a:	37e0      	adds	r7, #224	; 0xe0
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40004800 	.word	0x40004800
 8002344:	58024400 	.word	0x58024400
 8002348:	58020c00 	.word	0x58020c00
 800234c:	24000210 	.word	0x24000210
 8002350:	40020028 	.word	0x40020028
 8002354:	24000288 	.word	0x24000288
 8002358:	40020040 	.word	0x40020040

0800235c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(){
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <SDTimer_Handler+0x40>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <SDTimer_Handler+0x1c>
		{Timer1--;}
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <SDTimer_Handler+0x40>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <SDTimer_Handler+0x40>)
 8002376:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <SDTimer_Handler+0x44>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <SDTimer_Handler+0x34>
		{Timer2--;}
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <SDTimer_Handler+0x44>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <SDTimer_Handler+0x44>)
 800238e:	701a      	strb	r2, [r3, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	240003e1 	.word	0x240003e1
 80023a0:	240003e2 	.word	0x240003e2

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <NMI_Handler+0x4>

080023aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <HardFault_Handler+0x4>

080023b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <MemManage_Handler+0x4>

080023b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <BusFault_Handler+0x4>

080023bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <UsageFault_Handler+0x4>

080023c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <SysTick_Handler+0x30>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <SysTick_Handler+0x30>)
 80023fc:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <SysTick_Handler+0x30>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b09      	cmp	r3, #9
 8002406:	d904      	bls.n	8002412 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <SysTick_Handler+0x30>)
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800240e:	f7ff ffa5 	bl	800235c <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002412:	f000 f96b 	bl	80026ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	240003e0 	.word	0x240003e0

08002420 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <DMA1_Stream1_IRQHandler+0x10>)
 8002426:	f000 fe21 	bl	800306c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	24000210 	.word	0x24000210

08002434 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <DMA1_Stream2_IRQHandler+0x10>)
 800243a:	f000 fe17 	bl	800306c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	24000288 	.word	0x24000288

08002448 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800244c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002450:	f002 f98d 	bl	800476e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <_sbrk+0x5c>)
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <_sbrk+0x60>)
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <_sbrk+0x64>)
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <_sbrk+0x68>)
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d207      	bcs.n	8002498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002488:	f007 fe92 	bl	800a1b0 <__errno>
 800248c:	4603      	mov	r3, r0
 800248e:	220c      	movs	r2, #12
 8002490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	e009      	b.n	80024ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	4a05      	ldr	r2, [pc, #20]	; (80024bc <_sbrk+0x64>)
 80024a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	24100000 	.word	0x24100000
 80024b8:	00000800 	.word	0x00000800
 80024bc:	240003e4 	.word	0x240003e4
 80024c0:	24000410 	.word	0x24000410

080024c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <SystemInit+0xd0>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	4a31      	ldr	r2, [pc, #196]	; (8002594 <SystemInit+0xd0>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024d8:	4b2f      	ldr	r3, [pc, #188]	; (8002598 <SystemInit+0xd4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d807      	bhi.n	80024f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024e4:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <SystemInit+0xd4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f023 030f 	bic.w	r3, r3, #15
 80024ec:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <SystemInit+0xd4>)
 80024ee:	f043 0303 	orr.w	r3, r3, #3
 80024f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024f4:	4b29      	ldr	r3, [pc, #164]	; (800259c <SystemInit+0xd8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a28      	ldr	r2, [pc, #160]	; (800259c <SystemInit+0xd8>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002500:	4b26      	ldr	r3, [pc, #152]	; (800259c <SystemInit+0xd8>)
 8002502:	2200      	movs	r2, #0
 8002504:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002506:	4b25      	ldr	r3, [pc, #148]	; (800259c <SystemInit+0xd8>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4924      	ldr	r1, [pc, #144]	; (800259c <SystemInit+0xd8>)
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <SystemInit+0xdc>)
 800250e:	4013      	ands	r3, r2
 8002510:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <SystemInit+0xd4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <SystemInit+0xd4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 030f 	bic.w	r3, r3, #15
 8002526:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <SystemInit+0xd4>)
 8002528:	f043 0303 	orr.w	r3, r3, #3
 800252c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <SystemInit+0xd8>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <SystemInit+0xd8>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <SystemInit+0xd8>)
 800253c:	2200      	movs	r2, #0
 800253e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <SystemInit+0xd8>)
 8002542:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <SystemInit+0xe0>)
 8002544:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <SystemInit+0xd8>)
 8002548:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <SystemInit+0xe4>)
 800254a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <SystemInit+0xd8>)
 800254e:	4a17      	ldr	r2, [pc, #92]	; (80025ac <SystemInit+0xe8>)
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <SystemInit+0xd8>)
 8002554:	2200      	movs	r2, #0
 8002556:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002558:	4b10      	ldr	r3, [pc, #64]	; (800259c <SystemInit+0xd8>)
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <SystemInit+0xe8>)
 800255c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800255e:	4b0f      	ldr	r3, [pc, #60]	; (800259c <SystemInit+0xd8>)
 8002560:	2200      	movs	r2, #0
 8002562:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <SystemInit+0xd8>)
 8002566:	4a11      	ldr	r2, [pc, #68]	; (80025ac <SystemInit+0xe8>)
 8002568:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <SystemInit+0xd8>)
 800256c:	2200      	movs	r2, #0
 800256e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <SystemInit+0xd8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a09      	ldr	r2, [pc, #36]	; (800259c <SystemInit+0xd8>)
 8002576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <SystemInit+0xd8>)
 800257e:	2200      	movs	r2, #0
 8002580:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <SystemInit+0xec>)
 8002584:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002588:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	52002000 	.word	0x52002000
 800259c:	58024400 	.word	0x58024400
 80025a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80025a4:	02020200 	.word	0x02020200
 80025a8:	01ff0000 	.word	0x01ff0000
 80025ac:	01010280 	.word	0x01010280
 80025b0:	52004000 	.word	0x52004000

080025b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025b8:	f7ff ff84 	bl	80024c4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025bc:	480c      	ldr	r0, [pc, #48]	; (80025f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025be:	490d      	ldr	r1, [pc, #52]	; (80025f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c4:	e002      	b.n	80025cc <LoopCopyDataInit>

080025c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ca:	3304      	adds	r3, #4

080025cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80025cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d0:	d3f9      	bcc.n	80025c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025d4:	4c0a      	ldr	r4, [pc, #40]	; (8002600 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d8:	e001      	b.n	80025de <LoopFillZerobss>

080025da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025dc:	3204      	adds	r2, #4

080025de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e0:	d3fb      	bcc.n	80025da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80025e2:	f007 fdeb 	bl	800a1bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025e6:	f7fe fe8d 	bl	8001304 <main>
  bx  lr
 80025ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025ec:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80025f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025f4:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 80025f8:	0800af00 	.word	0x0800af00
  ldr r2, =_sbss
 80025fc:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 8002600:	24000410 	.word	0x24000410

08002604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002604:	e7fe      	b.n	8002604 <ADC_IRQHandler>
	...

08002608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800260e:	2003      	movs	r0, #3
 8002610:	f000 f95c 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002614:	f002 feda 	bl	80053cc <HAL_RCC_GetSysClockFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_Init+0x68>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	4913      	ldr	r1, [pc, #76]	; (8002674 <HAL_Init+0x6c>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
 8002630:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_Init+0x68>)
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	4a0e      	ldr	r2, [pc, #56]	; (8002674 <HAL_Init+0x6c>)
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	4a0b      	ldr	r2, [pc, #44]	; (8002678 <HAL_Init+0x70>)
 800264a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800264c:	4a0b      	ldr	r2, [pc, #44]	; (800267c <HAL_Init+0x74>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002652:	2000      	movs	r0, #0
 8002654:	f000 f814 	bl	8002680 <HAL_InitTick>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e002      	b.n	8002668 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002662:	f7ff fcd9 	bl	8002018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	58024400 	.word	0x58024400
 8002674:	0800ae7c 	.word	0x0800ae7c
 8002678:	24000008 	.word	0x24000008
 800267c:	24000004 	.word	0x24000004

08002680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_InitTick+0x60>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e021      	b.n	80026d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_InitTick+0x64>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_InitTick+0x60>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f941 	bl	8002932 <HAL_SYSTICK_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00e      	b.n	80026d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d80a      	bhi.n	80026d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c0:	2200      	movs	r2, #0
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f000 f90b 	bl	80028e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <HAL_InitTick+0x68>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	24000010 	.word	0x24000010
 80026e4:	24000004 	.word	0x24000004
 80026e8:	2400000c 	.word	0x2400000c

080026ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x20>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_IncTick+0x24>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_IncTick+0x24>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	24000010 	.word	0x24000010
 8002710:	240003e8 	.word	0x240003e8

08002714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_GetTick+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	240003e8 	.word	0x240003e8

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <__NVIC_SetPriorityGrouping+0x40>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	; (800276c <__NVIC_SetPriorityGrouping+0x40>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00
 8002770:	05fa0000 	.word	0x05fa0000

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d301      	bcc.n	800289e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289a:	2301      	movs	r3, #1
 800289c:	e00f      	b.n	80028be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <SysTick_Config+0x40>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a6:	210f      	movs	r1, #15
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f7ff ff8e 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Config+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SysTick_Config+0x40>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff29 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028f0:	f7ff ff40 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f7ff ff90 	bl	8002820 <NVIC_EncodePriority>
 8002900:	4602      	mov	r2, r0
 8002902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff5f 	bl	80027cc <__NVIC_SetPriority>
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff33 	bl	8002790 <__NVIC_EnableIRQ>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ffa4 	bl	8002888 <SysTick_Config>
 8002940:	4603      	mov	r3, r0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff fede 	bl	8002714 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e37f      	b.n	8003064 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a66      	ldr	r2, [pc, #408]	; (8002b04 <HAL_DMA_Init+0x1b8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d04a      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a65      	ldr	r2, [pc, #404]	; (8002b08 <HAL_DMA_Init+0x1bc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d045      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a63      	ldr	r2, [pc, #396]	; (8002b0c <HAL_DMA_Init+0x1c0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d040      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a62      	ldr	r2, [pc, #392]	; (8002b10 <HAL_DMA_Init+0x1c4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d03b      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a60      	ldr	r2, [pc, #384]	; (8002b14 <HAL_DMA_Init+0x1c8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d036      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a5f      	ldr	r2, [pc, #380]	; (8002b18 <HAL_DMA_Init+0x1cc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d031      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a5d      	ldr	r2, [pc, #372]	; (8002b1c <HAL_DMA_Init+0x1d0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d02c      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a5c      	ldr	r2, [pc, #368]	; (8002b20 <HAL_DMA_Init+0x1d4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d027      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a5a      	ldr	r2, [pc, #360]	; (8002b24 <HAL_DMA_Init+0x1d8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d022      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a59      	ldr	r2, [pc, #356]	; (8002b28 <HAL_DMA_Init+0x1dc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d01d      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a57      	ldr	r2, [pc, #348]	; (8002b2c <HAL_DMA_Init+0x1e0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d018      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a56      	ldr	r2, [pc, #344]	; (8002b30 <HAL_DMA_Init+0x1e4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d013      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a54      	ldr	r2, [pc, #336]	; (8002b34 <HAL_DMA_Init+0x1e8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00e      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a53      	ldr	r2, [pc, #332]	; (8002b38 <HAL_DMA_Init+0x1ec>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d009      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a51      	ldr	r2, [pc, #324]	; (8002b3c <HAL_DMA_Init+0x1f0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d004      	beq.n	8002a04 <HAL_DMA_Init+0xb8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a50      	ldr	r2, [pc, #320]	; (8002b40 <HAL_DMA_Init+0x1f4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d101      	bne.n	8002a08 <HAL_DMA_Init+0xbc>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_DMA_Init+0xbe>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 813c 	beq.w	8002c88 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a37      	ldr	r2, [pc, #220]	; (8002b04 <HAL_DMA_Init+0x1b8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d04a      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a36      	ldr	r2, [pc, #216]	; (8002b08 <HAL_DMA_Init+0x1bc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d045      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a34      	ldr	r2, [pc, #208]	; (8002b0c <HAL_DMA_Init+0x1c0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d040      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a33      	ldr	r2, [pc, #204]	; (8002b10 <HAL_DMA_Init+0x1c4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d03b      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a31      	ldr	r2, [pc, #196]	; (8002b14 <HAL_DMA_Init+0x1c8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d036      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a30      	ldr	r2, [pc, #192]	; (8002b18 <HAL_DMA_Init+0x1cc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d031      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2e      	ldr	r2, [pc, #184]	; (8002b1c <HAL_DMA_Init+0x1d0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d02c      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a2d      	ldr	r2, [pc, #180]	; (8002b20 <HAL_DMA_Init+0x1d4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d027      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a2b      	ldr	r2, [pc, #172]	; (8002b24 <HAL_DMA_Init+0x1d8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d022      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <HAL_DMA_Init+0x1dc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d01d      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a28      	ldr	r2, [pc, #160]	; (8002b2c <HAL_DMA_Init+0x1e0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d018      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <HAL_DMA_Init+0x1e4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d013      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a25      	ldr	r2, [pc, #148]	; (8002b34 <HAL_DMA_Init+0x1e8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00e      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <HAL_DMA_Init+0x1ec>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d009      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a22      	ldr	r2, [pc, #136]	; (8002b3c <HAL_DMA_Init+0x1f0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <HAL_DMA_Init+0x174>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a21      	ldr	r2, [pc, #132]	; (8002b40 <HAL_DMA_Init+0x1f4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d108      	bne.n	8002ad2 <HAL_DMA_Init+0x186>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e007      	b.n	8002ae2 <HAL_DMA_Init+0x196>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ae2:	e02f      	b.n	8002b44 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ae4:	f7ff fe16 	bl	8002714 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d928      	bls.n	8002b44 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2203      	movs	r2, #3
 8002afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e2af      	b.n	8003064 <HAL_DMA_Init+0x718>
 8002b04:	40020010 	.word	0x40020010
 8002b08:	40020028 	.word	0x40020028
 8002b0c:	40020040 	.word	0x40020040
 8002b10:	40020058 	.word	0x40020058
 8002b14:	40020070 	.word	0x40020070
 8002b18:	40020088 	.word	0x40020088
 8002b1c:	400200a0 	.word	0x400200a0
 8002b20:	400200b8 	.word	0x400200b8
 8002b24:	40020410 	.word	0x40020410
 8002b28:	40020428 	.word	0x40020428
 8002b2c:	40020440 	.word	0x40020440
 8002b30:	40020458 	.word	0x40020458
 8002b34:	40020470 	.word	0x40020470
 8002b38:	40020488 	.word	0x40020488
 8002b3c:	400204a0 	.word	0x400204a0
 8002b40:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1c8      	bne.n	8002ae4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <HAL_DMA_Init+0x3e0>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b76:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b82:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d107      	bne.n	8002ba8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b28      	cmp	r3, #40	; 0x28
 8002bae:	d903      	bls.n	8002bb8 <HAL_DMA_Init+0x26c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8002bb6:	d91f      	bls.n	8002bf8 <HAL_DMA_Init+0x2ac>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b3e      	cmp	r3, #62	; 0x3e
 8002bbe:	d903      	bls.n	8002bc8 <HAL_DMA_Init+0x27c>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b42      	cmp	r3, #66	; 0x42
 8002bc6:	d917      	bls.n	8002bf8 <HAL_DMA_Init+0x2ac>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b46      	cmp	r3, #70	; 0x46
 8002bce:	d903      	bls.n	8002bd8 <HAL_DMA_Init+0x28c>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b48      	cmp	r3, #72	; 0x48
 8002bd6:	d90f      	bls.n	8002bf8 <HAL_DMA_Init+0x2ac>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b4e      	cmp	r3, #78	; 0x4e
 8002bde:	d903      	bls.n	8002be8 <HAL_DMA_Init+0x29c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b52      	cmp	r3, #82	; 0x52
 8002be6:	d907      	bls.n	8002bf8 <HAL_DMA_Init+0x2ac>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b73      	cmp	r3, #115	; 0x73
 8002bee:	d905      	bls.n	8002bfc <HAL_DMA_Init+0x2b0>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b77      	cmp	r3, #119	; 0x77
 8002bf6:	d801      	bhi.n	8002bfc <HAL_DMA_Init+0x2b0>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <HAL_DMA_Init+0x2b2>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c08:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f023 0307 	bic.w	r3, r3, #7
 8002c20:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d117      	bne.n	8002c64 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00e      	beq.n	8002c64 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f001 fa24 	bl	8004094 <DMA_CheckFifoParam>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2240      	movs	r2, #64	; 0x40
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e1ff      	b.n	8003064 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f001 f95f 	bl	8003f30 <DMA_CalcBaseAndBitshift>
 8002c72:	4603      	mov	r3, r0
 8002c74:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	223f      	movs	r2, #63	; 0x3f
 8002c80:	409a      	lsls	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	e0fe      	b.n	8002e86 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <HAL_DMA_Init+0x3e4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d04a      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <HAL_DMA_Init+0x3e8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d045      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a25      	ldr	r2, [pc, #148]	; (8002d38 <HAL_DMA_Init+0x3ec>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d040      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <HAL_DMA_Init+0x3f0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d03b      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <HAL_DMA_Init+0x3f4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d036      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a21      	ldr	r2, [pc, #132]	; (8002d44 <HAL_DMA_Init+0x3f8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d031      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1f      	ldr	r2, [pc, #124]	; (8002d48 <HAL_DMA_Init+0x3fc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d02c      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_DMA_Init+0x400>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d027      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <HAL_DMA_Init+0x404>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d022      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_DMA_Init+0x408>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d01d      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <HAL_DMA_Init+0x40c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d018      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <HAL_DMA_Init+0x410>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a16      	ldr	r2, [pc, #88]	; (8002d60 <HAL_DMA_Init+0x414>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00e      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <HAL_DMA_Init+0x418>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <HAL_DMA_Init+0x41c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_DMA_Init+0x3dc>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <HAL_DMA_Init+0x420>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d123      	bne.n	8002d70 <HAL_DMA_Init+0x424>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e022      	b.n	8002d72 <HAL_DMA_Init+0x426>
 8002d2c:	fe10803f 	.word	0xfe10803f
 8002d30:	48022c08 	.word	0x48022c08
 8002d34:	48022c1c 	.word	0x48022c1c
 8002d38:	48022c30 	.word	0x48022c30
 8002d3c:	48022c44 	.word	0x48022c44
 8002d40:	48022c58 	.word	0x48022c58
 8002d44:	48022c6c 	.word	0x48022c6c
 8002d48:	48022c80 	.word	0x48022c80
 8002d4c:	48022c94 	.word	0x48022c94
 8002d50:	58025408 	.word	0x58025408
 8002d54:	5802541c 	.word	0x5802541c
 8002d58:	58025430 	.word	0x58025430
 8002d5c:	58025444 	.word	0x58025444
 8002d60:	58025458 	.word	0x58025458
 8002d64:	5802546c 	.word	0x5802546c
 8002d68:	58025480 	.word	0x58025480
 8002d6c:	58025494 	.word	0x58025494
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d07e      	beq.n	8002e74 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a80      	ldr	r2, [pc, #512]	; (8002f7c <HAL_DMA_Init+0x630>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d021      	beq.n	8002dc4 <HAL_DMA_Init+0x478>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a7e      	ldr	r2, [pc, #504]	; (8002f80 <HAL_DMA_Init+0x634>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01c      	beq.n	8002dc4 <HAL_DMA_Init+0x478>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a7d      	ldr	r2, [pc, #500]	; (8002f84 <HAL_DMA_Init+0x638>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d017      	beq.n	8002dc4 <HAL_DMA_Init+0x478>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a7b      	ldr	r2, [pc, #492]	; (8002f88 <HAL_DMA_Init+0x63c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d012      	beq.n	8002dc4 <HAL_DMA_Init+0x478>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a7a      	ldr	r2, [pc, #488]	; (8002f8c <HAL_DMA_Init+0x640>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00d      	beq.n	8002dc4 <HAL_DMA_Init+0x478>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a78      	ldr	r2, [pc, #480]	; (8002f90 <HAL_DMA_Init+0x644>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d008      	beq.n	8002dc4 <HAL_DMA_Init+0x478>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a77      	ldr	r2, [pc, #476]	; (8002f94 <HAL_DMA_Init+0x648>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <HAL_DMA_Init+0x478>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a75      	ldr	r2, [pc, #468]	; (8002f98 <HAL_DMA_Init+0x64c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4b6e      	ldr	r3, [pc, #440]	; (8002f9c <HAL_DMA_Init+0x650>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	d008      	beq.n	8002e00 <HAL_DMA_Init+0x4b4>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b80      	cmp	r3, #128	; 0x80
 8002df4:	d102      	bne.n	8002dfc <HAL_DMA_Init+0x4b0>
 8002df6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dfa:	e002      	b.n	8002e02 <HAL_DMA_Init+0x4b6>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e000      	b.n	8002e02 <HAL_DMA_Init+0x4b6>
 8002e00:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68d2      	ldr	r2, [r2, #12]
 8002e06:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e30:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b56      	ldr	r3, [pc, #344]	; (8002fa0 <HAL_DMA_Init+0x654>)
 8002e48:	4413      	add	r3, r2
 8002e4a:	4a56      	ldr	r2, [pc, #344]	; (8002fa4 <HAL_DMA_Init+0x658>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	009a      	lsls	r2, r3, #2
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f001 f869 	bl	8003f30 <DMA_CalcBaseAndBitshift>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	e008      	b.n	8002e86 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2240      	movs	r2, #64	; 0x40
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0ee      	b.n	8003064 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a47      	ldr	r2, [pc, #284]	; (8002fa8 <HAL_DMA_Init+0x65c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d072      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a45      	ldr	r2, [pc, #276]	; (8002fac <HAL_DMA_Init+0x660>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d06d      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a44      	ldr	r2, [pc, #272]	; (8002fb0 <HAL_DMA_Init+0x664>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d068      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a42      	ldr	r2, [pc, #264]	; (8002fb4 <HAL_DMA_Init+0x668>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d063      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a41      	ldr	r2, [pc, #260]	; (8002fb8 <HAL_DMA_Init+0x66c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d05e      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a3f      	ldr	r2, [pc, #252]	; (8002fbc <HAL_DMA_Init+0x670>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d059      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a3e      	ldr	r2, [pc, #248]	; (8002fc0 <HAL_DMA_Init+0x674>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d054      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a3c      	ldr	r2, [pc, #240]	; (8002fc4 <HAL_DMA_Init+0x678>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d04f      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a3b      	ldr	r2, [pc, #236]	; (8002fc8 <HAL_DMA_Init+0x67c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d04a      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a39      	ldr	r2, [pc, #228]	; (8002fcc <HAL_DMA_Init+0x680>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d045      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a38      	ldr	r2, [pc, #224]	; (8002fd0 <HAL_DMA_Init+0x684>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d040      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a36      	ldr	r2, [pc, #216]	; (8002fd4 <HAL_DMA_Init+0x688>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d03b      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a35      	ldr	r2, [pc, #212]	; (8002fd8 <HAL_DMA_Init+0x68c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d036      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a33      	ldr	r2, [pc, #204]	; (8002fdc <HAL_DMA_Init+0x690>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d031      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a32      	ldr	r2, [pc, #200]	; (8002fe0 <HAL_DMA_Init+0x694>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d02c      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a30      	ldr	r2, [pc, #192]	; (8002fe4 <HAL_DMA_Init+0x698>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d027      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <HAL_DMA_Init+0x630>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d022      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <HAL_DMA_Init+0x634>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01d      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <HAL_DMA_Init+0x638>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d018      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <HAL_DMA_Init+0x63c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a0e      	ldr	r2, [pc, #56]	; (8002f8c <HAL_DMA_Init+0x640>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00e      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <HAL_DMA_Init+0x644>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <HAL_DMA_Init+0x648>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_DMA_Init+0x62a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <HAL_DMA_Init+0x64c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d138      	bne.n	8002fe8 <HAL_DMA_Init+0x69c>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e037      	b.n	8002fea <HAL_DMA_Init+0x69e>
 8002f7a:	bf00      	nop
 8002f7c:	58025408 	.word	0x58025408
 8002f80:	5802541c 	.word	0x5802541c
 8002f84:	58025430 	.word	0x58025430
 8002f88:	58025444 	.word	0x58025444
 8002f8c:	58025458 	.word	0x58025458
 8002f90:	5802546c 	.word	0x5802546c
 8002f94:	58025480 	.word	0x58025480
 8002f98:	58025494 	.word	0x58025494
 8002f9c:	fffe000f 	.word	0xfffe000f
 8002fa0:	a7fdabf8 	.word	0xa7fdabf8
 8002fa4:	cccccccd 	.word	0xcccccccd
 8002fa8:	40020010 	.word	0x40020010
 8002fac:	40020028 	.word	0x40020028
 8002fb0:	40020040 	.word	0x40020040
 8002fb4:	40020058 	.word	0x40020058
 8002fb8:	40020070 	.word	0x40020070
 8002fbc:	40020088 	.word	0x40020088
 8002fc0:	400200a0 	.word	0x400200a0
 8002fc4:	400200b8 	.word	0x400200b8
 8002fc8:	40020410 	.word	0x40020410
 8002fcc:	40020428 	.word	0x40020428
 8002fd0:	40020440 	.word	0x40020440
 8002fd4:	40020458 	.word	0x40020458
 8002fd8:	40020470 	.word	0x40020470
 8002fdc:	40020488 	.word	0x40020488
 8002fe0:	400204a0 	.word	0x400204a0
 8002fe4:	400204b8 	.word	0x400204b8
 8002fe8:	2300      	movs	r3, #0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d032      	beq.n	8003054 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f001 f8cc 	bl	800418c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b80      	cmp	r3, #128	; 0x80
 8002ffa:	d102      	bne.n	8003002 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003016:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_DMA_Init+0x6f6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d80c      	bhi.n	8003042 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f001 f949 	bl	80042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	e008      	b.n	8003054 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003078:	4b67      	ldr	r3, [pc, #412]	; (8003218 <HAL_DMA_IRQHandler+0x1ac>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a67      	ldr	r2, [pc, #412]	; (800321c <HAL_DMA_IRQHandler+0x1b0>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0a9b      	lsrs	r3, r3, #10
 8003084:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a5f      	ldr	r2, [pc, #380]	; (8003220 <HAL_DMA_IRQHandler+0x1b4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d04a      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a5d      	ldr	r2, [pc, #372]	; (8003224 <HAL_DMA_IRQHandler+0x1b8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d045      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a5c      	ldr	r2, [pc, #368]	; (8003228 <HAL_DMA_IRQHandler+0x1bc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d040      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a5a      	ldr	r2, [pc, #360]	; (800322c <HAL_DMA_IRQHandler+0x1c0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d03b      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a59      	ldr	r2, [pc, #356]	; (8003230 <HAL_DMA_IRQHandler+0x1c4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d036      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a57      	ldr	r2, [pc, #348]	; (8003234 <HAL_DMA_IRQHandler+0x1c8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d031      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a56      	ldr	r2, [pc, #344]	; (8003238 <HAL_DMA_IRQHandler+0x1cc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d02c      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a54      	ldr	r2, [pc, #336]	; (800323c <HAL_DMA_IRQHandler+0x1d0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d027      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a53      	ldr	r2, [pc, #332]	; (8003240 <HAL_DMA_IRQHandler+0x1d4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d022      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a51      	ldr	r2, [pc, #324]	; (8003244 <HAL_DMA_IRQHandler+0x1d8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01d      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a50      	ldr	r2, [pc, #320]	; (8003248 <HAL_DMA_IRQHandler+0x1dc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d018      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a4e      	ldr	r2, [pc, #312]	; (800324c <HAL_DMA_IRQHandler+0x1e0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a4d      	ldr	r2, [pc, #308]	; (8003250 <HAL_DMA_IRQHandler+0x1e4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00e      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a4b      	ldr	r2, [pc, #300]	; (8003254 <HAL_DMA_IRQHandler+0x1e8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d009      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a4a      	ldr	r2, [pc, #296]	; (8003258 <HAL_DMA_IRQHandler+0x1ec>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d004      	beq.n	800313e <HAL_DMA_IRQHandler+0xd2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a48      	ldr	r2, [pc, #288]	; (800325c <HAL_DMA_IRQHandler+0x1f0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_DMA_IRQHandler+0xd6>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_DMA_IRQHandler+0xd8>
 8003142:	2300      	movs	r3, #0
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 842b 	beq.w	80039a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	2208      	movs	r2, #8
 8003154:	409a      	lsls	r2, r3
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80a2 	beq.w	80032a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2e      	ldr	r2, [pc, #184]	; (8003220 <HAL_DMA_IRQHandler+0x1b4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d04a      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2d      	ldr	r2, [pc, #180]	; (8003224 <HAL_DMA_IRQHandler+0x1b8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d045      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2b      	ldr	r2, [pc, #172]	; (8003228 <HAL_DMA_IRQHandler+0x1bc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d040      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a2a      	ldr	r2, [pc, #168]	; (800322c <HAL_DMA_IRQHandler+0x1c0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d03b      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a28      	ldr	r2, [pc, #160]	; (8003230 <HAL_DMA_IRQHandler+0x1c4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d036      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a27      	ldr	r2, [pc, #156]	; (8003234 <HAL_DMA_IRQHandler+0x1c8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d031      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a25      	ldr	r2, [pc, #148]	; (8003238 <HAL_DMA_IRQHandler+0x1cc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d02c      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a24      	ldr	r2, [pc, #144]	; (800323c <HAL_DMA_IRQHandler+0x1d0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d027      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a22      	ldr	r2, [pc, #136]	; (8003240 <HAL_DMA_IRQHandler+0x1d4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d022      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a21      	ldr	r2, [pc, #132]	; (8003244 <HAL_DMA_IRQHandler+0x1d8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d01d      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <HAL_DMA_IRQHandler+0x1dc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d018      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1e      	ldr	r2, [pc, #120]	; (800324c <HAL_DMA_IRQHandler+0x1e0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d013      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_DMA_IRQHandler+0x1e4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00e      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <HAL_DMA_IRQHandler+0x1e8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_DMA_IRQHandler+0x1ec>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_DMA_IRQHandler+0x194>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a18      	ldr	r2, [pc, #96]	; (800325c <HAL_DMA_IRQHandler+0x1f0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d12f      	bne.n	8003260 <HAL_DMA_IRQHandler+0x1f4>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf14      	ite	ne
 800320e:	2301      	movne	r3, #1
 8003210:	2300      	moveq	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	e02e      	b.n	8003274 <HAL_DMA_IRQHandler+0x208>
 8003216:	bf00      	nop
 8003218:	24000004 	.word	0x24000004
 800321c:	1b4e81b5 	.word	0x1b4e81b5
 8003220:	40020010 	.word	0x40020010
 8003224:	40020028 	.word	0x40020028
 8003228:	40020040 	.word	0x40020040
 800322c:	40020058 	.word	0x40020058
 8003230:	40020070 	.word	0x40020070
 8003234:	40020088 	.word	0x40020088
 8003238:	400200a0 	.word	0x400200a0
 800323c:	400200b8 	.word	0x400200b8
 8003240:	40020410 	.word	0x40020410
 8003244:	40020428 	.word	0x40020428
 8003248:	40020440 	.word	0x40020440
 800324c:	40020458 	.word	0x40020458
 8003250:	40020470 	.word	0x40020470
 8003254:	40020488 	.word	0x40020488
 8003258:	400204a0 	.word	0x400204a0
 800325c:	400204b8 	.word	0x400204b8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	bf14      	ite	ne
 800326e:	2301      	movne	r3, #1
 8003270:	2300      	moveq	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d015      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0204 	bic.w	r2, r2, #4
 8003286:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	2208      	movs	r2, #8
 8003292:	409a      	lsls	r2, r3
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329c:	f043 0201 	orr.w	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d06e      	beq.n	8003398 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a69      	ldr	r2, [pc, #420]	; (8003464 <HAL_DMA_IRQHandler+0x3f8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d04a      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a67      	ldr	r2, [pc, #412]	; (8003468 <HAL_DMA_IRQHandler+0x3fc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d045      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a66      	ldr	r2, [pc, #408]	; (800346c <HAL_DMA_IRQHandler+0x400>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d040      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a64      	ldr	r2, [pc, #400]	; (8003470 <HAL_DMA_IRQHandler+0x404>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d03b      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a63      	ldr	r2, [pc, #396]	; (8003474 <HAL_DMA_IRQHandler+0x408>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d036      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a61      	ldr	r2, [pc, #388]	; (8003478 <HAL_DMA_IRQHandler+0x40c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d031      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a60      	ldr	r2, [pc, #384]	; (800347c <HAL_DMA_IRQHandler+0x410>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d02c      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a5e      	ldr	r2, [pc, #376]	; (8003480 <HAL_DMA_IRQHandler+0x414>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d027      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5d      	ldr	r2, [pc, #372]	; (8003484 <HAL_DMA_IRQHandler+0x418>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a5b      	ldr	r2, [pc, #364]	; (8003488 <HAL_DMA_IRQHandler+0x41c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a5a      	ldr	r2, [pc, #360]	; (800348c <HAL_DMA_IRQHandler+0x420>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d018      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a58      	ldr	r2, [pc, #352]	; (8003490 <HAL_DMA_IRQHandler+0x424>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a57      	ldr	r2, [pc, #348]	; (8003494 <HAL_DMA_IRQHandler+0x428>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a55      	ldr	r2, [pc, #340]	; (8003498 <HAL_DMA_IRQHandler+0x42c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a54      	ldr	r2, [pc, #336]	; (800349c <HAL_DMA_IRQHandler+0x430>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_DMA_IRQHandler+0x2ee>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_DMA_IRQHandler+0x434>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10a      	bne.n	8003370 <HAL_DMA_IRQHandler+0x304>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	e003      	b.n	8003378 <HAL_DMA_IRQHandler+0x30c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00d      	beq.n	8003398 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2201      	movs	r2, #1
 8003386:	409a      	lsls	r2, r3
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003390:	f043 0202 	orr.w	r2, r3, #2
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	2204      	movs	r2, #4
 80033a2:	409a      	lsls	r2, r3
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 808f 	beq.w	80034cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a2c      	ldr	r2, [pc, #176]	; (8003464 <HAL_DMA_IRQHandler+0x3f8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d04a      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a2a      	ldr	r2, [pc, #168]	; (8003468 <HAL_DMA_IRQHandler+0x3fc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d045      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a29      	ldr	r2, [pc, #164]	; (800346c <HAL_DMA_IRQHandler+0x400>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d040      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a27      	ldr	r2, [pc, #156]	; (8003470 <HAL_DMA_IRQHandler+0x404>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d03b      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a26      	ldr	r2, [pc, #152]	; (8003474 <HAL_DMA_IRQHandler+0x408>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d036      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a24      	ldr	r2, [pc, #144]	; (8003478 <HAL_DMA_IRQHandler+0x40c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d031      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a23      	ldr	r2, [pc, #140]	; (800347c <HAL_DMA_IRQHandler+0x410>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d02c      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a21      	ldr	r2, [pc, #132]	; (8003480 <HAL_DMA_IRQHandler+0x414>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d027      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a20      	ldr	r2, [pc, #128]	; (8003484 <HAL_DMA_IRQHandler+0x418>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d022      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1e      	ldr	r2, [pc, #120]	; (8003488 <HAL_DMA_IRQHandler+0x41c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01d      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1d      	ldr	r2, [pc, #116]	; (800348c <HAL_DMA_IRQHandler+0x420>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d018      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <HAL_DMA_IRQHandler+0x424>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_DMA_IRQHandler+0x428>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00e      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a18      	ldr	r2, [pc, #96]	; (8003498 <HAL_DMA_IRQHandler+0x42c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d009      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_DMA_IRQHandler+0x430>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_DMA_IRQHandler+0x3e2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <HAL_DMA_IRQHandler+0x434>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d12a      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x438>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	e023      	b.n	80034ac <HAL_DMA_IRQHandler+0x440>
 8003464:	40020010 	.word	0x40020010
 8003468:	40020028 	.word	0x40020028
 800346c:	40020040 	.word	0x40020040
 8003470:	40020058 	.word	0x40020058
 8003474:	40020070 	.word	0x40020070
 8003478:	40020088 	.word	0x40020088
 800347c:	400200a0 	.word	0x400200a0
 8003480:	400200b8 	.word	0x400200b8
 8003484:	40020410 	.word	0x40020410
 8003488:	40020428 	.word	0x40020428
 800348c:	40020440 	.word	0x40020440
 8003490:	40020458 	.word	0x40020458
 8003494:	40020470 	.word	0x40020470
 8003498:	40020488 	.word	0x40020488
 800349c:	400204a0 	.word	0x400204a0
 80034a0:	400204b8 	.word	0x400204b8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2300      	movs	r3, #0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	2204      	movs	r2, #4
 80034ba:	409a      	lsls	r2, r3
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	f043 0204 	orr.w	r2, r3, #4
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	2210      	movs	r2, #16
 80034d6:	409a      	lsls	r2, r3
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a6 	beq.w	800362e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a85      	ldr	r2, [pc, #532]	; (80036fc <HAL_DMA_IRQHandler+0x690>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d04a      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a83      	ldr	r2, [pc, #524]	; (8003700 <HAL_DMA_IRQHandler+0x694>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d045      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a82      	ldr	r2, [pc, #520]	; (8003704 <HAL_DMA_IRQHandler+0x698>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d040      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a80      	ldr	r2, [pc, #512]	; (8003708 <HAL_DMA_IRQHandler+0x69c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d03b      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a7f      	ldr	r2, [pc, #508]	; (800370c <HAL_DMA_IRQHandler+0x6a0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d036      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a7d      	ldr	r2, [pc, #500]	; (8003710 <HAL_DMA_IRQHandler+0x6a4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d031      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a7c      	ldr	r2, [pc, #496]	; (8003714 <HAL_DMA_IRQHandler+0x6a8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d02c      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a7a      	ldr	r2, [pc, #488]	; (8003718 <HAL_DMA_IRQHandler+0x6ac>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d027      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a79      	ldr	r2, [pc, #484]	; (800371c <HAL_DMA_IRQHandler+0x6b0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d022      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a77      	ldr	r2, [pc, #476]	; (8003720 <HAL_DMA_IRQHandler+0x6b4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01d      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a76      	ldr	r2, [pc, #472]	; (8003724 <HAL_DMA_IRQHandler+0x6b8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d018      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a74      	ldr	r2, [pc, #464]	; (8003728 <HAL_DMA_IRQHandler+0x6bc>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a73      	ldr	r2, [pc, #460]	; (800372c <HAL_DMA_IRQHandler+0x6c0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a71      	ldr	r2, [pc, #452]	; (8003730 <HAL_DMA_IRQHandler+0x6c4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d009      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a70      	ldr	r2, [pc, #448]	; (8003734 <HAL_DMA_IRQHandler+0x6c8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_DMA_IRQHandler+0x516>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a6e      	ldr	r2, [pc, #440]	; (8003738 <HAL_DMA_IRQHandler+0x6cc>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10a      	bne.n	8003598 <HAL_DMA_IRQHandler+0x52c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e009      	b.n	80035ac <HAL_DMA_IRQHandler+0x540>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d03e      	beq.n	800362e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2210      	movs	r2, #16
 80035ba:	409a      	lsls	r2, r3
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d108      	bne.n	80035ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d024      	beq.n	800362e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
 80035ec:	e01f      	b.n	800362e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d01b      	beq.n	800362e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
 80035fe:	e016      	b.n	800362e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d107      	bne.n	800361e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0208 	bic.w	r2, r2, #8
 800361c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	2220      	movs	r2, #32
 8003638:	409a      	lsls	r2, r3
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8110 	beq.w	8003864 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2c      	ldr	r2, [pc, #176]	; (80036fc <HAL_DMA_IRQHandler+0x690>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d04a      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a2b      	ldr	r2, [pc, #172]	; (8003700 <HAL_DMA_IRQHandler+0x694>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d045      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a29      	ldr	r2, [pc, #164]	; (8003704 <HAL_DMA_IRQHandler+0x698>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d040      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a28      	ldr	r2, [pc, #160]	; (8003708 <HAL_DMA_IRQHandler+0x69c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d03b      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a26      	ldr	r2, [pc, #152]	; (800370c <HAL_DMA_IRQHandler+0x6a0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d036      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a25      	ldr	r2, [pc, #148]	; (8003710 <HAL_DMA_IRQHandler+0x6a4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d031      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a23      	ldr	r2, [pc, #140]	; (8003714 <HAL_DMA_IRQHandler+0x6a8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d02c      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a22      	ldr	r2, [pc, #136]	; (8003718 <HAL_DMA_IRQHandler+0x6ac>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d027      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a20      	ldr	r2, [pc, #128]	; (800371c <HAL_DMA_IRQHandler+0x6b0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d022      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <HAL_DMA_IRQHandler+0x6b4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d01d      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1d      	ldr	r2, [pc, #116]	; (8003724 <HAL_DMA_IRQHandler+0x6b8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d018      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1c      	ldr	r2, [pc, #112]	; (8003728 <HAL_DMA_IRQHandler+0x6bc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d013      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1a      	ldr	r2, [pc, #104]	; (800372c <HAL_DMA_IRQHandler+0x6c0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00e      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_DMA_IRQHandler+0x6c4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a17      	ldr	r2, [pc, #92]	; (8003734 <HAL_DMA_IRQHandler+0x6c8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x678>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a16      	ldr	r2, [pc, #88]	; (8003738 <HAL_DMA_IRQHandler+0x6cc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d12b      	bne.n	800373c <HAL_DMA_IRQHandler+0x6d0>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	bf14      	ite	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	2300      	moveq	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e02a      	b.n	8003750 <HAL_DMA_IRQHandler+0x6e4>
 80036fa:	bf00      	nop
 80036fc:	40020010 	.word	0x40020010
 8003700:	40020028 	.word	0x40020028
 8003704:	40020040 	.word	0x40020040
 8003708:	40020058 	.word	0x40020058
 800370c:	40020070 	.word	0x40020070
 8003710:	40020088 	.word	0x40020088
 8003714:	400200a0 	.word	0x400200a0
 8003718:	400200b8 	.word	0x400200b8
 800371c:	40020410 	.word	0x40020410
 8003720:	40020428 	.word	0x40020428
 8003724:	40020440 	.word	0x40020440
 8003728:	40020458 	.word	0x40020458
 800372c:	40020470 	.word	0x40020470
 8003730:	40020488 	.word	0x40020488
 8003734:	400204a0 	.word	0x400204a0
 8003738:	400204b8 	.word	0x400204b8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	bf14      	ite	ne
 800374a:	2301      	movne	r3, #1
 800374c:	2300      	moveq	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8087 	beq.w	8003864 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	2220      	movs	r2, #32
 8003760:	409a      	lsls	r2, r3
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b04      	cmp	r3, #4
 8003770:	d139      	bne.n	80037e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0216 	bic.w	r2, r2, #22
 8003780:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003790:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d103      	bne.n	80037a2 <HAL_DMA_IRQHandler+0x736>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0208 	bic.w	r2, r2, #8
 80037b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	223f      	movs	r2, #63	; 0x3f
 80037bc:	409a      	lsls	r2, r3
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8382 	beq.w	8003ee0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
          }
          return;
 80037e4:	e37c      	b.n	8003ee0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d018      	beq.n	8003826 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d108      	bne.n	8003814 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	2b00      	cmp	r3, #0
 8003808:	d02c      	beq.n	8003864 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4798      	blx	r3
 8003812:	e027      	b.n	8003864 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d023      	beq.n	8003864 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
 8003824:	e01e      	b.n	8003864 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10f      	bne.n	8003854 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0210 	bic.w	r2, r2, #16
 8003842:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 833e 	beq.w	8003eea <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8088 	beq.w	800398c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2204      	movs	r2, #4
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a89      	ldr	r2, [pc, #548]	; (8003ab0 <HAL_DMA_IRQHandler+0xa44>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d04a      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a88      	ldr	r2, [pc, #544]	; (8003ab4 <HAL_DMA_IRQHandler+0xa48>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d045      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a86      	ldr	r2, [pc, #536]	; (8003ab8 <HAL_DMA_IRQHandler+0xa4c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d040      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a85      	ldr	r2, [pc, #532]	; (8003abc <HAL_DMA_IRQHandler+0xa50>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d03b      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a83      	ldr	r2, [pc, #524]	; (8003ac0 <HAL_DMA_IRQHandler+0xa54>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d036      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a82      	ldr	r2, [pc, #520]	; (8003ac4 <HAL_DMA_IRQHandler+0xa58>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d031      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a80      	ldr	r2, [pc, #512]	; (8003ac8 <HAL_DMA_IRQHandler+0xa5c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d02c      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7f      	ldr	r2, [pc, #508]	; (8003acc <HAL_DMA_IRQHandler+0xa60>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d027      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a7d      	ldr	r2, [pc, #500]	; (8003ad0 <HAL_DMA_IRQHandler+0xa64>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d022      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a7c      	ldr	r2, [pc, #496]	; (8003ad4 <HAL_DMA_IRQHandler+0xa68>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d01d      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a7a      	ldr	r2, [pc, #488]	; (8003ad8 <HAL_DMA_IRQHandler+0xa6c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d018      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a79      	ldr	r2, [pc, #484]	; (8003adc <HAL_DMA_IRQHandler+0xa70>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a77      	ldr	r2, [pc, #476]	; (8003ae0 <HAL_DMA_IRQHandler+0xa74>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00e      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a76      	ldr	r2, [pc, #472]	; (8003ae4 <HAL_DMA_IRQHandler+0xa78>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a74      	ldr	r2, [pc, #464]	; (8003ae8 <HAL_DMA_IRQHandler+0xa7c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_DMA_IRQHandler+0x8b8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a73      	ldr	r2, [pc, #460]	; (8003aec <HAL_DMA_IRQHandler+0xa80>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d108      	bne.n	8003936 <HAL_DMA_IRQHandler+0x8ca>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e007      	b.n	8003946 <HAL_DMA_IRQHandler+0x8da>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3301      	adds	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394e:	429a      	cmp	r2, r3
 8003950:	d307      	bcc.n	8003962 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f2      	bne.n	8003946 <HAL_DMA_IRQHandler+0x8da>
 8003960:	e000      	b.n	8003964 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003962:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2203      	movs	r2, #3
 8003976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800397a:	e003      	b.n	8003984 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 82aa 	beq.w	8003eea <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
 800399e:	e2a4      	b.n	8003eea <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a52      	ldr	r2, [pc, #328]	; (8003af0 <HAL_DMA_IRQHandler+0xa84>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d04a      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a51      	ldr	r2, [pc, #324]	; (8003af4 <HAL_DMA_IRQHandler+0xa88>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d045      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a4f      	ldr	r2, [pc, #316]	; (8003af8 <HAL_DMA_IRQHandler+0xa8c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d040      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a4e      	ldr	r2, [pc, #312]	; (8003afc <HAL_DMA_IRQHandler+0xa90>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d03b      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a4c      	ldr	r2, [pc, #304]	; (8003b00 <HAL_DMA_IRQHandler+0xa94>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d036      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a4b      	ldr	r2, [pc, #300]	; (8003b04 <HAL_DMA_IRQHandler+0xa98>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d031      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a49      	ldr	r2, [pc, #292]	; (8003b08 <HAL_DMA_IRQHandler+0xa9c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d02c      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a48      	ldr	r2, [pc, #288]	; (8003b0c <HAL_DMA_IRQHandler+0xaa0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d027      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a46      	ldr	r2, [pc, #280]	; (8003b10 <HAL_DMA_IRQHandler+0xaa4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d022      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a45      	ldr	r2, [pc, #276]	; (8003b14 <HAL_DMA_IRQHandler+0xaa8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d01d      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a43      	ldr	r2, [pc, #268]	; (8003b18 <HAL_DMA_IRQHandler+0xaac>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d018      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a42      	ldr	r2, [pc, #264]	; (8003b1c <HAL_DMA_IRQHandler+0xab0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d013      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a40      	ldr	r2, [pc, #256]	; (8003b20 <HAL_DMA_IRQHandler+0xab4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00e      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a3f      	ldr	r2, [pc, #252]	; (8003b24 <HAL_DMA_IRQHandler+0xab8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d009      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a3d      	ldr	r2, [pc, #244]	; (8003b28 <HAL_DMA_IRQHandler+0xabc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x9d4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a3c      	ldr	r2, [pc, #240]	; (8003b2c <HAL_DMA_IRQHandler+0xac0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d101      	bne.n	8003a44 <HAL_DMA_IRQHandler+0x9d8>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_DMA_IRQHandler+0x9da>
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 824f 	beq.w	8003eea <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80dd 	beq.w	8003c24 <HAL_DMA_IRQHandler+0xbb8>
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80d7 	beq.w	8003c24 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2204      	movs	r2, #4
 8003a80:	409a      	lsls	r2, r3
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d059      	beq.n	8003b44 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d14a      	bne.n	8003b30 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8220 	beq.w	8003ee4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aac:	e21a      	b.n	8003ee4 <HAL_DMA_IRQHandler+0xe78>
 8003aae:	bf00      	nop
 8003ab0:	40020010 	.word	0x40020010
 8003ab4:	40020028 	.word	0x40020028
 8003ab8:	40020040 	.word	0x40020040
 8003abc:	40020058 	.word	0x40020058
 8003ac0:	40020070 	.word	0x40020070
 8003ac4:	40020088 	.word	0x40020088
 8003ac8:	400200a0 	.word	0x400200a0
 8003acc:	400200b8 	.word	0x400200b8
 8003ad0:	40020410 	.word	0x40020410
 8003ad4:	40020428 	.word	0x40020428
 8003ad8:	40020440 	.word	0x40020440
 8003adc:	40020458 	.word	0x40020458
 8003ae0:	40020470 	.word	0x40020470
 8003ae4:	40020488 	.word	0x40020488
 8003ae8:	400204a0 	.word	0x400204a0
 8003aec:	400204b8 	.word	0x400204b8
 8003af0:	48022c08 	.word	0x48022c08
 8003af4:	48022c1c 	.word	0x48022c1c
 8003af8:	48022c30 	.word	0x48022c30
 8003afc:	48022c44 	.word	0x48022c44
 8003b00:	48022c58 	.word	0x48022c58
 8003b04:	48022c6c 	.word	0x48022c6c
 8003b08:	48022c80 	.word	0x48022c80
 8003b0c:	48022c94 	.word	0x48022c94
 8003b10:	58025408 	.word	0x58025408
 8003b14:	5802541c 	.word	0x5802541c
 8003b18:	58025430 	.word	0x58025430
 8003b1c:	58025444 	.word	0x58025444
 8003b20:	58025458 	.word	0x58025458
 8003b24:	5802546c 	.word	0x5802546c
 8003b28:	58025480 	.word	0x58025480
 8003b2c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 81d5 	beq.w	8003ee4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b42:	e1cf      	b.n	8003ee4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d160      	bne.n	8003c10 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a7f      	ldr	r2, [pc, #508]	; (8003d50 <HAL_DMA_IRQHandler+0xce4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d04a      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a7d      	ldr	r2, [pc, #500]	; (8003d54 <HAL_DMA_IRQHandler+0xce8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d045      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a7c      	ldr	r2, [pc, #496]	; (8003d58 <HAL_DMA_IRQHandler+0xcec>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d040      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a7a      	ldr	r2, [pc, #488]	; (8003d5c <HAL_DMA_IRQHandler+0xcf0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d03b      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a79      	ldr	r2, [pc, #484]	; (8003d60 <HAL_DMA_IRQHandler+0xcf4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d036      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a77      	ldr	r2, [pc, #476]	; (8003d64 <HAL_DMA_IRQHandler+0xcf8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d031      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a76      	ldr	r2, [pc, #472]	; (8003d68 <HAL_DMA_IRQHandler+0xcfc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d02c      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a74      	ldr	r2, [pc, #464]	; (8003d6c <HAL_DMA_IRQHandler+0xd00>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d027      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a73      	ldr	r2, [pc, #460]	; (8003d70 <HAL_DMA_IRQHandler+0xd04>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a71      	ldr	r2, [pc, #452]	; (8003d74 <HAL_DMA_IRQHandler+0xd08>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01d      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a70      	ldr	r2, [pc, #448]	; (8003d78 <HAL_DMA_IRQHandler+0xd0c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d018      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a6e      	ldr	r2, [pc, #440]	; (8003d7c <HAL_DMA_IRQHandler+0xd10>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a6d      	ldr	r2, [pc, #436]	; (8003d80 <HAL_DMA_IRQHandler+0xd14>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a6b      	ldr	r2, [pc, #428]	; (8003d84 <HAL_DMA_IRQHandler+0xd18>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a6a      	ldr	r2, [pc, #424]	; (8003d88 <HAL_DMA_IRQHandler+0xd1c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_DMA_IRQHandler+0xb82>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a68      	ldr	r2, [pc, #416]	; (8003d8c <HAL_DMA_IRQHandler+0xd20>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d108      	bne.n	8003c00 <HAL_DMA_IRQHandler+0xb94>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0208 	bic.w	r2, r2, #8
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e007      	b.n	8003c10 <HAL_DMA_IRQHandler+0xba4>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0204 	bic.w	r2, r2, #4
 8003c0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8165 	beq.w	8003ee4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c22:	e15f      	b.n	8003ee4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80c5 	beq.w	8003dc4 <HAL_DMA_IRQHandler+0xd58>
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80bf 	beq.w	8003dc4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	2202      	movs	r2, #2
 8003c50:	409a      	lsls	r2, r3
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d018      	beq.n	8003c92 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 813a 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c7c:	e134      	b.n	8003ee8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8130 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c90:	e12a      	b.n	8003ee8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f040 8089 	bne.w	8003db0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2b      	ldr	r2, [pc, #172]	; (8003d50 <HAL_DMA_IRQHandler+0xce4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d04a      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a29      	ldr	r2, [pc, #164]	; (8003d54 <HAL_DMA_IRQHandler+0xce8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d045      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a28      	ldr	r2, [pc, #160]	; (8003d58 <HAL_DMA_IRQHandler+0xcec>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d040      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <HAL_DMA_IRQHandler+0xcf0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d03b      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a25      	ldr	r2, [pc, #148]	; (8003d60 <HAL_DMA_IRQHandler+0xcf4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d036      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a23      	ldr	r2, [pc, #140]	; (8003d64 <HAL_DMA_IRQHandler+0xcf8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d031      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a22      	ldr	r2, [pc, #136]	; (8003d68 <HAL_DMA_IRQHandler+0xcfc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d02c      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a20      	ldr	r2, [pc, #128]	; (8003d6c <HAL_DMA_IRQHandler+0xd00>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d027      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1f      	ldr	r2, [pc, #124]	; (8003d70 <HAL_DMA_IRQHandler+0xd04>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d022      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <HAL_DMA_IRQHandler+0xd08>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01d      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1c      	ldr	r2, [pc, #112]	; (8003d78 <HAL_DMA_IRQHandler+0xd0c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d018      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1a      	ldr	r2, [pc, #104]	; (8003d7c <HAL_DMA_IRQHandler+0xd10>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <HAL_DMA_IRQHandler+0xd14>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00e      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <HAL_DMA_IRQHandler+0xd18>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d009      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <HAL_DMA_IRQHandler+0xd1c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xcd2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <HAL_DMA_IRQHandler+0xd20>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d128      	bne.n	8003d90 <HAL_DMA_IRQHandler+0xd24>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0214 	bic.w	r2, r2, #20
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e027      	b.n	8003da0 <HAL_DMA_IRQHandler+0xd34>
 8003d50:	40020010 	.word	0x40020010
 8003d54:	40020028 	.word	0x40020028
 8003d58:	40020040 	.word	0x40020040
 8003d5c:	40020058 	.word	0x40020058
 8003d60:	40020070 	.word	0x40020070
 8003d64:	40020088 	.word	0x40020088
 8003d68:	400200a0 	.word	0x400200a0
 8003d6c:	400200b8 	.word	0x400200b8
 8003d70:	40020410 	.word	0x40020410
 8003d74:	40020428 	.word	0x40020428
 8003d78:	40020440 	.word	0x40020440
 8003d7c:	40020458 	.word	0x40020458
 8003d80:	40020470 	.word	0x40020470
 8003d84:	40020488 	.word	0x40020488
 8003d88:	400204a0 	.word	0x400204a0
 8003d8c:	400204b8 	.word	0x400204b8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 020a 	bic.w	r2, r2, #10
 8003d9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8097 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc2:	e091      	b.n	8003ee8 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2208      	movs	r2, #8
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8088 	beq.w	8003eea <HAL_DMA_IRQHandler+0xe7e>
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 8082 	beq.w	8003eea <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a41      	ldr	r2, [pc, #260]	; (8003ef0 <HAL_DMA_IRQHandler+0xe84>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d04a      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a3f      	ldr	r2, [pc, #252]	; (8003ef4 <HAL_DMA_IRQHandler+0xe88>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d045      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a3e      	ldr	r2, [pc, #248]	; (8003ef8 <HAL_DMA_IRQHandler+0xe8c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d040      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a3c      	ldr	r2, [pc, #240]	; (8003efc <HAL_DMA_IRQHandler+0xe90>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d03b      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a3b      	ldr	r2, [pc, #236]	; (8003f00 <HAL_DMA_IRQHandler+0xe94>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d036      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a39      	ldr	r2, [pc, #228]	; (8003f04 <HAL_DMA_IRQHandler+0xe98>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d031      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a38      	ldr	r2, [pc, #224]	; (8003f08 <HAL_DMA_IRQHandler+0xe9c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d02c      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a36      	ldr	r2, [pc, #216]	; (8003f0c <HAL_DMA_IRQHandler+0xea0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d027      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a35      	ldr	r2, [pc, #212]	; (8003f10 <HAL_DMA_IRQHandler+0xea4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d022      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a33      	ldr	r2, [pc, #204]	; (8003f14 <HAL_DMA_IRQHandler+0xea8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01d      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a32      	ldr	r2, [pc, #200]	; (8003f18 <HAL_DMA_IRQHandler+0xeac>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d018      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a30      	ldr	r2, [pc, #192]	; (8003f1c <HAL_DMA_IRQHandler+0xeb0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a2f      	ldr	r2, [pc, #188]	; (8003f20 <HAL_DMA_IRQHandler+0xeb4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00e      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2d      	ldr	r2, [pc, #180]	; (8003f24 <HAL_DMA_IRQHandler+0xeb8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d009      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2c      	ldr	r2, [pc, #176]	; (8003f28 <HAL_DMA_IRQHandler+0xebc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d004      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xe1a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <HAL_DMA_IRQHandler+0xec0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d108      	bne.n	8003e98 <HAL_DMA_IRQHandler+0xe2c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 021c 	bic.w	r2, r2, #28
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e007      	b.n	8003ea8 <HAL_DMA_IRQHandler+0xe3c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 020e 	bic.w	r2, r2, #14
 8003ea6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
 8003ede:	e004      	b.n	8003eea <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003ee0:	bf00      	nop
 8003ee2:	e002      	b.n	8003eea <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee4:	bf00      	nop
 8003ee6:	e000      	b.n	8003eea <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003eea:	3728      	adds	r7, #40	; 0x28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40020010 	.word	0x40020010
 8003ef4:	40020028 	.word	0x40020028
 8003ef8:	40020040 	.word	0x40020040
 8003efc:	40020058 	.word	0x40020058
 8003f00:	40020070 	.word	0x40020070
 8003f04:	40020088 	.word	0x40020088
 8003f08:	400200a0 	.word	0x400200a0
 8003f0c:	400200b8 	.word	0x400200b8
 8003f10:	40020410 	.word	0x40020410
 8003f14:	40020428 	.word	0x40020428
 8003f18:	40020440 	.word	0x40020440
 8003f1c:	40020458 	.word	0x40020458
 8003f20:	40020470 	.word	0x40020470
 8003f24:	40020488 	.word	0x40020488
 8003f28:	400204a0 	.word	0x400204a0
 8003f2c:	400204b8 	.word	0x400204b8

08003f30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a42      	ldr	r2, [pc, #264]	; (8004048 <DMA_CalcBaseAndBitshift+0x118>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d04a      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a41      	ldr	r2, [pc, #260]	; (800404c <DMA_CalcBaseAndBitshift+0x11c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d045      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a3f      	ldr	r2, [pc, #252]	; (8004050 <DMA_CalcBaseAndBitshift+0x120>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d040      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3e      	ldr	r2, [pc, #248]	; (8004054 <DMA_CalcBaseAndBitshift+0x124>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d03b      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3c      	ldr	r2, [pc, #240]	; (8004058 <DMA_CalcBaseAndBitshift+0x128>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d036      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a3b      	ldr	r2, [pc, #236]	; (800405c <DMA_CalcBaseAndBitshift+0x12c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d031      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a39      	ldr	r2, [pc, #228]	; (8004060 <DMA_CalcBaseAndBitshift+0x130>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d02c      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a38      	ldr	r2, [pc, #224]	; (8004064 <DMA_CalcBaseAndBitshift+0x134>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d027      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a36      	ldr	r2, [pc, #216]	; (8004068 <DMA_CalcBaseAndBitshift+0x138>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d022      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a35      	ldr	r2, [pc, #212]	; (800406c <DMA_CalcBaseAndBitshift+0x13c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d01d      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a33      	ldr	r2, [pc, #204]	; (8004070 <DMA_CalcBaseAndBitshift+0x140>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d018      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a32      	ldr	r2, [pc, #200]	; (8004074 <DMA_CalcBaseAndBitshift+0x144>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d013      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a30      	ldr	r2, [pc, #192]	; (8004078 <DMA_CalcBaseAndBitshift+0x148>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00e      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2f      	ldr	r2, [pc, #188]	; (800407c <DMA_CalcBaseAndBitshift+0x14c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d009      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2d      	ldr	r2, [pc, #180]	; (8004080 <DMA_CalcBaseAndBitshift+0x150>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d004      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a2c      	ldr	r2, [pc, #176]	; (8004084 <DMA_CalcBaseAndBitshift+0x154>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d101      	bne.n	8003fdc <DMA_CalcBaseAndBitshift+0xac>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <DMA_CalcBaseAndBitshift+0xae>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d024      	beq.n	800402c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	3b10      	subs	r3, #16
 8003fea:	4a27      	ldr	r2, [pc, #156]	; (8004088 <DMA_CalcBaseAndBitshift+0x158>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	4a24      	ldr	r2, [pc, #144]	; (800408c <DMA_CalcBaseAndBitshift+0x15c>)
 8003ffc:	5cd3      	ldrb	r3, [r2, r3]
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d908      	bls.n	800401c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <DMA_CalcBaseAndBitshift+0x160>)
 8004012:	4013      	ands	r3, r2
 8004014:	1d1a      	adds	r2, r3, #4
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	659a      	str	r2, [r3, #88]	; 0x58
 800401a:	e00d      	b.n	8004038 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <DMA_CalcBaseAndBitshift+0x160>)
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6593      	str	r3, [r2, #88]	; 0x58
 800402a:	e005      	b.n	8004038 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40020010 	.word	0x40020010
 800404c:	40020028 	.word	0x40020028
 8004050:	40020040 	.word	0x40020040
 8004054:	40020058 	.word	0x40020058
 8004058:	40020070 	.word	0x40020070
 800405c:	40020088 	.word	0x40020088
 8004060:	400200a0 	.word	0x400200a0
 8004064:	400200b8 	.word	0x400200b8
 8004068:	40020410 	.word	0x40020410
 800406c:	40020428 	.word	0x40020428
 8004070:	40020440 	.word	0x40020440
 8004074:	40020458 	.word	0x40020458
 8004078:	40020470 	.word	0x40020470
 800407c:	40020488 	.word	0x40020488
 8004080:	400204a0 	.word	0x400204a0
 8004084:	400204b8 	.word	0x400204b8
 8004088:	aaaaaaab 	.word	0xaaaaaaab
 800408c:	0800ae8c 	.word	0x0800ae8c
 8004090:	fffffc00 	.word	0xfffffc00

08004094 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d120      	bne.n	80040ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d858      	bhi.n	8004162 <DMA_CheckFifoParam+0xce>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <DMA_CheckFifoParam+0x24>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040c9 	.word	0x080040c9
 80040bc:	080040db 	.word	0x080040db
 80040c0:	080040c9 	.word	0x080040c9
 80040c4:	08004163 	.word	0x08004163
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d048      	beq.n	8004166 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040d8:	e045      	b.n	8004166 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040e2:	d142      	bne.n	800416a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040e8:	e03f      	b.n	800416a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f2:	d123      	bne.n	800413c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d838      	bhi.n	800416e <DMA_CheckFifoParam+0xda>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <DMA_CheckFifoParam+0x70>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004115 	.word	0x08004115
 8004108:	0800411b 	.word	0x0800411b
 800410c:	08004115 	.word	0x08004115
 8004110:	0800412d 	.word	0x0800412d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
        break;
 8004118:	e030      	b.n	800417c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d025      	beq.n	8004172 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800412a:	e022      	b.n	8004172 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004134:	d11f      	bne.n	8004176 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800413a:	e01c      	b.n	8004176 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	2b02      	cmp	r3, #2
 8004142:	d902      	bls.n	800414a <DMA_CheckFifoParam+0xb6>
 8004144:	2b03      	cmp	r3, #3
 8004146:	d003      	beq.n	8004150 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004148:	e018      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
        break;
 800414e:	e015      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
    break;
 8004160:	e00b      	b.n	800417a <DMA_CheckFifoParam+0xe6>
        break;
 8004162:	bf00      	nop
 8004164:	e00a      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 8004166:	bf00      	nop
 8004168:	e008      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 800416a:	bf00      	nop
 800416c:	e006      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 800416e:	bf00      	nop
 8004170:	e004      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 8004172:	bf00      	nop
 8004174:	e002      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 8004176:	bf00      	nop
 8004178:	e000      	b.n	800417c <DMA_CheckFifoParam+0xe8>
    break;
 800417a:	bf00      	nop
    }
  }

  return status;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop

0800418c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a38      	ldr	r2, [pc, #224]	; (8004280 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d022      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a36      	ldr	r2, [pc, #216]	; (8004284 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01d      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a35      	ldr	r2, [pc, #212]	; (8004288 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d018      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a33      	ldr	r2, [pc, #204]	; (800428c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a32      	ldr	r2, [pc, #200]	; (8004290 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a30      	ldr	r2, [pc, #192]	; (8004294 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d009      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2f      	ldr	r2, [pc, #188]	; (8004298 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2d      	ldr	r2, [pc, #180]	; (800429c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01a      	beq.n	800422a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	3b08      	subs	r3, #8
 80041fc:	4a28      	ldr	r2, [pc, #160]	; (80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a24      	ldr	r2, [pc, #144]	; (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004218:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	2201      	movs	r2, #1
 8004222:	409a      	lsls	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004228:	e024      	b.n	8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	3b10      	subs	r3, #16
 8004232:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4a1c      	ldr	r2, [pc, #112]	; (80042b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d806      	bhi.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d902      	bls.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3308      	adds	r3, #8
 8004250:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	461a      	mov	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004264:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2201      	movs	r2, #1
 800426e:	409a      	lsls	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	58025408 	.word	0x58025408
 8004284:	5802541c 	.word	0x5802541c
 8004288:	58025430 	.word	0x58025430
 800428c:	58025444 	.word	0x58025444
 8004290:	58025458 	.word	0x58025458
 8004294:	5802546c 	.word	0x5802546c
 8004298:	58025480 	.word	0x58025480
 800429c:	58025494 	.word	0x58025494
 80042a0:	cccccccd 	.word	0xcccccccd
 80042a4:	16009600 	.word	0x16009600
 80042a8:	58025880 	.word	0x58025880
 80042ac:	aaaaaaab 	.word	0xaaaaaaab
 80042b0:	400204b8 	.word	0x400204b8
 80042b4:	4002040f 	.word	0x4002040f
 80042b8:	10008200 	.word	0x10008200
 80042bc:	40020880 	.word	0x40020880

080042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d04a      	beq.n	800436c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d847      	bhi.n	800436c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a25      	ldr	r2, [pc, #148]	; (8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d022      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a24      	ldr	r2, [pc, #144]	; (800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d01d      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a22      	ldr	r2, [pc, #136]	; (8004380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a21      	ldr	r2, [pc, #132]	; (8004384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1e      	ldr	r2, [pc, #120]	; (800438c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1c      	ldr	r2, [pc, #112]	; (8004390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d101      	bne.n	8004330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004330:	2300      	movs	r3, #0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	461a      	mov	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a15      	ldr	r2, [pc, #84]	; (800439c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004348:	671a      	str	r2, [r3, #112]	; 0x70
 800434a:	e009      	b.n	8004360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	461a      	mov	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a11      	ldr	r2, [pc, #68]	; (80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800435e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3b01      	subs	r3, #1
 8004364:	2201      	movs	r2, #1
 8004366:	409a      	lsls	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	58025408 	.word	0x58025408
 800437c:	5802541c 	.word	0x5802541c
 8004380:	58025430 	.word	0x58025430
 8004384:	58025444 	.word	0x58025444
 8004388:	58025458 	.word	0x58025458
 800438c:	5802546c 	.word	0x5802546c
 8004390:	58025480 	.word	0x58025480
 8004394:	58025494 	.word	0x58025494
 8004398:	1600963f 	.word	0x1600963f
 800439c:	58025940 	.word	0x58025940
 80043a0:	1000823f 	.word	0x1000823f
 80043a4:	40020940 	.word	0x40020940

080043a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b089      	sub	sp, #36	; 0x24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80043b6:	4b89      	ldr	r3, [pc, #548]	; (80045dc <HAL_GPIO_Init+0x234>)
 80043b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043ba:	e194      	b.n	80046e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	2101      	movs	r1, #1
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	fa01 f303 	lsl.w	r3, r1, r3
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8186 	beq.w	80046e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d005      	beq.n	80043ec <HAL_GPIO_Init+0x44>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d130      	bne.n	800444e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	2203      	movs	r2, #3
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004422:	2201      	movs	r2, #1
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	f003 0201 	and.w	r2, r3, #1
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4313      	orrs	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b03      	cmp	r3, #3
 8004458:	d017      	beq.n	800448a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	2203      	movs	r2, #3
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d123      	bne.n	80044de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	08da      	lsrs	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3208      	adds	r2, #8
 800449e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	220f      	movs	r2, #15
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4013      	ands	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	08da      	lsrs	r2, r3, #3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3208      	adds	r2, #8
 80044d8:	69b9      	ldr	r1, [r7, #24]
 80044da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	2203      	movs	r2, #3
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 0203 	and.w	r2, r3, #3
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80e0 	beq.w	80046e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004520:	4b2f      	ldr	r3, [pc, #188]	; (80045e0 <HAL_GPIO_Init+0x238>)
 8004522:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004526:	4a2e      	ldr	r2, [pc, #184]	; (80045e0 <HAL_GPIO_Init+0x238>)
 8004528:	f043 0302 	orr.w	r3, r3, #2
 800452c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004530:	4b2b      	ldr	r3, [pc, #172]	; (80045e0 <HAL_GPIO_Init+0x238>)
 8004532:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800453e:	4a29      	ldr	r2, [pc, #164]	; (80045e4 <HAL_GPIO_Init+0x23c>)
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	3302      	adds	r3, #2
 8004546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	220f      	movs	r2, #15
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a20      	ldr	r2, [pc, #128]	; (80045e8 <HAL_GPIO_Init+0x240>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d052      	beq.n	8004610 <HAL_GPIO_Init+0x268>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <HAL_GPIO_Init+0x244>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d031      	beq.n	80045d6 <HAL_GPIO_Init+0x22e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a1e      	ldr	r2, [pc, #120]	; (80045f0 <HAL_GPIO_Init+0x248>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d02b      	beq.n	80045d2 <HAL_GPIO_Init+0x22a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <HAL_GPIO_Init+0x24c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d025      	beq.n	80045ce <HAL_GPIO_Init+0x226>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <HAL_GPIO_Init+0x250>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01f      	beq.n	80045ca <HAL_GPIO_Init+0x222>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a1b      	ldr	r2, [pc, #108]	; (80045fc <HAL_GPIO_Init+0x254>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d019      	beq.n	80045c6 <HAL_GPIO_Init+0x21e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a1a      	ldr	r2, [pc, #104]	; (8004600 <HAL_GPIO_Init+0x258>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <HAL_GPIO_Init+0x21a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a19      	ldr	r2, [pc, #100]	; (8004604 <HAL_GPIO_Init+0x25c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00d      	beq.n	80045be <HAL_GPIO_Init+0x216>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a18      	ldr	r2, [pc, #96]	; (8004608 <HAL_GPIO_Init+0x260>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <HAL_GPIO_Init+0x212>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a17      	ldr	r2, [pc, #92]	; (800460c <HAL_GPIO_Init+0x264>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <HAL_GPIO_Init+0x20e>
 80045b2:	2309      	movs	r3, #9
 80045b4:	e02d      	b.n	8004612 <HAL_GPIO_Init+0x26a>
 80045b6:	230a      	movs	r3, #10
 80045b8:	e02b      	b.n	8004612 <HAL_GPIO_Init+0x26a>
 80045ba:	2308      	movs	r3, #8
 80045bc:	e029      	b.n	8004612 <HAL_GPIO_Init+0x26a>
 80045be:	2307      	movs	r3, #7
 80045c0:	e027      	b.n	8004612 <HAL_GPIO_Init+0x26a>
 80045c2:	2306      	movs	r3, #6
 80045c4:	e025      	b.n	8004612 <HAL_GPIO_Init+0x26a>
 80045c6:	2305      	movs	r3, #5
 80045c8:	e023      	b.n	8004612 <HAL_GPIO_Init+0x26a>
 80045ca:	2304      	movs	r3, #4
 80045cc:	e021      	b.n	8004612 <HAL_GPIO_Init+0x26a>
 80045ce:	2303      	movs	r3, #3
 80045d0:	e01f      	b.n	8004612 <HAL_GPIO_Init+0x26a>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e01d      	b.n	8004612 <HAL_GPIO_Init+0x26a>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e01b      	b.n	8004612 <HAL_GPIO_Init+0x26a>
 80045da:	bf00      	nop
 80045dc:	58000080 	.word	0x58000080
 80045e0:	58024400 	.word	0x58024400
 80045e4:	58000400 	.word	0x58000400
 80045e8:	58020000 	.word	0x58020000
 80045ec:	58020400 	.word	0x58020400
 80045f0:	58020800 	.word	0x58020800
 80045f4:	58020c00 	.word	0x58020c00
 80045f8:	58021000 	.word	0x58021000
 80045fc:	58021400 	.word	0x58021400
 8004600:	58021800 	.word	0x58021800
 8004604:	58021c00 	.word	0x58021c00
 8004608:	58022000 	.word	0x58022000
 800460c:	58022400 	.word	0x58022400
 8004610:	2300      	movs	r3, #0
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	f002 0203 	and.w	r2, r2, #3
 8004618:	0092      	lsls	r2, r2, #2
 800461a:	4093      	lsls	r3, r2
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004622:	4938      	ldr	r1, [pc, #224]	; (8004704 <HAL_GPIO_Init+0x35c>)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	089b      	lsrs	r3, r3, #2
 8004628:	3302      	adds	r3, #2
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	43db      	mvns	r3, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4013      	ands	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800465e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	43db      	mvns	r3, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	43db      	mvns	r3, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4013      	ands	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	3301      	adds	r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	fa22 f303 	lsr.w	r3, r2, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f47f ae63 	bne.w	80043bc <HAL_GPIO_Init+0x14>
  }
}
 80046f6:	bf00      	nop
 80046f8:	bf00      	nop
 80046fa:	3724      	adds	r7, #36	; 0x24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	58000400 	.word	0x58000400

08004708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	807b      	strh	r3, [r7, #2]
 8004714:	4613      	mov	r3, r2
 8004716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004718:	787b      	ldrb	r3, [r7, #1]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800471e:	887a      	ldrh	r2, [r7, #2]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004724:	e003      	b.n	800472e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004726:	887b      	ldrh	r3, [r7, #2]
 8004728:	041a      	lsls	r2, r3, #16
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	619a      	str	r2, [r3, #24]
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800474c:	887a      	ldrh	r2, [r7, #2]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4013      	ands	r3, r2
 8004752:	041a      	lsls	r2, r3, #16
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	43d9      	mvns	r1, r3
 8004758:	887b      	ldrh	r3, [r7, #2]
 800475a:	400b      	ands	r3, r1
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	619a      	str	r2, [r3, #24]
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	4603      	mov	r3, r0
 8004776:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	4618      	mov	r0, r3
 8004796:	f7fd f963 	bl	8001a60 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80047ac:	4b29      	ldr	r3, [pc, #164]	; (8004854 <HAL_PWREx_ConfigSupply+0xb0>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	2b06      	cmp	r3, #6
 80047b6:	d00a      	beq.n	80047ce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80047b8:	4b26      	ldr	r3, [pc, #152]	; (8004854 <HAL_PWREx_ConfigSupply+0xb0>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d001      	beq.n	80047ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e040      	b.n	800484c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e03e      	b.n	800484c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80047ce:	4b21      	ldr	r3, [pc, #132]	; (8004854 <HAL_PWREx_ConfigSupply+0xb0>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80047d6:	491f      	ldr	r1, [pc, #124]	; (8004854 <HAL_PWREx_ConfigSupply+0xb0>)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80047de:	f7fd ff99 	bl	8002714 <HAL_GetTick>
 80047e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047e4:	e009      	b.n	80047fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80047e6:	f7fd ff95 	bl	8002714 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047f4:	d901      	bls.n	80047fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e028      	b.n	800484c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047fa:	4b16      	ldr	r3, [pc, #88]	; (8004854 <HAL_PWREx_ConfigSupply+0xb0>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004806:	d1ee      	bne.n	80047e6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b1e      	cmp	r3, #30
 800480c:	d008      	beq.n	8004820 <HAL_PWREx_ConfigSupply+0x7c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b2e      	cmp	r3, #46	; 0x2e
 8004812:	d005      	beq.n	8004820 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b1d      	cmp	r3, #29
 8004818:	d002      	beq.n	8004820 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b2d      	cmp	r3, #45	; 0x2d
 800481e:	d114      	bne.n	800484a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004820:	f7fd ff78 	bl	8002714 <HAL_GetTick>
 8004824:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004826:	e009      	b.n	800483c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004828:	f7fd ff74 	bl	8002714 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004836:	d901      	bls.n	800483c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e007      	b.n	800484c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <HAL_PWREx_ConfigSupply+0xb0>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004848:	d1ee      	bne.n	8004828 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	58024800 	.word	0x58024800

08004858 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	; 0x30
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e3f4      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 80b3 	beq.w	80049de <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004878:	4b95      	ldr	r3, [pc, #596]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004882:	4b93      	ldr	r3, [pc, #588]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488a:	2b10      	cmp	r3, #16
 800488c:	d007      	beq.n	800489e <HAL_RCC_OscConfig+0x46>
 800488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004890:	2b18      	cmp	r3, #24
 8004892:	d112      	bne.n	80048ba <HAL_RCC_OscConfig+0x62>
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d10d      	bne.n	80048ba <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489e:	4b8c      	ldr	r3, [pc, #560]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8098 	beq.w	80049dc <HAL_RCC_OscConfig+0x184>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 8093 	bne.w	80049dc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e3cc      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c2:	d106      	bne.n	80048d2 <HAL_RCC_OscConfig+0x7a>
 80048c4:	4b82      	ldr	r3, [pc, #520]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a81      	ldr	r2, [pc, #516]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80048ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	e058      	b.n	8004984 <HAL_RCC_OscConfig+0x12c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d112      	bne.n	8004900 <HAL_RCC_OscConfig+0xa8>
 80048da:	4b7d      	ldr	r3, [pc, #500]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a7c      	ldr	r2, [pc, #496]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80048e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b7a      	ldr	r3, [pc, #488]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a79      	ldr	r2, [pc, #484]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80048ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b77      	ldr	r3, [pc, #476]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a76      	ldr	r2, [pc, #472]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80048f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e041      	b.n	8004984 <HAL_RCC_OscConfig+0x12c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004908:	d112      	bne.n	8004930 <HAL_RCC_OscConfig+0xd8>
 800490a:	4b71      	ldr	r3, [pc, #452]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a70      	ldr	r2, [pc, #448]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b6e      	ldr	r3, [pc, #440]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a6d      	ldr	r2, [pc, #436]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 800491c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b6b      	ldr	r3, [pc, #428]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a6a      	ldr	r2, [pc, #424]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e029      	b.n	8004984 <HAL_RCC_OscConfig+0x12c>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004938:	d112      	bne.n	8004960 <HAL_RCC_OscConfig+0x108>
 800493a:	4b65      	ldr	r3, [pc, #404]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a64      	ldr	r2, [pc, #400]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b62      	ldr	r3, [pc, #392]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a61      	ldr	r2, [pc, #388]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 800494c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b5f      	ldr	r3, [pc, #380]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a5e      	ldr	r2, [pc, #376]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e011      	b.n	8004984 <HAL_RCC_OscConfig+0x12c>
 8004960:	4b5b      	ldr	r3, [pc, #364]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a5a      	ldr	r2, [pc, #360]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	4b58      	ldr	r3, [pc, #352]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a57      	ldr	r2, [pc, #348]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	4b55      	ldr	r3, [pc, #340]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a54      	ldr	r2, [pc, #336]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 800497e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d013      	beq.n	80049b4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fd fec2 	bl	8002714 <HAL_GetTick>
 8004990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004994:	f7fd febe 	bl	8002714 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	; 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e356      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049a6:	4b4a      	ldr	r3, [pc, #296]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x13c>
 80049b2:	e014      	b.n	80049de <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd feae 	bl	8002714 <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fd feaa 	bl	8002714 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	; 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e342      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049ce:	4b40      	ldr	r3, [pc, #256]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x164>
 80049da:	e000      	b.n	80049de <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 808d 	beq.w	8004b06 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ec:	4b38      	ldr	r3, [pc, #224]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049f6:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d007      	beq.n	8004a12 <HAL_RCC_OscConfig+0x1ba>
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	2b18      	cmp	r3, #24
 8004a06:	d137      	bne.n	8004a78 <HAL_RCC_OscConfig+0x220>
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d132      	bne.n	8004a78 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a12:	4b2f      	ldr	r3, [pc, #188]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_RCC_OscConfig+0x1d2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e314      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a2a:	4b29      	ldr	r3, [pc, #164]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 0219 	bic.w	r2, r3, #25
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	4926      	ldr	r1, [pc, #152]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a3c:	f7fd fe6a 	bl	8002714 <HAL_GetTick>
 8004a40:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a44:	f7fd fe66 	bl	8002714 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e2fe      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a56:	4b1e      	ldr	r3, [pc, #120]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a62:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	061b      	lsls	r3, r3, #24
 8004a70:	4917      	ldr	r1, [pc, #92]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a76:	e046      	b.n	8004b06 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d029      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a80:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f023 0219 	bic.w	r2, r3, #25
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4910      	ldr	r1, [pc, #64]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fd fe3f 	bl	8002714 <HAL_GetTick>
 8004a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a9a:	f7fd fe3b 	bl	8002714 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e2d3      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aac:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f0      	beq.n	8004a9a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	061b      	lsls	r3, r3, #24
 8004ac6:	4902      	ldr	r1, [pc, #8]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]
 8004acc:	e01b      	b.n	8004b06 <HAL_RCC_OscConfig+0x2ae>
 8004ace:	bf00      	nop
 8004ad0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad4:	4b97      	ldr	r3, [pc, #604]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a96      	ldr	r2, [pc, #600]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fd fe18 	bl	8002714 <HAL_GetTick>
 8004ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ae8:	f7fd fe14 	bl	8002714 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e2ac      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004afa:	4b8e      	ldr	r3, [pc, #568]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d06a      	beq.n	8004be8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b12:	4b88      	ldr	r3, [pc, #544]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b1c:	4b85      	ldr	r3, [pc, #532]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d007      	beq.n	8004b38 <HAL_RCC_OscConfig+0x2e0>
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b18      	cmp	r3, #24
 8004b2c:	d11b      	bne.n	8004b66 <HAL_RCC_OscConfig+0x30e>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d116      	bne.n	8004b66 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b38:	4b7e      	ldr	r3, [pc, #504]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <HAL_RCC_OscConfig+0x2f8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	2b80      	cmp	r3, #128	; 0x80
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e281      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b50:	4b78      	ldr	r3, [pc, #480]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	061b      	lsls	r3, r3, #24
 8004b5e:	4975      	ldr	r1, [pc, #468]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b64:	e040      	b.n	8004be8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d023      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004b6e:	4b71      	ldr	r3, [pc, #452]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a70      	ldr	r2, [pc, #448]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fd fdcb 	bl	8002714 <HAL_GetTick>
 8004b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004b82:	f7fd fdc7 	bl	8002714 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e25f      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b94:	4b67      	ldr	r3, [pc, #412]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ba0:	4b64      	ldr	r3, [pc, #400]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	061b      	lsls	r3, r3, #24
 8004bae:	4961      	ldr	r1, [pc, #388]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60cb      	str	r3, [r1, #12]
 8004bb4:	e018      	b.n	8004be8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004bb6:	4b5f      	ldr	r3, [pc, #380]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a5e      	ldr	r2, [pc, #376]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc2:	f7fd fda7 	bl	8002714 <HAL_GetTick>
 8004bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004bca:	f7fd fda3 	bl	8002714 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e23b      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bdc:	4b55      	ldr	r3, [pc, #340]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d036      	beq.n	8004c62 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d019      	beq.n	8004c30 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bfc:	4b4d      	ldr	r3, [pc, #308]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c00:	4a4c      	ldr	r2, [pc, #304]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fd fd84 	bl	8002714 <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c10:	f7fd fd80 	bl	8002714 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e218      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c22:	4b44      	ldr	r3, [pc, #272]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x3b8>
 8004c2e:	e018      	b.n	8004c62 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c30:	4b40      	ldr	r3, [pc, #256]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c34:	4a3f      	ldr	r2, [pc, #252]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3c:	f7fd fd6a 	bl	8002714 <HAL_GetTick>
 8004c40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c44:	f7fd fd66 	bl	8002714 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e1fe      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c56:	4b37      	ldr	r3, [pc, #220]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d036      	beq.n	8004cdc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d019      	beq.n	8004caa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c76:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a2e      	ldr	r2, [pc, #184]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c82:	f7fd fd47 	bl	8002714 <HAL_GetTick>
 8004c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004c8a:	f7fd fd43 	bl	8002714 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e1db      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c9c:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x432>
 8004ca8:	e018      	b.n	8004cdc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004caa:	4b22      	ldr	r3, [pc, #136]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cb6:	f7fd fd2d 	bl	8002714 <HAL_GetTick>
 8004cba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004cbe:	f7fd fd29 	bl	8002714 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e1c1      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cd0:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f0      	bne.n	8004cbe <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80af 	beq.w	8004e48 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cea:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <HAL_RCC_OscConfig+0x4e0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <HAL_RCC_OscConfig+0x4e0>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cf6:	f7fd fd0d 	bl	8002714 <HAL_GetTick>
 8004cfa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7fd fd09 	bl	8002714 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b64      	cmp	r3, #100	; 0x64
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e1a1      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <HAL_RCC_OscConfig+0x4e0>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d10b      	bne.n	8004d3c <HAL_RCC_OscConfig+0x4e4>
 8004d24:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d28:	4a02      	ldr	r2, [pc, #8]	; (8004d34 <HAL_RCC_OscConfig+0x4dc>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d30:	e05b      	b.n	8004dea <HAL_RCC_OscConfig+0x592>
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400
 8004d38:	58024800 	.word	0x58024800
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d112      	bne.n	8004d6a <HAL_RCC_OscConfig+0x512>
 8004d44:	4b9d      	ldr	r3, [pc, #628]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	4a9c      	ldr	r2, [pc, #624]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d50:	4b9a      	ldr	r3, [pc, #616]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	4a99      	ldr	r2, [pc, #612]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5c:	4b97      	ldr	r3, [pc, #604]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d60:	4a96      	ldr	r2, [pc, #600]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004d62:	f023 0304 	bic.w	r3, r3, #4
 8004d66:	6713      	str	r3, [r2, #112]	; 0x70
 8004d68:	e03f      	b.n	8004dea <HAL_RCC_OscConfig+0x592>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b05      	cmp	r3, #5
 8004d70:	d112      	bne.n	8004d98 <HAL_RCC_OscConfig+0x540>
 8004d72:	4b92      	ldr	r3, [pc, #584]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	4a91      	ldr	r2, [pc, #580]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004d78:	f043 0304 	orr.w	r3, r3, #4
 8004d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7e:	4b8f      	ldr	r3, [pc, #572]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	4a8e      	ldr	r2, [pc, #568]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d88:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8a:	4b8c      	ldr	r3, [pc, #560]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	4a8b      	ldr	r2, [pc, #556]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	6713      	str	r3, [r2, #112]	; 0x70
 8004d96:	e028      	b.n	8004dea <HAL_RCC_OscConfig+0x592>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b85      	cmp	r3, #133	; 0x85
 8004d9e:	d112      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x56e>
 8004da0:	4b86      	ldr	r3, [pc, #536]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	4a85      	ldr	r2, [pc, #532]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004da6:	f043 0304 	orr.w	r3, r3, #4
 8004daa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dac:	4b83      	ldr	r3, [pc, #524]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	4a82      	ldr	r2, [pc, #520]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db6:	6713      	str	r3, [r2, #112]	; 0x70
 8004db8:	4b80      	ldr	r3, [pc, #512]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	4a7f      	ldr	r2, [pc, #508]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc4:	e011      	b.n	8004dea <HAL_RCC_OscConfig+0x592>
 8004dc6:	4b7d      	ldr	r3, [pc, #500]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dca:	4a7c      	ldr	r2, [pc, #496]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd2:	4b7a      	ldr	r3, [pc, #488]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	4a79      	ldr	r2, [pc, #484]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dde:	4b77      	ldr	r3, [pc, #476]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	4a76      	ldr	r2, [pc, #472]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004de8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d015      	beq.n	8004e1e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df2:	f7fd fc8f 	bl	8002714 <HAL_GetTick>
 8004df6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004df8:	e00a      	b.n	8004e10 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dfa:	f7fd fc8b 	bl	8002714 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e121      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e10:	4b6a      	ldr	r3, [pc, #424]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ee      	beq.n	8004dfa <HAL_RCC_OscConfig+0x5a2>
 8004e1c:	e014      	b.n	8004e48 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1e:	f7fd fc79 	bl	8002714 <HAL_GetTick>
 8004e22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7fd fc75 	bl	8002714 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e10b      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e3c:	4b5f      	ldr	r3, [pc, #380]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1ee      	bne.n	8004e26 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8100 	beq.w	8005052 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e52:	4b5a      	ldr	r3, [pc, #360]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e5a:	2b18      	cmp	r3, #24
 8004e5c:	f000 80bb 	beq.w	8004fd6 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	f040 8095 	bne.w	8004f94 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6a:	4b54      	ldr	r3, [pc, #336]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a53      	ldr	r2, [pc, #332]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e76:	f7fd fc4d 	bl	8002714 <HAL_GetTick>
 8004e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e7e:	f7fd fc49 	bl	8002714 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e0e1      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e90:	4b4a      	ldr	r3, [pc, #296]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f0      	bne.n	8004e7e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e9c:	4b47      	ldr	r3, [pc, #284]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ea0:	4b47      	ldr	r3, [pc, #284]	; (8004fc0 <HAL_RCC_OscConfig+0x768>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004eac:	0112      	lsls	r2, r2, #4
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	4942      	ldr	r1, [pc, #264]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	628b      	str	r3, [r1, #40]	; 0x28
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	025b      	lsls	r3, r3, #9
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ee6:	4935      	ldr	r1, [pc, #212]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004eec:	4b33      	ldr	r3, [pc, #204]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	4a32      	ldr	r2, [pc, #200]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ef8:	4b30      	ldr	r3, [pc, #192]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004efc:	4b31      	ldr	r3, [pc, #196]	; (8004fc4 <HAL_RCC_OscConfig+0x76c>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f04:	00d2      	lsls	r2, r2, #3
 8004f06:	492d      	ldr	r1, [pc, #180]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f0c:	4b2b      	ldr	r3, [pc, #172]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f023 020c 	bic.w	r2, r3, #12
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	4928      	ldr	r1, [pc, #160]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f1e:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	f023 0202 	bic.w	r2, r3, #2
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2a:	4924      	ldr	r1, [pc, #144]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f30:	4b22      	ldr	r3, [pc, #136]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f3c:	4b1f      	ldr	r3, [pc, #124]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f48:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f60:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fd fbd2 	bl	8002714 <HAL_GetTick>
 8004f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f74:	f7fd fbce 	bl	8002714 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e066      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x71c>
 8004f92:	e05e      	b.n	8005052 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f94:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <HAL_RCC_OscConfig+0x764>)
 8004f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fbb8 	bl	8002714 <HAL_GetTick>
 8004fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fa6:	e00f      	b.n	8004fc8 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7fd fbb4 	bl	8002714 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d908      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e04c      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
 8004fba:	bf00      	nop
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	fffffc0c 	.word	0xfffffc0c
 8004fc4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fc8:	4b24      	ldr	r3, [pc, #144]	; (800505c <HAL_RCC_OscConfig+0x804>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e9      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x750>
 8004fd4:	e03d      	b.n	8005052 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004fd6:	4b21      	ldr	r3, [pc, #132]	; (800505c <HAL_RCC_OscConfig+0x804>)
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	; (800505c <HAL_RCC_OscConfig+0x804>)
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d031      	beq.n	800504e <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f003 0203 	and.w	r2, r3, #3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d12a      	bne.n	800504e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005004:	429a      	cmp	r2, r3
 8005006:	d122      	bne.n	800504e <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005014:	429a      	cmp	r2, r3
 8005016:	d11a      	bne.n	800504e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	0a5b      	lsrs	r3, r3, #9
 800501c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005024:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005026:	429a      	cmp	r2, r3
 8005028:	d111      	bne.n	800504e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d108      	bne.n	800504e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	0e1b      	lsrs	r3, r3, #24
 8005040:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005048:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800504a:	429a      	cmp	r2, r3
 800504c:	d001      	beq.n	8005052 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e000      	b.n	8005054 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3730      	adds	r7, #48	; 0x30
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	58024400 	.word	0x58024400

08005060 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e19c      	b.n	80053ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005074:	4b8a      	ldr	r3, [pc, #552]	; (80052a0 <HAL_RCC_ClockConfig+0x240>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d910      	bls.n	80050a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005082:	4b87      	ldr	r3, [pc, #540]	; (80052a0 <HAL_RCC_ClockConfig+0x240>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 020f 	bic.w	r2, r3, #15
 800508a:	4985      	ldr	r1, [pc, #532]	; (80052a0 <HAL_RCC_ClockConfig+0x240>)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005092:	4b83      	ldr	r3, [pc, #524]	; (80052a0 <HAL_RCC_ClockConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e184      	b.n	80053ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d010      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	4b7b      	ldr	r3, [pc, #492]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050bc:	429a      	cmp	r2, r3
 80050be:	d908      	bls.n	80050d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050c0:	4b78      	ldr	r3, [pc, #480]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	4975      	ldr	r1, [pc, #468]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d010      	beq.n	8005100 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695a      	ldr	r2, [r3, #20]
 80050e2:	4b70      	ldr	r3, [pc, #448]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d908      	bls.n	8005100 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050ee:	4b6d      	ldr	r3, [pc, #436]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	496a      	ldr	r1, [pc, #424]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d010      	beq.n	800512e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699a      	ldr	r2, [r3, #24]
 8005110:	4b64      	ldr	r3, [pc, #400]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005118:	429a      	cmp	r2, r3
 800511a:	d908      	bls.n	800512e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800511c:	4b61      	ldr	r3, [pc, #388]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	495e      	ldr	r1, [pc, #376]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 800512a:	4313      	orrs	r3, r2
 800512c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	d010      	beq.n	800515c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69da      	ldr	r2, [r3, #28]
 800513e:	4b59      	ldr	r3, [pc, #356]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005146:	429a      	cmp	r2, r3
 8005148:	d908      	bls.n	800515c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800514a:	4b56      	ldr	r3, [pc, #344]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	4953      	ldr	r1, [pc, #332]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 8005158:	4313      	orrs	r3, r2
 800515a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d010      	beq.n	800518a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	4b4d      	ldr	r3, [pc, #308]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	429a      	cmp	r2, r3
 8005176:	d908      	bls.n	800518a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005178:	4b4a      	ldr	r3, [pc, #296]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f023 020f 	bic.w	r2, r3, #15
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4947      	ldr	r1, [pc, #284]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 8005186:	4313      	orrs	r3, r2
 8005188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d055      	beq.n	8005242 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005196:	4b43      	ldr	r3, [pc, #268]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	4940      	ldr	r1, [pc, #256]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051b0:	4b3c      	ldr	r3, [pc, #240]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d121      	bne.n	8005200 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0f6      	b.n	80053ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d107      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051c8:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d115      	bne.n	8005200 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0ea      	b.n	80053ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d107      	bne.n	80051f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051e0:	4b30      	ldr	r3, [pc, #192]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d109      	bne.n	8005200 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e0de      	b.n	80053ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051f0:	4b2c      	ldr	r3, [pc, #176]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0d6      	b.n	80053ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005200:	4b28      	ldr	r3, [pc, #160]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f023 0207 	bic.w	r2, r3, #7
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	4925      	ldr	r1, [pc, #148]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 800520e:	4313      	orrs	r3, r2
 8005210:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005212:	f7fd fa7f 	bl	8002714 <HAL_GetTick>
 8005216:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005218:	e00a      	b.n	8005230 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800521a:	f7fd fa7b 	bl	8002714 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f241 3288 	movw	r2, #5000	; 0x1388
 8005228:	4293      	cmp	r3, r2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e0be      	b.n	80053ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005230:	4b1c      	ldr	r3, [pc, #112]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	429a      	cmp	r2, r3
 8005240:	d1eb      	bne.n	800521a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d010      	beq.n	8005270 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	429a      	cmp	r2, r3
 800525c:	d208      	bcs.n	8005270 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800525e:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	f023 020f 	bic.w	r2, r3, #15
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	490e      	ldr	r1, [pc, #56]	; (80052a4 <HAL_RCC_ClockConfig+0x244>)
 800526c:	4313      	orrs	r3, r2
 800526e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <HAL_RCC_ClockConfig+0x240>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d214      	bcs.n	80052a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <HAL_RCC_ClockConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f023 020f 	bic.w	r2, r3, #15
 8005286:	4906      	ldr	r1, [pc, #24]	; (80052a0 <HAL_RCC_ClockConfig+0x240>)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	4313      	orrs	r3, r2
 800528c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800528e:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <HAL_RCC_ClockConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d005      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e086      	b.n	80053ae <HAL_RCC_ClockConfig+0x34e>
 80052a0:	52002000 	.word	0x52002000
 80052a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d010      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	4b3f      	ldr	r3, [pc, #252]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d208      	bcs.n	80052d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052c4:	4b3c      	ldr	r3, [pc, #240]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	4939      	ldr	r1, [pc, #228]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d010      	beq.n	8005304 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	4b34      	ldr	r3, [pc, #208]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d208      	bcs.n	8005304 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052f2:	4b31      	ldr	r3, [pc, #196]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	492e      	ldr	r1, [pc, #184]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 8005300:	4313      	orrs	r3, r2
 8005302:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	d010      	beq.n	8005332 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	4b28      	ldr	r3, [pc, #160]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800531c:	429a      	cmp	r2, r3
 800531e:	d208      	bcs.n	8005332 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005320:	4b25      	ldr	r3, [pc, #148]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	4922      	ldr	r1, [pc, #136]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 800532e:	4313      	orrs	r3, r2
 8005330:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d010      	beq.n	8005360 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	4b1d      	ldr	r3, [pc, #116]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800534a:	429a      	cmp	r2, r3
 800534c:	d208      	bcs.n	8005360 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800534e:	4b1a      	ldr	r3, [pc, #104]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	4917      	ldr	r1, [pc, #92]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 800535c:	4313      	orrs	r3, r2
 800535e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005360:	f000 f834 	bl	80053cc <HAL_RCC_GetSysClockFreq>
 8005364:	4602      	mov	r2, r0
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	4912      	ldr	r1, [pc, #72]	; (80053bc <HAL_RCC_ClockConfig+0x35c>)
 8005372:	5ccb      	ldrb	r3, [r1, r3]
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
 800537c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <HAL_RCC_ClockConfig+0x358>)
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	4a0d      	ldr	r2, [pc, #52]	; (80053bc <HAL_RCC_ClockConfig+0x35c>)
 8005388:	5cd3      	ldrb	r3, [r2, r3]
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
 8005394:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <HAL_RCC_ClockConfig+0x360>)
 8005396:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005398:	4a0a      	ldr	r2, [pc, #40]	; (80053c4 <HAL_RCC_ClockConfig+0x364>)
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800539e:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <HAL_RCC_ClockConfig+0x368>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fd f96c 	bl	8002680 <HAL_InitTick>
 80053a8:	4603      	mov	r3, r0
 80053aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	58024400 	.word	0x58024400
 80053bc:	0800ae7c 	.word	0x0800ae7c
 80053c0:	24000008 	.word	0x24000008
 80053c4:	24000004 	.word	0x24000004
 80053c8:	2400000c 	.word	0x2400000c

080053cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b089      	sub	sp, #36	; 0x24
 80053d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053d2:	4bb3      	ldr	r3, [pc, #716]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053da:	2b18      	cmp	r3, #24
 80053dc:	f200 8155 	bhi.w	800568a <HAL_RCC_GetSysClockFreq+0x2be>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	0800544d 	.word	0x0800544d
 80053ec:	0800568b 	.word	0x0800568b
 80053f0:	0800568b 	.word	0x0800568b
 80053f4:	0800568b 	.word	0x0800568b
 80053f8:	0800568b 	.word	0x0800568b
 80053fc:	0800568b 	.word	0x0800568b
 8005400:	0800568b 	.word	0x0800568b
 8005404:	0800568b 	.word	0x0800568b
 8005408:	08005473 	.word	0x08005473
 800540c:	0800568b 	.word	0x0800568b
 8005410:	0800568b 	.word	0x0800568b
 8005414:	0800568b 	.word	0x0800568b
 8005418:	0800568b 	.word	0x0800568b
 800541c:	0800568b 	.word	0x0800568b
 8005420:	0800568b 	.word	0x0800568b
 8005424:	0800568b 	.word	0x0800568b
 8005428:	08005479 	.word	0x08005479
 800542c:	0800568b 	.word	0x0800568b
 8005430:	0800568b 	.word	0x0800568b
 8005434:	0800568b 	.word	0x0800568b
 8005438:	0800568b 	.word	0x0800568b
 800543c:	0800568b 	.word	0x0800568b
 8005440:	0800568b 	.word	0x0800568b
 8005444:	0800568b 	.word	0x0800568b
 8005448:	0800547f 	.word	0x0800547f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800544c:	4b94      	ldr	r3, [pc, #592]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d009      	beq.n	800546c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005458:	4b91      	ldr	r3, [pc, #580]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	08db      	lsrs	r3, r3, #3
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	4a90      	ldr	r2, [pc, #576]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
 8005468:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800546a:	e111      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800546c:	4b8d      	ldr	r3, [pc, #564]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800546e:	61bb      	str	r3, [r7, #24]
    break;
 8005470:	e10e      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005472:	4b8d      	ldr	r3, [pc, #564]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005474:	61bb      	str	r3, [r7, #24]
    break;
 8005476:	e10b      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005478:	4b8c      	ldr	r3, [pc, #560]	; (80056ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800547a:	61bb      	str	r3, [r7, #24]
    break;
 800547c:	e108      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800547e:	4b88      	ldr	r3, [pc, #544]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005488:	4b85      	ldr	r3, [pc, #532]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005492:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005494:	4b82      	ldr	r3, [pc, #520]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800549e:	4b80      	ldr	r3, [pc, #512]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a2:	08db      	lsrs	r3, r3, #3
 80054a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	fb02 f303 	mul.w	r3, r2, r3
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 80e1 	beq.w	8005684 <HAL_RCC_GetSysClockFreq+0x2b8>
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	f000 8083 	beq.w	80055d0 <HAL_RCC_GetSysClockFreq+0x204>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	f200 80a1 	bhi.w	8005614 <HAL_RCC_GetSysClockFreq+0x248>
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0x114>
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d056      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0x1c0>
 80054de:	e099      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054e0:	4b6f      	ldr	r3, [pc, #444]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d02d      	beq.n	8005548 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054ec:	4b6c      	ldr	r3, [pc, #432]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	08db      	lsrs	r3, r3, #3
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	4a6b      	ldr	r2, [pc, #428]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
 80054fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	ee07 3a90 	vmov	s15, r3
 8005504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005516:	4b62      	ldr	r3, [pc, #392]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005526:	ed97 6a02 	vldr	s12, [r7, #8]
 800552a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80056b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800552e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800553a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800553e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005542:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005546:	e087      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005552:	eddf 6a58 	vldr	s13, [pc, #352]	; 80056b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555a:	4b51      	ldr	r3, [pc, #324]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556a:	ed97 6a02 	vldr	s12, [r7, #8]
 800556e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80056b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800557e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800558a:	e065      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005596:	eddf 6a48 	vldr	s13, [pc, #288]	; 80056b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800559a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800559e:	4b40      	ldr	r3, [pc, #256]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80055b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80056b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055ce:	e043      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80056bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80055de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e2:	4b2f      	ldr	r3, [pc, #188]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80056b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005612:	e021      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80056b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005626:	4b1e      	ldr	r3, [pc, #120]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005636:	ed97 6a02 	vldr	s12, [r7, #8]
 800563a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80056b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800563e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005656:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005658:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	0a5b      	lsrs	r3, r3, #9
 800565e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005662:	3301      	adds	r3, #1
 8005664:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005670:	edd7 6a07 	vldr	s13, [r7, #28]
 8005674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800567c:	ee17 3a90 	vmov	r3, s15
 8005680:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005682:	e005      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	61bb      	str	r3, [r7, #24]
    break;
 8005688:	e002      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800568a:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800568c:	61bb      	str	r3, [r7, #24]
    break;
 800568e:	bf00      	nop
  }

  return sysclockfreq;
 8005690:	69bb      	ldr	r3, [r7, #24]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3724      	adds	r7, #36	; 0x24
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	58024400 	.word	0x58024400
 80056a4:	03d09000 	.word	0x03d09000
 80056a8:	003d0900 	.word	0x003d0900
 80056ac:	007a1200 	.word	0x007a1200
 80056b0:	46000000 	.word	0x46000000
 80056b4:	4c742400 	.word	0x4c742400
 80056b8:	4a742400 	.word	0x4a742400
 80056bc:	4af42400 	.word	0x4af42400

080056c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80056c6:	f7ff fe81 	bl	80053cc <HAL_RCC_GetSysClockFreq>
 80056ca:	4602      	mov	r2, r0
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <HAL_RCC_GetHCLKFreq+0x50>)
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	0a1b      	lsrs	r3, r3, #8
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	490f      	ldr	r1, [pc, #60]	; (8005714 <HAL_RCC_GetHCLKFreq+0x54>)
 80056d8:	5ccb      	ldrb	r3, [r1, r3]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	fa22 f303 	lsr.w	r3, r2, r3
 80056e2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80056e4:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <HAL_RCC_GetHCLKFreq+0x50>)
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f003 030f 	and.w	r3, r3, #15
 80056ec:	4a09      	ldr	r2, [pc, #36]	; (8005714 <HAL_RCC_GetHCLKFreq+0x54>)
 80056ee:	5cd3      	ldrb	r3, [r2, r3]
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	fa22 f303 	lsr.w	r3, r2, r3
 80056fa:	4a07      	ldr	r2, [pc, #28]	; (8005718 <HAL_RCC_GetHCLKFreq+0x58>)
 80056fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056fe:	4a07      	ldr	r2, [pc, #28]	; (800571c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <HAL_RCC_GetHCLKFreq+0x58>)
 8005706:	681b      	ldr	r3, [r3, #0]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	58024400 	.word	0x58024400
 8005714:	0800ae7c 	.word	0x0800ae7c
 8005718:	24000008 	.word	0x24000008
 800571c:	24000004 	.word	0x24000004

08005720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005724:	f7ff ffcc 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 8005728:	4602      	mov	r2, r0
 800572a:	4b06      	ldr	r3, [pc, #24]	; (8005744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	091b      	lsrs	r3, r3, #4
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	4904      	ldr	r1, [pc, #16]	; (8005748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005736:	5ccb      	ldrb	r3, [r1, r3]
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005740:	4618      	mov	r0, r3
 8005742:	bd80      	pop	{r7, pc}
 8005744:	58024400 	.word	0x58024400
 8005748:	0800ae7c 	.word	0x0800ae7c

0800574c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005750:	f7ff ffb6 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 8005754:	4602      	mov	r2, r0
 8005756:	4b06      	ldr	r3, [pc, #24]	; (8005770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	0a1b      	lsrs	r3, r3, #8
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	4904      	ldr	r1, [pc, #16]	; (8005774 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005762:	5ccb      	ldrb	r3, [r1, r3]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800576c:	4618      	mov	r0, r3
 800576e:	bd80      	pop	{r7, pc}
 8005770:	58024400 	.word	0x58024400
 8005774:	0800ae7c 	.word	0x0800ae7c

08005778 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005780:	2300      	movs	r3, #0
 8005782:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005784:	2300      	movs	r3, #0
 8005786:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d03f      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005798:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800579c:	d02a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800579e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057a2:	d824      	bhi.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057a8:	d018      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057ae:	d81e      	bhi.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b8:	d007      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80057ba:	e018      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057bc:	4b9f      	ldr	r3, [pc, #636]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4a9e      	ldr	r2, [pc, #632]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80057c8:	e015      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3304      	adds	r3, #4
 80057ce:	2102      	movs	r1, #2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 f99b 	bl	8006b0c <RCCEx_PLL2_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80057da:	e00c      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3324      	adds	r3, #36	; 0x24
 80057e0:	2102      	movs	r1, #2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 fa44 	bl	8006c70 <RCCEx_PLL3_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80057ec:	e003      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
      break;
 80057f2:	e000      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80057f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d109      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80057fc:	4b8f      	ldr	r3, [pc, #572]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005808:	498c      	ldr	r1, [pc, #560]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800580a:	4313      	orrs	r3, r2
 800580c:	650b      	str	r3, [r1, #80]	; 0x50
 800580e:	e001      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	7dfb      	ldrb	r3, [r7, #23]
 8005812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581c:	2b00      	cmp	r3, #0
 800581e:	d03d      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005824:	2b04      	cmp	r3, #4
 8005826:	d826      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005828:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005845 	.word	0x08005845
 8005834:	08005853 	.word	0x08005853
 8005838:	08005865 	.word	0x08005865
 800583c:	0800587d 	.word	0x0800587d
 8005840:	0800587d 	.word	0x0800587d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005844:	4b7d      	ldr	r3, [pc, #500]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	4a7c      	ldr	r2, [pc, #496]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800584a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800584e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005850:	e015      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3304      	adds	r3, #4
 8005856:	2100      	movs	r1, #0
 8005858:	4618      	mov	r0, r3
 800585a:	f001 f957 	bl	8006b0c <RCCEx_PLL2_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005862:	e00c      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3324      	adds	r3, #36	; 0x24
 8005868:	2100      	movs	r1, #0
 800586a:	4618      	mov	r0, r3
 800586c:	f001 fa00 	bl	8006c70 <RCCEx_PLL3_Config>
 8005870:	4603      	mov	r3, r0
 8005872:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005874:	e003      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	75fb      	strb	r3, [r7, #23]
      break;
 800587a:	e000      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800587c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800587e:	7dfb      	ldrb	r3, [r7, #23]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d109      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005884:	4b6d      	ldr	r3, [pc, #436]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005888:	f023 0207 	bic.w	r2, r3, #7
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005890:	496a      	ldr	r1, [pc, #424]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005892:	4313      	orrs	r3, r2
 8005894:	650b      	str	r3, [r1, #80]	; 0x50
 8005896:	e001      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005898:	7dfb      	ldrb	r3, [r7, #23]
 800589a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d04a      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80058b0:	d031      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80058b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80058b6:	d82b      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80058b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058bc:	d02d      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80058be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c2:	d825      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80058c4:	2bc0      	cmp	r3, #192	; 0xc0
 80058c6:	d02a      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80058c8:	2bc0      	cmp	r3, #192	; 0xc0
 80058ca:	d821      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80058cc:	2b80      	cmp	r3, #128	; 0x80
 80058ce:	d016      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x186>
 80058d0:	2b80      	cmp	r3, #128	; 0x80
 80058d2:	d81d      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x166>
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d007      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x174>
 80058dc:	e018      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058de:	4b57      	ldr	r3, [pc, #348]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	4a56      	ldr	r2, [pc, #344]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80058ea:	e019      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3304      	adds	r3, #4
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 f90a 	bl	8006b0c <RCCEx_PLL2_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80058fc:	e010      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3324      	adds	r3, #36	; 0x24
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f001 f9b3 	bl	8006c70 <RCCEx_PLL3_Config>
 800590a:	4603      	mov	r3, r0
 800590c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800590e:	e007      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	75fb      	strb	r3, [r7, #23]
      break;
 8005914:	e004      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005916:	bf00      	nop
 8005918:	e002      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800591a:	bf00      	nop
 800591c:	e000      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800591e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005926:	4b45      	ldr	r3, [pc, #276]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800592a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005932:	4942      	ldr	r1, [pc, #264]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005934:	4313      	orrs	r3, r2
 8005936:	650b      	str	r3, [r1, #80]	; 0x50
 8005938:	e001      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593a:	7dfb      	ldrb	r3, [r7, #23]
 800593c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005946:	2b00      	cmp	r3, #0
 8005948:	d04f      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005952:	d036      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005954:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005958:	d830      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800595a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800595e:	d032      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005964:	d82a      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005966:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800596a:	d02e      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x252>
 800596c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005970:	d824      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005976:	d018      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597c:	d81e      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005986:	d007      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005988:	e018      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800598a:	4b2c      	ldr	r3, [pc, #176]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	4a2b      	ldr	r2, [pc, #172]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005994:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005996:	e019      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 f8b4 	bl	8006b0c <RCCEx_PLL2_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80059a8:	e010      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3324      	adds	r3, #36	; 0x24
 80059ae:	2100      	movs	r1, #0
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 f95d 	bl	8006c70 <RCCEx_PLL3_Config>
 80059b6:	4603      	mov	r3, r0
 80059b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80059ba:	e007      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	75fb      	strb	r3, [r7, #23]
      break;
 80059c0:	e004      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80059c2:	bf00      	nop
 80059c4:	e002      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80059c6:	bf00      	nop
 80059c8:	e000      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80059ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80059d2:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059de:	4917      	ldr	r1, [pc, #92]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	650b      	str	r3, [r1, #80]	; 0x50
 80059e4:	e001      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
 80059e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d034      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059fa:	2b30      	cmp	r3, #48	; 0x30
 80059fc:	d01c      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80059fe:	2b30      	cmp	r3, #48	; 0x30
 8005a00:	d817      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d00c      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d813      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d018      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8005a0e:	2b10      	cmp	r3, #16
 8005a10:	d10f      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a12:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	4a09      	ldr	r2, [pc, #36]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005a1e:	e010      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3304      	adds	r3, #4
 8005a24:	2102      	movs	r1, #2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f001 f870 	bl	8006b0c <RCCEx_PLL2_Config>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005a30:	e007      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
      break;
 8005a36:	e004      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8005a38:	bf00      	nop
 8005a3a:	e002      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a3c:	58024400 	.word	0x58024400
      break;
 8005a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a48:	4b9b      	ldr	r3, [pc, #620]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a54:	4998      	ldr	r1, [pc, #608]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a5a:	e001      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d047      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a74:	d030      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a7a:	d82a      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005a7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a80:	d02c      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x364>
 8005a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a86:	d824      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8c:	d018      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a92:	d81e      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9c:	d007      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005a9e:	e018      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa0:	4b85      	ldr	r3, [pc, #532]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	4a84      	ldr	r2, [pc, #528]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005aac:	e017      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 f829 	bl	8006b0c <RCCEx_PLL2_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005abe:	e00e      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3324      	adds	r3, #36	; 0x24
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 f8d2 	bl	8006c70 <RCCEx_PLL3_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ad0:	e005      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ad6:	e002      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005ad8:	bf00      	nop
 8005ada:	e000      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ae4:	4b74      	ldr	r3, [pc, #464]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af0:	4971      	ldr	r1, [pc, #452]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	650b      	str	r3, [r1, #80]	; 0x50
 8005af6:	e001      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d049      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b10:	d02e      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005b12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b16:	d828      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005b18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b1c:	d02a      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005b1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b22:	d822      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005b24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b28:	d026      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005b2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b2e:	d81c      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b34:	d010      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b3a:	d816      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01d      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b44:	d111      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 ffdd 	bl	8006b0c <RCCEx_PLL2_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005b56:	e012      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3324      	adds	r3, #36	; 0x24
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 f886 	bl	8006c70 <RCCEx_PLL3_Config>
 8005b64:	4603      	mov	r3, r0
 8005b66:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005b68:	e009      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b6e:	e006      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005b70:	bf00      	nop
 8005b72:	e004      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005b74:	bf00      	nop
 8005b76:	e002      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005b78:	bf00      	nop
 8005b7a:	e000      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d109      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b84:	4b4c      	ldr	r3, [pc, #304]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b88:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b90:	4949      	ldr	r1, [pc, #292]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	650b      	str	r3, [r1, #80]	; 0x50
 8005b96:	e001      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d053      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bae:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005bb2:	d034      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005bb4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005bb8:	d82e      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bbe:	d030      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bc4:	d828      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bca:	d02c      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd0:	d822      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005bd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bd6:	d028      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005bd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bdc:	d81c      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be2:	d010      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be8:	d816      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01f      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bf2:	d111      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 ff86 	bl	8006b0c <RCCEx_PLL2_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c04:	e014      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3324      	adds	r3, #36	; 0x24
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 f82f 	bl	8006c70 <RCCEx_PLL3_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c16:	e00b      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1c:	e008      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c1e:	bf00      	nop
 8005c20:	e006      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c22:	bf00      	nop
 8005c24:	e004      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c26:	bf00      	nop
 8005c28:	e002      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c2a:	bf00      	nop
 8005c2c:	e000      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10a      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c36:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c44:	491c      	ldr	r1, [pc, #112]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	658b      	str	r3, [r1, #88]	; 0x58
 8005c4a:	e001      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d031      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c64:	d00e      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c6a:	d814      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d015      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c74:	d10f      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c76:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	4a0f      	ldr	r2, [pc, #60]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005c82:	e00c      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3304      	adds	r3, #4
 8005c88:	2101      	movs	r1, #1
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 ff3e 	bl	8006b0c <RCCEx_PLL2_Config>
 8005c90:	4603      	mov	r3, r0
 8005c92:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005c94:	e003      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	75fb      	strb	r3, [r7, #23]
      break;
 8005c9a:	e000      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8005c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ca4:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb0:	4901      	ldr	r1, [pc, #4]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	650b      	str	r3, [r1, #80]	; 0x50
 8005cb6:	e003      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8005cb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
 8005cbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d032      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d81b      	bhi.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005cd4:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005d13 	.word	0x08005d13
 8005ce0:	08005ced 	.word	0x08005ced
 8005ce4:	08005cfb 	.word	0x08005cfb
 8005ce8:	08005d13 	.word	0x08005d13
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cec:	4bb2      	ldr	r3, [pc, #712]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	4ab1      	ldr	r2, [pc, #708]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005cf8:	e00c      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	2102      	movs	r1, #2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 ff03 	bl	8006b0c <RCCEx_PLL2_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d0a:	e003      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d10:	e000      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d1a:	4ba7      	ldr	r3, [pc, #668]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1e:	f023 0203 	bic.w	r2, r3, #3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d26:	49a4      	ldr	r1, [pc, #656]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d2c:	e001      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 8086 	beq.w	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d40:	4b9e      	ldr	r3, [pc, #632]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a9d      	ldr	r2, [pc, #628]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d4c:	f7fc fce2 	bl	8002714 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d52:	e009      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d54:	f7fc fcde 	bl	8002714 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b64      	cmp	r3, #100	; 0x64
 8005d60:	d902      	bls.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	75fb      	strb	r3, [r7, #23]
        break;
 8005d66:	e005      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d68:	4b94      	ldr	r3, [pc, #592]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0ef      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d166      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d7a:	4b8f      	ldr	r3, [pc, #572]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d84:	4053      	eors	r3, r2
 8005d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d013      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d8e:	4b8a      	ldr	r3, [pc, #552]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d96:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d98:	4b87      	ldr	r3, [pc, #540]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9c:	4a86      	ldr	r2, [pc, #536]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005da4:	4b84      	ldr	r3, [pc, #528]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da8:	4a83      	ldr	r2, [pc, #524]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005db0:	4a81      	ldr	r2, [pc, #516]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc0:	d115      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc2:	f7fc fca7 	bl	8002714 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dc8:	e00b      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dca:	f7fc fca3 	bl	8002714 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d902      	bls.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	75fb      	strb	r3, [r7, #23]
            break;
 8005de0:	e005      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005de2:	4b75      	ldr	r3, [pc, #468]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0ed      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d126      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e02:	d10d      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8005e04:	4b6c      	ldr	r3, [pc, #432]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e12:	0919      	lsrs	r1, r3, #4
 8005e14:	4b6a      	ldr	r3, [pc, #424]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e16:	400b      	ands	r3, r1
 8005e18:	4967      	ldr	r1, [pc, #412]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	610b      	str	r3, [r1, #16]
 8005e1e:	e005      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8005e20:	4b65      	ldr	r3, [pc, #404]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	4a64      	ldr	r2, [pc, #400]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e2a:	6113      	str	r3, [r2, #16]
 8005e2c:	4b62      	ldr	r3, [pc, #392]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e3a:	495f      	ldr	r1, [pc, #380]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	670b      	str	r3, [r1, #112]	; 0x70
 8005e40:	e004      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	75bb      	strb	r3, [r7, #22]
 8005e46:	e001      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d07f      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e5e:	2b28      	cmp	r3, #40	; 0x28
 8005e60:	d866      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8005e62:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005f37 	.word	0x08005f37
 8005e6c:	08005f31 	.word	0x08005f31
 8005e70:	08005f31 	.word	0x08005f31
 8005e74:	08005f31 	.word	0x08005f31
 8005e78:	08005f31 	.word	0x08005f31
 8005e7c:	08005f31 	.word	0x08005f31
 8005e80:	08005f31 	.word	0x08005f31
 8005e84:	08005f31 	.word	0x08005f31
 8005e88:	08005f0d 	.word	0x08005f0d
 8005e8c:	08005f31 	.word	0x08005f31
 8005e90:	08005f31 	.word	0x08005f31
 8005e94:	08005f31 	.word	0x08005f31
 8005e98:	08005f31 	.word	0x08005f31
 8005e9c:	08005f31 	.word	0x08005f31
 8005ea0:	08005f31 	.word	0x08005f31
 8005ea4:	08005f31 	.word	0x08005f31
 8005ea8:	08005f1f 	.word	0x08005f1f
 8005eac:	08005f31 	.word	0x08005f31
 8005eb0:	08005f31 	.word	0x08005f31
 8005eb4:	08005f31 	.word	0x08005f31
 8005eb8:	08005f31 	.word	0x08005f31
 8005ebc:	08005f31 	.word	0x08005f31
 8005ec0:	08005f31 	.word	0x08005f31
 8005ec4:	08005f31 	.word	0x08005f31
 8005ec8:	08005f37 	.word	0x08005f37
 8005ecc:	08005f31 	.word	0x08005f31
 8005ed0:	08005f31 	.word	0x08005f31
 8005ed4:	08005f31 	.word	0x08005f31
 8005ed8:	08005f31 	.word	0x08005f31
 8005edc:	08005f31 	.word	0x08005f31
 8005ee0:	08005f31 	.word	0x08005f31
 8005ee4:	08005f31 	.word	0x08005f31
 8005ee8:	08005f37 	.word	0x08005f37
 8005eec:	08005f31 	.word	0x08005f31
 8005ef0:	08005f31 	.word	0x08005f31
 8005ef4:	08005f31 	.word	0x08005f31
 8005ef8:	08005f31 	.word	0x08005f31
 8005efc:	08005f31 	.word	0x08005f31
 8005f00:	08005f31 	.word	0x08005f31
 8005f04:	08005f31 	.word	0x08005f31
 8005f08:	08005f37 	.word	0x08005f37
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3304      	adds	r3, #4
 8005f10:	2101      	movs	r1, #1
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fdfa 	bl	8006b0c <RCCEx_PLL2_Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f1c:	e00c      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3324      	adds	r3, #36	; 0x24
 8005f22:	2101      	movs	r1, #1
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fea3 	bl	8006c70 <RCCEx_PLL3_Config>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f2e:	e003      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	75fb      	strb	r3, [r7, #23]
      break;
 8005f34:	e000      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8005f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f3e:	4b1e      	ldr	r3, [pc, #120]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f42:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f4c:	491a      	ldr	r1, [pc, #104]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	654b      	str	r3, [r1, #84]	; 0x54
 8005f52:	e001      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
 8005f56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d03f      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f68:	2b05      	cmp	r3, #5
 8005f6a:	d821      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005f6c:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8005f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f72:	bf00      	nop
 8005f74:	08005fc5 	.word	0x08005fc5
 8005f78:	08005f8d 	.word	0x08005f8d
 8005f7c:	08005f9f 	.word	0x08005f9f
 8005f80:	08005fc5 	.word	0x08005fc5
 8005f84:	08005fc5 	.word	0x08005fc5
 8005f88:	08005fc5 	.word	0x08005fc5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	2101      	movs	r1, #1
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fdba 	bl	8006b0c <RCCEx_PLL2_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005f9c:	e013      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3324      	adds	r3, #36	; 0x24
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fe63 	bl	8006c70 <RCCEx_PLL3_Config>
 8005faa:	4603      	mov	r3, r0
 8005fac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005fae:	e00a      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fb4:	e007      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8005fb6:	bf00      	nop
 8005fb8:	58024400 	.word	0x58024400
 8005fbc:	58024800 	.word	0x58024800
 8005fc0:	00ffffcf 	.word	0x00ffffcf
      break;
 8005fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d109      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005fcc:	4b9f      	ldr	r3, [pc, #636]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd0:	f023 0207 	bic.w	r2, r3, #7
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd8:	499c      	ldr	r1, [pc, #624]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	654b      	str	r3, [r1, #84]	; 0x54
 8005fde:	e001      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d039      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d820      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006043 	.word	0x08006043
 8006004:	08006019 	.word	0x08006019
 8006008:	0800602b 	.word	0x0800602b
 800600c:	08006043 	.word	0x08006043
 8006010:	08006043 	.word	0x08006043
 8006014:	08006043 	.word	0x08006043
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3304      	adds	r3, #4
 800601c:	2101      	movs	r1, #1
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fd74 	bl	8006b0c <RCCEx_PLL2_Config>
 8006024:	4603      	mov	r3, r0
 8006026:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006028:	e00c      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3324      	adds	r3, #36	; 0x24
 800602e:	2101      	movs	r1, #1
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fe1d 	bl	8006c70 <RCCEx_PLL3_Config>
 8006036:	4603      	mov	r3, r0
 8006038:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800603a:	e003      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	75fb      	strb	r3, [r7, #23]
      break;
 8006040:	e000      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8006042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800604a:	4b80      	ldr	r3, [pc, #512]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800604c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604e:	f023 0207 	bic.w	r2, r3, #7
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006058:	497c      	ldr	r1, [pc, #496]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800605a:	4313      	orrs	r3, r2
 800605c:	658b      	str	r3, [r1, #88]	; 0x58
 800605e:	e001      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d04b      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800607a:	d02e      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x962>
 800607c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006080:	d828      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006086:	d02a      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608c:	d822      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800608e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006092:	d026      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006094:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006098:	d81c      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800609a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800609e:	d010      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80060a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060a4:	d816      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d01d      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80060aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ae:	d111      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	2100      	movs	r1, #0
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fd28 	bl	8006b0c <RCCEx_PLL2_Config>
 80060bc:	4603      	mov	r3, r0
 80060be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80060c0:	e012      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3324      	adds	r3, #36	; 0x24
 80060c6:	2102      	movs	r1, #2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fdd1 	bl	8006c70 <RCCEx_PLL3_Config>
 80060ce:	4603      	mov	r3, r0
 80060d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80060d2:	e009      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	75fb      	strb	r3, [r7, #23]
      break;
 80060d8:	e006      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80060da:	bf00      	nop
 80060dc:	e004      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80060de:	bf00      	nop
 80060e0:	e002      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80060e2:	bf00      	nop
 80060e4:	e000      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80060e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10a      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060ee:	4b57      	ldr	r3, [pc, #348]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060fc:	4953      	ldr	r1, [pc, #332]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	654b      	str	r3, [r1, #84]	; 0x54
 8006102:	e001      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006104:	7dfb      	ldrb	r3, [r7, #23]
 8006106:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d04b      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800611a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800611e:	d02e      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8006120:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006124:	d828      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612a:	d02a      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800612c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006130:	d822      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006132:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006136:	d026      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006138:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800613c:	d81c      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800613e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006142:	d010      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8006144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006148:	d816      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01d      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800614e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006152:	d111      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3304      	adds	r3, #4
 8006158:	2100      	movs	r1, #0
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fcd6 	bl	8006b0c <RCCEx_PLL2_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006164:	e012      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3324      	adds	r3, #36	; 0x24
 800616a:	2102      	movs	r1, #2
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fd7f 	bl	8006c70 <RCCEx_PLL3_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006176:	e009      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75fb      	strb	r3, [r7, #23]
      break;
 800617c:	e006      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800617e:	bf00      	nop
 8006180:	e004      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006182:	bf00      	nop
 8006184:	e002      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006186:	bf00      	nop
 8006188:	e000      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800618a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006192:	4b2e      	ldr	r3, [pc, #184]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006196:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061a0:	492a      	ldr	r1, [pc, #168]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	658b      	str	r3, [r1, #88]	; 0x58
 80061a6:	e001      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
 80061aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d04d      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80061c2:	d02e      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80061c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80061c8:	d828      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80061ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ce:	d02a      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80061d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d4:	d822      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80061d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80061da:	d026      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80061dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80061e0:	d81c      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80061e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061e6:	d010      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80061e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ec:	d816      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01d      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80061f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f6:	d111      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3304      	adds	r3, #4
 80061fc:	2100      	movs	r1, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fc84 	bl	8006b0c <RCCEx_PLL2_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006208:	e012      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3324      	adds	r3, #36	; 0x24
 800620e:	2102      	movs	r1, #2
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fd2d 	bl	8006c70 <RCCEx_PLL3_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800621a:	e009      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	75fb      	strb	r3, [r7, #23]
      break;
 8006220:	e006      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006222:	bf00      	nop
 8006224:	e004      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006226:	bf00      	nop
 8006228:	e002      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800622a:	bf00      	nop
 800622c:	e000      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800622e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10c      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006244:	4901      	ldr	r1, [pc, #4]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006246:	4313      	orrs	r3, r2
 8006248:	658b      	str	r3, [r1, #88]	; 0x58
 800624a:	e003      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800624c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01a      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626a:	d10a      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3324      	adds	r3, #36	; 0x24
 8006270:	2102      	movs	r1, #2
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fcfc 	bl	8006c70 <RCCEx_PLL3_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006282:	4b8c      	ldr	r3, [pc, #560]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006290:	4988      	ldr	r1, [pc, #544]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006292:	4313      	orrs	r3, r2
 8006294:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01a      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ac:	d10a      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3324      	adds	r3, #36	; 0x24
 80062b2:	2102      	movs	r1, #2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fcdb 	bl	8006c70 <RCCEx_PLL3_Config>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062c4:	4b7b      	ldr	r3, [pc, #492]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80062c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062d2:	4978      	ldr	r1, [pc, #480]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d034      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062ee:	d01d      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80062f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062f4:	d817      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80062fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fe:	d009      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006300:	e011      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3304      	adds	r3, #4
 8006306:	2100      	movs	r1, #0
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fbff 	bl	8006b0c <RCCEx_PLL2_Config>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006312:	e00c      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3324      	adds	r3, #36	; 0x24
 8006318:	2102      	movs	r1, #2
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fca8 	bl	8006c70 <RCCEx_PLL3_Config>
 8006320:	4603      	mov	r3, r0
 8006322:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006324:	e003      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	75fb      	strb	r3, [r7, #23]
      break;
 800632a:	e000      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800632c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006334:	4b5f      	ldr	r3, [pc, #380]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006342:	495c      	ldr	r1, [pc, #368]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006344:	4313      	orrs	r3, r2
 8006346:	658b      	str	r3, [r1, #88]	; 0x58
 8006348:	e001      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d033      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006360:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006364:	d01c      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006366:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800636a:	d816      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800636c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006370:	d003      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8006372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006376:	d007      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006378:	e00f      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800637a:	4b4e      	ldr	r3, [pc, #312]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	4a4d      	ldr	r2, [pc, #308]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006384:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006386:	e00c      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3324      	adds	r3, #36	; 0x24
 800638c:	2101      	movs	r1, #1
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fc6e 	bl	8006c70 <RCCEx_PLL3_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006398:	e003      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
      break;
 800639e:	e000      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80063a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063a8:	4b42      	ldr	r3, [pc, #264]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80063aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b6:	493f      	ldr	r1, [pc, #252]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	654b      	str	r3, [r1, #84]	; 0x54
 80063bc:	e001      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d029      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80063d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063da:	d007      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80063dc:	e00f      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063de:	4b35      	ldr	r3, [pc, #212]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	4a34      	ldr	r2, [pc, #208]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80063e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80063ea:	e00b      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3304      	adds	r3, #4
 80063f0:	2102      	movs	r1, #2
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fb8a 	bl	8006b0c <RCCEx_PLL2_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80063fc:	e002      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	75fb      	strb	r3, [r7, #23]
      break;
 8006402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006404:	7dfb      	ldrb	r3, [r7, #23]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800640a:	4b2a      	ldr	r3, [pc, #168]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800640c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006416:	4927      	ldr	r1, [pc, #156]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006418:	4313      	orrs	r3, r2
 800641a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800641c:	e001      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641e:	7dfb      	ldrb	r3, [r7, #23]
 8006420:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3324      	adds	r3, #36	; 0x24
 8006432:	2102      	movs	r1, #2
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fc1b 	bl	8006c70 <RCCEx_PLL3_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d035      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800645a:	d017      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800645c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006460:	d811      	bhi.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006466:	d013      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800646c:	d80b      	bhi.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d010      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006476:	d106      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006478:	4b0e      	ldr	r3, [pc, #56]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	4a0d      	ldr	r2, [pc, #52]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800647e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006484:	e007      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	75fb      	strb	r3, [r7, #23]
      break;
 800648a:	e004      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800648c:	bf00      	nop
 800648e:	e002      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006490:	bf00      	nop
 8006492:	e000      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10d      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800649c:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800649e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064aa:	4902      	ldr	r1, [pc, #8]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	654b      	str	r3, [r1, #84]	; 0x54
 80064b0:	e004      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80064b2:	bf00      	nop
 80064b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b8:	7dfb      	ldrb	r3, [r7, #23]
 80064ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d008      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064c8:	4b30      	ldr	r3, [pc, #192]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064d4:	492d      	ldr	r1, [pc, #180]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d008      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064e6:	4b29      	ldr	r3, [pc, #164]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064f2:	4926      	ldr	r1, [pc, #152]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006500:	2b00      	cmp	r3, #0
 8006502:	d008      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006504:	4b21      	ldr	r3, [pc, #132]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006508:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	491e      	ldr	r1, [pc, #120]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006512:	4313      	orrs	r3, r2
 8006514:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00d      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006522:	4b1a      	ldr	r3, [pc, #104]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	4a19      	ldr	r2, [pc, #100]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006528:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800652c:	6113      	str	r3, [r2, #16]
 800652e:	4b17      	ldr	r3, [pc, #92]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006530:	691a      	ldr	r2, [r3, #16]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006538:	4914      	ldr	r1, [pc, #80]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800653a:	4313      	orrs	r3, r2
 800653c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	da08      	bge.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006546:	4b11      	ldr	r3, [pc, #68]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006552:	490e      	ldr	r1, [pc, #56]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006554:	4313      	orrs	r3, r2
 8006556:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d009      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006564:	4b09      	ldr	r3, [pc, #36]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006568:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006572:	4906      	ldr	r1, [pc, #24]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006574:	4313      	orrs	r3, r2
 8006576:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006578:	7dbb      	ldrb	r3, [r7, #22]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e000      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	58024400 	.word	0x58024400

08006590 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006594:	f7ff f894 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 8006598:	4602      	mov	r2, r0
 800659a:	4b06      	ldr	r3, [pc, #24]	; (80065b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	091b      	lsrs	r3, r3, #4
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	4904      	ldr	r1, [pc, #16]	; (80065b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80065a6:	5ccb      	ldrb	r3, [r1, r3]
 80065a8:	f003 031f 	and.w	r3, r3, #31
 80065ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	58024400 	.word	0x58024400
 80065b8:	0800ae7c 	.word	0x0800ae7c

080065bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80065bc:	b480      	push	{r7}
 80065be:	b089      	sub	sp, #36	; 0x24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065c4:	4ba1      	ldr	r3, [pc, #644]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80065ce:	4b9f      	ldr	r3, [pc, #636]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d2:	0b1b      	lsrs	r3, r3, #12
 80065d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80065da:	4b9c      	ldr	r3, [pc, #624]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065de:	091b      	lsrs	r3, r3, #4
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80065e6:	4b99      	ldr	r3, [pc, #612]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ea:	08db      	lsrs	r3, r3, #3
 80065ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	fb02 f303 	mul.w	r3, r2, r3
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 8111 	beq.w	800682c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	2b02      	cmp	r3, #2
 800660e:	f000 8083 	beq.w	8006718 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	2b02      	cmp	r3, #2
 8006616:	f200 80a1 	bhi.w	800675c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d056      	beq.n	80066d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006626:	e099      	b.n	800675c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006628:	4b88      	ldr	r3, [pc, #544]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b00      	cmp	r3, #0
 8006632:	d02d      	beq.n	8006690 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006634:	4b85      	ldr	r3, [pc, #532]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	08db      	lsrs	r3, r3, #3
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	4a84      	ldr	r2, [pc, #528]	; (8006850 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006640:	fa22 f303 	lsr.w	r3, r2, r3
 8006644:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	ee07 3a90 	vmov	s15, r3
 800664c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800665e:	4b7b      	ldr	r3, [pc, #492]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800666e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006672:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006854 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800667a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800667e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800668e:	e087      	b.n	80067a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006858 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800669e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a2:	4b6a      	ldr	r3, [pc, #424]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006854 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066d2:	e065      	b.n	80067a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800685c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80066e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066e6:	4b59      	ldr	r3, [pc, #356]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006854 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800670a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800670e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006712:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006716:	e043      	b.n	80067a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006722:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800672a:	4b48      	ldr	r3, [pc, #288]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800673a:	ed97 6a03 	vldr	s12, [r7, #12]
 800673e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006854 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800674a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800674e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006756:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800675a:	e021      	b.n	80067a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006766:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800685c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800676a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676e:	4b37      	ldr	r3, [pc, #220]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800677e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006782:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006854 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800678a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800678e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800679e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80067a0:	4b2a      	ldr	r3, [pc, #168]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	0a5b      	lsrs	r3, r3, #9
 80067a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80067be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067c6:	ee17 2a90 	vmov	r2, s15
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80067ce:	4b1f      	ldr	r3, [pc, #124]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d2:	0c1b      	lsrs	r3, r3, #16
 80067d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80067ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067f4:	ee17 2a90 	vmov	r2, s15
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80067fc:	4b13      	ldr	r3, [pc, #76]	; (800684c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	0e1b      	lsrs	r3, r3, #24
 8006802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006812:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006816:	edd7 6a07 	vldr	s13, [r7, #28]
 800681a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800681e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006822:	ee17 2a90 	vmov	r2, s15
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800682a:	e008      	b.n	800683e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	609a      	str	r2, [r3, #8]
}
 800683e:	bf00      	nop
 8006840:	3724      	adds	r7, #36	; 0x24
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	58024400 	.word	0x58024400
 8006850:	03d09000 	.word	0x03d09000
 8006854:	46000000 	.word	0x46000000
 8006858:	4c742400 	.word	0x4c742400
 800685c:	4a742400 	.word	0x4a742400
 8006860:	4af42400 	.word	0x4af42400

08006864 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006864:	b480      	push	{r7}
 8006866:	b089      	sub	sp, #36	; 0x24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800686c:	4ba1      	ldr	r3, [pc, #644]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	f003 0303 	and.w	r3, r3, #3
 8006874:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006876:	4b9f      	ldr	r3, [pc, #636]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	0d1b      	lsrs	r3, r3, #20
 800687c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006880:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006882:	4b9c      	ldr	r3, [pc, #624]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	0a1b      	lsrs	r3, r3, #8
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800688e:	4b99      	ldr	r3, [pc, #612]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006892:	08db      	lsrs	r3, r3, #3
 8006894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	fb02 f303 	mul.w	r3, r2, r3
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8111 	beq.w	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	f000 8083 	beq.w	80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b02      	cmp	r3, #2
 80068be:	f200 80a1 	bhi.w	8006a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d056      	beq.n	800697c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80068ce:	e099      	b.n	8006a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068d0:	4b88      	ldr	r3, [pc, #544]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d02d      	beq.n	8006938 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068dc:	4b85      	ldr	r3, [pc, #532]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	08db      	lsrs	r3, r3, #3
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	4a84      	ldr	r2, [pc, #528]	; (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80068e8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	ee07 3a90 	vmov	s15, r3
 80068f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006906:	4b7b      	ldr	r3, [pc, #492]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006916:	ed97 6a03 	vldr	s12, [r7, #12]
 800691a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800691e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800692a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800692e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006932:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006936:	e087      	b.n	8006a48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006942:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006b00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694a:	4b6a      	ldr	r3, [pc, #424]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695a:	ed97 6a03 	vldr	s12, [r7, #12]
 800695e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800696a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800696e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800697a:	e065      	b.n	8006a48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006986:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006b04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800698a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800698e:	4b59      	ldr	r3, [pc, #356]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800699e:	ed97 6a03 	vldr	s12, [r7, #12]
 80069a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069be:	e043      	b.n	8006a48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80069ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069d2:	4b48      	ldr	r3, [pc, #288]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a02:	e021      	b.n	8006a48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006b04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a16:	4b37      	ldr	r3, [pc, #220]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006a48:	4b2a      	ldr	r3, [pc, #168]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	0a5b      	lsrs	r3, r3, #9
 8006a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a6e:	ee17 2a90 	vmov	r2, s15
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006a76:	4b1f      	ldr	r3, [pc, #124]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	0c1b      	lsrs	r3, r3, #16
 8006a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a80:	ee07 3a90 	vmov	s15, r3
 8006a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a9c:	ee17 2a90 	vmov	r2, s15
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006aa4:	4b13      	ldr	r3, [pc, #76]	; (8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	0e1b      	lsrs	r3, r3, #24
 8006aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aca:	ee17 2a90 	vmov	r2, s15
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	609a      	str	r2, [r3, #8]
}
 8006ae6:	bf00      	nop
 8006ae8:	3724      	adds	r7, #36	; 0x24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	58024400 	.word	0x58024400
 8006af8:	03d09000 	.word	0x03d09000
 8006afc:	46000000 	.word	0x46000000
 8006b00:	4c742400 	.word	0x4c742400
 8006b04:	4a742400 	.word	0x4a742400
 8006b08:	4af42400 	.word	0x4af42400

08006b0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b1a:	4b53      	ldr	r3, [pc, #332]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d101      	bne.n	8006b2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e099      	b.n	8006c5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006b2a:	4b4f      	ldr	r3, [pc, #316]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a4e      	ldr	r2, [pc, #312]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006b30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b36:	f7fb fded 	bl	8002714 <HAL_GetTick>
 8006b3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b3c:	e008      	b.n	8006b50 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006b3e:	f7fb fde9 	bl	8002714 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e086      	b.n	8006c5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b50:	4b45      	ldr	r3, [pc, #276]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f0      	bne.n	8006b3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006b5c:	4b42      	ldr	r3, [pc, #264]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	031b      	lsls	r3, r3, #12
 8006b6a:	493f      	ldr	r1, [pc, #252]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	628b      	str	r3, [r1, #40]	; 0x28
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	3b01      	subs	r3, #1
 8006b76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	025b      	lsls	r3, r3, #9
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	431a      	orrs	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	041b      	lsls	r3, r3, #16
 8006b8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	061b      	lsls	r3, r3, #24
 8006b9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ba0:	4931      	ldr	r1, [pc, #196]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ba6:	4b30      	ldr	r3, [pc, #192]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	492d      	ldr	r1, [pc, #180]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006bb8:	4b2b      	ldr	r3, [pc, #172]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	f023 0220 	bic.w	r2, r3, #32
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	4928      	ldr	r1, [pc, #160]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006bca:	4b27      	ldr	r3, [pc, #156]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	4a26      	ldr	r2, [pc, #152]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006bd0:	f023 0310 	bic.w	r3, r3, #16
 8006bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006bd6:	4b24      	ldr	r3, [pc, #144]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bda:	4b24      	ldr	r3, [pc, #144]	; (8006c6c <RCCEx_PLL2_Config+0x160>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	69d2      	ldr	r2, [r2, #28]
 8006be2:	00d2      	lsls	r2, r2, #3
 8006be4:	4920      	ldr	r1, [pc, #128]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006bea:	4b1f      	ldr	r3, [pc, #124]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	4a1e      	ldr	r2, [pc, #120]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006bf0:	f043 0310 	orr.w	r3, r3, #16
 8006bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d106      	bne.n	8006c0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006bfc:	4b1a      	ldr	r3, [pc, #104]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	4a19      	ldr	r2, [pc, #100]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006c02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c08:	e00f      	b.n	8006c2a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d106      	bne.n	8006c1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006c10:	4b15      	ldr	r3, [pc, #84]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	4a14      	ldr	r2, [pc, #80]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c1c:	e005      	b.n	8006c2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006c1e:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	4a11      	ldr	r2, [pc, #68]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006c24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006c2a:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a0e      	ldr	r2, [pc, #56]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006c30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c36:	f7fb fd6d 	bl	8002714 <HAL_GetTick>
 8006c3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c3c:	e008      	b.n	8006c50 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006c3e:	f7fb fd69 	bl	8002714 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d901      	bls.n	8006c50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e006      	b.n	8006c5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c50:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <RCCEx_PLL2_Config+0x15c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0f0      	beq.n	8006c3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	ffff0007 	.word	0xffff0007

08006c70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c7e:	4b53      	ldr	r3, [pc, #332]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d101      	bne.n	8006c8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e099      	b.n	8006dc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006c8e:	4b4f      	ldr	r3, [pc, #316]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a4e      	ldr	r2, [pc, #312]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c9a:	f7fb fd3b 	bl	8002714 <HAL_GetTick>
 8006c9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ca0:	e008      	b.n	8006cb4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006ca2:	f7fb fd37 	bl	8002714 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e086      	b.n	8006dc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006cb4:	4b45      	ldr	r3, [pc, #276]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1f0      	bne.n	8006ca2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006cc0:	4b42      	ldr	r3, [pc, #264]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	051b      	lsls	r3, r3, #20
 8006cce:	493f      	ldr	r1, [pc, #252]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	628b      	str	r3, [r1, #40]	; 0x28
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	025b      	lsls	r3, r3, #9
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	041b      	lsls	r3, r3, #16
 8006cf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	061b      	lsls	r3, r3, #24
 8006d00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d04:	4931      	ldr	r1, [pc, #196]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d0a:	4b30      	ldr	r3, [pc, #192]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	492d      	ldr	r1, [pc, #180]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d1c:	4b2b      	ldr	r3, [pc, #172]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	4928      	ldr	r1, [pc, #160]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006d2e:	4b27      	ldr	r3, [pc, #156]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	4a26      	ldr	r2, [pc, #152]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006d3a:	4b24      	ldr	r3, [pc, #144]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d3e:	4b24      	ldr	r3, [pc, #144]	; (8006dd0 <RCCEx_PLL3_Config+0x160>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	69d2      	ldr	r2, [r2, #28]
 8006d46:	00d2      	lsls	r2, r2, #3
 8006d48:	4920      	ldr	r1, [pc, #128]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006d4e:	4b1f      	ldr	r3, [pc, #124]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d52:	4a1e      	ldr	r2, [pc, #120]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d106      	bne.n	8006d6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006d60:	4b1a      	ldr	r3, [pc, #104]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d6c:	e00f      	b.n	8006d8e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d106      	bne.n	8006d82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006d74:	4b15      	ldr	r3, [pc, #84]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	4a14      	ldr	r2, [pc, #80]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d80:	e005      	b.n	8006d8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006d82:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d86:	4a11      	ldr	r2, [pc, #68]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006d8e:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a0e      	ldr	r2, [pc, #56]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d9a:	f7fb fcbb 	bl	8002714 <HAL_GetTick>
 8006d9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006da0:	e008      	b.n	8006db4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006da2:	f7fb fcb7 	bl	8002714 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e006      	b.n	8006dc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <RCCEx_PLL3_Config+0x15c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0f0      	beq.n	8006da2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	58024400 	.word	0x58024400
 8006dd0:	ffff0007 	.word	0xffff0007

08006dd4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e0f1      	b.n	8006fca <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a78      	ldr	r2, [pc, #480]	; (8006fd4 <HAL_SPI_Init+0x200>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00f      	beq.n	8006e16 <HAL_SPI_Init+0x42>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a77      	ldr	r2, [pc, #476]	; (8006fd8 <HAL_SPI_Init+0x204>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00a      	beq.n	8006e16 <HAL_SPI_Init+0x42>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a75      	ldr	r2, [pc, #468]	; (8006fdc <HAL_SPI_Init+0x208>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d005      	beq.n	8006e16 <HAL_SPI_Init+0x42>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	2b0f      	cmp	r3, #15
 8006e10:	d901      	bls.n	8006e16 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e0d9      	b.n	8006fca <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fdd8 	bl	80079cc <SPI_GetPacketSize>
 8006e1c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a6c      	ldr	r2, [pc, #432]	; (8006fd4 <HAL_SPI_Init+0x200>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00c      	beq.n	8006e42 <HAL_SPI_Init+0x6e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a6a      	ldr	r2, [pc, #424]	; (8006fd8 <HAL_SPI_Init+0x204>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d007      	beq.n	8006e42 <HAL_SPI_Init+0x6e>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a69      	ldr	r2, [pc, #420]	; (8006fdc <HAL_SPI_Init+0x208>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d002      	beq.n	8006e42 <HAL_SPI_Init+0x6e>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d811      	bhi.n	8006e66 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e46:	4a63      	ldr	r2, [pc, #396]	; (8006fd4 <HAL_SPI_Init+0x200>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d009      	beq.n	8006e60 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a61      	ldr	r2, [pc, #388]	; (8006fd8 <HAL_SPI_Init+0x204>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_SPI_Init+0x8c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a60      	ldr	r2, [pc, #384]	; (8006fdc <HAL_SPI_Init+0x208>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d104      	bne.n	8006e6a <HAL_SPI_Init+0x96>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d901      	bls.n	8006e6a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e0af      	b.n	8006fca <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fb f8e4 	bl	800204c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0201 	bic.w	r2, r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006ea6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006eb0:	d119      	bne.n	8006ee6 <HAL_SPI_Init+0x112>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eba:	d103      	bne.n	8006ec4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d008      	beq.n	8006ed6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10c      	bne.n	8006ee6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ed4:	d107      	bne.n	8006ee6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ee4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69da      	ldr	r2, [r3, #28]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef8:	ea42 0103 	orr.w	r1, r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	431a      	orrs	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	431a      	orrs	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	431a      	orrs	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f46:	ea42 0103 	orr.w	r1, r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d113      	bne.n	8006f86 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f70:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f84:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0201 	bic.w	r2, r2, #1
 8006f94:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40013000 	.word	0x40013000
 8006fd8:	40003800 	.word	0x40003800
 8006fdc:	40003c00 	.word	0x40003c00

08006fe0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08a      	sub	sp, #40	; 0x28
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	4613      	mov	r3, r2
 8006fee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3320      	adds	r3, #32
 8006ff6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_SPI_Transmit+0x2a>
 8007006:	2302      	movs	r3, #2
 8007008:	e1d7      	b.n	80073ba <HAL_SPI_Transmit+0x3da>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007012:	f7fb fb7f 	bl	8002714 <HAL_GetTick>
 8007016:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b01      	cmp	r3, #1
 8007022:	d007      	beq.n	8007034 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007024:	2302      	movs	r3, #2
 8007026:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007030:	7efb      	ldrb	r3, [r7, #27]
 8007032:	e1c2      	b.n	80073ba <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_SPI_Transmit+0x60>
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d107      	bne.n	8007050 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800704c:	7efb      	ldrb	r3, [r7, #27]
 800704e:	e1b4      	b.n	80073ba <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2203      	movs	r2, #3
 8007054:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	88fa      	ldrh	r2, [r7, #6]
 800706a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	88fa      	ldrh	r2, [r7, #6]
 8007072:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80070a0:	d107      	bne.n	80070b2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	4b96      	ldr	r3, [pc, #600]	; (8007314 <HAL_SPI_Transmit+0x334>)
 80070ba:	4013      	ands	r3, r2
 80070bc:	88f9      	ldrh	r1, [r7, #6]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	6812      	ldr	r2, [r2, #0]
 80070c2:	430b      	orrs	r3, r1
 80070c4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f042 0201 	orr.w	r2, r2, #1
 80070d4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070de:	d107      	bne.n	80070f0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	2b0f      	cmp	r3, #15
 80070f6:	d947      	bls.n	8007188 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80070f8:	e03f      	b.n	800717a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b02      	cmp	r3, #2
 8007106:	d114      	bne.n	8007132 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6812      	ldr	r2, [r2, #0]
 8007112:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007118:	1d1a      	adds	r2, r3, #4
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007130:	e023      	b.n	800717a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007132:	f7fb faef 	bl	8002714 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d803      	bhi.n	800714a <HAL_SPI_Transmit+0x16a>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d102      	bne.n	8007150 <HAL_SPI_Transmit+0x170>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d114      	bne.n	800717a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fb6d 	bl	8007830 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e11f      	b.n	80073ba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1b9      	bne.n	80070fa <HAL_SPI_Transmit+0x11a>
 8007186:	e0f2      	b.n	800736e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	2b07      	cmp	r3, #7
 800718e:	f240 80e7 	bls.w	8007360 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007192:	e05d      	b.n	8007250 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d132      	bne.n	8007208 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d918      	bls.n	80071e0 <HAL_SPI_Transmit+0x200>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d014      	beq.n	80071e0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c6:	1d1a      	adds	r2, r3, #4
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	3b02      	subs	r3, #2
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80071de:	e037      	b.n	8007250 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e4:	881a      	ldrh	r2, [r3, #0]
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ee:	1c9a      	adds	r2, r3, #2
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007206:	e023      	b.n	8007250 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007208:	f7fb fa84 	bl	8002714 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d803      	bhi.n	8007220 <HAL_SPI_Transmit+0x240>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721e:	d102      	bne.n	8007226 <HAL_SPI_Transmit+0x246>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d114      	bne.n	8007250 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 fb02 	bl	8007830 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800723a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e0b4      	b.n	80073ba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007256:	b29b      	uxth	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d19b      	bne.n	8007194 <HAL_SPI_Transmit+0x1b4>
 800725c:	e087      	b.n	800736e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b02      	cmp	r3, #2
 800726a:	d155      	bne.n	8007318 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007272:	b29b      	uxth	r3, r3
 8007274:	2b03      	cmp	r3, #3
 8007276:	d918      	bls.n	80072aa <HAL_SPI_Transmit+0x2ca>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727c:	2b40      	cmp	r3, #64	; 0x40
 800727e:	d914      	bls.n	80072aa <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007290:	1d1a      	adds	r2, r3, #4
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800729c:	b29b      	uxth	r3, r3
 800729e:	3b04      	subs	r3, #4
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80072a8:	e05a      	b.n	8007360 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d917      	bls.n	80072e6 <HAL_SPI_Transmit+0x306>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d013      	beq.n	80072e6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c2:	881a      	ldrh	r2, [r3, #0]
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072cc:	1c9a      	adds	r2, r3, #2
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b02      	subs	r3, #2
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80072e4:	e03c      	b.n	8007360 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3320      	adds	r3, #32
 80072f0:	7812      	ldrb	r2, [r2, #0]
 80072f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007310:	e026      	b.n	8007360 <HAL_SPI_Transmit+0x380>
 8007312:	bf00      	nop
 8007314:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007318:	f7fb f9fc 	bl	8002714 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	429a      	cmp	r2, r3
 8007326:	d803      	bhi.n	8007330 <HAL_SPI_Transmit+0x350>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732e:	d102      	bne.n	8007336 <HAL_SPI_Transmit+0x356>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d114      	bne.n	8007360 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 fa7a 	bl	8007830 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800734a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e02c      	b.n	80073ba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	f47f af78 	bne.w	800725e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2200      	movs	r2, #0
 8007376:	2108      	movs	r1, #8
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 faf9 	bl	8007970 <SPI_WaitOnFlagUntilTimeout>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d007      	beq.n	8007394 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800738a:	f043 0220 	orr.w	r2, r3, #32
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 fa4b 	bl	8007830 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80073b8:	7efb      	ldrb	r3, [r7, #27]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3720      	adds	r7, #32
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop

080073c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08e      	sub	sp, #56	; 0x38
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3320      	adds	r3, #32
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3330      	adds	r3, #48	; 0x30
 80073e6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_SPI_TransmitReceive+0x32>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e209      	b.n	800780a <HAL_SPI_TransmitReceive+0x446>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073fe:	f7fb f989 	bl	8002714 <HAL_GetTick>
 8007402:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8007404:	887b      	ldrh	r3, [r7, #2]
 8007406:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8007408:	887b      	ldrh	r3, [r7, #2]
 800740a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007412:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800741a:	7efb      	ldrb	r3, [r7, #27]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d014      	beq.n	800744a <HAL_SPI_TransmitReceive+0x86>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007426:	d106      	bne.n	8007436 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007430:	7efb      	ldrb	r3, [r7, #27]
 8007432:	2b04      	cmp	r3, #4
 8007434:	d009      	beq.n	800744a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8007436:	2302      	movs	r3, #2
 8007438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007444:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007448:	e1df      	b.n	800780a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <HAL_SPI_TransmitReceive+0x98>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <HAL_SPI_TransmitReceive+0x98>
 8007456:	887b      	ldrh	r3, [r7, #2]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d109      	bne.n	8007470 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800746a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800746e:	e1cc      	b.n	800780a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b04      	cmp	r3, #4
 800747a:	d003      	beq.n	8007484 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2205      	movs	r2, #5
 8007480:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	887a      	ldrh	r2, [r7, #2]
 8007496:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	887a      	ldrh	r2, [r7, #2]
 800749e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	887a      	ldrh	r2, [r7, #2]
 80074ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	887a      	ldrh	r2, [r7, #2]
 80074b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	4b82      	ldr	r3, [pc, #520]	; (80076d4 <HAL_SPI_TransmitReceive+0x310>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	8879      	ldrh	r1, [r7, #2]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	6812      	ldr	r2, [r2, #0]
 80074d4:	430b      	orrs	r3, r1
 80074d6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0201 	orr.w	r2, r2, #1
 80074e6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074f0:	d107      	bne.n	8007502 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007500:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	2b0f      	cmp	r3, #15
 8007508:	d970      	bls.n	80075ec <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800750a:	e068      	b.n	80075de <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b02      	cmp	r3, #2
 8007518:	d11a      	bne.n	8007550 <HAL_SPI_TransmitReceive+0x18c>
 800751a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800751c:	2b00      	cmp	r3, #0
 800751e:	d017      	beq.n	8007550 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007530:	1d1a      	adds	r2, r3, #4
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800753c:	b29b      	uxth	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800754e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695a      	ldr	r2, [r3, #20]
 8007556:	f248 0308 	movw	r3, #32776	; 0x8008
 800755a:	4013      	ands	r3, r2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01a      	beq.n	8007596 <HAL_SPI_TransmitReceive+0x1d2>
 8007560:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d017      	beq.n	8007596 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800756e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007570:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007576:	1d1a      	adds	r2, r3, #4
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007594:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007596:	f7fb f8bd 	bl	8002714 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d803      	bhi.n	80075ae <HAL_SPI_TransmitReceive+0x1ea>
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ac:	d102      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x1f0>
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d114      	bne.n	80075de <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 f93b 	bl	8007830 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e115      	b.n	800780a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80075de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d193      	bne.n	800750c <HAL_SPI_TransmitReceive+0x148>
 80075e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d190      	bne.n	800750c <HAL_SPI_TransmitReceive+0x148>
 80075ea:	e0e7      	b.n	80077bc <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b07      	cmp	r3, #7
 80075f2:	f240 80dd 	bls.w	80077b0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80075f6:	e066      	b.n	80076c6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b02      	cmp	r3, #2
 8007604:	d119      	bne.n	800763a <HAL_SPI_TransmitReceive+0x276>
 8007606:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007608:	2b00      	cmp	r3, #0
 800760a:	d016      	beq.n	800763a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007610:	881a      	ldrh	r2, [r3, #0]
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761a:	1c9a      	adds	r2, r3, #2
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007626:	b29b      	uxth	r3, r3
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007638:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b01      	cmp	r3, #1
 8007646:	d11a      	bne.n	800767e <HAL_SPI_TransmitReceive+0x2ba>
 8007648:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d017      	beq.n	800767e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007652:	6a3a      	ldr	r2, [r7, #32]
 8007654:	8812      	ldrh	r2, [r2, #0]
 8007656:	b292      	uxth	r2, r2
 8007658:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800765e:	1c9a      	adds	r2, r3, #2
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800767c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800767e:	f7fb f849 	bl	8002714 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800768a:	429a      	cmp	r2, r3
 800768c:	d803      	bhi.n	8007696 <HAL_SPI_TransmitReceive+0x2d2>
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007694:	d102      	bne.n	800769c <HAL_SPI_TransmitReceive+0x2d8>
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	2b00      	cmp	r3, #0
 800769a:	d114      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 f8c7 	bl	8007830 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e0a1      	b.n	800780a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80076c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d195      	bne.n	80075f8 <HAL_SPI_TransmitReceive+0x234>
 80076cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d192      	bne.n	80075f8 <HAL_SPI_TransmitReceive+0x234>
 80076d2:	e073      	b.n	80077bc <HAL_SPI_TransmitReceive+0x3f8>
 80076d4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d11b      	bne.n	800771e <HAL_SPI_TransmitReceive+0x35a>
 80076e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d018      	beq.n	800771e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3320      	adds	r3, #32
 80076f6:	7812      	ldrb	r2, [r2, #0]
 80076f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	b29a      	uxth	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800771c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b01      	cmp	r3, #1
 800772a:	d11d      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x3a4>
 800772c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d01a      	beq.n	8007768 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800773e:	7812      	ldrb	r2, [r2, #0]
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	b29a      	uxth	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007766:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007768:	f7fa ffd4 	bl	8002714 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007774:	429a      	cmp	r2, r3
 8007776:	d803      	bhi.n	8007780 <HAL_SPI_TransmitReceive+0x3bc>
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777e:	d102      	bne.n	8007786 <HAL_SPI_TransmitReceive+0x3c2>
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	2b00      	cmp	r3, #0
 8007784:	d114      	bne.n	80077b0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f852 	bl	8007830 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800779a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e02c      	b.n	800780a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80077b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d190      	bne.n	80076d8 <HAL_SPI_TransmitReceive+0x314>
 80077b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d18d      	bne.n	80076d8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80077bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	2200      	movs	r2, #0
 80077c4:	2108      	movs	r1, #8
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 f8d2 	bl	8007970 <SPI_WaitOnFlagUntilTimeout>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d007      	beq.n	80077e2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d8:	f043 0220 	orr.w	r2, r3, #32
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f824 	bl	8007830 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e001      	b.n	800780a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8007806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800780a:	4618      	mov	r0, r3
 800780c:	3730      	adds	r7, #48	; 0x30
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop

08007814 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007822:	b2db      	uxtb	r3, r3
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699a      	ldr	r2, [r3, #24]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0208 	orr.w	r2, r2, #8
 800784e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0210 	orr.w	r2, r2, #16
 800785e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0201 	bic.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6919      	ldr	r1, [r3, #16]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	4b3c      	ldr	r3, [pc, #240]	; (800796c <SPI_CloseTransfer+0x13c>)
 800787c:	400b      	ands	r3, r1
 800787e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689a      	ldr	r2, [r3, #8]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800788e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b04      	cmp	r3, #4
 800789a:	d014      	beq.n	80078c6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00f      	beq.n	80078c6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	699a      	ldr	r2, [r3, #24]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f042 0220 	orr.w	r2, r2, #32
 80078c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d014      	beq.n	80078fc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00f      	beq.n	80078fc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078e2:	f043 0204 	orr.w	r2, r3, #4
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	699a      	ldr	r2, [r3, #24]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00f      	beq.n	8007926 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800790c:	f043 0201 	orr.w	r2, r3, #1
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	699a      	ldr	r2, [r3, #24]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007924:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00f      	beq.n	8007950 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007936:	f043 0208 	orr.w	r2, r3, #8
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699a      	ldr	r2, [r3, #24]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800794e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007960:	bf00      	nop
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	fffffc90 	.word	0xfffffc90

08007970 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	603b      	str	r3, [r7, #0]
 800797c:	4613      	mov	r3, r2
 800797e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007980:	e010      	b.n	80079a4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007982:	f7fa fec7 	bl	8002714 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	429a      	cmp	r2, r3
 8007990:	d803      	bhi.n	800799a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007998:	d102      	bne.n	80079a0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e00f      	b.n	80079c4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695a      	ldr	r2, [r3, #20]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	4013      	ands	r3, r2
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	bf0c      	ite	eq
 80079b4:	2301      	moveq	r3, #1
 80079b6:	2300      	movne	r3, #0
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	79fb      	ldrb	r3, [r7, #7]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d0df      	beq.n	8007982 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d8:	095b      	lsrs	r3, r3, #5
 80079da:	3301      	adds	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	3301      	adds	r3, #1
 80079e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	3307      	adds	r3, #7
 80079ea:	08db      	lsrs	r3, r3, #3
 80079ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	fb02 f303 	mul.w	r3, r2, r3
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e049      	b.n	8007aa8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d106      	bne.n	8007a2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7fa fb73 	bl	8002114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2202      	movs	r2, #2
 8007a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f000 fc21 	bl	8008288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d001      	beq.n	8007ac8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e04c      	b.n	8007b62 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a26      	ldr	r2, [pc, #152]	; (8007b70 <HAL_TIM_Base_Start+0xc0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d022      	beq.n	8007b20 <HAL_TIM_Base_Start+0x70>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae2:	d01d      	beq.n	8007b20 <HAL_TIM_Base_Start+0x70>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a22      	ldr	r2, [pc, #136]	; (8007b74 <HAL_TIM_Base_Start+0xc4>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d018      	beq.n	8007b20 <HAL_TIM_Base_Start+0x70>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a21      	ldr	r2, [pc, #132]	; (8007b78 <HAL_TIM_Base_Start+0xc8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d013      	beq.n	8007b20 <HAL_TIM_Base_Start+0x70>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a1f      	ldr	r2, [pc, #124]	; (8007b7c <HAL_TIM_Base_Start+0xcc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00e      	beq.n	8007b20 <HAL_TIM_Base_Start+0x70>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a1e      	ldr	r2, [pc, #120]	; (8007b80 <HAL_TIM_Base_Start+0xd0>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d009      	beq.n	8007b20 <HAL_TIM_Base_Start+0x70>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a1c      	ldr	r2, [pc, #112]	; (8007b84 <HAL_TIM_Base_Start+0xd4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d004      	beq.n	8007b20 <HAL_TIM_Base_Start+0x70>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a1b      	ldr	r2, [pc, #108]	; (8007b88 <HAL_TIM_Base_Start+0xd8>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d115      	bne.n	8007b4c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	4b19      	ldr	r3, [pc, #100]	; (8007b8c <HAL_TIM_Base_Start+0xdc>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b06      	cmp	r3, #6
 8007b30:	d015      	beq.n	8007b5e <HAL_TIM_Base_Start+0xae>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b38:	d011      	beq.n	8007b5e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f042 0201 	orr.w	r2, r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4a:	e008      	b.n	8007b5e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0201 	orr.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	e000      	b.n	8007b60 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	40010000 	.word	0x40010000
 8007b74:	40000400 	.word	0x40000400
 8007b78:	40000800 	.word	0x40000800
 8007b7c:	40000c00 	.word	0x40000c00
 8007b80:	40010400 	.word	0x40010400
 8007b84:	40001800 	.word	0x40001800
 8007b88:	40014000 	.word	0x40014000
 8007b8c:	00010007 	.word	0x00010007

08007b90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e049      	b.n	8007c36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d106      	bne.n	8007bbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f841 	bl	8007c3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f000 fb5a 	bl	8008288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
	...

08007c54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d109      	bne.n	8007c78 <HAL_TIM_PWM_Start+0x24>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	bf14      	ite	ne
 8007c70:	2301      	movne	r3, #1
 8007c72:	2300      	moveq	r3, #0
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	e03c      	b.n	8007cf2 <HAL_TIM_PWM_Start+0x9e>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d109      	bne.n	8007c92 <HAL_TIM_PWM_Start+0x3e>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	bf14      	ite	ne
 8007c8a:	2301      	movne	r3, #1
 8007c8c:	2300      	moveq	r3, #0
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	e02f      	b.n	8007cf2 <HAL_TIM_PWM_Start+0x9e>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d109      	bne.n	8007cac <HAL_TIM_PWM_Start+0x58>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	bf14      	ite	ne
 8007ca4:	2301      	movne	r3, #1
 8007ca6:	2300      	moveq	r3, #0
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	e022      	b.n	8007cf2 <HAL_TIM_PWM_Start+0x9e>
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b0c      	cmp	r3, #12
 8007cb0:	d109      	bne.n	8007cc6 <HAL_TIM_PWM_Start+0x72>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	bf14      	ite	ne
 8007cbe:	2301      	movne	r3, #1
 8007cc0:	2300      	moveq	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	e015      	b.n	8007cf2 <HAL_TIM_PWM_Start+0x9e>
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b10      	cmp	r3, #16
 8007cca:	d109      	bne.n	8007ce0 <HAL_TIM_PWM_Start+0x8c>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	bf14      	ite	ne
 8007cd8:	2301      	movne	r3, #1
 8007cda:	2300      	moveq	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	e008      	b.n	8007cf2 <HAL_TIM_PWM_Start+0x9e>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	bf14      	ite	ne
 8007cec:	2301      	movne	r3, #1
 8007cee:	2300      	moveq	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e0a1      	b.n	8007e3e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d104      	bne.n	8007d0a <HAL_TIM_PWM_Start+0xb6>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d08:	e023      	b.n	8007d52 <HAL_TIM_PWM_Start+0xfe>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d104      	bne.n	8007d1a <HAL_TIM_PWM_Start+0xc6>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d18:	e01b      	b.n	8007d52 <HAL_TIM_PWM_Start+0xfe>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d104      	bne.n	8007d2a <HAL_TIM_PWM_Start+0xd6>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d28:	e013      	b.n	8007d52 <HAL_TIM_PWM_Start+0xfe>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b0c      	cmp	r3, #12
 8007d2e:	d104      	bne.n	8007d3a <HAL_TIM_PWM_Start+0xe6>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d38:	e00b      	b.n	8007d52 <HAL_TIM_PWM_Start+0xfe>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b10      	cmp	r3, #16
 8007d3e:	d104      	bne.n	8007d4a <HAL_TIM_PWM_Start+0xf6>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d48:	e003      	b.n	8007d52 <HAL_TIM_PWM_Start+0xfe>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2201      	movs	r2, #1
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fea2 	bl	8008aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a38      	ldr	r2, [pc, #224]	; (8007e48 <HAL_TIM_PWM_Start+0x1f4>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d013      	beq.n	8007d92 <HAL_TIM_PWM_Start+0x13e>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a37      	ldr	r2, [pc, #220]	; (8007e4c <HAL_TIM_PWM_Start+0x1f8>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d00e      	beq.n	8007d92 <HAL_TIM_PWM_Start+0x13e>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a35      	ldr	r2, [pc, #212]	; (8007e50 <HAL_TIM_PWM_Start+0x1fc>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d009      	beq.n	8007d92 <HAL_TIM_PWM_Start+0x13e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a34      	ldr	r2, [pc, #208]	; (8007e54 <HAL_TIM_PWM_Start+0x200>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d004      	beq.n	8007d92 <HAL_TIM_PWM_Start+0x13e>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a32      	ldr	r2, [pc, #200]	; (8007e58 <HAL_TIM_PWM_Start+0x204>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d101      	bne.n	8007d96 <HAL_TIM_PWM_Start+0x142>
 8007d92:	2301      	movs	r3, #1
 8007d94:	e000      	b.n	8007d98 <HAL_TIM_PWM_Start+0x144>
 8007d96:	2300      	movs	r3, #0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007daa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a25      	ldr	r2, [pc, #148]	; (8007e48 <HAL_TIM_PWM_Start+0x1f4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d022      	beq.n	8007dfc <HAL_TIM_PWM_Start+0x1a8>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dbe:	d01d      	beq.n	8007dfc <HAL_TIM_PWM_Start+0x1a8>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a25      	ldr	r2, [pc, #148]	; (8007e5c <HAL_TIM_PWM_Start+0x208>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d018      	beq.n	8007dfc <HAL_TIM_PWM_Start+0x1a8>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a24      	ldr	r2, [pc, #144]	; (8007e60 <HAL_TIM_PWM_Start+0x20c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d013      	beq.n	8007dfc <HAL_TIM_PWM_Start+0x1a8>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a22      	ldr	r2, [pc, #136]	; (8007e64 <HAL_TIM_PWM_Start+0x210>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d00e      	beq.n	8007dfc <HAL_TIM_PWM_Start+0x1a8>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a1a      	ldr	r2, [pc, #104]	; (8007e4c <HAL_TIM_PWM_Start+0x1f8>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d009      	beq.n	8007dfc <HAL_TIM_PWM_Start+0x1a8>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a1e      	ldr	r2, [pc, #120]	; (8007e68 <HAL_TIM_PWM_Start+0x214>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d004      	beq.n	8007dfc <HAL_TIM_PWM_Start+0x1a8>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a16      	ldr	r2, [pc, #88]	; (8007e50 <HAL_TIM_PWM_Start+0x1fc>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d115      	bne.n	8007e28 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689a      	ldr	r2, [r3, #8]
 8007e02:	4b1a      	ldr	r3, [pc, #104]	; (8007e6c <HAL_TIM_PWM_Start+0x218>)
 8007e04:	4013      	ands	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b06      	cmp	r3, #6
 8007e0c:	d015      	beq.n	8007e3a <HAL_TIM_PWM_Start+0x1e6>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e14:	d011      	beq.n	8007e3a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f042 0201 	orr.w	r2, r2, #1
 8007e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e26:	e008      	b.n	8007e3a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0201 	orr.w	r2, r2, #1
 8007e36:	601a      	str	r2, [r3, #0]
 8007e38:	e000      	b.n	8007e3c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	40010000 	.word	0x40010000
 8007e4c:	40010400 	.word	0x40010400
 8007e50:	40014000 	.word	0x40014000
 8007e54:	40014400 	.word	0x40014400
 8007e58:	40014800 	.word	0x40014800
 8007e5c:	40000400 	.word	0x40000400
 8007e60:	40000800 	.word	0x40000800
 8007e64:	40000c00 	.word	0x40000c00
 8007e68:	40001800 	.word	0x40001800
 8007e6c:	00010007 	.word	0x00010007

08007e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d101      	bne.n	8007e8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e0ff      	b.n	800808e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b14      	cmp	r3, #20
 8007e9a:	f200 80f0 	bhi.w	800807e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007ef9 	.word	0x08007ef9
 8007ea8:	0800807f 	.word	0x0800807f
 8007eac:	0800807f 	.word	0x0800807f
 8007eb0:	0800807f 	.word	0x0800807f
 8007eb4:	08007f39 	.word	0x08007f39
 8007eb8:	0800807f 	.word	0x0800807f
 8007ebc:	0800807f 	.word	0x0800807f
 8007ec0:	0800807f 	.word	0x0800807f
 8007ec4:	08007f7b 	.word	0x08007f7b
 8007ec8:	0800807f 	.word	0x0800807f
 8007ecc:	0800807f 	.word	0x0800807f
 8007ed0:	0800807f 	.word	0x0800807f
 8007ed4:	08007fbb 	.word	0x08007fbb
 8007ed8:	0800807f 	.word	0x0800807f
 8007edc:	0800807f 	.word	0x0800807f
 8007ee0:	0800807f 	.word	0x0800807f
 8007ee4:	08007ffd 	.word	0x08007ffd
 8007ee8:	0800807f 	.word	0x0800807f
 8007eec:	0800807f 	.word	0x0800807f
 8007ef0:	0800807f 	.word	0x0800807f
 8007ef4:	0800803d 	.word	0x0800803d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68b9      	ldr	r1, [r7, #8]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 fa5c 	bl	80083bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	699a      	ldr	r2, [r3, #24]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0208 	orr.w	r2, r2, #8
 8007f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699a      	ldr	r2, [r3, #24]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0204 	bic.w	r2, r2, #4
 8007f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6999      	ldr	r1, [r3, #24]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	619a      	str	r2, [r3, #24]
      break;
 8007f36:	e0a5      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 facc 	bl	80084dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699a      	ldr	r2, [r3, #24]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6999      	ldr	r1, [r3, #24]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	021a      	lsls	r2, r3, #8
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	619a      	str	r2, [r3, #24]
      break;
 8007f78:	e084      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fb35 	bl	80085f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69da      	ldr	r2, [r3, #28]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f042 0208 	orr.w	r2, r2, #8
 8007f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69da      	ldr	r2, [r3, #28]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 0204 	bic.w	r2, r2, #4
 8007fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69d9      	ldr	r1, [r3, #28]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	61da      	str	r2, [r3, #28]
      break;
 8007fb8:	e064      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fb9d 	bl	8008700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69da      	ldr	r2, [r3, #28]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69da      	ldr	r2, [r3, #28]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69d9      	ldr	r1, [r3, #28]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	021a      	lsls	r2, r3, #8
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	61da      	str	r2, [r3, #28]
      break;
 8007ffa:	e043      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68b9      	ldr	r1, [r7, #8]
 8008002:	4618      	mov	r0, r3
 8008004:	f000 fbe6 	bl	80087d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0208 	orr.w	r2, r2, #8
 8008016:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0204 	bic.w	r2, r2, #4
 8008026:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	691a      	ldr	r2, [r3, #16]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800803a:	e023      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fc2a 	bl	800889c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008056:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008066:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	021a      	lsls	r2, r3, #8
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800807c:	e002      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	75fb      	strb	r3, [r7, #23]
      break;
 8008082:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800808c:	7dfb      	ldrb	r3, [r7, #23]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop

08008098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <HAL_TIM_ConfigClockSource+0x1c>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e0dc      	b.n	800826e <HAL_TIM_ConfigClockSource+0x1d6>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	4b6a      	ldr	r3, [pc, #424]	; (8008278 <HAL_TIM_ConfigClockSource+0x1e0>)
 80080d0:	4013      	ands	r3, r2
 80080d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a64      	ldr	r2, [pc, #400]	; (800827c <HAL_TIM_ConfigClockSource+0x1e4>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	f000 80a9 	beq.w	8008242 <HAL_TIM_ConfigClockSource+0x1aa>
 80080f0:	4a62      	ldr	r2, [pc, #392]	; (800827c <HAL_TIM_ConfigClockSource+0x1e4>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	f200 80ae 	bhi.w	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 80080f8:	4a61      	ldr	r2, [pc, #388]	; (8008280 <HAL_TIM_ConfigClockSource+0x1e8>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	f000 80a1 	beq.w	8008242 <HAL_TIM_ConfigClockSource+0x1aa>
 8008100:	4a5f      	ldr	r2, [pc, #380]	; (8008280 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	f200 80a6 	bhi.w	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 8008108:	4a5e      	ldr	r2, [pc, #376]	; (8008284 <HAL_TIM_ConfigClockSource+0x1ec>)
 800810a:	4293      	cmp	r3, r2
 800810c:	f000 8099 	beq.w	8008242 <HAL_TIM_ConfigClockSource+0x1aa>
 8008110:	4a5c      	ldr	r2, [pc, #368]	; (8008284 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008112:	4293      	cmp	r3, r2
 8008114:	f200 809e 	bhi.w	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 8008118:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800811c:	f000 8091 	beq.w	8008242 <HAL_TIM_ConfigClockSource+0x1aa>
 8008120:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008124:	f200 8096 	bhi.w	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 8008128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800812c:	f000 8089 	beq.w	8008242 <HAL_TIM_ConfigClockSource+0x1aa>
 8008130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008134:	f200 808e 	bhi.w	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 8008138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800813c:	d03e      	beq.n	80081bc <HAL_TIM_ConfigClockSource+0x124>
 800813e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008142:	f200 8087 	bhi.w	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 8008146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814a:	f000 8086 	beq.w	800825a <HAL_TIM_ConfigClockSource+0x1c2>
 800814e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008152:	d87f      	bhi.n	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 8008154:	2b70      	cmp	r3, #112	; 0x70
 8008156:	d01a      	beq.n	800818e <HAL_TIM_ConfigClockSource+0xf6>
 8008158:	2b70      	cmp	r3, #112	; 0x70
 800815a:	d87b      	bhi.n	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 800815c:	2b60      	cmp	r3, #96	; 0x60
 800815e:	d050      	beq.n	8008202 <HAL_TIM_ConfigClockSource+0x16a>
 8008160:	2b60      	cmp	r3, #96	; 0x60
 8008162:	d877      	bhi.n	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 8008164:	2b50      	cmp	r3, #80	; 0x50
 8008166:	d03c      	beq.n	80081e2 <HAL_TIM_ConfigClockSource+0x14a>
 8008168:	2b50      	cmp	r3, #80	; 0x50
 800816a:	d873      	bhi.n	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 800816c:	2b40      	cmp	r3, #64	; 0x40
 800816e:	d058      	beq.n	8008222 <HAL_TIM_ConfigClockSource+0x18a>
 8008170:	2b40      	cmp	r3, #64	; 0x40
 8008172:	d86f      	bhi.n	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 8008174:	2b30      	cmp	r3, #48	; 0x30
 8008176:	d064      	beq.n	8008242 <HAL_TIM_ConfigClockSource+0x1aa>
 8008178:	2b30      	cmp	r3, #48	; 0x30
 800817a:	d86b      	bhi.n	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 800817c:	2b20      	cmp	r3, #32
 800817e:	d060      	beq.n	8008242 <HAL_TIM_ConfigClockSource+0x1aa>
 8008180:	2b20      	cmp	r3, #32
 8008182:	d867      	bhi.n	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d05c      	beq.n	8008242 <HAL_TIM_ConfigClockSource+0x1aa>
 8008188:	2b10      	cmp	r3, #16
 800818a:	d05a      	beq.n	8008242 <HAL_TIM_ConfigClockSource+0x1aa>
 800818c:	e062      	b.n	8008254 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	6899      	ldr	r1, [r3, #8]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f000 fc61 	bl	8008a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	609a      	str	r2, [r3, #8]
      break;
 80081ba:	e04f      	b.n	800825c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6818      	ldr	r0, [r3, #0]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	6899      	ldr	r1, [r3, #8]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	f000 fc4a 	bl	8008a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689a      	ldr	r2, [r3, #8]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081de:	609a      	str	r2, [r3, #8]
      break;
 80081e0:	e03c      	b.n	800825c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6818      	ldr	r0, [r3, #0]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	6859      	ldr	r1, [r3, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f000 fbba 	bl	8008968 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2150      	movs	r1, #80	; 0x50
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 fc14 	bl	8008a28 <TIM_ITRx_SetConfig>
      break;
 8008200:	e02c      	b.n	800825c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	6859      	ldr	r1, [r3, #4]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	461a      	mov	r2, r3
 8008210:	f000 fbd9 	bl	80089c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2160      	movs	r1, #96	; 0x60
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fc04 	bl	8008a28 <TIM_ITRx_SetConfig>
      break;
 8008220:	e01c      	b.n	800825c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	6859      	ldr	r1, [r3, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	461a      	mov	r2, r3
 8008230:	f000 fb9a 	bl	8008968 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2140      	movs	r1, #64	; 0x40
 800823a:	4618      	mov	r0, r3
 800823c:	f000 fbf4 	bl	8008a28 <TIM_ITRx_SetConfig>
      break;
 8008240:	e00c      	b.n	800825c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4619      	mov	r1, r3
 800824c:	4610      	mov	r0, r2
 800824e:	f000 fbeb 	bl	8008a28 <TIM_ITRx_SetConfig>
      break;
 8008252:	e003      	b.n	800825c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	73fb      	strb	r3, [r7, #15]
      break;
 8008258:	e000      	b.n	800825c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800825a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	ffceff88 	.word	0xffceff88
 800827c:	00100040 	.word	0x00100040
 8008280:	00100030 	.word	0x00100030
 8008284:	00100020 	.word	0x00100020

08008288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a40      	ldr	r2, [pc, #256]	; (800839c <TIM_Base_SetConfig+0x114>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d013      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a6:	d00f      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a3d      	ldr	r2, [pc, #244]	; (80083a0 <TIM_Base_SetConfig+0x118>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00b      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a3c      	ldr	r2, [pc, #240]	; (80083a4 <TIM_Base_SetConfig+0x11c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d007      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a3b      	ldr	r2, [pc, #236]	; (80083a8 <TIM_Base_SetConfig+0x120>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d003      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a3a      	ldr	r2, [pc, #232]	; (80083ac <TIM_Base_SetConfig+0x124>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d108      	bne.n	80082da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a2f      	ldr	r2, [pc, #188]	; (800839c <TIM_Base_SetConfig+0x114>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d01f      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e8:	d01b      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a2c      	ldr	r2, [pc, #176]	; (80083a0 <TIM_Base_SetConfig+0x118>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d017      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a2b      	ldr	r2, [pc, #172]	; (80083a4 <TIM_Base_SetConfig+0x11c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d013      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a2a      	ldr	r2, [pc, #168]	; (80083a8 <TIM_Base_SetConfig+0x120>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00f      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a29      	ldr	r2, [pc, #164]	; (80083ac <TIM_Base_SetConfig+0x124>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00b      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a28      	ldr	r2, [pc, #160]	; (80083b0 <TIM_Base_SetConfig+0x128>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d007      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a27      	ldr	r2, [pc, #156]	; (80083b4 <TIM_Base_SetConfig+0x12c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d003      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a26      	ldr	r2, [pc, #152]	; (80083b8 <TIM_Base_SetConfig+0x130>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d108      	bne.n	8008334 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a10      	ldr	r2, [pc, #64]	; (800839c <TIM_Base_SetConfig+0x114>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d00f      	beq.n	8008380 <TIM_Base_SetConfig+0xf8>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a12      	ldr	r2, [pc, #72]	; (80083ac <TIM_Base_SetConfig+0x124>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d00b      	beq.n	8008380 <TIM_Base_SetConfig+0xf8>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a11      	ldr	r2, [pc, #68]	; (80083b0 <TIM_Base_SetConfig+0x128>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d007      	beq.n	8008380 <TIM_Base_SetConfig+0xf8>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a10      	ldr	r2, [pc, #64]	; (80083b4 <TIM_Base_SetConfig+0x12c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d003      	beq.n	8008380 <TIM_Base_SetConfig+0xf8>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a0f      	ldr	r2, [pc, #60]	; (80083b8 <TIM_Base_SetConfig+0x130>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d103      	bne.n	8008388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	615a      	str	r2, [r3, #20]
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	40010000 	.word	0x40010000
 80083a0:	40000400 	.word	0x40000400
 80083a4:	40000800 	.word	0x40000800
 80083a8:	40000c00 	.word	0x40000c00
 80083ac:	40010400 	.word	0x40010400
 80083b0:	40014000 	.word	0x40014000
 80083b4:	40014400 	.word	0x40014400
 80083b8:	40014800 	.word	0x40014800

080083bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	f023 0201 	bic.w	r2, r3, #1
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4b37      	ldr	r3, [pc, #220]	; (80084c4 <TIM_OC1_SetConfig+0x108>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f023 0303 	bic.w	r3, r3, #3
 80083f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f023 0302 	bic.w	r3, r3, #2
 8008404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a2d      	ldr	r2, [pc, #180]	; (80084c8 <TIM_OC1_SetConfig+0x10c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d00f      	beq.n	8008438 <TIM_OC1_SetConfig+0x7c>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a2c      	ldr	r2, [pc, #176]	; (80084cc <TIM_OC1_SetConfig+0x110>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d00b      	beq.n	8008438 <TIM_OC1_SetConfig+0x7c>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a2b      	ldr	r2, [pc, #172]	; (80084d0 <TIM_OC1_SetConfig+0x114>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d007      	beq.n	8008438 <TIM_OC1_SetConfig+0x7c>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a2a      	ldr	r2, [pc, #168]	; (80084d4 <TIM_OC1_SetConfig+0x118>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d003      	beq.n	8008438 <TIM_OC1_SetConfig+0x7c>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a29      	ldr	r2, [pc, #164]	; (80084d8 <TIM_OC1_SetConfig+0x11c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d10c      	bne.n	8008452 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f023 0308 	bic.w	r3, r3, #8
 800843e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	4313      	orrs	r3, r2
 8008448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f023 0304 	bic.w	r3, r3, #4
 8008450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a1c      	ldr	r2, [pc, #112]	; (80084c8 <TIM_OC1_SetConfig+0x10c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d00f      	beq.n	800847a <TIM_OC1_SetConfig+0xbe>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a1b      	ldr	r2, [pc, #108]	; (80084cc <TIM_OC1_SetConfig+0x110>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d00b      	beq.n	800847a <TIM_OC1_SetConfig+0xbe>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a1a      	ldr	r2, [pc, #104]	; (80084d0 <TIM_OC1_SetConfig+0x114>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d007      	beq.n	800847a <TIM_OC1_SetConfig+0xbe>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a19      	ldr	r2, [pc, #100]	; (80084d4 <TIM_OC1_SetConfig+0x118>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d003      	beq.n	800847a <TIM_OC1_SetConfig+0xbe>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a18      	ldr	r2, [pc, #96]	; (80084d8 <TIM_OC1_SetConfig+0x11c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d111      	bne.n	800849e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	4313      	orrs	r3, r2
 8008492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	4313      	orrs	r3, r2
 800849c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	621a      	str	r2, [r3, #32]
}
 80084b8:	bf00      	nop
 80084ba:	371c      	adds	r7, #28
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	fffeff8f 	.word	0xfffeff8f
 80084c8:	40010000 	.word	0x40010000
 80084cc:	40010400 	.word	0x40010400
 80084d0:	40014000 	.word	0x40014000
 80084d4:	40014400 	.word	0x40014400
 80084d8:	40014800 	.word	0x40014800

080084dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	f023 0210 	bic.w	r2, r3, #16
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	4b34      	ldr	r3, [pc, #208]	; (80085d8 <TIM_OC2_SetConfig+0xfc>)
 8008508:	4013      	ands	r3, r2
 800850a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	021b      	lsls	r3, r3, #8
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4313      	orrs	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f023 0320 	bic.w	r3, r3, #32
 8008526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a29      	ldr	r2, [pc, #164]	; (80085dc <TIM_OC2_SetConfig+0x100>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d003      	beq.n	8008544 <TIM_OC2_SetConfig+0x68>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a28      	ldr	r2, [pc, #160]	; (80085e0 <TIM_OC2_SetConfig+0x104>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d10d      	bne.n	8008560 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800854a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	011b      	lsls	r3, r3, #4
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	4313      	orrs	r3, r2
 8008556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800855e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a1e      	ldr	r2, [pc, #120]	; (80085dc <TIM_OC2_SetConfig+0x100>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00f      	beq.n	8008588 <TIM_OC2_SetConfig+0xac>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a1d      	ldr	r2, [pc, #116]	; (80085e0 <TIM_OC2_SetConfig+0x104>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d00b      	beq.n	8008588 <TIM_OC2_SetConfig+0xac>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a1c      	ldr	r2, [pc, #112]	; (80085e4 <TIM_OC2_SetConfig+0x108>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d007      	beq.n	8008588 <TIM_OC2_SetConfig+0xac>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a1b      	ldr	r2, [pc, #108]	; (80085e8 <TIM_OC2_SetConfig+0x10c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d003      	beq.n	8008588 <TIM_OC2_SetConfig+0xac>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a1a      	ldr	r2, [pc, #104]	; (80085ec <TIM_OC2_SetConfig+0x110>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d113      	bne.n	80085b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800858e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	621a      	str	r2, [r3, #32]
}
 80085ca:	bf00      	nop
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	feff8fff 	.word	0xfeff8fff
 80085dc:	40010000 	.word	0x40010000
 80085e0:	40010400 	.word	0x40010400
 80085e4:	40014000 	.word	0x40014000
 80085e8:	40014400 	.word	0x40014400
 80085ec:	40014800 	.word	0x40014800

080085f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	4b33      	ldr	r3, [pc, #204]	; (80086e8 <TIM_OC3_SetConfig+0xf8>)
 800861c:	4013      	ands	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0303 	bic.w	r3, r3, #3
 8008626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	4313      	orrs	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a28      	ldr	r2, [pc, #160]	; (80086ec <TIM_OC3_SetConfig+0xfc>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d003      	beq.n	8008656 <TIM_OC3_SetConfig+0x66>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a27      	ldr	r2, [pc, #156]	; (80086f0 <TIM_OC3_SetConfig+0x100>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d10d      	bne.n	8008672 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800865c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	4313      	orrs	r3, r2
 8008668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a1d      	ldr	r2, [pc, #116]	; (80086ec <TIM_OC3_SetConfig+0xfc>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d00f      	beq.n	800869a <TIM_OC3_SetConfig+0xaa>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a1c      	ldr	r2, [pc, #112]	; (80086f0 <TIM_OC3_SetConfig+0x100>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d00b      	beq.n	800869a <TIM_OC3_SetConfig+0xaa>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a1b      	ldr	r2, [pc, #108]	; (80086f4 <TIM_OC3_SetConfig+0x104>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d007      	beq.n	800869a <TIM_OC3_SetConfig+0xaa>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a1a      	ldr	r2, [pc, #104]	; (80086f8 <TIM_OC3_SetConfig+0x108>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d003      	beq.n	800869a <TIM_OC3_SetConfig+0xaa>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a19      	ldr	r2, [pc, #100]	; (80086fc <TIM_OC3_SetConfig+0x10c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d113      	bne.n	80086c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	4313      	orrs	r3, r2
 80086c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	621a      	str	r2, [r3, #32]
}
 80086dc:	bf00      	nop
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	fffeff8f 	.word	0xfffeff8f
 80086ec:	40010000 	.word	0x40010000
 80086f0:	40010400 	.word	0x40010400
 80086f4:	40014000 	.word	0x40014000
 80086f8:	40014400 	.word	0x40014400
 80086fc:	40014800 	.word	0x40014800

08008700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4b24      	ldr	r3, [pc, #144]	; (80087bc <TIM_OC4_SetConfig+0xbc>)
 800872c:	4013      	ands	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800874a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	031b      	lsls	r3, r3, #12
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	4313      	orrs	r3, r2
 8008756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a19      	ldr	r2, [pc, #100]	; (80087c0 <TIM_OC4_SetConfig+0xc0>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00f      	beq.n	8008780 <TIM_OC4_SetConfig+0x80>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a18      	ldr	r2, [pc, #96]	; (80087c4 <TIM_OC4_SetConfig+0xc4>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00b      	beq.n	8008780 <TIM_OC4_SetConfig+0x80>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a17      	ldr	r2, [pc, #92]	; (80087c8 <TIM_OC4_SetConfig+0xc8>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d007      	beq.n	8008780 <TIM_OC4_SetConfig+0x80>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a16      	ldr	r2, [pc, #88]	; (80087cc <TIM_OC4_SetConfig+0xcc>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_OC4_SetConfig+0x80>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a15      	ldr	r2, [pc, #84]	; (80087d0 <TIM_OC4_SetConfig+0xd0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d109      	bne.n	8008794 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	019b      	lsls	r3, r3, #6
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	4313      	orrs	r3, r2
 8008792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685a      	ldr	r2, [r3, #4]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	621a      	str	r2, [r3, #32]
}
 80087ae:	bf00      	nop
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	feff8fff 	.word	0xfeff8fff
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40010400 	.word	0x40010400
 80087c8:	40014000 	.word	0x40014000
 80087cc:	40014400 	.word	0x40014400
 80087d0:	40014800 	.word	0x40014800

080087d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	4b21      	ldr	r3, [pc, #132]	; (8008884 <TIM_OC5_SetConfig+0xb0>)
 8008800:	4013      	ands	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008814:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	041b      	lsls	r3, r3, #16
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	4313      	orrs	r3, r2
 8008820:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a18      	ldr	r2, [pc, #96]	; (8008888 <TIM_OC5_SetConfig+0xb4>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00f      	beq.n	800884a <TIM_OC5_SetConfig+0x76>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a17      	ldr	r2, [pc, #92]	; (800888c <TIM_OC5_SetConfig+0xb8>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00b      	beq.n	800884a <TIM_OC5_SetConfig+0x76>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a16      	ldr	r2, [pc, #88]	; (8008890 <TIM_OC5_SetConfig+0xbc>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d007      	beq.n	800884a <TIM_OC5_SetConfig+0x76>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a15      	ldr	r2, [pc, #84]	; (8008894 <TIM_OC5_SetConfig+0xc0>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d003      	beq.n	800884a <TIM_OC5_SetConfig+0x76>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a14      	ldr	r2, [pc, #80]	; (8008898 <TIM_OC5_SetConfig+0xc4>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d109      	bne.n	800885e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008850:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	021b      	lsls	r3, r3, #8
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	4313      	orrs	r3, r2
 800885c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	621a      	str	r2, [r3, #32]
}
 8008878:	bf00      	nop
 800887a:	371c      	adds	r7, #28
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	fffeff8f 	.word	0xfffeff8f
 8008888:	40010000 	.word	0x40010000
 800888c:	40010400 	.word	0x40010400
 8008890:	40014000 	.word	0x40014000
 8008894:	40014400 	.word	0x40014400
 8008898:	40014800 	.word	0x40014800

0800889c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4b22      	ldr	r3, [pc, #136]	; (8008950 <TIM_OC6_SetConfig+0xb4>)
 80088c8:	4013      	ands	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	021b      	lsls	r3, r3, #8
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	051b      	lsls	r3, r3, #20
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a19      	ldr	r2, [pc, #100]	; (8008954 <TIM_OC6_SetConfig+0xb8>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d00f      	beq.n	8008914 <TIM_OC6_SetConfig+0x78>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a18      	ldr	r2, [pc, #96]	; (8008958 <TIM_OC6_SetConfig+0xbc>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d00b      	beq.n	8008914 <TIM_OC6_SetConfig+0x78>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a17      	ldr	r2, [pc, #92]	; (800895c <TIM_OC6_SetConfig+0xc0>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d007      	beq.n	8008914 <TIM_OC6_SetConfig+0x78>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a16      	ldr	r2, [pc, #88]	; (8008960 <TIM_OC6_SetConfig+0xc4>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d003      	beq.n	8008914 <TIM_OC6_SetConfig+0x78>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a15      	ldr	r2, [pc, #84]	; (8008964 <TIM_OC6_SetConfig+0xc8>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d109      	bne.n	8008928 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800891a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	029b      	lsls	r3, r3, #10
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	4313      	orrs	r3, r2
 8008926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	621a      	str	r2, [r3, #32]
}
 8008942:	bf00      	nop
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	feff8fff 	.word	0xfeff8fff
 8008954:	40010000 	.word	0x40010000
 8008958:	40010400 	.word	0x40010400
 800895c:	40014000 	.word	0x40014000
 8008960:	40014400 	.word	0x40014400
 8008964:	40014800 	.word	0x40014800

08008968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	f023 0201 	bic.w	r2, r3, #1
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4313      	orrs	r3, r2
 800899c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f023 030a 	bic.w	r3, r3, #10
 80089a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	621a      	str	r2, [r3, #32]
}
 80089ba:	bf00      	nop
 80089bc:	371c      	adds	r7, #28
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b087      	sub	sp, #28
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	f023 0210 	bic.w	r2, r3, #16
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	031b      	lsls	r3, r3, #12
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	621a      	str	r2, [r3, #32]
}
 8008a1a:	bf00      	nop
 8008a1c:	371c      	adds	r7, #28
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
	...

08008a28 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4b09      	ldr	r3, [pc, #36]	; (8008a60 <TIM_ITRx_SetConfig+0x38>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	f043 0307 	orr.w	r3, r3, #7
 8008a4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	609a      	str	r2, [r3, #8]
}
 8008a52:	bf00      	nop
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	ffcfff8f 	.word	0xffcfff8f

08008a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
 8008a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	021a      	lsls	r2, r3, #8
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	431a      	orrs	r2, r3
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	609a      	str	r2, [r3, #8]
}
 8008a98:	bf00      	nop
 8008a9a:	371c      	adds	r7, #28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	f003 031f 	and.w	r3, r3, #31
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8008abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6a1a      	ldr	r2, [r3, #32]
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	43db      	mvns	r3, r3
 8008ac6:	401a      	ands	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6a1a      	ldr	r2, [r3, #32]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f003 031f 	and.w	r3, r3, #31
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8008adc:	431a      	orrs	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	621a      	str	r2, [r3, #32]
}
 8008ae2:	bf00      	nop
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
	...

08008af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b04:	2302      	movs	r3, #2
 8008b06:	e06d      	b.n	8008be4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a30      	ldr	r2, [pc, #192]	; (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d004      	beq.n	8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a2f      	ldr	r2, [pc, #188]	; (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d108      	bne.n	8008b4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a20      	ldr	r2, [pc, #128]	; (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d022      	beq.n	8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b7a:	d01d      	beq.n	8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a1d      	ldr	r2, [pc, #116]	; (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d018      	beq.n	8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a1c      	ldr	r2, [pc, #112]	; (8008bfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d013      	beq.n	8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a1a      	ldr	r2, [pc, #104]	; (8008c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d00e      	beq.n	8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a15      	ldr	r2, [pc, #84]	; (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d009      	beq.n	8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a16      	ldr	r2, [pc, #88]	; (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d004      	beq.n	8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a15      	ldr	r2, [pc, #84]	; (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d10c      	bne.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	40010000 	.word	0x40010000
 8008bf4:	40010400 	.word	0x40010400
 8008bf8:	40000400 	.word	0x40000400
 8008bfc:	40000800 	.word	0x40000800
 8008c00:	40000c00 	.word	0x40000c00
 8008c04:	40001800 	.word	0x40001800
 8008c08:	40014000 	.word	0x40014000

08008c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e042      	b.n	8008ca4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d106      	bne.n	8008c36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7f9 facb 	bl	80021cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2224      	movs	r2, #36	; 0x24
 8008c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f022 0201 	bic.w	r2, r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f8c2 	bl	8008dd8 <UART_SetConfig>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d101      	bne.n	8008c5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e022      	b.n	8008ca4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 ff22 	bl	8009ab0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689a      	ldr	r2, [r3, #8]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f042 0201 	orr.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 ffa9 	bl	8009bf4 <UART_CheckIdleState>
 8008ca2:	4603      	mov	r3, r0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b08a      	sub	sp, #40	; 0x28
 8008cb0:	af02      	add	r7, sp, #8
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cc2:	2b20      	cmp	r3, #32
 8008cc4:	f040 8083 	bne.w	8008dce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <HAL_UART_Transmit+0x28>
 8008cce:	88fb      	ldrh	r3, [r7, #6]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e07b      	b.n	8008dd0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d101      	bne.n	8008ce6 <HAL_UART_Transmit+0x3a>
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	e074      	b.n	8008dd0 <HAL_UART_Transmit+0x124>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2221      	movs	r2, #33	; 0x21
 8008cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cfe:	f7f9 fd09 	bl	8002714 <HAL_GetTick>
 8008d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	88fa      	ldrh	r2, [r7, #6]
 8008d08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	88fa      	ldrh	r2, [r7, #6]
 8008d10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1c:	d108      	bne.n	8008d30 <HAL_UART_Transmit+0x84>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d104      	bne.n	8008d30 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008d26:	2300      	movs	r3, #0
 8008d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	61bb      	str	r3, [r7, #24]
 8008d2e:	e003      	b.n	8008d38 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008d40:	e02c      	b.n	8008d9c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2180      	movs	r1, #128	; 0x80
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 ff9c 	bl	8009c8a <UART_WaitOnFlagUntilTimeout>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e039      	b.n	8008dd0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10b      	bne.n	8008d7a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	3302      	adds	r3, #2
 8008d76:	61bb      	str	r3, [r7, #24]
 8008d78:	e007      	b.n	8008d8a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	781a      	ldrb	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	3301      	adds	r3, #1
 8008d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	3b01      	subs	r3, #1
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1cc      	bne.n	8008d42 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	2200      	movs	r2, #0
 8008db0:	2140      	movs	r1, #64	; 0x40
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 ff69 	bl	8009c8a <UART_WaitOnFlagUntilTimeout>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e006      	b.n	8008dd0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e000      	b.n	8008dd0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008dce:	2302      	movs	r3, #2
  }
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3720      	adds	r7, #32
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ddc:	b092      	sub	sp, #72	; 0x48
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	431a      	orrs	r2, r3
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	431a      	orrs	r2, r3
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	4bbe      	ldr	r3, [pc, #760]	; (8009100 <UART_SetConfig+0x328>)
 8008e08:	4013      	ands	r3, r2
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	6812      	ldr	r2, [r2, #0]
 8008e0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e10:	430b      	orrs	r3, r1
 8008e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4ab3      	ldr	r2, [pc, #716]	; (8009104 <UART_SetConfig+0x32c>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d004      	beq.n	8008e44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e40:	4313      	orrs	r3, r2
 8008e42:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	4baf      	ldr	r3, [pc, #700]	; (8009108 <UART_SetConfig+0x330>)
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e54:	430b      	orrs	r3, r1
 8008e56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5e:	f023 010f 	bic.w	r1, r3, #15
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	430a      	orrs	r2, r1
 8008e6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4aa6      	ldr	r2, [pc, #664]	; (800910c <UART_SetConfig+0x334>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d177      	bne.n	8008f68 <UART_SetConfig+0x190>
 8008e78:	4ba5      	ldr	r3, [pc, #660]	; (8009110 <UART_SetConfig+0x338>)
 8008e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e80:	2b28      	cmp	r3, #40	; 0x28
 8008e82:	d86d      	bhi.n	8008f60 <UART_SetConfig+0x188>
 8008e84:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <UART_SetConfig+0xb4>)
 8008e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8a:	bf00      	nop
 8008e8c:	08008f31 	.word	0x08008f31
 8008e90:	08008f61 	.word	0x08008f61
 8008e94:	08008f61 	.word	0x08008f61
 8008e98:	08008f61 	.word	0x08008f61
 8008e9c:	08008f61 	.word	0x08008f61
 8008ea0:	08008f61 	.word	0x08008f61
 8008ea4:	08008f61 	.word	0x08008f61
 8008ea8:	08008f61 	.word	0x08008f61
 8008eac:	08008f39 	.word	0x08008f39
 8008eb0:	08008f61 	.word	0x08008f61
 8008eb4:	08008f61 	.word	0x08008f61
 8008eb8:	08008f61 	.word	0x08008f61
 8008ebc:	08008f61 	.word	0x08008f61
 8008ec0:	08008f61 	.word	0x08008f61
 8008ec4:	08008f61 	.word	0x08008f61
 8008ec8:	08008f61 	.word	0x08008f61
 8008ecc:	08008f41 	.word	0x08008f41
 8008ed0:	08008f61 	.word	0x08008f61
 8008ed4:	08008f61 	.word	0x08008f61
 8008ed8:	08008f61 	.word	0x08008f61
 8008edc:	08008f61 	.word	0x08008f61
 8008ee0:	08008f61 	.word	0x08008f61
 8008ee4:	08008f61 	.word	0x08008f61
 8008ee8:	08008f61 	.word	0x08008f61
 8008eec:	08008f49 	.word	0x08008f49
 8008ef0:	08008f61 	.word	0x08008f61
 8008ef4:	08008f61 	.word	0x08008f61
 8008ef8:	08008f61 	.word	0x08008f61
 8008efc:	08008f61 	.word	0x08008f61
 8008f00:	08008f61 	.word	0x08008f61
 8008f04:	08008f61 	.word	0x08008f61
 8008f08:	08008f61 	.word	0x08008f61
 8008f0c:	08008f51 	.word	0x08008f51
 8008f10:	08008f61 	.word	0x08008f61
 8008f14:	08008f61 	.word	0x08008f61
 8008f18:	08008f61 	.word	0x08008f61
 8008f1c:	08008f61 	.word	0x08008f61
 8008f20:	08008f61 	.word	0x08008f61
 8008f24:	08008f61 	.word	0x08008f61
 8008f28:	08008f61 	.word	0x08008f61
 8008f2c:	08008f59 	.word	0x08008f59
 8008f30:	2301      	movs	r3, #1
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f36:	e326      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008f38:	2304      	movs	r3, #4
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f3e:	e322      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008f40:	2308      	movs	r3, #8
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f46:	e31e      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008f48:	2310      	movs	r3, #16
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f4e:	e31a      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008f50:	2320      	movs	r3, #32
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f56:	e316      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008f58:	2340      	movs	r3, #64	; 0x40
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f5e:	e312      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008f60:	2380      	movs	r3, #128	; 0x80
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f66:	e30e      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a69      	ldr	r2, [pc, #420]	; (8009114 <UART_SetConfig+0x33c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d130      	bne.n	8008fd4 <UART_SetConfig+0x1fc>
 8008f72:	4b67      	ldr	r3, [pc, #412]	; (8009110 <UART_SetConfig+0x338>)
 8008f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	2b05      	cmp	r3, #5
 8008f7c:	d826      	bhi.n	8008fcc <UART_SetConfig+0x1f4>
 8008f7e:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <UART_SetConfig+0x1ac>)
 8008f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f84:	08008f9d 	.word	0x08008f9d
 8008f88:	08008fa5 	.word	0x08008fa5
 8008f8c:	08008fad 	.word	0x08008fad
 8008f90:	08008fb5 	.word	0x08008fb5
 8008f94:	08008fbd 	.word	0x08008fbd
 8008f98:	08008fc5 	.word	0x08008fc5
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fa2:	e2f0      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008fa4:	2304      	movs	r3, #4
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008faa:	e2ec      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008fac:	2308      	movs	r3, #8
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fb2:	e2e8      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008fb4:	2310      	movs	r3, #16
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fba:	e2e4      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008fbc:	2320      	movs	r3, #32
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fc2:	e2e0      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008fc4:	2340      	movs	r3, #64	; 0x40
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fca:	e2dc      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008fcc:	2380      	movs	r3, #128	; 0x80
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fd2:	e2d8      	b.n	8009586 <UART_SetConfig+0x7ae>
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a4f      	ldr	r2, [pc, #316]	; (8009118 <UART_SetConfig+0x340>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d130      	bne.n	8009040 <UART_SetConfig+0x268>
 8008fde:	4b4c      	ldr	r3, [pc, #304]	; (8009110 <UART_SetConfig+0x338>)
 8008fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	2b05      	cmp	r3, #5
 8008fe8:	d826      	bhi.n	8009038 <UART_SetConfig+0x260>
 8008fea:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <UART_SetConfig+0x218>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	08009009 	.word	0x08009009
 8008ff4:	08009011 	.word	0x08009011
 8008ff8:	08009019 	.word	0x08009019
 8008ffc:	08009021 	.word	0x08009021
 8009000:	08009029 	.word	0x08009029
 8009004:	08009031 	.word	0x08009031
 8009008:	2300      	movs	r3, #0
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800900e:	e2ba      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009010:	2304      	movs	r3, #4
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009016:	e2b6      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009018:	2308      	movs	r3, #8
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901e:	e2b2      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009020:	2310      	movs	r3, #16
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009026:	e2ae      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009028:	2320      	movs	r3, #32
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902e:	e2aa      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009030:	2340      	movs	r3, #64	; 0x40
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009036:	e2a6      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009038:	2380      	movs	r3, #128	; 0x80
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800903e:	e2a2      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a35      	ldr	r2, [pc, #212]	; (800911c <UART_SetConfig+0x344>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d130      	bne.n	80090ac <UART_SetConfig+0x2d4>
 800904a:	4b31      	ldr	r3, [pc, #196]	; (8009110 <UART_SetConfig+0x338>)
 800904c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	2b05      	cmp	r3, #5
 8009054:	d826      	bhi.n	80090a4 <UART_SetConfig+0x2cc>
 8009056:	a201      	add	r2, pc, #4	; (adr r2, 800905c <UART_SetConfig+0x284>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	08009075 	.word	0x08009075
 8009060:	0800907d 	.word	0x0800907d
 8009064:	08009085 	.word	0x08009085
 8009068:	0800908d 	.word	0x0800908d
 800906c:	08009095 	.word	0x08009095
 8009070:	0800909d 	.word	0x0800909d
 8009074:	2300      	movs	r3, #0
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907a:	e284      	b.n	8009586 <UART_SetConfig+0x7ae>
 800907c:	2304      	movs	r3, #4
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009082:	e280      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009084:	2308      	movs	r3, #8
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908a:	e27c      	b.n	8009586 <UART_SetConfig+0x7ae>
 800908c:	2310      	movs	r3, #16
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009092:	e278      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009094:	2320      	movs	r3, #32
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800909a:	e274      	b.n	8009586 <UART_SetConfig+0x7ae>
 800909c:	2340      	movs	r3, #64	; 0x40
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090a2:	e270      	b.n	8009586 <UART_SetConfig+0x7ae>
 80090a4:	2380      	movs	r3, #128	; 0x80
 80090a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090aa:	e26c      	b.n	8009586 <UART_SetConfig+0x7ae>
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a1b      	ldr	r2, [pc, #108]	; (8009120 <UART_SetConfig+0x348>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d142      	bne.n	800913c <UART_SetConfig+0x364>
 80090b6:	4b16      	ldr	r3, [pc, #88]	; (8009110 <UART_SetConfig+0x338>)
 80090b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	2b05      	cmp	r3, #5
 80090c0:	d838      	bhi.n	8009134 <UART_SetConfig+0x35c>
 80090c2:	a201      	add	r2, pc, #4	; (adr r2, 80090c8 <UART_SetConfig+0x2f0>)
 80090c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c8:	080090e1 	.word	0x080090e1
 80090cc:	080090e9 	.word	0x080090e9
 80090d0:	080090f1 	.word	0x080090f1
 80090d4:	080090f9 	.word	0x080090f9
 80090d8:	08009125 	.word	0x08009125
 80090dc:	0800912d 	.word	0x0800912d
 80090e0:	2300      	movs	r3, #0
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e6:	e24e      	b.n	8009586 <UART_SetConfig+0x7ae>
 80090e8:	2304      	movs	r3, #4
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ee:	e24a      	b.n	8009586 <UART_SetConfig+0x7ae>
 80090f0:	2308      	movs	r3, #8
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090f6:	e246      	b.n	8009586 <UART_SetConfig+0x7ae>
 80090f8:	2310      	movs	r3, #16
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fe:	e242      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009100:	cfff69f3 	.word	0xcfff69f3
 8009104:	58000c00 	.word	0x58000c00
 8009108:	11fff4ff 	.word	0x11fff4ff
 800910c:	40011000 	.word	0x40011000
 8009110:	58024400 	.word	0x58024400
 8009114:	40004400 	.word	0x40004400
 8009118:	40004800 	.word	0x40004800
 800911c:	40004c00 	.word	0x40004c00
 8009120:	40005000 	.word	0x40005000
 8009124:	2320      	movs	r3, #32
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800912a:	e22c      	b.n	8009586 <UART_SetConfig+0x7ae>
 800912c:	2340      	movs	r3, #64	; 0x40
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009132:	e228      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009134:	2380      	movs	r3, #128	; 0x80
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800913a:	e224      	b.n	8009586 <UART_SetConfig+0x7ae>
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4ab1      	ldr	r2, [pc, #708]	; (8009408 <UART_SetConfig+0x630>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d176      	bne.n	8009234 <UART_SetConfig+0x45c>
 8009146:	4bb1      	ldr	r3, [pc, #708]	; (800940c <UART_SetConfig+0x634>)
 8009148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800914e:	2b28      	cmp	r3, #40	; 0x28
 8009150:	d86c      	bhi.n	800922c <UART_SetConfig+0x454>
 8009152:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <UART_SetConfig+0x380>)
 8009154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009158:	080091fd 	.word	0x080091fd
 800915c:	0800922d 	.word	0x0800922d
 8009160:	0800922d 	.word	0x0800922d
 8009164:	0800922d 	.word	0x0800922d
 8009168:	0800922d 	.word	0x0800922d
 800916c:	0800922d 	.word	0x0800922d
 8009170:	0800922d 	.word	0x0800922d
 8009174:	0800922d 	.word	0x0800922d
 8009178:	08009205 	.word	0x08009205
 800917c:	0800922d 	.word	0x0800922d
 8009180:	0800922d 	.word	0x0800922d
 8009184:	0800922d 	.word	0x0800922d
 8009188:	0800922d 	.word	0x0800922d
 800918c:	0800922d 	.word	0x0800922d
 8009190:	0800922d 	.word	0x0800922d
 8009194:	0800922d 	.word	0x0800922d
 8009198:	0800920d 	.word	0x0800920d
 800919c:	0800922d 	.word	0x0800922d
 80091a0:	0800922d 	.word	0x0800922d
 80091a4:	0800922d 	.word	0x0800922d
 80091a8:	0800922d 	.word	0x0800922d
 80091ac:	0800922d 	.word	0x0800922d
 80091b0:	0800922d 	.word	0x0800922d
 80091b4:	0800922d 	.word	0x0800922d
 80091b8:	08009215 	.word	0x08009215
 80091bc:	0800922d 	.word	0x0800922d
 80091c0:	0800922d 	.word	0x0800922d
 80091c4:	0800922d 	.word	0x0800922d
 80091c8:	0800922d 	.word	0x0800922d
 80091cc:	0800922d 	.word	0x0800922d
 80091d0:	0800922d 	.word	0x0800922d
 80091d4:	0800922d 	.word	0x0800922d
 80091d8:	0800921d 	.word	0x0800921d
 80091dc:	0800922d 	.word	0x0800922d
 80091e0:	0800922d 	.word	0x0800922d
 80091e4:	0800922d 	.word	0x0800922d
 80091e8:	0800922d 	.word	0x0800922d
 80091ec:	0800922d 	.word	0x0800922d
 80091f0:	0800922d 	.word	0x0800922d
 80091f4:	0800922d 	.word	0x0800922d
 80091f8:	08009225 	.word	0x08009225
 80091fc:	2301      	movs	r3, #1
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009202:	e1c0      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009204:	2304      	movs	r3, #4
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800920a:	e1bc      	b.n	8009586 <UART_SetConfig+0x7ae>
 800920c:	2308      	movs	r3, #8
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009212:	e1b8      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009214:	2310      	movs	r3, #16
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800921a:	e1b4      	b.n	8009586 <UART_SetConfig+0x7ae>
 800921c:	2320      	movs	r3, #32
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009222:	e1b0      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009224:	2340      	movs	r3, #64	; 0x40
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800922a:	e1ac      	b.n	8009586 <UART_SetConfig+0x7ae>
 800922c:	2380      	movs	r3, #128	; 0x80
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009232:	e1a8      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a75      	ldr	r2, [pc, #468]	; (8009410 <UART_SetConfig+0x638>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d130      	bne.n	80092a0 <UART_SetConfig+0x4c8>
 800923e:	4b73      	ldr	r3, [pc, #460]	; (800940c <UART_SetConfig+0x634>)
 8009240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009242:	f003 0307 	and.w	r3, r3, #7
 8009246:	2b05      	cmp	r3, #5
 8009248:	d826      	bhi.n	8009298 <UART_SetConfig+0x4c0>
 800924a:	a201      	add	r2, pc, #4	; (adr r2, 8009250 <UART_SetConfig+0x478>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	08009269 	.word	0x08009269
 8009254:	08009271 	.word	0x08009271
 8009258:	08009279 	.word	0x08009279
 800925c:	08009281 	.word	0x08009281
 8009260:	08009289 	.word	0x08009289
 8009264:	08009291 	.word	0x08009291
 8009268:	2300      	movs	r3, #0
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800926e:	e18a      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009270:	2304      	movs	r3, #4
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009276:	e186      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009278:	2308      	movs	r3, #8
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800927e:	e182      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009280:	2310      	movs	r3, #16
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009286:	e17e      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009288:	2320      	movs	r3, #32
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800928e:	e17a      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009290:	2340      	movs	r3, #64	; 0x40
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009296:	e176      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009298:	2380      	movs	r3, #128	; 0x80
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800929e:	e172      	b.n	8009586 <UART_SetConfig+0x7ae>
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a5b      	ldr	r2, [pc, #364]	; (8009414 <UART_SetConfig+0x63c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d130      	bne.n	800930c <UART_SetConfig+0x534>
 80092aa:	4b58      	ldr	r3, [pc, #352]	; (800940c <UART_SetConfig+0x634>)
 80092ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	2b05      	cmp	r3, #5
 80092b4:	d826      	bhi.n	8009304 <UART_SetConfig+0x52c>
 80092b6:	a201      	add	r2, pc, #4	; (adr r2, 80092bc <UART_SetConfig+0x4e4>)
 80092b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092bc:	080092d5 	.word	0x080092d5
 80092c0:	080092dd 	.word	0x080092dd
 80092c4:	080092e5 	.word	0x080092e5
 80092c8:	080092ed 	.word	0x080092ed
 80092cc:	080092f5 	.word	0x080092f5
 80092d0:	080092fd 	.word	0x080092fd
 80092d4:	2300      	movs	r3, #0
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092da:	e154      	b.n	8009586 <UART_SetConfig+0x7ae>
 80092dc:	2304      	movs	r3, #4
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092e2:	e150      	b.n	8009586 <UART_SetConfig+0x7ae>
 80092e4:	2308      	movs	r3, #8
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ea:	e14c      	b.n	8009586 <UART_SetConfig+0x7ae>
 80092ec:	2310      	movs	r3, #16
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092f2:	e148      	b.n	8009586 <UART_SetConfig+0x7ae>
 80092f4:	2320      	movs	r3, #32
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092fa:	e144      	b.n	8009586 <UART_SetConfig+0x7ae>
 80092fc:	2340      	movs	r3, #64	; 0x40
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009302:	e140      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009304:	2380      	movs	r3, #128	; 0x80
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800930a:	e13c      	b.n	8009586 <UART_SetConfig+0x7ae>
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a41      	ldr	r2, [pc, #260]	; (8009418 <UART_SetConfig+0x640>)
 8009312:	4293      	cmp	r3, r2
 8009314:	f040 8082 	bne.w	800941c <UART_SetConfig+0x644>
 8009318:	4b3c      	ldr	r3, [pc, #240]	; (800940c <UART_SetConfig+0x634>)
 800931a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800931c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009320:	2b28      	cmp	r3, #40	; 0x28
 8009322:	d86d      	bhi.n	8009400 <UART_SetConfig+0x628>
 8009324:	a201      	add	r2, pc, #4	; (adr r2, 800932c <UART_SetConfig+0x554>)
 8009326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932a:	bf00      	nop
 800932c:	080093d1 	.word	0x080093d1
 8009330:	08009401 	.word	0x08009401
 8009334:	08009401 	.word	0x08009401
 8009338:	08009401 	.word	0x08009401
 800933c:	08009401 	.word	0x08009401
 8009340:	08009401 	.word	0x08009401
 8009344:	08009401 	.word	0x08009401
 8009348:	08009401 	.word	0x08009401
 800934c:	080093d9 	.word	0x080093d9
 8009350:	08009401 	.word	0x08009401
 8009354:	08009401 	.word	0x08009401
 8009358:	08009401 	.word	0x08009401
 800935c:	08009401 	.word	0x08009401
 8009360:	08009401 	.word	0x08009401
 8009364:	08009401 	.word	0x08009401
 8009368:	08009401 	.word	0x08009401
 800936c:	080093e1 	.word	0x080093e1
 8009370:	08009401 	.word	0x08009401
 8009374:	08009401 	.word	0x08009401
 8009378:	08009401 	.word	0x08009401
 800937c:	08009401 	.word	0x08009401
 8009380:	08009401 	.word	0x08009401
 8009384:	08009401 	.word	0x08009401
 8009388:	08009401 	.word	0x08009401
 800938c:	080093e9 	.word	0x080093e9
 8009390:	08009401 	.word	0x08009401
 8009394:	08009401 	.word	0x08009401
 8009398:	08009401 	.word	0x08009401
 800939c:	08009401 	.word	0x08009401
 80093a0:	08009401 	.word	0x08009401
 80093a4:	08009401 	.word	0x08009401
 80093a8:	08009401 	.word	0x08009401
 80093ac:	080093f1 	.word	0x080093f1
 80093b0:	08009401 	.word	0x08009401
 80093b4:	08009401 	.word	0x08009401
 80093b8:	08009401 	.word	0x08009401
 80093bc:	08009401 	.word	0x08009401
 80093c0:	08009401 	.word	0x08009401
 80093c4:	08009401 	.word	0x08009401
 80093c8:	08009401 	.word	0x08009401
 80093cc:	080093f9 	.word	0x080093f9
 80093d0:	2301      	movs	r3, #1
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093d6:	e0d6      	b.n	8009586 <UART_SetConfig+0x7ae>
 80093d8:	2304      	movs	r3, #4
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093de:	e0d2      	b.n	8009586 <UART_SetConfig+0x7ae>
 80093e0:	2308      	movs	r3, #8
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093e6:	e0ce      	b.n	8009586 <UART_SetConfig+0x7ae>
 80093e8:	2310      	movs	r3, #16
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ee:	e0ca      	b.n	8009586 <UART_SetConfig+0x7ae>
 80093f0:	2320      	movs	r3, #32
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093f6:	e0c6      	b.n	8009586 <UART_SetConfig+0x7ae>
 80093f8:	2340      	movs	r3, #64	; 0x40
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093fe:	e0c2      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009400:	2380      	movs	r3, #128	; 0x80
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009406:	e0be      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009408:	40011400 	.word	0x40011400
 800940c:	58024400 	.word	0x58024400
 8009410:	40007800 	.word	0x40007800
 8009414:	40007c00 	.word	0x40007c00
 8009418:	40011800 	.word	0x40011800
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4aad      	ldr	r2, [pc, #692]	; (80096d8 <UART_SetConfig+0x900>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d176      	bne.n	8009514 <UART_SetConfig+0x73c>
 8009426:	4bad      	ldr	r3, [pc, #692]	; (80096dc <UART_SetConfig+0x904>)
 8009428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800942e:	2b28      	cmp	r3, #40	; 0x28
 8009430:	d86c      	bhi.n	800950c <UART_SetConfig+0x734>
 8009432:	a201      	add	r2, pc, #4	; (adr r2, 8009438 <UART_SetConfig+0x660>)
 8009434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009438:	080094dd 	.word	0x080094dd
 800943c:	0800950d 	.word	0x0800950d
 8009440:	0800950d 	.word	0x0800950d
 8009444:	0800950d 	.word	0x0800950d
 8009448:	0800950d 	.word	0x0800950d
 800944c:	0800950d 	.word	0x0800950d
 8009450:	0800950d 	.word	0x0800950d
 8009454:	0800950d 	.word	0x0800950d
 8009458:	080094e5 	.word	0x080094e5
 800945c:	0800950d 	.word	0x0800950d
 8009460:	0800950d 	.word	0x0800950d
 8009464:	0800950d 	.word	0x0800950d
 8009468:	0800950d 	.word	0x0800950d
 800946c:	0800950d 	.word	0x0800950d
 8009470:	0800950d 	.word	0x0800950d
 8009474:	0800950d 	.word	0x0800950d
 8009478:	080094ed 	.word	0x080094ed
 800947c:	0800950d 	.word	0x0800950d
 8009480:	0800950d 	.word	0x0800950d
 8009484:	0800950d 	.word	0x0800950d
 8009488:	0800950d 	.word	0x0800950d
 800948c:	0800950d 	.word	0x0800950d
 8009490:	0800950d 	.word	0x0800950d
 8009494:	0800950d 	.word	0x0800950d
 8009498:	080094f5 	.word	0x080094f5
 800949c:	0800950d 	.word	0x0800950d
 80094a0:	0800950d 	.word	0x0800950d
 80094a4:	0800950d 	.word	0x0800950d
 80094a8:	0800950d 	.word	0x0800950d
 80094ac:	0800950d 	.word	0x0800950d
 80094b0:	0800950d 	.word	0x0800950d
 80094b4:	0800950d 	.word	0x0800950d
 80094b8:	080094fd 	.word	0x080094fd
 80094bc:	0800950d 	.word	0x0800950d
 80094c0:	0800950d 	.word	0x0800950d
 80094c4:	0800950d 	.word	0x0800950d
 80094c8:	0800950d 	.word	0x0800950d
 80094cc:	0800950d 	.word	0x0800950d
 80094d0:	0800950d 	.word	0x0800950d
 80094d4:	0800950d 	.word	0x0800950d
 80094d8:	08009505 	.word	0x08009505
 80094dc:	2301      	movs	r3, #1
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e2:	e050      	b.n	8009586 <UART_SetConfig+0x7ae>
 80094e4:	2304      	movs	r3, #4
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ea:	e04c      	b.n	8009586 <UART_SetConfig+0x7ae>
 80094ec:	2308      	movs	r3, #8
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f2:	e048      	b.n	8009586 <UART_SetConfig+0x7ae>
 80094f4:	2310      	movs	r3, #16
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fa:	e044      	b.n	8009586 <UART_SetConfig+0x7ae>
 80094fc:	2320      	movs	r3, #32
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009502:	e040      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009504:	2340      	movs	r3, #64	; 0x40
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950a:	e03c      	b.n	8009586 <UART_SetConfig+0x7ae>
 800950c:	2380      	movs	r3, #128	; 0x80
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009512:	e038      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a71      	ldr	r2, [pc, #452]	; (80096e0 <UART_SetConfig+0x908>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d130      	bne.n	8009580 <UART_SetConfig+0x7a8>
 800951e:	4b6f      	ldr	r3, [pc, #444]	; (80096dc <UART_SetConfig+0x904>)
 8009520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009522:	f003 0307 	and.w	r3, r3, #7
 8009526:	2b05      	cmp	r3, #5
 8009528:	d826      	bhi.n	8009578 <UART_SetConfig+0x7a0>
 800952a:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <UART_SetConfig+0x758>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	08009549 	.word	0x08009549
 8009534:	08009551 	.word	0x08009551
 8009538:	08009559 	.word	0x08009559
 800953c:	08009561 	.word	0x08009561
 8009540:	08009569 	.word	0x08009569
 8009544:	08009571 	.word	0x08009571
 8009548:	2302      	movs	r3, #2
 800954a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954e:	e01a      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009550:	2304      	movs	r3, #4
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009556:	e016      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009558:	2308      	movs	r3, #8
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955e:	e012      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009560:	2310      	movs	r3, #16
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009566:	e00e      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009568:	2320      	movs	r3, #32
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800956e:	e00a      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009570:	2340      	movs	r3, #64	; 0x40
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009576:	e006      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009578:	2380      	movs	r3, #128	; 0x80
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800957e:	e002      	b.n	8009586 <UART_SetConfig+0x7ae>
 8009580:	2380      	movs	r3, #128	; 0x80
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a55      	ldr	r2, [pc, #340]	; (80096e0 <UART_SetConfig+0x908>)
 800958c:	4293      	cmp	r3, r2
 800958e:	f040 80f8 	bne.w	8009782 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009592:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009596:	2b20      	cmp	r3, #32
 8009598:	dc46      	bgt.n	8009628 <UART_SetConfig+0x850>
 800959a:	2b02      	cmp	r3, #2
 800959c:	db75      	blt.n	800968a <UART_SetConfig+0x8b2>
 800959e:	3b02      	subs	r3, #2
 80095a0:	2b1e      	cmp	r3, #30
 80095a2:	d872      	bhi.n	800968a <UART_SetConfig+0x8b2>
 80095a4:	a201      	add	r2, pc, #4	; (adr r2, 80095ac <UART_SetConfig+0x7d4>)
 80095a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095aa:	bf00      	nop
 80095ac:	0800962f 	.word	0x0800962f
 80095b0:	0800968b 	.word	0x0800968b
 80095b4:	08009637 	.word	0x08009637
 80095b8:	0800968b 	.word	0x0800968b
 80095bc:	0800968b 	.word	0x0800968b
 80095c0:	0800968b 	.word	0x0800968b
 80095c4:	08009647 	.word	0x08009647
 80095c8:	0800968b 	.word	0x0800968b
 80095cc:	0800968b 	.word	0x0800968b
 80095d0:	0800968b 	.word	0x0800968b
 80095d4:	0800968b 	.word	0x0800968b
 80095d8:	0800968b 	.word	0x0800968b
 80095dc:	0800968b 	.word	0x0800968b
 80095e0:	0800968b 	.word	0x0800968b
 80095e4:	08009657 	.word	0x08009657
 80095e8:	0800968b 	.word	0x0800968b
 80095ec:	0800968b 	.word	0x0800968b
 80095f0:	0800968b 	.word	0x0800968b
 80095f4:	0800968b 	.word	0x0800968b
 80095f8:	0800968b 	.word	0x0800968b
 80095fc:	0800968b 	.word	0x0800968b
 8009600:	0800968b 	.word	0x0800968b
 8009604:	0800968b 	.word	0x0800968b
 8009608:	0800968b 	.word	0x0800968b
 800960c:	0800968b 	.word	0x0800968b
 8009610:	0800968b 	.word	0x0800968b
 8009614:	0800968b 	.word	0x0800968b
 8009618:	0800968b 	.word	0x0800968b
 800961c:	0800968b 	.word	0x0800968b
 8009620:	0800968b 	.word	0x0800968b
 8009624:	0800967d 	.word	0x0800967d
 8009628:	2b40      	cmp	r3, #64	; 0x40
 800962a:	d02a      	beq.n	8009682 <UART_SetConfig+0x8aa>
 800962c:	e02d      	b.n	800968a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800962e:	f7fc ffaf 	bl	8006590 <HAL_RCCEx_GetD3PCLK1Freq>
 8009632:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009634:	e02f      	b.n	8009696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800963a:	4618      	mov	r0, r3
 800963c:	f7fc ffbe 	bl	80065bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009644:	e027      	b.n	8009696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009646:	f107 0318 	add.w	r3, r7, #24
 800964a:	4618      	mov	r0, r3
 800964c:	f7fd f90a 	bl	8006864 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009654:	e01f      	b.n	8009696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009656:	4b21      	ldr	r3, [pc, #132]	; (80096dc <UART_SetConfig+0x904>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0320 	and.w	r3, r3, #32
 800965e:	2b00      	cmp	r3, #0
 8009660:	d009      	beq.n	8009676 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009662:	4b1e      	ldr	r3, [pc, #120]	; (80096dc <UART_SetConfig+0x904>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	08db      	lsrs	r3, r3, #3
 8009668:	f003 0303 	and.w	r3, r3, #3
 800966c:	4a1d      	ldr	r2, [pc, #116]	; (80096e4 <UART_SetConfig+0x90c>)
 800966e:	fa22 f303 	lsr.w	r3, r2, r3
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009674:	e00f      	b.n	8009696 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009676:	4b1b      	ldr	r3, [pc, #108]	; (80096e4 <UART_SetConfig+0x90c>)
 8009678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800967a:	e00c      	b.n	8009696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800967c:	4b1a      	ldr	r3, [pc, #104]	; (80096e8 <UART_SetConfig+0x910>)
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009680:	e009      	b.n	8009696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009688:	e005      	b.n	8009696 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800968a:	2300      	movs	r3, #0
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009694:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 81ee 	beq.w	8009a7a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a2:	4a12      	ldr	r2, [pc, #72]	; (80096ec <UART_SetConfig+0x914>)
 80096a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096a8:	461a      	mov	r2, r3
 80096aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80096b0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	4613      	mov	r3, r2
 80096b8:	005b      	lsls	r3, r3, #1
 80096ba:	4413      	add	r3, r2
 80096bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096be:	429a      	cmp	r2, r3
 80096c0:	d305      	bcc.n	80096ce <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d910      	bls.n	80096f0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80096d4:	e1d1      	b.n	8009a7a <UART_SetConfig+0xca2>
 80096d6:	bf00      	nop
 80096d8:	40011c00 	.word	0x40011c00
 80096dc:	58024400 	.word	0x58024400
 80096e0:	58000c00 	.word	0x58000c00
 80096e4:	03d09000 	.word	0x03d09000
 80096e8:	003d0900 	.word	0x003d0900
 80096ec:	0800ae94 	.word	0x0800ae94
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f2:	2200      	movs	r2, #0
 80096f4:	60bb      	str	r3, [r7, #8]
 80096f6:	60fa      	str	r2, [r7, #12]
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	4ac0      	ldr	r2, [pc, #768]	; (8009a00 <UART_SetConfig+0xc28>)
 80096fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009702:	b29b      	uxth	r3, r3
 8009704:	2200      	movs	r2, #0
 8009706:	603b      	str	r3, [r7, #0]
 8009708:	607a      	str	r2, [r7, #4]
 800970a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800970e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009712:	f7f6 fe45 	bl	80003a0 <__aeabi_uldivmod>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	4610      	mov	r0, r2
 800971c:	4619      	mov	r1, r3
 800971e:	f04f 0200 	mov.w	r2, #0
 8009722:	f04f 0300 	mov.w	r3, #0
 8009726:	020b      	lsls	r3, r1, #8
 8009728:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800972c:	0202      	lsls	r2, r0, #8
 800972e:	6979      	ldr	r1, [r7, #20]
 8009730:	6849      	ldr	r1, [r1, #4]
 8009732:	0849      	lsrs	r1, r1, #1
 8009734:	2000      	movs	r0, #0
 8009736:	460c      	mov	r4, r1
 8009738:	4605      	mov	r5, r0
 800973a:	eb12 0804 	adds.w	r8, r2, r4
 800973e:	eb43 0905 	adc.w	r9, r3, r5
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	469a      	mov	sl, r3
 800974a:	4693      	mov	fp, r2
 800974c:	4652      	mov	r2, sl
 800974e:	465b      	mov	r3, fp
 8009750:	4640      	mov	r0, r8
 8009752:	4649      	mov	r1, r9
 8009754:	f7f6 fe24 	bl	80003a0 <__aeabi_uldivmod>
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	4613      	mov	r3, r2
 800975e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009766:	d308      	bcc.n	800977a <UART_SetConfig+0x9a2>
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800976e:	d204      	bcs.n	800977a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009776:	60da      	str	r2, [r3, #12]
 8009778:	e17f      	b.n	8009a7a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009780:	e17b      	b.n	8009a7a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800978a:	f040 80bd 	bne.w	8009908 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800978e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009792:	2b20      	cmp	r3, #32
 8009794:	dc48      	bgt.n	8009828 <UART_SetConfig+0xa50>
 8009796:	2b00      	cmp	r3, #0
 8009798:	db7b      	blt.n	8009892 <UART_SetConfig+0xaba>
 800979a:	2b20      	cmp	r3, #32
 800979c:	d879      	bhi.n	8009892 <UART_SetConfig+0xaba>
 800979e:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <UART_SetConfig+0x9cc>)
 80097a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a4:	0800982f 	.word	0x0800982f
 80097a8:	08009837 	.word	0x08009837
 80097ac:	08009893 	.word	0x08009893
 80097b0:	08009893 	.word	0x08009893
 80097b4:	0800983f 	.word	0x0800983f
 80097b8:	08009893 	.word	0x08009893
 80097bc:	08009893 	.word	0x08009893
 80097c0:	08009893 	.word	0x08009893
 80097c4:	0800984f 	.word	0x0800984f
 80097c8:	08009893 	.word	0x08009893
 80097cc:	08009893 	.word	0x08009893
 80097d0:	08009893 	.word	0x08009893
 80097d4:	08009893 	.word	0x08009893
 80097d8:	08009893 	.word	0x08009893
 80097dc:	08009893 	.word	0x08009893
 80097e0:	08009893 	.word	0x08009893
 80097e4:	0800985f 	.word	0x0800985f
 80097e8:	08009893 	.word	0x08009893
 80097ec:	08009893 	.word	0x08009893
 80097f0:	08009893 	.word	0x08009893
 80097f4:	08009893 	.word	0x08009893
 80097f8:	08009893 	.word	0x08009893
 80097fc:	08009893 	.word	0x08009893
 8009800:	08009893 	.word	0x08009893
 8009804:	08009893 	.word	0x08009893
 8009808:	08009893 	.word	0x08009893
 800980c:	08009893 	.word	0x08009893
 8009810:	08009893 	.word	0x08009893
 8009814:	08009893 	.word	0x08009893
 8009818:	08009893 	.word	0x08009893
 800981c:	08009893 	.word	0x08009893
 8009820:	08009893 	.word	0x08009893
 8009824:	08009885 	.word	0x08009885
 8009828:	2b40      	cmp	r3, #64	; 0x40
 800982a:	d02e      	beq.n	800988a <UART_SetConfig+0xab2>
 800982c:	e031      	b.n	8009892 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800982e:	f7fb ff77 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 8009832:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009834:	e033      	b.n	800989e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009836:	f7fb ff89 	bl	800574c <HAL_RCC_GetPCLK2Freq>
 800983a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800983c:	e02f      	b.n	800989e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800983e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009842:	4618      	mov	r0, r3
 8009844:	f7fc feba 	bl	80065bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800984c:	e027      	b.n	800989e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800984e:	f107 0318 	add.w	r3, r7, #24
 8009852:	4618      	mov	r0, r3
 8009854:	f7fd f806 	bl	8006864 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800985c:	e01f      	b.n	800989e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800985e:	4b69      	ldr	r3, [pc, #420]	; (8009a04 <UART_SetConfig+0xc2c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0320 	and.w	r3, r3, #32
 8009866:	2b00      	cmp	r3, #0
 8009868:	d009      	beq.n	800987e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800986a:	4b66      	ldr	r3, [pc, #408]	; (8009a04 <UART_SetConfig+0xc2c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	08db      	lsrs	r3, r3, #3
 8009870:	f003 0303 	and.w	r3, r3, #3
 8009874:	4a64      	ldr	r2, [pc, #400]	; (8009a08 <UART_SetConfig+0xc30>)
 8009876:	fa22 f303 	lsr.w	r3, r2, r3
 800987a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800987c:	e00f      	b.n	800989e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800987e:	4b62      	ldr	r3, [pc, #392]	; (8009a08 <UART_SetConfig+0xc30>)
 8009880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009882:	e00c      	b.n	800989e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009884:	4b61      	ldr	r3, [pc, #388]	; (8009a0c <UART_SetConfig+0xc34>)
 8009886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009888:	e009      	b.n	800989e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800988a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800988e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009890:	e005      	b.n	800989e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009892:	2300      	movs	r3, #0
 8009894:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800989c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800989e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f000 80ea 	beq.w	8009a7a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	4a55      	ldr	r2, [pc, #340]	; (8009a00 <UART_SetConfig+0xc28>)
 80098ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098b0:	461a      	mov	r2, r3
 80098b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80098b8:	005a      	lsls	r2, r3, #1
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	085b      	lsrs	r3, r3, #1
 80098c0:	441a      	add	r2, r3
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ce:	2b0f      	cmp	r3, #15
 80098d0:	d916      	bls.n	8009900 <UART_SetConfig+0xb28>
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098d8:	d212      	bcs.n	8009900 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098dc:	b29b      	uxth	r3, r3
 80098de:	f023 030f 	bic.w	r3, r3, #15
 80098e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e6:	085b      	lsrs	r3, r3, #1
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	f003 0307 	and.w	r3, r3, #7
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80098f2:	4313      	orrs	r3, r2
 80098f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80098fc:	60da      	str	r2, [r3, #12]
 80098fe:	e0bc      	b.n	8009a7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009906:	e0b8      	b.n	8009a7a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009908:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800990c:	2b20      	cmp	r3, #32
 800990e:	dc4b      	bgt.n	80099a8 <UART_SetConfig+0xbd0>
 8009910:	2b00      	cmp	r3, #0
 8009912:	f2c0 8087 	blt.w	8009a24 <UART_SetConfig+0xc4c>
 8009916:	2b20      	cmp	r3, #32
 8009918:	f200 8084 	bhi.w	8009a24 <UART_SetConfig+0xc4c>
 800991c:	a201      	add	r2, pc, #4	; (adr r2, 8009924 <UART_SetConfig+0xb4c>)
 800991e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009922:	bf00      	nop
 8009924:	080099af 	.word	0x080099af
 8009928:	080099b7 	.word	0x080099b7
 800992c:	08009a25 	.word	0x08009a25
 8009930:	08009a25 	.word	0x08009a25
 8009934:	080099bf 	.word	0x080099bf
 8009938:	08009a25 	.word	0x08009a25
 800993c:	08009a25 	.word	0x08009a25
 8009940:	08009a25 	.word	0x08009a25
 8009944:	080099cf 	.word	0x080099cf
 8009948:	08009a25 	.word	0x08009a25
 800994c:	08009a25 	.word	0x08009a25
 8009950:	08009a25 	.word	0x08009a25
 8009954:	08009a25 	.word	0x08009a25
 8009958:	08009a25 	.word	0x08009a25
 800995c:	08009a25 	.word	0x08009a25
 8009960:	08009a25 	.word	0x08009a25
 8009964:	080099df 	.word	0x080099df
 8009968:	08009a25 	.word	0x08009a25
 800996c:	08009a25 	.word	0x08009a25
 8009970:	08009a25 	.word	0x08009a25
 8009974:	08009a25 	.word	0x08009a25
 8009978:	08009a25 	.word	0x08009a25
 800997c:	08009a25 	.word	0x08009a25
 8009980:	08009a25 	.word	0x08009a25
 8009984:	08009a25 	.word	0x08009a25
 8009988:	08009a25 	.word	0x08009a25
 800998c:	08009a25 	.word	0x08009a25
 8009990:	08009a25 	.word	0x08009a25
 8009994:	08009a25 	.word	0x08009a25
 8009998:	08009a25 	.word	0x08009a25
 800999c:	08009a25 	.word	0x08009a25
 80099a0:	08009a25 	.word	0x08009a25
 80099a4:	08009a17 	.word	0x08009a17
 80099a8:	2b40      	cmp	r3, #64	; 0x40
 80099aa:	d037      	beq.n	8009a1c <UART_SetConfig+0xc44>
 80099ac:	e03a      	b.n	8009a24 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099ae:	f7fb feb7 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 80099b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80099b4:	e03c      	b.n	8009a30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099b6:	f7fb fec9 	bl	800574c <HAL_RCC_GetPCLK2Freq>
 80099ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80099bc:	e038      	b.n	8009a30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fc fdfa 	bl	80065bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099cc:	e030      	b.n	8009a30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099ce:	f107 0318 	add.w	r3, r7, #24
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fc ff46 	bl	8006864 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099dc:	e028      	b.n	8009a30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099de:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <UART_SetConfig+0xc2c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 0320 	and.w	r3, r3, #32
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d012      	beq.n	8009a10 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80099ea:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <UART_SetConfig+0xc2c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	08db      	lsrs	r3, r3, #3
 80099f0:	f003 0303 	and.w	r3, r3, #3
 80099f4:	4a04      	ldr	r2, [pc, #16]	; (8009a08 <UART_SetConfig+0xc30>)
 80099f6:	fa22 f303 	lsr.w	r3, r2, r3
 80099fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099fc:	e018      	b.n	8009a30 <UART_SetConfig+0xc58>
 80099fe:	bf00      	nop
 8009a00:	0800ae94 	.word	0x0800ae94
 8009a04:	58024400 	.word	0x58024400
 8009a08:	03d09000 	.word	0x03d09000
 8009a0c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009a10:	4b24      	ldr	r3, [pc, #144]	; (8009aa4 <UART_SetConfig+0xccc>)
 8009a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a14:	e00c      	b.n	8009a30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a16:	4b24      	ldr	r3, [pc, #144]	; (8009aa8 <UART_SetConfig+0xcd0>)
 8009a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a1a:	e009      	b.n	8009a30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a22:	e005      	b.n	8009a30 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009a2e:	bf00      	nop
    }

    if (pclk != 0U)
 8009a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d021      	beq.n	8009a7a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	4a1c      	ldr	r2, [pc, #112]	; (8009aac <UART_SetConfig+0xcd4>)
 8009a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a40:	461a      	mov	r2, r3
 8009a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a44:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	085b      	lsrs	r3, r3, #1
 8009a4e:	441a      	add	r2, r3
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a58:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	2b0f      	cmp	r3, #15
 8009a5e:	d909      	bls.n	8009a74 <UART_SetConfig+0xc9c>
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a66:	d205      	bcs.n	8009a74 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	60da      	str	r2, [r3, #12]
 8009a72:	e002      	b.n	8009a7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	2200      	movs	r2, #0
 8009a94:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009a96:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3748      	adds	r7, #72	; 0x48
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009aa4:	03d09000 	.word	0x03d09000
 8009aa8:	003d0900 	.word	0x003d0900
 8009aac:	0800ae94 	.word	0x0800ae94

08009ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00a      	beq.n	8009ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ade:	f003 0302 	and.w	r3, r3, #2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00a      	beq.n	8009afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	430a      	orrs	r2, r1
 8009afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b00:	f003 0304 	and.w	r3, r3, #4
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00a      	beq.n	8009b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b22:	f003 0308 	and.w	r3, r3, #8
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	430a      	orrs	r2, r1
 8009b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b44:	f003 0310 	and.w	r3, r3, #16
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00a      	beq.n	8009b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	430a      	orrs	r2, r1
 8009b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b66:	f003 0320 	and.w	r3, r3, #32
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	430a      	orrs	r2, r1
 8009b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d01a      	beq.n	8009bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bae:	d10a      	bne.n	8009bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00a      	beq.n	8009be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	605a      	str	r2, [r3, #4]
  }
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af02      	add	r7, sp, #8
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c04:	f7f8 fd86 	bl	8002714 <HAL_GetTick>
 8009c08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 0308 	and.w	r3, r3, #8
 8009c14:	2b08      	cmp	r3, #8
 8009c16:	d10e      	bne.n	8009c36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f82f 	bl	8009c8a <UART_WaitOnFlagUntilTimeout>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c32:	2303      	movs	r3, #3
 8009c34:	e025      	b.n	8009c82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	d10e      	bne.n	8009c62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f819 	bl	8009c8a <UART_WaitOnFlagUntilTimeout>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e00f      	b.n	8009c82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2220      	movs	r2, #32
 8009c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2220      	movs	r2, #32
 8009c6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b09c      	sub	sp, #112	; 0x70
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	60f8      	str	r0, [r7, #12]
 8009c92:	60b9      	str	r1, [r7, #8]
 8009c94:	603b      	str	r3, [r7, #0]
 8009c96:	4613      	mov	r3, r2
 8009c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c9a:	e0a9      	b.n	8009df0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	f000 80a5 	beq.w	8009df0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ca6:	f7f8 fd35 	bl	8002714 <HAL_GetTick>
 8009caa:	4602      	mov	r2, r0
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d302      	bcc.n	8009cbc <UART_WaitOnFlagUntilTimeout+0x32>
 8009cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d140      	bne.n	8009d3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cc4:	e853 3f00 	ldrex	r3, [r3]
 8009cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ccc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e6      	bne.n	8009cbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3308      	adds	r3, #8
 8009cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf8:	e853 3f00 	ldrex	r3, [r3]
 8009cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d00:	f023 0301 	bic.w	r3, r3, #1
 8009d04:	663b      	str	r3, [r7, #96]	; 0x60
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3308      	adds	r3, #8
 8009d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009d10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d16:	e841 2300 	strex	r3, r2, [r1]
 8009d1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1e5      	bne.n	8009cee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2220      	movs	r2, #32
 8009d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2220      	movs	r2, #32
 8009d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e069      	b.n	8009e12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 0304 	and.w	r3, r3, #4
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d051      	beq.n	8009df0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d5a:	d149      	bne.n	8009df0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	e853 3f00 	ldrex	r3, [r3]
 8009d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	461a      	mov	r2, r3
 8009d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d84:	637b      	str	r3, [r7, #52]	; 0x34
 8009d86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d8c:	e841 2300 	strex	r3, r2, [r1]
 8009d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1e6      	bne.n	8009d66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	3308      	adds	r3, #8
 8009d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	e853 3f00 	ldrex	r3, [r3]
 8009da6:	613b      	str	r3, [r7, #16]
   return(result);
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	f023 0301 	bic.w	r3, r3, #1
 8009dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3308      	adds	r3, #8
 8009db6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009db8:	623a      	str	r2, [r7, #32]
 8009dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbc:	69f9      	ldr	r1, [r7, #28]
 8009dbe:	6a3a      	ldr	r2, [r7, #32]
 8009dc0:	e841 2300 	strex	r3, r2, [r1]
 8009dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e5      	bne.n	8009d98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2220      	movs	r2, #32
 8009de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e010      	b.n	8009e12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	69da      	ldr	r2, [r3, #28]
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	4013      	ands	r3, r2
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	bf0c      	ite	eq
 8009e00:	2301      	moveq	r3, #1
 8009e02:	2300      	movne	r3, #0
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	461a      	mov	r2, r3
 8009e08:	79fb      	ldrb	r3, [r7, #7]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	f43f af46 	beq.w	8009c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3770      	adds	r7, #112	; 0x70
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b085      	sub	sp, #20
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d101      	bne.n	8009e30 <HAL_UARTEx_DisableFifoMode+0x16>
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	e027      	b.n	8009e80 <HAL_UARTEx_DisableFifoMode+0x66>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2224      	movs	r2, #36	; 0x24
 8009e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f022 0201 	bic.w	r2, r2, #1
 8009e56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d101      	bne.n	8009ea4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	e02d      	b.n	8009f00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2224      	movs	r2, #36	; 0x24
 8009eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f022 0201 	bic.w	r2, r2, #1
 8009eca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	430a      	orrs	r2, r1
 8009ede:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f84f 	bl	8009f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2220      	movs	r2, #32
 8009ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d101      	bne.n	8009f20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e02d      	b.n	8009f7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2224      	movs	r2, #36	; 0x24
 8009f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f022 0201 	bic.w	r2, r2, #1
 8009f46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f811 	bl	8009f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2220      	movs	r2, #32
 8009f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d108      	bne.n	8009fa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fa4:	e031      	b.n	800a00a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009fa6:	2310      	movs	r3, #16
 8009fa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009faa:	2310      	movs	r3, #16
 8009fac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	0e5b      	lsrs	r3, r3, #25
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	f003 0307 	and.w	r3, r3, #7
 8009fbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	0f5b      	lsrs	r3, r3, #29
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	f003 0307 	and.w	r3, r3, #7
 8009fcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fce:	7bbb      	ldrb	r3, [r7, #14]
 8009fd0:	7b3a      	ldrb	r2, [r7, #12]
 8009fd2:	4911      	ldr	r1, [pc, #68]	; (800a018 <UARTEx_SetNbDataToProcess+0x94>)
 8009fd4:	5c8a      	ldrb	r2, [r1, r2]
 8009fd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fda:	7b3a      	ldrb	r2, [r7, #12]
 8009fdc:	490f      	ldr	r1, [pc, #60]	; (800a01c <UARTEx_SetNbDataToProcess+0x98>)
 8009fde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fe0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
 8009fee:	7b7a      	ldrb	r2, [r7, #13]
 8009ff0:	4909      	ldr	r1, [pc, #36]	; (800a018 <UARTEx_SetNbDataToProcess+0x94>)
 8009ff2:	5c8a      	ldrb	r2, [r1, r2]
 8009ff4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ff8:	7b7a      	ldrb	r2, [r7, #13]
 8009ffa:	4908      	ldr	r1, [pc, #32]	; (800a01c <UARTEx_SetNbDataToProcess+0x98>)
 8009ffc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ffe:	fb93 f3f2 	sdiv	r3, r3, r2
 800a002:	b29a      	uxth	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a00a:	bf00      	nop
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	0800aeac 	.word	0x0800aeac
 800a01c:	0800aeb4 	.word	0x0800aeb4

0800a020 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a024:	4904      	ldr	r1, [pc, #16]	; (800a038 <MX_FATFS_Init+0x18>)
 800a026:	4805      	ldr	r0, [pc, #20]	; (800a03c <MX_FATFS_Init+0x1c>)
 800a028:	f000 f8b2 	bl	800a190 <FATFS_LinkDriver>
 800a02c:	4603      	mov	r3, r0
 800a02e:	461a      	mov	r2, r3
 800a030:	4b03      	ldr	r3, [pc, #12]	; (800a040 <MX_FATFS_Init+0x20>)
 800a032:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a034:	bf00      	nop
 800a036:	bd80      	pop	{r7, pc}
 800a038:	240003f0 	.word	0x240003f0
 800a03c:	24000014 	.word	0x24000014
 800a040:	240003ec 	.word	0x240003ec

0800a044 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	4603      	mov	r3, r0
 800a04c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 800a04e:	79fb      	ldrb	r3, [r7, #7]
 800a050:	4618      	mov	r0, r3
 800a052:	f7f6 fce1 	bl	8000a18 <SD_disk_initialize>
 800a056:	4603      	mov	r3, r0
 800a058:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	4603      	mov	r3, r0
 800a06a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	4618      	mov	r0, r3
 800a070:	f7f6 fdbc 	bl	8000bec <SD_disk_status>
 800a074:	4603      	mov	r3, r0
 800a076:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	60b9      	str	r1, [r7, #8]
 800a088:	607a      	str	r2, [r7, #4]
 800a08a:	603b      	str	r3, [r7, #0]
 800a08c:	4603      	mov	r3, r0
 800a08e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 800a090:	7bf8      	ldrb	r0, [r7, #15]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	68b9      	ldr	r1, [r7, #8]
 800a098:	f7f6 fdbe 	bl	8000c18 <SD_disk_read>
 800a09c:	4603      	mov	r3, r0
 800a09e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60b9      	str	r1, [r7, #8]
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	603b      	str	r3, [r7, #0]
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800a0b8:	7bf8      	ldrb	r0, [r7, #15]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	68b9      	ldr	r1, [r7, #8]
 800a0c0:	f7f6 fe14 	bl	8000cec <SD_disk_write>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	603a      	str	r2, [r7, #0]
 800a0da:	71fb      	strb	r3, [r7, #7]
 800a0dc:	460b      	mov	r3, r1
 800a0de:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a0e0:	79fb      	ldrb	r3, [r7, #7]
 800a0e2:	79b9      	ldrb	r1, [r7, #6]
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7f6 fe84 	bl	8000df4 <SD_disk_ioctl>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a106:	2301      	movs	r3, #1
 800a108:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a10e:	4b1f      	ldr	r3, [pc, #124]	; (800a18c <FATFS_LinkDriverEx+0x94>)
 800a110:	7a5b      	ldrb	r3, [r3, #9]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b00      	cmp	r3, #0
 800a116:	d131      	bne.n	800a17c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a118:	4b1c      	ldr	r3, [pc, #112]	; (800a18c <FATFS_LinkDriverEx+0x94>)
 800a11a:	7a5b      	ldrb	r3, [r3, #9]
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	461a      	mov	r2, r3
 800a120:	4b1a      	ldr	r3, [pc, #104]	; (800a18c <FATFS_LinkDriverEx+0x94>)
 800a122:	2100      	movs	r1, #0
 800a124:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a126:	4b19      	ldr	r3, [pc, #100]	; (800a18c <FATFS_LinkDriverEx+0x94>)
 800a128:	7a5b      	ldrb	r3, [r3, #9]
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	4a17      	ldr	r2, [pc, #92]	; (800a18c <FATFS_LinkDriverEx+0x94>)
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a136:	4b15      	ldr	r3, [pc, #84]	; (800a18c <FATFS_LinkDriverEx+0x94>)
 800a138:	7a5b      	ldrb	r3, [r3, #9]
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	461a      	mov	r2, r3
 800a13e:	4b13      	ldr	r3, [pc, #76]	; (800a18c <FATFS_LinkDriverEx+0x94>)
 800a140:	4413      	add	r3, r2
 800a142:	79fa      	ldrb	r2, [r7, #7]
 800a144:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a146:	4b11      	ldr	r3, [pc, #68]	; (800a18c <FATFS_LinkDriverEx+0x94>)
 800a148:	7a5b      	ldrb	r3, [r3, #9]
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	b2d1      	uxtb	r1, r2
 800a150:	4a0e      	ldr	r2, [pc, #56]	; (800a18c <FATFS_LinkDriverEx+0x94>)
 800a152:	7251      	strb	r1, [r2, #9]
 800a154:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a156:	7dbb      	ldrb	r3, [r7, #22]
 800a158:	3330      	adds	r3, #48	; 0x30
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	3301      	adds	r3, #1
 800a164:	223a      	movs	r2, #58	; 0x3a
 800a166:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	3302      	adds	r3, #2
 800a16c:	222f      	movs	r2, #47	; 0x2f
 800a16e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	3303      	adds	r3, #3
 800a174:	2200      	movs	r2, #0
 800a176:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	371c      	adds	r7, #28
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	240003f4 	.word	0x240003f4

0800a190 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a19a:	2200      	movs	r2, #0
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7ff ffaa 	bl	800a0f8 <FATFS_LinkDriverEx>
 800a1a4:	4603      	mov	r3, r0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
	...

0800a1b0 <__errno>:
 800a1b0:	4b01      	ldr	r3, [pc, #4]	; (800a1b8 <__errno+0x8>)
 800a1b2:	6818      	ldr	r0, [r3, #0]
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	24000028 	.word	0x24000028

0800a1bc <__libc_init_array>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	4d0d      	ldr	r5, [pc, #52]	; (800a1f4 <__libc_init_array+0x38>)
 800a1c0:	4c0d      	ldr	r4, [pc, #52]	; (800a1f8 <__libc_init_array+0x3c>)
 800a1c2:	1b64      	subs	r4, r4, r5
 800a1c4:	10a4      	asrs	r4, r4, #2
 800a1c6:	2600      	movs	r6, #0
 800a1c8:	42a6      	cmp	r6, r4
 800a1ca:	d109      	bne.n	800a1e0 <__libc_init_array+0x24>
 800a1cc:	4d0b      	ldr	r5, [pc, #44]	; (800a1fc <__libc_init_array+0x40>)
 800a1ce:	4c0c      	ldr	r4, [pc, #48]	; (800a200 <__libc_init_array+0x44>)
 800a1d0:	f000 fcfc 	bl	800abcc <_init>
 800a1d4:	1b64      	subs	r4, r4, r5
 800a1d6:	10a4      	asrs	r4, r4, #2
 800a1d8:	2600      	movs	r6, #0
 800a1da:	42a6      	cmp	r6, r4
 800a1dc:	d105      	bne.n	800a1ea <__libc_init_array+0x2e>
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1e4:	4798      	blx	r3
 800a1e6:	3601      	adds	r6, #1
 800a1e8:	e7ee      	b.n	800a1c8 <__libc_init_array+0xc>
 800a1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ee:	4798      	blx	r3
 800a1f0:	3601      	adds	r6, #1
 800a1f2:	e7f2      	b.n	800a1da <__libc_init_array+0x1e>
 800a1f4:	0800aef8 	.word	0x0800aef8
 800a1f8:	0800aef8 	.word	0x0800aef8
 800a1fc:	0800aef8 	.word	0x0800aef8
 800a200:	0800aefc 	.word	0x0800aefc

0800a204 <memcpy>:
 800a204:	440a      	add	r2, r1
 800a206:	4291      	cmp	r1, r2
 800a208:	f100 33ff 	add.w	r3, r0, #4294967295
 800a20c:	d100      	bne.n	800a210 <memcpy+0xc>
 800a20e:	4770      	bx	lr
 800a210:	b510      	push	{r4, lr}
 800a212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a21a:	4291      	cmp	r1, r2
 800a21c:	d1f9      	bne.n	800a212 <memcpy+0xe>
 800a21e:	bd10      	pop	{r4, pc}

0800a220 <memset>:
 800a220:	4402      	add	r2, r0
 800a222:	4603      	mov	r3, r0
 800a224:	4293      	cmp	r3, r2
 800a226:	d100      	bne.n	800a22a <memset+0xa>
 800a228:	4770      	bx	lr
 800a22a:	f803 1b01 	strb.w	r1, [r3], #1
 800a22e:	e7f9      	b.n	800a224 <memset+0x4>

0800a230 <sniprintf>:
 800a230:	b40c      	push	{r2, r3}
 800a232:	b530      	push	{r4, r5, lr}
 800a234:	4b17      	ldr	r3, [pc, #92]	; (800a294 <sniprintf+0x64>)
 800a236:	1e0c      	subs	r4, r1, #0
 800a238:	681d      	ldr	r5, [r3, #0]
 800a23a:	b09d      	sub	sp, #116	; 0x74
 800a23c:	da08      	bge.n	800a250 <sniprintf+0x20>
 800a23e:	238b      	movs	r3, #139	; 0x8b
 800a240:	602b      	str	r3, [r5, #0]
 800a242:	f04f 30ff 	mov.w	r0, #4294967295
 800a246:	b01d      	add	sp, #116	; 0x74
 800a248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a24c:	b002      	add	sp, #8
 800a24e:	4770      	bx	lr
 800a250:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a254:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a258:	bf14      	ite	ne
 800a25a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a25e:	4623      	moveq	r3, r4
 800a260:	9304      	str	r3, [sp, #16]
 800a262:	9307      	str	r3, [sp, #28]
 800a264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a268:	9002      	str	r0, [sp, #8]
 800a26a:	9006      	str	r0, [sp, #24]
 800a26c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a270:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a272:	ab21      	add	r3, sp, #132	; 0x84
 800a274:	a902      	add	r1, sp, #8
 800a276:	4628      	mov	r0, r5
 800a278:	9301      	str	r3, [sp, #4]
 800a27a:	f000 f8c3 	bl	800a404 <_svfiprintf_r>
 800a27e:	1c43      	adds	r3, r0, #1
 800a280:	bfbc      	itt	lt
 800a282:	238b      	movlt	r3, #139	; 0x8b
 800a284:	602b      	strlt	r3, [r5, #0]
 800a286:	2c00      	cmp	r4, #0
 800a288:	d0dd      	beq.n	800a246 <sniprintf+0x16>
 800a28a:	9b02      	ldr	r3, [sp, #8]
 800a28c:	2200      	movs	r2, #0
 800a28e:	701a      	strb	r2, [r3, #0]
 800a290:	e7d9      	b.n	800a246 <sniprintf+0x16>
 800a292:	bf00      	nop
 800a294:	24000028 	.word	0x24000028

0800a298 <siprintf>:
 800a298:	b40e      	push	{r1, r2, r3}
 800a29a:	b500      	push	{lr}
 800a29c:	b09c      	sub	sp, #112	; 0x70
 800a29e:	ab1d      	add	r3, sp, #116	; 0x74
 800a2a0:	9002      	str	r0, [sp, #8]
 800a2a2:	9006      	str	r0, [sp, #24]
 800a2a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2a8:	4809      	ldr	r0, [pc, #36]	; (800a2d0 <siprintf+0x38>)
 800a2aa:	9107      	str	r1, [sp, #28]
 800a2ac:	9104      	str	r1, [sp, #16]
 800a2ae:	4909      	ldr	r1, [pc, #36]	; (800a2d4 <siprintf+0x3c>)
 800a2b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2b4:	9105      	str	r1, [sp, #20]
 800a2b6:	6800      	ldr	r0, [r0, #0]
 800a2b8:	9301      	str	r3, [sp, #4]
 800a2ba:	a902      	add	r1, sp, #8
 800a2bc:	f000 f8a2 	bl	800a404 <_svfiprintf_r>
 800a2c0:	9b02      	ldr	r3, [sp, #8]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	701a      	strb	r2, [r3, #0]
 800a2c6:	b01c      	add	sp, #112	; 0x70
 800a2c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2cc:	b003      	add	sp, #12
 800a2ce:	4770      	bx	lr
 800a2d0:	24000028 	.word	0x24000028
 800a2d4:	ffff0208 	.word	0xffff0208

0800a2d8 <_vsniprintf_r>:
 800a2d8:	b530      	push	{r4, r5, lr}
 800a2da:	4614      	mov	r4, r2
 800a2dc:	2c00      	cmp	r4, #0
 800a2de:	b09b      	sub	sp, #108	; 0x6c
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	da05      	bge.n	800a2f2 <_vsniprintf_r+0x1a>
 800a2e6:	238b      	movs	r3, #139	; 0x8b
 800a2e8:	6003      	str	r3, [r0, #0]
 800a2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ee:	b01b      	add	sp, #108	; 0x6c
 800a2f0:	bd30      	pop	{r4, r5, pc}
 800a2f2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a2f6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a2fa:	bf14      	ite	ne
 800a2fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a300:	4623      	moveq	r3, r4
 800a302:	9302      	str	r3, [sp, #8]
 800a304:	9305      	str	r3, [sp, #20]
 800a306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a30a:	9100      	str	r1, [sp, #0]
 800a30c:	9104      	str	r1, [sp, #16]
 800a30e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a312:	4669      	mov	r1, sp
 800a314:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a316:	f000 f875 	bl	800a404 <_svfiprintf_r>
 800a31a:	1c43      	adds	r3, r0, #1
 800a31c:	bfbc      	itt	lt
 800a31e:	238b      	movlt	r3, #139	; 0x8b
 800a320:	602b      	strlt	r3, [r5, #0]
 800a322:	2c00      	cmp	r4, #0
 800a324:	d0e3      	beq.n	800a2ee <_vsniprintf_r+0x16>
 800a326:	9b00      	ldr	r3, [sp, #0]
 800a328:	2200      	movs	r2, #0
 800a32a:	701a      	strb	r2, [r3, #0]
 800a32c:	e7df      	b.n	800a2ee <_vsniprintf_r+0x16>
	...

0800a330 <vsniprintf>:
 800a330:	b507      	push	{r0, r1, r2, lr}
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	4613      	mov	r3, r2
 800a336:	460a      	mov	r2, r1
 800a338:	4601      	mov	r1, r0
 800a33a:	4803      	ldr	r0, [pc, #12]	; (800a348 <vsniprintf+0x18>)
 800a33c:	6800      	ldr	r0, [r0, #0]
 800a33e:	f7ff ffcb 	bl	800a2d8 <_vsniprintf_r>
 800a342:	b003      	add	sp, #12
 800a344:	f85d fb04 	ldr.w	pc, [sp], #4
 800a348:	24000028 	.word	0x24000028

0800a34c <__ssputs_r>:
 800a34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a350:	688e      	ldr	r6, [r1, #8]
 800a352:	429e      	cmp	r6, r3
 800a354:	4682      	mov	sl, r0
 800a356:	460c      	mov	r4, r1
 800a358:	4690      	mov	r8, r2
 800a35a:	461f      	mov	r7, r3
 800a35c:	d838      	bhi.n	800a3d0 <__ssputs_r+0x84>
 800a35e:	898a      	ldrh	r2, [r1, #12]
 800a360:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a364:	d032      	beq.n	800a3cc <__ssputs_r+0x80>
 800a366:	6825      	ldr	r5, [r4, #0]
 800a368:	6909      	ldr	r1, [r1, #16]
 800a36a:	eba5 0901 	sub.w	r9, r5, r1
 800a36e:	6965      	ldr	r5, [r4, #20]
 800a370:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a374:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a378:	3301      	adds	r3, #1
 800a37a:	444b      	add	r3, r9
 800a37c:	106d      	asrs	r5, r5, #1
 800a37e:	429d      	cmp	r5, r3
 800a380:	bf38      	it	cc
 800a382:	461d      	movcc	r5, r3
 800a384:	0553      	lsls	r3, r2, #21
 800a386:	d531      	bpl.n	800a3ec <__ssputs_r+0xa0>
 800a388:	4629      	mov	r1, r5
 800a38a:	f000 fb55 	bl	800aa38 <_malloc_r>
 800a38e:	4606      	mov	r6, r0
 800a390:	b950      	cbnz	r0, 800a3a8 <__ssputs_r+0x5c>
 800a392:	230c      	movs	r3, #12
 800a394:	f8ca 3000 	str.w	r3, [sl]
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a39e:	81a3      	strh	r3, [r4, #12]
 800a3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a8:	6921      	ldr	r1, [r4, #16]
 800a3aa:	464a      	mov	r2, r9
 800a3ac:	f7ff ff2a 	bl	800a204 <memcpy>
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ba:	81a3      	strh	r3, [r4, #12]
 800a3bc:	6126      	str	r6, [r4, #16]
 800a3be:	6165      	str	r5, [r4, #20]
 800a3c0:	444e      	add	r6, r9
 800a3c2:	eba5 0509 	sub.w	r5, r5, r9
 800a3c6:	6026      	str	r6, [r4, #0]
 800a3c8:	60a5      	str	r5, [r4, #8]
 800a3ca:	463e      	mov	r6, r7
 800a3cc:	42be      	cmp	r6, r7
 800a3ce:	d900      	bls.n	800a3d2 <__ssputs_r+0x86>
 800a3d0:	463e      	mov	r6, r7
 800a3d2:	6820      	ldr	r0, [r4, #0]
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	4641      	mov	r1, r8
 800a3d8:	f000 faa8 	bl	800a92c <memmove>
 800a3dc:	68a3      	ldr	r3, [r4, #8]
 800a3de:	1b9b      	subs	r3, r3, r6
 800a3e0:	60a3      	str	r3, [r4, #8]
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	4433      	add	r3, r6
 800a3e6:	6023      	str	r3, [r4, #0]
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	e7db      	b.n	800a3a4 <__ssputs_r+0x58>
 800a3ec:	462a      	mov	r2, r5
 800a3ee:	f000 fb97 	bl	800ab20 <_realloc_r>
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d1e1      	bne.n	800a3bc <__ssputs_r+0x70>
 800a3f8:	6921      	ldr	r1, [r4, #16]
 800a3fa:	4650      	mov	r0, sl
 800a3fc:	f000 fab0 	bl	800a960 <_free_r>
 800a400:	e7c7      	b.n	800a392 <__ssputs_r+0x46>
	...

0800a404 <_svfiprintf_r>:
 800a404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a408:	4698      	mov	r8, r3
 800a40a:	898b      	ldrh	r3, [r1, #12]
 800a40c:	061b      	lsls	r3, r3, #24
 800a40e:	b09d      	sub	sp, #116	; 0x74
 800a410:	4607      	mov	r7, r0
 800a412:	460d      	mov	r5, r1
 800a414:	4614      	mov	r4, r2
 800a416:	d50e      	bpl.n	800a436 <_svfiprintf_r+0x32>
 800a418:	690b      	ldr	r3, [r1, #16]
 800a41a:	b963      	cbnz	r3, 800a436 <_svfiprintf_r+0x32>
 800a41c:	2140      	movs	r1, #64	; 0x40
 800a41e:	f000 fb0b 	bl	800aa38 <_malloc_r>
 800a422:	6028      	str	r0, [r5, #0]
 800a424:	6128      	str	r0, [r5, #16]
 800a426:	b920      	cbnz	r0, 800a432 <_svfiprintf_r+0x2e>
 800a428:	230c      	movs	r3, #12
 800a42a:	603b      	str	r3, [r7, #0]
 800a42c:	f04f 30ff 	mov.w	r0, #4294967295
 800a430:	e0d1      	b.n	800a5d6 <_svfiprintf_r+0x1d2>
 800a432:	2340      	movs	r3, #64	; 0x40
 800a434:	616b      	str	r3, [r5, #20]
 800a436:	2300      	movs	r3, #0
 800a438:	9309      	str	r3, [sp, #36]	; 0x24
 800a43a:	2320      	movs	r3, #32
 800a43c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a440:	f8cd 800c 	str.w	r8, [sp, #12]
 800a444:	2330      	movs	r3, #48	; 0x30
 800a446:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5f0 <_svfiprintf_r+0x1ec>
 800a44a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a44e:	f04f 0901 	mov.w	r9, #1
 800a452:	4623      	mov	r3, r4
 800a454:	469a      	mov	sl, r3
 800a456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a45a:	b10a      	cbz	r2, 800a460 <_svfiprintf_r+0x5c>
 800a45c:	2a25      	cmp	r2, #37	; 0x25
 800a45e:	d1f9      	bne.n	800a454 <_svfiprintf_r+0x50>
 800a460:	ebba 0b04 	subs.w	fp, sl, r4
 800a464:	d00b      	beq.n	800a47e <_svfiprintf_r+0x7a>
 800a466:	465b      	mov	r3, fp
 800a468:	4622      	mov	r2, r4
 800a46a:	4629      	mov	r1, r5
 800a46c:	4638      	mov	r0, r7
 800a46e:	f7ff ff6d 	bl	800a34c <__ssputs_r>
 800a472:	3001      	adds	r0, #1
 800a474:	f000 80aa 	beq.w	800a5cc <_svfiprintf_r+0x1c8>
 800a478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a47a:	445a      	add	r2, fp
 800a47c:	9209      	str	r2, [sp, #36]	; 0x24
 800a47e:	f89a 3000 	ldrb.w	r3, [sl]
 800a482:	2b00      	cmp	r3, #0
 800a484:	f000 80a2 	beq.w	800a5cc <_svfiprintf_r+0x1c8>
 800a488:	2300      	movs	r3, #0
 800a48a:	f04f 32ff 	mov.w	r2, #4294967295
 800a48e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a492:	f10a 0a01 	add.w	sl, sl, #1
 800a496:	9304      	str	r3, [sp, #16]
 800a498:	9307      	str	r3, [sp, #28]
 800a49a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a49e:	931a      	str	r3, [sp, #104]	; 0x68
 800a4a0:	4654      	mov	r4, sl
 800a4a2:	2205      	movs	r2, #5
 800a4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a8:	4851      	ldr	r0, [pc, #324]	; (800a5f0 <_svfiprintf_r+0x1ec>)
 800a4aa:	f7f5 ff29 	bl	8000300 <memchr>
 800a4ae:	9a04      	ldr	r2, [sp, #16]
 800a4b0:	b9d8      	cbnz	r0, 800a4ea <_svfiprintf_r+0xe6>
 800a4b2:	06d0      	lsls	r0, r2, #27
 800a4b4:	bf44      	itt	mi
 800a4b6:	2320      	movmi	r3, #32
 800a4b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4bc:	0711      	lsls	r1, r2, #28
 800a4be:	bf44      	itt	mi
 800a4c0:	232b      	movmi	r3, #43	; 0x2b
 800a4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a4cc:	d015      	beq.n	800a4fa <_svfiprintf_r+0xf6>
 800a4ce:	9a07      	ldr	r2, [sp, #28]
 800a4d0:	4654      	mov	r4, sl
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	f04f 0c0a 	mov.w	ip, #10
 800a4d8:	4621      	mov	r1, r4
 800a4da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4de:	3b30      	subs	r3, #48	; 0x30
 800a4e0:	2b09      	cmp	r3, #9
 800a4e2:	d94e      	bls.n	800a582 <_svfiprintf_r+0x17e>
 800a4e4:	b1b0      	cbz	r0, 800a514 <_svfiprintf_r+0x110>
 800a4e6:	9207      	str	r2, [sp, #28]
 800a4e8:	e014      	b.n	800a514 <_svfiprintf_r+0x110>
 800a4ea:	eba0 0308 	sub.w	r3, r0, r8
 800a4ee:	fa09 f303 	lsl.w	r3, r9, r3
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	9304      	str	r3, [sp, #16]
 800a4f6:	46a2      	mov	sl, r4
 800a4f8:	e7d2      	b.n	800a4a0 <_svfiprintf_r+0x9c>
 800a4fa:	9b03      	ldr	r3, [sp, #12]
 800a4fc:	1d19      	adds	r1, r3, #4
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	9103      	str	r1, [sp, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	bfbb      	ittet	lt
 800a506:	425b      	neglt	r3, r3
 800a508:	f042 0202 	orrlt.w	r2, r2, #2
 800a50c:	9307      	strge	r3, [sp, #28]
 800a50e:	9307      	strlt	r3, [sp, #28]
 800a510:	bfb8      	it	lt
 800a512:	9204      	strlt	r2, [sp, #16]
 800a514:	7823      	ldrb	r3, [r4, #0]
 800a516:	2b2e      	cmp	r3, #46	; 0x2e
 800a518:	d10c      	bne.n	800a534 <_svfiprintf_r+0x130>
 800a51a:	7863      	ldrb	r3, [r4, #1]
 800a51c:	2b2a      	cmp	r3, #42	; 0x2a
 800a51e:	d135      	bne.n	800a58c <_svfiprintf_r+0x188>
 800a520:	9b03      	ldr	r3, [sp, #12]
 800a522:	1d1a      	adds	r2, r3, #4
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	9203      	str	r2, [sp, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	bfb8      	it	lt
 800a52c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a530:	3402      	adds	r4, #2
 800a532:	9305      	str	r3, [sp, #20]
 800a534:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a600 <_svfiprintf_r+0x1fc>
 800a538:	7821      	ldrb	r1, [r4, #0]
 800a53a:	2203      	movs	r2, #3
 800a53c:	4650      	mov	r0, sl
 800a53e:	f7f5 fedf 	bl	8000300 <memchr>
 800a542:	b140      	cbz	r0, 800a556 <_svfiprintf_r+0x152>
 800a544:	2340      	movs	r3, #64	; 0x40
 800a546:	eba0 000a 	sub.w	r0, r0, sl
 800a54a:	fa03 f000 	lsl.w	r0, r3, r0
 800a54e:	9b04      	ldr	r3, [sp, #16]
 800a550:	4303      	orrs	r3, r0
 800a552:	3401      	adds	r4, #1
 800a554:	9304      	str	r3, [sp, #16]
 800a556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55a:	4826      	ldr	r0, [pc, #152]	; (800a5f4 <_svfiprintf_r+0x1f0>)
 800a55c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a560:	2206      	movs	r2, #6
 800a562:	f7f5 fecd 	bl	8000300 <memchr>
 800a566:	2800      	cmp	r0, #0
 800a568:	d038      	beq.n	800a5dc <_svfiprintf_r+0x1d8>
 800a56a:	4b23      	ldr	r3, [pc, #140]	; (800a5f8 <_svfiprintf_r+0x1f4>)
 800a56c:	bb1b      	cbnz	r3, 800a5b6 <_svfiprintf_r+0x1b2>
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	3307      	adds	r3, #7
 800a572:	f023 0307 	bic.w	r3, r3, #7
 800a576:	3308      	adds	r3, #8
 800a578:	9303      	str	r3, [sp, #12]
 800a57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57c:	4433      	add	r3, r6
 800a57e:	9309      	str	r3, [sp, #36]	; 0x24
 800a580:	e767      	b.n	800a452 <_svfiprintf_r+0x4e>
 800a582:	fb0c 3202 	mla	r2, ip, r2, r3
 800a586:	460c      	mov	r4, r1
 800a588:	2001      	movs	r0, #1
 800a58a:	e7a5      	b.n	800a4d8 <_svfiprintf_r+0xd4>
 800a58c:	2300      	movs	r3, #0
 800a58e:	3401      	adds	r4, #1
 800a590:	9305      	str	r3, [sp, #20]
 800a592:	4619      	mov	r1, r3
 800a594:	f04f 0c0a 	mov.w	ip, #10
 800a598:	4620      	mov	r0, r4
 800a59a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a59e:	3a30      	subs	r2, #48	; 0x30
 800a5a0:	2a09      	cmp	r2, #9
 800a5a2:	d903      	bls.n	800a5ac <_svfiprintf_r+0x1a8>
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d0c5      	beq.n	800a534 <_svfiprintf_r+0x130>
 800a5a8:	9105      	str	r1, [sp, #20]
 800a5aa:	e7c3      	b.n	800a534 <_svfiprintf_r+0x130>
 800a5ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e7f0      	b.n	800a598 <_svfiprintf_r+0x194>
 800a5b6:	ab03      	add	r3, sp, #12
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	462a      	mov	r2, r5
 800a5bc:	4b0f      	ldr	r3, [pc, #60]	; (800a5fc <_svfiprintf_r+0x1f8>)
 800a5be:	a904      	add	r1, sp, #16
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	f3af 8000 	nop.w
 800a5c6:	1c42      	adds	r2, r0, #1
 800a5c8:	4606      	mov	r6, r0
 800a5ca:	d1d6      	bne.n	800a57a <_svfiprintf_r+0x176>
 800a5cc:	89ab      	ldrh	r3, [r5, #12]
 800a5ce:	065b      	lsls	r3, r3, #25
 800a5d0:	f53f af2c 	bmi.w	800a42c <_svfiprintf_r+0x28>
 800a5d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5d6:	b01d      	add	sp, #116	; 0x74
 800a5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5dc:	ab03      	add	r3, sp, #12
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	462a      	mov	r2, r5
 800a5e2:	4b06      	ldr	r3, [pc, #24]	; (800a5fc <_svfiprintf_r+0x1f8>)
 800a5e4:	a904      	add	r1, sp, #16
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f000 f87a 	bl	800a6e0 <_printf_i>
 800a5ec:	e7eb      	b.n	800a5c6 <_svfiprintf_r+0x1c2>
 800a5ee:	bf00      	nop
 800a5f0:	0800aebc 	.word	0x0800aebc
 800a5f4:	0800aec6 	.word	0x0800aec6
 800a5f8:	00000000 	.word	0x00000000
 800a5fc:	0800a34d 	.word	0x0800a34d
 800a600:	0800aec2 	.word	0x0800aec2

0800a604 <_printf_common>:
 800a604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a608:	4616      	mov	r6, r2
 800a60a:	4699      	mov	r9, r3
 800a60c:	688a      	ldr	r2, [r1, #8]
 800a60e:	690b      	ldr	r3, [r1, #16]
 800a610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a614:	4293      	cmp	r3, r2
 800a616:	bfb8      	it	lt
 800a618:	4613      	movlt	r3, r2
 800a61a:	6033      	str	r3, [r6, #0]
 800a61c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a620:	4607      	mov	r7, r0
 800a622:	460c      	mov	r4, r1
 800a624:	b10a      	cbz	r2, 800a62a <_printf_common+0x26>
 800a626:	3301      	adds	r3, #1
 800a628:	6033      	str	r3, [r6, #0]
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	0699      	lsls	r1, r3, #26
 800a62e:	bf42      	ittt	mi
 800a630:	6833      	ldrmi	r3, [r6, #0]
 800a632:	3302      	addmi	r3, #2
 800a634:	6033      	strmi	r3, [r6, #0]
 800a636:	6825      	ldr	r5, [r4, #0]
 800a638:	f015 0506 	ands.w	r5, r5, #6
 800a63c:	d106      	bne.n	800a64c <_printf_common+0x48>
 800a63e:	f104 0a19 	add.w	sl, r4, #25
 800a642:	68e3      	ldr	r3, [r4, #12]
 800a644:	6832      	ldr	r2, [r6, #0]
 800a646:	1a9b      	subs	r3, r3, r2
 800a648:	42ab      	cmp	r3, r5
 800a64a:	dc26      	bgt.n	800a69a <_printf_common+0x96>
 800a64c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a650:	1e13      	subs	r3, r2, #0
 800a652:	6822      	ldr	r2, [r4, #0]
 800a654:	bf18      	it	ne
 800a656:	2301      	movne	r3, #1
 800a658:	0692      	lsls	r2, r2, #26
 800a65a:	d42b      	bmi.n	800a6b4 <_printf_common+0xb0>
 800a65c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a660:	4649      	mov	r1, r9
 800a662:	4638      	mov	r0, r7
 800a664:	47c0      	blx	r8
 800a666:	3001      	adds	r0, #1
 800a668:	d01e      	beq.n	800a6a8 <_printf_common+0xa4>
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	68e5      	ldr	r5, [r4, #12]
 800a66e:	6832      	ldr	r2, [r6, #0]
 800a670:	f003 0306 	and.w	r3, r3, #6
 800a674:	2b04      	cmp	r3, #4
 800a676:	bf08      	it	eq
 800a678:	1aad      	subeq	r5, r5, r2
 800a67a:	68a3      	ldr	r3, [r4, #8]
 800a67c:	6922      	ldr	r2, [r4, #16]
 800a67e:	bf0c      	ite	eq
 800a680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a684:	2500      	movne	r5, #0
 800a686:	4293      	cmp	r3, r2
 800a688:	bfc4      	itt	gt
 800a68a:	1a9b      	subgt	r3, r3, r2
 800a68c:	18ed      	addgt	r5, r5, r3
 800a68e:	2600      	movs	r6, #0
 800a690:	341a      	adds	r4, #26
 800a692:	42b5      	cmp	r5, r6
 800a694:	d11a      	bne.n	800a6cc <_printf_common+0xc8>
 800a696:	2000      	movs	r0, #0
 800a698:	e008      	b.n	800a6ac <_printf_common+0xa8>
 800a69a:	2301      	movs	r3, #1
 800a69c:	4652      	mov	r2, sl
 800a69e:	4649      	mov	r1, r9
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	47c0      	blx	r8
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	d103      	bne.n	800a6b0 <_printf_common+0xac>
 800a6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b0:	3501      	adds	r5, #1
 800a6b2:	e7c6      	b.n	800a642 <_printf_common+0x3e>
 800a6b4:	18e1      	adds	r1, r4, r3
 800a6b6:	1c5a      	adds	r2, r3, #1
 800a6b8:	2030      	movs	r0, #48	; 0x30
 800a6ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6be:	4422      	add	r2, r4
 800a6c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6c8:	3302      	adds	r3, #2
 800a6ca:	e7c7      	b.n	800a65c <_printf_common+0x58>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	4622      	mov	r2, r4
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	4638      	mov	r0, r7
 800a6d4:	47c0      	blx	r8
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	d0e6      	beq.n	800a6a8 <_printf_common+0xa4>
 800a6da:	3601      	adds	r6, #1
 800a6dc:	e7d9      	b.n	800a692 <_printf_common+0x8e>
	...

0800a6e0 <_printf_i>:
 800a6e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e4:	7e0f      	ldrb	r7, [r1, #24]
 800a6e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6e8:	2f78      	cmp	r7, #120	; 0x78
 800a6ea:	4691      	mov	r9, r2
 800a6ec:	4680      	mov	r8, r0
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	469a      	mov	sl, r3
 800a6f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6f6:	d807      	bhi.n	800a708 <_printf_i+0x28>
 800a6f8:	2f62      	cmp	r7, #98	; 0x62
 800a6fa:	d80a      	bhi.n	800a712 <_printf_i+0x32>
 800a6fc:	2f00      	cmp	r7, #0
 800a6fe:	f000 80d8 	beq.w	800a8b2 <_printf_i+0x1d2>
 800a702:	2f58      	cmp	r7, #88	; 0x58
 800a704:	f000 80a3 	beq.w	800a84e <_printf_i+0x16e>
 800a708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a70c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a710:	e03a      	b.n	800a788 <_printf_i+0xa8>
 800a712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a716:	2b15      	cmp	r3, #21
 800a718:	d8f6      	bhi.n	800a708 <_printf_i+0x28>
 800a71a:	a101      	add	r1, pc, #4	; (adr r1, 800a720 <_printf_i+0x40>)
 800a71c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a720:	0800a779 	.word	0x0800a779
 800a724:	0800a78d 	.word	0x0800a78d
 800a728:	0800a709 	.word	0x0800a709
 800a72c:	0800a709 	.word	0x0800a709
 800a730:	0800a709 	.word	0x0800a709
 800a734:	0800a709 	.word	0x0800a709
 800a738:	0800a78d 	.word	0x0800a78d
 800a73c:	0800a709 	.word	0x0800a709
 800a740:	0800a709 	.word	0x0800a709
 800a744:	0800a709 	.word	0x0800a709
 800a748:	0800a709 	.word	0x0800a709
 800a74c:	0800a899 	.word	0x0800a899
 800a750:	0800a7bd 	.word	0x0800a7bd
 800a754:	0800a87b 	.word	0x0800a87b
 800a758:	0800a709 	.word	0x0800a709
 800a75c:	0800a709 	.word	0x0800a709
 800a760:	0800a8bb 	.word	0x0800a8bb
 800a764:	0800a709 	.word	0x0800a709
 800a768:	0800a7bd 	.word	0x0800a7bd
 800a76c:	0800a709 	.word	0x0800a709
 800a770:	0800a709 	.word	0x0800a709
 800a774:	0800a883 	.word	0x0800a883
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	1d1a      	adds	r2, r3, #4
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	602a      	str	r2, [r5, #0]
 800a780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a788:	2301      	movs	r3, #1
 800a78a:	e0a3      	b.n	800a8d4 <_printf_i+0x1f4>
 800a78c:	6820      	ldr	r0, [r4, #0]
 800a78e:	6829      	ldr	r1, [r5, #0]
 800a790:	0606      	lsls	r6, r0, #24
 800a792:	f101 0304 	add.w	r3, r1, #4
 800a796:	d50a      	bpl.n	800a7ae <_printf_i+0xce>
 800a798:	680e      	ldr	r6, [r1, #0]
 800a79a:	602b      	str	r3, [r5, #0]
 800a79c:	2e00      	cmp	r6, #0
 800a79e:	da03      	bge.n	800a7a8 <_printf_i+0xc8>
 800a7a0:	232d      	movs	r3, #45	; 0x2d
 800a7a2:	4276      	negs	r6, r6
 800a7a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7a8:	485e      	ldr	r0, [pc, #376]	; (800a924 <_printf_i+0x244>)
 800a7aa:	230a      	movs	r3, #10
 800a7ac:	e019      	b.n	800a7e2 <_printf_i+0x102>
 800a7ae:	680e      	ldr	r6, [r1, #0]
 800a7b0:	602b      	str	r3, [r5, #0]
 800a7b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a7b6:	bf18      	it	ne
 800a7b8:	b236      	sxthne	r6, r6
 800a7ba:	e7ef      	b.n	800a79c <_printf_i+0xbc>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	6820      	ldr	r0, [r4, #0]
 800a7c0:	1d19      	adds	r1, r3, #4
 800a7c2:	6029      	str	r1, [r5, #0]
 800a7c4:	0601      	lsls	r1, r0, #24
 800a7c6:	d501      	bpl.n	800a7cc <_printf_i+0xec>
 800a7c8:	681e      	ldr	r6, [r3, #0]
 800a7ca:	e002      	b.n	800a7d2 <_printf_i+0xf2>
 800a7cc:	0646      	lsls	r6, r0, #25
 800a7ce:	d5fb      	bpl.n	800a7c8 <_printf_i+0xe8>
 800a7d0:	881e      	ldrh	r6, [r3, #0]
 800a7d2:	4854      	ldr	r0, [pc, #336]	; (800a924 <_printf_i+0x244>)
 800a7d4:	2f6f      	cmp	r7, #111	; 0x6f
 800a7d6:	bf0c      	ite	eq
 800a7d8:	2308      	moveq	r3, #8
 800a7da:	230a      	movne	r3, #10
 800a7dc:	2100      	movs	r1, #0
 800a7de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7e2:	6865      	ldr	r5, [r4, #4]
 800a7e4:	60a5      	str	r5, [r4, #8]
 800a7e6:	2d00      	cmp	r5, #0
 800a7e8:	bfa2      	ittt	ge
 800a7ea:	6821      	ldrge	r1, [r4, #0]
 800a7ec:	f021 0104 	bicge.w	r1, r1, #4
 800a7f0:	6021      	strge	r1, [r4, #0]
 800a7f2:	b90e      	cbnz	r6, 800a7f8 <_printf_i+0x118>
 800a7f4:	2d00      	cmp	r5, #0
 800a7f6:	d04d      	beq.n	800a894 <_printf_i+0x1b4>
 800a7f8:	4615      	mov	r5, r2
 800a7fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7fe:	fb03 6711 	mls	r7, r3, r1, r6
 800a802:	5dc7      	ldrb	r7, [r0, r7]
 800a804:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a808:	4637      	mov	r7, r6
 800a80a:	42bb      	cmp	r3, r7
 800a80c:	460e      	mov	r6, r1
 800a80e:	d9f4      	bls.n	800a7fa <_printf_i+0x11a>
 800a810:	2b08      	cmp	r3, #8
 800a812:	d10b      	bne.n	800a82c <_printf_i+0x14c>
 800a814:	6823      	ldr	r3, [r4, #0]
 800a816:	07de      	lsls	r6, r3, #31
 800a818:	d508      	bpl.n	800a82c <_printf_i+0x14c>
 800a81a:	6923      	ldr	r3, [r4, #16]
 800a81c:	6861      	ldr	r1, [r4, #4]
 800a81e:	4299      	cmp	r1, r3
 800a820:	bfde      	ittt	le
 800a822:	2330      	movle	r3, #48	; 0x30
 800a824:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a828:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a82c:	1b52      	subs	r2, r2, r5
 800a82e:	6122      	str	r2, [r4, #16]
 800a830:	f8cd a000 	str.w	sl, [sp]
 800a834:	464b      	mov	r3, r9
 800a836:	aa03      	add	r2, sp, #12
 800a838:	4621      	mov	r1, r4
 800a83a:	4640      	mov	r0, r8
 800a83c:	f7ff fee2 	bl	800a604 <_printf_common>
 800a840:	3001      	adds	r0, #1
 800a842:	d14c      	bne.n	800a8de <_printf_i+0x1fe>
 800a844:	f04f 30ff 	mov.w	r0, #4294967295
 800a848:	b004      	add	sp, #16
 800a84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84e:	4835      	ldr	r0, [pc, #212]	; (800a924 <_printf_i+0x244>)
 800a850:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a854:	6829      	ldr	r1, [r5, #0]
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	f851 6b04 	ldr.w	r6, [r1], #4
 800a85c:	6029      	str	r1, [r5, #0]
 800a85e:	061d      	lsls	r5, r3, #24
 800a860:	d514      	bpl.n	800a88c <_printf_i+0x1ac>
 800a862:	07df      	lsls	r7, r3, #31
 800a864:	bf44      	itt	mi
 800a866:	f043 0320 	orrmi.w	r3, r3, #32
 800a86a:	6023      	strmi	r3, [r4, #0]
 800a86c:	b91e      	cbnz	r6, 800a876 <_printf_i+0x196>
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	f023 0320 	bic.w	r3, r3, #32
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	2310      	movs	r3, #16
 800a878:	e7b0      	b.n	800a7dc <_printf_i+0xfc>
 800a87a:	6823      	ldr	r3, [r4, #0]
 800a87c:	f043 0320 	orr.w	r3, r3, #32
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	2378      	movs	r3, #120	; 0x78
 800a884:	4828      	ldr	r0, [pc, #160]	; (800a928 <_printf_i+0x248>)
 800a886:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a88a:	e7e3      	b.n	800a854 <_printf_i+0x174>
 800a88c:	0659      	lsls	r1, r3, #25
 800a88e:	bf48      	it	mi
 800a890:	b2b6      	uxthmi	r6, r6
 800a892:	e7e6      	b.n	800a862 <_printf_i+0x182>
 800a894:	4615      	mov	r5, r2
 800a896:	e7bb      	b.n	800a810 <_printf_i+0x130>
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	6826      	ldr	r6, [r4, #0]
 800a89c:	6961      	ldr	r1, [r4, #20]
 800a89e:	1d18      	adds	r0, r3, #4
 800a8a0:	6028      	str	r0, [r5, #0]
 800a8a2:	0635      	lsls	r5, r6, #24
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	d501      	bpl.n	800a8ac <_printf_i+0x1cc>
 800a8a8:	6019      	str	r1, [r3, #0]
 800a8aa:	e002      	b.n	800a8b2 <_printf_i+0x1d2>
 800a8ac:	0670      	lsls	r0, r6, #25
 800a8ae:	d5fb      	bpl.n	800a8a8 <_printf_i+0x1c8>
 800a8b0:	8019      	strh	r1, [r3, #0]
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	6123      	str	r3, [r4, #16]
 800a8b6:	4615      	mov	r5, r2
 800a8b8:	e7ba      	b.n	800a830 <_printf_i+0x150>
 800a8ba:	682b      	ldr	r3, [r5, #0]
 800a8bc:	1d1a      	adds	r2, r3, #4
 800a8be:	602a      	str	r2, [r5, #0]
 800a8c0:	681d      	ldr	r5, [r3, #0]
 800a8c2:	6862      	ldr	r2, [r4, #4]
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f7f5 fd1a 	bl	8000300 <memchr>
 800a8cc:	b108      	cbz	r0, 800a8d2 <_printf_i+0x1f2>
 800a8ce:	1b40      	subs	r0, r0, r5
 800a8d0:	6060      	str	r0, [r4, #4]
 800a8d2:	6863      	ldr	r3, [r4, #4]
 800a8d4:	6123      	str	r3, [r4, #16]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8dc:	e7a8      	b.n	800a830 <_printf_i+0x150>
 800a8de:	6923      	ldr	r3, [r4, #16]
 800a8e0:	462a      	mov	r2, r5
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	47d0      	blx	sl
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d0ab      	beq.n	800a844 <_printf_i+0x164>
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	079b      	lsls	r3, r3, #30
 800a8f0:	d413      	bmi.n	800a91a <_printf_i+0x23a>
 800a8f2:	68e0      	ldr	r0, [r4, #12]
 800a8f4:	9b03      	ldr	r3, [sp, #12]
 800a8f6:	4298      	cmp	r0, r3
 800a8f8:	bfb8      	it	lt
 800a8fa:	4618      	movlt	r0, r3
 800a8fc:	e7a4      	b.n	800a848 <_printf_i+0x168>
 800a8fe:	2301      	movs	r3, #1
 800a900:	4632      	mov	r2, r6
 800a902:	4649      	mov	r1, r9
 800a904:	4640      	mov	r0, r8
 800a906:	47d0      	blx	sl
 800a908:	3001      	adds	r0, #1
 800a90a:	d09b      	beq.n	800a844 <_printf_i+0x164>
 800a90c:	3501      	adds	r5, #1
 800a90e:	68e3      	ldr	r3, [r4, #12]
 800a910:	9903      	ldr	r1, [sp, #12]
 800a912:	1a5b      	subs	r3, r3, r1
 800a914:	42ab      	cmp	r3, r5
 800a916:	dcf2      	bgt.n	800a8fe <_printf_i+0x21e>
 800a918:	e7eb      	b.n	800a8f2 <_printf_i+0x212>
 800a91a:	2500      	movs	r5, #0
 800a91c:	f104 0619 	add.w	r6, r4, #25
 800a920:	e7f5      	b.n	800a90e <_printf_i+0x22e>
 800a922:	bf00      	nop
 800a924:	0800aecd 	.word	0x0800aecd
 800a928:	0800aede 	.word	0x0800aede

0800a92c <memmove>:
 800a92c:	4288      	cmp	r0, r1
 800a92e:	b510      	push	{r4, lr}
 800a930:	eb01 0402 	add.w	r4, r1, r2
 800a934:	d902      	bls.n	800a93c <memmove+0x10>
 800a936:	4284      	cmp	r4, r0
 800a938:	4623      	mov	r3, r4
 800a93a:	d807      	bhi.n	800a94c <memmove+0x20>
 800a93c:	1e43      	subs	r3, r0, #1
 800a93e:	42a1      	cmp	r1, r4
 800a940:	d008      	beq.n	800a954 <memmove+0x28>
 800a942:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a946:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a94a:	e7f8      	b.n	800a93e <memmove+0x12>
 800a94c:	4402      	add	r2, r0
 800a94e:	4601      	mov	r1, r0
 800a950:	428a      	cmp	r2, r1
 800a952:	d100      	bne.n	800a956 <memmove+0x2a>
 800a954:	bd10      	pop	{r4, pc}
 800a956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a95a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a95e:	e7f7      	b.n	800a950 <memmove+0x24>

0800a960 <_free_r>:
 800a960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a962:	2900      	cmp	r1, #0
 800a964:	d044      	beq.n	800a9f0 <_free_r+0x90>
 800a966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a96a:	9001      	str	r0, [sp, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f1a1 0404 	sub.w	r4, r1, #4
 800a972:	bfb8      	it	lt
 800a974:	18e4      	addlt	r4, r4, r3
 800a976:	f000 f913 	bl	800aba0 <__malloc_lock>
 800a97a:	4a1e      	ldr	r2, [pc, #120]	; (800a9f4 <_free_r+0x94>)
 800a97c:	9801      	ldr	r0, [sp, #4]
 800a97e:	6813      	ldr	r3, [r2, #0]
 800a980:	b933      	cbnz	r3, 800a990 <_free_r+0x30>
 800a982:	6063      	str	r3, [r4, #4]
 800a984:	6014      	str	r4, [r2, #0]
 800a986:	b003      	add	sp, #12
 800a988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a98c:	f000 b90e 	b.w	800abac <__malloc_unlock>
 800a990:	42a3      	cmp	r3, r4
 800a992:	d908      	bls.n	800a9a6 <_free_r+0x46>
 800a994:	6825      	ldr	r5, [r4, #0]
 800a996:	1961      	adds	r1, r4, r5
 800a998:	428b      	cmp	r3, r1
 800a99a:	bf01      	itttt	eq
 800a99c:	6819      	ldreq	r1, [r3, #0]
 800a99e:	685b      	ldreq	r3, [r3, #4]
 800a9a0:	1949      	addeq	r1, r1, r5
 800a9a2:	6021      	streq	r1, [r4, #0]
 800a9a4:	e7ed      	b.n	800a982 <_free_r+0x22>
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	b10b      	cbz	r3, 800a9b0 <_free_r+0x50>
 800a9ac:	42a3      	cmp	r3, r4
 800a9ae:	d9fa      	bls.n	800a9a6 <_free_r+0x46>
 800a9b0:	6811      	ldr	r1, [r2, #0]
 800a9b2:	1855      	adds	r5, r2, r1
 800a9b4:	42a5      	cmp	r5, r4
 800a9b6:	d10b      	bne.n	800a9d0 <_free_r+0x70>
 800a9b8:	6824      	ldr	r4, [r4, #0]
 800a9ba:	4421      	add	r1, r4
 800a9bc:	1854      	adds	r4, r2, r1
 800a9be:	42a3      	cmp	r3, r4
 800a9c0:	6011      	str	r1, [r2, #0]
 800a9c2:	d1e0      	bne.n	800a986 <_free_r+0x26>
 800a9c4:	681c      	ldr	r4, [r3, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	6053      	str	r3, [r2, #4]
 800a9ca:	4421      	add	r1, r4
 800a9cc:	6011      	str	r1, [r2, #0]
 800a9ce:	e7da      	b.n	800a986 <_free_r+0x26>
 800a9d0:	d902      	bls.n	800a9d8 <_free_r+0x78>
 800a9d2:	230c      	movs	r3, #12
 800a9d4:	6003      	str	r3, [r0, #0]
 800a9d6:	e7d6      	b.n	800a986 <_free_r+0x26>
 800a9d8:	6825      	ldr	r5, [r4, #0]
 800a9da:	1961      	adds	r1, r4, r5
 800a9dc:	428b      	cmp	r3, r1
 800a9de:	bf04      	itt	eq
 800a9e0:	6819      	ldreq	r1, [r3, #0]
 800a9e2:	685b      	ldreq	r3, [r3, #4]
 800a9e4:	6063      	str	r3, [r4, #4]
 800a9e6:	bf04      	itt	eq
 800a9e8:	1949      	addeq	r1, r1, r5
 800a9ea:	6021      	streq	r1, [r4, #0]
 800a9ec:	6054      	str	r4, [r2, #4]
 800a9ee:	e7ca      	b.n	800a986 <_free_r+0x26>
 800a9f0:	b003      	add	sp, #12
 800a9f2:	bd30      	pop	{r4, r5, pc}
 800a9f4:	24000400 	.word	0x24000400

0800a9f8 <sbrk_aligned>:
 800a9f8:	b570      	push	{r4, r5, r6, lr}
 800a9fa:	4e0e      	ldr	r6, [pc, #56]	; (800aa34 <sbrk_aligned+0x3c>)
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	6831      	ldr	r1, [r6, #0]
 800aa00:	4605      	mov	r5, r0
 800aa02:	b911      	cbnz	r1, 800aa0a <sbrk_aligned+0x12>
 800aa04:	f000 f8bc 	bl	800ab80 <_sbrk_r>
 800aa08:	6030      	str	r0, [r6, #0]
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	f000 f8b7 	bl	800ab80 <_sbrk_r>
 800aa12:	1c43      	adds	r3, r0, #1
 800aa14:	d00a      	beq.n	800aa2c <sbrk_aligned+0x34>
 800aa16:	1cc4      	adds	r4, r0, #3
 800aa18:	f024 0403 	bic.w	r4, r4, #3
 800aa1c:	42a0      	cmp	r0, r4
 800aa1e:	d007      	beq.n	800aa30 <sbrk_aligned+0x38>
 800aa20:	1a21      	subs	r1, r4, r0
 800aa22:	4628      	mov	r0, r5
 800aa24:	f000 f8ac 	bl	800ab80 <_sbrk_r>
 800aa28:	3001      	adds	r0, #1
 800aa2a:	d101      	bne.n	800aa30 <sbrk_aligned+0x38>
 800aa2c:	f04f 34ff 	mov.w	r4, #4294967295
 800aa30:	4620      	mov	r0, r4
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	24000404 	.word	0x24000404

0800aa38 <_malloc_r>:
 800aa38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa3c:	1ccd      	adds	r5, r1, #3
 800aa3e:	f025 0503 	bic.w	r5, r5, #3
 800aa42:	3508      	adds	r5, #8
 800aa44:	2d0c      	cmp	r5, #12
 800aa46:	bf38      	it	cc
 800aa48:	250c      	movcc	r5, #12
 800aa4a:	2d00      	cmp	r5, #0
 800aa4c:	4607      	mov	r7, r0
 800aa4e:	db01      	blt.n	800aa54 <_malloc_r+0x1c>
 800aa50:	42a9      	cmp	r1, r5
 800aa52:	d905      	bls.n	800aa60 <_malloc_r+0x28>
 800aa54:	230c      	movs	r3, #12
 800aa56:	603b      	str	r3, [r7, #0]
 800aa58:	2600      	movs	r6, #0
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa60:	4e2e      	ldr	r6, [pc, #184]	; (800ab1c <_malloc_r+0xe4>)
 800aa62:	f000 f89d 	bl	800aba0 <__malloc_lock>
 800aa66:	6833      	ldr	r3, [r6, #0]
 800aa68:	461c      	mov	r4, r3
 800aa6a:	bb34      	cbnz	r4, 800aaba <_malloc_r+0x82>
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	4638      	mov	r0, r7
 800aa70:	f7ff ffc2 	bl	800a9f8 <sbrk_aligned>
 800aa74:	1c43      	adds	r3, r0, #1
 800aa76:	4604      	mov	r4, r0
 800aa78:	d14d      	bne.n	800ab16 <_malloc_r+0xde>
 800aa7a:	6834      	ldr	r4, [r6, #0]
 800aa7c:	4626      	mov	r6, r4
 800aa7e:	2e00      	cmp	r6, #0
 800aa80:	d140      	bne.n	800ab04 <_malloc_r+0xcc>
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	4631      	mov	r1, r6
 800aa86:	4638      	mov	r0, r7
 800aa88:	eb04 0803 	add.w	r8, r4, r3
 800aa8c:	f000 f878 	bl	800ab80 <_sbrk_r>
 800aa90:	4580      	cmp	r8, r0
 800aa92:	d13a      	bne.n	800ab0a <_malloc_r+0xd2>
 800aa94:	6821      	ldr	r1, [r4, #0]
 800aa96:	3503      	adds	r5, #3
 800aa98:	1a6d      	subs	r5, r5, r1
 800aa9a:	f025 0503 	bic.w	r5, r5, #3
 800aa9e:	3508      	adds	r5, #8
 800aaa0:	2d0c      	cmp	r5, #12
 800aaa2:	bf38      	it	cc
 800aaa4:	250c      	movcc	r5, #12
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	4638      	mov	r0, r7
 800aaaa:	f7ff ffa5 	bl	800a9f8 <sbrk_aligned>
 800aaae:	3001      	adds	r0, #1
 800aab0:	d02b      	beq.n	800ab0a <_malloc_r+0xd2>
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	442b      	add	r3, r5
 800aab6:	6023      	str	r3, [r4, #0]
 800aab8:	e00e      	b.n	800aad8 <_malloc_r+0xa0>
 800aaba:	6822      	ldr	r2, [r4, #0]
 800aabc:	1b52      	subs	r2, r2, r5
 800aabe:	d41e      	bmi.n	800aafe <_malloc_r+0xc6>
 800aac0:	2a0b      	cmp	r2, #11
 800aac2:	d916      	bls.n	800aaf2 <_malloc_r+0xba>
 800aac4:	1961      	adds	r1, r4, r5
 800aac6:	42a3      	cmp	r3, r4
 800aac8:	6025      	str	r5, [r4, #0]
 800aaca:	bf18      	it	ne
 800aacc:	6059      	strne	r1, [r3, #4]
 800aace:	6863      	ldr	r3, [r4, #4]
 800aad0:	bf08      	it	eq
 800aad2:	6031      	streq	r1, [r6, #0]
 800aad4:	5162      	str	r2, [r4, r5]
 800aad6:	604b      	str	r3, [r1, #4]
 800aad8:	4638      	mov	r0, r7
 800aada:	f104 060b 	add.w	r6, r4, #11
 800aade:	f000 f865 	bl	800abac <__malloc_unlock>
 800aae2:	f026 0607 	bic.w	r6, r6, #7
 800aae6:	1d23      	adds	r3, r4, #4
 800aae8:	1af2      	subs	r2, r6, r3
 800aaea:	d0b6      	beq.n	800aa5a <_malloc_r+0x22>
 800aaec:	1b9b      	subs	r3, r3, r6
 800aaee:	50a3      	str	r3, [r4, r2]
 800aaf0:	e7b3      	b.n	800aa5a <_malloc_r+0x22>
 800aaf2:	6862      	ldr	r2, [r4, #4]
 800aaf4:	42a3      	cmp	r3, r4
 800aaf6:	bf0c      	ite	eq
 800aaf8:	6032      	streq	r2, [r6, #0]
 800aafa:	605a      	strne	r2, [r3, #4]
 800aafc:	e7ec      	b.n	800aad8 <_malloc_r+0xa0>
 800aafe:	4623      	mov	r3, r4
 800ab00:	6864      	ldr	r4, [r4, #4]
 800ab02:	e7b2      	b.n	800aa6a <_malloc_r+0x32>
 800ab04:	4634      	mov	r4, r6
 800ab06:	6876      	ldr	r6, [r6, #4]
 800ab08:	e7b9      	b.n	800aa7e <_malloc_r+0x46>
 800ab0a:	230c      	movs	r3, #12
 800ab0c:	603b      	str	r3, [r7, #0]
 800ab0e:	4638      	mov	r0, r7
 800ab10:	f000 f84c 	bl	800abac <__malloc_unlock>
 800ab14:	e7a1      	b.n	800aa5a <_malloc_r+0x22>
 800ab16:	6025      	str	r5, [r4, #0]
 800ab18:	e7de      	b.n	800aad8 <_malloc_r+0xa0>
 800ab1a:	bf00      	nop
 800ab1c:	24000400 	.word	0x24000400

0800ab20 <_realloc_r>:
 800ab20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab24:	4680      	mov	r8, r0
 800ab26:	4614      	mov	r4, r2
 800ab28:	460e      	mov	r6, r1
 800ab2a:	b921      	cbnz	r1, 800ab36 <_realloc_r+0x16>
 800ab2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab30:	4611      	mov	r1, r2
 800ab32:	f7ff bf81 	b.w	800aa38 <_malloc_r>
 800ab36:	b92a      	cbnz	r2, 800ab44 <_realloc_r+0x24>
 800ab38:	f7ff ff12 	bl	800a960 <_free_r>
 800ab3c:	4625      	mov	r5, r4
 800ab3e:	4628      	mov	r0, r5
 800ab40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab44:	f000 f838 	bl	800abb8 <_malloc_usable_size_r>
 800ab48:	4284      	cmp	r4, r0
 800ab4a:	4607      	mov	r7, r0
 800ab4c:	d802      	bhi.n	800ab54 <_realloc_r+0x34>
 800ab4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab52:	d812      	bhi.n	800ab7a <_realloc_r+0x5a>
 800ab54:	4621      	mov	r1, r4
 800ab56:	4640      	mov	r0, r8
 800ab58:	f7ff ff6e 	bl	800aa38 <_malloc_r>
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d0ed      	beq.n	800ab3e <_realloc_r+0x1e>
 800ab62:	42bc      	cmp	r4, r7
 800ab64:	4622      	mov	r2, r4
 800ab66:	4631      	mov	r1, r6
 800ab68:	bf28      	it	cs
 800ab6a:	463a      	movcs	r2, r7
 800ab6c:	f7ff fb4a 	bl	800a204 <memcpy>
 800ab70:	4631      	mov	r1, r6
 800ab72:	4640      	mov	r0, r8
 800ab74:	f7ff fef4 	bl	800a960 <_free_r>
 800ab78:	e7e1      	b.n	800ab3e <_realloc_r+0x1e>
 800ab7a:	4635      	mov	r5, r6
 800ab7c:	e7df      	b.n	800ab3e <_realloc_r+0x1e>
	...

0800ab80 <_sbrk_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4d06      	ldr	r5, [pc, #24]	; (800ab9c <_sbrk_r+0x1c>)
 800ab84:	2300      	movs	r3, #0
 800ab86:	4604      	mov	r4, r0
 800ab88:	4608      	mov	r0, r1
 800ab8a:	602b      	str	r3, [r5, #0]
 800ab8c:	f7f7 fc64 	bl	8002458 <_sbrk>
 800ab90:	1c43      	adds	r3, r0, #1
 800ab92:	d102      	bne.n	800ab9a <_sbrk_r+0x1a>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	b103      	cbz	r3, 800ab9a <_sbrk_r+0x1a>
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	24000408 	.word	0x24000408

0800aba0 <__malloc_lock>:
 800aba0:	4801      	ldr	r0, [pc, #4]	; (800aba8 <__malloc_lock+0x8>)
 800aba2:	f000 b811 	b.w	800abc8 <__retarget_lock_acquire_recursive>
 800aba6:	bf00      	nop
 800aba8:	2400040c 	.word	0x2400040c

0800abac <__malloc_unlock>:
 800abac:	4801      	ldr	r0, [pc, #4]	; (800abb4 <__malloc_unlock+0x8>)
 800abae:	f000 b80c 	b.w	800abca <__retarget_lock_release_recursive>
 800abb2:	bf00      	nop
 800abb4:	2400040c 	.word	0x2400040c

0800abb8 <_malloc_usable_size_r>:
 800abb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abbc:	1f18      	subs	r0, r3, #4
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	bfbc      	itt	lt
 800abc2:	580b      	ldrlt	r3, [r1, r0]
 800abc4:	18c0      	addlt	r0, r0, r3
 800abc6:	4770      	bx	lr

0800abc8 <__retarget_lock_acquire_recursive>:
 800abc8:	4770      	bx	lr

0800abca <__retarget_lock_release_recursive>:
 800abca:	4770      	bx	lr

0800abcc <_init>:
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abce:	bf00      	nop
 800abd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd2:	bc08      	pop	{r3}
 800abd4:	469e      	mov	lr, r3
 800abd6:	4770      	bx	lr

0800abd8 <_fini>:
 800abd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abda:	bf00      	nop
 800abdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abde:	bc08      	pop	{r3}
 800abe0:	469e      	mov	lr, r3
 800abe2:	4770      	bx	lr
