
H7A3_SDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b174  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800b424  0800b424  0001b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b730  0800b730  0001b730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b738  0800b738  0001b738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b73c  0800b73c  0001b73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800b740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000050c  24000078  0800b7b8  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24000584  0800b7b8  00020584  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY
 11 .debug_info   000196d4  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000033c2  00000000  00000000  000397bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001470  00000000  00000000  0003cb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000fec  00000000  00000000  0003dff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00032862  00000000  00000000  0003efdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f7b2  00000000  00000000  0007183e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00144d59  00000000  00000000  00090ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005c40  00000000  00000000  001d5d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000058  00000000  00000000  001db98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b40c 	.word	0x0800b40c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800b40c 	.word	0x0800b40c

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <SELECT>:
#define SD_CS_GPIO_Port GPIOD
#define SD_CS_Pin GPIO_PIN_14

/* SPI Chip Select */
static void SELECT(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a6:	4802      	ldr	r0, [pc, #8]	; (80006b0 <SELECT+0x14>)
 80006a8:	f004 f8f0 	bl	800488c <HAL_GPIO_WritePin>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	58020c00 	.word	0x58020c00

080006b4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006be:	4802      	ldr	r0, [pc, #8]	; (80006c8 <DESELECT+0x14>)
 80006c0:	f004 f8e4 	bl	800488c <HAL_GPIO_WritePin>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	58020c00 	.word	0x58020c00

080006cc <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80006d6:	bf00      	nop
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <SPI_TxByte+0x30>)
 80006da:	f007 fc59 	bl	8007f90 <HAL_SPI_GetState>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d1f9      	bne.n	80006d8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80006e4:	1df9      	adds	r1, r7, #7
 80006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ea:	2201      	movs	r2, #1
 80006ec:	4803      	ldr	r0, [pc, #12]	; (80006fc <SPI_TxByte+0x30>)
 80006ee:	f007 f837 	bl	8007760 <HAL_SPI_Transmit>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	24000098 	.word	0x24000098

08000700 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000706:	23ff      	movs	r3, #255	; 0xff
 8000708:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800070e:	bf00      	nop
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <SPI_RxByte+0x38>)
 8000712:	f007 fc3d 	bl	8007f90 <HAL_SPI_GetState>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d1f9      	bne.n	8000710 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800071c:	1dba      	adds	r2, r7, #6
 800071e:	1df9      	adds	r1, r7, #7
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2301      	movs	r3, #1
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <SPI_RxByte+0x38>)
 800072a:	f007 fa15 	bl	8007b58 <HAL_SPI_TransmitReceive>

  return data;
 800072e:	79bb      	ldrb	r3, [r7, #6]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	24000098 	.word	0x24000098

0800073c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000744:	f7ff ffdc 	bl	8000700 <SPI_RxByte>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	701a      	strb	r2, [r3, #0]
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <SD_ReadyWait+0x34>)
 8000760:	2232      	movs	r2, #50	; 0x32
 8000762:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000764:	f7ff ffcc 	bl	8000700 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000768:	f7ff ffca 	bl	8000700 <SPI_RxByte>
 800076c:	4603      	mov	r3, r0
 800076e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2bff      	cmp	r3, #255	; 0xff
 8000774:	d004      	beq.n	8000780 <SD_ReadyWait+0x28>
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <SD_ReadyWait+0x34>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f3      	bne.n	8000768 <SD_ReadyWait+0x10>

  return res;
 8000780:	79fb      	ldrb	r3, [r7, #7]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2400041e 	.word	0x2400041e

08000790 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000796:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800079a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800079c:	f7ff ff8a 	bl	80006b4 <DESELECT>

  for(int i = 0; i < 10; i++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	e005      	b.n	80007b2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80007a6:	20ff      	movs	r0, #255	; 0xff
 80007a8:	f7ff ff90 	bl	80006cc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	3301      	adds	r3, #1
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	2b09      	cmp	r3, #9
 80007b6:	ddf6      	ble.n	80007a6 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80007b8:	f7ff ff70 	bl	800069c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80007d0:	2395      	movs	r3, #149	; 0x95
 80007d2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e009      	b.n	80007ee <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80007da:	1d3a      	adds	r2, r7, #4
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff72 	bl	80006cc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2b05      	cmp	r3, #5
 80007f2:	ddf2      	ble.n	80007da <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80007f4:	e002      	b.n	80007fc <SD_PowerOn+0x6c>
  {
    Count--;
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80007fc:	f7ff ff80 	bl	8000700 <SPI_RxByte>
 8000800:	4603      	mov	r3, r0
 8000802:	2b01      	cmp	r3, #1
 8000804:	d002      	beq.n	800080c <SD_PowerOn+0x7c>
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1f4      	bne.n	80007f6 <SD_PowerOn+0x66>
  }

  DESELECT();
 800080c:	f7ff ff52 	bl	80006b4 <DESELECT>
  SPI_TxByte(0XFF);
 8000810:	20ff      	movs	r0, #255	; 0xff
 8000812:	f7ff ff5b 	bl	80006cc <SPI_TxByte>

  PowerFlag = 1;
 8000816:	4b03      	ldr	r3, [pc, #12]	; (8000824 <SD_PowerOn+0x94>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	24000095 	.word	0x24000095

08000828 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <SD_PowerOff+0x14>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	24000095 	.word	0x24000095

08000840 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <SD_CheckPower+0x14>)
 8000846:	781b      	ldrb	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	24000095 	.word	0x24000095

08000858 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <SD_RxDataBlock+0x68>)
 8000864:	220a      	movs	r2, #10
 8000866:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000868:	f7ff ff4a 	bl	8000700 <SPI_RxByte>
 800086c:	4603      	mov	r3, r0
 800086e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	2bff      	cmp	r3, #255	; 0xff
 8000874:	d104      	bne.n	8000880 <SD_RxDataBlock+0x28>
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <SD_RxDataBlock+0x68>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1f3      	bne.n	8000868 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	2bfe      	cmp	r3, #254	; 0xfe
 8000884:	d001      	beq.n	800088a <SD_RxDataBlock+0x32>
    return FALSE;
 8000886:	2300      	movs	r3, #0
 8000888:	e016      	b.n	80008b8 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff53 	bl	800073c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	607a      	str	r2, [r7, #4]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff4d 	bl	800073c <SPI_RxBytePtr>
  } while(btr -= 2);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	3b02      	subs	r3, #2
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1ed      	bne.n	800088a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80008ae:	f7ff ff27 	bl	8000700 <SPI_RxByte>
  SPI_RxByte();
 80008b2:	f7ff ff25 	bl	8000700 <SPI_RxByte>

  return TRUE;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2400041d 	.word	0x2400041d

080008c4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80008d4:	f7ff ff40 	bl	8000758 <SD_ReadyWait>
 80008d8:	4603      	mov	r3, r0
 80008da:	2bff      	cmp	r3, #255	; 0xff
 80008dc:	d001      	beq.n	80008e2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80008de:	2300      	movs	r3, #0
 80008e0:	e040      	b.n	8000964 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fef1 	bl	80006cc <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	2bfd      	cmp	r3, #253	; 0xfd
 80008ee:	d031      	beq.n	8000954 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fee5 	bl	80006cc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	607a      	str	r2, [r7, #4]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fede 	bl	80006cc <SPI_TxByte>
    } while (--wc);
 8000910:	7bbb      	ldrb	r3, [r7, #14]
 8000912:	3b01      	subs	r3, #1
 8000914:	73bb      	strb	r3, [r7, #14]
 8000916:	7bbb      	ldrb	r3, [r7, #14]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1eb      	bne.n	80008f4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 800091c:	f7ff fef0 	bl	8000700 <SPI_RxByte>
    SPI_RxByte();
 8000920:	f7ff feee 	bl	8000700 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000924:	e00b      	b.n	800093e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000926:	f7ff feeb 	bl	8000700 <SPI_RxByte>
 800092a:	4603      	mov	r3, r0
 800092c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	f003 031f 	and.w	r3, r3, #31
 8000934:	2b05      	cmp	r3, #5
 8000936:	d006      	beq.n	8000946 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000938:	7b7b      	ldrb	r3, [r7, #13]
 800093a:	3301      	adds	r3, #1
 800093c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800093e:	7b7b      	ldrb	r3, [r7, #13]
 8000940:	2b40      	cmp	r3, #64	; 0x40
 8000942:	d9f0      	bls.n	8000926 <SD_TxDataBlock+0x62>
 8000944:	e000      	b.n	8000948 <SD_TxDataBlock+0x84>
        break;
 8000946:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000948:	bf00      	nop
 800094a:	f7ff fed9 	bl	8000700 <SPI_RxByte>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0fa      	beq.n	800094a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 031f 	and.w	r3, r3, #31
 800095a:	2b05      	cmp	r3, #5
 800095c:	d101      	bne.n	8000962 <SD_TxDataBlock+0x9e>
    return TRUE;
 800095e:	2301      	movs	r3, #1
 8000960:	e000      	b.n	8000964 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000978:	f7ff feee 	bl	8000758 <SD_ReadyWait>
 800097c:	4603      	mov	r3, r0
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d001      	beq.n	8000986 <SD_SendCmd+0x1a>
    return 0xFF;
 8000982:	23ff      	movs	r3, #255	; 0xff
 8000984:	e040      	b.n	8000a08 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fe9f 	bl	80006cc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	0e1b      	lsrs	r3, r3, #24
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe99 	bl	80006cc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	0c1b      	lsrs	r3, r3, #16
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fe93 	bl	80006cc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe8d 	bl	80006cc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fe88 	bl	80006cc <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b40      	cmp	r3, #64	; 0x40
 80009c4:	d101      	bne.n	80009ca <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80009c6:	2395      	movs	r3, #149	; 0x95
 80009c8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b48      	cmp	r3, #72	; 0x48
 80009ce:	d101      	bne.n	80009d4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80009d0:	2387      	movs	r3, #135	; 0x87
 80009d2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fe78 	bl	80006cc <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b4c      	cmp	r3, #76	; 0x4c
 80009e0:	d101      	bne.n	80009e6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80009e2:	f7ff fe8d 	bl	8000700 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80009e6:	230a      	movs	r3, #10
 80009e8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80009ea:	f7ff fe89 	bl	8000700 <SPI_RxByte>
 80009ee:	4603      	mov	r3, r0
 80009f0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80009f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da05      	bge.n	8000a06 <SD_SendCmd+0x9a>
 80009fa:	7bbb      	ldrb	r3, [r7, #14]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	73bb      	strb	r3, [r7, #14]
 8000a00:	7bbb      	ldrb	r3, [r7, #14]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1f1      	bne.n	80009ea <SD_SendCmd+0x7e>

  return res;
 8000a06:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e0d5      	b.n	8000bd0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000a24:	4b6c      	ldr	r3, [pc, #432]	; (8000bd8 <SD_disk_initialize+0x1c8>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <SD_disk_initialize+0x2a>
    return Stat;
 8000a32:	4b69      	ldr	r3, [pc, #420]	; (8000bd8 <SD_disk_initialize+0x1c8>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	e0ca      	b.n	8000bd0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000a3a:	f7ff fea9 	bl	8000790 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000a3e:	f7ff fe2d 	bl	800069c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000a46:	2100      	movs	r1, #0
 8000a48:	2040      	movs	r0, #64	; 0x40
 8000a4a:	f7ff ff8f 	bl	800096c <SD_SendCmd>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	f040 80a5 	bne.w	8000ba0 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000a56:	4b61      	ldr	r3, [pc, #388]	; (8000bdc <SD_disk_initialize+0x1cc>)
 8000a58:	2264      	movs	r2, #100	; 0x64
 8000a5a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000a5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000a60:	2048      	movs	r0, #72	; 0x48
 8000a62:	f7ff ff83 	bl	800096c <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d158      	bne.n	8000b1e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	e00c      	b.n	8000a8c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000a72:	7bfc      	ldrb	r4, [r7, #15]
 8000a74:	f7ff fe44 	bl	8000700 <SPI_RxByte>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f104 0310 	add.w	r3, r4, #16
 8000a80:	443b      	add	r3, r7
 8000a82:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d9ef      	bls.n	8000a72 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000a92:	7abb      	ldrb	r3, [r7, #10]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	f040 8083 	bne.w	8000ba0 <SD_disk_initialize+0x190>
 8000a9a:	7afb      	ldrb	r3, [r7, #11]
 8000a9c:	2baa      	cmp	r3, #170	; 0xaa
 8000a9e:	d17f      	bne.n	8000ba0 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2077      	movs	r0, #119	; 0x77
 8000aa4:	f7ff ff62 	bl	800096c <SD_SendCmd>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d807      	bhi.n	8000abe <SD_disk_initialize+0xae>
 8000aae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ab2:	2069      	movs	r0, #105	; 0x69
 8000ab4:	f7ff ff5a 	bl	800096c <SD_SendCmd>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d005      	beq.n	8000aca <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000abe:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <SD_disk_initialize+0x1cc>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1eb      	bne.n	8000aa0 <SD_disk_initialize+0x90>
 8000ac8:	e000      	b.n	8000acc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000aca:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000acc:	4b43      	ldr	r3, [pc, #268]	; (8000bdc <SD_disk_initialize+0x1cc>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d064      	beq.n	8000ba0 <SD_disk_initialize+0x190>
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	207a      	movs	r0, #122	; 0x7a
 8000ada:	f7ff ff47 	bl	800096c <SD_SendCmd>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d15d      	bne.n	8000ba0 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	e00c      	b.n	8000b04 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000aea:	7bfc      	ldrb	r4, [r7, #15]
 8000aec:	f7ff fe08 	bl	8000700 <SPI_RxByte>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	f104 0310 	add.w	r3, r4, #16
 8000af8:	443b      	add	r3, r7
 8000afa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	3301      	adds	r3, #1
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d9ef      	bls.n	8000aea <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000b0a:	7a3b      	ldrb	r3, [r7, #8]
 8000b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SD_disk_initialize+0x108>
 8000b14:	2306      	movs	r3, #6
 8000b16:	e000      	b.n	8000b1a <SD_disk_initialize+0x10a>
 8000b18:	2302      	movs	r3, #2
 8000b1a:	73bb      	strb	r3, [r7, #14]
 8000b1c:	e040      	b.n	8000ba0 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2077      	movs	r0, #119	; 0x77
 8000b22:	f7ff ff23 	bl	800096c <SD_SendCmd>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d808      	bhi.n	8000b3e <SD_disk_initialize+0x12e>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2069      	movs	r0, #105	; 0x69
 8000b30:	f7ff ff1c 	bl	800096c <SD_SendCmd>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d801      	bhi.n	8000b3e <SD_disk_initialize+0x12e>
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	e000      	b.n	8000b40 <SD_disk_initialize+0x130>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000b42:	7bbb      	ldrb	r3, [r7, #14]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d10e      	bne.n	8000b66 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2077      	movs	r0, #119	; 0x77
 8000b4c:	f7ff ff0e 	bl	800096c <SD_SendCmd>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d80e      	bhi.n	8000b74 <SD_disk_initialize+0x164>
 8000b56:	2100      	movs	r1, #0
 8000b58:	2069      	movs	r0, #105	; 0x69
 8000b5a:	f7ff ff07 	bl	800096c <SD_SendCmd>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d107      	bne.n	8000b74 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000b64:	e00d      	b.n	8000b82 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000b66:	2100      	movs	r1, #0
 8000b68:	2041      	movs	r0, #65	; 0x41
 8000b6a:	f7ff feff 	bl	800096c <SD_SendCmd>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d005      	beq.n	8000b80 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <SD_disk_initialize+0x1cc>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1e1      	bne.n	8000b42 <SD_disk_initialize+0x132>
 8000b7e:	e000      	b.n	8000b82 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000b80:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <SD_disk_initialize+0x1cc>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d007      	beq.n	8000b9c <SD_disk_initialize+0x18c>
 8000b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b90:	2050      	movs	r0, #80	; 0x50
 8000b92:	f7ff feeb 	bl	800096c <SD_SendCmd>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000ba0:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <SD_disk_initialize+0x1d0>)
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
 8000ba4:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000ba6:	f7ff fd85 	bl	80006b4 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000baa:	f7ff fda9 	bl	8000700 <SPI_RxByte>

  if (type)
 8000bae:	7bbb      	ldrb	r3, [r7, #14]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d008      	beq.n	8000bc6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <SD_disk_initialize+0x1c8>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f023 0301 	bic.w	r3, r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <SD_disk_initialize+0x1c8>)
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e001      	b.n	8000bca <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000bc6:	f7ff fe2f 	bl	8000828 <SD_PowerOff>
  }

  return Stat;
 8000bca:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <SD_disk_initialize+0x1c8>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	24000000 	.word	0x24000000
 8000bdc:	2400041d 	.word	0x2400041d
 8000be0:	24000094 	.word	0x24000094

08000be4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e002      	b.n	8000bfe <SD_disk_status+0x1a>

  return Stat;
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SD_disk_status+0x28>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	24000000 	.word	0x24000000

08000c10 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <SD_disk_read+0x1c>
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d101      	bne.n	8000c30 <SD_disk_read+0x20>
    return RES_PARERR;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	e051      	b.n	8000cd4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000c30:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <SD_disk_read+0xcc>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e048      	b.n	8000cd4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <SD_disk_read+0xd0>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	025b      	lsls	r3, r3, #9
 8000c52:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c54:	f7ff fd22 	bl	800069c <SELECT>

  if (count == 1)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d111      	bne.n	8000c82 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	2051      	movs	r0, #81	; 0x51
 8000c62:	f7ff fe83 	bl	800096c <SD_SendCmd>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d129      	bne.n	8000cc0 <SD_disk_read+0xb0>
 8000c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c70:	68b8      	ldr	r0, [r7, #8]
 8000c72:	f7ff fdf1 	bl	8000858 <SD_RxDataBlock>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d021      	beq.n	8000cc0 <SD_disk_read+0xb0>
      count = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	e01e      	b.n	8000cc0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	2052      	movs	r0, #82	; 0x52
 8000c86:	f7ff fe71 	bl	800096c <SD_SendCmd>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d117      	bne.n	8000cc0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c94:	68b8      	ldr	r0, [r7, #8]
 8000c96:	f7ff fddf 	bl	8000858 <SD_RxDataBlock>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00a      	beq.n	8000cb6 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ca6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1ed      	bne.n	8000c90 <SD_disk_read+0x80>
 8000cb4:	e000      	b.n	8000cb8 <SD_disk_read+0xa8>
          break;
 8000cb6:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	204c      	movs	r0, #76	; 0x4c
 8000cbc:	f7ff fe56 	bl	800096c <SD_SendCmd>
    }
  }

  DESELECT();
 8000cc0:	f7ff fcf8 	bl	80006b4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000cc4:	f7ff fd1c 	bl	8000700 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	bf14      	ite	ne
 8000cce:	2301      	movne	r3, #1
 8000cd0:	2300      	moveq	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	24000000 	.word	0x24000000
 8000ce0:	24000094 	.word	0x24000094

08000ce4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d102      	bne.n	8000d00 <SD_disk_write+0x1c>
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <SD_disk_write+0x20>
    return RES_PARERR;
 8000d00:	2304      	movs	r3, #4
 8000d02:	e06b      	b.n	8000ddc <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000d04:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <SD_disk_write+0x100>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e062      	b.n	8000ddc <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000d16:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <SD_disk_write+0x100>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000d24:	2302      	movs	r3, #2
 8000d26:	e059      	b.n	8000ddc <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <SD_disk_write+0x104>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	025b      	lsls	r3, r3, #9
 8000d38:	607b      	str	r3, [r7, #4]

  SELECT();
 8000d3a:	f7ff fcaf 	bl	800069c <SELECT>

  if (count == 1)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d110      	bne.n	8000d66 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	2058      	movs	r0, #88	; 0x58
 8000d48:	f7ff fe10 	bl	800096c <SD_SendCmd>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d13a      	bne.n	8000dc8 <SD_disk_write+0xe4>
 8000d52:	21fe      	movs	r1, #254	; 0xfe
 8000d54:	68b8      	ldr	r0, [r7, #8]
 8000d56:	f7ff fdb5 	bl	80008c4 <SD_TxDataBlock>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d033      	beq.n	8000dc8 <SD_disk_write+0xe4>
      count = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	e030      	b.n	8000dc8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <SD_disk_write+0x104>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000d72:	2100      	movs	r1, #0
 8000d74:	2077      	movs	r0, #119	; 0x77
 8000d76:	f7ff fdf9 	bl	800096c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000d7a:	6839      	ldr	r1, [r7, #0]
 8000d7c:	2057      	movs	r0, #87	; 0x57
 8000d7e:	f7ff fdf5 	bl	800096c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	2059      	movs	r0, #89	; 0x59
 8000d86:	f7ff fdf1 	bl	800096c <SD_SendCmd>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d11b      	bne.n	8000dc8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000d90:	21fc      	movs	r1, #252	; 0xfc
 8000d92:	68b8      	ldr	r0, [r7, #8]
 8000d94:	f7ff fd96 	bl	80008c4 <SD_TxDataBlock>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00a      	beq.n	8000db4 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000da4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1ee      	bne.n	8000d90 <SD_disk_write+0xac>
 8000db2:	e000      	b.n	8000db6 <SD_disk_write+0xd2>
          break;
 8000db4:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000db6:	21fd      	movs	r1, #253	; 0xfd
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff fd83 	bl	80008c4 <SD_TxDataBlock>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <SD_disk_write+0xe4>
      {
        count = 1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000dc8:	f7ff fc74 	bl	80006b4 <DESELECT>
  SPI_RxByte();
 8000dcc:	f7ff fc98 	bl	8000700 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	bf14      	ite	ne
 8000dd6:	2301      	movne	r3, #1
 8000dd8:	2300      	moveq	r3, #0
 8000dda:	b2db      	uxtb	r3, r3
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	24000000 	.word	0x24000000
 8000de8:	24000094 	.word	0x24000094

08000dec <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b08b      	sub	sp, #44	; 0x2c
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	603a      	str	r2, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000e06:	2304      	movs	r3, #4
 8000e08:	e11b      	b.n	8001042 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	2b05      	cmp	r3, #5
 8000e14:	d129      	bne.n	8000e6a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d017      	beq.n	8000e4e <SD_disk_ioctl+0x62>
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	dc1f      	bgt.n	8000e62 <SD_disk_ioctl+0x76>
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <SD_disk_ioctl+0x40>
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d00b      	beq.n	8000e42 <SD_disk_ioctl+0x56>
 8000e2a:	e01a      	b.n	8000e62 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000e2c:	f7ff fd08 	bl	8000840 <SD_CheckPower>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000e36:	f7ff fcf7 	bl	8000828 <SD_PowerOff>
      res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e40:	e0fd      	b.n	800103e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000e42:	f7ff fca5 	bl	8000790 <SD_PowerOn>
      res = RES_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e4c:	e0f7      	b.n	800103e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	1c5c      	adds	r4, r3, #1
 8000e52:	f7ff fcf5 	bl	8000840 <SD_CheckPower>
 8000e56:	4603      	mov	r3, r0
 8000e58:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e60:	e0ed      	b.n	800103e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000e62:	2304      	movs	r3, #4
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e68:	e0e9      	b.n	800103e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000e6a:	4b78      	ldr	r3, [pc, #480]	; (800104c <SD_disk_ioctl+0x260>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e0e2      	b.n	8001042 <SD_disk_ioctl+0x256>

    SELECT();
 8000e7c:	f7ff fc0e 	bl	800069c <SELECT>

    switch (ctrl)
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	2b0d      	cmp	r3, #13
 8000e84:	f200 80cc 	bhi.w	8001020 <SD_disk_ioctl+0x234>
 8000e88:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <SD_disk_ioctl+0xa4>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000f8b 	.word	0x08000f8b
 8000e94:	08000ec9 	.word	0x08000ec9
 8000e98:	08000f7b 	.word	0x08000f7b
 8000e9c:	08001021 	.word	0x08001021
 8000ea0:	08001021 	.word	0x08001021
 8000ea4:	08001021 	.word	0x08001021
 8000ea8:	08001021 	.word	0x08001021
 8000eac:	08001021 	.word	0x08001021
 8000eb0:	08001021 	.word	0x08001021
 8000eb4:	08001021 	.word	0x08001021
 8000eb8:	08001021 	.word	0x08001021
 8000ebc:	08000f9d 	.word	0x08000f9d
 8000ec0:	08000fc1 	.word	0x08000fc1
 8000ec4:	08000fe5 	.word	0x08000fe5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2049      	movs	r0, #73	; 0x49
 8000ecc:	f7ff fd4e 	bl	800096c <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f040 80a8 	bne.w	8001028 <SD_disk_ioctl+0x23c>
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2110      	movs	r1, #16
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fcba 	bl	8000858 <SD_RxDataBlock>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 809e 	beq.w	8001028 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000eec:	7b3b      	ldrb	r3, [r7, #12]
 8000eee:	099b      	lsrs	r3, r3, #6
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10e      	bne.n	8000f14 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000ef6:	7d7b      	ldrb	r3, [r7, #21]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	7d3b      	ldrb	r3, [r7, #20]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4413      	add	r3, r2
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000f0a:	8bfb      	ldrh	r3, [r7, #30]
 8000f0c:	029a      	lsls	r2, r3, #10
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e02e      	b.n	8000f72 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000f14:	7c7b      	ldrb	r3, [r7, #17]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	7dbb      	ldrb	r3, [r7, #22]
 8000f1e:	09db      	lsrs	r3, r3, #7
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4413      	add	r3, r2
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	7d7b      	ldrb	r3, [r7, #21]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	f003 0306 	and.w	r3, r3, #6
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	4413      	add	r3, r2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	3302      	adds	r3, #2
 8000f38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000f3c:	7d3b      	ldrb	r3, [r7, #20]
 8000f3e:	099b      	lsrs	r3, r3, #6
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	7cfb      	ldrb	r3, [r7, #19]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	7cbb      	ldrb	r3, [r7, #18]
 8000f52:	029b      	lsls	r3, r3, #10
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000f64:	8bfa      	ldrh	r2, [r7, #30]
 8000f66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f6a:	3b09      	subs	r3, #9
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000f78:	e056      	b.n	8001028 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f80:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f88:	e055      	b.n	8001036 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000f8a:	f7ff fbe5 	bl	8000758 <SD_ReadyWait>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2bff      	cmp	r3, #255	; 0xff
 8000f92:	d14b      	bne.n	800102c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f9a:	e047      	b.n	800102c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2049      	movs	r0, #73	; 0x49
 8000fa0:	f7ff fce4 	bl	800096c <SD_SendCmd>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d142      	bne.n	8001030 <SD_disk_ioctl+0x244>
 8000faa:	2110      	movs	r1, #16
 8000fac:	6a38      	ldr	r0, [r7, #32]
 8000fae:	f7ff fc53 	bl	8000858 <SD_RxDataBlock>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d03b      	beq.n	8001030 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000fbe:	e037      	b.n	8001030 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	204a      	movs	r0, #74	; 0x4a
 8000fc4:	f7ff fcd2 	bl	800096c <SD_SendCmd>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d132      	bne.n	8001034 <SD_disk_ioctl+0x248>
 8000fce:	2110      	movs	r1, #16
 8000fd0:	6a38      	ldr	r0, [r7, #32]
 8000fd2:	f7ff fc41 	bl	8000858 <SD_RxDataBlock>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d02b      	beq.n	8001034 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000fe2:	e027      	b.n	8001034 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	207a      	movs	r0, #122	; 0x7a
 8000fe8:	f7ff fcc0 	bl	800096c <SD_SendCmd>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d116      	bne.n	8001020 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ff8:	e00b      	b.n	8001012 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000ffa:	6a3c      	ldr	r4, [r7, #32]
 8000ffc:	1c63      	adds	r3, r4, #1
 8000ffe:	623b      	str	r3, [r7, #32]
 8001000:	f7ff fb7e 	bl	8000700 <SPI_RxByte>
 8001004:	4603      	mov	r3, r0
 8001006:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001008:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800100c:	3301      	adds	r3, #1
 800100e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001012:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001016:	2b03      	cmp	r3, #3
 8001018:	d9ef      	bls.n	8000ffa <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001020:	2304      	movs	r3, #4
 8001022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001026:	e006      	b.n	8001036 <SD_disk_ioctl+0x24a>
      break;
 8001028:	bf00      	nop
 800102a:	e004      	b.n	8001036 <SD_disk_ioctl+0x24a>
      break;
 800102c:	bf00      	nop
 800102e:	e002      	b.n	8001036 <SD_disk_ioctl+0x24a>
      break;
 8001030:	bf00      	nop
 8001032:	e000      	b.n	8001036 <SD_disk_ioctl+0x24a>
      break;
 8001034:	bf00      	nop
    }

    DESELECT();
 8001036:	f7ff fb3d 	bl	80006b4 <DESELECT>
    SPI_RxByte();
 800103a:	f7ff fb61 	bl	8000700 <SPI_RxByte>
  }

  return res;
 800103e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001042:	4618      	mov	r0, r3
 8001044:	372c      	adds	r7, #44	; 0x2c
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}
 800104a:	bf00      	nop
 800104c:	24000000 	.word	0x24000000

08001050 <UART_Printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART_Printf(const char* fmt, ...) {
 8001050:	b40f      	push	{r0, r1, r2, r3}
 8001052:	b580      	push	{r7, lr}
 8001054:	b0c2      	sub	sp, #264	; 0x108
 8001056:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8001058:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800105c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001064:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8001066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800106a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800106e:	f107 0008 	add.w	r0, r7, #8
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107c:	f009 fd34 	bl	800aae8 <vsniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f933 	bl	80002f0 <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	f107 0108 	add.w	r1, r7, #8
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <UART_Printf+0x5c>)
 8001098:	f008 f9c6 	bl	8009428 <HAL_UART_Transmit>
    va_end(args);
}
 800109c:	bf00      	nop
 800109e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80010a2:	46bd      	mov	sp, r7
 80010a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010a8:	b004      	add	sp, #16
 80010aa:	4770      	bx	lr
 80010ac:	240001b8 	.word	0x240001b8

080010b0 <SDCard_init_scr>:

void SDCard_init_scr() {
 80010b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80010b6:	af08      	add	r7, sp, #32
    int code;
    UART_Printf("Ready!\r\n");
 80010b8:	4884      	ldr	r0, [pc, #528]	; (80012cc <SDCard_init_scr+0x21c>)
 80010ba:	f7ff ffc9 	bl	8001050 <UART_Printf>

    code = SDCARD_Init();
 80010be:	f000 fdef 	bl	8001ca0 <SDCARD_Init>
 80010c2:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
    if(code < 0) {
 80010c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	da05      	bge.n	80010da <SDCard_init_scr+0x2a>
        UART_Printf("SDCARD_Init() failed: code = %d\r\n", code);
 80010ce:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80010d2:	487f      	ldr	r0, [pc, #508]	; (80012d0 <SDCard_init_scr+0x220>)
 80010d4:	f7ff ffbc 	bl	8001050 <UART_Printf>
        return;
 80010d8:	e0f3      	b.n	80012c2 <SDCard_init_scr+0x212>
    }

    UART_Printf("SDCARD_Init() done!\r\n");
 80010da:	487e      	ldr	r0, [pc, #504]	; (80012d4 <SDCard_init_scr+0x224>)
 80010dc:	f7ff ffb8 	bl	8001050 <UART_Printf>

    uint32_t blocksNum;
    code = SDCARD_GetBlocksNumber(&blocksNum);
 80010e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fec7 	bl	8001e78 <SDCARD_GetBlocksNumber>
 80010ea:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
    if(code < 0) {
 80010ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	da05      	bge.n	8001102 <SDCard_init_scr+0x52>
        UART_Printf("SDCARD_GetBlocksNumber() failed: code = %d\r\n", code);
 80010f6:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80010fa:	4877      	ldr	r0, [pc, #476]	; (80012d8 <SDCard_init_scr+0x228>)
 80010fc:	f7ff ffa8 	bl	8001050 <UART_Printf>
        return;
 8001100:	e0df      	b.n	80012c2 <SDCard_init_scr+0x212>
    }

    UART_Printf("SDCARD_GetBlocksNumber() done! blocksNum = %u (or %u Mb)\r\n",
 8001102:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8001106:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800110a:	4a74      	ldr	r2, [pc, #464]	; (80012dc <SDCard_init_scr+0x22c>)
 800110c:	fba2 2303 	umull	r2, r3, r2, r3
 8001110:	09db      	lsrs	r3, r3, #7
 8001112:	461a      	mov	r2, r3
 8001114:	4872      	ldr	r0, [pc, #456]	; (80012e0 <SDCard_init_scr+0x230>)
 8001116:	f7ff ff9b 	bl	8001050 <UART_Printf>
        blocksNum, blocksNum/2000 /* same as * 512 / 1000 / 1000 */);

    uint32_t startBlockAddr = 0x00AAAA;
 800111a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800111e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    uint32_t blockAddr = startBlockAddr;
 8001122:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001126:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    uint8_t block[512];
//    for(int i = 0; i < 500; i++){
//    	block[i] = i % 256;
//    }
    block[0] = 0xAA; block[1] = 0xBB; block[2] = 0xCC; block[3] = 0xDD; block[4] = 0xEE;
 800112a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800112e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001132:	22aa      	movs	r2, #170	; 0xaa
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800113a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800113e:	22bb      	movs	r2, #187	; 0xbb
 8001140:	705a      	strb	r2, [r3, #1]
 8001142:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001146:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800114a:	22cc      	movs	r2, #204	; 0xcc
 800114c:	709a      	strb	r2, [r3, #2]
 800114e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001152:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001156:	22dd      	movs	r2, #221	; 0xdd
 8001158:	70da      	strb	r2, [r3, #3]
 800115a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800115e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001162:	22ee      	movs	r2, #238	; 0xee
 8001164:	711a      	strb	r2, [r3, #4]

    snprintf((char*)block, sizeof(block), "0x%08X", (int)blockAddr);
 8001166:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800116a:	f107 0008 	add.w	r0, r7, #8
 800116e:	4a5d      	ldr	r2, [pc, #372]	; (80012e4 <SDCard_init_scr+0x234>)
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	f009 fc38 	bl	800a9e8 <sniprintf>

    code = SDCARD_WriteSingleBlock(blockAddr, &block[0]);
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	4619      	mov	r1, r3
 800117e:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001182:	f000 ff4f 	bl	8002024 <SDCARD_WriteSingleBlock>
 8001186:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
    if(code < 0) {
 800118a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800118e:	2b00      	cmp	r3, #0
 8001190:	da05      	bge.n	800119e <SDCard_init_scr+0xee>
        UART_Printf("SDCARD_WriteSingleBlock() failed: code = %d\r\n", code);
 8001192:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8001196:	4854      	ldr	r0, [pc, #336]	; (80012e8 <SDCard_init_scr+0x238>)
 8001198:	f7ff ff5a 	bl	8001050 <UART_Printf>
        return;
 800119c:	e091      	b.n	80012c2 <SDCard_init_scr+0x212>
    }
    UART_Printf("SDCARD_WriteSingleBlock(0x%08X, ...) done!\r\n", blockAddr);
 800119e:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80011a2:	4852      	ldr	r0, [pc, #328]	; (80012ec <SDCard_init_scr+0x23c>)
 80011a4:	f7ff ff54 	bl	8001050 <UART_Printf>

    memset(block, 0, sizeof(block));
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f009 fca6 	bl	800ab04 <memset>

    code = SDCARD_ReadSingleBlock(blockAddr, block);
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80011c2:	f000 fec9 	bl	8001f58 <SDCARD_ReadSingleBlock>
 80011c6:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
    if(code < 0) {
 80011ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da05      	bge.n	80011de <SDCard_init_scr+0x12e>
        UART_Printf("SDCARD_ReadSingleBlock() failed: code = %d\r\n", code);
 80011d2:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80011d6:	4846      	ldr	r0, [pc, #280]	; (80012f0 <SDCard_init_scr+0x240>)
 80011d8:	f7ff ff3a 	bl	8001050 <UART_Printf>
        return;
 80011dc:	e071      	b.n	80012c2 <SDCard_init_scr+0x212>
    }

    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80011de:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80011e2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80011e6:	781b      	ldrb	r3, [r3, #0]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80011e8:	469c      	mov	ip, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80011ea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80011ee:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80011f2:	785b      	ldrb	r3, [r3, #1]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80011f4:	469e      	mov	lr, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80011f6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80011fa:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80011fe:	789b      	ldrb	r3, [r3, #2]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8001200:	461a      	mov	r2, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8001202:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001206:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800120a:	78db      	ldrb	r3, [r3, #3]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800120c:	4619      	mov	r1, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800120e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001212:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001216:	791b      	ldrb	r3, [r3, #4]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8001218:	4618      	mov	r0, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800121a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800121e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001222:	795b      	ldrb	r3, [r3, #5]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8001224:	461c      	mov	r4, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8001226:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800122a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800122e:	799b      	ldrb	r3, [r3, #6]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8001230:	461d      	mov	r5, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8001232:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001236:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800123a:	79db      	ldrb	r3, [r3, #7]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800123c:	461e      	mov	r6, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800123e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001242:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001246:	7a1b      	ldrb	r3, [r3, #8]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8001248:	607b      	str	r3, [r7, #4]
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800124a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800124e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001252:	7a5b      	ldrb	r3, [r3, #9]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8001254:	9307      	str	r3, [sp, #28]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	9306      	str	r3, [sp, #24]
 800125a:	9605      	str	r6, [sp, #20]
 800125c:	9504      	str	r5, [sp, #16]
 800125e:	9403      	str	r4, [sp, #12]
 8001260:	9002      	str	r0, [sp, #8]
 8001262:	9101      	str	r1, [sp, #4]
 8001264:	9200      	str	r2, [sp, #0]
 8001266:	4673      	mov	r3, lr
 8001268:	4662      	mov	r2, ip
 800126a:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 800126e:	4821      	ldr	r0, [pc, #132]	; (80012f4 <SDCard_init_scr+0x244>)
 8001270:	f7ff feee 	bl	8001050 <UART_Printf>
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 8001274:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001278:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800127c:	781b      	ldrb	r3, [r3, #0]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 800127e:	4618      	mov	r0, r3
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 8001280:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001284:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001288:	785b      	ldrb	r3, [r3, #1]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 800128a:	461c      	mov	r4, r3
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 800128c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001290:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001294:	789b      	ldrb	r3, [r3, #2]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 8001296:	461a      	mov	r2, r3
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 8001298:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800129c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80012a0:	78db      	ldrb	r3, [r3, #3]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 80012a2:	4619      	mov	r1, r3
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 80012a4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80012a8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80012ac:	7a9b      	ldrb	r3, [r3, #10]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	9101      	str	r1, [sp, #4]
 80012b2:	9200      	str	r2, [sp, #0]
 80012b4:	4623      	mov	r3, r4
 80012b6:	4602      	mov	r2, r0
 80012b8:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80012bc:	480e      	ldr	r0, [pc, #56]	; (80012f8 <SDCard_init_scr+0x248>)
 80012be:	f7ff fec7 	bl	8001050 <UART_Printf>
//    if(code < 0) {
//        UART_Printf("SDCARD_ReadEnd() failed: code = %d\r\n", code);
//        return;
//    }
//    UART_Printf("SDCARD_ReadEnd() done!\r\n");
}
 80012c2:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	0800b424 	.word	0x0800b424
 80012d0:	0800b430 	.word	0x0800b430
 80012d4:	0800b454 	.word	0x0800b454
 80012d8:	0800b46c 	.word	0x0800b46c
 80012dc:	10624dd3 	.word	0x10624dd3
 80012e0:	0800b49c 	.word	0x0800b49c
 80012e4:	0800b4d8 	.word	0x0800b4d8
 80012e8:	0800b4e0 	.word	0x0800b4e0
 80012ec:	0800b510 	.word	0x0800b510
 80012f0:	0800b540 	.word	0x0800b540
 80012f4:	0800b570 	.word	0x0800b570
 80012f8:	0800b5c0 	.word	0x0800b5c0

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b09c      	sub	sp, #112	; 0x70
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001302:	f001 fa45 	bl	8002790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001306:	f000 f871 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130a:	f000 fadb 	bl	80018c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800130e:	f000 fa7b 	bl	8001808 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8001312:	f000 fa71 	bl	80017f8 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 8001316:	f000 fa23 	bl	8001760 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800131a:	f000 f8dd 	bl	80014d8 <MX_SPI1_Init>
  MX_TIM3_Init();
 800131e:	f000 f9a7 	bl	8001670 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001322:	f009 fa99 	bl	800a858 <MX_FATFS_Init>
  MX_TIM2_Init();
 8001326:	f000 f92d 	bl	8001584 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  //SDMMC_Ex1();
  char temp[]="--------------------H7A3_SDCard----------------------"
 800132a:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <main+0xcc>)
 800132c:	463b      	mov	r3, r7
 800132e:	4611      	mov	r1, r2
 8001330:	226e      	movs	r2, #110	; 0x6e
 8001332:	4618      	mov	r0, r3
 8001334:	f009 fc1a 	bl	800ab6c <memcpy>
		  "\r\n Welcome to UART Port 115200 8 bit/stop1 none parity\r\n";
  HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp),30); // strlen = length of str -> config length of data
 8001338:	463b      	mov	r3, r7
 800133a:	4618      	mov	r0, r3
 800133c:	f7fe ffd8 	bl	80002f0 <strlen>
 8001340:	4603      	mov	r3, r0
 8001342:	b29a      	uxth	r2, r3
 8001344:	4639      	mov	r1, r7
 8001346:	231e      	movs	r3, #30
 8001348:	4820      	ldr	r0, [pc, #128]	; (80013cc <main+0xd0>)
 800134a:	f008 f86d 	bl	8009428 <HAL_UART_Transmit>


  //// PWM Test
  HAL_TIM_Base_Start(&htim3);
 800134e:	4820      	ldr	r0, [pc, #128]	; (80013d0 <main+0xd4>)
 8001350:	f006 ff6c 	bl	800822c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001354:	2108      	movs	r1, #8
 8001356:	481e      	ldr	r0, [pc, #120]	; (80013d0 <main+0xd4>)
 8001358:	f007 f83a 	bl	80083d0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim2);
 800135c:	481d      	ldr	r0, [pc, #116]	; (80013d4 <main+0xd8>)
 800135e:	f006 ff65 	bl	800822c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001362:	210c      	movs	r1, #12
 8001364:	481b      	ldr	r0, [pc, #108]	; (80013d4 <main+0xd8>)
 8001366:	f007 f833 	bl	80083d0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - timestamp_one >= 1000){
 800136a:	f001 fa97 	bl	800289c <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <main+0xdc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800137a:	d3f6      	bcc.n	800136a <main+0x6e>
		  timestamp_one = HAL_GetTick();
 800137c:	f001 fa8e 	bl	800289c <HAL_GetTick>
 8001380:	4603      	mov	r3, r0
 8001382:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <main+0xdc>)
 8001384:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001386:	2102      	movs	r1, #2
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <main+0xe0>)
 800138a:	f003 fa98 	bl	80048be <HAL_GPIO_TogglePin>

		  sprintf(txtUARTBF,"timestamp =  %d\r\n", (int)timestamp_one);
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <main+0xdc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4912      	ldr	r1, [pc, #72]	; (80013e0 <main+0xe4>)
 8001396:	4813      	ldr	r0, [pc, #76]	; (80013e4 <main+0xe8>)
 8001398:	f009 fb5a 	bl	800aa50 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 800139c:	4811      	ldr	r0, [pc, #68]	; (80013e4 <main+0xe8>)
 800139e:	f7fe ffa7 	bl	80002f0 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	230a      	movs	r3, #10
 80013a8:	490e      	ldr	r1, [pc, #56]	; (80013e4 <main+0xe8>)
 80013aa:	4808      	ldr	r0, [pc, #32]	; (80013cc <main+0xd0>)
 80013ac:	f008 f83c 	bl	8009428 <HAL_UART_Transmit>

		  PWMOut1 = PWMOut1 + 10 % 5000;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <main+0xec>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	330a      	adds	r3, #10
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <main+0xec>)
 80013ba:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, PWMOut1); // dutycycle
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <main+0xec>)
 80013be:	881a      	ldrh	r2, [r3, #0]
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <main+0xd4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	63da      	str	r2, [r3, #60]	; 0x3c
	  if(HAL_GetTick() - timestamp_one >= 1000){
 80013c6:	e7d0      	b.n	800136a <main+0x6e>
 80013c8:	0800b61c 	.word	0x0800b61c
 80013cc:	240001b8 	.word	0x240001b8
 80013d0:	2400016c 	.word	0x2400016c
 80013d4:	24000120 	.word	0x24000120
 80013d8:	240003b4 	.word	0x240003b4
 80013dc:	58021000 	.word	0x58021000
 80013e0:	0800b608 	.word	0x0800b608
 80013e4:	240003b8 	.word	0x240003b8
 80013e8:	24000002 	.word	0x24000002

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b09c      	sub	sp, #112	; 0x70
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f6:	224c      	movs	r2, #76	; 0x4c
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f009 fb82 	bl	800ab04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2220      	movs	r2, #32
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f009 fb7c 	bl	800ab04 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <SystemClock_Config+0xe4>)
 800140e:	f04f 32ff 	mov.w	r2, #4294967295
 8001412:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001416:	2004      	movs	r0, #4
 8001418:	f003 fa86 	bl	8004928 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800141c:	2300      	movs	r3, #0
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <SystemClock_Config+0xe8>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a2b      	ldr	r2, [pc, #172]	; (80014d4 <SystemClock_Config+0xe8>)
 8001426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <SystemClock_Config+0xe8>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001438:	bf00      	nop
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <SystemClock_Config+0xe8>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001446:	d1f8      	bne.n	800143a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001448:	2321      	movs	r3, #33	; 0x21
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001452:	2301      	movs	r3, #1
 8001454:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001456:	2302      	movs	r3, #2
 8001458:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145a:	2302      	movs	r3, #2
 800145c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8001462:	2346      	movs	r3, #70	; 0x46
 8001464:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001466:	2302      	movs	r3, #2
 8001468:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800146a:	2302      	movs	r3, #2
 800146c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800146e:	2302      	movs	r3, #2
 8001470:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001472:	230c      	movs	r3, #12
 8001474:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001476:	2300      	movs	r3, #0
 8001478:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4618      	mov	r0, r3
 8001484:	f003 faaa 	bl	80049dc <HAL_RCC_OscConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800148e:	f000 fb72 	bl	8001b76 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	233f      	movs	r3, #63	; 0x3f
 8001494:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	2303      	movs	r3, #3
 8001498:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014a2:	2340      	movs	r3, #64	; 0x40
 80014a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014a6:	2340      	movs	r3, #64	; 0x40
 80014a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014b0:	2340      	movs	r3, #64	; 0x40
 80014b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2107      	movs	r1, #7
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 fec1 	bl	8005240 <HAL_RCC_ClockConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80014c4:	f000 fb57 	bl	8001b76 <Error_Handler>
  }
}
 80014c8:	bf00      	nop
 80014ca:	3770      	adds	r7, #112	; 0x70
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58024400 	.word	0x58024400
 80014d4:	58024800 	.word	0x58024800

080014d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <MX_SPI1_Init+0xa4>)
 80014de:	4a28      	ldr	r2, [pc, #160]	; (8001580 <MX_SPI1_Init+0xa8>)
 80014e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <MX_SPI1_Init+0xa4>)
 80014e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <MX_SPI1_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_SPI1_Init+0xa4>)
 80014f2:	2207      	movs	r2, #7
 80014f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_SPI1_Init+0xa4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_SPI1_Init+0xa4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_SPI1_Init+0xa4>)
 8001504:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001508:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_SPI1_Init+0xa4>)
 800150c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001510:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_SPI1_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_SPI1_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_SPI1_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_SPI1_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_SPI1_Init+0xa4>)
 800152c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001530:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_SPI1_Init+0xa4>)
 8001534:	2200      	movs	r2, #0
 8001536:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_SPI1_Init+0xa4>)
 800153a:	2200      	movs	r2, #0
 800153c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_SPI1_Init+0xa4>)
 8001540:	2200      	movs	r2, #0
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <MX_SPI1_Init+0xa4>)
 8001546:	2200      	movs	r2, #0
 8001548:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_SPI1_Init+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <MX_SPI1_Init+0xa4>)
 8001552:	2200      	movs	r2, #0
 8001554:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_SPI1_Init+0xa4>)
 8001558:	2200      	movs	r2, #0
 800155a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <MX_SPI1_Init+0xa4>)
 800155e:	2200      	movs	r2, #0
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_SPI1_Init+0xa4>)
 8001564:	2200      	movs	r2, #0
 8001566:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_SPI1_Init+0xa4>)
 800156a:	f005 ffd5 	bl	8007518 <HAL_SPI_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001574:	f000 faff 	bl	8001b76 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	24000098 	.word	0x24000098
 8001580:	40013000 	.word	0x40013000

08001584 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	; 0x38
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a4:	463b      	mov	r3, r7
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <MX_TIM2_Init+0xe8>)
 80015b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <MX_TIM2_Init+0xe8>)
 80015c0:	2204      	movs	r2, #4
 80015c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <MX_TIM2_Init+0xe8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 80015ca:	4b28      	ldr	r3, [pc, #160]	; (800166c <MX_TIM2_Init+0xe8>)
 80015cc:	2204      	movs	r2, #4
 80015ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <MX_TIM2_Init+0xe8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <MX_TIM2_Init+0xe8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015dc:	4823      	ldr	r0, [pc, #140]	; (800166c <MX_TIM2_Init+0xe8>)
 80015de:	f006 fdce 	bl	800817e <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015e8:	f000 fac5 	bl	8001b76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f6:	4619      	mov	r1, r3
 80015f8:	481c      	ldr	r0, [pc, #112]	; (800166c <MX_TIM2_Init+0xe8>)
 80015fa:	f007 f90b 	bl	8008814 <HAL_TIM_ConfigClockSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001604:	f000 fab7 	bl	8001b76 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001608:	4818      	ldr	r0, [pc, #96]	; (800166c <MX_TIM2_Init+0xe8>)
 800160a:	f006 fe7f 	bl	800830c <HAL_TIM_PWM_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001614:	f000 faaf 	bl	8001b76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4811      	ldr	r0, [pc, #68]	; (800166c <MX_TIM2_Init+0xe8>)
 8001628:	f007 fe20 	bl	800926c <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001632:	f000 faa0 	bl	8001b76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001636:	2360      	movs	r3, #96	; 0x60
 8001638:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 800163a:	2302      	movs	r3, #2
 800163c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001642:	2304      	movs	r3, #4
 8001644:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	220c      	movs	r2, #12
 800164a:	4619      	mov	r1, r3
 800164c:	4807      	ldr	r0, [pc, #28]	; (800166c <MX_TIM2_Init+0xe8>)
 800164e:	f006 ffcd 	bl	80085ec <HAL_TIM_PWM_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001658:	f000 fa8d 	bl	8001b76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <MX_TIM2_Init+0xe8>)
 800165e:	f000 fe11 	bl	8002284 <HAL_TIM_MspPostInit>

}
 8001662:	bf00      	nop
 8001664:	3738      	adds	r7, #56	; 0x38
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	24000120 	.word	0x24000120

08001670 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	; 0x38
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001690:	463b      	mov	r3, r7
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <MX_TIM3_Init+0xe8>)
 80016a4:	4a2d      	ldr	r2, [pc, #180]	; (800175c <MX_TIM3_Init+0xec>)
 80016a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <MX_TIM3_Init+0xe8>)
 80016aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80016ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b29      	ldr	r3, [pc, #164]	; (8001758 <MX_TIM3_Init+0xe8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80016b6:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_TIM3_Init+0xe8>)
 80016b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80016bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <MX_TIM3_Init+0xe8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b24      	ldr	r3, [pc, #144]	; (8001758 <MX_TIM3_Init+0xe8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ca:	4823      	ldr	r0, [pc, #140]	; (8001758 <MX_TIM3_Init+0xe8>)
 80016cc:	f006 fd57 	bl	800817e <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80016d6:	f000 fa4e 	bl	8001b76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e4:	4619      	mov	r1, r3
 80016e6:	481c      	ldr	r0, [pc, #112]	; (8001758 <MX_TIM3_Init+0xe8>)
 80016e8:	f007 f894 	bl	8008814 <HAL_TIM_ConfigClockSource>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80016f2:	f000 fa40 	bl	8001b76 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016f6:	4818      	ldr	r0, [pc, #96]	; (8001758 <MX_TIM3_Init+0xe8>)
 80016f8:	f006 fe08 	bl	800830c <HAL_TIM_PWM_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001702:	f000 fa38 	bl	8001b76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	4810      	ldr	r0, [pc, #64]	; (8001758 <MX_TIM3_Init+0xe8>)
 8001716:	f007 fda9 	bl	800926c <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001720:	f000 fa29 	bl	8001b76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001724:	2360      	movs	r3, #96	; 0x60
 8001726:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	2208      	movs	r2, #8
 8001738:	4619      	mov	r1, r3
 800173a:	4807      	ldr	r0, [pc, #28]	; (8001758 <MX_TIM3_Init+0xe8>)
 800173c:	f006 ff56 	bl	80085ec <HAL_TIM_PWM_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001746:	f000 fa16 	bl	8001b76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800174a:	4803      	ldr	r0, [pc, #12]	; (8001758 <MX_TIM3_Init+0xe8>)
 800174c:	f000 fd9a 	bl	8002284 <HAL_TIM_MspPostInit>

}
 8001750:	bf00      	nop
 8001752:	3738      	adds	r7, #56	; 0x38
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2400016c 	.word	0x2400016c
 800175c:	40000400 	.word	0x40000400

08001760 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001766:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <MX_USART3_UART_Init+0x94>)
 8001768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a8:	4811      	ldr	r0, [pc, #68]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017aa:	f007 fded 	bl	8009388 <HAL_UART_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017b4:	f000 f9df 	bl	8001b76 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b8:	2100      	movs	r1, #0
 80017ba:	480d      	ldr	r0, [pc, #52]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017bc:	f008 ff81 	bl	800a6c2 <HAL_UARTEx_SetTxFifoThreshold>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017c6:	f000 f9d6 	bl	8001b76 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017ce:	f008 ffb6 	bl	800a73e <HAL_UARTEx_SetRxFifoThreshold>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017d8:	f000 f9cd 	bl	8001b76 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017de:	f008 ff37 	bl	800a650 <HAL_UARTEx_DisableFifoMode>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017e8:	f000 f9c5 	bl	8001b76 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	240001b8 	.word	0x240001b8
 80017f4:	40004800 	.word	0x40004800

080017f8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <MX_DMA_Init+0xb0>)
 8001810:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001814:	4a28      	ldr	r2, [pc, #160]	; (80018b8 <MX_DMA_Init+0xb0>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <MX_DMA_Init+0xb0>)
 8001820:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <MX_DMA_Init+0xb4>)
 800182e:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <MX_DMA_Init+0xb8>)
 8001830:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <MX_DMA_Init+0xb4>)
 8001834:	2201      	movs	r2, #1
 8001836:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <MX_DMA_Init+0xb4>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_ENABLE;
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <MX_DMA_Init+0xb4>)
 8001840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001844:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_DMA_Init+0xb4>)
 8001848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184c:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MX_DMA_Init+0xb4>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_DMA_Init+0xb4>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_DMA_Init+0xb4>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_DMA_Init+0xb4>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <MX_DMA_Init+0xb4>)
 8001868:	2204      	movs	r2, #4
 800186a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_dma_generator0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_DMA_Init+0xb4>)
 800186e:	2203      	movs	r2, #3
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_dma_generator0.Init.MemBurst = DMA_MBURST_SINGLE;
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_DMA_Init+0xb4>)
 8001874:	2200      	movs	r2, #0
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_dma_generator0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <MX_DMA_Init+0xb4>)
 800187a:	2200      	movs	r2, #0
 800187c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 800187e:	480f      	ldr	r0, [pc, #60]	; (80018bc <MX_DMA_Init+0xb4>)
 8001880:	f001 f928 	bl	8002ad4 <HAL_DMA_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_DMA_Init+0x86>
  {
    Error_Handler( );
 800188a:	f000 f974 	bl	8001b76 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	200c      	movs	r0, #12
 8001894:	f001 f8e9 	bl	8002a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001898:	200c      	movs	r0, #12
 800189a:	f001 f900 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	200d      	movs	r0, #13
 80018a4:	f001 f8e1 	bl	8002a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80018a8:	200d      	movs	r0, #13
 80018aa:	f001 f8f8 	bl	8002a9e <HAL_NVIC_EnableIRQ>

}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	58024400 	.word	0x58024400
 80018bc:	2400033c 	.word	0x2400033c
 80018c0:	40020010 	.word	0x40020010

080018c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08e      	sub	sp, #56	; 0x38
 80018c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018da:	4b97      	ldr	r3, [pc, #604]	; (8001b38 <MX_GPIO_Init+0x274>)
 80018dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018e0:	4a95      	ldr	r2, [pc, #596]	; (8001b38 <MX_GPIO_Init+0x274>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018ea:	4b93      	ldr	r3, [pc, #588]	; (8001b38 <MX_GPIO_Init+0x274>)
 80018ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	623b      	str	r3, [r7, #32]
 80018f6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f8:	4b8f      	ldr	r3, [pc, #572]	; (8001b38 <MX_GPIO_Init+0x274>)
 80018fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018fe:	4a8e      	ldr	r2, [pc, #568]	; (8001b38 <MX_GPIO_Init+0x274>)
 8001900:	f043 0320 	orr.w	r3, r3, #32
 8001904:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001908:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <MX_GPIO_Init+0x274>)
 800190a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001916:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <MX_GPIO_Init+0x274>)
 8001918:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800191c:	4a86      	ldr	r2, [pc, #536]	; (8001b38 <MX_GPIO_Init+0x274>)
 800191e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001922:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001926:	4b84      	ldr	r3, [pc, #528]	; (8001b38 <MX_GPIO_Init+0x274>)
 8001928:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800192c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <MX_GPIO_Init+0x274>)
 8001936:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800193a:	4a7f      	ldr	r2, [pc, #508]	; (8001b38 <MX_GPIO_Init+0x274>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001944:	4b7c      	ldr	r3, [pc, #496]	; (8001b38 <MX_GPIO_Init+0x274>)
 8001946:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	4b79      	ldr	r3, [pc, #484]	; (8001b38 <MX_GPIO_Init+0x274>)
 8001954:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001958:	4a77      	ldr	r2, [pc, #476]	; (8001b38 <MX_GPIO_Init+0x274>)
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001962:	4b75      	ldr	r3, [pc, #468]	; (8001b38 <MX_GPIO_Init+0x274>)
 8001964:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001970:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <MX_GPIO_Init+0x274>)
 8001972:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001976:	4a70      	ldr	r2, [pc, #448]	; (8001b38 <MX_GPIO_Init+0x274>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001980:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <MX_GPIO_Init+0x274>)
 8001982:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800198e:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <MX_GPIO_Init+0x274>)
 8001990:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001994:	4a68      	ldr	r2, [pc, #416]	; (8001b38 <MX_GPIO_Init+0x274>)
 8001996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800199a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800199e:	4b66      	ldr	r3, [pc, #408]	; (8001b38 <MX_GPIO_Init+0x274>)
 80019a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ac:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <MX_GPIO_Init+0x274>)
 80019ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019b2:	4a61      	ldr	r2, [pc, #388]	; (8001b38 <MX_GPIO_Init+0x274>)
 80019b4:	f043 0310 	orr.w	r3, r3, #16
 80019b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019bc:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <MX_GPIO_Init+0x274>)
 80019be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d0:	485a      	ldr	r0, [pc, #360]	; (8001b3c <MX_GPIO_Init+0x278>)
 80019d2:	f002 ff5b 	bl	800488c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019dc:	4858      	ldr	r0, [pc, #352]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80019de:	f002 ff55 	bl	800488c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SDCard_CS_GPIO_Port, SPI1_SDCard_CS_Pin, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e8:	4856      	ldr	r0, [pc, #344]	; (8001b44 <MX_GPIO_Init+0x280>)
 80019ea:	f002 ff4f 	bl	800488c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2102      	movs	r1, #2
 80019f2:	4855      	ldr	r0, [pc, #340]	; (8001b48 <MX_GPIO_Init+0x284>)
 80019f4:	f002 ff4a 	bl	800488c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	484f      	ldr	r0, [pc, #316]	; (8001b4c <MX_GPIO_Init+0x288>)
 8001a10:	f002 fd8c 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4843      	ldr	r0, [pc, #268]	; (8001b3c <MX_GPIO_Init+0x278>)
 8001a2e:	f002 fd7d 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001a32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	4619      	mov	r1, r3
 8001a4a:	483d      	ldr	r0, [pc, #244]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001a4c:	f002 fd6e 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SDCard_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_SDCard_CS_Pin;
 8001a50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_SDCard_CS_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a66:	4619      	mov	r1, r3
 8001a68:	4836      	ldr	r0, [pc, #216]	; (8001b44 <MX_GPIO_Init+0x280>)
 8001a6a:	f002 fd5f 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a80:	4619      	mov	r1, r3
 8001a82:	4833      	ldr	r0, [pc, #204]	; (8001b50 <MX_GPIO_Init+0x28c>)
 8001a84:	f002 fd52 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a9a:	230c      	movs	r3, #12
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4829      	ldr	r0, [pc, #164]	; (8001b4c <MX_GPIO_Init+0x288>)
 8001aa6:	f002 fd41 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001aaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abc:	4619      	mov	r1, r3
 8001abe:	4825      	ldr	r0, [pc, #148]	; (8001b54 <MX_GPIO_Init+0x290>)
 8001ac0:	f002 fd34 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ade:	4619      	mov	r1, r3
 8001ae0:	481c      	ldr	r0, [pc, #112]	; (8001b54 <MX_GPIO_Init+0x290>)
 8001ae2:	f002 fd23 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001ae6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afc:	4619      	mov	r1, r3
 8001afe:	4815      	ldr	r0, [pc, #84]	; (8001b54 <MX_GPIO_Init+0x290>)
 8001b00:	f002 fd14 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b04:	2302      	movs	r3, #2
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480b      	ldr	r0, [pc, #44]	; (8001b48 <MX_GPIO_Init+0x284>)
 8001b1c:	f002 fd06 	bl	800452c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2100      	movs	r1, #0
 8001b24:	2028      	movs	r0, #40	; 0x28
 8001b26:	f000 ffa0 	bl	8002a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b2a:	2028      	movs	r0, #40	; 0x28
 8001b2c:	f000 ffb7 	bl	8002a9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b30:	bf00      	nop
 8001b32:	3738      	adds	r7, #56	; 0x38
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	58024400 	.word	0x58024400
 8001b3c:	58021400 	.word	0x58021400
 8001b40:	58020400 	.word	0x58020400
 8001b44:	58020c00 	.word	0x58020c00
 8001b48:	58021000 	.word	0x58021000
 8001b4c:	58020800 	.word	0x58020800
 8001b50:	58021800 	.word	0x58021800
 8001b54:	58020000 	.word	0x58020000

08001b58 <HAL_GPIO_EXTI_Callback>:
	    f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
}
#endif


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_EXTI_Callback+0x16>
			//timerefresh_wwdg = 1000;
			SDCard_init_scr();
 8001b6a:	f7ff faa1 	bl	80010b0 <SDCard_init_scr>
		}
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7a:	b672      	cpsid	i
}
 8001b7c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <Error_Handler+0x8>

08001b80 <SDCARD_Select>:
/* vim: set ai et ts=4 sw=4: */

#include "sdcard.h"

static void SDCARD_Select() {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b8a:	4802      	ldr	r0, [pc, #8]	; (8001b94 <SDCARD_Select+0x14>)
 8001b8c:	f002 fe7e 	bl	800488c <HAL_GPIO_WritePin>
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58020c00 	.word	0x58020c00

08001b98 <SDCARD_Unselect>:

void SDCARD_Unselect() {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba2:	4802      	ldr	r0, [pc, #8]	; (8001bac <SDCARD_Unselect+0x14>)
 8001ba4:	f002 fe72 	bl	800488c <HAL_GPIO_WritePin>
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	58020c00 	.word	0x58020c00

08001bb0 <SDCARD_ReadR1>:
     ||`----- 5th bit (c): error in the sequence of erase commands
     |`------ 6th bit (b): misaligned addres used in command
     `------- 7th bit (a): command argument outside allowed range
             (8th bit is always zero)
*/
static uint8_t SDCARD_ReadR1() {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af02      	add	r7, sp, #8
    uint8_t r1;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8001bb6:	23ff      	movs	r3, #255	; 0xff
 8001bb8:	71bb      	strb	r3, [r7, #6]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8001bba:	1dfa      	adds	r2, r7, #7
 8001bbc:	1db9      	adds	r1, r7, #6
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <SDCARD_ReadR1+0x34>)
 8001bc8:	f005 ffc6 	bl	8007b58 <HAL_SPI_TransmitReceive>
        if((r1 & 0x80) == 0) // 8th bit alwyas zero, r1 recevied
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	da00      	bge.n	8001bd6 <SDCARD_ReadR1+0x26>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8001bd4:	e7f1      	b.n	8001bba <SDCARD_ReadR1+0xa>
            break;
 8001bd6:	bf00      	nop
    }
    return r1;
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	24000098 	.word	0x24000098

08001be8 <SDCARD_WaitDataToken>:
#define DATA_TOKEN_CMD17 0xFE
#define DATA_TOKEN_CMD18 0xFE
#define DATA_TOKEN_CMD24 0xFE
#define DATA_TOKEN_CMD25 0xFC

static int SDCARD_WaitDataToken(uint8_t token) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
    uint8_t fb;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8001bf2:	23ff      	movs	r3, #255	; 0xff
 8001bf4:	73bb      	strb	r3, [r7, #14]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &fb, sizeof(fb), HAL_MAX_DELAY);
 8001bf6:	f107 020f 	add.w	r2, r7, #15
 8001bfa:	f107 010e 	add.w	r1, r7, #14
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2301      	movs	r3, #1
 8001c06:	4809      	ldr	r0, [pc, #36]	; (8001c2c <SDCARD_WaitDataToken+0x44>)
 8001c08:	f005 ffa6 	bl	8007b58 <HAL_SPI_TransmitReceive>
        if(fb == token)
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	79fa      	ldrb	r2, [r7, #7]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d005      	beq.n	8001c20 <SDCARD_WaitDataToken+0x38>
            break;

        if(fb != 0xFF)
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	2bff      	cmp	r3, #255	; 0xff
 8001c18:	d0ed      	beq.n	8001bf6 <SDCARD_WaitDataToken+0xe>
            return -1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e001      	b.n	8001c24 <SDCARD_WaitDataToken+0x3c>
            break;
 8001c20:	bf00      	nop
    }
    return 0;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	24000098 	.word	0x24000098

08001c30 <SDCARD_ReadBytes>:

static int SDCARD_ReadBytes(uint8_t* buff, size_t buff_size) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8001c3a:	23ff      	movs	r3, #255	; 0xff
 8001c3c:	73fb      	strb	r3, [r7, #15]
    while(buff_size > 0) {
 8001c3e:	e00f      	b.n	8001c60 <SDCARD_ReadBytes+0x30>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 8001c40:	f107 010f 	add.w	r1, r7, #15
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4808      	ldr	r0, [pc, #32]	; (8001c70 <SDCARD_ReadBytes+0x40>)
 8001c50:	f005 ff82 	bl	8007b58 <HAL_SPI_TransmitReceive>
        buff++;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3301      	adds	r3, #1
 8001c58:	607b      	str	r3, [r7, #4]
        buff_size--;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ec      	bne.n	8001c40 <SDCARD_ReadBytes+0x10>
    }

    return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	24000098 	.word	0x24000098

08001c74 <SDCARD_WaitNotBusy>:

static int SDCARD_WaitNotBusy() {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
    uint8_t busy;
    do {
        if(SDCARD_ReadBytes(&busy, sizeof(busy)) < 0) {
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ffd6 	bl	8001c30 <SDCARD_ReadBytes>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	da02      	bge.n	8001c90 <SDCARD_WaitNotBusy+0x1c>
            return -1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	e003      	b.n	8001c98 <SDCARD_WaitNotBusy+0x24>
        }
    } while(busy != 0xFF);
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2bff      	cmp	r3, #255	; 0xff
 8001c94:	d1f1      	bne.n	8001c7a <SDCARD_WaitNotBusy+0x6>

    return 0;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <SDCARD_Init>:
 
int SDCARD_Init() {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0

    Set DI and CS high and apply 74 or more clock pulses to SCLK. Without this
    step under certain circumstances SD-card will not work. For instance, when
    multiple SPI devices are sharing the same bus (i.e. MISO, MOSI, CS).
    */
    SDCARD_Unselect();
 8001ca6:	f7ff ff77 	bl	8001b98 <SDCARD_Unselect>

    uint8_t high = 0xFF;
 8001caa:	23ff      	movs	r3, #255	; 0xff
 8001cac:	72bb      	strb	r3, [r7, #10]
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e00a      	b.n	8001cca <SDCARD_Init+0x2a>
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, &high, sizeof(high), HAL_MAX_DELAY);
 8001cb4:	f107 010a 	add.w	r1, r7, #10
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4868      	ldr	r0, [pc, #416]	; (8001e60 <SDCARD_Init+0x1c0>)
 8001cc0:	f005 fd4e 	bl	8007760 <HAL_SPI_Transmit>
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b09      	cmp	r3, #9
 8001cce:	ddf1      	ble.n	8001cb4 <SDCARD_Init+0x14>
    }

    SDCARD_Select();
 8001cd0:	f7ff ff56 	bl	8001b80 <SDCARD_Select>
    /*
    Step 2.
    
    Send CMD0 (GO_IDLE_STATE): Reset the SD card.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001cd4:	f7ff ffce 	bl	8001c74 <SDCARD_WaitNotBusy>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da04      	bge.n	8001ce8 <SDCARD_Init+0x48>
        SDCARD_Unselect();
 8001cde:	f7ff ff5b 	bl	8001b98 <SDCARD_Unselect>
        return -1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e0b6      	b.n	8001e56 <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x00 /* CMD0 */, 0x00, 0x00, 0x00, 0x00 /* ARG = 0 */, (0x4A << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cec:	2206      	movs	r2, #6
 8001cee:	495d      	ldr	r1, [pc, #372]	; (8001e64 <SDCARD_Init+0x1c4>)
 8001cf0:	485b      	ldr	r0, [pc, #364]	; (8001e60 <SDCARD_Init+0x1c0>)
 8001cf2:	f005 fd35 	bl	8007760 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8001cf6:	f7ff ff5b 	bl	8001bb0 <SDCARD_ReadR1>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d004      	beq.n	8001d0a <SDCARD_Init+0x6a>
        SDCARD_Unselect();
 8001d00:	f7ff ff4a 	bl	8001b98 <SDCARD_Unselect>
        return -1;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	e0a5      	b.n	8001e56 <SDCARD_Init+0x1b6>
    MMC version 3. If accepted, R7 response (R1(0x01) + 32-bit return value)
    will be returned. The lower 12 bits in the return value 0x1AA means that
    the card is SDC version 2 and it can work at voltage range of 2.7 to 3.6
    volts. If not the case, the card should be rejected.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001d0a:	f7ff ffb3 	bl	8001c74 <SDCARD_WaitNotBusy>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	da04      	bge.n	8001d1e <SDCARD_Init+0x7e>
        SDCARD_Unselect();
 8001d14:	f7ff ff40 	bl	8001b98 <SDCARD_Unselect>
        return -1;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1c:	e09b      	b.n	8001e56 <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x08 /* CMD8 */, 0x00, 0x00, 0x01, 0xAA /* ARG */, (0x43 << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d22:	2206      	movs	r2, #6
 8001d24:	4950      	ldr	r1, [pc, #320]	; (8001e68 <SDCARD_Init+0x1c8>)
 8001d26:	484e      	ldr	r0, [pc, #312]	; (8001e60 <SDCARD_Init+0x1c0>)
 8001d28:	f005 fd1a 	bl	8007760 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8001d2c:	f7ff ff40 	bl	8001bb0 <SDCARD_ReadR1>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d004      	beq.n	8001d40 <SDCARD_Init+0xa0>
        SDCARD_Unselect();
 8001d36:	f7ff ff2f 	bl	8001b98 <SDCARD_Unselect>
        return -2; // not an SDHC/SDXC card (i.e. SDSC, not supported)
 8001d3a:	f06f 0301 	mvn.w	r3, #1
 8001d3e:	e08a      	b.n	8001e56 <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2104      	movs	r1, #4
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff73 	bl	8001c30 <SDCARD_ReadBytes>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	da04      	bge.n	8001d5a <SDCARD_Init+0xba>
            SDCARD_Unselect();
 8001d50:	f7ff ff22 	bl	8001b98 <SDCARD_Unselect>
            return -3;
 8001d54:	f06f 0302 	mvn.w	r3, #2
 8001d58:	e07d      	b.n	8001e56 <SDCARD_Init+0x1b6>
        }

        if(((resp[2] & 0x01) != 1) || (resp[3] != 0xAA)) {
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <SDCARD_Init+0xca>
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	2baa      	cmp	r3, #170	; 0xaa
 8001d68:	d004      	beq.n	8001d74 <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 8001d6a:	f7ff ff15 	bl	8001b98 <SDCARD_Unselect>
            return -4;
 8001d6e:	f06f 0303 	mvn.w	r3, #3
 8001d72:	e070      	b.n	8001e56 <SDCARD_Init+0x1b6>
    Step 4.

    And then initiate initialization with ACMD41 with HCS flag (bit 30).
    */
    for(;;) {
        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001d74:	f7ff ff7e 	bl	8001c74 <SDCARD_WaitNotBusy>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	da04      	bge.n	8001d88 <SDCARD_Init+0xe8>
            SDCARD_Unselect();
 8001d7e:	f7ff ff0b 	bl	8001b98 <SDCARD_Unselect>
            return -1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	e066      	b.n	8001e56 <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x37 /* CMD55 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	2206      	movs	r2, #6
 8001d8e:	4937      	ldr	r1, [pc, #220]	; (8001e6c <SDCARD_Init+0x1cc>)
 8001d90:	4833      	ldr	r0, [pc, #204]	; (8001e60 <SDCARD_Init+0x1c0>)
 8001d92:	f005 fce5 	bl	8007760 <HAL_SPI_Transmit>
        }

        if(SDCARD_ReadR1() != 0x01) {
 8001d96:	f7ff ff0b 	bl	8001bb0 <SDCARD_ReadR1>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d004      	beq.n	8001daa <SDCARD_Init+0x10a>
            SDCARD_Unselect();
 8001da0:	f7ff fefa 	bl	8001b98 <SDCARD_Unselect>
            return -5;
 8001da4:	f06f 0304 	mvn.w	r3, #4
 8001da8:	e055      	b.n	8001e56 <SDCARD_Init+0x1b6>
        }

        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001daa:	f7ff ff63 	bl	8001c74 <SDCARD_WaitNotBusy>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da04      	bge.n	8001dbe <SDCARD_Init+0x11e>
            SDCARD_Unselect();
 8001db4:	f7ff fef0 	bl	8001b98 <SDCARD_Unselect>
            return -1;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	e04b      	b.n	8001e56 <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x29 /* ACMD41 */, 0x40, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	2206      	movs	r2, #6
 8001dc4:	492a      	ldr	r1, [pc, #168]	; (8001e70 <SDCARD_Init+0x1d0>)
 8001dc6:	4826      	ldr	r0, [pc, #152]	; (8001e60 <SDCARD_Init+0x1c0>)
 8001dc8:	f005 fcca 	bl	8007760 <HAL_SPI_Transmit>
        }

        uint8_t r1 = SDCARD_ReadR1();
 8001dcc:	f7ff fef0 	bl	8001bb0 <SDCARD_ReadR1>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	72fb      	strb	r3, [r7, #11]
        if(r1 == 0x00) {
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d007      	beq.n	8001dea <SDCARD_Init+0x14a>
            break;
        }

        if(r1 != 0x01) {
 8001dda:	7afb      	ldrb	r3, [r7, #11]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d0c9      	beq.n	8001d74 <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 8001de0:	f7ff feda 	bl	8001b98 <SDCARD_Unselect>
            return -6;
 8001de4:	f06f 0305 	mvn.w	r3, #5
 8001de8:	e035      	b.n	8001e56 <SDCARD_Init+0x1b6>
            break;
 8001dea:	bf00      	nop

    After the initialization completed, read OCR register with CMD58 and check
    CCS flag (bit 30). When it is set, the card is a high-capacity card known
    as SDHC/SDXC.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001dec:	f7ff ff42 	bl	8001c74 <SDCARD_WaitNotBusy>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	da04      	bge.n	8001e00 <SDCARD_Init+0x160>
        SDCARD_Unselect();
 8001df6:	f7ff fecf 	bl	8001b98 <SDCARD_Unselect>
        return -1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	e02a      	b.n	8001e56 <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x3A /* CMD58 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
 8001e04:	2206      	movs	r2, #6
 8001e06:	491b      	ldr	r1, [pc, #108]	; (8001e74 <SDCARD_Init+0x1d4>)
 8001e08:	4815      	ldr	r0, [pc, #84]	; (8001e60 <SDCARD_Init+0x1c0>)
 8001e0a:	f005 fca9 	bl	8007760 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 8001e0e:	f7ff fecf 	bl	8001bb0 <SDCARD_ReadR1>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <SDCARD_Init+0x182>
        SDCARD_Unselect();
 8001e18:	f7ff febe 	bl	8001b98 <SDCARD_Unselect>
        return -7;
 8001e1c:	f06f 0306 	mvn.w	r3, #6
 8001e20:	e019      	b.n	8001e56 <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 8001e22:	463b      	mov	r3, r7
 8001e24:	2104      	movs	r1, #4
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff02 	bl	8001c30 <SDCARD_ReadBytes>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da04      	bge.n	8001e3c <SDCARD_Init+0x19c>
            SDCARD_Unselect();
 8001e32:	f7ff feb1 	bl	8001b98 <SDCARD_Unselect>
            return -8;
 8001e36:	f06f 0307 	mvn.w	r3, #7
 8001e3a:	e00c      	b.n	8001e56 <SDCARD_Init+0x1b6>
        }

        if((resp[0] & 0xC0) != 0xC0) {
 8001e3c:	783b      	ldrb	r3, [r7, #0]
 8001e3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001e42:	2bc0      	cmp	r3, #192	; 0xc0
 8001e44:	d004      	beq.n	8001e50 <SDCARD_Init+0x1b0>
            SDCARD_Unselect();
 8001e46:	f7ff fea7 	bl	8001b98 <SDCARD_Unselect>
            return -9;
 8001e4a:	f06f 0308 	mvn.w	r3, #8
 8001e4e:	e002      	b.n	8001e56 <SDCARD_Init+0x1b6>
        }
    }

    SDCARD_Unselect();
 8001e50:	f7ff fea2 	bl	8001b98 <SDCARD_Unselect>
    return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	24000098 	.word	0x24000098
 8001e64:	0800b68c 	.word	0x0800b68c
 8001e68:	0800b694 	.word	0x0800b694
 8001e6c:	0800b69c 	.word	0x0800b69c
 8001e70:	0800b6a4 	.word	0x0800b6a4
 8001e74:	0800b6ac 	.word	0x0800b6ac

08001e78 <SDCARD_GetBlocksNumber>:


int SDCARD_GetBlocksNumber(uint32_t* num) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    uint8_t csd[16];
    uint8_t crc[2];

    SDCARD_Select();
 8001e80:	f7ff fe7e 	bl	8001b80 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001e84:	f7ff fef6 	bl	8001c74 <SDCARD_WaitNotBusy>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	da04      	bge.n	8001e98 <SDCARD_GetBlocksNumber+0x20>
        SDCARD_Unselect();
 8001e8e:	f7ff fe83 	bl	8001b98 <SDCARD_Unselect>
        return -1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	e057      	b.n	8001f48 <SDCARD_GetBlocksNumber+0xd0>

    /* CMD9 (SEND_CSD) command */
    {
        static const uint8_t cmd[] =
            { 0x40 | 0x09 /* CMD9 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001e98:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9c:	2206      	movs	r2, #6
 8001e9e:	492c      	ldr	r1, [pc, #176]	; (8001f50 <SDCARD_GetBlocksNumber+0xd8>)
 8001ea0:	482c      	ldr	r0, [pc, #176]	; (8001f54 <SDCARD_GetBlocksNumber+0xdc>)
 8001ea2:	f005 fc5d 	bl	8007760 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 8001ea6:	f7ff fe83 	bl	8001bb0 <SDCARD_ReadR1>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d004      	beq.n	8001eba <SDCARD_GetBlocksNumber+0x42>
        SDCARD_Unselect();
 8001eb0:	f7ff fe72 	bl	8001b98 <SDCARD_Unselect>
        return -2;
 8001eb4:	f06f 0301 	mvn.w	r3, #1
 8001eb8:	e046      	b.n	8001f48 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD9) < 0) {
 8001eba:	20fe      	movs	r0, #254	; 0xfe
 8001ebc:	f7ff fe94 	bl	8001be8 <SDCARD_WaitDataToken>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	da04      	bge.n	8001ed0 <SDCARD_GetBlocksNumber+0x58>
        SDCARD_Unselect();
 8001ec6:	f7ff fe67 	bl	8001b98 <SDCARD_Unselect>
        return -3;
 8001eca:	f06f 0302 	mvn.w	r3, #2
 8001ece:	e03b      	b.n	8001f48 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(csd, sizeof(csd)) < 0) {
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	2110      	movs	r1, #16
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff feaa 	bl	8001c30 <SDCARD_ReadBytes>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	da04      	bge.n	8001eec <SDCARD_GetBlocksNumber+0x74>
        SDCARD_Unselect();
 8001ee2:	f7ff fe59 	bl	8001b98 <SDCARD_Unselect>
        return -4;
 8001ee6:	f06f 0303 	mvn.w	r3, #3
 8001eea:	e02d      	b.n	8001f48 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(crc, sizeof(crc)) < 0) {
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fe9c 	bl	8001c30 <SDCARD_ReadBytes>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	da04      	bge.n	8001f08 <SDCARD_GetBlocksNumber+0x90>
        SDCARD_Unselect();
 8001efe:	f7ff fe4b 	bl	8001b98 <SDCARD_Unselect>
        return -5;
 8001f02:	f06f 0304 	mvn.w	r3, #4
 8001f06:	e01f      	b.n	8001f48 <SDCARD_GetBlocksNumber+0xd0>
    }

    SDCARD_Unselect();
 8001f08:	f7ff fe46 	bl	8001b98 <SDCARD_Unselect>

    // first byte is VVxxxxxxxx where VV is csd.version
    if((csd[0] & 0xC0) != 0x40) // csd.version != 1
 8001f0c:	7b3b      	ldrb	r3, [r7, #12]
 8001f0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d002      	beq.n	8001f1c <SDCARD_GetBlocksNumber+0xa4>
        return -6;
 8001f16:	f06f 0305 	mvn.w	r3, #5
 8001f1a:	e015      	b.n	8001f48 <SDCARD_GetBlocksNumber+0xd0>

    uint32_t tmp = csd[7] & 0x3F; // two bits are reserved
 8001f1c:	7cfb      	ldrb	r3, [r7, #19]
 8001f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f22:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[8];
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	7d3a      	ldrb	r2, [r7, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[9];
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	7d7a      	ldrb	r2, [r7, #21]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61fb      	str	r3, [r7, #28]
    // Full volume: (C_SIZE+1)*512KByte == (C_SIZE+1)<<19
    // Block size: 512Byte == 1<<9
    // Blocks number: CARD_SIZE/BLOCK_SIZE = (C_SIZE+1)*(1<<19) / (1<<9) = (C_SIZE+1)*(1<<10)
    tmp = (tmp + 1) << 10;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	029b      	lsls	r3, r3, #10
 8001f3e:	61fb      	str	r3, [r7, #28]
    *num = tmp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	601a      	str	r2, [r3, #0]

    return 0;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3720      	adds	r7, #32
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	0800b6b4 	.word	0x0800b6b4
 8001f54:	24000098 	.word	0x24000098

08001f58 <SDCARD_ReadSingleBlock>:

int SDCARD_ReadSingleBlock(uint32_t blockNum, uint8_t* buff) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
    uint8_t crc[2];

    SDCARD_Select();
 8001f62:	f7ff fe0d 	bl	8001b80 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001f66:	f7ff fe85 	bl	8001c74 <SDCARD_WaitNotBusy>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	da04      	bge.n	8001f7a <SDCARD_ReadSingleBlock+0x22>
        SDCARD_Unselect();
 8001f70:	f7ff fe12 	bl	8001b98 <SDCARD_Unselect>
        return -1;
 8001f74:	f04f 33ff 	mov.w	r3, #4294967295
 8001f78:	e04d      	b.n	8002016 <SDCARD_ReadSingleBlock+0xbe>
    }

    /* CMD17 (SEND_SINGLE_BLOCK) command */
    uint8_t cmd[] = {
 8001f7a:	2351      	movs	r3, #81	; 0x51
 8001f7c:	733b      	strb	r3, [r7, #12]
        0x40 | 0x11 /* CMD17 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	737b      	strb	r3, [r7, #13]
        (blockNum >> 16) & 0xFF,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	73bb      	strb	r3, [r7, #14]
        (blockNum >> 8) & 0xFF,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	743b      	strb	r3, [r7, #16]
 8001f9c:	23ff      	movs	r3, #255	; 0xff
 8001f9e:	747b      	strb	r3, [r7, #17]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001fa0:	f107 010c 	add.w	r1, r7, #12
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa8:	2206      	movs	r2, #6
 8001faa:	481d      	ldr	r0, [pc, #116]	; (8002020 <SDCARD_ReadSingleBlock+0xc8>)
 8001fac:	f005 fbd8 	bl	8007760 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8001fb0:	f7ff fdfe 	bl	8001bb0 <SDCARD_ReadR1>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d004      	beq.n	8001fc4 <SDCARD_ReadSingleBlock+0x6c>
        SDCARD_Unselect();
 8001fba:	f7ff fded 	bl	8001b98 <SDCARD_Unselect>
        return -2;
 8001fbe:	f06f 0301 	mvn.w	r3, #1
 8001fc2:	e028      	b.n	8002016 <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD17) < 0) {
 8001fc4:	20fe      	movs	r0, #254	; 0xfe
 8001fc6:	f7ff fe0f 	bl	8001be8 <SDCARD_WaitDataToken>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	da04      	bge.n	8001fda <SDCARD_ReadSingleBlock+0x82>
        SDCARD_Unselect();
 8001fd0:	f7ff fde2 	bl	8001b98 <SDCARD_Unselect>
        return -3;
 8001fd4:	f06f 0302 	mvn.w	r3, #2
 8001fd8:	e01d      	b.n	8002016 <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_ReadBytes(buff, 512) < 0) {
 8001fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fde:	6838      	ldr	r0, [r7, #0]
 8001fe0:	f7ff fe26 	bl	8001c30 <SDCARD_ReadBytes>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	da04      	bge.n	8001ff4 <SDCARD_ReadSingleBlock+0x9c>
        SDCARD_Unselect();
 8001fea:	f7ff fdd5 	bl	8001b98 <SDCARD_Unselect>
        return -4;
 8001fee:	f06f 0303 	mvn.w	r3, #3
 8001ff2:	e010      	b.n	8002016 <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_ReadBytes(crc, 2) < 0) {
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fe18 	bl	8001c30 <SDCARD_ReadBytes>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	da04      	bge.n	8002010 <SDCARD_ReadSingleBlock+0xb8>
        SDCARD_Unselect();
 8002006:	f7ff fdc7 	bl	8001b98 <SDCARD_Unselect>
        return -5;
 800200a:	f06f 0304 	mvn.w	r3, #4
 800200e:	e002      	b.n	8002016 <SDCARD_ReadSingleBlock+0xbe>
    }

    SDCARD_Unselect();
 8002010:	f7ff fdc2 	bl	8001b98 <SDCARD_Unselect>
    return 0;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	24000098 	.word	0x24000098

08002024 <SDCARD_WriteSingleBlock>:


int SDCARD_WriteSingleBlock(uint32_t blockNum, const uint8_t* buff) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
    SDCARD_Select();
 800202e:	f7ff fda7 	bl	8001b80 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8002032:	f7ff fe1f 	bl	8001c74 <SDCARD_WaitNotBusy>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	da04      	bge.n	8002046 <SDCARD_WriteSingleBlock+0x22>
        SDCARD_Unselect();
 800203c:	f7ff fdac 	bl	8001b98 <SDCARD_Unselect>
        return -1;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	e05e      	b.n	8002104 <SDCARD_WriteSingleBlock+0xe0>
    }

    /* CMD24 (WRITE_BLOCK) command */
    uint8_t cmd[] = {
 8002046:	2358      	movs	r3, #88	; 0x58
 8002048:	743b      	strb	r3, [r7, #16]
        0x40 | 0x18 /* CMD24 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 800204e:	b2db      	uxtb	r3, r3
 8002050:	747b      	strb	r3, [r7, #17]
        (blockNum >> 16) & 0xFF,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 8002056:	b2db      	uxtb	r3, r3
 8002058:	74bb      	strb	r3, [r7, #18]
        (blockNum >> 8) & 0xFF,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 800205e:	b2db      	uxtb	r3, r3
 8002060:	74fb      	strb	r3, [r7, #19]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	753b      	strb	r3, [r7, #20]
 8002068:	23ff      	movs	r3, #255	; 0xff
 800206a:	757b      	strb	r3, [r7, #21]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 800206c:	f107 0110 	add.w	r1, r7, #16
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
 8002074:	2206      	movs	r2, #6
 8002076:	4825      	ldr	r0, [pc, #148]	; (800210c <SDCARD_WriteSingleBlock+0xe8>)
 8002078:	f005 fb72 	bl	8007760 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 800207c:	f7ff fd98 	bl	8001bb0 <SDCARD_ReadR1>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <SDCARD_WriteSingleBlock+0x6c>
        SDCARD_Unselect();
 8002086:	f7ff fd87 	bl	8001b98 <SDCARD_Unselect>
        return -2;
 800208a:	f06f 0301 	mvn.w	r3, #1
 800208e:	e039      	b.n	8002104 <SDCARD_WriteSingleBlock+0xe0>
    }

    uint8_t dataToken = DATA_TOKEN_CMD24;
 8002090:	23fe      	movs	r3, #254	; 0xfe
 8002092:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 8002094:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002098:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 800209a:	f107 010f 	add.w	r1, r7, #15
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	2201      	movs	r2, #1
 80020a4:	4819      	ldr	r0, [pc, #100]	; (800210c <SDCARD_WriteSingleBlock+0xe8>)
 80020a6:	f005 fb5b 	bl	8007760 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b2:	6839      	ldr	r1, [r7, #0]
 80020b4:	4815      	ldr	r0, [pc, #84]	; (800210c <SDCARD_WriteSingleBlock+0xe8>)
 80020b6:	f005 fb53 	bl	8007760 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 80020ba:	f107 010c 	add.w	r1, r7, #12
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	2202      	movs	r2, #2
 80020c4:	4811      	ldr	r0, [pc, #68]	; (800210c <SDCARD_WriteSingleBlock+0xe8>)
 80020c6:	f005 fb4b 	bl	8007760 <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 80020ca:	f107 030b 	add.w	r3, r7, #11
 80020ce:	2101      	movs	r1, #1
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fdad 	bl	8001c30 <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 80020d6:	7afb      	ldrb	r3, [r7, #11]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d004      	beq.n	80020ea <SDCARD_WriteSingleBlock+0xc6>
        SDCARD_Unselect();
 80020e0:	f7ff fd5a 	bl	8001b98 <SDCARD_Unselect>
        return -3;
 80020e4:	f06f 0302 	mvn.w	r3, #2
 80020e8:	e00c      	b.n	8002104 <SDCARD_WriteSingleBlock+0xe0>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 80020ea:	f7ff fdc3 	bl	8001c74 <SDCARD_WaitNotBusy>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da04      	bge.n	80020fe <SDCARD_WriteSingleBlock+0xda>
        SDCARD_Unselect();
 80020f4:	f7ff fd50 	bl	8001b98 <SDCARD_Unselect>
        return -4;
 80020f8:	f06f 0303 	mvn.w	r3, #3
 80020fc:	e002      	b.n	8002104 <SDCARD_WriteSingleBlock+0xe0>
    }

    SDCARD_Unselect();
 80020fe:	f7ff fd4b 	bl	8001b98 <SDCARD_Unselect>
    return 0;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	24000098 	.word	0x24000098

08002110 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_MspInit+0x30>)
 8002118:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800211c:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_MspInit+0x30>)
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_MspInit+0x30>)
 8002128:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	58024400 	.word	0x58024400

08002144 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b0ba      	sub	sp, #232	; 0xe8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	22c0      	movs	r2, #192	; 0xc0
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f008 fccd 	bl	800ab04 <memset>
  if(hspi->Instance==SPI1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a26      	ldr	r2, [pc, #152]	; (8002208 <HAL_SPI_MspInit+0xc4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d144      	bne.n	80021fe <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002174:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002180:	2300      	movs	r3, #0
 8002182:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002184:	f107 0310 	add.w	r3, r7, #16
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fbe5 	bl	8005958 <HAL_RCCEx_PeriphCLKConfig>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002194:	f7ff fcef 	bl	8001b76 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_SPI_MspInit+0xc8>)
 800219a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800219e:	4a1b      	ldr	r2, [pc, #108]	; (800220c <HAL_SPI_MspInit+0xc8>)
 80021a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a4:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80021a8:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_SPI_MspInit+0xc8>)
 80021aa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80021ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_SPI_MspInit+0xc8>)
 80021b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021bc:	4a13      	ldr	r2, [pc, #76]	; (800220c <HAL_SPI_MspInit+0xc8>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_SPI_MspInit+0xc8>)
 80021c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021d4:	23e0      	movs	r3, #224	; 0xe0
 80021d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ec:	2305      	movs	r3, #5
 80021ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <HAL_SPI_MspInit+0xcc>)
 80021fa:	f002 f997 	bl	800452c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	37e8      	adds	r7, #232	; 0xe8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40013000 	.word	0x40013000
 800220c:	58024400 	.word	0x58024400
 8002210:	58020000 	.word	0x58020000

08002214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002224:	d10f      	bne.n	8002246 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_TIM_Base_MspInit+0x68>)
 8002228:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800222c:	4a13      	ldr	r2, [pc, #76]	; (800227c <HAL_TIM_Base_MspInit+0x68>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_TIM_Base_MspInit+0x68>)
 8002238:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002244:	e013      	b.n	800226e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <HAL_TIM_Base_MspInit+0x6c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d10e      	bne.n	800226e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_TIM_Base_MspInit+0x68>)
 8002252:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002256:	4a09      	ldr	r2, [pc, #36]	; (800227c <HAL_TIM_Base_MspInit+0x68>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_TIM_Base_MspInit+0x68>)
 8002262:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	58024400 	.word	0x58024400
 8002280:	40000400 	.word	0x40000400

08002284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a4:	d11f      	bne.n	80022e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_TIM_MspPostInit+0xb4>)
 80022a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80022ac:	4a22      	ldr	r2, [pc, #136]	; (8002338 <HAL_TIM_MspPostInit+0xb4>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_TIM_MspPostInit+0xb4>)
 80022b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022c4:	2308      	movs	r3, #8
 80022c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d0:	2303      	movs	r3, #3
 80022d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022d4:	2301      	movs	r3, #1
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	4619      	mov	r1, r3
 80022de:	4817      	ldr	r0, [pc, #92]	; (800233c <HAL_TIM_MspPostInit+0xb8>)
 80022e0:	f002 f924 	bl	800452c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022e4:	e023      	b.n	800232e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a15      	ldr	r2, [pc, #84]	; (8002340 <HAL_TIM_MspPostInit+0xbc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d11e      	bne.n	800232e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_TIM_MspPostInit+0xb4>)
 80022f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80022f6:	4a10      	ldr	r2, [pc, #64]	; (8002338 <HAL_TIM_MspPostInit+0xb4>)
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_TIM_MspPostInit+0xb4>)
 8002302:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800230e:	2301      	movs	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800231e:	2302      	movs	r3, #2
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4619      	mov	r1, r3
 8002328:	4806      	ldr	r0, [pc, #24]	; (8002344 <HAL_TIM_MspPostInit+0xc0>)
 800232a:	f002 f8ff 	bl	800452c <HAL_GPIO_Init>
}
 800232e:	bf00      	nop
 8002330:	3728      	adds	r7, #40	; 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	58024400 	.word	0x58024400
 800233c:	58020000 	.word	0x58020000
 8002340:	40000400 	.word	0x40000400
 8002344:	58020400 	.word	0x58020400

08002348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0ba      	sub	sp, #232	; 0xe8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002360:	f107 0310 	add.w	r3, r7, #16
 8002364:	22c0      	movs	r2, #192	; 0xc0
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f008 fbcb 	bl	800ab04 <memset>
  if(huart->Instance==USART3)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a55      	ldr	r2, [pc, #340]	; (80024c8 <HAL_UART_MspInit+0x180>)
 8002374:	4293      	cmp	r3, r2
 8002376:	f040 80a2 	bne.w	80024be <HAL_UART_MspInit+0x176>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800237a:	f04f 0202 	mov.w	r2, #2
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fae1 	bl	8005958 <HAL_RCCEx_PeriphCLKConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800239c:	f7ff fbeb 	bl	8001b76 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023a0:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_UART_MspInit+0x184>)
 80023a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023a6:	4a49      	ldr	r2, [pc, #292]	; (80024cc <HAL_UART_MspInit+0x184>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80023b0:	4b46      	ldr	r3, [pc, #280]	; (80024cc <HAL_UART_MspInit+0x184>)
 80023b2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023be:	4b43      	ldr	r3, [pc, #268]	; (80024cc <HAL_UART_MspInit+0x184>)
 80023c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023c4:	4a41      	ldr	r2, [pc, #260]	; (80024cc <HAL_UART_MspInit+0x184>)
 80023c6:	f043 0308 	orr.w	r3, r3, #8
 80023ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80023ce:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <HAL_UART_MspInit+0x184>)
 80023d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023f6:	2307      	movs	r3, #7
 80023f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002400:	4619      	mov	r1, r3
 8002402:	4833      	ldr	r0, [pc, #204]	; (80024d0 <HAL_UART_MspInit+0x188>)
 8002404:	f002 f892 	bl	800452c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002408:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 800240a:	4a33      	ldr	r2, [pc, #204]	; (80024d8 <HAL_UART_MspInit+0x190>)
 800240c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800240e:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 8002410:	222d      	movs	r2, #45	; 0x2d
 8002412:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002414:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241a:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002420:	4b2c      	ldr	r3, [pc, #176]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 8002422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002426:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002428:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 800242a:	2200      	movs	r2, #0
 800242c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002446:	4823      	ldr	r0, [pc, #140]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 8002448:	f000 fb44 	bl	8002ad4 <HAL_DMA_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8002452:	f7ff fb90 	bl	8001b76 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 800245a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_UART_MspInit+0x18c>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_UART_MspInit+0x194>)
 8002466:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <HAL_UART_MspInit+0x198>)
 8002468:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800246a:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <HAL_UART_MspInit+0x194>)
 800246c:	222e      	movs	r2, #46	; 0x2e
 800246e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_UART_MspInit+0x194>)
 8002472:	2240      	movs	r2, #64	; 0x40
 8002474:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_UART_MspInit+0x194>)
 8002478:	2200      	movs	r2, #0
 800247a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800247c:	4b17      	ldr	r3, [pc, #92]	; (80024dc <HAL_UART_MspInit+0x194>)
 800247e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002482:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_UART_MspInit+0x194>)
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_UART_MspInit+0x194>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_UART_MspInit+0x194>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_UART_MspInit+0x194>)
 8002498:	2200      	movs	r2, #0
 800249a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <HAL_UART_MspInit+0x194>)
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80024a2:	480e      	ldr	r0, [pc, #56]	; (80024dc <HAL_UART_MspInit+0x194>)
 80024a4:	f000 fb16 	bl	8002ad4 <HAL_DMA_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80024ae:	f7ff fb62 	bl	8001b76 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_UART_MspInit+0x194>)
 80024b6:	67da      	str	r2, [r3, #124]	; 0x7c
 80024b8:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HAL_UART_MspInit+0x194>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024be:	bf00      	nop
 80024c0:	37e8      	adds	r7, #232	; 0xe8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40004800 	.word	0x40004800
 80024cc:	58024400 	.word	0x58024400
 80024d0:	58020c00 	.word	0x58020c00
 80024d4:	2400024c 	.word	0x2400024c
 80024d8:	40020028 	.word	0x40020028
 80024dc:	240002c4 	.word	0x240002c4
 80024e0:	40020040 	.word	0x40020040

080024e4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(){
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <SDTimer_Handler+0x40>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <SDTimer_Handler+0x1c>
		{Timer1--;}
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <SDTimer_Handler+0x40>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <SDTimer_Handler+0x40>)
 80024fe:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <SDTimer_Handler+0x44>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <SDTimer_Handler+0x34>
		{Timer2--;}
 800250a:	4b07      	ldr	r3, [pc, #28]	; (8002528 <SDTimer_Handler+0x44>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b2da      	uxtb	r2, r3
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <SDTimer_Handler+0x44>)
 8002516:	701a      	strb	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	2400041d 	.word	0x2400041d
 8002528:	2400041e 	.word	0x2400041e

0800252c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <NMI_Handler+0x4>

08002532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002536:	e7fe      	b.n	8002536 <HardFault_Handler+0x4>

08002538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800253c:	e7fe      	b.n	800253c <MemManage_Handler+0x4>

0800253e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002542:	e7fe      	b.n	8002542 <BusFault_Handler+0x4>

08002544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <UsageFault_Handler+0x4>

0800254a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <SysTick_Handler+0x30>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	3301      	adds	r3, #1
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <SysTick_Handler+0x30>)
 8002584:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <SysTick_Handler+0x30>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b09      	cmp	r3, #9
 800258e:	d904      	bls.n	800259a <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <SysTick_Handler+0x30>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002596:	f7ff ffa5 	bl	80024e4 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800259a:	f000 f96b 	bl	8002874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2400041c 	.word	0x2400041c

080025a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <DMA1_Stream1_IRQHandler+0x10>)
 80025ae:	f000 fe1f 	bl	80031f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	2400024c 	.word	0x2400024c

080025bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <DMA1_Stream2_IRQHandler+0x10>)
 80025c2:	f000 fe15 	bl	80031f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	240002c4 	.word	0x240002c4

080025d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80025d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025d8:	f002 f98b 	bl	80048f2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <_sbrk+0x5c>)
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <_sbrk+0x60>)
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <_sbrk+0x64>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d102      	bne.n	8002602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <_sbrk+0x64>)
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <_sbrk+0x68>)
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <_sbrk+0x64>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	429a      	cmp	r2, r3
 800260e:	d207      	bcs.n	8002620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002610:	f008 fa80 	bl	800ab14 <__errno>
 8002614:	4603      	mov	r3, r0
 8002616:	220c      	movs	r2, #12
 8002618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	e009      	b.n	8002634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <_sbrk+0x64>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <_sbrk+0x64>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <_sbrk+0x64>)
 8002630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002632:	68fb      	ldr	r3, [r7, #12]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	24100000 	.word	0x24100000
 8002640:	00000800 	.word	0x00000800
 8002644:	24000420 	.word	0x24000420
 8002648:	24000588 	.word	0x24000588

0800264c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002650:	4b32      	ldr	r3, [pc, #200]	; (800271c <SystemInit+0xd0>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	4a31      	ldr	r2, [pc, #196]	; (800271c <SystemInit+0xd0>)
 8002658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800265c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002660:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <SystemInit+0xd4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	2b02      	cmp	r3, #2
 800266a:	d807      	bhi.n	800267c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800266c:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <SystemInit+0xd4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 030f 	bic.w	r3, r3, #15
 8002674:	4a2a      	ldr	r2, [pc, #168]	; (8002720 <SystemInit+0xd4>)
 8002676:	f043 0303 	orr.w	r3, r3, #3
 800267a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800267c:	4b29      	ldr	r3, [pc, #164]	; (8002724 <SystemInit+0xd8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a28      	ldr	r2, [pc, #160]	; (8002724 <SystemInit+0xd8>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002688:	4b26      	ldr	r3, [pc, #152]	; (8002724 <SystemInit+0xd8>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800268e:	4b25      	ldr	r3, [pc, #148]	; (8002724 <SystemInit+0xd8>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4924      	ldr	r1, [pc, #144]	; (8002724 <SystemInit+0xd8>)
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <SystemInit+0xdc>)
 8002696:	4013      	ands	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800269a:	4b21      	ldr	r3, [pc, #132]	; (8002720 <SystemInit+0xd4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <SystemInit+0xd4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 030f 	bic.w	r3, r3, #15
 80026ae:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <SystemInit+0xd4>)
 80026b0:	f043 0303 	orr.w	r3, r3, #3
 80026b4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <SystemInit+0xd8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <SystemInit+0xd8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80026c2:	4b18      	ldr	r3, [pc, #96]	; (8002724 <SystemInit+0xd8>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <SystemInit+0xd8>)
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <SystemInit+0xe0>)
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <SystemInit+0xd8>)
 80026d0:	4a17      	ldr	r2, [pc, #92]	; (8002730 <SystemInit+0xe4>)
 80026d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <SystemInit+0xd8>)
 80026d6:	4a17      	ldr	r2, [pc, #92]	; (8002734 <SystemInit+0xe8>)
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <SystemInit+0xd8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <SystemInit+0xd8>)
 80026e2:	4a14      	ldr	r2, [pc, #80]	; (8002734 <SystemInit+0xe8>)
 80026e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <SystemInit+0xd8>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026ec:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <SystemInit+0xd8>)
 80026ee:	4a11      	ldr	r2, [pc, #68]	; (8002734 <SystemInit+0xe8>)
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026f2:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <SystemInit+0xd8>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <SystemInit+0xd8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a09      	ldr	r2, [pc, #36]	; (8002724 <SystemInit+0xd8>)
 80026fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002702:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <SystemInit+0xd8>)
 8002706:	2200      	movs	r2, #0
 8002708:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <SystemInit+0xec>)
 800270c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002710:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00
 8002720:	52002000 	.word	0x52002000
 8002724:	58024400 	.word	0x58024400
 8002728:	eaf6ed7f 	.word	0xeaf6ed7f
 800272c:	02020200 	.word	0x02020200
 8002730:	01ff0000 	.word	0x01ff0000
 8002734:	01010280 	.word	0x01010280
 8002738:	52004000 	.word	0x52004000

0800273c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800273c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002774 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002740:	f7ff ff84 	bl	800264c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002744:	480c      	ldr	r0, [pc, #48]	; (8002778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002746:	490d      	ldr	r1, [pc, #52]	; (800277c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002748:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800274a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800274c:	e002      	b.n	8002754 <LoopCopyDataInit>

0800274e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800274e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002752:	3304      	adds	r3, #4

08002754 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002758:	d3f9      	bcc.n	800274e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800275c:	4c0a      	ldr	r4, [pc, #40]	; (8002788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002760:	e001      	b.n	8002766 <LoopFillZerobss>

08002762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002764:	3204      	adds	r2, #4

08002766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002768:	d3fb      	bcc.n	8002762 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800276a:	f008 f9d9 	bl	800ab20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800276e:	f7fe fdc5 	bl	80012fc <main>
  bx  lr
 8002772:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002774:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002778:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800277c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002780:	0800b740 	.word	0x0800b740
  ldr r2, =_sbss
 8002784:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002788:	24000584 	.word	0x24000584

0800278c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800278c:	e7fe      	b.n	800278c <ADC_IRQHandler>
	...

08002790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002796:	2003      	movs	r0, #3
 8002798:	f000 f95c 	bl	8002a54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800279c:	f002 ff06 	bl	80055ac <HAL_RCC_GetSysClockFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_Init+0x68>)
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	4913      	ldr	r1, [pc, #76]	; (80027fc <HAL_Init+0x6c>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80027ba:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <HAL_Init+0x68>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <HAL_Init+0x6c>)
 80027c4:	5cd3      	ldrb	r3, [r2, r3]
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
 80027d0:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <HAL_Init+0x70>)
 80027d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027d4:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <HAL_Init+0x74>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027da:	2000      	movs	r0, #0
 80027dc:	f000 f814 	bl	8002808 <HAL_InitTick>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e002      	b.n	80027f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027ea:	f7ff fc91 	bl	8002110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	58024400 	.word	0x58024400
 80027fc:	0800b6bc 	.word	0x0800b6bc
 8002800:	24000008 	.word	0x24000008
 8002804:	24000004 	.word	0x24000004

08002808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_InitTick+0x60>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e021      	b.n	8002860 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_InitTick+0x64>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_InitTick+0x60>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282a:	fbb3 f3f1 	udiv	r3, r3, r1
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f941 	bl	8002aba <HAL_SYSTICK_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e00e      	b.n	8002860 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b0f      	cmp	r3, #15
 8002846:	d80a      	bhi.n	800285e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002848:	2200      	movs	r2, #0
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	f000 f90b 	bl	8002a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002854:	4a06      	ldr	r2, [pc, #24]	; (8002870 <HAL_InitTick+0x68>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	24000010 	.word	0x24000010
 800286c:	24000004 	.word	0x24000004
 8002870:	2400000c 	.word	0x2400000c

08002874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x20>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_IncTick+0x24>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4413      	add	r3, r2
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_IncTick+0x24>)
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	24000010 	.word	0x24000010
 8002898:	24000424 	.word	0x24000424

0800289c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return uwTick;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_GetTick+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	24000424 	.word	0x24000424

080028b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <__NVIC_SetPriorityGrouping+0x40>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e2:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <__NVIC_SetPriorityGrouping+0x40>)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	60d3      	str	r3, [r2, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00
 80028f8:	05fa0000 	.word	0x05fa0000

080028fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <__NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002926:	2b00      	cmp	r3, #0
 8002928:	db0b      	blt.n	8002942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	4907      	ldr	r1, [pc, #28]	; (8002950 <__NVIC_EnableIRQ+0x38>)
 8002932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	2001      	movs	r0, #1
 800293a:	fa00 f202 	lsl.w	r2, r0, r2
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000e100 	.word	0xe000e100

08002954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	6039      	str	r1, [r7, #0]
 800295e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002964:	2b00      	cmp	r3, #0
 8002966:	db0a      	blt.n	800297e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	490c      	ldr	r1, [pc, #48]	; (80029a0 <__NVIC_SetPriority+0x4c>)
 800296e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002972:	0112      	lsls	r2, r2, #4
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	440b      	add	r3, r1
 8002978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800297c:	e00a      	b.n	8002994 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4908      	ldr	r1, [pc, #32]	; (80029a4 <__NVIC_SetPriority+0x50>)
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	3b04      	subs	r3, #4
 800298c:	0112      	lsls	r2, r2, #4
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	440b      	add	r3, r1
 8002992:	761a      	strb	r2, [r3, #24]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000e100 	.word	0xe000e100
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f1c3 0307 	rsb	r3, r3, #7
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	bf28      	it	cs
 80029c6:	2304      	movcs	r3, #4
 80029c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d902      	bls.n	80029d8 <NVIC_EncodePriority+0x30>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3b03      	subs	r3, #3
 80029d6:	e000      	b.n	80029da <NVIC_EncodePriority+0x32>
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	401a      	ands	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	43d9      	mvns	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	4313      	orrs	r3, r2
         );
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3724      	adds	r7, #36	; 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a20:	d301      	bcc.n	8002a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00f      	b.n	8002a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <SysTick_Config+0x40>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2e:	210f      	movs	r1, #15
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	f7ff ff8e 	bl	8002954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <SysTick_Config+0x40>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <SysTick_Config+0x40>)
 8002a40:	2207      	movs	r2, #7
 8002a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	e000e010 	.word	0xe000e010

08002a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ff29 	bl	80028b4 <__NVIC_SetPriorityGrouping>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a78:	f7ff ff40 	bl	80028fc <__NVIC_GetPriorityGrouping>
 8002a7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff90 	bl	80029a8 <NVIC_EncodePriority>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff5f 	bl	8002954 <__NVIC_SetPriority>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff33 	bl	8002918 <__NVIC_EnableIRQ>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffa4 	bl	8002a10 <SysTick_Config>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff fede 	bl	800289c <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e37d      	b.n	80031e8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a66      	ldr	r2, [pc, #408]	; (8002c8c <HAL_DMA_Init+0x1b8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d04a      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a65      	ldr	r2, [pc, #404]	; (8002c90 <HAL_DMA_Init+0x1bc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d045      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a63      	ldr	r2, [pc, #396]	; (8002c94 <HAL_DMA_Init+0x1c0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d040      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a62      	ldr	r2, [pc, #392]	; (8002c98 <HAL_DMA_Init+0x1c4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d03b      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a60      	ldr	r2, [pc, #384]	; (8002c9c <HAL_DMA_Init+0x1c8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d036      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a5f      	ldr	r2, [pc, #380]	; (8002ca0 <HAL_DMA_Init+0x1cc>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d031      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a5d      	ldr	r2, [pc, #372]	; (8002ca4 <HAL_DMA_Init+0x1d0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d02c      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a5c      	ldr	r2, [pc, #368]	; (8002ca8 <HAL_DMA_Init+0x1d4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d027      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a5a      	ldr	r2, [pc, #360]	; (8002cac <HAL_DMA_Init+0x1d8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d022      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a59      	ldr	r2, [pc, #356]	; (8002cb0 <HAL_DMA_Init+0x1dc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d01d      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a57      	ldr	r2, [pc, #348]	; (8002cb4 <HAL_DMA_Init+0x1e0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d018      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a56      	ldr	r2, [pc, #344]	; (8002cb8 <HAL_DMA_Init+0x1e4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d013      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a54      	ldr	r2, [pc, #336]	; (8002cbc <HAL_DMA_Init+0x1e8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00e      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a53      	ldr	r2, [pc, #332]	; (8002cc0 <HAL_DMA_Init+0x1ec>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a51      	ldr	r2, [pc, #324]	; (8002cc4 <HAL_DMA_Init+0x1f0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d004      	beq.n	8002b8c <HAL_DMA_Init+0xb8>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a50      	ldr	r2, [pc, #320]	; (8002cc8 <HAL_DMA_Init+0x1f4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d101      	bne.n	8002b90 <HAL_DMA_Init+0xbc>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <HAL_DMA_Init+0xbe>
 8002b90:	2300      	movs	r3, #0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 813c 	beq.w	8002e10 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a37      	ldr	r2, [pc, #220]	; (8002c8c <HAL_DMA_Init+0x1b8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d04a      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a36      	ldr	r2, [pc, #216]	; (8002c90 <HAL_DMA_Init+0x1bc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d045      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a34      	ldr	r2, [pc, #208]	; (8002c94 <HAL_DMA_Init+0x1c0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d040      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a33      	ldr	r2, [pc, #204]	; (8002c98 <HAL_DMA_Init+0x1c4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d03b      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a31      	ldr	r2, [pc, #196]	; (8002c9c <HAL_DMA_Init+0x1c8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d036      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a30      	ldr	r2, [pc, #192]	; (8002ca0 <HAL_DMA_Init+0x1cc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d031      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a2e      	ldr	r2, [pc, #184]	; (8002ca4 <HAL_DMA_Init+0x1d0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d02c      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a2d      	ldr	r2, [pc, #180]	; (8002ca8 <HAL_DMA_Init+0x1d4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d027      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a2b      	ldr	r2, [pc, #172]	; (8002cac <HAL_DMA_Init+0x1d8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d022      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <HAL_DMA_Init+0x1dc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d01d      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a28      	ldr	r2, [pc, #160]	; (8002cb4 <HAL_DMA_Init+0x1e0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d018      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_DMA_Init+0x1e4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d013      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <HAL_DMA_Init+0x1e8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00e      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <HAL_DMA_Init+0x1ec>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d009      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a22      	ldr	r2, [pc, #136]	; (8002cc4 <HAL_DMA_Init+0x1f0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d004      	beq.n	8002c48 <HAL_DMA_Init+0x174>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a21      	ldr	r2, [pc, #132]	; (8002cc8 <HAL_DMA_Init+0x1f4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d108      	bne.n	8002c5a <HAL_DMA_Init+0x186>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e007      	b.n	8002c6a <HAL_DMA_Init+0x196>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c6a:	e02f      	b.n	8002ccc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c6c:	f7ff fe16 	bl	800289c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d928      	bls.n	8002ccc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2203      	movs	r2, #3
 8002c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e2ad      	b.n	80031e8 <HAL_DMA_Init+0x714>
 8002c8c:	40020010 	.word	0x40020010
 8002c90:	40020028 	.word	0x40020028
 8002c94:	40020040 	.word	0x40020040
 8002c98:	40020058 	.word	0x40020058
 8002c9c:	40020070 	.word	0x40020070
 8002ca0:	40020088 	.word	0x40020088
 8002ca4:	400200a0 	.word	0x400200a0
 8002ca8:	400200b8 	.word	0x400200b8
 8002cac:	40020410 	.word	0x40020410
 8002cb0:	40020428 	.word	0x40020428
 8002cb4:	40020440 	.word	0x40020440
 8002cb8:	40020458 	.word	0x40020458
 8002cbc:	40020470 	.word	0x40020470
 8002cc0:	40020488 	.word	0x40020488
 8002cc4:	400204a0 	.word	0x400204a0
 8002cc8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1c8      	bne.n	8002c6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4b73      	ldr	r3, [pc, #460]	; (8002eb4 <HAL_DMA_Init+0x3e0>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002cf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d107      	bne.n	8002d30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b28      	cmp	r3, #40	; 0x28
 8002d36:	d903      	bls.n	8002d40 <HAL_DMA_Init+0x26c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8002d3e:	d91f      	bls.n	8002d80 <HAL_DMA_Init+0x2ac>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b3e      	cmp	r3, #62	; 0x3e
 8002d46:	d903      	bls.n	8002d50 <HAL_DMA_Init+0x27c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b42      	cmp	r3, #66	; 0x42
 8002d4e:	d917      	bls.n	8002d80 <HAL_DMA_Init+0x2ac>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b46      	cmp	r3, #70	; 0x46
 8002d56:	d903      	bls.n	8002d60 <HAL_DMA_Init+0x28c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b48      	cmp	r3, #72	; 0x48
 8002d5e:	d90f      	bls.n	8002d80 <HAL_DMA_Init+0x2ac>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b4e      	cmp	r3, #78	; 0x4e
 8002d66:	d903      	bls.n	8002d70 <HAL_DMA_Init+0x29c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b52      	cmp	r3, #82	; 0x52
 8002d6e:	d907      	bls.n	8002d80 <HAL_DMA_Init+0x2ac>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b73      	cmp	r3, #115	; 0x73
 8002d76:	d905      	bls.n	8002d84 <HAL_DMA_Init+0x2b0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b77      	cmp	r3, #119	; 0x77
 8002d7e:	d801      	bhi.n	8002d84 <HAL_DMA_Init+0x2b0>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_DMA_Init+0x2b2>
 8002d84:	2300      	movs	r3, #0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d90:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f023 0307 	bic.w	r3, r3, #7
 8002da8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d117      	bne.n	8002dec <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00e      	beq.n	8002dec <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f001 fa22 	bl	8004218 <DMA_CheckFifoParam>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2240      	movs	r2, #64	; 0x40
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e1fd      	b.n	80031e8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f001 f95d 	bl	80040b4 <DMA_CalcBaseAndBitshift>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	223f      	movs	r2, #63	; 0x3f
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	e0fd      	b.n	800300c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <HAL_DMA_Init+0x3e4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d04a      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <HAL_DMA_Init+0x3e8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d045      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <HAL_DMA_Init+0x3ec>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d040      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <HAL_DMA_Init+0x3f0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d03b      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <HAL_DMA_Init+0x3f4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d036      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <HAL_DMA_Init+0x3f8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d031      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1f      	ldr	r2, [pc, #124]	; (8002ed0 <HAL_DMA_Init+0x3fc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d02c      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ed4 <HAL_DMA_Init+0x400>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d027      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <HAL_DMA_Init+0x404>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d022      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1b      	ldr	r2, [pc, #108]	; (8002edc <HAL_DMA_Init+0x408>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d01d      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <HAL_DMA_Init+0x40c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d018      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <HAL_DMA_Init+0x410>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d013      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a16      	ldr	r2, [pc, #88]	; (8002ee8 <HAL_DMA_Init+0x414>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00e      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a15      	ldr	r2, [pc, #84]	; (8002eec <HAL_DMA_Init+0x418>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a13      	ldr	r2, [pc, #76]	; (8002ef0 <HAL_DMA_Init+0x41c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_DMA_Init+0x3dc>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <HAL_DMA_Init+0x420>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d123      	bne.n	8002ef8 <HAL_DMA_Init+0x424>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e022      	b.n	8002efa <HAL_DMA_Init+0x426>
 8002eb4:	fe10803f 	.word	0xfe10803f
 8002eb8:	48022c08 	.word	0x48022c08
 8002ebc:	48022c1c 	.word	0x48022c1c
 8002ec0:	48022c30 	.word	0x48022c30
 8002ec4:	48022c44 	.word	0x48022c44
 8002ec8:	48022c58 	.word	0x48022c58
 8002ecc:	48022c6c 	.word	0x48022c6c
 8002ed0:	48022c80 	.word	0x48022c80
 8002ed4:	48022c94 	.word	0x48022c94
 8002ed8:	58025408 	.word	0x58025408
 8002edc:	5802541c 	.word	0x5802541c
 8002ee0:	58025430 	.word	0x58025430
 8002ee4:	58025444 	.word	0x58025444
 8002ee8:	58025458 	.word	0x58025458
 8002eec:	5802546c 	.word	0x5802546c
 8002ef0:	58025480 	.word	0x58025480
 8002ef4:	58025494 	.word	0x58025494
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d07d      	beq.n	8002ffa <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a7f      	ldr	r2, [pc, #508]	; (8003100 <HAL_DMA_Init+0x62c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d021      	beq.n	8002f4c <HAL_DMA_Init+0x478>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a7d      	ldr	r2, [pc, #500]	; (8003104 <HAL_DMA_Init+0x630>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01c      	beq.n	8002f4c <HAL_DMA_Init+0x478>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7c      	ldr	r2, [pc, #496]	; (8003108 <HAL_DMA_Init+0x634>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d017      	beq.n	8002f4c <HAL_DMA_Init+0x478>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a7a      	ldr	r2, [pc, #488]	; (800310c <HAL_DMA_Init+0x638>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d012      	beq.n	8002f4c <HAL_DMA_Init+0x478>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a79      	ldr	r2, [pc, #484]	; (8003110 <HAL_DMA_Init+0x63c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00d      	beq.n	8002f4c <HAL_DMA_Init+0x478>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a77      	ldr	r2, [pc, #476]	; (8003114 <HAL_DMA_Init+0x640>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d008      	beq.n	8002f4c <HAL_DMA_Init+0x478>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a76      	ldr	r2, [pc, #472]	; (8003118 <HAL_DMA_Init+0x644>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <HAL_DMA_Init+0x478>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a74      	ldr	r2, [pc, #464]	; (800311c <HAL_DMA_Init+0x648>)
 8002f4a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4b6e      	ldr	r3, [pc, #440]	; (8003120 <HAL_DMA_Init+0x64c>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d008      	beq.n	8002f86 <HAL_DMA_Init+0x4b2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d102      	bne.n	8002f82 <HAL_DMA_Init+0x4ae>
 8002f7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f80:	e002      	b.n	8002f88 <HAL_DMA_Init+0x4b4>
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_DMA_Init+0x4b4>
 8002f86:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68d2      	ldr	r2, [r2, #12]
 8002f8c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f8e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f96:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f9e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002fa6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002fb6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b55      	ldr	r3, [pc, #340]	; (8003124 <HAL_DMA_Init+0x650>)
 8002fce:	4413      	add	r3, r2
 8002fd0:	4a55      	ldr	r2, [pc, #340]	; (8003128 <HAL_DMA_Init+0x654>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	009a      	lsls	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f001 f868 	bl	80040b4 <DMA_CalcBaseAndBitshift>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	e008      	b.n	800300c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2240      	movs	r2, #64	; 0x40
 8002ffe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2203      	movs	r2, #3
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0ed      	b.n	80031e8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a46      	ldr	r2, [pc, #280]	; (800312c <HAL_DMA_Init+0x658>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d072      	beq.n	80030fc <HAL_DMA_Init+0x628>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a45      	ldr	r2, [pc, #276]	; (8003130 <HAL_DMA_Init+0x65c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d06d      	beq.n	80030fc <HAL_DMA_Init+0x628>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a43      	ldr	r2, [pc, #268]	; (8003134 <HAL_DMA_Init+0x660>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d068      	beq.n	80030fc <HAL_DMA_Init+0x628>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a42      	ldr	r2, [pc, #264]	; (8003138 <HAL_DMA_Init+0x664>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d063      	beq.n	80030fc <HAL_DMA_Init+0x628>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a40      	ldr	r2, [pc, #256]	; (800313c <HAL_DMA_Init+0x668>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d05e      	beq.n	80030fc <HAL_DMA_Init+0x628>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a3f      	ldr	r2, [pc, #252]	; (8003140 <HAL_DMA_Init+0x66c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d059      	beq.n	80030fc <HAL_DMA_Init+0x628>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a3d      	ldr	r2, [pc, #244]	; (8003144 <HAL_DMA_Init+0x670>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d054      	beq.n	80030fc <HAL_DMA_Init+0x628>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <HAL_DMA_Init+0x674>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d04f      	beq.n	80030fc <HAL_DMA_Init+0x628>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a3a      	ldr	r2, [pc, #232]	; (800314c <HAL_DMA_Init+0x678>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d04a      	beq.n	80030fc <HAL_DMA_Init+0x628>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a39      	ldr	r2, [pc, #228]	; (8003150 <HAL_DMA_Init+0x67c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d045      	beq.n	80030fc <HAL_DMA_Init+0x628>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a37      	ldr	r2, [pc, #220]	; (8003154 <HAL_DMA_Init+0x680>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d040      	beq.n	80030fc <HAL_DMA_Init+0x628>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a36      	ldr	r2, [pc, #216]	; (8003158 <HAL_DMA_Init+0x684>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d03b      	beq.n	80030fc <HAL_DMA_Init+0x628>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a34      	ldr	r2, [pc, #208]	; (800315c <HAL_DMA_Init+0x688>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d036      	beq.n	80030fc <HAL_DMA_Init+0x628>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a33      	ldr	r2, [pc, #204]	; (8003160 <HAL_DMA_Init+0x68c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d031      	beq.n	80030fc <HAL_DMA_Init+0x628>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a31      	ldr	r2, [pc, #196]	; (8003164 <HAL_DMA_Init+0x690>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d02c      	beq.n	80030fc <HAL_DMA_Init+0x628>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a30      	ldr	r2, [pc, #192]	; (8003168 <HAL_DMA_Init+0x694>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d027      	beq.n	80030fc <HAL_DMA_Init+0x628>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a13      	ldr	r2, [pc, #76]	; (8003100 <HAL_DMA_Init+0x62c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d022      	beq.n	80030fc <HAL_DMA_Init+0x628>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a12      	ldr	r2, [pc, #72]	; (8003104 <HAL_DMA_Init+0x630>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d01d      	beq.n	80030fc <HAL_DMA_Init+0x628>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a10      	ldr	r2, [pc, #64]	; (8003108 <HAL_DMA_Init+0x634>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d018      	beq.n	80030fc <HAL_DMA_Init+0x628>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a0f      	ldr	r2, [pc, #60]	; (800310c <HAL_DMA_Init+0x638>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <HAL_DMA_Init+0x628>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0d      	ldr	r2, [pc, #52]	; (8003110 <HAL_DMA_Init+0x63c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00e      	beq.n	80030fc <HAL_DMA_Init+0x628>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <HAL_DMA_Init+0x640>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_DMA_Init+0x628>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <HAL_DMA_Init+0x644>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_DMA_Init+0x628>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a09      	ldr	r2, [pc, #36]	; (800311c <HAL_DMA_Init+0x648>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d137      	bne.n	800316c <HAL_DMA_Init+0x698>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e036      	b.n	800316e <HAL_DMA_Init+0x69a>
 8003100:	58025408 	.word	0x58025408
 8003104:	5802541c 	.word	0x5802541c
 8003108:	58025430 	.word	0x58025430
 800310c:	58025444 	.word	0x58025444
 8003110:	58025458 	.word	0x58025458
 8003114:	5802546c 	.word	0x5802546c
 8003118:	58025480 	.word	0x58025480
 800311c:	58025494 	.word	0x58025494
 8003120:	fffe000f 	.word	0xfffe000f
 8003124:	a7fdabf8 	.word	0xa7fdabf8
 8003128:	cccccccd 	.word	0xcccccccd
 800312c:	40020010 	.word	0x40020010
 8003130:	40020028 	.word	0x40020028
 8003134:	40020040 	.word	0x40020040
 8003138:	40020058 	.word	0x40020058
 800313c:	40020070 	.word	0x40020070
 8003140:	40020088 	.word	0x40020088
 8003144:	400200a0 	.word	0x400200a0
 8003148:	400200b8 	.word	0x400200b8
 800314c:	40020410 	.word	0x40020410
 8003150:	40020428 	.word	0x40020428
 8003154:	40020440 	.word	0x40020440
 8003158:	40020458 	.word	0x40020458
 800315c:	40020470 	.word	0x40020470
 8003160:	40020488 	.word	0x40020488
 8003164:	400204a0 	.word	0x400204a0
 8003168:	400204b8 	.word	0x400204b8
 800316c:	2300      	movs	r3, #0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d032      	beq.n	80031d8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f001 f8cc 	bl	8004310 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b80      	cmp	r3, #128	; 0x80
 800317e:	d102      	bne.n	8003186 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800319a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d010      	beq.n	80031c6 <HAL_DMA_Init+0x6f2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d80c      	bhi.n	80031c6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f001 f949 	bl	8004444 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	e008      	b.n	80031d8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031fc:	4b67      	ldr	r3, [pc, #412]	; (800339c <HAL_DMA_IRQHandler+0x1ac>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a67      	ldr	r2, [pc, #412]	; (80033a0 <HAL_DMA_IRQHandler+0x1b0>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5f      	ldr	r2, [pc, #380]	; (80033a4 <HAL_DMA_IRQHandler+0x1b4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d04a      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a5d      	ldr	r2, [pc, #372]	; (80033a8 <HAL_DMA_IRQHandler+0x1b8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d045      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a5c      	ldr	r2, [pc, #368]	; (80033ac <HAL_DMA_IRQHandler+0x1bc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d040      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a5a      	ldr	r2, [pc, #360]	; (80033b0 <HAL_DMA_IRQHandler+0x1c0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d03b      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a59      	ldr	r2, [pc, #356]	; (80033b4 <HAL_DMA_IRQHandler+0x1c4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d036      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a57      	ldr	r2, [pc, #348]	; (80033b8 <HAL_DMA_IRQHandler+0x1c8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d031      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a56      	ldr	r2, [pc, #344]	; (80033bc <HAL_DMA_IRQHandler+0x1cc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d02c      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a54      	ldr	r2, [pc, #336]	; (80033c0 <HAL_DMA_IRQHandler+0x1d0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d027      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a53      	ldr	r2, [pc, #332]	; (80033c4 <HAL_DMA_IRQHandler+0x1d4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d022      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a51      	ldr	r2, [pc, #324]	; (80033c8 <HAL_DMA_IRQHandler+0x1d8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01d      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a50      	ldr	r2, [pc, #320]	; (80033cc <HAL_DMA_IRQHandler+0x1dc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d018      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a4e      	ldr	r2, [pc, #312]	; (80033d0 <HAL_DMA_IRQHandler+0x1e0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a4d      	ldr	r2, [pc, #308]	; (80033d4 <HAL_DMA_IRQHandler+0x1e4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00e      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <HAL_DMA_IRQHandler+0x1e8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d009      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a4a      	ldr	r2, [pc, #296]	; (80033dc <HAL_DMA_IRQHandler+0x1ec>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xd2>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a48      	ldr	r2, [pc, #288]	; (80033e0 <HAL_DMA_IRQHandler+0x1f0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_DMA_IRQHandler+0xd6>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_DMA_IRQHandler+0xd8>
 80032c6:	2300      	movs	r3, #0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 842b 	beq.w	8003b24 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	2208      	movs	r2, #8
 80032d8:	409a      	lsls	r2, r3
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 80a2 	beq.w	8003428 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2e      	ldr	r2, [pc, #184]	; (80033a4 <HAL_DMA_IRQHandler+0x1b4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d04a      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2d      	ldr	r2, [pc, #180]	; (80033a8 <HAL_DMA_IRQHandler+0x1b8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d045      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <HAL_DMA_IRQHandler+0x1bc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d040      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <HAL_DMA_IRQHandler+0x1c0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d03b      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a28      	ldr	r2, [pc, #160]	; (80033b4 <HAL_DMA_IRQHandler+0x1c4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d036      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a27      	ldr	r2, [pc, #156]	; (80033b8 <HAL_DMA_IRQHandler+0x1c8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d031      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a25      	ldr	r2, [pc, #148]	; (80033bc <HAL_DMA_IRQHandler+0x1cc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d02c      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a24      	ldr	r2, [pc, #144]	; (80033c0 <HAL_DMA_IRQHandler+0x1d0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d027      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a22      	ldr	r2, [pc, #136]	; (80033c4 <HAL_DMA_IRQHandler+0x1d4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d022      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a21      	ldr	r2, [pc, #132]	; (80033c8 <HAL_DMA_IRQHandler+0x1d8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d01d      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <HAL_DMA_IRQHandler+0x1dc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d018      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <HAL_DMA_IRQHandler+0x1e0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d013      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <HAL_DMA_IRQHandler+0x1e4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00e      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <HAL_DMA_IRQHandler+0x1e8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a19      	ldr	r2, [pc, #100]	; (80033dc <HAL_DMA_IRQHandler+0x1ec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_DMA_IRQHandler+0x194>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <HAL_DMA_IRQHandler+0x1f0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d12f      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x1f4>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	bf14      	ite	ne
 8003392:	2301      	movne	r3, #1
 8003394:	2300      	moveq	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	e02e      	b.n	80033f8 <HAL_DMA_IRQHandler+0x208>
 800339a:	bf00      	nop
 800339c:	24000004 	.word	0x24000004
 80033a0:	1b4e81b5 	.word	0x1b4e81b5
 80033a4:	40020010 	.word	0x40020010
 80033a8:	40020028 	.word	0x40020028
 80033ac:	40020040 	.word	0x40020040
 80033b0:	40020058 	.word	0x40020058
 80033b4:	40020070 	.word	0x40020070
 80033b8:	40020088 	.word	0x40020088
 80033bc:	400200a0 	.word	0x400200a0
 80033c0:	400200b8 	.word	0x400200b8
 80033c4:	40020410 	.word	0x40020410
 80033c8:	40020428 	.word	0x40020428
 80033cc:	40020440 	.word	0x40020440
 80033d0:	40020458 	.word	0x40020458
 80033d4:	40020470 	.word	0x40020470
 80033d8:	40020488 	.word	0x40020488
 80033dc:	400204a0 	.word	0x400204a0
 80033e0:	400204b8 	.word	0x400204b8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bf14      	ite	ne
 80033f2:	2301      	movne	r3, #1
 80033f4:	2300      	moveq	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d015      	beq.n	8003428 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0204 	bic.w	r2, r2, #4
 800340a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2208      	movs	r2, #8
 8003416:	409a      	lsls	r2, r3
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	fa22 f303 	lsr.w	r3, r2, r3
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d06e      	beq.n	800351c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a69      	ldr	r2, [pc, #420]	; (80035e8 <HAL_DMA_IRQHandler+0x3f8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d04a      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a67      	ldr	r2, [pc, #412]	; (80035ec <HAL_DMA_IRQHandler+0x3fc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d045      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a66      	ldr	r2, [pc, #408]	; (80035f0 <HAL_DMA_IRQHandler+0x400>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d040      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a64      	ldr	r2, [pc, #400]	; (80035f4 <HAL_DMA_IRQHandler+0x404>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d03b      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a63      	ldr	r2, [pc, #396]	; (80035f8 <HAL_DMA_IRQHandler+0x408>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d036      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a61      	ldr	r2, [pc, #388]	; (80035fc <HAL_DMA_IRQHandler+0x40c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d031      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a60      	ldr	r2, [pc, #384]	; (8003600 <HAL_DMA_IRQHandler+0x410>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d02c      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a5e      	ldr	r2, [pc, #376]	; (8003604 <HAL_DMA_IRQHandler+0x414>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d027      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a5d      	ldr	r2, [pc, #372]	; (8003608 <HAL_DMA_IRQHandler+0x418>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a5b      	ldr	r2, [pc, #364]	; (800360c <HAL_DMA_IRQHandler+0x41c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01d      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a5a      	ldr	r2, [pc, #360]	; (8003610 <HAL_DMA_IRQHandler+0x420>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d018      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a58      	ldr	r2, [pc, #352]	; (8003614 <HAL_DMA_IRQHandler+0x424>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a57      	ldr	r2, [pc, #348]	; (8003618 <HAL_DMA_IRQHandler+0x428>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a55      	ldr	r2, [pc, #340]	; (800361c <HAL_DMA_IRQHandler+0x42c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a54      	ldr	r2, [pc, #336]	; (8003620 <HAL_DMA_IRQHandler+0x430>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_DMA_IRQHandler+0x2ee>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a52      	ldr	r2, [pc, #328]	; (8003624 <HAL_DMA_IRQHandler+0x434>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d10a      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x304>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	e003      	b.n	80034fc <HAL_DMA_IRQHandler+0x30c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2300      	movs	r3, #0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2201      	movs	r2, #1
 800350a:	409a      	lsls	r2, r3
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	f043 0202 	orr.w	r2, r3, #2
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	2204      	movs	r2, #4
 8003526:	409a      	lsls	r2, r3
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 808f 	beq.w	8003650 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2c      	ldr	r2, [pc, #176]	; (80035e8 <HAL_DMA_IRQHandler+0x3f8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d04a      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a2a      	ldr	r2, [pc, #168]	; (80035ec <HAL_DMA_IRQHandler+0x3fc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d045      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a29      	ldr	r2, [pc, #164]	; (80035f0 <HAL_DMA_IRQHandler+0x400>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d040      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a27      	ldr	r2, [pc, #156]	; (80035f4 <HAL_DMA_IRQHandler+0x404>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d03b      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <HAL_DMA_IRQHandler+0x408>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d036      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a24      	ldr	r2, [pc, #144]	; (80035fc <HAL_DMA_IRQHandler+0x40c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d031      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a23      	ldr	r2, [pc, #140]	; (8003600 <HAL_DMA_IRQHandler+0x410>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d02c      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a21      	ldr	r2, [pc, #132]	; (8003604 <HAL_DMA_IRQHandler+0x414>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d027      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a20      	ldr	r2, [pc, #128]	; (8003608 <HAL_DMA_IRQHandler+0x418>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d022      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1e      	ldr	r2, [pc, #120]	; (800360c <HAL_DMA_IRQHandler+0x41c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01d      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <HAL_DMA_IRQHandler+0x420>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d018      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1b      	ldr	r2, [pc, #108]	; (8003614 <HAL_DMA_IRQHandler+0x424>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1a      	ldr	r2, [pc, #104]	; (8003618 <HAL_DMA_IRQHandler+0x428>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00e      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a18      	ldr	r2, [pc, #96]	; (800361c <HAL_DMA_IRQHandler+0x42c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d009      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a17      	ldr	r2, [pc, #92]	; (8003620 <HAL_DMA_IRQHandler+0x430>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d004      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x3e2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a15      	ldr	r2, [pc, #84]	; (8003624 <HAL_DMA_IRQHandler+0x434>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d12a      	bne.n	8003628 <HAL_DMA_IRQHandler+0x438>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e023      	b.n	8003630 <HAL_DMA_IRQHandler+0x440>
 80035e8:	40020010 	.word	0x40020010
 80035ec:	40020028 	.word	0x40020028
 80035f0:	40020040 	.word	0x40020040
 80035f4:	40020058 	.word	0x40020058
 80035f8:	40020070 	.word	0x40020070
 80035fc:	40020088 	.word	0x40020088
 8003600:	400200a0 	.word	0x400200a0
 8003604:	400200b8 	.word	0x400200b8
 8003608:	40020410 	.word	0x40020410
 800360c:	40020428 	.word	0x40020428
 8003610:	40020440 	.word	0x40020440
 8003614:	40020458 	.word	0x40020458
 8003618:	40020470 	.word	0x40020470
 800361c:	40020488 	.word	0x40020488
 8003620:	400204a0 	.word	0x400204a0
 8003624:	400204b8 	.word	0x400204b8
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00d      	beq.n	8003650 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2204      	movs	r2, #4
 800363e:	409a      	lsls	r2, r3
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	f043 0204 	orr.w	r2, r3, #4
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2210      	movs	r2, #16
 800365a:	409a      	lsls	r2, r3
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80a6 	beq.w	80037b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a85      	ldr	r2, [pc, #532]	; (8003880 <HAL_DMA_IRQHandler+0x690>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d04a      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a83      	ldr	r2, [pc, #524]	; (8003884 <HAL_DMA_IRQHandler+0x694>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d045      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a82      	ldr	r2, [pc, #520]	; (8003888 <HAL_DMA_IRQHandler+0x698>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d040      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a80      	ldr	r2, [pc, #512]	; (800388c <HAL_DMA_IRQHandler+0x69c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d03b      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a7f      	ldr	r2, [pc, #508]	; (8003890 <HAL_DMA_IRQHandler+0x6a0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d036      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a7d      	ldr	r2, [pc, #500]	; (8003894 <HAL_DMA_IRQHandler+0x6a4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d031      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a7c      	ldr	r2, [pc, #496]	; (8003898 <HAL_DMA_IRQHandler+0x6a8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d02c      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a7a      	ldr	r2, [pc, #488]	; (800389c <HAL_DMA_IRQHandler+0x6ac>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d027      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a79      	ldr	r2, [pc, #484]	; (80038a0 <HAL_DMA_IRQHandler+0x6b0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d022      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a77      	ldr	r2, [pc, #476]	; (80038a4 <HAL_DMA_IRQHandler+0x6b4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d01d      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a76      	ldr	r2, [pc, #472]	; (80038a8 <HAL_DMA_IRQHandler+0x6b8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d018      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a74      	ldr	r2, [pc, #464]	; (80038ac <HAL_DMA_IRQHandler+0x6bc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a73      	ldr	r2, [pc, #460]	; (80038b0 <HAL_DMA_IRQHandler+0x6c0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00e      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a71      	ldr	r2, [pc, #452]	; (80038b4 <HAL_DMA_IRQHandler+0x6c4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a70      	ldr	r2, [pc, #448]	; (80038b8 <HAL_DMA_IRQHandler+0x6c8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_DMA_IRQHandler+0x516>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a6e      	ldr	r2, [pc, #440]	; (80038bc <HAL_DMA_IRQHandler+0x6cc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10a      	bne.n	800371c <HAL_DMA_IRQHandler+0x52c>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf14      	ite	ne
 8003714:	2301      	movne	r3, #1
 8003716:	2300      	moveq	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e009      	b.n	8003730 <HAL_DMA_IRQHandler+0x540>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	bf14      	ite	ne
 800372a:	2301      	movne	r3, #1
 800372c:	2300      	moveq	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d03e      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2210      	movs	r2, #16
 800373e:	409a      	lsls	r2, r3
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d018      	beq.n	8003784 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d108      	bne.n	8003772 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d024      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
 8003770:	e01f      	b.n	80037b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01b      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
 8003782:	e016      	b.n	80037b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d107      	bne.n	80037a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0208 	bic.w	r2, r2, #8
 80037a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	2220      	movs	r2, #32
 80037bc:	409a      	lsls	r2, r3
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8110 	beq.w	80039e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2c      	ldr	r2, [pc, #176]	; (8003880 <HAL_DMA_IRQHandler+0x690>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d04a      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2b      	ldr	r2, [pc, #172]	; (8003884 <HAL_DMA_IRQHandler+0x694>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d045      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a29      	ldr	r2, [pc, #164]	; (8003888 <HAL_DMA_IRQHandler+0x698>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d040      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a28      	ldr	r2, [pc, #160]	; (800388c <HAL_DMA_IRQHandler+0x69c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d03b      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a26      	ldr	r2, [pc, #152]	; (8003890 <HAL_DMA_IRQHandler+0x6a0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d036      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a25      	ldr	r2, [pc, #148]	; (8003894 <HAL_DMA_IRQHandler+0x6a4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d031      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a23      	ldr	r2, [pc, #140]	; (8003898 <HAL_DMA_IRQHandler+0x6a8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d02c      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a22      	ldr	r2, [pc, #136]	; (800389c <HAL_DMA_IRQHandler+0x6ac>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d027      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a20      	ldr	r2, [pc, #128]	; (80038a0 <HAL_DMA_IRQHandler+0x6b0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d022      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <HAL_DMA_IRQHandler+0x6b4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d01d      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <HAL_DMA_IRQHandler+0x6b8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d018      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1c      	ldr	r2, [pc, #112]	; (80038ac <HAL_DMA_IRQHandler+0x6bc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d013      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1a      	ldr	r2, [pc, #104]	; (80038b0 <HAL_DMA_IRQHandler+0x6c0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00e      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <HAL_DMA_IRQHandler+0x6c4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d009      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <HAL_DMA_IRQHandler+0x6c8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d004      	beq.n	8003868 <HAL_DMA_IRQHandler+0x678>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a16      	ldr	r2, [pc, #88]	; (80038bc <HAL_DMA_IRQHandler+0x6cc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d12b      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x6d0>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	e02a      	b.n	80038d4 <HAL_DMA_IRQHandler+0x6e4>
 800387e:	bf00      	nop
 8003880:	40020010 	.word	0x40020010
 8003884:	40020028 	.word	0x40020028
 8003888:	40020040 	.word	0x40020040
 800388c:	40020058 	.word	0x40020058
 8003890:	40020070 	.word	0x40020070
 8003894:	40020088 	.word	0x40020088
 8003898:	400200a0 	.word	0x400200a0
 800389c:	400200b8 	.word	0x400200b8
 80038a0:	40020410 	.word	0x40020410
 80038a4:	40020428 	.word	0x40020428
 80038a8:	40020440 	.word	0x40020440
 80038ac:	40020458 	.word	0x40020458
 80038b0:	40020470 	.word	0x40020470
 80038b4:	40020488 	.word	0x40020488
 80038b8:	400204a0 	.word	0x400204a0
 80038bc:	400204b8 	.word	0x400204b8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf14      	ite	ne
 80038ce:	2301      	movne	r3, #1
 80038d0:	2300      	moveq	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8087 	beq.w	80039e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	2220      	movs	r2, #32
 80038e4:	409a      	lsls	r2, r3
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d139      	bne.n	800396a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0216 	bic.w	r2, r2, #22
 8003904:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003914:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d103      	bne.n	8003926 <HAL_DMA_IRQHandler+0x736>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0208 	bic.w	r2, r2, #8
 8003934:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	223f      	movs	r2, #63	; 0x3f
 8003940:	409a      	lsls	r2, r3
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8382 	beq.w	8004064 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
          }
          return;
 8003968:	e37c      	b.n	8004064 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d018      	beq.n	80039aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d108      	bne.n	8003998 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	2b00      	cmp	r3, #0
 800398c:	d02c      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
 8003996:	e027      	b.n	80039e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d023      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
 80039a8:	e01e      	b.n	80039e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10f      	bne.n	80039d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0210 	bic.w	r2, r2, #16
 80039c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 833e 	beq.w	800406e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 8088 	beq.w	8003b10 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2204      	movs	r2, #4
 8003a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a89      	ldr	r2, [pc, #548]	; (8003c34 <HAL_DMA_IRQHandler+0xa44>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d04a      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a88      	ldr	r2, [pc, #544]	; (8003c38 <HAL_DMA_IRQHandler+0xa48>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d045      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a86      	ldr	r2, [pc, #536]	; (8003c3c <HAL_DMA_IRQHandler+0xa4c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d040      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a85      	ldr	r2, [pc, #532]	; (8003c40 <HAL_DMA_IRQHandler+0xa50>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d03b      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a83      	ldr	r2, [pc, #524]	; (8003c44 <HAL_DMA_IRQHandler+0xa54>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d036      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a82      	ldr	r2, [pc, #520]	; (8003c48 <HAL_DMA_IRQHandler+0xa58>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d031      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a80      	ldr	r2, [pc, #512]	; (8003c4c <HAL_DMA_IRQHandler+0xa5c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02c      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a7f      	ldr	r2, [pc, #508]	; (8003c50 <HAL_DMA_IRQHandler+0xa60>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d027      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a7d      	ldr	r2, [pc, #500]	; (8003c54 <HAL_DMA_IRQHandler+0xa64>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d022      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a7c      	ldr	r2, [pc, #496]	; (8003c58 <HAL_DMA_IRQHandler+0xa68>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d01d      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a7a      	ldr	r2, [pc, #488]	; (8003c5c <HAL_DMA_IRQHandler+0xa6c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d018      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a79      	ldr	r2, [pc, #484]	; (8003c60 <HAL_DMA_IRQHandler+0xa70>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a77      	ldr	r2, [pc, #476]	; (8003c64 <HAL_DMA_IRQHandler+0xa74>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00e      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a76      	ldr	r2, [pc, #472]	; (8003c68 <HAL_DMA_IRQHandler+0xa78>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d009      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a74      	ldr	r2, [pc, #464]	; (8003c6c <HAL_DMA_IRQHandler+0xa7c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x8b8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a73      	ldr	r2, [pc, #460]	; (8003c70 <HAL_DMA_IRQHandler+0xa80>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d108      	bne.n	8003aba <HAL_DMA_IRQHandler+0x8ca>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	e007      	b.n	8003aca <HAL_DMA_IRQHandler+0x8da>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3301      	adds	r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d307      	bcc.n	8003ae6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f2      	bne.n	8003aca <HAL_DMA_IRQHandler+0x8da>
 8003ae4:	e000      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003ae6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2203      	movs	r2, #3
 8003afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003afe:	e003      	b.n	8003b08 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 82aa 	beq.w	800406e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	4798      	blx	r3
 8003b22:	e2a4      	b.n	800406e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a52      	ldr	r2, [pc, #328]	; (8003c74 <HAL_DMA_IRQHandler+0xa84>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d04a      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a51      	ldr	r2, [pc, #324]	; (8003c78 <HAL_DMA_IRQHandler+0xa88>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d045      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a4f      	ldr	r2, [pc, #316]	; (8003c7c <HAL_DMA_IRQHandler+0xa8c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d040      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a4e      	ldr	r2, [pc, #312]	; (8003c80 <HAL_DMA_IRQHandler+0xa90>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d03b      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a4c      	ldr	r2, [pc, #304]	; (8003c84 <HAL_DMA_IRQHandler+0xa94>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d036      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a4b      	ldr	r2, [pc, #300]	; (8003c88 <HAL_DMA_IRQHandler+0xa98>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d031      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a49      	ldr	r2, [pc, #292]	; (8003c8c <HAL_DMA_IRQHandler+0xa9c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d02c      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a48      	ldr	r2, [pc, #288]	; (8003c90 <HAL_DMA_IRQHandler+0xaa0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d027      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a46      	ldr	r2, [pc, #280]	; (8003c94 <HAL_DMA_IRQHandler+0xaa4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d022      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a45      	ldr	r2, [pc, #276]	; (8003c98 <HAL_DMA_IRQHandler+0xaa8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d01d      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a43      	ldr	r2, [pc, #268]	; (8003c9c <HAL_DMA_IRQHandler+0xaac>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d018      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a42      	ldr	r2, [pc, #264]	; (8003ca0 <HAL_DMA_IRQHandler+0xab0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d013      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a40      	ldr	r2, [pc, #256]	; (8003ca4 <HAL_DMA_IRQHandler+0xab4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00e      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a3f      	ldr	r2, [pc, #252]	; (8003ca8 <HAL_DMA_IRQHandler+0xab8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d009      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a3d      	ldr	r2, [pc, #244]	; (8003cac <HAL_DMA_IRQHandler+0xabc>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d004      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x9d4>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a3c      	ldr	r2, [pc, #240]	; (8003cb0 <HAL_DMA_IRQHandler+0xac0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d101      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0x9d8>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <HAL_DMA_IRQHandler+0x9da>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 824f 	beq.w	800406e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	2204      	movs	r2, #4
 8003be2:	409a      	lsls	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80dd 	beq.w	8003da8 <HAL_DMA_IRQHandler+0xbb8>
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80d7 	beq.w	8003da8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2204      	movs	r2, #4
 8003c04:	409a      	lsls	r2, r3
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d059      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d14a      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8220 	beq.w	8004068 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c30:	e21a      	b.n	8004068 <HAL_DMA_IRQHandler+0xe78>
 8003c32:	bf00      	nop
 8003c34:	40020010 	.word	0x40020010
 8003c38:	40020028 	.word	0x40020028
 8003c3c:	40020040 	.word	0x40020040
 8003c40:	40020058 	.word	0x40020058
 8003c44:	40020070 	.word	0x40020070
 8003c48:	40020088 	.word	0x40020088
 8003c4c:	400200a0 	.word	0x400200a0
 8003c50:	400200b8 	.word	0x400200b8
 8003c54:	40020410 	.word	0x40020410
 8003c58:	40020428 	.word	0x40020428
 8003c5c:	40020440 	.word	0x40020440
 8003c60:	40020458 	.word	0x40020458
 8003c64:	40020470 	.word	0x40020470
 8003c68:	40020488 	.word	0x40020488
 8003c6c:	400204a0 	.word	0x400204a0
 8003c70:	400204b8 	.word	0x400204b8
 8003c74:	48022c08 	.word	0x48022c08
 8003c78:	48022c1c 	.word	0x48022c1c
 8003c7c:	48022c30 	.word	0x48022c30
 8003c80:	48022c44 	.word	0x48022c44
 8003c84:	48022c58 	.word	0x48022c58
 8003c88:	48022c6c 	.word	0x48022c6c
 8003c8c:	48022c80 	.word	0x48022c80
 8003c90:	48022c94 	.word	0x48022c94
 8003c94:	58025408 	.word	0x58025408
 8003c98:	5802541c 	.word	0x5802541c
 8003c9c:	58025430 	.word	0x58025430
 8003ca0:	58025444 	.word	0x58025444
 8003ca4:	58025458 	.word	0x58025458
 8003ca8:	5802546c 	.word	0x5802546c
 8003cac:	58025480 	.word	0x58025480
 8003cb0:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 81d5 	beq.w	8004068 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc6:	e1cf      	b.n	8004068 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d160      	bne.n	8003d94 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a7f      	ldr	r2, [pc, #508]	; (8003ed4 <HAL_DMA_IRQHandler+0xce4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d04a      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a7d      	ldr	r2, [pc, #500]	; (8003ed8 <HAL_DMA_IRQHandler+0xce8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d045      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a7c      	ldr	r2, [pc, #496]	; (8003edc <HAL_DMA_IRQHandler+0xcec>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d040      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a7a      	ldr	r2, [pc, #488]	; (8003ee0 <HAL_DMA_IRQHandler+0xcf0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d03b      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a79      	ldr	r2, [pc, #484]	; (8003ee4 <HAL_DMA_IRQHandler+0xcf4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d036      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a77      	ldr	r2, [pc, #476]	; (8003ee8 <HAL_DMA_IRQHandler+0xcf8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d031      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a76      	ldr	r2, [pc, #472]	; (8003eec <HAL_DMA_IRQHandler+0xcfc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d02c      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a74      	ldr	r2, [pc, #464]	; (8003ef0 <HAL_DMA_IRQHandler+0xd00>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d027      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a73      	ldr	r2, [pc, #460]	; (8003ef4 <HAL_DMA_IRQHandler+0xd04>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a71      	ldr	r2, [pc, #452]	; (8003ef8 <HAL_DMA_IRQHandler+0xd08>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01d      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a70      	ldr	r2, [pc, #448]	; (8003efc <HAL_DMA_IRQHandler+0xd0c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a6e      	ldr	r2, [pc, #440]	; (8003f00 <HAL_DMA_IRQHandler+0xd10>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a6d      	ldr	r2, [pc, #436]	; (8003f04 <HAL_DMA_IRQHandler+0xd14>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a6b      	ldr	r2, [pc, #428]	; (8003f08 <HAL_DMA_IRQHandler+0xd18>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a6a      	ldr	r2, [pc, #424]	; (8003f0c <HAL_DMA_IRQHandler+0xd1c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xb82>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a68      	ldr	r2, [pc, #416]	; (8003f10 <HAL_DMA_IRQHandler+0xd20>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <HAL_DMA_IRQHandler+0xb94>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0208 	bic.w	r2, r2, #8
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e007      	b.n	8003d94 <HAL_DMA_IRQHandler+0xba4>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0204 	bic.w	r2, r2, #4
 8003d92:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8165 	beq.w	8004068 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da6:	e15f      	b.n	8004068 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2202      	movs	r2, #2
 8003db2:	409a      	lsls	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 80c5 	beq.w	8003f48 <HAL_DMA_IRQHandler+0xd58>
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80bf 	beq.w	8003f48 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d018      	beq.n	8003e16 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 813a 	beq.w	800406c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e00:	e134      	b.n	800406c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8130 	beq.w	800406c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e14:	e12a      	b.n	800406c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f040 8089 	bne.w	8003f34 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2b      	ldr	r2, [pc, #172]	; (8003ed4 <HAL_DMA_IRQHandler+0xce4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d04a      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a29      	ldr	r2, [pc, #164]	; (8003ed8 <HAL_DMA_IRQHandler+0xce8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d045      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a28      	ldr	r2, [pc, #160]	; (8003edc <HAL_DMA_IRQHandler+0xcec>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d040      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a26      	ldr	r2, [pc, #152]	; (8003ee0 <HAL_DMA_IRQHandler+0xcf0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d03b      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a25      	ldr	r2, [pc, #148]	; (8003ee4 <HAL_DMA_IRQHandler+0xcf4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d036      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <HAL_DMA_IRQHandler+0xcf8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d031      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a22      	ldr	r2, [pc, #136]	; (8003eec <HAL_DMA_IRQHandler+0xcfc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d02c      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a20      	ldr	r2, [pc, #128]	; (8003ef0 <HAL_DMA_IRQHandler+0xd00>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d027      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1f      	ldr	r2, [pc, #124]	; (8003ef4 <HAL_DMA_IRQHandler+0xd04>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d022      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <HAL_DMA_IRQHandler+0xd08>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01d      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <HAL_DMA_IRQHandler+0xd0c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d018      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <HAL_DMA_IRQHandler+0xd10>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_DMA_IRQHandler+0xd14>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a17      	ldr	r2, [pc, #92]	; (8003f08 <HAL_DMA_IRQHandler+0xd18>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <HAL_DMA_IRQHandler+0xd1c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xcd2>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <HAL_DMA_IRQHandler+0xd20>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d128      	bne.n	8003f14 <HAL_DMA_IRQHandler+0xd24>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0214 	bic.w	r2, r2, #20
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e027      	b.n	8003f24 <HAL_DMA_IRQHandler+0xd34>
 8003ed4:	40020010 	.word	0x40020010
 8003ed8:	40020028 	.word	0x40020028
 8003edc:	40020040 	.word	0x40020040
 8003ee0:	40020058 	.word	0x40020058
 8003ee4:	40020070 	.word	0x40020070
 8003ee8:	40020088 	.word	0x40020088
 8003eec:	400200a0 	.word	0x400200a0
 8003ef0:	400200b8 	.word	0x400200b8
 8003ef4:	40020410 	.word	0x40020410
 8003ef8:	40020428 	.word	0x40020428
 8003efc:	40020440 	.word	0x40020440
 8003f00:	40020458 	.word	0x40020458
 8003f04:	40020470 	.word	0x40020470
 8003f08:	40020488 	.word	0x40020488
 8003f0c:	400204a0 	.word	0x400204a0
 8003f10:	400204b8 	.word	0x400204b8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 020a 	bic.w	r2, r2, #10
 8003f22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8097 	beq.w	800406c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f46:	e091      	b.n	800406c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	2208      	movs	r2, #8
 8003f52:	409a      	lsls	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 8088 	beq.w	800406e <HAL_DMA_IRQHandler+0xe7e>
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8082 	beq.w	800406e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a41      	ldr	r2, [pc, #260]	; (8004074 <HAL_DMA_IRQHandler+0xe84>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d04a      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3f      	ldr	r2, [pc, #252]	; (8004078 <HAL_DMA_IRQHandler+0xe88>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d045      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3e      	ldr	r2, [pc, #248]	; (800407c <HAL_DMA_IRQHandler+0xe8c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d040      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a3c      	ldr	r2, [pc, #240]	; (8004080 <HAL_DMA_IRQHandler+0xe90>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d03b      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a3b      	ldr	r2, [pc, #236]	; (8004084 <HAL_DMA_IRQHandler+0xe94>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d036      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a39      	ldr	r2, [pc, #228]	; (8004088 <HAL_DMA_IRQHandler+0xe98>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d031      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a38      	ldr	r2, [pc, #224]	; (800408c <HAL_DMA_IRQHandler+0xe9c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d02c      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a36      	ldr	r2, [pc, #216]	; (8004090 <HAL_DMA_IRQHandler+0xea0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d027      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a35      	ldr	r2, [pc, #212]	; (8004094 <HAL_DMA_IRQHandler+0xea4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a33      	ldr	r2, [pc, #204]	; (8004098 <HAL_DMA_IRQHandler+0xea8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01d      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a32      	ldr	r2, [pc, #200]	; (800409c <HAL_DMA_IRQHandler+0xeac>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a30      	ldr	r2, [pc, #192]	; (80040a0 <HAL_DMA_IRQHandler+0xeb0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a2f      	ldr	r2, [pc, #188]	; (80040a4 <HAL_DMA_IRQHandler+0xeb4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2d      	ldr	r2, [pc, #180]	; (80040a8 <HAL_DMA_IRQHandler+0xeb8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2c      	ldr	r2, [pc, #176]	; (80040ac <HAL_DMA_IRQHandler+0xebc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_DMA_IRQHandler+0xe1a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2a      	ldr	r2, [pc, #168]	; (80040b0 <HAL_DMA_IRQHandler+0xec0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d108      	bne.n	800401c <HAL_DMA_IRQHandler+0xe2c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 021c 	bic.w	r2, r2, #28
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e007      	b.n	800402c <HAL_DMA_IRQHandler+0xe3c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 020e 	bic.w	r2, r2, #14
 800402a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2201      	movs	r2, #1
 8004036:	409a      	lsls	r2, r3
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
 8004062:	e004      	b.n	800406e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004064:	bf00      	nop
 8004066:	e002      	b.n	800406e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004068:	bf00      	nop
 800406a:	e000      	b.n	800406e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800406c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800406e:	3728      	adds	r7, #40	; 0x28
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40020010 	.word	0x40020010
 8004078:	40020028 	.word	0x40020028
 800407c:	40020040 	.word	0x40020040
 8004080:	40020058 	.word	0x40020058
 8004084:	40020070 	.word	0x40020070
 8004088:	40020088 	.word	0x40020088
 800408c:	400200a0 	.word	0x400200a0
 8004090:	400200b8 	.word	0x400200b8
 8004094:	40020410 	.word	0x40020410
 8004098:	40020428 	.word	0x40020428
 800409c:	40020440 	.word	0x40020440
 80040a0:	40020458 	.word	0x40020458
 80040a4:	40020470 	.word	0x40020470
 80040a8:	40020488 	.word	0x40020488
 80040ac:	400204a0 	.word	0x400204a0
 80040b0:	400204b8 	.word	0x400204b8

080040b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a42      	ldr	r2, [pc, #264]	; (80041cc <DMA_CalcBaseAndBitshift+0x118>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d04a      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a41      	ldr	r2, [pc, #260]	; (80041d0 <DMA_CalcBaseAndBitshift+0x11c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d045      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a3f      	ldr	r2, [pc, #252]	; (80041d4 <DMA_CalcBaseAndBitshift+0x120>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d040      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a3e      	ldr	r2, [pc, #248]	; (80041d8 <DMA_CalcBaseAndBitshift+0x124>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03b      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a3c      	ldr	r2, [pc, #240]	; (80041dc <DMA_CalcBaseAndBitshift+0x128>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d036      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a3b      	ldr	r2, [pc, #236]	; (80041e0 <DMA_CalcBaseAndBitshift+0x12c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d031      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a39      	ldr	r2, [pc, #228]	; (80041e4 <DMA_CalcBaseAndBitshift+0x130>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02c      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a38      	ldr	r2, [pc, #224]	; (80041e8 <DMA_CalcBaseAndBitshift+0x134>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d027      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a36      	ldr	r2, [pc, #216]	; (80041ec <DMA_CalcBaseAndBitshift+0x138>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a35      	ldr	r2, [pc, #212]	; (80041f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01d      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a33      	ldr	r2, [pc, #204]	; (80041f4 <DMA_CalcBaseAndBitshift+0x140>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a32      	ldr	r2, [pc, #200]	; (80041f8 <DMA_CalcBaseAndBitshift+0x144>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a30      	ldr	r2, [pc, #192]	; (80041fc <DMA_CalcBaseAndBitshift+0x148>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <DMA_CalcBaseAndBitshift+0x14c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a2d      	ldr	r2, [pc, #180]	; (8004204 <DMA_CalcBaseAndBitshift+0x150>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <DMA_CalcBaseAndBitshift+0xa8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2c      	ldr	r2, [pc, #176]	; (8004208 <DMA_CalcBaseAndBitshift+0x154>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d101      	bne.n	8004160 <DMA_CalcBaseAndBitshift+0xac>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <DMA_CalcBaseAndBitshift+0xae>
 8004160:	2300      	movs	r3, #0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d024      	beq.n	80041b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	3b10      	subs	r3, #16
 800416e:	4a27      	ldr	r2, [pc, #156]	; (800420c <DMA_CalcBaseAndBitshift+0x158>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	4a24      	ldr	r2, [pc, #144]	; (8004210 <DMA_CalcBaseAndBitshift+0x15c>)
 8004180:	5cd3      	ldrb	r3, [r2, r3]
 8004182:	461a      	mov	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d908      	bls.n	80041a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <DMA_CalcBaseAndBitshift+0x160>)
 8004196:	4013      	ands	r3, r2
 8004198:	1d1a      	adds	r2, r3, #4
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	659a      	str	r2, [r3, #88]	; 0x58
 800419e:	e00d      	b.n	80041bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <DMA_CalcBaseAndBitshift+0x160>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6593      	str	r3, [r2, #88]	; 0x58
 80041ae:	e005      	b.n	80041bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40020010 	.word	0x40020010
 80041d0:	40020028 	.word	0x40020028
 80041d4:	40020040 	.word	0x40020040
 80041d8:	40020058 	.word	0x40020058
 80041dc:	40020070 	.word	0x40020070
 80041e0:	40020088 	.word	0x40020088
 80041e4:	400200a0 	.word	0x400200a0
 80041e8:	400200b8 	.word	0x400200b8
 80041ec:	40020410 	.word	0x40020410
 80041f0:	40020428 	.word	0x40020428
 80041f4:	40020440 	.word	0x40020440
 80041f8:	40020458 	.word	0x40020458
 80041fc:	40020470 	.word	0x40020470
 8004200:	40020488 	.word	0x40020488
 8004204:	400204a0 	.word	0x400204a0
 8004208:	400204b8 	.word	0x400204b8
 800420c:	aaaaaaab 	.word	0xaaaaaaab
 8004210:	0800b6cc 	.word	0x0800b6cc
 8004214:	fffffc00 	.word	0xfffffc00

08004218 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d120      	bne.n	800426e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	2b03      	cmp	r3, #3
 8004232:	d858      	bhi.n	80042e6 <DMA_CheckFifoParam+0xce>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <DMA_CheckFifoParam+0x24>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800424d 	.word	0x0800424d
 8004240:	0800425f 	.word	0x0800425f
 8004244:	0800424d 	.word	0x0800424d
 8004248:	080042e7 	.word	0x080042e7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d048      	beq.n	80042ea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800425c:	e045      	b.n	80042ea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004266:	d142      	bne.n	80042ee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800426c:	e03f      	b.n	80042ee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004276:	d123      	bne.n	80042c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	2b03      	cmp	r3, #3
 800427e:	d838      	bhi.n	80042f2 <DMA_CheckFifoParam+0xda>
 8004280:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <DMA_CheckFifoParam+0x70>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	08004299 	.word	0x08004299
 800428c:	0800429f 	.word	0x0800429f
 8004290:	08004299 	.word	0x08004299
 8004294:	080042b1 	.word	0x080042b1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
        break;
 800429c:	e030      	b.n	8004300 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d025      	beq.n	80042f6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042ae:	e022      	b.n	80042f6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042b8:	d11f      	bne.n	80042fa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042be:	e01c      	b.n	80042fa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d902      	bls.n	80042ce <DMA_CheckFifoParam+0xb6>
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d003      	beq.n	80042d4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80042cc:	e018      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
        break;
 80042d2:	e015      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00e      	beq.n	80042fe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
    break;
 80042e4:	e00b      	b.n	80042fe <DMA_CheckFifoParam+0xe6>
        break;
 80042e6:	bf00      	nop
 80042e8:	e00a      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
        break;
 80042ea:	bf00      	nop
 80042ec:	e008      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
        break;
 80042ee:	bf00      	nop
 80042f0:	e006      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
        break;
 80042f2:	bf00      	nop
 80042f4:	e004      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
        break;
 80042f6:	bf00      	nop
 80042f8:	e002      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
        break;
 80042fa:	bf00      	nop
 80042fc:	e000      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
    break;
 80042fe:	bf00      	nop
    }
  }

  return status;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop

08004310 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a38      	ldr	r2, [pc, #224]	; (8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d022      	beq.n	800436e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a36      	ldr	r2, [pc, #216]	; (8004408 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01d      	beq.n	800436e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a35      	ldr	r2, [pc, #212]	; (800440c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d018      	beq.n	800436e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a33      	ldr	r2, [pc, #204]	; (8004410 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a32      	ldr	r2, [pc, #200]	; (8004414 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a30      	ldr	r2, [pc, #192]	; (8004418 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2f      	ldr	r2, [pc, #188]	; (800441c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2d      	ldr	r2, [pc, #180]	; (8004420 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01a      	beq.n	80043ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	3b08      	subs	r3, #8
 8004380:	4a28      	ldr	r2, [pc, #160]	; (8004424 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4b26      	ldr	r3, [pc, #152]	; (8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	461a      	mov	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a24      	ldr	r2, [pc, #144]	; (800442c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800439c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	2201      	movs	r2, #1
 80043a6:	409a      	lsls	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80043ac:	e024      	b.n	80043f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	3b10      	subs	r3, #16
 80043b6:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4a1c      	ldr	r2, [pc, #112]	; (8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d806      	bhi.n	80043d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4a1b      	ldr	r2, [pc, #108]	; (8004438 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d902      	bls.n	80043d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3308      	adds	r3, #8
 80043d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4b18      	ldr	r3, [pc, #96]	; (800443c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	461a      	mov	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a16      	ldr	r2, [pc, #88]	; (8004440 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80043e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	2201      	movs	r2, #1
 80043f2:	409a      	lsls	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043f8:	bf00      	nop
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	58025408 	.word	0x58025408
 8004408:	5802541c 	.word	0x5802541c
 800440c:	58025430 	.word	0x58025430
 8004410:	58025444 	.word	0x58025444
 8004414:	58025458 	.word	0x58025458
 8004418:	5802546c 	.word	0x5802546c
 800441c:	58025480 	.word	0x58025480
 8004420:	58025494 	.word	0x58025494
 8004424:	cccccccd 	.word	0xcccccccd
 8004428:	16009600 	.word	0x16009600
 800442c:	58025880 	.word	0x58025880
 8004430:	aaaaaaab 	.word	0xaaaaaaab
 8004434:	400204b8 	.word	0x400204b8
 8004438:	4002040f 	.word	0x4002040f
 800443c:	10008200 	.word	0x10008200
 8004440:	40020880 	.word	0x40020880

08004444 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d04a      	beq.n	80044f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d847      	bhi.n	80044f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a25      	ldr	r2, [pc, #148]	; (80044fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d022      	beq.n	80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a24      	ldr	r2, [pc, #144]	; (8004500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d01d      	beq.n	80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a22      	ldr	r2, [pc, #136]	; (8004504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a21      	ldr	r2, [pc, #132]	; (8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1f      	ldr	r2, [pc, #124]	; (800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1e      	ldr	r2, [pc, #120]	; (8004510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d101      	bne.n	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80044b4:	2300      	movs	r3, #0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4b17      	ldr	r3, [pc, #92]	; (800451c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	461a      	mov	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a15      	ldr	r2, [pc, #84]	; (8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80044cc:	671a      	str	r2, [r3, #112]	; 0x70
 80044ce:	e009      	b.n	80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4b14      	ldr	r3, [pc, #80]	; (8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	461a      	mov	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a11      	ldr	r2, [pc, #68]	; (8004528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80044e2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	2201      	movs	r2, #1
 80044ea:	409a      	lsls	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	58025408 	.word	0x58025408
 8004500:	5802541c 	.word	0x5802541c
 8004504:	58025430 	.word	0x58025430
 8004508:	58025444 	.word	0x58025444
 800450c:	58025458 	.word	0x58025458
 8004510:	5802546c 	.word	0x5802546c
 8004514:	58025480 	.word	0x58025480
 8004518:	58025494 	.word	0x58025494
 800451c:	1600963f 	.word	0x1600963f
 8004520:	58025940 	.word	0x58025940
 8004524:	1000823f 	.word	0x1000823f
 8004528:	40020940 	.word	0x40020940

0800452c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800452c:	b480      	push	{r7}
 800452e:	b089      	sub	sp, #36	; 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800453a:	4b89      	ldr	r3, [pc, #548]	; (8004760 <HAL_GPIO_Init+0x234>)
 800453c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800453e:	e194      	b.n	800486a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	2101      	movs	r1, #1
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa01 f303 	lsl.w	r3, r1, r3
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8186 	beq.w	8004864 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d005      	beq.n	8004570 <HAL_GPIO_Init+0x44>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d130      	bne.n	80045d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	2203      	movs	r2, #3
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4313      	orrs	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045a6:	2201      	movs	r2, #1
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	f003 0201 	and.w	r2, r3, #1
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d017      	beq.n	800460e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	2203      	movs	r2, #3
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4313      	orrs	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d123      	bne.n	8004662 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	08da      	lsrs	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3208      	adds	r2, #8
 8004622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	220f      	movs	r2, #15
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	08da      	lsrs	r2, r3, #3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3208      	adds	r2, #8
 800465c:	69b9      	ldr	r1, [r7, #24]
 800465e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	2203      	movs	r2, #3
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43db      	mvns	r3, r3
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	4013      	ands	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 0203 	and.w	r2, r3, #3
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4313      	orrs	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80e0 	beq.w	8004864 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046a4:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <HAL_GPIO_Init+0x238>)
 80046a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80046aa:	4a2e      	ldr	r2, [pc, #184]	; (8004764 <HAL_GPIO_Init+0x238>)
 80046ac:	f043 0302 	orr.w	r3, r3, #2
 80046b0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80046b4:	4b2b      	ldr	r3, [pc, #172]	; (8004764 <HAL_GPIO_Init+0x238>)
 80046b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046c2:	4a29      	ldr	r2, [pc, #164]	; (8004768 <HAL_GPIO_Init+0x23c>)
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	3302      	adds	r3, #2
 80046ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	220f      	movs	r2, #15
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a20      	ldr	r2, [pc, #128]	; (800476c <HAL_GPIO_Init+0x240>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d052      	beq.n	8004794 <HAL_GPIO_Init+0x268>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <HAL_GPIO_Init+0x244>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d031      	beq.n	800475a <HAL_GPIO_Init+0x22e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <HAL_GPIO_Init+0x248>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d02b      	beq.n	8004756 <HAL_GPIO_Init+0x22a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <HAL_GPIO_Init+0x24c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d025      	beq.n	8004752 <HAL_GPIO_Init+0x226>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a1c      	ldr	r2, [pc, #112]	; (800477c <HAL_GPIO_Init+0x250>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d01f      	beq.n	800474e <HAL_GPIO_Init+0x222>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a1b      	ldr	r2, [pc, #108]	; (8004780 <HAL_GPIO_Init+0x254>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d019      	beq.n	800474a <HAL_GPIO_Init+0x21e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a1a      	ldr	r2, [pc, #104]	; (8004784 <HAL_GPIO_Init+0x258>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_GPIO_Init+0x21a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <HAL_GPIO_Init+0x25c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00d      	beq.n	8004742 <HAL_GPIO_Init+0x216>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a18      	ldr	r2, [pc, #96]	; (800478c <HAL_GPIO_Init+0x260>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <HAL_GPIO_Init+0x212>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a17      	ldr	r2, [pc, #92]	; (8004790 <HAL_GPIO_Init+0x264>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <HAL_GPIO_Init+0x20e>
 8004736:	2309      	movs	r3, #9
 8004738:	e02d      	b.n	8004796 <HAL_GPIO_Init+0x26a>
 800473a:	230a      	movs	r3, #10
 800473c:	e02b      	b.n	8004796 <HAL_GPIO_Init+0x26a>
 800473e:	2308      	movs	r3, #8
 8004740:	e029      	b.n	8004796 <HAL_GPIO_Init+0x26a>
 8004742:	2307      	movs	r3, #7
 8004744:	e027      	b.n	8004796 <HAL_GPIO_Init+0x26a>
 8004746:	2306      	movs	r3, #6
 8004748:	e025      	b.n	8004796 <HAL_GPIO_Init+0x26a>
 800474a:	2305      	movs	r3, #5
 800474c:	e023      	b.n	8004796 <HAL_GPIO_Init+0x26a>
 800474e:	2304      	movs	r3, #4
 8004750:	e021      	b.n	8004796 <HAL_GPIO_Init+0x26a>
 8004752:	2303      	movs	r3, #3
 8004754:	e01f      	b.n	8004796 <HAL_GPIO_Init+0x26a>
 8004756:	2302      	movs	r3, #2
 8004758:	e01d      	b.n	8004796 <HAL_GPIO_Init+0x26a>
 800475a:	2301      	movs	r3, #1
 800475c:	e01b      	b.n	8004796 <HAL_GPIO_Init+0x26a>
 800475e:	bf00      	nop
 8004760:	58000080 	.word	0x58000080
 8004764:	58024400 	.word	0x58024400
 8004768:	58000400 	.word	0x58000400
 800476c:	58020000 	.word	0x58020000
 8004770:	58020400 	.word	0x58020400
 8004774:	58020800 	.word	0x58020800
 8004778:	58020c00 	.word	0x58020c00
 800477c:	58021000 	.word	0x58021000
 8004780:	58021400 	.word	0x58021400
 8004784:	58021800 	.word	0x58021800
 8004788:	58021c00 	.word	0x58021c00
 800478c:	58022000 	.word	0x58022000
 8004790:	58022400 	.word	0x58022400
 8004794:	2300      	movs	r3, #0
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	f002 0203 	and.w	r2, r2, #3
 800479c:	0092      	lsls	r2, r2, #2
 800479e:	4093      	lsls	r3, r2
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047a6:	4938      	ldr	r1, [pc, #224]	; (8004888 <HAL_GPIO_Init+0x35c>)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	3302      	adds	r3, #2
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	43db      	mvns	r3, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4013      	ands	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	43db      	mvns	r3, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4013      	ands	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	3301      	adds	r3, #1
 8004868:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	f47f ae63 	bne.w	8004540 <HAL_GPIO_Init+0x14>
  }
}
 800487a:	bf00      	nop
 800487c:	bf00      	nop
 800487e:	3724      	adds	r7, #36	; 0x24
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	58000400 	.word	0x58000400

0800488c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]
 8004898:	4613      	mov	r3, r2
 800489a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800489c:	787b      	ldrb	r3, [r7, #1]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048a2:	887a      	ldrh	r2, [r7, #2]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80048a8:	e003      	b.n	80048b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	041a      	lsls	r2, r3, #16
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	619a      	str	r2, [r3, #24]
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048be:	b480      	push	{r7}
 80048c0:	b085      	sub	sp, #20
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048d0:	887a      	ldrh	r2, [r7, #2]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4013      	ands	r3, r2
 80048d6:	041a      	lsls	r2, r3, #16
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	43d9      	mvns	r1, r3
 80048dc:	887b      	ldrh	r3, [r7, #2]
 80048de:	400b      	ands	r3, r1
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	619a      	str	r2, [r3, #24]
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	4603      	mov	r3, r0
 80048fa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80048fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004900:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800490c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	4618      	mov	r0, r3
 800491a:	f7fd f91d 	bl	8001b58 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004930:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	2b06      	cmp	r3, #6
 800493a:	d00a      	beq.n	8004952 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800493c:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d001      	beq.n	800494e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e040      	b.n	80049d0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e03e      	b.n	80049d0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004952:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800495a:	491f      	ldr	r1, [pc, #124]	; (80049d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4313      	orrs	r3, r2
 8004960:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004962:	f7fd ff9b 	bl	800289c <HAL_GetTick>
 8004966:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004968:	e009      	b.n	800497e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800496a:	f7fd ff97 	bl	800289c <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004978:	d901      	bls.n	800497e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e028      	b.n	80049d0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800497e:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498a:	d1ee      	bne.n	800496a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b1e      	cmp	r3, #30
 8004990:	d008      	beq.n	80049a4 <HAL_PWREx_ConfigSupply+0x7c>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b2e      	cmp	r3, #46	; 0x2e
 8004996:	d005      	beq.n	80049a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b1d      	cmp	r3, #29
 800499c:	d002      	beq.n	80049a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b2d      	cmp	r3, #45	; 0x2d
 80049a2:	d114      	bne.n	80049ce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80049a4:	f7fd ff7a 	bl	800289c <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80049aa:	e009      	b.n	80049c0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049ac:	f7fd ff76 	bl	800289c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ba:	d901      	bls.n	80049c0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e007      	b.n	80049d0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <HAL_PWREx_ConfigSupply+0xb0>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049cc:	d1ee      	bne.n	80049ac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	58024800 	.word	0x58024800

080049dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08c      	sub	sp, #48	; 0x30
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f000 bc1f 	b.w	800522e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80b3 	beq.w	8004b64 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049fe:	4b95      	ldr	r3, [pc, #596]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a08:	4b92      	ldr	r3, [pc, #584]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d007      	beq.n	8004a24 <HAL_RCC_OscConfig+0x48>
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	2b18      	cmp	r3, #24
 8004a18:	d112      	bne.n	8004a40 <HAL_RCC_OscConfig+0x64>
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d10d      	bne.n	8004a40 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a24:	4b8b      	ldr	r3, [pc, #556]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8098 	beq.w	8004b62 <HAL_RCC_OscConfig+0x186>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f040 8093 	bne.w	8004b62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e3f6      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCC_OscConfig+0x7c>
 8004a4a:	4b82      	ldr	r3, [pc, #520]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a81      	ldr	r2, [pc, #516]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e058      	b.n	8004b0a <HAL_RCC_OscConfig+0x12e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d112      	bne.n	8004a86 <HAL_RCC_OscConfig+0xaa>
 8004a60:	4b7c      	ldr	r3, [pc, #496]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a7b      	ldr	r2, [pc, #492]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	4b79      	ldr	r3, [pc, #484]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a78      	ldr	r2, [pc, #480]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b76      	ldr	r3, [pc, #472]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a75      	ldr	r2, [pc, #468]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e041      	b.n	8004b0a <HAL_RCC_OscConfig+0x12e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a8e:	d112      	bne.n	8004ab6 <HAL_RCC_OscConfig+0xda>
 8004a90:	4b70      	ldr	r3, [pc, #448]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a6f      	ldr	r2, [pc, #444]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4b6d      	ldr	r3, [pc, #436]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a6c      	ldr	r2, [pc, #432]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004aa2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b6a      	ldr	r3, [pc, #424]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a69      	ldr	r2, [pc, #420]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e029      	b.n	8004b0a <HAL_RCC_OscConfig+0x12e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004abe:	d112      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x10a>
 8004ac0:	4b64      	ldr	r3, [pc, #400]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a63      	ldr	r2, [pc, #396]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ac6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4b61      	ldr	r3, [pc, #388]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a60      	ldr	r2, [pc, #384]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	4b5e      	ldr	r3, [pc, #376]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5d      	ldr	r2, [pc, #372]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e011      	b.n	8004b0a <HAL_RCC_OscConfig+0x12e>
 8004ae6:	4b5b      	ldr	r3, [pc, #364]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a5a      	ldr	r2, [pc, #360]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b58      	ldr	r3, [pc, #352]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a57      	ldr	r2, [pc, #348]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b55      	ldr	r3, [pc, #340]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a54      	ldr	r2, [pc, #336]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d013      	beq.n	8004b3a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fd fec3 	bl	800289c <HAL_GetTick>
 8004b16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b1a:	f7fd febf 	bl	800289c <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b64      	cmp	r3, #100	; 0x64
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e380      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b2c:	4b49      	ldr	r3, [pc, #292]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x13e>
 8004b38:	e014      	b.n	8004b64 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3a:	f7fd feaf 	bl	800289c <HAL_GetTick>
 8004b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b42:	f7fd feab 	bl	800289c <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b64      	cmp	r3, #100	; 0x64
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e36c      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b54:	4b3f      	ldr	r3, [pc, #252]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1f0      	bne.n	8004b42 <HAL_RCC_OscConfig+0x166>
 8004b60:	e000      	b.n	8004b64 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 808c 	beq.w	8004c8a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b72:	4b38      	ldr	r3, [pc, #224]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b7a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b7c:	4b35      	ldr	r3, [pc, #212]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_RCC_OscConfig+0x1bc>
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	2b18      	cmp	r3, #24
 8004b8c:	d137      	bne.n	8004bfe <HAL_RCC_OscConfig+0x222>
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d132      	bne.n	8004bfe <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b98:	4b2e      	ldr	r3, [pc, #184]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x1d4>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e33e      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bb0:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 0219 	bic.w	r2, r3, #25
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4925      	ldr	r1, [pc, #148]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc2:	f7fd fe6b 	bl	800289c <HAL_GetTick>
 8004bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bca:	f7fd fe67 	bl	800289c <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e328      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be8:	4b1a      	ldr	r3, [pc, #104]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	061b      	lsls	r3, r3, #24
 8004bf6:	4917      	ldr	r1, [pc, #92]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bfc:	e045      	b.n	8004c8a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d028      	beq.n	8004c58 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 0219 	bic.w	r2, r3, #25
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	4910      	ldr	r1, [pc, #64]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fd fe40 	bl	800289c <HAL_GetTick>
 8004c1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c20:	f7fd fe3c 	bl	800289c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e2fd      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c32:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	061b      	lsls	r3, r3, #24
 8004c4c:	4901      	ldr	r1, [pc, #4]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	604b      	str	r3, [r1, #4]
 8004c52:	e01a      	b.n	8004c8a <HAL_RCC_OscConfig+0x2ae>
 8004c54:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c58:	4b97      	ldr	r3, [pc, #604]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a96      	ldr	r2, [pc, #600]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7fd fe1a 	bl	800289c <HAL_GetTick>
 8004c68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c6c:	f7fd fe16 	bl	800289c <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e2d7      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c7e:	4b8e      	ldr	r3, [pc, #568]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d06a      	beq.n	8004d6c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c96:	4b88      	ldr	r3, [pc, #544]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ca0:	4b85      	ldr	r3, [pc, #532]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d007      	beq.n	8004cbc <HAL_RCC_OscConfig+0x2e0>
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b18      	cmp	r3, #24
 8004cb0:	d11b      	bne.n	8004cea <HAL_RCC_OscConfig+0x30e>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d116      	bne.n	8004cea <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cbc:	4b7e      	ldr	r3, [pc, #504]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x2f8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e2ac      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cd4:	4b78      	ldr	r3, [pc, #480]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	061b      	lsls	r3, r3, #24
 8004ce2:	4975      	ldr	r1, [pc, #468]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ce8:	e040      	b.n	8004d6c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d023      	beq.n	8004d3a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004cf2:	4b71      	ldr	r3, [pc, #452]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a70      	ldr	r2, [pc, #448]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fd fdcd 	bl	800289c <HAL_GetTick>
 8004d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d06:	f7fd fdc9 	bl	800289c <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e28a      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d18:	4b67      	ldr	r3, [pc, #412]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d24:	4b64      	ldr	r3, [pc, #400]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	061b      	lsls	r3, r3, #24
 8004d32:	4961      	ldr	r1, [pc, #388]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60cb      	str	r3, [r1, #12]
 8004d38:	e018      	b.n	8004d6c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d3a:	4b5f      	ldr	r3, [pc, #380]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a5e      	ldr	r2, [pc, #376]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d46:	f7fd fda9 	bl	800289c <HAL_GetTick>
 8004d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d4e:	f7fd fda5 	bl	800289c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e266      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d60:	4b55      	ldr	r3, [pc, #340]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f0      	bne.n	8004d4e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d036      	beq.n	8004de6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d019      	beq.n	8004db4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d80:	4b4d      	ldr	r3, [pc, #308]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d84:	4a4c      	ldr	r2, [pc, #304]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fd fd86 	bl	800289c <HAL_GetTick>
 8004d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d94:	f7fd fd82 	bl	800289c <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e243      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004da6:	4b44      	ldr	r3, [pc, #272]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x3b8>
 8004db2:	e018      	b.n	8004de6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db4:	4b40      	ldr	r3, [pc, #256]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db8:	4a3f      	ldr	r2, [pc, #252]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004dba:	f023 0301 	bic.w	r3, r3, #1
 8004dbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc0:	f7fd fd6c 	bl	800289c <HAL_GetTick>
 8004dc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc8:	f7fd fd68 	bl	800289c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e229      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dda:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d036      	beq.n	8004e60 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d019      	beq.n	8004e2e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dfa:	4b2f      	ldr	r3, [pc, #188]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a2e      	ldr	r2, [pc, #184]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004e00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e06:	f7fd fd49 	bl	800289c <HAL_GetTick>
 8004e0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e0e:	f7fd fd45 	bl	800289c <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e206      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e20:	4b25      	ldr	r3, [pc, #148]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <HAL_RCC_OscConfig+0x432>
 8004e2c:	e018      	b.n	8004e60 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e2e:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a21      	ldr	r2, [pc, #132]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e3a:	f7fd fd2f 	bl	800289c <HAL_GetTick>
 8004e3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e42:	f7fd fd2b 	bl	800289c <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e1ec      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e54:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f0      	bne.n	8004e42 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80af 	beq.w	8004fcc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <HAL_RCC_OscConfig+0x4e0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a12      	ldr	r2, [pc, #72]	; (8004ebc <HAL_RCC_OscConfig+0x4e0>)
 8004e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e7a:	f7fd fd0f 	bl	800289c <HAL_GetTick>
 8004e7e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e82:	f7fd fd0b 	bl	800289c <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b64      	cmp	r3, #100	; 0x64
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e1cc      	b.n	800522e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e94:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <HAL_RCC_OscConfig+0x4e0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0f0      	beq.n	8004e82 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10b      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4e4>
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	4a02      	ldr	r2, [pc, #8]	; (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb4:	e05b      	b.n	8004f6e <HAL_RCC_OscConfig+0x592>
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	58024800 	.word	0x58024800
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d112      	bne.n	8004eee <HAL_RCC_OscConfig+0x512>
 8004ec8:	4b9d      	ldr	r3, [pc, #628]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	4a9c      	ldr	r2, [pc, #624]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed4:	4b9a      	ldr	r3, [pc, #616]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a99      	ldr	r2, [pc, #612]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee0:	4b97      	ldr	r3, [pc, #604]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	4a96      	ldr	r2, [pc, #600]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ee6:	f023 0304 	bic.w	r3, r3, #4
 8004eea:	6713      	str	r3, [r2, #112]	; 0x70
 8004eec:	e03f      	b.n	8004f6e <HAL_RCC_OscConfig+0x592>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d112      	bne.n	8004f1c <HAL_RCC_OscConfig+0x540>
 8004ef6:	4b92      	ldr	r3, [pc, #584]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	4a91      	ldr	r2, [pc, #580]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004efc:	f043 0304 	orr.w	r3, r3, #4
 8004f00:	6713      	str	r3, [r2, #112]	; 0x70
 8004f02:	4b8f      	ldr	r3, [pc, #572]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	4a8e      	ldr	r2, [pc, #568]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f0e:	4b8c      	ldr	r3, [pc, #560]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	4a8b      	ldr	r2, [pc, #556]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1a:	e028      	b.n	8004f6e <HAL_RCC_OscConfig+0x592>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b85      	cmp	r3, #133	; 0x85
 8004f22:	d112      	bne.n	8004f4a <HAL_RCC_OscConfig+0x56e>
 8004f24:	4b86      	ldr	r3, [pc, #536]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	4a85      	ldr	r2, [pc, #532]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f2a:	f043 0304 	orr.w	r3, r3, #4
 8004f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f30:	4b83      	ldr	r3, [pc, #524]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	4a82      	ldr	r2, [pc, #520]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3c:	4b80      	ldr	r3, [pc, #512]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	4a7f      	ldr	r2, [pc, #508]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6713      	str	r3, [r2, #112]	; 0x70
 8004f48:	e011      	b.n	8004f6e <HAL_RCC_OscConfig+0x592>
 8004f4a:	4b7d      	ldr	r3, [pc, #500]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	4a7c      	ldr	r2, [pc, #496]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	6713      	str	r3, [r2, #112]	; 0x70
 8004f56:	4b7a      	ldr	r3, [pc, #488]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a79      	ldr	r2, [pc, #484]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	6713      	str	r3, [r2, #112]	; 0x70
 8004f62:	4b77      	ldr	r3, [pc, #476]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f66:	4a76      	ldr	r2, [pc, #472]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d015      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f76:	f7fd fc91 	bl	800289c <HAL_GetTick>
 8004f7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f7c:	e00a      	b.n	8004f94 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7e:	f7fd fc8d 	bl	800289c <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e14c      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f94:	4b6a      	ldr	r3, [pc, #424]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0ee      	beq.n	8004f7e <HAL_RCC_OscConfig+0x5a2>
 8004fa0:	e014      	b.n	8004fcc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa2:	f7fd fc7b 	bl	800289c <HAL_GetTick>
 8004fa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fa8:	e00a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004faa:	f7fd fc77 	bl	800289c <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e136      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fc0:	4b5f      	ldr	r3, [pc, #380]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ee      	bne.n	8004faa <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 812b 	beq.w	800522c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fd6:	4b5a      	ldr	r3, [pc, #360]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fde:	2b18      	cmp	r3, #24
 8004fe0:	f000 80bb 	beq.w	800515a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	f040 8095 	bne.w	8005118 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fee:	4b54      	ldr	r3, [pc, #336]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a53      	ldr	r2, [pc, #332]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ff4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7fd fc4f 	bl	800289c <HAL_GetTick>
 8004ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005002:	f7fd fc4b 	bl	800289c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e10c      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005014:	4b4a      	ldr	r3, [pc, #296]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005020:	4b47      	ldr	r3, [pc, #284]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8005022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005024:	4b47      	ldr	r3, [pc, #284]	; (8005144 <HAL_RCC_OscConfig+0x768>)
 8005026:	4013      	ands	r3, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005030:	0112      	lsls	r2, r2, #4
 8005032:	430a      	orrs	r2, r1
 8005034:	4942      	ldr	r1, [pc, #264]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8005036:	4313      	orrs	r3, r2
 8005038:	628b      	str	r3, [r1, #40]	; 0x28
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	3b01      	subs	r3, #1
 8005040:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	3b01      	subs	r3, #1
 800504a:	025b      	lsls	r3, r3, #9
 800504c:	b29b      	uxth	r3, r3
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	3b01      	subs	r3, #1
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	3b01      	subs	r3, #1
 8005064:	061b      	lsls	r3, r3, #24
 8005066:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800506a:	4935      	ldr	r1, [pc, #212]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 800506c:	4313      	orrs	r3, r2
 800506e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005070:	4b33      	ldr	r3, [pc, #204]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	4a32      	ldr	r2, [pc, #200]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800507c:	4b30      	ldr	r3, [pc, #192]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 800507e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005080:	4b31      	ldr	r3, [pc, #196]	; (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005082:	4013      	ands	r3, r2
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005088:	00d2      	lsls	r2, r2, #3
 800508a:	492d      	ldr	r1, [pc, #180]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 800508c:	4313      	orrs	r3, r2
 800508e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005090:	4b2b      	ldr	r3, [pc, #172]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	f023 020c 	bic.w	r2, r3, #12
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	4928      	ldr	r1, [pc, #160]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050a2:	4b27      	ldr	r3, [pc, #156]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	f023 0202 	bic.w	r2, r3, #2
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	4924      	ldr	r1, [pc, #144]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050b4:	4b22      	ldr	r3, [pc, #136]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	4a21      	ldr	r2, [pc, #132]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 80050ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c0:	4b1f      	ldr	r3, [pc, #124]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 80050c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050cc:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 80050d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80050d8:	4b19      	ldr	r3, [pc, #100]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	4a18      	ldr	r2, [pc, #96]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e4:	4b16      	ldr	r3, [pc, #88]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a15      	ldr	r2, [pc, #84]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 80050ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fd fbd4 	bl	800289c <HAL_GetTick>
 80050f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f8:	f7fd fbd0 	bl	800289c <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e091      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800510a:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x71c>
 8005116:	e089      	b.n	800522c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005118:	4b09      	ldr	r3, [pc, #36]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a08      	ldr	r2, [pc, #32]	; (8005140 <HAL_RCC_OscConfig+0x764>)
 800511e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005124:	f7fd fbba 	bl	800289c <HAL_GetTick>
 8005128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800512a:	e00f      	b.n	800514c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800512c:	f7fd fbb6 	bl	800289c <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d908      	bls.n	800514c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e077      	b.n	800522e <HAL_RCC_OscConfig+0x852>
 800513e:	bf00      	nop
 8005140:	58024400 	.word	0x58024400
 8005144:	fffffc0c 	.word	0xfffffc0c
 8005148:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800514c:	4b3a      	ldr	r3, [pc, #232]	; (8005238 <HAL_RCC_OscConfig+0x85c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e9      	bne.n	800512c <HAL_RCC_OscConfig+0x750>
 8005158:	e068      	b.n	800522c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800515a:	4b37      	ldr	r3, [pc, #220]	; (8005238 <HAL_RCC_OscConfig+0x85c>)
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005160:	4b35      	ldr	r3, [pc, #212]	; (8005238 <HAL_RCC_OscConfig+0x85c>)
 8005162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005164:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b01      	cmp	r3, #1
 800516c:	d031      	beq.n	80051d2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f003 0203 	and.w	r2, r3, #3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005178:	429a      	cmp	r2, r3
 800517a:	d12a      	bne.n	80051d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	091b      	lsrs	r3, r3, #4
 8005180:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005188:	429a      	cmp	r2, r3
 800518a:	d122      	bne.n	80051d2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005198:	429a      	cmp	r2, r3
 800519a:	d11a      	bne.n	80051d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	0a5b      	lsrs	r3, r3, #9
 80051a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d111      	bne.n	80051d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	0c1b      	lsrs	r3, r3, #16
 80051b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d108      	bne.n	80051d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	0e1b      	lsrs	r3, r3, #24
 80051c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e02b      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80051d6:	4b18      	ldr	r3, [pc, #96]	; (8005238 <HAL_RCC_OscConfig+0x85c>)
 80051d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051da:	08db      	lsrs	r3, r3, #3
 80051dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051e0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d01f      	beq.n	800522c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80051ec:	4b12      	ldr	r3, [pc, #72]	; (8005238 <HAL_RCC_OscConfig+0x85c>)
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	4a11      	ldr	r2, [pc, #68]	; (8005238 <HAL_RCC_OscConfig+0x85c>)
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051f8:	f7fd fb50 	bl	800289c <HAL_GetTick>
 80051fc:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80051fe:	bf00      	nop
 8005200:	f7fd fb4c 	bl	800289c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	4293      	cmp	r3, r2
 800520a:	d0f9      	beq.n	8005200 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800520c:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <HAL_RCC_OscConfig+0x85c>)
 800520e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <HAL_RCC_OscConfig+0x860>)
 8005212:	4013      	ands	r3, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005218:	00d2      	lsls	r2, r2, #3
 800521a:	4907      	ldr	r1, [pc, #28]	; (8005238 <HAL_RCC_OscConfig+0x85c>)
 800521c:	4313      	orrs	r3, r2
 800521e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005220:	4b05      	ldr	r3, [pc, #20]	; (8005238 <HAL_RCC_OscConfig+0x85c>)
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	4a04      	ldr	r2, [pc, #16]	; (8005238 <HAL_RCC_OscConfig+0x85c>)
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3730      	adds	r7, #48	; 0x30
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	58024400 	.word	0x58024400
 800523c:	ffff0007 	.word	0xffff0007

08005240 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e19c      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005254:	4b8a      	ldr	r3, [pc, #552]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d910      	bls.n	8005284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005262:	4b87      	ldr	r3, [pc, #540]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 020f 	bic.w	r2, r3, #15
 800526a:	4985      	ldr	r1, [pc, #532]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4313      	orrs	r3, r2
 8005270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005272:	4b83      	ldr	r3, [pc, #524]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d001      	beq.n	8005284 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e184      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d010      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	4b7b      	ldr	r3, [pc, #492]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800529c:	429a      	cmp	r2, r3
 800529e:	d908      	bls.n	80052b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052a0:	4b78      	ldr	r3, [pc, #480]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	4975      	ldr	r1, [pc, #468]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d010      	beq.n	80052e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	4b70      	ldr	r3, [pc, #448]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d908      	bls.n	80052e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052ce:	4b6d      	ldr	r3, [pc, #436]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	496a      	ldr	r1, [pc, #424]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d010      	beq.n	800530e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	4b64      	ldr	r3, [pc, #400]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d908      	bls.n	800530e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052fc:	4b61      	ldr	r3, [pc, #388]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	495e      	ldr	r1, [pc, #376]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 800530a:	4313      	orrs	r3, r2
 800530c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d010      	beq.n	800533c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69da      	ldr	r2, [r3, #28]
 800531e:	4b59      	ldr	r3, [pc, #356]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005326:	429a      	cmp	r2, r3
 8005328:	d908      	bls.n	800533c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800532a:	4b56      	ldr	r3, [pc, #344]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	4953      	ldr	r1, [pc, #332]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005338:	4313      	orrs	r3, r2
 800533a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d010      	beq.n	800536a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	4b4d      	ldr	r3, [pc, #308]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	429a      	cmp	r2, r3
 8005356:	d908      	bls.n	800536a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005358:	4b4a      	ldr	r3, [pc, #296]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	f023 020f 	bic.w	r2, r3, #15
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4947      	ldr	r1, [pc, #284]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005366:	4313      	orrs	r3, r2
 8005368:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d055      	beq.n	8005422 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005376:	4b43      	ldr	r3, [pc, #268]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4940      	ldr	r1, [pc, #256]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005384:	4313      	orrs	r3, r2
 8005386:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d107      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005390:	4b3c      	ldr	r3, [pc, #240]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d121      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0f6      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053a8:	4b36      	ldr	r3, [pc, #216]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d115      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0ea      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d107      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053c0:	4b30      	ldr	r3, [pc, #192]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0de      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053d0:	4b2c      	ldr	r3, [pc, #176]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e0d6      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053e0:	4b28      	ldr	r3, [pc, #160]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f023 0207 	bic.w	r2, r3, #7
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4925      	ldr	r1, [pc, #148]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f2:	f7fd fa53 	bl	800289c <HAL_GetTick>
 80053f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f8:	e00a      	b.n	8005410 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fa:	f7fd fa4f 	bl	800289c <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	; 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e0be      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005410:	4b1c      	ldr	r3, [pc, #112]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	429a      	cmp	r2, r3
 8005420:	d1eb      	bne.n	80053fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d010      	beq.n	8005450 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	4b14      	ldr	r3, [pc, #80]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	429a      	cmp	r2, r3
 800543c:	d208      	bcs.n	8005450 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800543e:	4b11      	ldr	r3, [pc, #68]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f023 020f 	bic.w	r2, r3, #15
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	490e      	ldr	r1, [pc, #56]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 800544c:	4313      	orrs	r3, r2
 800544e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d214      	bcs.n	8005488 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f023 020f 	bic.w	r2, r3, #15
 8005466:	4906      	ldr	r1, [pc, #24]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	4313      	orrs	r3, r2
 800546c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d005      	beq.n	8005488 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e086      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
 8005480:	52002000 	.word	0x52002000
 8005484:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d010      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	4b3f      	ldr	r3, [pc, #252]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d208      	bcs.n	80054b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054a4:	4b3c      	ldr	r3, [pc, #240]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	4939      	ldr	r1, [pc, #228]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d010      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	4b34      	ldr	r3, [pc, #208]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d208      	bcs.n	80054e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054d2:	4b31      	ldr	r3, [pc, #196]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	492e      	ldr	r1, [pc, #184]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d010      	beq.n	8005512 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699a      	ldr	r2, [r3, #24]
 80054f4:	4b28      	ldr	r3, [pc, #160]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d208      	bcs.n	8005512 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005500:	4b25      	ldr	r3, [pc, #148]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	4922      	ldr	r1, [pc, #136]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 800550e:	4313      	orrs	r3, r2
 8005510:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d010      	beq.n	8005540 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69da      	ldr	r2, [r3, #28]
 8005522:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800552a:	429a      	cmp	r2, r3
 800552c:	d208      	bcs.n	8005540 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800552e:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	4917      	ldr	r1, [pc, #92]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 800553c:	4313      	orrs	r3, r2
 800553e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005540:	f000 f834 	bl	80055ac <HAL_RCC_GetSysClockFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b14      	ldr	r3, [pc, #80]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	0a1b      	lsrs	r3, r3, #8
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	4912      	ldr	r1, [pc, #72]	; (800559c <HAL_RCC_ClockConfig+0x35c>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	f003 031f 	and.w	r3, r3, #31
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800555e:	4b0e      	ldr	r3, [pc, #56]	; (8005598 <HAL_RCC_ClockConfig+0x358>)
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	4a0d      	ldr	r2, [pc, #52]	; (800559c <HAL_RCC_ClockConfig+0x35c>)
 8005568:	5cd3      	ldrb	r3, [r2, r3]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
 8005574:	4a0a      	ldr	r2, [pc, #40]	; (80055a0 <HAL_RCC_ClockConfig+0x360>)
 8005576:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005578:	4a0a      	ldr	r2, [pc, #40]	; (80055a4 <HAL_RCC_ClockConfig+0x364>)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800557e:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <HAL_RCC_ClockConfig+0x368>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7fd f940 	bl	8002808 <HAL_InitTick>
 8005588:	4603      	mov	r3, r0
 800558a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	58024400 	.word	0x58024400
 800559c:	0800b6bc 	.word	0x0800b6bc
 80055a0:	24000008 	.word	0x24000008
 80055a4:	24000004 	.word	0x24000004
 80055a8:	2400000c 	.word	0x2400000c

080055ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b089      	sub	sp, #36	; 0x24
 80055b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055b2:	4bb3      	ldr	r3, [pc, #716]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055ba:	2b18      	cmp	r3, #24
 80055bc:	f200 8155 	bhi.w	800586a <HAL_RCC_GetSysClockFreq+0x2be>
 80055c0:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c6:	bf00      	nop
 80055c8:	0800562d 	.word	0x0800562d
 80055cc:	0800586b 	.word	0x0800586b
 80055d0:	0800586b 	.word	0x0800586b
 80055d4:	0800586b 	.word	0x0800586b
 80055d8:	0800586b 	.word	0x0800586b
 80055dc:	0800586b 	.word	0x0800586b
 80055e0:	0800586b 	.word	0x0800586b
 80055e4:	0800586b 	.word	0x0800586b
 80055e8:	08005653 	.word	0x08005653
 80055ec:	0800586b 	.word	0x0800586b
 80055f0:	0800586b 	.word	0x0800586b
 80055f4:	0800586b 	.word	0x0800586b
 80055f8:	0800586b 	.word	0x0800586b
 80055fc:	0800586b 	.word	0x0800586b
 8005600:	0800586b 	.word	0x0800586b
 8005604:	0800586b 	.word	0x0800586b
 8005608:	08005659 	.word	0x08005659
 800560c:	0800586b 	.word	0x0800586b
 8005610:	0800586b 	.word	0x0800586b
 8005614:	0800586b 	.word	0x0800586b
 8005618:	0800586b 	.word	0x0800586b
 800561c:	0800586b 	.word	0x0800586b
 8005620:	0800586b 	.word	0x0800586b
 8005624:	0800586b 	.word	0x0800586b
 8005628:	0800565f 	.word	0x0800565f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800562c:	4b94      	ldr	r3, [pc, #592]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0320 	and.w	r3, r3, #32
 8005634:	2b00      	cmp	r3, #0
 8005636:	d009      	beq.n	800564c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005638:	4b91      	ldr	r3, [pc, #580]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	08db      	lsrs	r3, r3, #3
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	4a90      	ldr	r2, [pc, #576]	; (8005884 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
 8005648:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800564a:	e111      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800564c:	4b8d      	ldr	r3, [pc, #564]	; (8005884 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800564e:	61bb      	str	r3, [r7, #24]
      break;
 8005650:	e10e      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005652:	4b8d      	ldr	r3, [pc, #564]	; (8005888 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005654:	61bb      	str	r3, [r7, #24]
      break;
 8005656:	e10b      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005658:	4b8c      	ldr	r3, [pc, #560]	; (800588c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800565a:	61bb      	str	r3, [r7, #24]
      break;
 800565c:	e108      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800565e:	4b88      	ldr	r3, [pc, #544]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005668:	4b85      	ldr	r3, [pc, #532]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005672:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005674:	4b82      	ldr	r3, [pc, #520]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800567e:	4b80      	ldr	r3, [pc, #512]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	08db      	lsrs	r3, r3, #3
 8005684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	fb02 f303 	mul.w	r3, r2, r3
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80e1 	beq.w	8005864 <HAL_RCC_GetSysClockFreq+0x2b8>
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	f000 8083 	beq.w	80057b0 <HAL_RCC_GetSysClockFreq+0x204>
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	f200 80a1 	bhi.w	80057f4 <HAL_RCC_GetSysClockFreq+0x248>
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0x114>
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d056      	beq.n	800576c <HAL_RCC_GetSysClockFreq+0x1c0>
 80056be:	e099      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056c0:	4b6f      	ldr	r3, [pc, #444]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d02d      	beq.n	8005728 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056cc:	4b6c      	ldr	r3, [pc, #432]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	08db      	lsrs	r3, r3, #3
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	4a6b      	ldr	r2, [pc, #428]	; (8005884 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
 80056dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f6:	4b62      	ldr	r3, [pc, #392]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005706:	ed97 6a02 	vldr	s12, [r7, #8]
 800570a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005890 <HAL_RCC_GetSysClockFreq+0x2e4>
 800570e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800571a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005722:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005726:	e087      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005732:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005894 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573a:	4b51      	ldr	r3, [pc, #324]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574a:	ed97 6a02 	vldr	s12, [r7, #8]
 800574e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005890 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005766:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800576a:	e065      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005898 <HAL_RCC_GetSysClockFreq+0x2ec>
 800577a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577e:	4b40      	ldr	r3, [pc, #256]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005792:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005890 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057ae:	e043      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800589c <HAL_RCC_GetSysClockFreq+0x2f0>
 80057be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c2:	4b2f      	ldr	r3, [pc, #188]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005890 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057f2:	e021      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005898 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005806:	4b1e      	ldr	r3, [pc, #120]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	ed97 6a02 	vldr	s12, [r7, #8]
 800581a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005890 <HAL_RCC_GetSysClockFreq+0x2e4>
 800581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005836:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005838:	4b11      	ldr	r3, [pc, #68]	; (8005880 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	0a5b      	lsrs	r3, r3, #9
 800583e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005842:	3301      	adds	r3, #1
 8005844:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	ee07 3a90 	vmov	s15, r3
 800584c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005850:	edd7 6a07 	vldr	s13, [r7, #28]
 8005854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800585c:	ee17 3a90 	vmov	r3, s15
 8005860:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005862:	e005      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
      break;
 8005868:	e002      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800586c:	61bb      	str	r3, [r7, #24]
      break;
 800586e:	bf00      	nop
  }

  return sysclockfreq;
 8005870:	69bb      	ldr	r3, [r7, #24]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3724      	adds	r7, #36	; 0x24
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	58024400 	.word	0x58024400
 8005884:	03d09000 	.word	0x03d09000
 8005888:	003d0900 	.word	0x003d0900
 800588c:	007a1200 	.word	0x007a1200
 8005890:	46000000 	.word	0x46000000
 8005894:	4c742400 	.word	0x4c742400
 8005898:	4a742400 	.word	0x4a742400
 800589c:	4af42400 	.word	0x4af42400

080058a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80058a6:	f7ff fe81 	bl	80055ac <HAL_RCC_GetSysClockFreq>
 80058aa:	4602      	mov	r2, r0
 80058ac:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	0a1b      	lsrs	r3, r3, #8
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	490f      	ldr	r1, [pc, #60]	; (80058f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80058b8:	5ccb      	ldrb	r3, [r1, r3]
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	fa22 f303 	lsr.w	r3, r2, r3
 80058c2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80058c4:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	4a09      	ldr	r2, [pc, #36]	; (80058f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80058ce:	5cd3      	ldrb	r3, [r2, r3]
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	fa22 f303 	lsr.w	r3, r2, r3
 80058da:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80058dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058de:	4a07      	ldr	r2, [pc, #28]	; (80058fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80058e4:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80058e6:	681b      	ldr	r3, [r3, #0]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	58024400 	.word	0x58024400
 80058f4:	0800b6bc 	.word	0x0800b6bc
 80058f8:	24000008 	.word	0x24000008
 80058fc:	24000004 	.word	0x24000004

08005900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005904:	f7ff ffcc 	bl	80058a0 <HAL_RCC_GetHCLKFreq>
 8005908:	4602      	mov	r2, r0
 800590a:	4b06      	ldr	r3, [pc, #24]	; (8005924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	4904      	ldr	r1, [pc, #16]	; (8005928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005916:	5ccb      	ldrb	r3, [r1, r3]
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005920:	4618      	mov	r0, r3
 8005922:	bd80      	pop	{r7, pc}
 8005924:	58024400 	.word	0x58024400
 8005928:	0800b6bc 	.word	0x0800b6bc

0800592c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005930:	f7ff ffb6 	bl	80058a0 <HAL_RCC_GetHCLKFreq>
 8005934:	4602      	mov	r2, r0
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	4904      	ldr	r1, [pc, #16]	; (8005954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005942:	5ccb      	ldrb	r3, [r1, r3]
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800594c:	4618      	mov	r0, r3
 800594e:	bd80      	pop	{r7, pc}
 8005950:	58024400 	.word	0x58024400
 8005954:	0800b6bc 	.word	0x0800b6bc

08005958 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800595c:	b0c8      	sub	sp, #288	; 0x120
 800595e:	af00      	add	r7, sp, #0
 8005960:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005964:	2300      	movs	r3, #0
 8005966:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800596a:	2300      	movs	r3, #0
 800596c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800597c:	2500      	movs	r5, #0
 800597e:	ea54 0305 	orrs.w	r3, r4, r5
 8005982:	d049      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800598a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800598e:	d02f      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005994:	d828      	bhi.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800599a:	d01a      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800599c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059a0:	d822      	bhi.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80059a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059aa:	d007      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059ac:	e01c      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ae:	4ba7      	ldr	r3, [pc, #668]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	4aa6      	ldr	r2, [pc, #664]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059ba:	e01a      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c0:	3308      	adds	r3, #8
 80059c2:	2102      	movs	r1, #2
 80059c4:	4618      	mov	r0, r3
 80059c6:	f001 fc43 	bl	8007250 <RCCEx_PLL2_Config>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059d0:	e00f      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d6:	3328      	adds	r3, #40	; 0x28
 80059d8:	2102      	movs	r1, #2
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fcea 	bl	80073b4 <RCCEx_PLL3_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059e6:	e004      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80059ee:	e000      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80059f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80059fa:	4b94      	ldr	r3, [pc, #592]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a08:	4a90      	ldr	r2, [pc, #576]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	6513      	str	r3, [r2, #80]	; 0x50
 8005a0e:	e003      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005a24:	f04f 0900 	mov.w	r9, #0
 8005a28:	ea58 0309 	orrs.w	r3, r8, r9
 8005a2c:	d047      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d82a      	bhi.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005a38:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3e:	bf00      	nop
 8005a40:	08005a55 	.word	0x08005a55
 8005a44:	08005a63 	.word	0x08005a63
 8005a48:	08005a79 	.word	0x08005a79
 8005a4c:	08005a97 	.word	0x08005a97
 8005a50:	08005a97 	.word	0x08005a97
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a54:	4b7d      	ldr	r3, [pc, #500]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	4a7c      	ldr	r2, [pc, #496]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a60:	e01a      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a66:	3308      	adds	r3, #8
 8005a68:	2100      	movs	r1, #0
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f001 fbf0 	bl	8007250 <RCCEx_PLL2_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a76:	e00f      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7c:	3328      	adds	r3, #40	; 0x28
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 fc97 	bl	80073b4 <RCCEx_PLL3_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a8c:	e004      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a94:	e000      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005aa0:	4b6a      	ldr	r3, [pc, #424]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa4:	f023 0107 	bic.w	r1, r3, #7
 8005aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aae:	4a67      	ldr	r2, [pc, #412]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	6513      	str	r3, [r2, #80]	; 0x50
 8005ab4:	e003      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005aba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005aca:	f04f 0b00 	mov.w	fp, #0
 8005ace:	ea5a 030b 	orrs.w	r3, sl, fp
 8005ad2:	d054      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ada:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005ade:	d036      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005ae0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005ae4:	d82f      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aea:	d032      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af0:	d829      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005af2:	2bc0      	cmp	r3, #192	; 0xc0
 8005af4:	d02f      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005af6:	2bc0      	cmp	r3, #192	; 0xc0
 8005af8:	d825      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005afa:	2b80      	cmp	r3, #128	; 0x80
 8005afc:	d018      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005afe:	2b80      	cmp	r3, #128	; 0x80
 8005b00:	d821      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d007      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005b0a:	e01c      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b0c:	4b4f      	ldr	r3, [pc, #316]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4a4e      	ldr	r2, [pc, #312]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005b18:	e01e      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b1e:	3308      	adds	r3, #8
 8005b20:	2100      	movs	r1, #0
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 fb94 	bl	8007250 <RCCEx_PLL2_Config>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005b2e:	e013      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b34:	3328      	adds	r3, #40	; 0x28
 8005b36:	2100      	movs	r1, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 fc3b 	bl	80073b4 <RCCEx_PLL3_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005b44:	e008      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b4c:	e004      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005b4e:	bf00      	nop
 8005b50:	e002      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005b52:	bf00      	nop
 8005b54:	e000      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005b60:	4b3a      	ldr	r3, [pc, #232]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b64:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6e:	4a37      	ldr	r2, [pc, #220]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b70:	430b      	orrs	r3, r1
 8005b72:	6513      	str	r3, [r2, #80]	; 0x50
 8005b74:	e003      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005b8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b94:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	d05c      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005ba8:	d03b      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005baa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005bae:	d834      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb4:	d037      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bba:	d82e      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005bbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bc0:	d033      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005bc2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bc6:	d828      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bcc:	d01a      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd2:	d822      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bdc:	d007      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005bde:	e01c      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be0:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	4a19      	ldr	r2, [pc, #100]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005bec:	e01e      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 fb2a 	bl	8007250 <RCCEx_PLL2_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005c02:	e013      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c08:	3328      	adds	r3, #40	; 0x28
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 fbd1 	bl	80073b4 <RCCEx_PLL3_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005c18:	e008      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c20:	e004      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005c22:	bf00      	nop
 8005c24:	e002      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005c26:	bf00      	nop
 8005c28:	e000      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10d      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c42:	4a02      	ldr	r2, [pc, #8]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6513      	str	r3, [r2, #80]	; 0x50
 8005c48:	e006      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005c4a:	bf00      	nop
 8005c4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c54:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005c72:	460b      	mov	r3, r1
 8005c74:	4313      	orrs	r3, r2
 8005c76:	d03a      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7e:	2b30      	cmp	r3, #48	; 0x30
 8005c80:	d01f      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005c82:	2b30      	cmp	r3, #48	; 0x30
 8005c84:	d819      	bhi.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d00c      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	d815      	bhi.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d019      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c92:	2b10      	cmp	r3, #16
 8005c94:	d111      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c96:	4bae      	ldr	r3, [pc, #696]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	4aad      	ldr	r2, [pc, #692]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005ca2:	e011      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca8:	3308      	adds	r3, #8
 8005caa:	2102      	movs	r1, #2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 facf 	bl	8007250 <RCCEx_PLL2_Config>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005cb8:	e006      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005cc0:	e002      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005cc2:	bf00      	nop
 8005cc4:	e000      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005cd0:	4b9f      	ldr	r3, [pc, #636]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cde:	4a9c      	ldr	r2, [pc, #624]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ce4:	e003      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005cfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	d051      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d18:	d035      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005d1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d1e:	d82e      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005d20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d24:	d031      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005d26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d2a:	d828      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d30:	d01a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d36:	d822      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d40:	d007      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005d42:	e01c      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d44:	4b82      	ldr	r3, [pc, #520]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	4a81      	ldr	r2, [pc, #516]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d50:	e01c      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d56:	3308      	adds	r3, #8
 8005d58:	2100      	movs	r1, #0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 fa78 	bl	8007250 <RCCEx_PLL2_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d66:	e011      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d6c:	3328      	adds	r3, #40	; 0x28
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 fb1f 	bl	80073b4 <RCCEx_PLL3_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d7c:	e006      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d84:	e002      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005d86:	bf00      	nop
 8005d88:	e000      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d94:	4b6e      	ldr	r3, [pc, #440]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d98:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005da2:	4a6b      	ldr	r2, [pc, #428]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6513      	str	r3, [r2, #80]	; 0x50
 8005da8:	e003      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005daa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005dc8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	d053      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ddc:	d033      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005dde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005de2:	d82c      	bhi.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005de4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005de8:	d02f      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005dea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dee:	d826      	bhi.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005df0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005df4:	d02b      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005df6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dfa:	d820      	bhi.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005dfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e00:	d012      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005e02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e06:	d81a      	bhi.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d022      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e10:	d115      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e16:	3308      	adds	r3, #8
 8005e18:	2101      	movs	r1, #1
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f001 fa18 	bl	8007250 <RCCEx_PLL2_Config>
 8005e20:	4603      	mov	r3, r0
 8005e22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e26:	e015      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e2c:	3328      	adds	r3, #40	; 0x28
 8005e2e:	2101      	movs	r1, #1
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 fabf 	bl	80073b4 <RCCEx_PLL3_Config>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e3c:	e00a      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e44:	e006      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005e46:	bf00      	nop
 8005e48:	e004      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005e4a:	bf00      	nop
 8005e4c:	e002      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e5c:	4b3c      	ldr	r3, [pc, #240]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e60:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e6a:	4a39      	ldr	r2, [pc, #228]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	6513      	str	r3, [r2, #80]	; 0x50
 8005e70:	e003      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005e86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e90:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4313      	orrs	r3, r2
 8005e98:	d060      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ea2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005ea6:	d039      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005ea8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005eac:	d832      	bhi.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eb2:	d035      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eb8:	d82c      	bhi.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebe:	d031      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec4:	d826      	bhi.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005ec6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eca:	d02d      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005ecc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ed0:	d820      	bhi.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed6:	d012      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005edc:	d81a      	bhi.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d024      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ee6:	d115      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eec:	3308      	adds	r3, #8
 8005eee:	2101      	movs	r1, #1
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 f9ad 	bl	8007250 <RCCEx_PLL2_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005efc:	e017      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f02:	3328      	adds	r3, #40	; 0x28
 8005f04:	2101      	movs	r1, #1
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 fa54 	bl	80073b4 <RCCEx_PLL3_Config>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f12:	e00c      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f1a:	e008      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005f1c:	bf00      	nop
 8005f1e:	e006      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005f20:	bf00      	nop
 8005f22:	e004      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005f24:	bf00      	nop
 8005f26:	e002      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005f28:	bf00      	nop
 8005f2a:	e000      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10e      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f46:	4a02      	ldr	r2, [pc, #8]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f4c:	e006      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005f4e:	bf00      	nop
 8005f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f76:	460b      	mov	r3, r1
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	d037      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f86:	d00e      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f8c:	d816      	bhi.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d018      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f96:	d111      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f98:	4bc4      	ldr	r3, [pc, #784]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	4ac3      	ldr	r2, [pc, #780]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005fa4:	e00f      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005faa:	3308      	adds	r3, #8
 8005fac:	2101      	movs	r1, #1
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 f94e 	bl	8007250 <RCCEx_PLL2_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005fba:	e004      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fce:	4bb7      	ldr	r3, [pc, #732]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fdc:	4ab3      	ldr	r2, [pc, #716]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fde:	430b      	orrs	r3, r1
 8005fe0:	6513      	str	r3, [r2, #80]	; 0x50
 8005fe2:	e003      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fe8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006002:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006006:	460b      	mov	r3, r1
 8006008:	4313      	orrs	r3, r2
 800600a:	d039      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800600c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006012:	2b03      	cmp	r3, #3
 8006014:	d81c      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006016:	a201      	add	r2, pc, #4	; (adr r2, 800601c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	08006059 	.word	0x08006059
 8006020:	0800602d 	.word	0x0800602d
 8006024:	0800603b 	.word	0x0800603b
 8006028:	08006059 	.word	0x08006059
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800602c:	4b9f      	ldr	r3, [pc, #636]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	4a9e      	ldr	r2, [pc, #632]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006038:	e00f      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800603a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603e:	3308      	adds	r3, #8
 8006040:	2102      	movs	r1, #2
 8006042:	4618      	mov	r0, r3
 8006044:	f001 f904 	bl	8007250 <RCCEx_PLL2_Config>
 8006048:	4603      	mov	r3, r0
 800604a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800604e:	e004      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006056:	e000      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800605a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006062:	4b92      	ldr	r3, [pc, #584]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006066:	f023 0103 	bic.w	r1, r3, #3
 800606a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006070:	4a8e      	ldr	r2, [pc, #568]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006072:	430b      	orrs	r3, r1
 8006074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006076:	e003      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006078:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800607c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800608c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006090:	2300      	movs	r3, #0
 8006092:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006096:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800609a:	460b      	mov	r3, r1
 800609c:	4313      	orrs	r3, r2
 800609e:	f000 8099 	beq.w	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060a2:	4b83      	ldr	r3, [pc, #524]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a82      	ldr	r2, [pc, #520]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80060a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060ae:	f7fc fbf5 	bl	800289c <HAL_GetTick>
 80060b2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060b6:	e00b      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b8:	f7fc fbf0 	bl	800289c <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b64      	cmp	r3, #100	; 0x64
 80060c6:	d903      	bls.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80060ce:	e005      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060d0:	4b77      	ldr	r3, [pc, #476]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0ed      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80060dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d173      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060e4:	4b71      	ldr	r3, [pc, #452]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060f0:	4053      	eors	r3, r2
 80060f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d015      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060fa:	4b6c      	ldr	r3, [pc, #432]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006102:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006106:	4b69      	ldr	r3, [pc, #420]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610a:	4a68      	ldr	r2, [pc, #416]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800610c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006110:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006112:	4b66      	ldr	r3, [pc, #408]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006116:	4a65      	ldr	r2, [pc, #404]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800611e:	4a63      	ldr	r2, [pc, #396]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006124:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800612a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800612e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006132:	d118      	bne.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006134:	f7fc fbb2 	bl	800289c <HAL_GetTick>
 8006138:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800613c:	e00d      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613e:	f7fc fbad 	bl	800289c <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006148:	1ad2      	subs	r2, r2, r3
 800614a:	f241 3388 	movw	r3, #5000	; 0x1388
 800614e:	429a      	cmp	r2, r3
 8006150:	d903      	bls.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8006158:	e005      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800615a:	4b54      	ldr	r3, [pc, #336]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0eb      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006166:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800616a:	2b00      	cmp	r3, #0
 800616c:	d129      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800616e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006172:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800617a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800617e:	d10e      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006180:	4b4a      	ldr	r3, [pc, #296]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800618c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006190:	091a      	lsrs	r2, r3, #4
 8006192:	4b48      	ldr	r3, [pc, #288]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006194:	4013      	ands	r3, r2
 8006196:	4a45      	ldr	r2, [pc, #276]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006198:	430b      	orrs	r3, r1
 800619a:	6113      	str	r3, [r2, #16]
 800619c:	e005      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x852>
 800619e:	4b43      	ldr	r3, [pc, #268]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	4a42      	ldr	r2, [pc, #264]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80061a8:	6113      	str	r3, [r2, #16]
 80061aa:	4b40      	ldr	r3, [pc, #256]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80061ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80061b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ba:	4a3c      	ldr	r2, [pc, #240]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061bc:	430b      	orrs	r3, r1
 80061be:	6713      	str	r3, [r2, #112]	; 0x70
 80061c0:	e008      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80061ca:	e003      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f002 0301 	and.w	r3, r2, #1
 80061e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061e4:	2300      	movs	r3, #0
 80061e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f000 8090 	beq.w	8006316 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80061f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061fe:	2b28      	cmp	r3, #40	; 0x28
 8006200:	d870      	bhi.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006202:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	080062ed 	.word	0x080062ed
 800620c:	080062e5 	.word	0x080062e5
 8006210:	080062e5 	.word	0x080062e5
 8006214:	080062e5 	.word	0x080062e5
 8006218:	080062e5 	.word	0x080062e5
 800621c:	080062e5 	.word	0x080062e5
 8006220:	080062e5 	.word	0x080062e5
 8006224:	080062e5 	.word	0x080062e5
 8006228:	080062b9 	.word	0x080062b9
 800622c:	080062e5 	.word	0x080062e5
 8006230:	080062e5 	.word	0x080062e5
 8006234:	080062e5 	.word	0x080062e5
 8006238:	080062e5 	.word	0x080062e5
 800623c:	080062e5 	.word	0x080062e5
 8006240:	080062e5 	.word	0x080062e5
 8006244:	080062e5 	.word	0x080062e5
 8006248:	080062cf 	.word	0x080062cf
 800624c:	080062e5 	.word	0x080062e5
 8006250:	080062e5 	.word	0x080062e5
 8006254:	080062e5 	.word	0x080062e5
 8006258:	080062e5 	.word	0x080062e5
 800625c:	080062e5 	.word	0x080062e5
 8006260:	080062e5 	.word	0x080062e5
 8006264:	080062e5 	.word	0x080062e5
 8006268:	080062ed 	.word	0x080062ed
 800626c:	080062e5 	.word	0x080062e5
 8006270:	080062e5 	.word	0x080062e5
 8006274:	080062e5 	.word	0x080062e5
 8006278:	080062e5 	.word	0x080062e5
 800627c:	080062e5 	.word	0x080062e5
 8006280:	080062e5 	.word	0x080062e5
 8006284:	080062e5 	.word	0x080062e5
 8006288:	080062ed 	.word	0x080062ed
 800628c:	080062e5 	.word	0x080062e5
 8006290:	080062e5 	.word	0x080062e5
 8006294:	080062e5 	.word	0x080062e5
 8006298:	080062e5 	.word	0x080062e5
 800629c:	080062e5 	.word	0x080062e5
 80062a0:	080062e5 	.word	0x080062e5
 80062a4:	080062e5 	.word	0x080062e5
 80062a8:	080062ed 	.word	0x080062ed
 80062ac:	58024400 	.word	0x58024400
 80062b0:	58024800 	.word	0x58024800
 80062b4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062bc:	3308      	adds	r3, #8
 80062be:	2101      	movs	r1, #1
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 ffc5 	bl	8007250 <RCCEx_PLL2_Config>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80062cc:	e00f      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d2:	3328      	adds	r3, #40	; 0x28
 80062d4:	2101      	movs	r1, #1
 80062d6:	4618      	mov	r0, r3
 80062d8:	f001 f86c 	bl	80073b4 <RCCEx_PLL3_Config>
 80062dc:	4603      	mov	r3, r0
 80062de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80062e2:	e004      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80062ea:	e000      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80062ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10b      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062f6:	4bc0      	ldr	r3, [pc, #768]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80062f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80062fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006306:	4abc      	ldr	r2, [pc, #752]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006308:	430b      	orrs	r3, r1
 800630a:	6553      	str	r3, [r2, #84]	; 0x54
 800630c:	e003      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006312:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	f002 0302 	and.w	r3, r2, #2
 8006322:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006326:	2300      	movs	r3, #0
 8006328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800632c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006330:	460b      	mov	r3, r1
 8006332:	4313      	orrs	r3, r2
 8006334:	d043      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800633a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800633e:	2b05      	cmp	r3, #5
 8006340:	d824      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006342:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	08006395 	.word	0x08006395
 800634c:	08006361 	.word	0x08006361
 8006350:	08006377 	.word	0x08006377
 8006354:	08006395 	.word	0x08006395
 8006358:	08006395 	.word	0x08006395
 800635c:	08006395 	.word	0x08006395
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006364:	3308      	adds	r3, #8
 8006366:	2101      	movs	r1, #1
 8006368:	4618      	mov	r0, r3
 800636a:	f000 ff71 	bl	8007250 <RCCEx_PLL2_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006374:	e00f      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800637a:	3328      	adds	r3, #40	; 0x28
 800637c:	2101      	movs	r1, #1
 800637e:	4618      	mov	r0, r3
 8006380:	f001 f818 	bl	80073b4 <RCCEx_PLL3_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800638a:	e004      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006392:	e000      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006396:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10b      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800639e:	4b96      	ldr	r3, [pc, #600]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80063a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a2:	f023 0107 	bic.w	r1, r3, #7
 80063a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ae:	4a92      	ldr	r2, [pc, #584]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80063b0:	430b      	orrs	r3, r1
 80063b2:	6553      	str	r3, [r2, #84]	; 0x54
 80063b4:	e003      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f002 0304 	and.w	r3, r2, #4
 80063ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063ce:	2300      	movs	r3, #0
 80063d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063d4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80063d8:	460b      	mov	r3, r1
 80063da:	4313      	orrs	r3, r2
 80063dc:	d043      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80063de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063e6:	2b05      	cmp	r3, #5
 80063e8:	d824      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	0800643d 	.word	0x0800643d
 80063f4:	08006409 	.word	0x08006409
 80063f8:	0800641f 	.word	0x0800641f
 80063fc:	0800643d 	.word	0x0800643d
 8006400:	0800643d 	.word	0x0800643d
 8006404:	0800643d 	.word	0x0800643d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800640c:	3308      	adds	r3, #8
 800640e:	2101      	movs	r1, #1
 8006410:	4618      	mov	r0, r3
 8006412:	f000 ff1d 	bl	8007250 <RCCEx_PLL2_Config>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800641c:	e00f      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800641e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006422:	3328      	adds	r3, #40	; 0x28
 8006424:	2101      	movs	r1, #1
 8006426:	4618      	mov	r0, r3
 8006428:	f000 ffc4 	bl	80073b4 <RCCEx_PLL3_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006432:	e004      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800643a:	e000      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800643c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10b      	bne.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006446:	4b6c      	ldr	r3, [pc, #432]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644a:	f023 0107 	bic.w	r1, r3, #7
 800644e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006456:	4a68      	ldr	r2, [pc, #416]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006458:	430b      	orrs	r3, r1
 800645a:	6593      	str	r3, [r2, #88]	; 0x58
 800645c:	e003      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006462:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f002 0320 	and.w	r3, r2, #32
 8006472:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006476:	2300      	movs	r3, #0
 8006478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800647c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006480:	460b      	mov	r3, r1
 8006482:	4313      	orrs	r3, r2
 8006484:	d055      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800648a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800648e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006492:	d033      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006498:	d82c      	bhi.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800649a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649e:	d02f      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80064a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a4:	d826      	bhi.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80064a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064aa:	d02b      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80064ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064b0:	d820      	bhi.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80064b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064b6:	d012      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80064b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064bc:	d81a      	bhi.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d022      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80064c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064c6:	d115      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064cc:	3308      	adds	r3, #8
 80064ce:	2100      	movs	r1, #0
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 febd 	bl	8007250 <RCCEx_PLL2_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064dc:	e015      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e2:	3328      	adds	r3, #40	; 0x28
 80064e4:	2102      	movs	r1, #2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 ff64 	bl	80073b4 <RCCEx_PLL3_Config>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064f2:	e00a      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80064fa:	e006      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80064fc:	bf00      	nop
 80064fe:	e004      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006500:	bf00      	nop
 8006502:	e002      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006504:	bf00      	nop
 8006506:	e000      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10b      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006512:	4b39      	ldr	r3, [pc, #228]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006516:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800651a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006522:	4a35      	ldr	r2, [pc, #212]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006524:	430b      	orrs	r3, r1
 8006526:	6553      	str	r3, [r2, #84]	; 0x54
 8006528:	e003      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800652e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800653e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006542:	2300      	movs	r3, #0
 8006544:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006548:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800654c:	460b      	mov	r3, r1
 800654e:	4313      	orrs	r3, r2
 8006550:	d058      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800655a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800655e:	d033      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006560:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006564:	d82c      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656a:	d02f      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800656c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006570:	d826      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006576:	d02b      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006578:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800657c:	d820      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800657e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006582:	d012      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006588:	d81a      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d022      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800658e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006592:	d115      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006598:	3308      	adds	r3, #8
 800659a:	2100      	movs	r1, #0
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fe57 	bl	8007250 <RCCEx_PLL2_Config>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80065a8:	e015      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ae:	3328      	adds	r3, #40	; 0x28
 80065b0:	2102      	movs	r1, #2
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fefe 	bl	80073b4 <RCCEx_PLL3_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80065be:	e00a      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80065c6:	e006      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80065c8:	bf00      	nop
 80065ca:	e004      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80065cc:	bf00      	nop
 80065ce:	e002      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80065d0:	bf00      	nop
 80065d2:	e000      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80065d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10e      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065de:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80065e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065ee:	4a02      	ldr	r2, [pc, #8]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6593      	str	r3, [r2, #88]	; 0x58
 80065f4:	e006      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80065f6:	bf00      	nop
 80065f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006600:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006614:	2300      	movs	r3, #0
 8006616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800661a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800661e:	460b      	mov	r3, r1
 8006620:	4313      	orrs	r3, r2
 8006622:	d055      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006628:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800662c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006630:	d033      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006632:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006636:	d82c      	bhi.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663c:	d02f      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800663e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006642:	d826      	bhi.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006644:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006648:	d02b      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800664a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800664e:	d820      	bhi.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006654:	d012      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800665a:	d81a      	bhi.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d022      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006664:	d115      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800666a:	3308      	adds	r3, #8
 800666c:	2100      	movs	r1, #0
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fdee 	bl	8007250 <RCCEx_PLL2_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800667a:	e015      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800667c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006680:	3328      	adds	r3, #40	; 0x28
 8006682:	2102      	movs	r1, #2
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fe95 	bl	80073b4 <RCCEx_PLL3_Config>
 800668a:	4603      	mov	r3, r0
 800668c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006690:	e00a      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006698:	e006      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800669a:	bf00      	nop
 800669c:	e004      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800669e:	bf00      	nop
 80066a0:	e002      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80066a2:	bf00      	nop
 80066a4:	e000      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80066a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80066b0:	4ba1      	ldr	r3, [pc, #644]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80066b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80066b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066c0:	4a9d      	ldr	r2, [pc, #628]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80066c2:	430b      	orrs	r3, r1
 80066c4:	6593      	str	r3, [r2, #88]	; 0x58
 80066c6:	e003      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f002 0308 	and.w	r3, r2, #8
 80066dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066e0:	2300      	movs	r3, #0
 80066e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80066ea:	460b      	mov	r3, r1
 80066ec:	4313      	orrs	r3, r2
 80066ee:	d01e      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80066f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fc:	d10c      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006702:	3328      	adds	r3, #40	; 0x28
 8006704:	2102      	movs	r1, #2
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fe54 	bl	80073b4 <RCCEx_PLL3_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006718:	4b87      	ldr	r3, [pc, #540]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800671a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006728:	4a83      	ldr	r2, [pc, #524]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800672a:	430b      	orrs	r3, r1
 800672c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800672e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006736:	f002 0310 	and.w	r3, r2, #16
 800673a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800673e:	2300      	movs	r3, #0
 8006740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006744:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006748:	460b      	mov	r3, r1
 800674a:	4313      	orrs	r3, r2
 800674c:	d01e      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800674e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006752:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800675a:	d10c      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800675c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006760:	3328      	adds	r3, #40	; 0x28
 8006762:	2102      	movs	r1, #2
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fe25 	bl	80073b4 <RCCEx_PLL3_Config>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006776:	4b70      	ldr	r3, [pc, #448]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800677e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006782:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006786:	4a6c      	ldr	r2, [pc, #432]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006788:	430b      	orrs	r3, r1
 800678a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800678c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800679c:	2300      	movs	r3, #0
 800679e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80067a6:	460b      	mov	r3, r1
 80067a8:	4313      	orrs	r3, r2
 80067aa:	d03e      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80067ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b8:	d022      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80067ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067be:	d81b      	bhi.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80067c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c8:	d00b      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80067ca:	e015      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d0:	3308      	adds	r3, #8
 80067d2:	2100      	movs	r1, #0
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fd3b 	bl	8007250 <RCCEx_PLL2_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067e0:	e00f      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067e6:	3328      	adds	r3, #40	; 0x28
 80067e8:	2102      	movs	r1, #2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fde2 	bl	80073b4 <RCCEx_PLL3_Config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067f6:	e004      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80067fe:	e000      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006802:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800680a:	4b4b      	ldr	r3, [pc, #300]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800680c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006816:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800681a:	4a47      	ldr	r2, [pc, #284]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800681c:	430b      	orrs	r3, r1
 800681e:	6593      	str	r3, [r2, #88]	; 0x58
 8006820:	e003      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006822:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006826:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800682a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006836:	67bb      	str	r3, [r7, #120]	; 0x78
 8006838:	2300      	movs	r3, #0
 800683a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800683c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006840:	460b      	mov	r3, r1
 8006842:	4313      	orrs	r3, r2
 8006844:	d03b      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800684a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006852:	d01f      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006854:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006858:	d818      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800685a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800685e:	d003      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006864:	d007      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006866:	e011      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006868:	4b33      	ldr	r3, [pc, #204]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4a32      	ldr	r2, [pc, #200]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800686e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006874:	e00f      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800687a:	3328      	adds	r3, #40	; 0x28
 800687c:	2101      	movs	r1, #1
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fd98 	bl	80073b4 <RCCEx_PLL3_Config>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800688a:	e004      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006892:	e000      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006896:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800689e:	4b26      	ldr	r3, [pc, #152]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80068a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ae:	4a22      	ldr	r2, [pc, #136]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068b0:	430b      	orrs	r3, r1
 80068b2:	6553      	str	r3, [r2, #84]	; 0x54
 80068b4:	e003      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80068be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80068ca:	673b      	str	r3, [r7, #112]	; 0x70
 80068cc:	2300      	movs	r3, #0
 80068ce:	677b      	str	r3, [r7, #116]	; 0x74
 80068d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80068d4:	460b      	mov	r3, r1
 80068d6:	4313      	orrs	r3, r2
 80068d8:	d034      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80068da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80068e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e8:	d007      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80068ea:	e011      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ec:	4b12      	ldr	r3, [pc, #72]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	4a11      	ldr	r2, [pc, #68]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068f8:	e00e      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068fe:	3308      	adds	r3, #8
 8006900:	2102      	movs	r1, #2
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fca4 	bl	8007250 <RCCEx_PLL2_Config>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800690e:	e003      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006918:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10d      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006920:	4b05      	ldr	r3, [pc, #20]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006924:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800692c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692e:	4a02      	ldr	r2, [pc, #8]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006930:	430b      	orrs	r3, r1
 8006932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006934:	e006      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006936:	bf00      	nop
 8006938:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006940:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006950:	66bb      	str	r3, [r7, #104]	; 0x68
 8006952:	2300      	movs	r3, #0
 8006954:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006956:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800695a:	460b      	mov	r3, r1
 800695c:	4313      	orrs	r3, r2
 800695e:	d00c      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006964:	3328      	adds	r3, #40	; 0x28
 8006966:	2102      	movs	r1, #2
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fd23 	bl	80073b4 <RCCEx_PLL3_Config>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800697a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006986:	663b      	str	r3, [r7, #96]	; 0x60
 8006988:	2300      	movs	r3, #0
 800698a:	667b      	str	r3, [r7, #100]	; 0x64
 800698c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006990:	460b      	mov	r3, r1
 8006992:	4313      	orrs	r3, r2
 8006994:	d038      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800699a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069a2:	d018      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80069a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069a8:	d811      	bhi.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80069aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ae:	d014      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80069b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069b4:	d80b      	bhi.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d011      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80069ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069be:	d106      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c0:	4bc3      	ldr	r3, [pc, #780]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	4ac2      	ldr	r2, [pc, #776]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80069c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80069cc:	e008      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80069d4:	e004      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80069d6:	bf00      	nop
 80069d8:	e002      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80069da:	bf00      	nop
 80069dc:	e000      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80069de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10b      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069e8:	4bb9      	ldr	r3, [pc, #740]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80069ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f8:	4ab5      	ldr	r2, [pc, #724]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80069fa:	430b      	orrs	r3, r1
 80069fc:	6553      	str	r3, [r2, #84]	; 0x54
 80069fe:	e003      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006a14:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a16:	2300      	movs	r3, #0
 8006a18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a1a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4313      	orrs	r3, r2
 8006a22:	d009      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a24:	4baa      	ldr	r3, [pc, #680]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a32:	4aa7      	ldr	r2, [pc, #668]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006a44:	653b      	str	r3, [r7, #80]	; 0x50
 8006a46:	2300      	movs	r3, #0
 8006a48:	657b      	str	r3, [r7, #84]	; 0x54
 8006a4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4313      	orrs	r3, r2
 8006a52:	d009      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a54:	4b9e      	ldr	r3, [pc, #632]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a58:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a62:	4a9b      	ldr	r2, [pc, #620]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a76:	2300      	movs	r3, #0
 8006a78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a7a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4313      	orrs	r3, r2
 8006a82:	d009      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006a84:	4b92      	ldr	r3, [pc, #584]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a88:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a92:	4a8f      	ldr	r2, [pc, #572]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006a94:	430b      	orrs	r3, r1
 8006a96:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8006aaa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	d00e      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ab4:	4b86      	ldr	r3, [pc, #536]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	4a85      	ldr	r2, [pc, #532]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006aba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006abe:	6113      	str	r3, [r2, #16]
 8006ac0:	4b83      	ldr	r3, [pc, #524]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ac2:	6919      	ldr	r1, [r3, #16]
 8006ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ac8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006acc:	4a80      	ldr	r2, [pc, #512]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ace:	430b      	orrs	r3, r1
 8006ad0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ae4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4313      	orrs	r3, r2
 8006aec:	d009      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006aee:	4b78      	ldr	r3, [pc, #480]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afc:	4a74      	ldr	r2, [pc, #464]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006afe:	430b      	orrs	r3, r1
 8006b00:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b10:	2300      	movs	r3, #0
 8006b12:	637b      	str	r3, [r7, #52]	; 0x34
 8006b14:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	d00a      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b1e:	4b6c      	ldr	r3, [pc, #432]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b2e:	4a68      	ldr	r2, [pc, #416]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b30:	430b      	orrs	r3, r1
 8006b32:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b46:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d011      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b54:	3308      	adds	r3, #8
 8006b56:	2100      	movs	r1, #0
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fb79 	bl	8007250 <RCCEx_PLL2_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006b64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	6239      	str	r1, [r7, #32]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
 8006b86:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	d011      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b94:	3308      	adds	r3, #8
 8006b96:	2101      	movs	r1, #1
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fb59 	bl	8007250 <RCCEx_PLL2_Config>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006ba4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	61b9      	str	r1, [r7, #24]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	d011      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bd4:	3308      	adds	r3, #8
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fb39 	bl	8007250 <RCCEx_PLL2_Config>
 8006bde:	4603      	mov	r3, r0
 8006be0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006be4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bf0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	6139      	str	r1, [r7, #16]
 8006c00:	f003 0308 	and.w	r3, r3, #8
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	d011      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c14:	3328      	adds	r3, #40	; 0x28
 8006c16:	2100      	movs	r1, #0
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fbcb 	bl	80073b4 <RCCEx_PLL3_Config>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8006c24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	d011      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c54:	3328      	adds	r3, #40	; 0x28
 8006c56:	2101      	movs	r1, #1
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fbab 	bl	80073b4 <RCCEx_PLL3_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006c64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	6039      	str	r1, [r7, #0]
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	d011      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c94:	3328      	adds	r3, #40	; 0x28
 8006c96:	2102      	movs	r1, #2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fb8b 	bl	80073b4 <RCCEx_PLL3_Config>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006ca4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006cb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006cb4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	e000      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cce:	bf00      	nop
 8006cd0:	58024400 	.word	0x58024400

08006cd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006cd8:	f7fe fde2 	bl	80058a0 <HAL_RCC_GetHCLKFreq>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	091b      	lsrs	r3, r3, #4
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	4904      	ldr	r1, [pc, #16]	; (8006cfc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006cea:	5ccb      	ldrb	r3, [r1, r3]
 8006cec:	f003 031f 	and.w	r3, r3, #31
 8006cf0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	58024400 	.word	0x58024400
 8006cfc:	0800b6bc 	.word	0x0800b6bc

08006d00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b089      	sub	sp, #36	; 0x24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d08:	4ba1      	ldr	r3, [pc, #644]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0c:	f003 0303 	and.w	r3, r3, #3
 8006d10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006d12:	4b9f      	ldr	r3, [pc, #636]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	0b1b      	lsrs	r3, r3, #12
 8006d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006d1e:	4b9c      	ldr	r3, [pc, #624]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d22:	091b      	lsrs	r3, r3, #4
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006d2a:	4b99      	ldr	r3, [pc, #612]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2e:	08db      	lsrs	r3, r3, #3
 8006d30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	fb02 f303 	mul.w	r3, r2, r3
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 8111 	beq.w	8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	f000 8083 	beq.w	8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	f200 80a1 	bhi.w	8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d056      	beq.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d6a:	e099      	b.n	8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d6c:	4b88      	ldr	r3, [pc, #544]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0320 	and.w	r3, r3, #32
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d02d      	beq.n	8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d78:	4b85      	ldr	r3, [pc, #532]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	08db      	lsrs	r3, r3, #3
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	4a84      	ldr	r2, [pc, #528]	; (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d84:	fa22 f303 	lsr.w	r3, r2, r3
 8006d88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	ee07 3a90 	vmov	s15, r3
 8006d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da2:	4b7b      	ldr	r3, [pc, #492]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006db6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006dd2:	e087      	b.n	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de6:	4b6a      	ldr	r3, [pc, #424]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e16:	e065      	b.n	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2a:	4b59      	ldr	r3, [pc, #356]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e5a:	e043      	b.n	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e6e:	4b48      	ldr	r3, [pc, #288]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e9e:	e021      	b.n	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb2:	4b37      	ldr	r3, [pc, #220]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ec6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ee2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006ee4:	4b2a      	ldr	r3, [pc, #168]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	0a5b      	lsrs	r3, r3, #9
 8006eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006efa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f0a:	ee17 2a90 	vmov	r2, s15
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006f12:	4b1f      	ldr	r3, [pc, #124]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	0c1b      	lsrs	r3, r3, #16
 8006f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f38:	ee17 2a90 	vmov	r2, s15
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006f40:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	0e1b      	lsrs	r3, r3, #24
 8006f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f66:	ee17 2a90 	vmov	r2, s15
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f6e:	e008      	b.n	8006f82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	609a      	str	r2, [r3, #8]
}
 8006f82:	bf00      	nop
 8006f84:	3724      	adds	r7, #36	; 0x24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	58024400 	.word	0x58024400
 8006f94:	03d09000 	.word	0x03d09000
 8006f98:	46000000 	.word	0x46000000
 8006f9c:	4c742400 	.word	0x4c742400
 8006fa0:	4a742400 	.word	0x4a742400
 8006fa4:	4af42400 	.word	0x4af42400

08006fa8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b089      	sub	sp, #36	; 0x24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fb0:	4ba1      	ldr	r3, [pc, #644]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006fba:	4b9f      	ldr	r3, [pc, #636]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbe:	0d1b      	lsrs	r3, r3, #20
 8006fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006fc6:	4b9c      	ldr	r3, [pc, #624]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006fd2:	4b99      	ldr	r3, [pc, #612]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd6:	08db      	lsrs	r3, r3, #3
 8006fd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	fb02 f303 	mul.w	r3, r2, r3
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8111 	beq.w	8007218 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	f000 8083 	beq.w	8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b02      	cmp	r3, #2
 8007002:	f200 80a1 	bhi.w	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d056      	beq.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007012:	e099      	b.n	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007014:	4b88      	ldr	r3, [pc, #544]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d02d      	beq.n	800707c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007020:	4b85      	ldr	r3, [pc, #532]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	4a84      	ldr	r2, [pc, #528]	; (800723c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
 8007030:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	ee07 3a90 	vmov	s15, r3
 8007038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704a:	4b7b      	ldr	r3, [pc, #492]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705a:	ed97 6a03 	vldr	s12, [r7, #12]
 800705e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007240 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800706e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007076:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800707a:	e087      	b.n	800718c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007244 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800708a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708e:	4b6a      	ldr	r3, [pc, #424]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709e:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007240 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070be:	e065      	b.n	800718c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80070ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d2:	4b59      	ldr	r3, [pc, #356]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007240 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007102:	e043      	b.n	800718c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007116:	4b48      	ldr	r3, [pc, #288]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007126:	ed97 6a03 	vldr	s12, [r7, #12]
 800712a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007240 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800712e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007146:	e021      	b.n	800718c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715a:	4b37      	ldr	r3, [pc, #220]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716a:	ed97 6a03 	vldr	s12, [r7, #12]
 800716e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007240 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800718a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800718c:	4b2a      	ldr	r3, [pc, #168]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	0a5b      	lsrs	r3, r3, #9
 8007192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071b2:	ee17 2a90 	vmov	r2, s15
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80071ba:	4b1f      	ldr	r3, [pc, #124]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	0c1b      	lsrs	r3, r3, #16
 80071c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c4:	ee07 3a90 	vmov	s15, r3
 80071c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e0:	ee17 2a90 	vmov	r2, s15
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80071e8:	4b13      	ldr	r3, [pc, #76]	; (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	0e1b      	lsrs	r3, r3, #24
 80071ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007202:	edd7 6a07 	vldr	s13, [r7, #28]
 8007206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800720a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800720e:	ee17 2a90 	vmov	r2, s15
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007216:	e008      	b.n	800722a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	609a      	str	r2, [r3, #8]
}
 800722a:	bf00      	nop
 800722c:	3724      	adds	r7, #36	; 0x24
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	58024400 	.word	0x58024400
 800723c:	03d09000 	.word	0x03d09000
 8007240:	46000000 	.word	0x46000000
 8007244:	4c742400 	.word	0x4c742400
 8007248:	4a742400 	.word	0x4a742400
 800724c:	4af42400 	.word	0x4af42400

08007250 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800725e:	4b53      	ldr	r3, [pc, #332]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	2b03      	cmp	r3, #3
 8007268:	d101      	bne.n	800726e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e099      	b.n	80073a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800726e:	4b4f      	ldr	r3, [pc, #316]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a4e      	ldr	r2, [pc, #312]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007274:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800727a:	f7fb fb0f 	bl	800289c <HAL_GetTick>
 800727e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007280:	e008      	b.n	8007294 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007282:	f7fb fb0b 	bl	800289c <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b02      	cmp	r3, #2
 800728e:	d901      	bls.n	8007294 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e086      	b.n	80073a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007294:	4b45      	ldr	r3, [pc, #276]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1f0      	bne.n	8007282 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072a0:	4b42      	ldr	r3, [pc, #264]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	031b      	lsls	r3, r3, #12
 80072ae:	493f      	ldr	r1, [pc, #252]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	628b      	str	r3, [r1, #40]	; 0x28
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	025b      	lsls	r3, r3, #9
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	431a      	orrs	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072d6:	431a      	orrs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	3b01      	subs	r3, #1
 80072de:	061b      	lsls	r3, r3, #24
 80072e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80072e4:	4931      	ldr	r1, [pc, #196]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80072ea:	4b30      	ldr	r3, [pc, #192]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	492d      	ldr	r1, [pc, #180]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80072fc:	4b2b      	ldr	r3, [pc, #172]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	f023 0220 	bic.w	r2, r3, #32
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	4928      	ldr	r1, [pc, #160]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 800730a:	4313      	orrs	r3, r2
 800730c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800730e:	4b27      	ldr	r3, [pc, #156]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007312:	4a26      	ldr	r2, [pc, #152]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007314:	f023 0310 	bic.w	r3, r3, #16
 8007318:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800731a:	4b24      	ldr	r3, [pc, #144]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 800731c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800731e:	4b24      	ldr	r3, [pc, #144]	; (80073b0 <RCCEx_PLL2_Config+0x160>)
 8007320:	4013      	ands	r3, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	69d2      	ldr	r2, [r2, #28]
 8007326:	00d2      	lsls	r2, r2, #3
 8007328:	4920      	ldr	r1, [pc, #128]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 800732a:	4313      	orrs	r3, r2
 800732c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800732e:	4b1f      	ldr	r3, [pc, #124]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	4a1e      	ldr	r2, [pc, #120]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007334:	f043 0310 	orr.w	r3, r3, #16
 8007338:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007340:	4b1a      	ldr	r3, [pc, #104]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	4a19      	ldr	r2, [pc, #100]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800734a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800734c:	e00f      	b.n	800736e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d106      	bne.n	8007362 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007354:	4b15      	ldr	r3, [pc, #84]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	4a14      	ldr	r2, [pc, #80]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 800735a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800735e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007360:	e005      	b.n	800736e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007362:	4b12      	ldr	r3, [pc, #72]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	4a11      	ldr	r2, [pc, #68]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800736c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800736e:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a0e      	ldr	r2, [pc, #56]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007374:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800737a:	f7fb fa8f 	bl	800289c <HAL_GetTick>
 800737e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007380:	e008      	b.n	8007394 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007382:	f7fb fa8b 	bl	800289c <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e006      	b.n	80073a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <RCCEx_PLL2_Config+0x15c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0f0      	beq.n	8007382 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	58024400 	.word	0x58024400
 80073b0:	ffff0007 	.word	0xffff0007

080073b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073c2:	4b53      	ldr	r3, [pc, #332]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80073c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d101      	bne.n	80073d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e099      	b.n	8007506 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80073d2:	4b4f      	ldr	r3, [pc, #316]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a4e      	ldr	r2, [pc, #312]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80073d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073de:	f7fb fa5d 	bl	800289c <HAL_GetTick>
 80073e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073e4:	e008      	b.n	80073f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073e6:	f7fb fa59 	bl	800289c <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d901      	bls.n	80073f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e086      	b.n	8007506 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073f8:	4b45      	ldr	r3, [pc, #276]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1f0      	bne.n	80073e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007404:	4b42      	ldr	r3, [pc, #264]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 8007406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007408:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	051b      	lsls	r3, r3, #20
 8007412:	493f      	ldr	r1, [pc, #252]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 8007414:	4313      	orrs	r3, r2
 8007416:	628b      	str	r3, [r1, #40]	; 0x28
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	3b01      	subs	r3, #1
 800741e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	3b01      	subs	r3, #1
 8007428:	025b      	lsls	r3, r3, #9
 800742a:	b29b      	uxth	r3, r3
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	3b01      	subs	r3, #1
 8007434:	041b      	lsls	r3, r3, #16
 8007436:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	3b01      	subs	r3, #1
 8007442:	061b      	lsls	r3, r3, #24
 8007444:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007448:	4931      	ldr	r1, [pc, #196]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 800744a:	4313      	orrs	r3, r2
 800744c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800744e:	4b30      	ldr	r3, [pc, #192]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 8007450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007452:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	492d      	ldr	r1, [pc, #180]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 800745c:	4313      	orrs	r3, r2
 800745e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007460:	4b2b      	ldr	r3, [pc, #172]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	4928      	ldr	r1, [pc, #160]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 800746e:	4313      	orrs	r3, r2
 8007470:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007472:	4b27      	ldr	r3, [pc, #156]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	4a26      	ldr	r2, [pc, #152]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 8007478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800747c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800747e:	4b24      	ldr	r3, [pc, #144]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 8007480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007482:	4b24      	ldr	r3, [pc, #144]	; (8007514 <RCCEx_PLL3_Config+0x160>)
 8007484:	4013      	ands	r3, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	69d2      	ldr	r2, [r2, #28]
 800748a:	00d2      	lsls	r2, r2, #3
 800748c:	4920      	ldr	r1, [pc, #128]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 800748e:	4313      	orrs	r3, r2
 8007490:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007492:	4b1f      	ldr	r3, [pc, #124]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 8007498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800749c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d106      	bne.n	80074b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074a4:	4b1a      	ldr	r3, [pc, #104]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	4a19      	ldr	r2, [pc, #100]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80074aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074b0:	e00f      	b.n	80074d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d106      	bne.n	80074c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80074b8:	4b15      	ldr	r3, [pc, #84]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	4a14      	ldr	r2, [pc, #80]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80074be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80074c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074c4:	e005      	b.n	80074d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80074c6:	4b12      	ldr	r3, [pc, #72]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	4a11      	ldr	r2, [pc, #68]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80074cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80074d2:	4b0f      	ldr	r3, [pc, #60]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a0e      	ldr	r2, [pc, #56]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80074d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074de:	f7fb f9dd 	bl	800289c <HAL_GetTick>
 80074e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074e4:	e008      	b.n	80074f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074e6:	f7fb f9d9 	bl	800289c <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d901      	bls.n	80074f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e006      	b.n	8007506 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <RCCEx_PLL3_Config+0x15c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0f0      	beq.n	80074e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	58024400 	.word	0x58024400
 8007514:	ffff0007 	.word	0xffff0007

08007518 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e10f      	b.n	800774a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a87      	ldr	r2, [pc, #540]	; (8007754 <HAL_SPI_Init+0x23c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00f      	beq.n	800755a <HAL_SPI_Init+0x42>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a86      	ldr	r2, [pc, #536]	; (8007758 <HAL_SPI_Init+0x240>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d00a      	beq.n	800755a <HAL_SPI_Init+0x42>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a84      	ldr	r2, [pc, #528]	; (800775c <HAL_SPI_Init+0x244>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d005      	beq.n	800755a <HAL_SPI_Init+0x42>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	2b0f      	cmp	r3, #15
 8007554:	d901      	bls.n	800755a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e0f7      	b.n	800774a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fdf4 	bl	8008148 <SPI_GetPacketSize>
 8007560:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a7b      	ldr	r2, [pc, #492]	; (8007754 <HAL_SPI_Init+0x23c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d00c      	beq.n	8007586 <HAL_SPI_Init+0x6e>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a79      	ldr	r2, [pc, #484]	; (8007758 <HAL_SPI_Init+0x240>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d007      	beq.n	8007586 <HAL_SPI_Init+0x6e>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a78      	ldr	r2, [pc, #480]	; (800775c <HAL_SPI_Init+0x244>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d002      	beq.n	8007586 <HAL_SPI_Init+0x6e>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b08      	cmp	r3, #8
 8007584:	d811      	bhi.n	80075aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800758a:	4a72      	ldr	r2, [pc, #456]	; (8007754 <HAL_SPI_Init+0x23c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d009      	beq.n	80075a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a70      	ldr	r2, [pc, #448]	; (8007758 <HAL_SPI_Init+0x240>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d004      	beq.n	80075a4 <HAL_SPI_Init+0x8c>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a6f      	ldr	r2, [pc, #444]	; (800775c <HAL_SPI_Init+0x244>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d104      	bne.n	80075ae <HAL_SPI_Init+0x96>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b10      	cmp	r3, #16
 80075a8:	d901      	bls.n	80075ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e0cd      	b.n	800774a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d106      	bne.n	80075c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7fa fdbe 	bl	8002144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0201 	bic.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80075ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075f4:	d119      	bne.n	800762a <HAL_SPI_Init+0x112>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075fe:	d103      	bne.n	8007608 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007604:	2b00      	cmp	r3, #0
 8007606:	d008      	beq.n	800761a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10c      	bne.n	800762a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007618:	d107      	bne.n	800762a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007628:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00f      	beq.n	8007656 <HAL_SPI_Init+0x13e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	2b06      	cmp	r3, #6
 800763c:	d90b      	bls.n	8007656 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	e007      	b.n	8007666 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007664:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69da      	ldr	r2, [r3, #28]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766e:	431a      	orrs	r2, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007678:	ea42 0103 	orr.w	r1, r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	431a      	orrs	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	431a      	orrs	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c6:	ea42 0103 	orr.w	r1, r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d113      	bne.n	8007706 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007704:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0201 	bic.w	r2, r2, #1
 8007714:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	40013000 	.word	0x40013000
 8007758:	40003800 	.word	0x40003800
 800775c:	40003c00 	.word	0x40003c00

08007760 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08a      	sub	sp, #40	; 0x28
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	4613      	mov	r3, r2
 800776e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3320      	adds	r3, #32
 8007776:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_SPI_Transmit+0x2a>
 8007786:	2302      	movs	r3, #2
 8007788:	e1e1      	b.n	8007b4e <HAL_SPI_Transmit+0x3ee>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007792:	f7fb f883 	bl	800289c <HAL_GetTick>
 8007796:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d007      	beq.n	80077b4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80077a4:	2302      	movs	r3, #2
 80077a6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80077b0:	7efb      	ldrb	r3, [r7, #27]
 80077b2:	e1cc      	b.n	8007b4e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <HAL_SPI_Transmit+0x60>
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d107      	bne.n	80077d0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80077cc:	7efb      	ldrb	r3, [r7, #27]
 80077ce:	e1be      	b.n	8007b4e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2203      	movs	r2, #3
 80077d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	88fa      	ldrh	r2, [r7, #6]
 80077ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	88fa      	ldrh	r2, [r7, #6]
 80077f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007820:	d108      	bne.n	8007834 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	e009      	b.n	8007848 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007846:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	4b96      	ldr	r3, [pc, #600]	; (8007aa8 <HAL_SPI_Transmit+0x348>)
 8007850:	4013      	ands	r3, r2
 8007852:	88f9      	ldrh	r1, [r7, #6]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	6812      	ldr	r2, [r2, #0]
 8007858:	430b      	orrs	r3, r1
 800785a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f042 0201 	orr.w	r2, r2, #1
 800786a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007874:	d107      	bne.n	8007886 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007884:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	2b0f      	cmp	r3, #15
 800788c:	d947      	bls.n	800791e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800788e:	e03f      	b.n	8007910 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b02      	cmp	r3, #2
 800789c:	d114      	bne.n	80078c8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6812      	ldr	r2, [r2, #0]
 80078a8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ae:	1d1a      	adds	r2, r3, #4
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	b29a      	uxth	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80078c6:	e023      	b.n	8007910 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078c8:	f7fa ffe8 	bl	800289c <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d803      	bhi.n	80078e0 <HAL_SPI_Transmit+0x180>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078de:	d102      	bne.n	80078e6 <HAL_SPI_Transmit+0x186>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d114      	bne.n	8007910 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 fb60 	bl	8007fac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e11e      	b.n	8007b4e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007916:	b29b      	uxth	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1b9      	bne.n	8007890 <HAL_SPI_Transmit+0x130>
 800791c:	e0f1      	b.n	8007b02 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b07      	cmp	r3, #7
 8007924:	f240 80e6 	bls.w	8007af4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007928:	e05d      	b.n	80079e6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b02      	cmp	r3, #2
 8007936:	d132      	bne.n	800799e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	d918      	bls.n	8007976 <HAL_SPI_Transmit+0x216>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007948:	2b00      	cmp	r3, #0
 800794a:	d014      	beq.n	8007976 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795c:	1d1a      	adds	r2, r3, #4
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b02      	subs	r3, #2
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007974:	e037      	b.n	80079e6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800797a:	881a      	ldrh	r2, [r3, #0]
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007984:	1c9a      	adds	r2, r3, #2
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007990:	b29b      	uxth	r3, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	b29a      	uxth	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800799c:	e023      	b.n	80079e6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800799e:	f7fa ff7d 	bl	800289c <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d803      	bhi.n	80079b6 <HAL_SPI_Transmit+0x256>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b4:	d102      	bne.n	80079bc <HAL_SPI_Transmit+0x25c>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d114      	bne.n	80079e6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 faf5 	bl	8007fac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e0b3      	b.n	8007b4e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d19b      	bne.n	800792a <HAL_SPI_Transmit+0x1ca>
 80079f2:	e086      	b.n	8007b02 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d154      	bne.n	8007aac <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d918      	bls.n	8007a40 <HAL_SPI_Transmit+0x2e0>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a12:	2b40      	cmp	r3, #64	; 0x40
 8007a14:	d914      	bls.n	8007a40 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6812      	ldr	r2, [r2, #0]
 8007a20:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a26:	1d1a      	adds	r2, r3, #4
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	3b04      	subs	r3, #4
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007a3e:	e059      	b.n	8007af4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d917      	bls.n	8007a7c <HAL_SPI_Transmit+0x31c>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d013      	beq.n	8007a7c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a58:	881a      	ldrh	r2, [r3, #0]
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a62:	1c9a      	adds	r2, r3, #2
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	3b02      	subs	r3, #2
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007a7a:	e03b      	b.n	8007af4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3320      	adds	r3, #32
 8007a86:	7812      	ldrb	r2, [r2, #0]
 8007a88:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007aa6:	e025      	b.n	8007af4 <HAL_SPI_Transmit+0x394>
 8007aa8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aac:	f7fa fef6 	bl	800289c <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d803      	bhi.n	8007ac4 <HAL_SPI_Transmit+0x364>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac2:	d102      	bne.n	8007aca <HAL_SPI_Transmit+0x36a>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d114      	bne.n	8007af4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 fa6e 	bl	8007fac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ade:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e02c      	b.n	8007b4e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f47f af79 	bne.w	80079f4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2108      	movs	r1, #8
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 faed 	bl	80080ec <SPI_WaitOnFlagUntilTimeout>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d007      	beq.n	8007b28 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b1e:	f043 0220 	orr.w	r2, r3, #32
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 fa3f 	bl	8007fac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e000      	b.n	8007b4e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8007b4c:	7efb      	ldrb	r3, [r7, #27]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3720      	adds	r7, #32
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop

08007b58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08c      	sub	sp, #48	; 0x30
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3320      	adds	r3, #32
 8007b72:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3330      	adds	r3, #48	; 0x30
 8007b7a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <HAL_SPI_TransmitReceive+0x32>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e1fd      	b.n	8007f86 <HAL_SPI_TransmitReceive+0x42e>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b92:	f7fa fe83 	bl	800289c <HAL_GetTick>
 8007b96:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8007b98:	887b      	ldrh	r3, [r7, #2]
 8007b9a:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8007b9c:	887b      	ldrh	r3, [r7, #2]
 8007b9e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d009      	beq.n	8007bc0 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8007bac:	2302      	movs	r3, #2
 8007bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007bba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bbe:	e1e2      	b.n	8007f86 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <HAL_SPI_TransmitReceive+0x7a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <HAL_SPI_TransmitReceive+0x7a>
 8007bcc:	887b      	ldrh	r3, [r7, #2]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007be4:	e1cf      	b.n	8007f86 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2205      	movs	r2, #5
 8007bea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	887a      	ldrh	r2, [r7, #2]
 8007c00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	887a      	ldrh	r2, [r7, #2]
 8007c08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	887a      	ldrh	r2, [r7, #2]
 8007c16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	887a      	ldrh	r2, [r7, #2]
 8007c1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8007c3c:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	4b82      	ldr	r3, [pc, #520]	; (8007e50 <HAL_SPI_TransmitReceive+0x2f8>)
 8007c46:	4013      	ands	r3, r2
 8007c48:	8879      	ldrh	r1, [r7, #2]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	6812      	ldr	r2, [r2, #0]
 8007c4e:	430b      	orrs	r3, r1
 8007c50:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f042 0201 	orr.w	r2, r2, #1
 8007c60:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c6a:	d107      	bne.n	8007c7c <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	2b0f      	cmp	r3, #15
 8007c82:	d970      	bls.n	8007d66 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007c84:	e068      	b.n	8007d58 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d11a      	bne.n	8007cca <HAL_SPI_TransmitReceive+0x172>
 8007c94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d017      	beq.n	8007cca <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6812      	ldr	r2, [r2, #0]
 8007ca4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007caa:	1d1a      	adds	r2, r3, #4
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cc8:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	695a      	ldr	r2, [r3, #20]
 8007cd0:	f248 0308 	movw	r3, #32776	; 0x8008
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d01a      	beq.n	8007d10 <HAL_SPI_TransmitReceive+0x1b8>
 8007cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d017      	beq.n	8007d10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ce8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007cea:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cf0:	1d1a      	adds	r2, r3, #4
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d0e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d10:	f7fa fdc4 	bl	800289c <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d803      	bhi.n	8007d28 <HAL_SPI_TransmitReceive+0x1d0>
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d26:	d102      	bne.n	8007d2e <HAL_SPI_TransmitReceive+0x1d6>
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d114      	bne.n	8007d58 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 f93c 	bl	8007fac <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e116      	b.n	8007f86 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007d58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d193      	bne.n	8007c86 <HAL_SPI_TransmitReceive+0x12e>
 8007d5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d190      	bne.n	8007c86 <HAL_SPI_TransmitReceive+0x12e>
 8007d64:	e0e8      	b.n	8007f38 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	2b07      	cmp	r3, #7
 8007d6c:	f240 80de 	bls.w	8007f2c <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007d70:	e066      	b.n	8007e40 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d119      	bne.n	8007db4 <HAL_SPI_TransmitReceive+0x25c>
 8007d80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d016      	beq.n	8007db4 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8a:	881a      	ldrh	r2, [r3, #0]
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d94:	1c9a      	adds	r2, r3, #2
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007db2:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d11a      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x2a0>
 8007dc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d017      	beq.n	8007df8 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	8812      	ldrh	r2, [r2, #0]
 8007dd0:	b292      	uxth	r2, r2
 8007dd2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd8:	1c9a      	adds	r2, r3, #2
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	3b01      	subs	r3, #1
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007df6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007df8:	f7fa fd50 	bl	800289c <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d803      	bhi.n	8007e10 <HAL_SPI_TransmitReceive+0x2b8>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0e:	d102      	bne.n	8007e16 <HAL_SPI_TransmitReceive+0x2be>
 8007e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d114      	bne.n	8007e40 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 f8c8 	bl	8007fac <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e0a2      	b.n	8007f86 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007e40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d195      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x21a>
 8007e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d192      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x21a>
 8007e4c:	e074      	b.n	8007f38 <HAL_SPI_TransmitReceive+0x3e0>
 8007e4e:	bf00      	nop
 8007e50:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d11b      	bne.n	8007e9a <HAL_SPI_TransmitReceive+0x342>
 8007e62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d018      	beq.n	8007e9a <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3320      	adds	r3, #32
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e98:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d11d      	bne.n	8007ee4 <HAL_SPI_TransmitReceive+0x38c>
 8007ea8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01a      	beq.n	8007ee4 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eba:	7812      	ldrb	r2, [r2, #0]
 8007ebc:	b2d2      	uxtb	r2, r2
 8007ebe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ee2:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ee4:	f7fa fcda 	bl	800289c <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d803      	bhi.n	8007efc <HAL_SPI_TransmitReceive+0x3a4>
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efa:	d102      	bne.n	8007f02 <HAL_SPI_TransmitReceive+0x3aa>
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d114      	bne.n	8007f2c <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 f852 	bl	8007fac <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e02c      	b.n	8007f86 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007f2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d190      	bne.n	8007e54 <HAL_SPI_TransmitReceive+0x2fc>
 8007f32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d18d      	bne.n	8007e54 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2108      	movs	r1, #8
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 f8d2 	bl	80080ec <SPI_WaitOnFlagUntilTimeout>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d007      	beq.n	8007f5e <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f54:	f043 0220 	orr.w	r2, r3, #32
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 f824 	bl	8007fac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e001      	b.n	8007f86 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 8007f82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3728      	adds	r7, #40	; 0x28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop

08007f90 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f9e:	b2db      	uxtb	r3, r3
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	699a      	ldr	r2, [r3, #24]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0208 	orr.w	r2, r2, #8
 8007fca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699a      	ldr	r2, [r3, #24]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0210 	orr.w	r2, r2, #16
 8007fda:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0201 	bic.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6919      	ldr	r1, [r3, #16]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	4b3c      	ldr	r3, [pc, #240]	; (80080e8 <SPI_CloseTransfer+0x13c>)
 8007ff8:	400b      	ands	r3, r1
 8007ffa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800800a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b04      	cmp	r3, #4
 8008016:	d014      	beq.n	8008042 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00f      	beq.n	8008042 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008028:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	699a      	ldr	r2, [r3, #24]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f042 0220 	orr.w	r2, r2, #32
 8008040:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b03      	cmp	r3, #3
 800804c:	d014      	beq.n	8008078 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00f      	beq.n	8008078 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800805e:	f043 0204 	orr.w	r2, r3, #4
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	699a      	ldr	r2, [r3, #24]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008076:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00f      	beq.n	80080a2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008088:	f043 0201 	orr.w	r2, r3, #1
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	699a      	ldr	r2, [r3, #24]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00f      	beq.n	80080cc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080b2:	f043 0208 	orr.w	r2, r3, #8
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80080dc:	bf00      	nop
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	fffffc90 	.word	0xfffffc90

080080ec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	4613      	mov	r3, r2
 80080fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80080fc:	e010      	b.n	8008120 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080fe:	f7fa fbcd 	bl	800289c <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	429a      	cmp	r2, r3
 800810c:	d803      	bhi.n	8008116 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008114:	d102      	bne.n	800811c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e00f      	b.n	8008140 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	695a      	ldr	r2, [r3, #20]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	4013      	ands	r3, r2
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	429a      	cmp	r2, r3
 800812e:	bf0c      	ite	eq
 8008130:	2301      	moveq	r3, #1
 8008132:	2300      	movne	r3, #0
 8008134:	b2db      	uxtb	r3, r3
 8008136:	461a      	mov	r2, r3
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	429a      	cmp	r2, r3
 800813c:	d0df      	beq.n	80080fe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008154:	095b      	lsrs	r3, r3, #5
 8008156:	3301      	adds	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	3301      	adds	r3, #1
 8008160:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	3307      	adds	r3, #7
 8008166:	08db      	lsrs	r3, r3, #3
 8008168:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b082      	sub	sp, #8
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e049      	b.n	8008224 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d106      	bne.n	80081aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7fa f835 	bl	8002214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2202      	movs	r2, #2
 80081ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3304      	adds	r3, #4
 80081ba:	4619      	mov	r1, r3
 80081bc:	4610      	mov	r0, r2
 80081be:	f000 fc21 	bl	8008a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b01      	cmp	r3, #1
 800823e:	d001      	beq.n	8008244 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e04c      	b.n	80082de <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a26      	ldr	r2, [pc, #152]	; (80082ec <HAL_TIM_Base_Start+0xc0>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d022      	beq.n	800829c <HAL_TIM_Base_Start+0x70>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825e:	d01d      	beq.n	800829c <HAL_TIM_Base_Start+0x70>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a22      	ldr	r2, [pc, #136]	; (80082f0 <HAL_TIM_Base_Start+0xc4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d018      	beq.n	800829c <HAL_TIM_Base_Start+0x70>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a21      	ldr	r2, [pc, #132]	; (80082f4 <HAL_TIM_Base_Start+0xc8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d013      	beq.n	800829c <HAL_TIM_Base_Start+0x70>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1f      	ldr	r2, [pc, #124]	; (80082f8 <HAL_TIM_Base_Start+0xcc>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00e      	beq.n	800829c <HAL_TIM_Base_Start+0x70>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a1e      	ldr	r2, [pc, #120]	; (80082fc <HAL_TIM_Base_Start+0xd0>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d009      	beq.n	800829c <HAL_TIM_Base_Start+0x70>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a1c      	ldr	r2, [pc, #112]	; (8008300 <HAL_TIM_Base_Start+0xd4>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d004      	beq.n	800829c <HAL_TIM_Base_Start+0x70>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a1b      	ldr	r2, [pc, #108]	; (8008304 <HAL_TIM_Base_Start+0xd8>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d115      	bne.n	80082c8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689a      	ldr	r2, [r3, #8]
 80082a2:	4b19      	ldr	r3, [pc, #100]	; (8008308 <HAL_TIM_Base_Start+0xdc>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b06      	cmp	r3, #6
 80082ac:	d015      	beq.n	80082da <HAL_TIM_Base_Start+0xae>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b4:	d011      	beq.n	80082da <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f042 0201 	orr.w	r2, r2, #1
 80082c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c6:	e008      	b.n	80082da <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0201 	orr.w	r2, r2, #1
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	e000      	b.n	80082dc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	40010000 	.word	0x40010000
 80082f0:	40000400 	.word	0x40000400
 80082f4:	40000800 	.word	0x40000800
 80082f8:	40000c00 	.word	0x40000c00
 80082fc:	40010400 	.word	0x40010400
 8008300:	40001800 	.word	0x40001800
 8008304:	40014000 	.word	0x40014000
 8008308:	00010007 	.word	0x00010007

0800830c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e049      	b.n	80083b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f841 	bl	80083ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3304      	adds	r3, #4
 8008348:	4619      	mov	r1, r3
 800834a:	4610      	mov	r0, r2
 800834c:	f000 fb5a 	bl	8008a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083c2:	bf00      	nop
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
	...

080083d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d109      	bne.n	80083f4 <HAL_TIM_PWM_Start+0x24>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	bf14      	ite	ne
 80083ec:	2301      	movne	r3, #1
 80083ee:	2300      	moveq	r3, #0
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	e03c      	b.n	800846e <HAL_TIM_PWM_Start+0x9e>
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2b04      	cmp	r3, #4
 80083f8:	d109      	bne.n	800840e <HAL_TIM_PWM_Start+0x3e>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b01      	cmp	r3, #1
 8008404:	bf14      	ite	ne
 8008406:	2301      	movne	r3, #1
 8008408:	2300      	moveq	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	e02f      	b.n	800846e <HAL_TIM_PWM_Start+0x9e>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b08      	cmp	r3, #8
 8008412:	d109      	bne.n	8008428 <HAL_TIM_PWM_Start+0x58>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b01      	cmp	r3, #1
 800841e:	bf14      	ite	ne
 8008420:	2301      	movne	r3, #1
 8008422:	2300      	moveq	r3, #0
 8008424:	b2db      	uxtb	r3, r3
 8008426:	e022      	b.n	800846e <HAL_TIM_PWM_Start+0x9e>
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2b0c      	cmp	r3, #12
 800842c:	d109      	bne.n	8008442 <HAL_TIM_PWM_Start+0x72>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b01      	cmp	r3, #1
 8008438:	bf14      	ite	ne
 800843a:	2301      	movne	r3, #1
 800843c:	2300      	moveq	r3, #0
 800843e:	b2db      	uxtb	r3, r3
 8008440:	e015      	b.n	800846e <HAL_TIM_PWM_Start+0x9e>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b10      	cmp	r3, #16
 8008446:	d109      	bne.n	800845c <HAL_TIM_PWM_Start+0x8c>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b01      	cmp	r3, #1
 8008452:	bf14      	ite	ne
 8008454:	2301      	movne	r3, #1
 8008456:	2300      	moveq	r3, #0
 8008458:	b2db      	uxtb	r3, r3
 800845a:	e008      	b.n	800846e <HAL_TIM_PWM_Start+0x9e>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b01      	cmp	r3, #1
 8008466:	bf14      	ite	ne
 8008468:	2301      	movne	r3, #1
 800846a:	2300      	moveq	r3, #0
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e0a1      	b.n	80085ba <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <HAL_TIM_PWM_Start+0xb6>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008484:	e023      	b.n	80084ce <HAL_TIM_PWM_Start+0xfe>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b04      	cmp	r3, #4
 800848a:	d104      	bne.n	8008496 <HAL_TIM_PWM_Start+0xc6>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008494:	e01b      	b.n	80084ce <HAL_TIM_PWM_Start+0xfe>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b08      	cmp	r3, #8
 800849a:	d104      	bne.n	80084a6 <HAL_TIM_PWM_Start+0xd6>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084a4:	e013      	b.n	80084ce <HAL_TIM_PWM_Start+0xfe>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b0c      	cmp	r3, #12
 80084aa:	d104      	bne.n	80084b6 <HAL_TIM_PWM_Start+0xe6>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084b4:	e00b      	b.n	80084ce <HAL_TIM_PWM_Start+0xfe>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b10      	cmp	r3, #16
 80084ba:	d104      	bne.n	80084c6 <HAL_TIM_PWM_Start+0xf6>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084c4:	e003      	b.n	80084ce <HAL_TIM_PWM_Start+0xfe>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2202      	movs	r2, #2
 80084ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2201      	movs	r2, #1
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fea2 	bl	8009220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a38      	ldr	r2, [pc, #224]	; (80085c4 <HAL_TIM_PWM_Start+0x1f4>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d013      	beq.n	800850e <HAL_TIM_PWM_Start+0x13e>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a37      	ldr	r2, [pc, #220]	; (80085c8 <HAL_TIM_PWM_Start+0x1f8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d00e      	beq.n	800850e <HAL_TIM_PWM_Start+0x13e>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a35      	ldr	r2, [pc, #212]	; (80085cc <HAL_TIM_PWM_Start+0x1fc>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d009      	beq.n	800850e <HAL_TIM_PWM_Start+0x13e>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a34      	ldr	r2, [pc, #208]	; (80085d0 <HAL_TIM_PWM_Start+0x200>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d004      	beq.n	800850e <HAL_TIM_PWM_Start+0x13e>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a32      	ldr	r2, [pc, #200]	; (80085d4 <HAL_TIM_PWM_Start+0x204>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d101      	bne.n	8008512 <HAL_TIM_PWM_Start+0x142>
 800850e:	2301      	movs	r3, #1
 8008510:	e000      	b.n	8008514 <HAL_TIM_PWM_Start+0x144>
 8008512:	2300      	movs	r3, #0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d007      	beq.n	8008528 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008526:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a25      	ldr	r2, [pc, #148]	; (80085c4 <HAL_TIM_PWM_Start+0x1f4>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d022      	beq.n	8008578 <HAL_TIM_PWM_Start+0x1a8>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800853a:	d01d      	beq.n	8008578 <HAL_TIM_PWM_Start+0x1a8>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a25      	ldr	r2, [pc, #148]	; (80085d8 <HAL_TIM_PWM_Start+0x208>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d018      	beq.n	8008578 <HAL_TIM_PWM_Start+0x1a8>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a24      	ldr	r2, [pc, #144]	; (80085dc <HAL_TIM_PWM_Start+0x20c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d013      	beq.n	8008578 <HAL_TIM_PWM_Start+0x1a8>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a22      	ldr	r2, [pc, #136]	; (80085e0 <HAL_TIM_PWM_Start+0x210>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d00e      	beq.n	8008578 <HAL_TIM_PWM_Start+0x1a8>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a1a      	ldr	r2, [pc, #104]	; (80085c8 <HAL_TIM_PWM_Start+0x1f8>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d009      	beq.n	8008578 <HAL_TIM_PWM_Start+0x1a8>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a1e      	ldr	r2, [pc, #120]	; (80085e4 <HAL_TIM_PWM_Start+0x214>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d004      	beq.n	8008578 <HAL_TIM_PWM_Start+0x1a8>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a16      	ldr	r2, [pc, #88]	; (80085cc <HAL_TIM_PWM_Start+0x1fc>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d115      	bne.n	80085a4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689a      	ldr	r2, [r3, #8]
 800857e:	4b1a      	ldr	r3, [pc, #104]	; (80085e8 <HAL_TIM_PWM_Start+0x218>)
 8008580:	4013      	ands	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b06      	cmp	r3, #6
 8008588:	d015      	beq.n	80085b6 <HAL_TIM_PWM_Start+0x1e6>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008590:	d011      	beq.n	80085b6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f042 0201 	orr.w	r2, r2, #1
 80085a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a2:	e008      	b.n	80085b6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f042 0201 	orr.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	e000      	b.n	80085b8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	40010000 	.word	0x40010000
 80085c8:	40010400 	.word	0x40010400
 80085cc:	40014000 	.word	0x40014000
 80085d0:	40014400 	.word	0x40014400
 80085d4:	40014800 	.word	0x40014800
 80085d8:	40000400 	.word	0x40000400
 80085dc:	40000800 	.word	0x40000800
 80085e0:	40000c00 	.word	0x40000c00
 80085e4:	40001800 	.word	0x40001800
 80085e8:	00010007 	.word	0x00010007

080085ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008602:	2b01      	cmp	r3, #1
 8008604:	d101      	bne.n	800860a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008606:	2302      	movs	r3, #2
 8008608:	e0ff      	b.n	800880a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b14      	cmp	r3, #20
 8008616:	f200 80f0 	bhi.w	80087fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800861a:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800861c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008620:	08008675 	.word	0x08008675
 8008624:	080087fb 	.word	0x080087fb
 8008628:	080087fb 	.word	0x080087fb
 800862c:	080087fb 	.word	0x080087fb
 8008630:	080086b5 	.word	0x080086b5
 8008634:	080087fb 	.word	0x080087fb
 8008638:	080087fb 	.word	0x080087fb
 800863c:	080087fb 	.word	0x080087fb
 8008640:	080086f7 	.word	0x080086f7
 8008644:	080087fb 	.word	0x080087fb
 8008648:	080087fb 	.word	0x080087fb
 800864c:	080087fb 	.word	0x080087fb
 8008650:	08008737 	.word	0x08008737
 8008654:	080087fb 	.word	0x080087fb
 8008658:	080087fb 	.word	0x080087fb
 800865c:	080087fb 	.word	0x080087fb
 8008660:	08008779 	.word	0x08008779
 8008664:	080087fb 	.word	0x080087fb
 8008668:	080087fb 	.word	0x080087fb
 800866c:	080087fb 	.word	0x080087fb
 8008670:	080087b9 	.word	0x080087b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	4618      	mov	r0, r3
 800867c:	f000 fa5c 	bl	8008b38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699a      	ldr	r2, [r3, #24]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0208 	orr.w	r2, r2, #8
 800868e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	699a      	ldr	r2, [r3, #24]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0204 	bic.w	r2, r2, #4
 800869e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6999      	ldr	r1, [r3, #24]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	691a      	ldr	r2, [r3, #16]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	619a      	str	r2, [r3, #24]
      break;
 80086b2:	e0a5      	b.n	8008800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 facc 	bl	8008c58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699a      	ldr	r2, [r3, #24]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699a      	ldr	r2, [r3, #24]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6999      	ldr	r1, [r3, #24]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	021a      	lsls	r2, r3, #8
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	619a      	str	r2, [r3, #24]
      break;
 80086f4:	e084      	b.n	8008800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 fb35 	bl	8008d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	69da      	ldr	r2, [r3, #28]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f042 0208 	orr.w	r2, r2, #8
 8008710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	69da      	ldr	r2, [r3, #28]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0204 	bic.w	r2, r2, #4
 8008720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69d9      	ldr	r1, [r3, #28]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	691a      	ldr	r2, [r3, #16]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	430a      	orrs	r2, r1
 8008732:	61da      	str	r2, [r3, #28]
      break;
 8008734:	e064      	b.n	8008800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	4618      	mov	r0, r3
 800873e:	f000 fb9d 	bl	8008e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69da      	ldr	r2, [r3, #28]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69d9      	ldr	r1, [r3, #28]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	021a      	lsls	r2, r3, #8
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	61da      	str	r2, [r3, #28]
      break;
 8008776:	e043      	b.n	8008800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fbe6 	bl	8008f50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0208 	orr.w	r2, r2, #8
 8008792:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0204 	bic.w	r2, r2, #4
 80087a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	691a      	ldr	r2, [r3, #16]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80087b6:	e023      	b.n	8008800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68b9      	ldr	r1, [r7, #8]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fc2a 	bl	8009018 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	021a      	lsls	r2, r3, #8
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	430a      	orrs	r2, r1
 80087f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80087f8:	e002      	b.n	8008800 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	75fb      	strb	r3, [r7, #23]
      break;
 80087fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008808:	7dfb      	ldrb	r3, [r7, #23]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop

08008814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <HAL_TIM_ConfigClockSource+0x1c>
 800882c:	2302      	movs	r3, #2
 800882e:	e0dc      	b.n	80089ea <HAL_TIM_ConfigClockSource+0x1d6>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	4b6a      	ldr	r3, [pc, #424]	; (80089f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800884c:	4013      	ands	r3, r2
 800884e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008856:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a64      	ldr	r2, [pc, #400]	; (80089f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008866:	4293      	cmp	r3, r2
 8008868:	f000 80a9 	beq.w	80089be <HAL_TIM_ConfigClockSource+0x1aa>
 800886c:	4a62      	ldr	r2, [pc, #392]	; (80089f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800886e:	4293      	cmp	r3, r2
 8008870:	f200 80ae 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008874:	4a61      	ldr	r2, [pc, #388]	; (80089fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8008876:	4293      	cmp	r3, r2
 8008878:	f000 80a1 	beq.w	80089be <HAL_TIM_ConfigClockSource+0x1aa>
 800887c:	4a5f      	ldr	r2, [pc, #380]	; (80089fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	f200 80a6 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008884:	4a5e      	ldr	r2, [pc, #376]	; (8008a00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008886:	4293      	cmp	r3, r2
 8008888:	f000 8099 	beq.w	80089be <HAL_TIM_ConfigClockSource+0x1aa>
 800888c:	4a5c      	ldr	r2, [pc, #368]	; (8008a00 <HAL_TIM_ConfigClockSource+0x1ec>)
 800888e:	4293      	cmp	r3, r2
 8008890:	f200 809e 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008894:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008898:	f000 8091 	beq.w	80089be <HAL_TIM_ConfigClockSource+0x1aa>
 800889c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80088a0:	f200 8096 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80088a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088a8:	f000 8089 	beq.w	80089be <HAL_TIM_ConfigClockSource+0x1aa>
 80088ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088b0:	f200 808e 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80088b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088b8:	d03e      	beq.n	8008938 <HAL_TIM_ConfigClockSource+0x124>
 80088ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088be:	f200 8087 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80088c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088c6:	f000 8086 	beq.w	80089d6 <HAL_TIM_ConfigClockSource+0x1c2>
 80088ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ce:	d87f      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80088d0:	2b70      	cmp	r3, #112	; 0x70
 80088d2:	d01a      	beq.n	800890a <HAL_TIM_ConfigClockSource+0xf6>
 80088d4:	2b70      	cmp	r3, #112	; 0x70
 80088d6:	d87b      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80088d8:	2b60      	cmp	r3, #96	; 0x60
 80088da:	d050      	beq.n	800897e <HAL_TIM_ConfigClockSource+0x16a>
 80088dc:	2b60      	cmp	r3, #96	; 0x60
 80088de:	d877      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80088e0:	2b50      	cmp	r3, #80	; 0x50
 80088e2:	d03c      	beq.n	800895e <HAL_TIM_ConfigClockSource+0x14a>
 80088e4:	2b50      	cmp	r3, #80	; 0x50
 80088e6:	d873      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80088e8:	2b40      	cmp	r3, #64	; 0x40
 80088ea:	d058      	beq.n	800899e <HAL_TIM_ConfigClockSource+0x18a>
 80088ec:	2b40      	cmp	r3, #64	; 0x40
 80088ee:	d86f      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80088f0:	2b30      	cmp	r3, #48	; 0x30
 80088f2:	d064      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x1aa>
 80088f4:	2b30      	cmp	r3, #48	; 0x30
 80088f6:	d86b      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80088f8:	2b20      	cmp	r3, #32
 80088fa:	d060      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x1aa>
 80088fc:	2b20      	cmp	r3, #32
 80088fe:	d867      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008900:	2b00      	cmp	r3, #0
 8008902:	d05c      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x1aa>
 8008904:	2b10      	cmp	r3, #16
 8008906:	d05a      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x1aa>
 8008908:	e062      	b.n	80089d0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800891a:	f000 fc61 	bl	80091e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800892c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	609a      	str	r2, [r3, #8]
      break;
 8008936:	e04f      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008948:	f000 fc4a 	bl	80091e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689a      	ldr	r2, [r3, #8]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800895a:	609a      	str	r2, [r3, #8]
      break;
 800895c:	e03c      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800896a:	461a      	mov	r2, r3
 800896c:	f000 fbba 	bl	80090e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2150      	movs	r1, #80	; 0x50
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fc14 	bl	80091a4 <TIM_ITRx_SetConfig>
      break;
 800897c:	e02c      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800898a:	461a      	mov	r2, r3
 800898c:	f000 fbd9 	bl	8009142 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2160      	movs	r1, #96	; 0x60
 8008996:	4618      	mov	r0, r3
 8008998:	f000 fc04 	bl	80091a4 <TIM_ITRx_SetConfig>
      break;
 800899c:	e01c      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089aa:	461a      	mov	r2, r3
 80089ac:	f000 fb9a 	bl	80090e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2140      	movs	r1, #64	; 0x40
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fbf4 	bl	80091a4 <TIM_ITRx_SetConfig>
      break;
 80089bc:	e00c      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4619      	mov	r1, r3
 80089c8:	4610      	mov	r0, r2
 80089ca:	f000 fbeb 	bl	80091a4 <TIM_ITRx_SetConfig>
      break;
 80089ce:	e003      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	73fb      	strb	r3, [r7, #15]
      break;
 80089d4:	e000      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80089d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	ffceff88 	.word	0xffceff88
 80089f8:	00100040 	.word	0x00100040
 80089fc:	00100030 	.word	0x00100030
 8008a00:	00100020 	.word	0x00100020

08008a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a40      	ldr	r2, [pc, #256]	; (8008b18 <TIM_Base_SetConfig+0x114>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d013      	beq.n	8008a44 <TIM_Base_SetConfig+0x40>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a22:	d00f      	beq.n	8008a44 <TIM_Base_SetConfig+0x40>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a3d      	ldr	r2, [pc, #244]	; (8008b1c <TIM_Base_SetConfig+0x118>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d00b      	beq.n	8008a44 <TIM_Base_SetConfig+0x40>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a3c      	ldr	r2, [pc, #240]	; (8008b20 <TIM_Base_SetConfig+0x11c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d007      	beq.n	8008a44 <TIM_Base_SetConfig+0x40>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a3b      	ldr	r2, [pc, #236]	; (8008b24 <TIM_Base_SetConfig+0x120>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d003      	beq.n	8008a44 <TIM_Base_SetConfig+0x40>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a3a      	ldr	r2, [pc, #232]	; (8008b28 <TIM_Base_SetConfig+0x124>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d108      	bne.n	8008a56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a2f      	ldr	r2, [pc, #188]	; (8008b18 <TIM_Base_SetConfig+0x114>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d01f      	beq.n	8008a9e <TIM_Base_SetConfig+0x9a>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a64:	d01b      	beq.n	8008a9e <TIM_Base_SetConfig+0x9a>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a2c      	ldr	r2, [pc, #176]	; (8008b1c <TIM_Base_SetConfig+0x118>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d017      	beq.n	8008a9e <TIM_Base_SetConfig+0x9a>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a2b      	ldr	r2, [pc, #172]	; (8008b20 <TIM_Base_SetConfig+0x11c>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d013      	beq.n	8008a9e <TIM_Base_SetConfig+0x9a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a2a      	ldr	r2, [pc, #168]	; (8008b24 <TIM_Base_SetConfig+0x120>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d00f      	beq.n	8008a9e <TIM_Base_SetConfig+0x9a>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a29      	ldr	r2, [pc, #164]	; (8008b28 <TIM_Base_SetConfig+0x124>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d00b      	beq.n	8008a9e <TIM_Base_SetConfig+0x9a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a28      	ldr	r2, [pc, #160]	; (8008b2c <TIM_Base_SetConfig+0x128>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d007      	beq.n	8008a9e <TIM_Base_SetConfig+0x9a>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a27      	ldr	r2, [pc, #156]	; (8008b30 <TIM_Base_SetConfig+0x12c>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d003      	beq.n	8008a9e <TIM_Base_SetConfig+0x9a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a26      	ldr	r2, [pc, #152]	; (8008b34 <TIM_Base_SetConfig+0x130>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d108      	bne.n	8008ab0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a10      	ldr	r2, [pc, #64]	; (8008b18 <TIM_Base_SetConfig+0x114>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00f      	beq.n	8008afc <TIM_Base_SetConfig+0xf8>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a12      	ldr	r2, [pc, #72]	; (8008b28 <TIM_Base_SetConfig+0x124>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d00b      	beq.n	8008afc <TIM_Base_SetConfig+0xf8>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a11      	ldr	r2, [pc, #68]	; (8008b2c <TIM_Base_SetConfig+0x128>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d007      	beq.n	8008afc <TIM_Base_SetConfig+0xf8>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a10      	ldr	r2, [pc, #64]	; (8008b30 <TIM_Base_SetConfig+0x12c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d003      	beq.n	8008afc <TIM_Base_SetConfig+0xf8>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a0f      	ldr	r2, [pc, #60]	; (8008b34 <TIM_Base_SetConfig+0x130>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d103      	bne.n	8008b04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	691a      	ldr	r2, [r3, #16]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	615a      	str	r2, [r3, #20]
}
 8008b0a:	bf00      	nop
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	40010000 	.word	0x40010000
 8008b1c:	40000400 	.word	0x40000400
 8008b20:	40000800 	.word	0x40000800
 8008b24:	40000c00 	.word	0x40000c00
 8008b28:	40010400 	.word	0x40010400
 8008b2c:	40014000 	.word	0x40014000
 8008b30:	40014400 	.word	0x40014400
 8008b34:	40014800 	.word	0x40014800

08008b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	f023 0201 	bic.w	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	4b37      	ldr	r3, [pc, #220]	; (8008c40 <TIM_OC1_SetConfig+0x108>)
 8008b64:	4013      	ands	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0303 	bic.w	r3, r3, #3
 8008b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f023 0302 	bic.w	r3, r3, #2
 8008b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a2d      	ldr	r2, [pc, #180]	; (8008c44 <TIM_OC1_SetConfig+0x10c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d00f      	beq.n	8008bb4 <TIM_OC1_SetConfig+0x7c>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a2c      	ldr	r2, [pc, #176]	; (8008c48 <TIM_OC1_SetConfig+0x110>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d00b      	beq.n	8008bb4 <TIM_OC1_SetConfig+0x7c>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a2b      	ldr	r2, [pc, #172]	; (8008c4c <TIM_OC1_SetConfig+0x114>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d007      	beq.n	8008bb4 <TIM_OC1_SetConfig+0x7c>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a2a      	ldr	r2, [pc, #168]	; (8008c50 <TIM_OC1_SetConfig+0x118>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d003      	beq.n	8008bb4 <TIM_OC1_SetConfig+0x7c>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a29      	ldr	r2, [pc, #164]	; (8008c54 <TIM_OC1_SetConfig+0x11c>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d10c      	bne.n	8008bce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f023 0308 	bic.w	r3, r3, #8
 8008bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f023 0304 	bic.w	r3, r3, #4
 8008bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a1c      	ldr	r2, [pc, #112]	; (8008c44 <TIM_OC1_SetConfig+0x10c>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d00f      	beq.n	8008bf6 <TIM_OC1_SetConfig+0xbe>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a1b      	ldr	r2, [pc, #108]	; (8008c48 <TIM_OC1_SetConfig+0x110>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d00b      	beq.n	8008bf6 <TIM_OC1_SetConfig+0xbe>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a1a      	ldr	r2, [pc, #104]	; (8008c4c <TIM_OC1_SetConfig+0x114>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d007      	beq.n	8008bf6 <TIM_OC1_SetConfig+0xbe>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a19      	ldr	r2, [pc, #100]	; (8008c50 <TIM_OC1_SetConfig+0x118>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d003      	beq.n	8008bf6 <TIM_OC1_SetConfig+0xbe>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a18      	ldr	r2, [pc, #96]	; (8008c54 <TIM_OC1_SetConfig+0x11c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d111      	bne.n	8008c1a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	621a      	str	r2, [r3, #32]
}
 8008c34:	bf00      	nop
 8008c36:	371c      	adds	r7, #28
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	fffeff8f 	.word	0xfffeff8f
 8008c44:	40010000 	.word	0x40010000
 8008c48:	40010400 	.word	0x40010400
 8008c4c:	40014000 	.word	0x40014000
 8008c50:	40014400 	.word	0x40014400
 8008c54:	40014800 	.word	0x40014800

08008c58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	f023 0210 	bic.w	r2, r3, #16
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4b34      	ldr	r3, [pc, #208]	; (8008d54 <TIM_OC2_SetConfig+0xfc>)
 8008c84:	4013      	ands	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f023 0320 	bic.w	r3, r3, #32
 8008ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a29      	ldr	r2, [pc, #164]	; (8008d58 <TIM_OC2_SetConfig+0x100>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d003      	beq.n	8008cc0 <TIM_OC2_SetConfig+0x68>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a28      	ldr	r2, [pc, #160]	; (8008d5c <TIM_OC2_SetConfig+0x104>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d10d      	bne.n	8008cdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a1e      	ldr	r2, [pc, #120]	; (8008d58 <TIM_OC2_SetConfig+0x100>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d00f      	beq.n	8008d04 <TIM_OC2_SetConfig+0xac>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a1d      	ldr	r2, [pc, #116]	; (8008d5c <TIM_OC2_SetConfig+0x104>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d00b      	beq.n	8008d04 <TIM_OC2_SetConfig+0xac>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a1c      	ldr	r2, [pc, #112]	; (8008d60 <TIM_OC2_SetConfig+0x108>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d007      	beq.n	8008d04 <TIM_OC2_SetConfig+0xac>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a1b      	ldr	r2, [pc, #108]	; (8008d64 <TIM_OC2_SetConfig+0x10c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d003      	beq.n	8008d04 <TIM_OC2_SetConfig+0xac>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a1a      	ldr	r2, [pc, #104]	; (8008d68 <TIM_OC2_SetConfig+0x110>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d113      	bne.n	8008d2c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	621a      	str	r2, [r3, #32]
}
 8008d46:	bf00      	nop
 8008d48:	371c      	adds	r7, #28
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	feff8fff 	.word	0xfeff8fff
 8008d58:	40010000 	.word	0x40010000
 8008d5c:	40010400 	.word	0x40010400
 8008d60:	40014000 	.word	0x40014000
 8008d64:	40014400 	.word	0x40014400
 8008d68:	40014800 	.word	0x40014800

08008d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b087      	sub	sp, #28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	4b33      	ldr	r3, [pc, #204]	; (8008e64 <TIM_OC3_SetConfig+0xf8>)
 8008d98:	4013      	ands	r3, r2
 8008d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f023 0303 	bic.w	r3, r3, #3
 8008da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	021b      	lsls	r3, r3, #8
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a28      	ldr	r2, [pc, #160]	; (8008e68 <TIM_OC3_SetConfig+0xfc>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d003      	beq.n	8008dd2 <TIM_OC3_SetConfig+0x66>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a27      	ldr	r2, [pc, #156]	; (8008e6c <TIM_OC3_SetConfig+0x100>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d10d      	bne.n	8008dee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	021b      	lsls	r3, r3, #8
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a1d      	ldr	r2, [pc, #116]	; (8008e68 <TIM_OC3_SetConfig+0xfc>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d00f      	beq.n	8008e16 <TIM_OC3_SetConfig+0xaa>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a1c      	ldr	r2, [pc, #112]	; (8008e6c <TIM_OC3_SetConfig+0x100>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d00b      	beq.n	8008e16 <TIM_OC3_SetConfig+0xaa>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a1b      	ldr	r2, [pc, #108]	; (8008e70 <TIM_OC3_SetConfig+0x104>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d007      	beq.n	8008e16 <TIM_OC3_SetConfig+0xaa>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a1a      	ldr	r2, [pc, #104]	; (8008e74 <TIM_OC3_SetConfig+0x108>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d003      	beq.n	8008e16 <TIM_OC3_SetConfig+0xaa>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a19      	ldr	r2, [pc, #100]	; (8008e78 <TIM_OC3_SetConfig+0x10c>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d113      	bne.n	8008e3e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	011b      	lsls	r3, r3, #4
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	011b      	lsls	r3, r3, #4
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	621a      	str	r2, [r3, #32]
}
 8008e58:	bf00      	nop
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	fffeff8f 	.word	0xfffeff8f
 8008e68:	40010000 	.word	0x40010000
 8008e6c:	40010400 	.word	0x40010400
 8008e70:	40014000 	.word	0x40014000
 8008e74:	40014400 	.word	0x40014400
 8008e78:	40014800 	.word	0x40014800

08008e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	4b24      	ldr	r3, [pc, #144]	; (8008f38 <TIM_OC4_SetConfig+0xbc>)
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	021b      	lsls	r3, r3, #8
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	031b      	lsls	r3, r3, #12
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a19      	ldr	r2, [pc, #100]	; (8008f3c <TIM_OC4_SetConfig+0xc0>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d00f      	beq.n	8008efc <TIM_OC4_SetConfig+0x80>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a18      	ldr	r2, [pc, #96]	; (8008f40 <TIM_OC4_SetConfig+0xc4>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d00b      	beq.n	8008efc <TIM_OC4_SetConfig+0x80>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a17      	ldr	r2, [pc, #92]	; (8008f44 <TIM_OC4_SetConfig+0xc8>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d007      	beq.n	8008efc <TIM_OC4_SetConfig+0x80>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a16      	ldr	r2, [pc, #88]	; (8008f48 <TIM_OC4_SetConfig+0xcc>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d003      	beq.n	8008efc <TIM_OC4_SetConfig+0x80>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a15      	ldr	r2, [pc, #84]	; (8008f4c <TIM_OC4_SetConfig+0xd0>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d109      	bne.n	8008f10 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	019b      	lsls	r3, r3, #6
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	621a      	str	r2, [r3, #32]
}
 8008f2a:	bf00      	nop
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	feff8fff 	.word	0xfeff8fff
 8008f3c:	40010000 	.word	0x40010000
 8008f40:	40010400 	.word	0x40010400
 8008f44:	40014000 	.word	0x40014000
 8008f48:	40014400 	.word	0x40014400
 8008f4c:	40014800 	.word	0x40014800

08008f50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	4b21      	ldr	r3, [pc, #132]	; (8009000 <TIM_OC5_SetConfig+0xb0>)
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	041b      	lsls	r3, r3, #16
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a18      	ldr	r2, [pc, #96]	; (8009004 <TIM_OC5_SetConfig+0xb4>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00f      	beq.n	8008fc6 <TIM_OC5_SetConfig+0x76>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a17      	ldr	r2, [pc, #92]	; (8009008 <TIM_OC5_SetConfig+0xb8>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d00b      	beq.n	8008fc6 <TIM_OC5_SetConfig+0x76>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a16      	ldr	r2, [pc, #88]	; (800900c <TIM_OC5_SetConfig+0xbc>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d007      	beq.n	8008fc6 <TIM_OC5_SetConfig+0x76>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a15      	ldr	r2, [pc, #84]	; (8009010 <TIM_OC5_SetConfig+0xc0>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d003      	beq.n	8008fc6 <TIM_OC5_SetConfig+0x76>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a14      	ldr	r2, [pc, #80]	; (8009014 <TIM_OC5_SetConfig+0xc4>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d109      	bne.n	8008fda <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	021b      	lsls	r3, r3, #8
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	621a      	str	r2, [r3, #32]
}
 8008ff4:	bf00      	nop
 8008ff6:	371c      	adds	r7, #28
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	fffeff8f 	.word	0xfffeff8f
 8009004:	40010000 	.word	0x40010000
 8009008:	40010400 	.word	0x40010400
 800900c:	40014000 	.word	0x40014000
 8009010:	40014400 	.word	0x40014400
 8009014:	40014800 	.word	0x40014800

08009018 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009018:	b480      	push	{r7}
 800901a:	b087      	sub	sp, #28
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800903e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	4b22      	ldr	r3, [pc, #136]	; (80090cc <TIM_OC6_SetConfig+0xb4>)
 8009044:	4013      	ands	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	021b      	lsls	r3, r3, #8
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	4313      	orrs	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800905a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	051b      	lsls	r3, r3, #20
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	4313      	orrs	r3, r2
 8009066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a19      	ldr	r2, [pc, #100]	; (80090d0 <TIM_OC6_SetConfig+0xb8>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d00f      	beq.n	8009090 <TIM_OC6_SetConfig+0x78>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a18      	ldr	r2, [pc, #96]	; (80090d4 <TIM_OC6_SetConfig+0xbc>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d00b      	beq.n	8009090 <TIM_OC6_SetConfig+0x78>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a17      	ldr	r2, [pc, #92]	; (80090d8 <TIM_OC6_SetConfig+0xc0>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d007      	beq.n	8009090 <TIM_OC6_SetConfig+0x78>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a16      	ldr	r2, [pc, #88]	; (80090dc <TIM_OC6_SetConfig+0xc4>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d003      	beq.n	8009090 <TIM_OC6_SetConfig+0x78>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a15      	ldr	r2, [pc, #84]	; (80090e0 <TIM_OC6_SetConfig+0xc8>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d109      	bne.n	80090a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009096:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	029b      	lsls	r3, r3, #10
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	621a      	str	r2, [r3, #32]
}
 80090be:	bf00      	nop
 80090c0:	371c      	adds	r7, #28
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	feff8fff 	.word	0xfeff8fff
 80090d0:	40010000 	.word	0x40010000
 80090d4:	40010400 	.word	0x40010400
 80090d8:	40014000 	.word	0x40014000
 80090dc:	40014400 	.word	0x40014400
 80090e0:	40014800 	.word	0x40014800

080090e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
 80090f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	f023 0201 	bic.w	r2, r3, #1
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800910e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	011b      	lsls	r3, r3, #4
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	4313      	orrs	r3, r2
 8009118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f023 030a 	bic.w	r3, r3, #10
 8009120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	4313      	orrs	r3, r2
 8009128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	621a      	str	r2, [r3, #32]
}
 8009136:	bf00      	nop
 8009138:	371c      	adds	r7, #28
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009142:	b480      	push	{r7}
 8009144:	b087      	sub	sp, #28
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	f023 0210 	bic.w	r2, r3, #16
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800916c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	031b      	lsls	r3, r3, #12
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	4313      	orrs	r3, r2
 8009176:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800917e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4313      	orrs	r3, r2
 8009188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	621a      	str	r2, [r3, #32]
}
 8009196:	bf00      	nop
 8009198:	371c      	adds	r7, #28
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
	...

080091a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	4b09      	ldr	r3, [pc, #36]	; (80091dc <TIM_ITRx_SetConfig+0x38>)
 80091b8:	4013      	ands	r3, r2
 80091ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	f043 0307 	orr.w	r3, r3, #7
 80091c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	609a      	str	r2, [r3, #8]
}
 80091ce:	bf00      	nop
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	ffcfff8f 	.word	0xffcfff8f

080091e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b087      	sub	sp, #28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	021a      	lsls	r2, r3, #8
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	431a      	orrs	r2, r3
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4313      	orrs	r3, r2
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	4313      	orrs	r3, r2
 800920c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	609a      	str	r2, [r3, #8]
}
 8009214:	bf00      	nop
 8009216:	371c      	adds	r7, #28
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f003 031f 	and.w	r3, r3, #31
 8009232:	2201      	movs	r2, #1
 8009234:	fa02 f303 	lsl.w	r3, r2, r3
 8009238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6a1a      	ldr	r2, [r3, #32]
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	43db      	mvns	r3, r3
 8009242:	401a      	ands	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6a1a      	ldr	r2, [r3, #32]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f003 031f 	and.w	r3, r3, #31
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	fa01 f303 	lsl.w	r3, r1, r3
 8009258:	431a      	orrs	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	621a      	str	r2, [r3, #32]
}
 800925e:	bf00      	nop
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
	...

0800926c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800927c:	2b01      	cmp	r3, #1
 800927e:	d101      	bne.n	8009284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009280:	2302      	movs	r3, #2
 8009282:	e06d      	b.n	8009360 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2202      	movs	r2, #2
 8009290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a30      	ldr	r2, [pc, #192]	; (800936c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d004      	beq.n	80092b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a2f      	ldr	r2, [pc, #188]	; (8009370 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d108      	bne.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80092be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	4313      	orrs	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a20      	ldr	r2, [pc, #128]	; (800936c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d022      	beq.n	8009334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f6:	d01d      	beq.n	8009334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a1d      	ldr	r2, [pc, #116]	; (8009374 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d018      	beq.n	8009334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a1c      	ldr	r2, [pc, #112]	; (8009378 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d013      	beq.n	8009334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a1a      	ldr	r2, [pc, #104]	; (800937c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d00e      	beq.n	8009334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a15      	ldr	r2, [pc, #84]	; (8009370 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d009      	beq.n	8009334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a16      	ldr	r2, [pc, #88]	; (8009380 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d004      	beq.n	8009334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a15      	ldr	r2, [pc, #84]	; (8009384 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d10c      	bne.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800933a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	4313      	orrs	r3, r2
 8009344:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	40010000 	.word	0x40010000
 8009370:	40010400 	.word	0x40010400
 8009374:	40000400 	.word	0x40000400
 8009378:	40000800 	.word	0x40000800
 800937c:	40000c00 	.word	0x40000c00
 8009380:	40001800 	.word	0x40001800
 8009384:	40014000 	.word	0x40014000

08009388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e042      	b.n	8009420 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d106      	bne.n	80093b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7f8 ffcb 	bl	8002348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2224      	movs	r2, #36	; 0x24
 80093b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0201 	bic.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f8ba 	bl	8009544 <UART_SetConfig>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d101      	bne.n	80093da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e022      	b.n	8009420 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 ff1a 	bl	800a21c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689a      	ldr	r2, [r3, #8]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 0201 	orr.w	r2, r2, #1
 8009416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 ffa1 	bl	800a360 <UART_CheckIdleState>
 800941e:	4603      	mov	r3, r0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b08a      	sub	sp, #40	; 0x28
 800942c:	af02      	add	r7, sp, #8
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	603b      	str	r3, [r7, #0]
 8009434:	4613      	mov	r3, r2
 8009436:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800943e:	2b20      	cmp	r3, #32
 8009440:	d17b      	bne.n	800953a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <HAL_UART_Transmit+0x26>
 8009448:	88fb      	ldrh	r3, [r7, #6]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e074      	b.n	800953c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2221      	movs	r2, #33	; 0x21
 800945e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009462:	f7f9 fa1b 	bl	800289c <HAL_GetTick>
 8009466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	88fa      	ldrh	r2, [r7, #6]
 800946c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	88fa      	ldrh	r2, [r7, #6]
 8009474:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009480:	d108      	bne.n	8009494 <HAL_UART_Transmit+0x6c>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d104      	bne.n	8009494 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800948a:	2300      	movs	r3, #0
 800948c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	61bb      	str	r3, [r7, #24]
 8009492:	e003      	b.n	800949c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009498:	2300      	movs	r3, #0
 800949a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800949c:	e030      	b.n	8009500 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2200      	movs	r2, #0
 80094a6:	2180      	movs	r1, #128	; 0x80
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f001 f803 	bl	800a4b4 <UART_WaitOnFlagUntilTimeout>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d005      	beq.n	80094c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2220      	movs	r2, #32
 80094b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e03d      	b.n	800953c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10b      	bne.n	80094de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	3302      	adds	r3, #2
 80094da:	61bb      	str	r3, [r7, #24]
 80094dc:	e007      	b.n	80094ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	781a      	ldrb	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	3301      	adds	r3, #1
 80094ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	3b01      	subs	r3, #1
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009506:	b29b      	uxth	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1c8      	bne.n	800949e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	2200      	movs	r2, #0
 8009514:	2140      	movs	r1, #64	; 0x40
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f000 ffcc 	bl	800a4b4 <UART_WaitOnFlagUntilTimeout>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d005      	beq.n	800952e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2220      	movs	r2, #32
 8009526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e006      	b.n	800953c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2220      	movs	r2, #32
 8009532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	e000      	b.n	800953c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800953a:	2302      	movs	r3, #2
  }
}
 800953c:	4618      	mov	r0, r3
 800953e:	3720      	adds	r7, #32
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009548:	b092      	sub	sp, #72	; 0x48
 800954a:	af00      	add	r7, sp, #0
 800954c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	689a      	ldr	r2, [r3, #8]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	431a      	orrs	r2, r3
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	431a      	orrs	r2, r3
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	69db      	ldr	r3, [r3, #28]
 8009568:	4313      	orrs	r3, r2
 800956a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	4bbe      	ldr	r3, [pc, #760]	; (800986c <UART_SetConfig+0x328>)
 8009574:	4013      	ands	r3, r2
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	6812      	ldr	r2, [r2, #0]
 800957a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800957c:	430b      	orrs	r3, r1
 800957e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4ab3      	ldr	r2, [pc, #716]	; (8009870 <UART_SetConfig+0x32c>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d004      	beq.n	80095b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095ac:	4313      	orrs	r3, r2
 80095ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689a      	ldr	r2, [r3, #8]
 80095b6:	4baf      	ldr	r3, [pc, #700]	; (8009874 <UART_SetConfig+0x330>)
 80095b8:	4013      	ands	r3, r2
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	6812      	ldr	r2, [r2, #0]
 80095be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095c0:	430b      	orrs	r3, r1
 80095c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ca:	f023 010f 	bic.w	r1, r3, #15
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4aa6      	ldr	r2, [pc, #664]	; (8009878 <UART_SetConfig+0x334>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d177      	bne.n	80096d4 <UART_SetConfig+0x190>
 80095e4:	4ba5      	ldr	r3, [pc, #660]	; (800987c <UART_SetConfig+0x338>)
 80095e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095ec:	2b28      	cmp	r3, #40	; 0x28
 80095ee:	d86d      	bhi.n	80096cc <UART_SetConfig+0x188>
 80095f0:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <UART_SetConfig+0xb4>)
 80095f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f6:	bf00      	nop
 80095f8:	0800969d 	.word	0x0800969d
 80095fc:	080096cd 	.word	0x080096cd
 8009600:	080096cd 	.word	0x080096cd
 8009604:	080096cd 	.word	0x080096cd
 8009608:	080096cd 	.word	0x080096cd
 800960c:	080096cd 	.word	0x080096cd
 8009610:	080096cd 	.word	0x080096cd
 8009614:	080096cd 	.word	0x080096cd
 8009618:	080096a5 	.word	0x080096a5
 800961c:	080096cd 	.word	0x080096cd
 8009620:	080096cd 	.word	0x080096cd
 8009624:	080096cd 	.word	0x080096cd
 8009628:	080096cd 	.word	0x080096cd
 800962c:	080096cd 	.word	0x080096cd
 8009630:	080096cd 	.word	0x080096cd
 8009634:	080096cd 	.word	0x080096cd
 8009638:	080096ad 	.word	0x080096ad
 800963c:	080096cd 	.word	0x080096cd
 8009640:	080096cd 	.word	0x080096cd
 8009644:	080096cd 	.word	0x080096cd
 8009648:	080096cd 	.word	0x080096cd
 800964c:	080096cd 	.word	0x080096cd
 8009650:	080096cd 	.word	0x080096cd
 8009654:	080096cd 	.word	0x080096cd
 8009658:	080096b5 	.word	0x080096b5
 800965c:	080096cd 	.word	0x080096cd
 8009660:	080096cd 	.word	0x080096cd
 8009664:	080096cd 	.word	0x080096cd
 8009668:	080096cd 	.word	0x080096cd
 800966c:	080096cd 	.word	0x080096cd
 8009670:	080096cd 	.word	0x080096cd
 8009674:	080096cd 	.word	0x080096cd
 8009678:	080096bd 	.word	0x080096bd
 800967c:	080096cd 	.word	0x080096cd
 8009680:	080096cd 	.word	0x080096cd
 8009684:	080096cd 	.word	0x080096cd
 8009688:	080096cd 	.word	0x080096cd
 800968c:	080096cd 	.word	0x080096cd
 8009690:	080096cd 	.word	0x080096cd
 8009694:	080096cd 	.word	0x080096cd
 8009698:	080096c5 	.word	0x080096c5
 800969c:	2301      	movs	r3, #1
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096a2:	e326      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80096a4:	2304      	movs	r3, #4
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096aa:	e322      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80096ac:	2308      	movs	r3, #8
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096b2:	e31e      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80096b4:	2310      	movs	r3, #16
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ba:	e31a      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80096bc:	2320      	movs	r3, #32
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096c2:	e316      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80096c4:	2340      	movs	r3, #64	; 0x40
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ca:	e312      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80096cc:	2380      	movs	r3, #128	; 0x80
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096d2:	e30e      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a69      	ldr	r2, [pc, #420]	; (8009880 <UART_SetConfig+0x33c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d130      	bne.n	8009740 <UART_SetConfig+0x1fc>
 80096de:	4b67      	ldr	r3, [pc, #412]	; (800987c <UART_SetConfig+0x338>)
 80096e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	2b05      	cmp	r3, #5
 80096e8:	d826      	bhi.n	8009738 <UART_SetConfig+0x1f4>
 80096ea:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <UART_SetConfig+0x1ac>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009709 	.word	0x08009709
 80096f4:	08009711 	.word	0x08009711
 80096f8:	08009719 	.word	0x08009719
 80096fc:	08009721 	.word	0x08009721
 8009700:	08009729 	.word	0x08009729
 8009704:	08009731 	.word	0x08009731
 8009708:	2300      	movs	r3, #0
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800970e:	e2f0      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009710:	2304      	movs	r3, #4
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009716:	e2ec      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009718:	2308      	movs	r3, #8
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800971e:	e2e8      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009720:	2310      	movs	r3, #16
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009726:	e2e4      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009728:	2320      	movs	r3, #32
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800972e:	e2e0      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009730:	2340      	movs	r3, #64	; 0x40
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009736:	e2dc      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009738:	2380      	movs	r3, #128	; 0x80
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800973e:	e2d8      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a4f      	ldr	r2, [pc, #316]	; (8009884 <UART_SetConfig+0x340>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d130      	bne.n	80097ac <UART_SetConfig+0x268>
 800974a:	4b4c      	ldr	r3, [pc, #304]	; (800987c <UART_SetConfig+0x338>)
 800974c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	2b05      	cmp	r3, #5
 8009754:	d826      	bhi.n	80097a4 <UART_SetConfig+0x260>
 8009756:	a201      	add	r2, pc, #4	; (adr r2, 800975c <UART_SetConfig+0x218>)
 8009758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975c:	08009775 	.word	0x08009775
 8009760:	0800977d 	.word	0x0800977d
 8009764:	08009785 	.word	0x08009785
 8009768:	0800978d 	.word	0x0800978d
 800976c:	08009795 	.word	0x08009795
 8009770:	0800979d 	.word	0x0800979d
 8009774:	2300      	movs	r3, #0
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800977a:	e2ba      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 800977c:	2304      	movs	r3, #4
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009782:	e2b6      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009784:	2308      	movs	r3, #8
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800978a:	e2b2      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 800978c:	2310      	movs	r3, #16
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009792:	e2ae      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009794:	2320      	movs	r3, #32
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800979a:	e2aa      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 800979c:	2340      	movs	r3, #64	; 0x40
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097a2:	e2a6      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80097a4:	2380      	movs	r3, #128	; 0x80
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097aa:	e2a2      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a35      	ldr	r2, [pc, #212]	; (8009888 <UART_SetConfig+0x344>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d130      	bne.n	8009818 <UART_SetConfig+0x2d4>
 80097b6:	4b31      	ldr	r3, [pc, #196]	; (800987c <UART_SetConfig+0x338>)
 80097b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ba:	f003 0307 	and.w	r3, r3, #7
 80097be:	2b05      	cmp	r3, #5
 80097c0:	d826      	bhi.n	8009810 <UART_SetConfig+0x2cc>
 80097c2:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <UART_SetConfig+0x284>)
 80097c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c8:	080097e1 	.word	0x080097e1
 80097cc:	080097e9 	.word	0x080097e9
 80097d0:	080097f1 	.word	0x080097f1
 80097d4:	080097f9 	.word	0x080097f9
 80097d8:	08009801 	.word	0x08009801
 80097dc:	08009809 	.word	0x08009809
 80097e0:	2300      	movs	r3, #0
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e6:	e284      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80097e8:	2304      	movs	r3, #4
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ee:	e280      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80097f0:	2308      	movs	r3, #8
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f6:	e27c      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80097f8:	2310      	movs	r3, #16
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fe:	e278      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009800:	2320      	movs	r3, #32
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009806:	e274      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009808:	2340      	movs	r3, #64	; 0x40
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980e:	e270      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009810:	2380      	movs	r3, #128	; 0x80
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009816:	e26c      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a1b      	ldr	r2, [pc, #108]	; (800988c <UART_SetConfig+0x348>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d142      	bne.n	80098a8 <UART_SetConfig+0x364>
 8009822:	4b16      	ldr	r3, [pc, #88]	; (800987c <UART_SetConfig+0x338>)
 8009824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009826:	f003 0307 	and.w	r3, r3, #7
 800982a:	2b05      	cmp	r3, #5
 800982c:	d838      	bhi.n	80098a0 <UART_SetConfig+0x35c>
 800982e:	a201      	add	r2, pc, #4	; (adr r2, 8009834 <UART_SetConfig+0x2f0>)
 8009830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009834:	0800984d 	.word	0x0800984d
 8009838:	08009855 	.word	0x08009855
 800983c:	0800985d 	.word	0x0800985d
 8009840:	08009865 	.word	0x08009865
 8009844:	08009891 	.word	0x08009891
 8009848:	08009899 	.word	0x08009899
 800984c:	2300      	movs	r3, #0
 800984e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009852:	e24e      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009854:	2304      	movs	r3, #4
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985a:	e24a      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 800985c:	2308      	movs	r3, #8
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009862:	e246      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009864:	2310      	movs	r3, #16
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800986a:	e242      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 800986c:	cfff69f3 	.word	0xcfff69f3
 8009870:	58000c00 	.word	0x58000c00
 8009874:	11fff4ff 	.word	0x11fff4ff
 8009878:	40011000 	.word	0x40011000
 800987c:	58024400 	.word	0x58024400
 8009880:	40004400 	.word	0x40004400
 8009884:	40004800 	.word	0x40004800
 8009888:	40004c00 	.word	0x40004c00
 800988c:	40005000 	.word	0x40005000
 8009890:	2320      	movs	r3, #32
 8009892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009896:	e22c      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009898:	2340      	movs	r3, #64	; 0x40
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989e:	e228      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80098a0:	2380      	movs	r3, #128	; 0x80
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a6:	e224      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4ab1      	ldr	r2, [pc, #708]	; (8009b74 <UART_SetConfig+0x630>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d176      	bne.n	80099a0 <UART_SetConfig+0x45c>
 80098b2:	4bb1      	ldr	r3, [pc, #708]	; (8009b78 <UART_SetConfig+0x634>)
 80098b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098ba:	2b28      	cmp	r3, #40	; 0x28
 80098bc:	d86c      	bhi.n	8009998 <UART_SetConfig+0x454>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <UART_SetConfig+0x380>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	08009969 	.word	0x08009969
 80098c8:	08009999 	.word	0x08009999
 80098cc:	08009999 	.word	0x08009999
 80098d0:	08009999 	.word	0x08009999
 80098d4:	08009999 	.word	0x08009999
 80098d8:	08009999 	.word	0x08009999
 80098dc:	08009999 	.word	0x08009999
 80098e0:	08009999 	.word	0x08009999
 80098e4:	08009971 	.word	0x08009971
 80098e8:	08009999 	.word	0x08009999
 80098ec:	08009999 	.word	0x08009999
 80098f0:	08009999 	.word	0x08009999
 80098f4:	08009999 	.word	0x08009999
 80098f8:	08009999 	.word	0x08009999
 80098fc:	08009999 	.word	0x08009999
 8009900:	08009999 	.word	0x08009999
 8009904:	08009979 	.word	0x08009979
 8009908:	08009999 	.word	0x08009999
 800990c:	08009999 	.word	0x08009999
 8009910:	08009999 	.word	0x08009999
 8009914:	08009999 	.word	0x08009999
 8009918:	08009999 	.word	0x08009999
 800991c:	08009999 	.word	0x08009999
 8009920:	08009999 	.word	0x08009999
 8009924:	08009981 	.word	0x08009981
 8009928:	08009999 	.word	0x08009999
 800992c:	08009999 	.word	0x08009999
 8009930:	08009999 	.word	0x08009999
 8009934:	08009999 	.word	0x08009999
 8009938:	08009999 	.word	0x08009999
 800993c:	08009999 	.word	0x08009999
 8009940:	08009999 	.word	0x08009999
 8009944:	08009989 	.word	0x08009989
 8009948:	08009999 	.word	0x08009999
 800994c:	08009999 	.word	0x08009999
 8009950:	08009999 	.word	0x08009999
 8009954:	08009999 	.word	0x08009999
 8009958:	08009999 	.word	0x08009999
 800995c:	08009999 	.word	0x08009999
 8009960:	08009999 	.word	0x08009999
 8009964:	08009991 	.word	0x08009991
 8009968:	2301      	movs	r3, #1
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800996e:	e1c0      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009970:	2304      	movs	r3, #4
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009976:	e1bc      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009978:	2308      	movs	r3, #8
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997e:	e1b8      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009980:	2310      	movs	r3, #16
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009986:	e1b4      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009988:	2320      	movs	r3, #32
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998e:	e1b0      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009990:	2340      	movs	r3, #64	; 0x40
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009996:	e1ac      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009998:	2380      	movs	r3, #128	; 0x80
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999e:	e1a8      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a75      	ldr	r2, [pc, #468]	; (8009b7c <UART_SetConfig+0x638>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d130      	bne.n	8009a0c <UART_SetConfig+0x4c8>
 80099aa:	4b73      	ldr	r3, [pc, #460]	; (8009b78 <UART_SetConfig+0x634>)
 80099ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ae:	f003 0307 	and.w	r3, r3, #7
 80099b2:	2b05      	cmp	r3, #5
 80099b4:	d826      	bhi.n	8009a04 <UART_SetConfig+0x4c0>
 80099b6:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <UART_SetConfig+0x478>)
 80099b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099bc:	080099d5 	.word	0x080099d5
 80099c0:	080099dd 	.word	0x080099dd
 80099c4:	080099e5 	.word	0x080099e5
 80099c8:	080099ed 	.word	0x080099ed
 80099cc:	080099f5 	.word	0x080099f5
 80099d0:	080099fd 	.word	0x080099fd
 80099d4:	2300      	movs	r3, #0
 80099d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099da:	e18a      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80099dc:	2304      	movs	r3, #4
 80099de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e2:	e186      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80099e4:	2308      	movs	r3, #8
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ea:	e182      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80099ec:	2310      	movs	r3, #16
 80099ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f2:	e17e      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80099f4:	2320      	movs	r3, #32
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fa:	e17a      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 80099fc:	2340      	movs	r3, #64	; 0x40
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a02:	e176      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009a04:	2380      	movs	r3, #128	; 0x80
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0a:	e172      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a5b      	ldr	r2, [pc, #364]	; (8009b80 <UART_SetConfig+0x63c>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d130      	bne.n	8009a78 <UART_SetConfig+0x534>
 8009a16:	4b58      	ldr	r3, [pc, #352]	; (8009b78 <UART_SetConfig+0x634>)
 8009a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a1a:	f003 0307 	and.w	r3, r3, #7
 8009a1e:	2b05      	cmp	r3, #5
 8009a20:	d826      	bhi.n	8009a70 <UART_SetConfig+0x52c>
 8009a22:	a201      	add	r2, pc, #4	; (adr r2, 8009a28 <UART_SetConfig+0x4e4>)
 8009a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a28:	08009a41 	.word	0x08009a41
 8009a2c:	08009a49 	.word	0x08009a49
 8009a30:	08009a51 	.word	0x08009a51
 8009a34:	08009a59 	.word	0x08009a59
 8009a38:	08009a61 	.word	0x08009a61
 8009a3c:	08009a69 	.word	0x08009a69
 8009a40:	2300      	movs	r3, #0
 8009a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a46:	e154      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009a48:	2304      	movs	r3, #4
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4e:	e150      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009a50:	2308      	movs	r3, #8
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a56:	e14c      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009a58:	2310      	movs	r3, #16
 8009a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5e:	e148      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009a60:	2320      	movs	r3, #32
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a66:	e144      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009a68:	2340      	movs	r3, #64	; 0x40
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6e:	e140      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009a70:	2380      	movs	r3, #128	; 0x80
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a76:	e13c      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a41      	ldr	r2, [pc, #260]	; (8009b84 <UART_SetConfig+0x640>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	f040 8082 	bne.w	8009b88 <UART_SetConfig+0x644>
 8009a84:	4b3c      	ldr	r3, [pc, #240]	; (8009b78 <UART_SetConfig+0x634>)
 8009a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a8c:	2b28      	cmp	r3, #40	; 0x28
 8009a8e:	d86d      	bhi.n	8009b6c <UART_SetConfig+0x628>
 8009a90:	a201      	add	r2, pc, #4	; (adr r2, 8009a98 <UART_SetConfig+0x554>)
 8009a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a96:	bf00      	nop
 8009a98:	08009b3d 	.word	0x08009b3d
 8009a9c:	08009b6d 	.word	0x08009b6d
 8009aa0:	08009b6d 	.word	0x08009b6d
 8009aa4:	08009b6d 	.word	0x08009b6d
 8009aa8:	08009b6d 	.word	0x08009b6d
 8009aac:	08009b6d 	.word	0x08009b6d
 8009ab0:	08009b6d 	.word	0x08009b6d
 8009ab4:	08009b6d 	.word	0x08009b6d
 8009ab8:	08009b45 	.word	0x08009b45
 8009abc:	08009b6d 	.word	0x08009b6d
 8009ac0:	08009b6d 	.word	0x08009b6d
 8009ac4:	08009b6d 	.word	0x08009b6d
 8009ac8:	08009b6d 	.word	0x08009b6d
 8009acc:	08009b6d 	.word	0x08009b6d
 8009ad0:	08009b6d 	.word	0x08009b6d
 8009ad4:	08009b6d 	.word	0x08009b6d
 8009ad8:	08009b4d 	.word	0x08009b4d
 8009adc:	08009b6d 	.word	0x08009b6d
 8009ae0:	08009b6d 	.word	0x08009b6d
 8009ae4:	08009b6d 	.word	0x08009b6d
 8009ae8:	08009b6d 	.word	0x08009b6d
 8009aec:	08009b6d 	.word	0x08009b6d
 8009af0:	08009b6d 	.word	0x08009b6d
 8009af4:	08009b6d 	.word	0x08009b6d
 8009af8:	08009b55 	.word	0x08009b55
 8009afc:	08009b6d 	.word	0x08009b6d
 8009b00:	08009b6d 	.word	0x08009b6d
 8009b04:	08009b6d 	.word	0x08009b6d
 8009b08:	08009b6d 	.word	0x08009b6d
 8009b0c:	08009b6d 	.word	0x08009b6d
 8009b10:	08009b6d 	.word	0x08009b6d
 8009b14:	08009b6d 	.word	0x08009b6d
 8009b18:	08009b5d 	.word	0x08009b5d
 8009b1c:	08009b6d 	.word	0x08009b6d
 8009b20:	08009b6d 	.word	0x08009b6d
 8009b24:	08009b6d 	.word	0x08009b6d
 8009b28:	08009b6d 	.word	0x08009b6d
 8009b2c:	08009b6d 	.word	0x08009b6d
 8009b30:	08009b6d 	.word	0x08009b6d
 8009b34:	08009b6d 	.word	0x08009b6d
 8009b38:	08009b65 	.word	0x08009b65
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b42:	e0d6      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009b44:	2304      	movs	r3, #4
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4a:	e0d2      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009b4c:	2308      	movs	r3, #8
 8009b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b52:	e0ce      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009b54:	2310      	movs	r3, #16
 8009b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5a:	e0ca      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009b5c:	2320      	movs	r3, #32
 8009b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b62:	e0c6      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009b64:	2340      	movs	r3, #64	; 0x40
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6a:	e0c2      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009b6c:	2380      	movs	r3, #128	; 0x80
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b72:	e0be      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009b74:	40011400 	.word	0x40011400
 8009b78:	58024400 	.word	0x58024400
 8009b7c:	40007800 	.word	0x40007800
 8009b80:	40007c00 	.word	0x40007c00
 8009b84:	40011800 	.word	0x40011800
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4aad      	ldr	r2, [pc, #692]	; (8009e44 <UART_SetConfig+0x900>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d176      	bne.n	8009c80 <UART_SetConfig+0x73c>
 8009b92:	4bad      	ldr	r3, [pc, #692]	; (8009e48 <UART_SetConfig+0x904>)
 8009b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b9a:	2b28      	cmp	r3, #40	; 0x28
 8009b9c:	d86c      	bhi.n	8009c78 <UART_SetConfig+0x734>
 8009b9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ba4 <UART_SetConfig+0x660>)
 8009ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba4:	08009c49 	.word	0x08009c49
 8009ba8:	08009c79 	.word	0x08009c79
 8009bac:	08009c79 	.word	0x08009c79
 8009bb0:	08009c79 	.word	0x08009c79
 8009bb4:	08009c79 	.word	0x08009c79
 8009bb8:	08009c79 	.word	0x08009c79
 8009bbc:	08009c79 	.word	0x08009c79
 8009bc0:	08009c79 	.word	0x08009c79
 8009bc4:	08009c51 	.word	0x08009c51
 8009bc8:	08009c79 	.word	0x08009c79
 8009bcc:	08009c79 	.word	0x08009c79
 8009bd0:	08009c79 	.word	0x08009c79
 8009bd4:	08009c79 	.word	0x08009c79
 8009bd8:	08009c79 	.word	0x08009c79
 8009bdc:	08009c79 	.word	0x08009c79
 8009be0:	08009c79 	.word	0x08009c79
 8009be4:	08009c59 	.word	0x08009c59
 8009be8:	08009c79 	.word	0x08009c79
 8009bec:	08009c79 	.word	0x08009c79
 8009bf0:	08009c79 	.word	0x08009c79
 8009bf4:	08009c79 	.word	0x08009c79
 8009bf8:	08009c79 	.word	0x08009c79
 8009bfc:	08009c79 	.word	0x08009c79
 8009c00:	08009c79 	.word	0x08009c79
 8009c04:	08009c61 	.word	0x08009c61
 8009c08:	08009c79 	.word	0x08009c79
 8009c0c:	08009c79 	.word	0x08009c79
 8009c10:	08009c79 	.word	0x08009c79
 8009c14:	08009c79 	.word	0x08009c79
 8009c18:	08009c79 	.word	0x08009c79
 8009c1c:	08009c79 	.word	0x08009c79
 8009c20:	08009c79 	.word	0x08009c79
 8009c24:	08009c69 	.word	0x08009c69
 8009c28:	08009c79 	.word	0x08009c79
 8009c2c:	08009c79 	.word	0x08009c79
 8009c30:	08009c79 	.word	0x08009c79
 8009c34:	08009c79 	.word	0x08009c79
 8009c38:	08009c79 	.word	0x08009c79
 8009c3c:	08009c79 	.word	0x08009c79
 8009c40:	08009c79 	.word	0x08009c79
 8009c44:	08009c71 	.word	0x08009c71
 8009c48:	2301      	movs	r3, #1
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4e:	e050      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009c50:	2304      	movs	r3, #4
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c56:	e04c      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009c58:	2308      	movs	r3, #8
 8009c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5e:	e048      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009c60:	2310      	movs	r3, #16
 8009c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c66:	e044      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009c68:	2320      	movs	r3, #32
 8009c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6e:	e040      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009c70:	2340      	movs	r3, #64	; 0x40
 8009c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c76:	e03c      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009c78:	2380      	movs	r3, #128	; 0x80
 8009c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7e:	e038      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a71      	ldr	r2, [pc, #452]	; (8009e4c <UART_SetConfig+0x908>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d130      	bne.n	8009cec <UART_SetConfig+0x7a8>
 8009c8a:	4b6f      	ldr	r3, [pc, #444]	; (8009e48 <UART_SetConfig+0x904>)
 8009c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8e:	f003 0307 	and.w	r3, r3, #7
 8009c92:	2b05      	cmp	r3, #5
 8009c94:	d826      	bhi.n	8009ce4 <UART_SetConfig+0x7a0>
 8009c96:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <UART_SetConfig+0x758>)
 8009c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9c:	08009cb5 	.word	0x08009cb5
 8009ca0:	08009cbd 	.word	0x08009cbd
 8009ca4:	08009cc5 	.word	0x08009cc5
 8009ca8:	08009ccd 	.word	0x08009ccd
 8009cac:	08009cd5 	.word	0x08009cd5
 8009cb0:	08009cdd 	.word	0x08009cdd
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cba:	e01a      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009cbc:	2304      	movs	r3, #4
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc2:	e016      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009cc4:	2308      	movs	r3, #8
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cca:	e012      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009ccc:	2310      	movs	r3, #16
 8009cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd2:	e00e      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009cd4:	2320      	movs	r3, #32
 8009cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cda:	e00a      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009cdc:	2340      	movs	r3, #64	; 0x40
 8009cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce2:	e006      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009ce4:	2380      	movs	r3, #128	; 0x80
 8009ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cea:	e002      	b.n	8009cf2 <UART_SetConfig+0x7ae>
 8009cec:	2380      	movs	r3, #128	; 0x80
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a55      	ldr	r2, [pc, #340]	; (8009e4c <UART_SetConfig+0x908>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	f040 80f8 	bne.w	8009eee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009cfe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	dc46      	bgt.n	8009d94 <UART_SetConfig+0x850>
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	db75      	blt.n	8009df6 <UART_SetConfig+0x8b2>
 8009d0a:	3b02      	subs	r3, #2
 8009d0c:	2b1e      	cmp	r3, #30
 8009d0e:	d872      	bhi.n	8009df6 <UART_SetConfig+0x8b2>
 8009d10:	a201      	add	r2, pc, #4	; (adr r2, 8009d18 <UART_SetConfig+0x7d4>)
 8009d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d16:	bf00      	nop
 8009d18:	08009d9b 	.word	0x08009d9b
 8009d1c:	08009df7 	.word	0x08009df7
 8009d20:	08009da3 	.word	0x08009da3
 8009d24:	08009df7 	.word	0x08009df7
 8009d28:	08009df7 	.word	0x08009df7
 8009d2c:	08009df7 	.word	0x08009df7
 8009d30:	08009db3 	.word	0x08009db3
 8009d34:	08009df7 	.word	0x08009df7
 8009d38:	08009df7 	.word	0x08009df7
 8009d3c:	08009df7 	.word	0x08009df7
 8009d40:	08009df7 	.word	0x08009df7
 8009d44:	08009df7 	.word	0x08009df7
 8009d48:	08009df7 	.word	0x08009df7
 8009d4c:	08009df7 	.word	0x08009df7
 8009d50:	08009dc3 	.word	0x08009dc3
 8009d54:	08009df7 	.word	0x08009df7
 8009d58:	08009df7 	.word	0x08009df7
 8009d5c:	08009df7 	.word	0x08009df7
 8009d60:	08009df7 	.word	0x08009df7
 8009d64:	08009df7 	.word	0x08009df7
 8009d68:	08009df7 	.word	0x08009df7
 8009d6c:	08009df7 	.word	0x08009df7
 8009d70:	08009df7 	.word	0x08009df7
 8009d74:	08009df7 	.word	0x08009df7
 8009d78:	08009df7 	.word	0x08009df7
 8009d7c:	08009df7 	.word	0x08009df7
 8009d80:	08009df7 	.word	0x08009df7
 8009d84:	08009df7 	.word	0x08009df7
 8009d88:	08009df7 	.word	0x08009df7
 8009d8c:	08009df7 	.word	0x08009df7
 8009d90:	08009de9 	.word	0x08009de9
 8009d94:	2b40      	cmp	r3, #64	; 0x40
 8009d96:	d02a      	beq.n	8009dee <UART_SetConfig+0x8aa>
 8009d98:	e02d      	b.n	8009df6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009d9a:	f7fc ff9b 	bl	8006cd4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009da0:	e02f      	b.n	8009e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fc ffaa 	bl	8006d00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009db0:	e027      	b.n	8009e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009db2:	f107 0318 	add.w	r3, r7, #24
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fd f8f6 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dc0:	e01f      	b.n	8009e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dc2:	4b21      	ldr	r3, [pc, #132]	; (8009e48 <UART_SetConfig+0x904>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0320 	and.w	r3, r3, #32
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d009      	beq.n	8009de2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dce:	4b1e      	ldr	r3, [pc, #120]	; (8009e48 <UART_SetConfig+0x904>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	08db      	lsrs	r3, r3, #3
 8009dd4:	f003 0303 	and.w	r3, r3, #3
 8009dd8:	4a1d      	ldr	r2, [pc, #116]	; (8009e50 <UART_SetConfig+0x90c>)
 8009dda:	fa22 f303 	lsr.w	r3, r2, r3
 8009dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009de0:	e00f      	b.n	8009e02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009de2:	4b1b      	ldr	r3, [pc, #108]	; (8009e50 <UART_SetConfig+0x90c>)
 8009de4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009de6:	e00c      	b.n	8009e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009de8:	4b1a      	ldr	r3, [pc, #104]	; (8009e54 <UART_SetConfig+0x910>)
 8009dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dec:	e009      	b.n	8009e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df4:	e005      	b.n	8009e02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 81ee 	beq.w	800a1e6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0e:	4a12      	ldr	r2, [pc, #72]	; (8009e58 <UART_SetConfig+0x914>)
 8009e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e14:	461a      	mov	r2, r3
 8009e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e1c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	4613      	mov	r3, r2
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	4413      	add	r3, r2
 8009e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d305      	bcc.n	8009e3a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d910      	bls.n	8009e5c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e40:	e1d1      	b.n	800a1e6 <UART_SetConfig+0xca2>
 8009e42:	bf00      	nop
 8009e44:	40011c00 	.word	0x40011c00
 8009e48:	58024400 	.word	0x58024400
 8009e4c:	58000c00 	.word	0x58000c00
 8009e50:	03d09000 	.word	0x03d09000
 8009e54:	003d0900 	.word	0x003d0900
 8009e58:	0800b6d4 	.word	0x0800b6d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5e:	2200      	movs	r2, #0
 8009e60:	60bb      	str	r3, [r7, #8]
 8009e62:	60fa      	str	r2, [r7, #12]
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	4ac0      	ldr	r2, [pc, #768]	; (800a16c <UART_SetConfig+0xc28>)
 8009e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	2200      	movs	r2, #0
 8009e72:	603b      	str	r3, [r7, #0]
 8009e74:	607a      	str	r2, [r7, #4]
 8009e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e7e:	f7f6 fa8f 	bl	80003a0 <__aeabi_uldivmod>
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	4610      	mov	r0, r2
 8009e88:	4619      	mov	r1, r3
 8009e8a:	f04f 0200 	mov.w	r2, #0
 8009e8e:	f04f 0300 	mov.w	r3, #0
 8009e92:	020b      	lsls	r3, r1, #8
 8009e94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e98:	0202      	lsls	r2, r0, #8
 8009e9a:	6979      	ldr	r1, [r7, #20]
 8009e9c:	6849      	ldr	r1, [r1, #4]
 8009e9e:	0849      	lsrs	r1, r1, #1
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	eb12 0804 	adds.w	r8, r2, r4
 8009eaa:	eb43 0905 	adc.w	r9, r3, r5
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	469a      	mov	sl, r3
 8009eb6:	4693      	mov	fp, r2
 8009eb8:	4652      	mov	r2, sl
 8009eba:	465b      	mov	r3, fp
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	f7f6 fa6e 	bl	80003a0 <__aeabi_uldivmod>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4613      	mov	r3, r2
 8009eca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ed2:	d308      	bcc.n	8009ee6 <UART_SetConfig+0x9a2>
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eda:	d204      	bcs.n	8009ee6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ee2:	60da      	str	r2, [r3, #12]
 8009ee4:	e17f      	b.n	800a1e6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009eec:	e17b      	b.n	800a1e6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	69db      	ldr	r3, [r3, #28]
 8009ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ef6:	f040 80bd 	bne.w	800a074 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009efa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009efe:	2b20      	cmp	r3, #32
 8009f00:	dc48      	bgt.n	8009f94 <UART_SetConfig+0xa50>
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	db7b      	blt.n	8009ffe <UART_SetConfig+0xaba>
 8009f06:	2b20      	cmp	r3, #32
 8009f08:	d879      	bhi.n	8009ffe <UART_SetConfig+0xaba>
 8009f0a:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <UART_SetConfig+0x9cc>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009f9b 	.word	0x08009f9b
 8009f14:	08009fa3 	.word	0x08009fa3
 8009f18:	08009fff 	.word	0x08009fff
 8009f1c:	08009fff 	.word	0x08009fff
 8009f20:	08009fab 	.word	0x08009fab
 8009f24:	08009fff 	.word	0x08009fff
 8009f28:	08009fff 	.word	0x08009fff
 8009f2c:	08009fff 	.word	0x08009fff
 8009f30:	08009fbb 	.word	0x08009fbb
 8009f34:	08009fff 	.word	0x08009fff
 8009f38:	08009fff 	.word	0x08009fff
 8009f3c:	08009fff 	.word	0x08009fff
 8009f40:	08009fff 	.word	0x08009fff
 8009f44:	08009fff 	.word	0x08009fff
 8009f48:	08009fff 	.word	0x08009fff
 8009f4c:	08009fff 	.word	0x08009fff
 8009f50:	08009fcb 	.word	0x08009fcb
 8009f54:	08009fff 	.word	0x08009fff
 8009f58:	08009fff 	.word	0x08009fff
 8009f5c:	08009fff 	.word	0x08009fff
 8009f60:	08009fff 	.word	0x08009fff
 8009f64:	08009fff 	.word	0x08009fff
 8009f68:	08009fff 	.word	0x08009fff
 8009f6c:	08009fff 	.word	0x08009fff
 8009f70:	08009fff 	.word	0x08009fff
 8009f74:	08009fff 	.word	0x08009fff
 8009f78:	08009fff 	.word	0x08009fff
 8009f7c:	08009fff 	.word	0x08009fff
 8009f80:	08009fff 	.word	0x08009fff
 8009f84:	08009fff 	.word	0x08009fff
 8009f88:	08009fff 	.word	0x08009fff
 8009f8c:	08009fff 	.word	0x08009fff
 8009f90:	08009ff1 	.word	0x08009ff1
 8009f94:	2b40      	cmp	r3, #64	; 0x40
 8009f96:	d02e      	beq.n	8009ff6 <UART_SetConfig+0xab2>
 8009f98:	e031      	b.n	8009ffe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f9a:	f7fb fcb1 	bl	8005900 <HAL_RCC_GetPCLK1Freq>
 8009f9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fa0:	e033      	b.n	800a00a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fa2:	f7fb fcc3 	bl	800592c <HAL_RCC_GetPCLK2Freq>
 8009fa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fa8:	e02f      	b.n	800a00a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fc fea6 	bl	8006d00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fb8:	e027      	b.n	800a00a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fba:	f107 0318 	add.w	r3, r7, #24
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fc fff2 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fc8:	e01f      	b.n	800a00a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fca:	4b69      	ldr	r3, [pc, #420]	; (800a170 <UART_SetConfig+0xc2c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0320 	and.w	r3, r3, #32
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d009      	beq.n	8009fea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fd6:	4b66      	ldr	r3, [pc, #408]	; (800a170 <UART_SetConfig+0xc2c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	08db      	lsrs	r3, r3, #3
 8009fdc:	f003 0303 	and.w	r3, r3, #3
 8009fe0:	4a64      	ldr	r2, [pc, #400]	; (800a174 <UART_SetConfig+0xc30>)
 8009fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fe8:	e00f      	b.n	800a00a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009fea:	4b62      	ldr	r3, [pc, #392]	; (800a174 <UART_SetConfig+0xc30>)
 8009fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fee:	e00c      	b.n	800a00a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ff0:	4b61      	ldr	r3, [pc, #388]	; (800a178 <UART_SetConfig+0xc34>)
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff4:	e009      	b.n	800a00a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ffc:	e005      	b.n	800a00a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009ffe:	2300      	movs	r3, #0
 800a000:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f000 80ea 	beq.w	800a1e6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a016:	4a55      	ldr	r2, [pc, #340]	; (800a16c <UART_SetConfig+0xc28>)
 800a018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a01c:	461a      	mov	r2, r3
 800a01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a020:	fbb3 f3f2 	udiv	r3, r3, r2
 800a024:	005a      	lsls	r2, r3, #1
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	085b      	lsrs	r3, r3, #1
 800a02c:	441a      	add	r2, r3
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	fbb2 f3f3 	udiv	r3, r2, r3
 800a036:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03a:	2b0f      	cmp	r3, #15
 800a03c:	d916      	bls.n	800a06c <UART_SetConfig+0xb28>
 800a03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a044:	d212      	bcs.n	800a06c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a048:	b29b      	uxth	r3, r3
 800a04a:	f023 030f 	bic.w	r3, r3, #15
 800a04e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a052:	085b      	lsrs	r3, r3, #1
 800a054:	b29b      	uxth	r3, r3
 800a056:	f003 0307 	and.w	r3, r3, #7
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a05e:	4313      	orrs	r3, r2
 800a060:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a068:	60da      	str	r2, [r3, #12]
 800a06a:	e0bc      	b.n	800a1e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a072:	e0b8      	b.n	800a1e6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a074:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a078:	2b20      	cmp	r3, #32
 800a07a:	dc4b      	bgt.n	800a114 <UART_SetConfig+0xbd0>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f2c0 8087 	blt.w	800a190 <UART_SetConfig+0xc4c>
 800a082:	2b20      	cmp	r3, #32
 800a084:	f200 8084 	bhi.w	800a190 <UART_SetConfig+0xc4c>
 800a088:	a201      	add	r2, pc, #4	; (adr r2, 800a090 <UART_SetConfig+0xb4c>)
 800a08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08e:	bf00      	nop
 800a090:	0800a11b 	.word	0x0800a11b
 800a094:	0800a123 	.word	0x0800a123
 800a098:	0800a191 	.word	0x0800a191
 800a09c:	0800a191 	.word	0x0800a191
 800a0a0:	0800a12b 	.word	0x0800a12b
 800a0a4:	0800a191 	.word	0x0800a191
 800a0a8:	0800a191 	.word	0x0800a191
 800a0ac:	0800a191 	.word	0x0800a191
 800a0b0:	0800a13b 	.word	0x0800a13b
 800a0b4:	0800a191 	.word	0x0800a191
 800a0b8:	0800a191 	.word	0x0800a191
 800a0bc:	0800a191 	.word	0x0800a191
 800a0c0:	0800a191 	.word	0x0800a191
 800a0c4:	0800a191 	.word	0x0800a191
 800a0c8:	0800a191 	.word	0x0800a191
 800a0cc:	0800a191 	.word	0x0800a191
 800a0d0:	0800a14b 	.word	0x0800a14b
 800a0d4:	0800a191 	.word	0x0800a191
 800a0d8:	0800a191 	.word	0x0800a191
 800a0dc:	0800a191 	.word	0x0800a191
 800a0e0:	0800a191 	.word	0x0800a191
 800a0e4:	0800a191 	.word	0x0800a191
 800a0e8:	0800a191 	.word	0x0800a191
 800a0ec:	0800a191 	.word	0x0800a191
 800a0f0:	0800a191 	.word	0x0800a191
 800a0f4:	0800a191 	.word	0x0800a191
 800a0f8:	0800a191 	.word	0x0800a191
 800a0fc:	0800a191 	.word	0x0800a191
 800a100:	0800a191 	.word	0x0800a191
 800a104:	0800a191 	.word	0x0800a191
 800a108:	0800a191 	.word	0x0800a191
 800a10c:	0800a191 	.word	0x0800a191
 800a110:	0800a183 	.word	0x0800a183
 800a114:	2b40      	cmp	r3, #64	; 0x40
 800a116:	d037      	beq.n	800a188 <UART_SetConfig+0xc44>
 800a118:	e03a      	b.n	800a190 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a11a:	f7fb fbf1 	bl	8005900 <HAL_RCC_GetPCLK1Freq>
 800a11e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a120:	e03c      	b.n	800a19c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a122:	f7fb fc03 	bl	800592c <HAL_RCC_GetPCLK2Freq>
 800a126:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a128:	e038      	b.n	800a19c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a12a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fc fde6 	bl	8006d00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a138:	e030      	b.n	800a19c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a13a:	f107 0318 	add.w	r3, r7, #24
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fc ff32 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a148:	e028      	b.n	800a19c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a14a:	4b09      	ldr	r3, [pc, #36]	; (800a170 <UART_SetConfig+0xc2c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0320 	and.w	r3, r3, #32
 800a152:	2b00      	cmp	r3, #0
 800a154:	d012      	beq.n	800a17c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a156:	4b06      	ldr	r3, [pc, #24]	; (800a170 <UART_SetConfig+0xc2c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	08db      	lsrs	r3, r3, #3
 800a15c:	f003 0303 	and.w	r3, r3, #3
 800a160:	4a04      	ldr	r2, [pc, #16]	; (800a174 <UART_SetConfig+0xc30>)
 800a162:	fa22 f303 	lsr.w	r3, r2, r3
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a168:	e018      	b.n	800a19c <UART_SetConfig+0xc58>
 800a16a:	bf00      	nop
 800a16c:	0800b6d4 	.word	0x0800b6d4
 800a170:	58024400 	.word	0x58024400
 800a174:	03d09000 	.word	0x03d09000
 800a178:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a17c:	4b24      	ldr	r3, [pc, #144]	; (800a210 <UART_SetConfig+0xccc>)
 800a17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a180:	e00c      	b.n	800a19c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a182:	4b24      	ldr	r3, [pc, #144]	; (800a214 <UART_SetConfig+0xcd0>)
 800a184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a186:	e009      	b.n	800a19c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a18e:	e005      	b.n	800a19c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a190:	2300      	movs	r3, #0
 800a192:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a19a:	bf00      	nop
    }

    if (pclk != 0U)
 800a19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d021      	beq.n	800a1e6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	4a1c      	ldr	r2, [pc, #112]	; (800a218 <UART_SetConfig+0xcd4>)
 800a1a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	085b      	lsrs	r3, r3, #1
 800a1ba:	441a      	add	r2, r3
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c8:	2b0f      	cmp	r3, #15
 800a1ca:	d909      	bls.n	800a1e0 <UART_SetConfig+0xc9c>
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1d2:	d205      	bcs.n	800a1e0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	60da      	str	r2, [r3, #12]
 800a1de:	e002      	b.n	800a1e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	2200      	movs	r2, #0
 800a200:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a202:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a206:	4618      	mov	r0, r3
 800a208:	3748      	adds	r7, #72	; 0x48
 800a20a:	46bd      	mov	sp, r7
 800a20c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a210:	03d09000 	.word	0x03d09000
 800a214:	003d0900 	.word	0x003d0900
 800a218:	0800b6d4 	.word	0x0800b6d4

0800a21c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00a      	beq.n	800a246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	430a      	orrs	r2, r1
 800a244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24a:	f003 0302 	and.w	r3, r3, #2
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00a      	beq.n	800a268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	430a      	orrs	r2, r1
 800a266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00a      	beq.n	800a28a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28e:	f003 0308 	and.w	r3, r3, #8
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b0:	f003 0310 	and.w	r3, r3, #16
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00a      	beq.n	800a2ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d2:	f003 0320 	and.w	r3, r3, #32
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00a      	beq.n	800a2f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	430a      	orrs	r2, r1
 800a2ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d01a      	beq.n	800a332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a31a:	d10a      	bne.n	800a332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	430a      	orrs	r2, r1
 800a330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00a      	beq.n	800a354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	430a      	orrs	r2, r1
 800a352:	605a      	str	r2, [r3, #4]
  }
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b098      	sub	sp, #96	; 0x60
 800a364:	af02      	add	r7, sp, #8
 800a366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a370:	f7f8 fa94 	bl	800289c <HAL_GetTick>
 800a374:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0308 	and.w	r3, r3, #8
 800a380:	2b08      	cmp	r3, #8
 800a382:	d12f      	bne.n	800a3e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a384:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a38c:	2200      	movs	r2, #0
 800a38e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f88e 	bl	800a4b4 <UART_WaitOnFlagUntilTimeout>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d022      	beq.n	800a3e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a6:	e853 3f00 	ldrex	r3, [r3]
 800a3aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3b2:	653b      	str	r3, [r7, #80]	; 0x50
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3bc:	647b      	str	r3, [r7, #68]	; 0x44
 800a3be:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e6      	bne.n	800a39e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e063      	b.n	800a4ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0304 	and.w	r3, r3, #4
 800a3ee:	2b04      	cmp	r3, #4
 800a3f0:	d149      	bne.n	800a486 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f857 	bl	800a4b4 <UART_WaitOnFlagUntilTimeout>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d03c      	beq.n	800a486 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	e853 3f00 	ldrex	r3, [r3]
 800a418:	623b      	str	r3, [r7, #32]
   return(result);
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a420:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	461a      	mov	r2, r3
 800a428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a42a:	633b      	str	r3, [r7, #48]	; 0x30
 800a42c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a432:	e841 2300 	strex	r3, r2, [r1]
 800a436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1e6      	bne.n	800a40c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3308      	adds	r3, #8
 800a444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	e853 3f00 	ldrex	r3, [r3]
 800a44c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f023 0301 	bic.w	r3, r3, #1
 800a454:	64bb      	str	r3, [r7, #72]	; 0x48
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3308      	adds	r3, #8
 800a45c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a45e:	61fa      	str	r2, [r7, #28]
 800a460:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a462:	69b9      	ldr	r1, [r7, #24]
 800a464:	69fa      	ldr	r2, [r7, #28]
 800a466:	e841 2300 	strex	r3, r2, [r1]
 800a46a:	617b      	str	r3, [r7, #20]
   return(result);
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1e5      	bne.n	800a43e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2220      	movs	r2, #32
 800a476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a482:	2303      	movs	r3, #3
 800a484:	e012      	b.n	800a4ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2220      	movs	r2, #32
 800a48a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2220      	movs	r2, #32
 800a492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3758      	adds	r7, #88	; 0x58
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4c4:	e049      	b.n	800a55a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4cc:	d045      	beq.n	800a55a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ce:	f7f8 f9e5 	bl	800289c <HAL_GetTick>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d302      	bcc.n	800a4e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e048      	b.n	800a57a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0304 	and.w	r3, r3, #4
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d031      	beq.n	800a55a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b08      	cmp	r3, #8
 800a502:	d110      	bne.n	800a526 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2208      	movs	r2, #8
 800a50a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f000 f839 	bl	800a584 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2208      	movs	r2, #8
 800a516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e029      	b.n	800a57a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	69db      	ldr	r3, [r3, #28]
 800a52c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a534:	d111      	bne.n	800a55a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a53e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 f81f 	bl	800a584 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2220      	movs	r2, #32
 800a54a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e00f      	b.n	800a57a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	69da      	ldr	r2, [r3, #28]
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	4013      	ands	r3, r2
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	429a      	cmp	r2, r3
 800a568:	bf0c      	ite	eq
 800a56a:	2301      	moveq	r3, #1
 800a56c:	2300      	movne	r3, #0
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	461a      	mov	r2, r3
 800a572:	79fb      	ldrb	r3, [r7, #7]
 800a574:	429a      	cmp	r2, r3
 800a576:	d0a6      	beq.n	800a4c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
	...

0800a584 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a584:	b480      	push	{r7}
 800a586:	b095      	sub	sp, #84	; 0x54
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a594:	e853 3f00 	ldrex	r3, [r3]
 800a598:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5aa:	643b      	str	r3, [r7, #64]	; 0x40
 800a5ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5b2:	e841 2300 	strex	r3, r2, [r1]
 800a5b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1e6      	bne.n	800a58c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3308      	adds	r3, #8
 800a5c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	e853 3f00 	ldrex	r3, [r3]
 800a5cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5ce:	69fa      	ldr	r2, [r7, #28]
 800a5d0:	4b1e      	ldr	r3, [pc, #120]	; (800a64c <UART_EndRxTransfer+0xc8>)
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3308      	adds	r3, #8
 800a5dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e5      	bne.n	800a5be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d118      	bne.n	800a62c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	e853 3f00 	ldrex	r3, [r3]
 800a606:	60bb      	str	r3, [r7, #8]
   return(result);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f023 0310 	bic.w	r3, r3, #16
 800a60e:	647b      	str	r3, [r7, #68]	; 0x44
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	461a      	mov	r2, r3
 800a616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a618:	61bb      	str	r3, [r7, #24]
 800a61a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61c:	6979      	ldr	r1, [r7, #20]
 800a61e:	69ba      	ldr	r2, [r7, #24]
 800a620:	e841 2300 	strex	r3, r2, [r1]
 800a624:	613b      	str	r3, [r7, #16]
   return(result);
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1e6      	bne.n	800a5fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2220      	movs	r2, #32
 800a630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a640:	bf00      	nop
 800a642:	3754      	adds	r7, #84	; 0x54
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	effffffe 	.word	0xeffffffe

0800a650 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d101      	bne.n	800a666 <HAL_UARTEx_DisableFifoMode+0x16>
 800a662:	2302      	movs	r3, #2
 800a664:	e027      	b.n	800a6b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2224      	movs	r2, #36	; 0x24
 800a672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0201 	bic.w	r2, r2, #1
 800a68c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a694:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2220      	movs	r2, #32
 800a6a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d101      	bne.n	800a6da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	e02d      	b.n	800a736 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2224      	movs	r2, #36	; 0x24
 800a6e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f022 0201 	bic.w	r2, r2, #1
 800a700:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f850 	bl	800a7bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2220      	movs	r2, #32
 800a728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d101      	bne.n	800a756 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a752:	2302      	movs	r3, #2
 800a754:	e02d      	b.n	800a7b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2224      	movs	r2, #36	; 0x24
 800a762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f022 0201 	bic.w	r2, r2, #1
 800a77c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f812 	bl	800a7bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b085      	sub	sp, #20
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d108      	bne.n	800a7de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7dc:	e031      	b.n	800a842 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7de:	2310      	movs	r3, #16
 800a7e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7e2:	2310      	movs	r3, #16
 800a7e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	0e5b      	lsrs	r3, r3, #25
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f003 0307 	and.w	r3, r3, #7
 800a7f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	0f5b      	lsrs	r3, r3, #29
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	f003 0307 	and.w	r3, r3, #7
 800a804:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	7b3a      	ldrb	r2, [r7, #12]
 800a80a:	4911      	ldr	r1, [pc, #68]	; (800a850 <UARTEx_SetNbDataToProcess+0x94>)
 800a80c:	5c8a      	ldrb	r2, [r1, r2]
 800a80e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a812:	7b3a      	ldrb	r2, [r7, #12]
 800a814:	490f      	ldr	r1, [pc, #60]	; (800a854 <UARTEx_SetNbDataToProcess+0x98>)
 800a816:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a818:	fb93 f3f2 	sdiv	r3, r3, r2
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a824:	7bfb      	ldrb	r3, [r7, #15]
 800a826:	7b7a      	ldrb	r2, [r7, #13]
 800a828:	4909      	ldr	r1, [pc, #36]	; (800a850 <UARTEx_SetNbDataToProcess+0x94>)
 800a82a:	5c8a      	ldrb	r2, [r1, r2]
 800a82c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a830:	7b7a      	ldrb	r2, [r7, #13]
 800a832:	4908      	ldr	r1, [pc, #32]	; (800a854 <UARTEx_SetNbDataToProcess+0x98>)
 800a834:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a836:	fb93 f3f2 	sdiv	r3, r3, r2
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a842:	bf00      	nop
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	0800b6ec 	.word	0x0800b6ec
 800a854:	0800b6f4 	.word	0x0800b6f4

0800a858 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a85c:	4904      	ldr	r1, [pc, #16]	; (800a870 <MX_FATFS_Init+0x18>)
 800a85e:	4805      	ldr	r0, [pc, #20]	; (800a874 <MX_FATFS_Init+0x1c>)
 800a860:	f000 f8b2 	bl	800a9c8 <FATFS_LinkDriver>
 800a864:	4603      	mov	r3, r0
 800a866:	461a      	mov	r2, r3
 800a868:	4b03      	ldr	r3, [pc, #12]	; (800a878 <MX_FATFS_Init+0x20>)
 800a86a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a86c:	bf00      	nop
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	2400042c 	.word	0x2400042c
 800a874:	24000014 	.word	0x24000014
 800a878:	24000428 	.word	0x24000428

0800a87c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 800a886:	79fb      	ldrb	r3, [r7, #7]
 800a888:	4618      	mov	r0, r3
 800a88a:	f7f6 f8c1 	bl	8000a10 <SD_disk_initialize>
 800a88e:	4603      	mov	r3, r0
 800a890:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a892:	4618      	mov	r0, r3
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 800a8a4:	79fb      	ldrb	r3, [r7, #7]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7f6 f99c 	bl	8000be4 <SD_disk_status>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	607a      	str	r2, [r7, #4]
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 800a8c8:	7bf8      	ldrb	r0, [r7, #15]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	68b9      	ldr	r1, [r7, #8]
 800a8d0:	f7f6 f99e 	bl	8000c10 <SD_disk_read>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60b9      	str	r1, [r7, #8]
 800a8e8:	607a      	str	r2, [r7, #4]
 800a8ea:	603b      	str	r3, [r7, #0]
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800a8f0:	7bf8      	ldrb	r0, [r7, #15]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	68b9      	ldr	r1, [r7, #8]
 800a8f8:	f7f6 f9f4 	bl	8000ce4 <SD_disk_write>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	603a      	str	r2, [r7, #0]
 800a912:	71fb      	strb	r3, [r7, #7]
 800a914:	460b      	mov	r3, r1
 800a916:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a918:	79fb      	ldrb	r3, [r7, #7]
 800a91a:	79b9      	ldrb	r1, [r7, #6]
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	4618      	mov	r0, r3
 800a920:	f7f6 fa64 	bl	8000dec <SD_disk_ioctl>
 800a924:	4603      	mov	r3, r0
 800a926:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	4613      	mov	r3, r2
 800a93c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a93e:	2301      	movs	r3, #1
 800a940:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a946:	4b1f      	ldr	r3, [pc, #124]	; (800a9c4 <FATFS_LinkDriverEx+0x94>)
 800a948:	7a5b      	ldrb	r3, [r3, #9]
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d131      	bne.n	800a9b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a950:	4b1c      	ldr	r3, [pc, #112]	; (800a9c4 <FATFS_LinkDriverEx+0x94>)
 800a952:	7a5b      	ldrb	r3, [r3, #9]
 800a954:	b2db      	uxtb	r3, r3
 800a956:	461a      	mov	r2, r3
 800a958:	4b1a      	ldr	r3, [pc, #104]	; (800a9c4 <FATFS_LinkDriverEx+0x94>)
 800a95a:	2100      	movs	r1, #0
 800a95c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a95e:	4b19      	ldr	r3, [pc, #100]	; (800a9c4 <FATFS_LinkDriverEx+0x94>)
 800a960:	7a5b      	ldrb	r3, [r3, #9]
 800a962:	b2db      	uxtb	r3, r3
 800a964:	4a17      	ldr	r2, [pc, #92]	; (800a9c4 <FATFS_LinkDriverEx+0x94>)
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a96e:	4b15      	ldr	r3, [pc, #84]	; (800a9c4 <FATFS_LinkDriverEx+0x94>)
 800a970:	7a5b      	ldrb	r3, [r3, #9]
 800a972:	b2db      	uxtb	r3, r3
 800a974:	461a      	mov	r2, r3
 800a976:	4b13      	ldr	r3, [pc, #76]	; (800a9c4 <FATFS_LinkDriverEx+0x94>)
 800a978:	4413      	add	r3, r2
 800a97a:	79fa      	ldrb	r2, [r7, #7]
 800a97c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a97e:	4b11      	ldr	r3, [pc, #68]	; (800a9c4 <FATFS_LinkDriverEx+0x94>)
 800a980:	7a5b      	ldrb	r3, [r3, #9]
 800a982:	b2db      	uxtb	r3, r3
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	b2d1      	uxtb	r1, r2
 800a988:	4a0e      	ldr	r2, [pc, #56]	; (800a9c4 <FATFS_LinkDriverEx+0x94>)
 800a98a:	7251      	strb	r1, [r2, #9]
 800a98c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a98e:	7dbb      	ldrb	r3, [r7, #22]
 800a990:	3330      	adds	r3, #48	; 0x30
 800a992:	b2da      	uxtb	r2, r3
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	3301      	adds	r3, #1
 800a99c:	223a      	movs	r2, #58	; 0x3a
 800a99e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	3302      	adds	r3, #2
 800a9a4:	222f      	movs	r2, #47	; 0x2f
 800a9a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	3303      	adds	r3, #3
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	371c      	adds	r7, #28
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	24000430 	.word	0x24000430

0800a9c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff ffaa 	bl	800a930 <FATFS_LinkDriverEx>
 800a9dc:	4603      	mov	r3, r0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
	...

0800a9e8 <sniprintf>:
 800a9e8:	b40c      	push	{r2, r3}
 800a9ea:	b530      	push	{r4, r5, lr}
 800a9ec:	4b17      	ldr	r3, [pc, #92]	; (800aa4c <sniprintf+0x64>)
 800a9ee:	1e0c      	subs	r4, r1, #0
 800a9f0:	681d      	ldr	r5, [r3, #0]
 800a9f2:	b09d      	sub	sp, #116	; 0x74
 800a9f4:	da08      	bge.n	800aa08 <sniprintf+0x20>
 800a9f6:	238b      	movs	r3, #139	; 0x8b
 800a9f8:	602b      	str	r3, [r5, #0]
 800a9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a9fe:	b01d      	add	sp, #116	; 0x74
 800aa00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa04:	b002      	add	sp, #8
 800aa06:	4770      	bx	lr
 800aa08:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aa0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa10:	bf14      	ite	ne
 800aa12:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa16:	4623      	moveq	r3, r4
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	9307      	str	r3, [sp, #28]
 800aa1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa20:	9002      	str	r0, [sp, #8]
 800aa22:	9006      	str	r0, [sp, #24]
 800aa24:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa2a:	ab21      	add	r3, sp, #132	; 0x84
 800aa2c:	a902      	add	r1, sp, #8
 800aa2e:	4628      	mov	r0, r5
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	f000 f9fb 	bl	800ae2c <_svfiprintf_r>
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	bfbc      	itt	lt
 800aa3a:	238b      	movlt	r3, #139	; 0x8b
 800aa3c:	602b      	strlt	r3, [r5, #0]
 800aa3e:	2c00      	cmp	r4, #0
 800aa40:	d0dd      	beq.n	800a9fe <sniprintf+0x16>
 800aa42:	9b02      	ldr	r3, [sp, #8]
 800aa44:	2200      	movs	r2, #0
 800aa46:	701a      	strb	r2, [r3, #0]
 800aa48:	e7d9      	b.n	800a9fe <sniprintf+0x16>
 800aa4a:	bf00      	nop
 800aa4c:	24000074 	.word	0x24000074

0800aa50 <siprintf>:
 800aa50:	b40e      	push	{r1, r2, r3}
 800aa52:	b500      	push	{lr}
 800aa54:	b09c      	sub	sp, #112	; 0x70
 800aa56:	ab1d      	add	r3, sp, #116	; 0x74
 800aa58:	9002      	str	r0, [sp, #8]
 800aa5a:	9006      	str	r0, [sp, #24]
 800aa5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa60:	4809      	ldr	r0, [pc, #36]	; (800aa88 <siprintf+0x38>)
 800aa62:	9107      	str	r1, [sp, #28]
 800aa64:	9104      	str	r1, [sp, #16]
 800aa66:	4909      	ldr	r1, [pc, #36]	; (800aa8c <siprintf+0x3c>)
 800aa68:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa6c:	9105      	str	r1, [sp, #20]
 800aa6e:	6800      	ldr	r0, [r0, #0]
 800aa70:	9301      	str	r3, [sp, #4]
 800aa72:	a902      	add	r1, sp, #8
 800aa74:	f000 f9da 	bl	800ae2c <_svfiprintf_r>
 800aa78:	9b02      	ldr	r3, [sp, #8]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	b01c      	add	sp, #112	; 0x70
 800aa80:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa84:	b003      	add	sp, #12
 800aa86:	4770      	bx	lr
 800aa88:	24000074 	.word	0x24000074
 800aa8c:	ffff0208 	.word	0xffff0208

0800aa90 <_vsniprintf_r>:
 800aa90:	b530      	push	{r4, r5, lr}
 800aa92:	4614      	mov	r4, r2
 800aa94:	2c00      	cmp	r4, #0
 800aa96:	b09b      	sub	sp, #108	; 0x6c
 800aa98:	4605      	mov	r5, r0
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	da05      	bge.n	800aaaa <_vsniprintf_r+0x1a>
 800aa9e:	238b      	movs	r3, #139	; 0x8b
 800aaa0:	6003      	str	r3, [r0, #0]
 800aaa2:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa6:	b01b      	add	sp, #108	; 0x6c
 800aaa8:	bd30      	pop	{r4, r5, pc}
 800aaaa:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aaae:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aab2:	bf14      	ite	ne
 800aab4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aab8:	4623      	moveq	r3, r4
 800aaba:	9302      	str	r3, [sp, #8]
 800aabc:	9305      	str	r3, [sp, #20]
 800aabe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aac2:	9100      	str	r1, [sp, #0]
 800aac4:	9104      	str	r1, [sp, #16]
 800aac6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800aaca:	4669      	mov	r1, sp
 800aacc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aace:	f000 f9ad 	bl	800ae2c <_svfiprintf_r>
 800aad2:	1c43      	adds	r3, r0, #1
 800aad4:	bfbc      	itt	lt
 800aad6:	238b      	movlt	r3, #139	; 0x8b
 800aad8:	602b      	strlt	r3, [r5, #0]
 800aada:	2c00      	cmp	r4, #0
 800aadc:	d0e3      	beq.n	800aaa6 <_vsniprintf_r+0x16>
 800aade:	9b00      	ldr	r3, [sp, #0]
 800aae0:	2200      	movs	r2, #0
 800aae2:	701a      	strb	r2, [r3, #0]
 800aae4:	e7df      	b.n	800aaa6 <_vsniprintf_r+0x16>
	...

0800aae8 <vsniprintf>:
 800aae8:	b507      	push	{r0, r1, r2, lr}
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	4613      	mov	r3, r2
 800aaee:	460a      	mov	r2, r1
 800aaf0:	4601      	mov	r1, r0
 800aaf2:	4803      	ldr	r0, [pc, #12]	; (800ab00 <vsniprintf+0x18>)
 800aaf4:	6800      	ldr	r0, [r0, #0]
 800aaf6:	f7ff ffcb 	bl	800aa90 <_vsniprintf_r>
 800aafa:	b003      	add	sp, #12
 800aafc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab00:	24000074 	.word	0x24000074

0800ab04 <memset>:
 800ab04:	4402      	add	r2, r0
 800ab06:	4603      	mov	r3, r0
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d100      	bne.n	800ab0e <memset+0xa>
 800ab0c:	4770      	bx	lr
 800ab0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab12:	e7f9      	b.n	800ab08 <memset+0x4>

0800ab14 <__errno>:
 800ab14:	4b01      	ldr	r3, [pc, #4]	; (800ab1c <__errno+0x8>)
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	24000074 	.word	0x24000074

0800ab20 <__libc_init_array>:
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	4d0d      	ldr	r5, [pc, #52]	; (800ab58 <__libc_init_array+0x38>)
 800ab24:	4c0d      	ldr	r4, [pc, #52]	; (800ab5c <__libc_init_array+0x3c>)
 800ab26:	1b64      	subs	r4, r4, r5
 800ab28:	10a4      	asrs	r4, r4, #2
 800ab2a:	2600      	movs	r6, #0
 800ab2c:	42a6      	cmp	r6, r4
 800ab2e:	d109      	bne.n	800ab44 <__libc_init_array+0x24>
 800ab30:	4d0b      	ldr	r5, [pc, #44]	; (800ab60 <__libc_init_array+0x40>)
 800ab32:	4c0c      	ldr	r4, [pc, #48]	; (800ab64 <__libc_init_array+0x44>)
 800ab34:	f000 fc6a 	bl	800b40c <_init>
 800ab38:	1b64      	subs	r4, r4, r5
 800ab3a:	10a4      	asrs	r4, r4, #2
 800ab3c:	2600      	movs	r6, #0
 800ab3e:	42a6      	cmp	r6, r4
 800ab40:	d105      	bne.n	800ab4e <__libc_init_array+0x2e>
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab48:	4798      	blx	r3
 800ab4a:	3601      	adds	r6, #1
 800ab4c:	e7ee      	b.n	800ab2c <__libc_init_array+0xc>
 800ab4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab52:	4798      	blx	r3
 800ab54:	3601      	adds	r6, #1
 800ab56:	e7f2      	b.n	800ab3e <__libc_init_array+0x1e>
 800ab58:	0800b738 	.word	0x0800b738
 800ab5c:	0800b738 	.word	0x0800b738
 800ab60:	0800b738 	.word	0x0800b738
 800ab64:	0800b73c 	.word	0x0800b73c

0800ab68 <__retarget_lock_acquire_recursive>:
 800ab68:	4770      	bx	lr

0800ab6a <__retarget_lock_release_recursive>:
 800ab6a:	4770      	bx	lr

0800ab6c <memcpy>:
 800ab6c:	440a      	add	r2, r1
 800ab6e:	4291      	cmp	r1, r2
 800ab70:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab74:	d100      	bne.n	800ab78 <memcpy+0xc>
 800ab76:	4770      	bx	lr
 800ab78:	b510      	push	{r4, lr}
 800ab7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab82:	4291      	cmp	r1, r2
 800ab84:	d1f9      	bne.n	800ab7a <memcpy+0xe>
 800ab86:	bd10      	pop	{r4, pc}

0800ab88 <_free_r>:
 800ab88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab8a:	2900      	cmp	r1, #0
 800ab8c:	d044      	beq.n	800ac18 <_free_r+0x90>
 800ab8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab92:	9001      	str	r0, [sp, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f1a1 0404 	sub.w	r4, r1, #4
 800ab9a:	bfb8      	it	lt
 800ab9c:	18e4      	addlt	r4, r4, r3
 800ab9e:	f000 f8df 	bl	800ad60 <__malloc_lock>
 800aba2:	4a1e      	ldr	r2, [pc, #120]	; (800ac1c <_free_r+0x94>)
 800aba4:	9801      	ldr	r0, [sp, #4]
 800aba6:	6813      	ldr	r3, [r2, #0]
 800aba8:	b933      	cbnz	r3, 800abb8 <_free_r+0x30>
 800abaa:	6063      	str	r3, [r4, #4]
 800abac:	6014      	str	r4, [r2, #0]
 800abae:	b003      	add	sp, #12
 800abb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abb4:	f000 b8da 	b.w	800ad6c <__malloc_unlock>
 800abb8:	42a3      	cmp	r3, r4
 800abba:	d908      	bls.n	800abce <_free_r+0x46>
 800abbc:	6825      	ldr	r5, [r4, #0]
 800abbe:	1961      	adds	r1, r4, r5
 800abc0:	428b      	cmp	r3, r1
 800abc2:	bf01      	itttt	eq
 800abc4:	6819      	ldreq	r1, [r3, #0]
 800abc6:	685b      	ldreq	r3, [r3, #4]
 800abc8:	1949      	addeq	r1, r1, r5
 800abca:	6021      	streq	r1, [r4, #0]
 800abcc:	e7ed      	b.n	800abaa <_free_r+0x22>
 800abce:	461a      	mov	r2, r3
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	b10b      	cbz	r3, 800abd8 <_free_r+0x50>
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	d9fa      	bls.n	800abce <_free_r+0x46>
 800abd8:	6811      	ldr	r1, [r2, #0]
 800abda:	1855      	adds	r5, r2, r1
 800abdc:	42a5      	cmp	r5, r4
 800abde:	d10b      	bne.n	800abf8 <_free_r+0x70>
 800abe0:	6824      	ldr	r4, [r4, #0]
 800abe2:	4421      	add	r1, r4
 800abe4:	1854      	adds	r4, r2, r1
 800abe6:	42a3      	cmp	r3, r4
 800abe8:	6011      	str	r1, [r2, #0]
 800abea:	d1e0      	bne.n	800abae <_free_r+0x26>
 800abec:	681c      	ldr	r4, [r3, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	6053      	str	r3, [r2, #4]
 800abf2:	440c      	add	r4, r1
 800abf4:	6014      	str	r4, [r2, #0]
 800abf6:	e7da      	b.n	800abae <_free_r+0x26>
 800abf8:	d902      	bls.n	800ac00 <_free_r+0x78>
 800abfa:	230c      	movs	r3, #12
 800abfc:	6003      	str	r3, [r0, #0]
 800abfe:	e7d6      	b.n	800abae <_free_r+0x26>
 800ac00:	6825      	ldr	r5, [r4, #0]
 800ac02:	1961      	adds	r1, r4, r5
 800ac04:	428b      	cmp	r3, r1
 800ac06:	bf04      	itt	eq
 800ac08:	6819      	ldreq	r1, [r3, #0]
 800ac0a:	685b      	ldreq	r3, [r3, #4]
 800ac0c:	6063      	str	r3, [r4, #4]
 800ac0e:	bf04      	itt	eq
 800ac10:	1949      	addeq	r1, r1, r5
 800ac12:	6021      	streq	r1, [r4, #0]
 800ac14:	6054      	str	r4, [r2, #4]
 800ac16:	e7ca      	b.n	800abae <_free_r+0x26>
 800ac18:	b003      	add	sp, #12
 800ac1a:	bd30      	pop	{r4, r5, pc}
 800ac1c:	2400057c 	.word	0x2400057c

0800ac20 <sbrk_aligned>:
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	4e0e      	ldr	r6, [pc, #56]	; (800ac5c <sbrk_aligned+0x3c>)
 800ac24:	460c      	mov	r4, r1
 800ac26:	6831      	ldr	r1, [r6, #0]
 800ac28:	4605      	mov	r5, r0
 800ac2a:	b911      	cbnz	r1, 800ac32 <sbrk_aligned+0x12>
 800ac2c:	f000 fba6 	bl	800b37c <_sbrk_r>
 800ac30:	6030      	str	r0, [r6, #0]
 800ac32:	4621      	mov	r1, r4
 800ac34:	4628      	mov	r0, r5
 800ac36:	f000 fba1 	bl	800b37c <_sbrk_r>
 800ac3a:	1c43      	adds	r3, r0, #1
 800ac3c:	d00a      	beq.n	800ac54 <sbrk_aligned+0x34>
 800ac3e:	1cc4      	adds	r4, r0, #3
 800ac40:	f024 0403 	bic.w	r4, r4, #3
 800ac44:	42a0      	cmp	r0, r4
 800ac46:	d007      	beq.n	800ac58 <sbrk_aligned+0x38>
 800ac48:	1a21      	subs	r1, r4, r0
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f000 fb96 	bl	800b37c <_sbrk_r>
 800ac50:	3001      	adds	r0, #1
 800ac52:	d101      	bne.n	800ac58 <sbrk_aligned+0x38>
 800ac54:	f04f 34ff 	mov.w	r4, #4294967295
 800ac58:	4620      	mov	r0, r4
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	24000580 	.word	0x24000580

0800ac60 <_malloc_r>:
 800ac60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac64:	1ccd      	adds	r5, r1, #3
 800ac66:	f025 0503 	bic.w	r5, r5, #3
 800ac6a:	3508      	adds	r5, #8
 800ac6c:	2d0c      	cmp	r5, #12
 800ac6e:	bf38      	it	cc
 800ac70:	250c      	movcc	r5, #12
 800ac72:	2d00      	cmp	r5, #0
 800ac74:	4607      	mov	r7, r0
 800ac76:	db01      	blt.n	800ac7c <_malloc_r+0x1c>
 800ac78:	42a9      	cmp	r1, r5
 800ac7a:	d905      	bls.n	800ac88 <_malloc_r+0x28>
 800ac7c:	230c      	movs	r3, #12
 800ac7e:	603b      	str	r3, [r7, #0]
 800ac80:	2600      	movs	r6, #0
 800ac82:	4630      	mov	r0, r6
 800ac84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ad5c <_malloc_r+0xfc>
 800ac8c:	f000 f868 	bl	800ad60 <__malloc_lock>
 800ac90:	f8d8 3000 	ldr.w	r3, [r8]
 800ac94:	461c      	mov	r4, r3
 800ac96:	bb5c      	cbnz	r4, 800acf0 <_malloc_r+0x90>
 800ac98:	4629      	mov	r1, r5
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	f7ff ffc0 	bl	800ac20 <sbrk_aligned>
 800aca0:	1c43      	adds	r3, r0, #1
 800aca2:	4604      	mov	r4, r0
 800aca4:	d155      	bne.n	800ad52 <_malloc_r+0xf2>
 800aca6:	f8d8 4000 	ldr.w	r4, [r8]
 800acaa:	4626      	mov	r6, r4
 800acac:	2e00      	cmp	r6, #0
 800acae:	d145      	bne.n	800ad3c <_malloc_r+0xdc>
 800acb0:	2c00      	cmp	r4, #0
 800acb2:	d048      	beq.n	800ad46 <_malloc_r+0xe6>
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	4631      	mov	r1, r6
 800acb8:	4638      	mov	r0, r7
 800acba:	eb04 0903 	add.w	r9, r4, r3
 800acbe:	f000 fb5d 	bl	800b37c <_sbrk_r>
 800acc2:	4581      	cmp	r9, r0
 800acc4:	d13f      	bne.n	800ad46 <_malloc_r+0xe6>
 800acc6:	6821      	ldr	r1, [r4, #0]
 800acc8:	1a6d      	subs	r5, r5, r1
 800acca:	4629      	mov	r1, r5
 800accc:	4638      	mov	r0, r7
 800acce:	f7ff ffa7 	bl	800ac20 <sbrk_aligned>
 800acd2:	3001      	adds	r0, #1
 800acd4:	d037      	beq.n	800ad46 <_malloc_r+0xe6>
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	442b      	add	r3, r5
 800acda:	6023      	str	r3, [r4, #0]
 800acdc:	f8d8 3000 	ldr.w	r3, [r8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d038      	beq.n	800ad56 <_malloc_r+0xf6>
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	42a2      	cmp	r2, r4
 800ace8:	d12b      	bne.n	800ad42 <_malloc_r+0xe2>
 800acea:	2200      	movs	r2, #0
 800acec:	605a      	str	r2, [r3, #4]
 800acee:	e00f      	b.n	800ad10 <_malloc_r+0xb0>
 800acf0:	6822      	ldr	r2, [r4, #0]
 800acf2:	1b52      	subs	r2, r2, r5
 800acf4:	d41f      	bmi.n	800ad36 <_malloc_r+0xd6>
 800acf6:	2a0b      	cmp	r2, #11
 800acf8:	d917      	bls.n	800ad2a <_malloc_r+0xca>
 800acfa:	1961      	adds	r1, r4, r5
 800acfc:	42a3      	cmp	r3, r4
 800acfe:	6025      	str	r5, [r4, #0]
 800ad00:	bf18      	it	ne
 800ad02:	6059      	strne	r1, [r3, #4]
 800ad04:	6863      	ldr	r3, [r4, #4]
 800ad06:	bf08      	it	eq
 800ad08:	f8c8 1000 	streq.w	r1, [r8]
 800ad0c:	5162      	str	r2, [r4, r5]
 800ad0e:	604b      	str	r3, [r1, #4]
 800ad10:	4638      	mov	r0, r7
 800ad12:	f104 060b 	add.w	r6, r4, #11
 800ad16:	f000 f829 	bl	800ad6c <__malloc_unlock>
 800ad1a:	f026 0607 	bic.w	r6, r6, #7
 800ad1e:	1d23      	adds	r3, r4, #4
 800ad20:	1af2      	subs	r2, r6, r3
 800ad22:	d0ae      	beq.n	800ac82 <_malloc_r+0x22>
 800ad24:	1b9b      	subs	r3, r3, r6
 800ad26:	50a3      	str	r3, [r4, r2]
 800ad28:	e7ab      	b.n	800ac82 <_malloc_r+0x22>
 800ad2a:	42a3      	cmp	r3, r4
 800ad2c:	6862      	ldr	r2, [r4, #4]
 800ad2e:	d1dd      	bne.n	800acec <_malloc_r+0x8c>
 800ad30:	f8c8 2000 	str.w	r2, [r8]
 800ad34:	e7ec      	b.n	800ad10 <_malloc_r+0xb0>
 800ad36:	4623      	mov	r3, r4
 800ad38:	6864      	ldr	r4, [r4, #4]
 800ad3a:	e7ac      	b.n	800ac96 <_malloc_r+0x36>
 800ad3c:	4634      	mov	r4, r6
 800ad3e:	6876      	ldr	r6, [r6, #4]
 800ad40:	e7b4      	b.n	800acac <_malloc_r+0x4c>
 800ad42:	4613      	mov	r3, r2
 800ad44:	e7cc      	b.n	800ace0 <_malloc_r+0x80>
 800ad46:	230c      	movs	r3, #12
 800ad48:	603b      	str	r3, [r7, #0]
 800ad4a:	4638      	mov	r0, r7
 800ad4c:	f000 f80e 	bl	800ad6c <__malloc_unlock>
 800ad50:	e797      	b.n	800ac82 <_malloc_r+0x22>
 800ad52:	6025      	str	r5, [r4, #0]
 800ad54:	e7dc      	b.n	800ad10 <_malloc_r+0xb0>
 800ad56:	605b      	str	r3, [r3, #4]
 800ad58:	deff      	udf	#255	; 0xff
 800ad5a:	bf00      	nop
 800ad5c:	2400057c 	.word	0x2400057c

0800ad60 <__malloc_lock>:
 800ad60:	4801      	ldr	r0, [pc, #4]	; (800ad68 <__malloc_lock+0x8>)
 800ad62:	f7ff bf01 	b.w	800ab68 <__retarget_lock_acquire_recursive>
 800ad66:	bf00      	nop
 800ad68:	24000578 	.word	0x24000578

0800ad6c <__malloc_unlock>:
 800ad6c:	4801      	ldr	r0, [pc, #4]	; (800ad74 <__malloc_unlock+0x8>)
 800ad6e:	f7ff befc 	b.w	800ab6a <__retarget_lock_release_recursive>
 800ad72:	bf00      	nop
 800ad74:	24000578 	.word	0x24000578

0800ad78 <__ssputs_r>:
 800ad78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad7c:	688e      	ldr	r6, [r1, #8]
 800ad7e:	461f      	mov	r7, r3
 800ad80:	42be      	cmp	r6, r7
 800ad82:	680b      	ldr	r3, [r1, #0]
 800ad84:	4682      	mov	sl, r0
 800ad86:	460c      	mov	r4, r1
 800ad88:	4690      	mov	r8, r2
 800ad8a:	d82c      	bhi.n	800ade6 <__ssputs_r+0x6e>
 800ad8c:	898a      	ldrh	r2, [r1, #12]
 800ad8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad92:	d026      	beq.n	800ade2 <__ssputs_r+0x6a>
 800ad94:	6965      	ldr	r5, [r4, #20]
 800ad96:	6909      	ldr	r1, [r1, #16]
 800ad98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad9c:	eba3 0901 	sub.w	r9, r3, r1
 800ada0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ada4:	1c7b      	adds	r3, r7, #1
 800ada6:	444b      	add	r3, r9
 800ada8:	106d      	asrs	r5, r5, #1
 800adaa:	429d      	cmp	r5, r3
 800adac:	bf38      	it	cc
 800adae:	461d      	movcc	r5, r3
 800adb0:	0553      	lsls	r3, r2, #21
 800adb2:	d527      	bpl.n	800ae04 <__ssputs_r+0x8c>
 800adb4:	4629      	mov	r1, r5
 800adb6:	f7ff ff53 	bl	800ac60 <_malloc_r>
 800adba:	4606      	mov	r6, r0
 800adbc:	b360      	cbz	r0, 800ae18 <__ssputs_r+0xa0>
 800adbe:	6921      	ldr	r1, [r4, #16]
 800adc0:	464a      	mov	r2, r9
 800adc2:	f7ff fed3 	bl	800ab6c <memcpy>
 800adc6:	89a3      	ldrh	r3, [r4, #12]
 800adc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add0:	81a3      	strh	r3, [r4, #12]
 800add2:	6126      	str	r6, [r4, #16]
 800add4:	6165      	str	r5, [r4, #20]
 800add6:	444e      	add	r6, r9
 800add8:	eba5 0509 	sub.w	r5, r5, r9
 800addc:	6026      	str	r6, [r4, #0]
 800adde:	60a5      	str	r5, [r4, #8]
 800ade0:	463e      	mov	r6, r7
 800ade2:	42be      	cmp	r6, r7
 800ade4:	d900      	bls.n	800ade8 <__ssputs_r+0x70>
 800ade6:	463e      	mov	r6, r7
 800ade8:	6820      	ldr	r0, [r4, #0]
 800adea:	4632      	mov	r2, r6
 800adec:	4641      	mov	r1, r8
 800adee:	f000 faab 	bl	800b348 <memmove>
 800adf2:	68a3      	ldr	r3, [r4, #8]
 800adf4:	1b9b      	subs	r3, r3, r6
 800adf6:	60a3      	str	r3, [r4, #8]
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	4433      	add	r3, r6
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	2000      	movs	r0, #0
 800ae00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae04:	462a      	mov	r2, r5
 800ae06:	f000 fac9 	bl	800b39c <_realloc_r>
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d1e0      	bne.n	800add2 <__ssputs_r+0x5a>
 800ae10:	6921      	ldr	r1, [r4, #16]
 800ae12:	4650      	mov	r0, sl
 800ae14:	f7ff feb8 	bl	800ab88 <_free_r>
 800ae18:	230c      	movs	r3, #12
 800ae1a:	f8ca 3000 	str.w	r3, [sl]
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae24:	81a3      	strh	r3, [r4, #12]
 800ae26:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2a:	e7e9      	b.n	800ae00 <__ssputs_r+0x88>

0800ae2c <_svfiprintf_r>:
 800ae2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae30:	4698      	mov	r8, r3
 800ae32:	898b      	ldrh	r3, [r1, #12]
 800ae34:	061b      	lsls	r3, r3, #24
 800ae36:	b09d      	sub	sp, #116	; 0x74
 800ae38:	4607      	mov	r7, r0
 800ae3a:	460d      	mov	r5, r1
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	d50e      	bpl.n	800ae5e <_svfiprintf_r+0x32>
 800ae40:	690b      	ldr	r3, [r1, #16]
 800ae42:	b963      	cbnz	r3, 800ae5e <_svfiprintf_r+0x32>
 800ae44:	2140      	movs	r1, #64	; 0x40
 800ae46:	f7ff ff0b 	bl	800ac60 <_malloc_r>
 800ae4a:	6028      	str	r0, [r5, #0]
 800ae4c:	6128      	str	r0, [r5, #16]
 800ae4e:	b920      	cbnz	r0, 800ae5a <_svfiprintf_r+0x2e>
 800ae50:	230c      	movs	r3, #12
 800ae52:	603b      	str	r3, [r7, #0]
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	e0d0      	b.n	800affc <_svfiprintf_r+0x1d0>
 800ae5a:	2340      	movs	r3, #64	; 0x40
 800ae5c:	616b      	str	r3, [r5, #20]
 800ae5e:	2300      	movs	r3, #0
 800ae60:	9309      	str	r3, [sp, #36]	; 0x24
 800ae62:	2320      	movs	r3, #32
 800ae64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae68:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae6c:	2330      	movs	r3, #48	; 0x30
 800ae6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b014 <_svfiprintf_r+0x1e8>
 800ae72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae76:	f04f 0901 	mov.w	r9, #1
 800ae7a:	4623      	mov	r3, r4
 800ae7c:	469a      	mov	sl, r3
 800ae7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae82:	b10a      	cbz	r2, 800ae88 <_svfiprintf_r+0x5c>
 800ae84:	2a25      	cmp	r2, #37	; 0x25
 800ae86:	d1f9      	bne.n	800ae7c <_svfiprintf_r+0x50>
 800ae88:	ebba 0b04 	subs.w	fp, sl, r4
 800ae8c:	d00b      	beq.n	800aea6 <_svfiprintf_r+0x7a>
 800ae8e:	465b      	mov	r3, fp
 800ae90:	4622      	mov	r2, r4
 800ae92:	4629      	mov	r1, r5
 800ae94:	4638      	mov	r0, r7
 800ae96:	f7ff ff6f 	bl	800ad78 <__ssputs_r>
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	f000 80a9 	beq.w	800aff2 <_svfiprintf_r+0x1c6>
 800aea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aea2:	445a      	add	r2, fp
 800aea4:	9209      	str	r2, [sp, #36]	; 0x24
 800aea6:	f89a 3000 	ldrb.w	r3, [sl]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f000 80a1 	beq.w	800aff2 <_svfiprintf_r+0x1c6>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeba:	f10a 0a01 	add.w	sl, sl, #1
 800aebe:	9304      	str	r3, [sp, #16]
 800aec0:	9307      	str	r3, [sp, #28]
 800aec2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aec6:	931a      	str	r3, [sp, #104]	; 0x68
 800aec8:	4654      	mov	r4, sl
 800aeca:	2205      	movs	r2, #5
 800aecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed0:	4850      	ldr	r0, [pc, #320]	; (800b014 <_svfiprintf_r+0x1e8>)
 800aed2:	f7f5 fa15 	bl	8000300 <memchr>
 800aed6:	9a04      	ldr	r2, [sp, #16]
 800aed8:	b9d8      	cbnz	r0, 800af12 <_svfiprintf_r+0xe6>
 800aeda:	06d0      	lsls	r0, r2, #27
 800aedc:	bf44      	itt	mi
 800aede:	2320      	movmi	r3, #32
 800aee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aee4:	0711      	lsls	r1, r2, #28
 800aee6:	bf44      	itt	mi
 800aee8:	232b      	movmi	r3, #43	; 0x2b
 800aeea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeee:	f89a 3000 	ldrb.w	r3, [sl]
 800aef2:	2b2a      	cmp	r3, #42	; 0x2a
 800aef4:	d015      	beq.n	800af22 <_svfiprintf_r+0xf6>
 800aef6:	9a07      	ldr	r2, [sp, #28]
 800aef8:	4654      	mov	r4, sl
 800aefa:	2000      	movs	r0, #0
 800aefc:	f04f 0c0a 	mov.w	ip, #10
 800af00:	4621      	mov	r1, r4
 800af02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af06:	3b30      	subs	r3, #48	; 0x30
 800af08:	2b09      	cmp	r3, #9
 800af0a:	d94d      	bls.n	800afa8 <_svfiprintf_r+0x17c>
 800af0c:	b1b0      	cbz	r0, 800af3c <_svfiprintf_r+0x110>
 800af0e:	9207      	str	r2, [sp, #28]
 800af10:	e014      	b.n	800af3c <_svfiprintf_r+0x110>
 800af12:	eba0 0308 	sub.w	r3, r0, r8
 800af16:	fa09 f303 	lsl.w	r3, r9, r3
 800af1a:	4313      	orrs	r3, r2
 800af1c:	9304      	str	r3, [sp, #16]
 800af1e:	46a2      	mov	sl, r4
 800af20:	e7d2      	b.n	800aec8 <_svfiprintf_r+0x9c>
 800af22:	9b03      	ldr	r3, [sp, #12]
 800af24:	1d19      	adds	r1, r3, #4
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	9103      	str	r1, [sp, #12]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	bfbb      	ittet	lt
 800af2e:	425b      	neglt	r3, r3
 800af30:	f042 0202 	orrlt.w	r2, r2, #2
 800af34:	9307      	strge	r3, [sp, #28]
 800af36:	9307      	strlt	r3, [sp, #28]
 800af38:	bfb8      	it	lt
 800af3a:	9204      	strlt	r2, [sp, #16]
 800af3c:	7823      	ldrb	r3, [r4, #0]
 800af3e:	2b2e      	cmp	r3, #46	; 0x2e
 800af40:	d10c      	bne.n	800af5c <_svfiprintf_r+0x130>
 800af42:	7863      	ldrb	r3, [r4, #1]
 800af44:	2b2a      	cmp	r3, #42	; 0x2a
 800af46:	d134      	bne.n	800afb2 <_svfiprintf_r+0x186>
 800af48:	9b03      	ldr	r3, [sp, #12]
 800af4a:	1d1a      	adds	r2, r3, #4
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	9203      	str	r2, [sp, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	bfb8      	it	lt
 800af54:	f04f 33ff 	movlt.w	r3, #4294967295
 800af58:	3402      	adds	r4, #2
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b024 <_svfiprintf_r+0x1f8>
 800af60:	7821      	ldrb	r1, [r4, #0]
 800af62:	2203      	movs	r2, #3
 800af64:	4650      	mov	r0, sl
 800af66:	f7f5 f9cb 	bl	8000300 <memchr>
 800af6a:	b138      	cbz	r0, 800af7c <_svfiprintf_r+0x150>
 800af6c:	9b04      	ldr	r3, [sp, #16]
 800af6e:	eba0 000a 	sub.w	r0, r0, sl
 800af72:	2240      	movs	r2, #64	; 0x40
 800af74:	4082      	lsls	r2, r0
 800af76:	4313      	orrs	r3, r2
 800af78:	3401      	adds	r4, #1
 800af7a:	9304      	str	r3, [sp, #16]
 800af7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af80:	4825      	ldr	r0, [pc, #148]	; (800b018 <_svfiprintf_r+0x1ec>)
 800af82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af86:	2206      	movs	r2, #6
 800af88:	f7f5 f9ba 	bl	8000300 <memchr>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d038      	beq.n	800b002 <_svfiprintf_r+0x1d6>
 800af90:	4b22      	ldr	r3, [pc, #136]	; (800b01c <_svfiprintf_r+0x1f0>)
 800af92:	bb1b      	cbnz	r3, 800afdc <_svfiprintf_r+0x1b0>
 800af94:	9b03      	ldr	r3, [sp, #12]
 800af96:	3307      	adds	r3, #7
 800af98:	f023 0307 	bic.w	r3, r3, #7
 800af9c:	3308      	adds	r3, #8
 800af9e:	9303      	str	r3, [sp, #12]
 800afa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa2:	4433      	add	r3, r6
 800afa4:	9309      	str	r3, [sp, #36]	; 0x24
 800afa6:	e768      	b.n	800ae7a <_svfiprintf_r+0x4e>
 800afa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800afac:	460c      	mov	r4, r1
 800afae:	2001      	movs	r0, #1
 800afb0:	e7a6      	b.n	800af00 <_svfiprintf_r+0xd4>
 800afb2:	2300      	movs	r3, #0
 800afb4:	3401      	adds	r4, #1
 800afb6:	9305      	str	r3, [sp, #20]
 800afb8:	4619      	mov	r1, r3
 800afba:	f04f 0c0a 	mov.w	ip, #10
 800afbe:	4620      	mov	r0, r4
 800afc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afc4:	3a30      	subs	r2, #48	; 0x30
 800afc6:	2a09      	cmp	r2, #9
 800afc8:	d903      	bls.n	800afd2 <_svfiprintf_r+0x1a6>
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0c6      	beq.n	800af5c <_svfiprintf_r+0x130>
 800afce:	9105      	str	r1, [sp, #20]
 800afd0:	e7c4      	b.n	800af5c <_svfiprintf_r+0x130>
 800afd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800afd6:	4604      	mov	r4, r0
 800afd8:	2301      	movs	r3, #1
 800afda:	e7f0      	b.n	800afbe <_svfiprintf_r+0x192>
 800afdc:	ab03      	add	r3, sp, #12
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	462a      	mov	r2, r5
 800afe2:	4b0f      	ldr	r3, [pc, #60]	; (800b020 <_svfiprintf_r+0x1f4>)
 800afe4:	a904      	add	r1, sp, #16
 800afe6:	4638      	mov	r0, r7
 800afe8:	f3af 8000 	nop.w
 800afec:	1c42      	adds	r2, r0, #1
 800afee:	4606      	mov	r6, r0
 800aff0:	d1d6      	bne.n	800afa0 <_svfiprintf_r+0x174>
 800aff2:	89ab      	ldrh	r3, [r5, #12]
 800aff4:	065b      	lsls	r3, r3, #25
 800aff6:	f53f af2d 	bmi.w	800ae54 <_svfiprintf_r+0x28>
 800affa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800affc:	b01d      	add	sp, #116	; 0x74
 800affe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b002:	ab03      	add	r3, sp, #12
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	462a      	mov	r2, r5
 800b008:	4b05      	ldr	r3, [pc, #20]	; (800b020 <_svfiprintf_r+0x1f4>)
 800b00a:	a904      	add	r1, sp, #16
 800b00c:	4638      	mov	r0, r7
 800b00e:	f000 f879 	bl	800b104 <_printf_i>
 800b012:	e7eb      	b.n	800afec <_svfiprintf_r+0x1c0>
 800b014:	0800b6fc 	.word	0x0800b6fc
 800b018:	0800b706 	.word	0x0800b706
 800b01c:	00000000 	.word	0x00000000
 800b020:	0800ad79 	.word	0x0800ad79
 800b024:	0800b702 	.word	0x0800b702

0800b028 <_printf_common>:
 800b028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b02c:	4616      	mov	r6, r2
 800b02e:	4699      	mov	r9, r3
 800b030:	688a      	ldr	r2, [r1, #8]
 800b032:	690b      	ldr	r3, [r1, #16]
 800b034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b038:	4293      	cmp	r3, r2
 800b03a:	bfb8      	it	lt
 800b03c:	4613      	movlt	r3, r2
 800b03e:	6033      	str	r3, [r6, #0]
 800b040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b044:	4607      	mov	r7, r0
 800b046:	460c      	mov	r4, r1
 800b048:	b10a      	cbz	r2, 800b04e <_printf_common+0x26>
 800b04a:	3301      	adds	r3, #1
 800b04c:	6033      	str	r3, [r6, #0]
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	0699      	lsls	r1, r3, #26
 800b052:	bf42      	ittt	mi
 800b054:	6833      	ldrmi	r3, [r6, #0]
 800b056:	3302      	addmi	r3, #2
 800b058:	6033      	strmi	r3, [r6, #0]
 800b05a:	6825      	ldr	r5, [r4, #0]
 800b05c:	f015 0506 	ands.w	r5, r5, #6
 800b060:	d106      	bne.n	800b070 <_printf_common+0x48>
 800b062:	f104 0a19 	add.w	sl, r4, #25
 800b066:	68e3      	ldr	r3, [r4, #12]
 800b068:	6832      	ldr	r2, [r6, #0]
 800b06a:	1a9b      	subs	r3, r3, r2
 800b06c:	42ab      	cmp	r3, r5
 800b06e:	dc26      	bgt.n	800b0be <_printf_common+0x96>
 800b070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b074:	1e13      	subs	r3, r2, #0
 800b076:	6822      	ldr	r2, [r4, #0]
 800b078:	bf18      	it	ne
 800b07a:	2301      	movne	r3, #1
 800b07c:	0692      	lsls	r2, r2, #26
 800b07e:	d42b      	bmi.n	800b0d8 <_printf_common+0xb0>
 800b080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b084:	4649      	mov	r1, r9
 800b086:	4638      	mov	r0, r7
 800b088:	47c0      	blx	r8
 800b08a:	3001      	adds	r0, #1
 800b08c:	d01e      	beq.n	800b0cc <_printf_common+0xa4>
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	6922      	ldr	r2, [r4, #16]
 800b092:	f003 0306 	and.w	r3, r3, #6
 800b096:	2b04      	cmp	r3, #4
 800b098:	bf02      	ittt	eq
 800b09a:	68e5      	ldreq	r5, [r4, #12]
 800b09c:	6833      	ldreq	r3, [r6, #0]
 800b09e:	1aed      	subeq	r5, r5, r3
 800b0a0:	68a3      	ldr	r3, [r4, #8]
 800b0a2:	bf0c      	ite	eq
 800b0a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0a8:	2500      	movne	r5, #0
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	bfc4      	itt	gt
 800b0ae:	1a9b      	subgt	r3, r3, r2
 800b0b0:	18ed      	addgt	r5, r5, r3
 800b0b2:	2600      	movs	r6, #0
 800b0b4:	341a      	adds	r4, #26
 800b0b6:	42b5      	cmp	r5, r6
 800b0b8:	d11a      	bne.n	800b0f0 <_printf_common+0xc8>
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	e008      	b.n	800b0d0 <_printf_common+0xa8>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	4652      	mov	r2, sl
 800b0c2:	4649      	mov	r1, r9
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	47c0      	blx	r8
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	d103      	bne.n	800b0d4 <_printf_common+0xac>
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d4:	3501      	adds	r5, #1
 800b0d6:	e7c6      	b.n	800b066 <_printf_common+0x3e>
 800b0d8:	18e1      	adds	r1, r4, r3
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	2030      	movs	r0, #48	; 0x30
 800b0de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0e2:	4422      	add	r2, r4
 800b0e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0ec:	3302      	adds	r3, #2
 800b0ee:	e7c7      	b.n	800b080 <_printf_common+0x58>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	4622      	mov	r2, r4
 800b0f4:	4649      	mov	r1, r9
 800b0f6:	4638      	mov	r0, r7
 800b0f8:	47c0      	blx	r8
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	d0e6      	beq.n	800b0cc <_printf_common+0xa4>
 800b0fe:	3601      	adds	r6, #1
 800b100:	e7d9      	b.n	800b0b6 <_printf_common+0x8e>
	...

0800b104 <_printf_i>:
 800b104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b108:	7e0f      	ldrb	r7, [r1, #24]
 800b10a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b10c:	2f78      	cmp	r7, #120	; 0x78
 800b10e:	4691      	mov	r9, r2
 800b110:	4680      	mov	r8, r0
 800b112:	460c      	mov	r4, r1
 800b114:	469a      	mov	sl, r3
 800b116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b11a:	d807      	bhi.n	800b12c <_printf_i+0x28>
 800b11c:	2f62      	cmp	r7, #98	; 0x62
 800b11e:	d80a      	bhi.n	800b136 <_printf_i+0x32>
 800b120:	2f00      	cmp	r7, #0
 800b122:	f000 80d4 	beq.w	800b2ce <_printf_i+0x1ca>
 800b126:	2f58      	cmp	r7, #88	; 0x58
 800b128:	f000 80c0 	beq.w	800b2ac <_printf_i+0x1a8>
 800b12c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b134:	e03a      	b.n	800b1ac <_printf_i+0xa8>
 800b136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b13a:	2b15      	cmp	r3, #21
 800b13c:	d8f6      	bhi.n	800b12c <_printf_i+0x28>
 800b13e:	a101      	add	r1, pc, #4	; (adr r1, 800b144 <_printf_i+0x40>)
 800b140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b144:	0800b19d 	.word	0x0800b19d
 800b148:	0800b1b1 	.word	0x0800b1b1
 800b14c:	0800b12d 	.word	0x0800b12d
 800b150:	0800b12d 	.word	0x0800b12d
 800b154:	0800b12d 	.word	0x0800b12d
 800b158:	0800b12d 	.word	0x0800b12d
 800b15c:	0800b1b1 	.word	0x0800b1b1
 800b160:	0800b12d 	.word	0x0800b12d
 800b164:	0800b12d 	.word	0x0800b12d
 800b168:	0800b12d 	.word	0x0800b12d
 800b16c:	0800b12d 	.word	0x0800b12d
 800b170:	0800b2b5 	.word	0x0800b2b5
 800b174:	0800b1dd 	.word	0x0800b1dd
 800b178:	0800b26f 	.word	0x0800b26f
 800b17c:	0800b12d 	.word	0x0800b12d
 800b180:	0800b12d 	.word	0x0800b12d
 800b184:	0800b2d7 	.word	0x0800b2d7
 800b188:	0800b12d 	.word	0x0800b12d
 800b18c:	0800b1dd 	.word	0x0800b1dd
 800b190:	0800b12d 	.word	0x0800b12d
 800b194:	0800b12d 	.word	0x0800b12d
 800b198:	0800b277 	.word	0x0800b277
 800b19c:	682b      	ldr	r3, [r5, #0]
 800b19e:	1d1a      	adds	r2, r3, #4
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	602a      	str	r2, [r5, #0]
 800b1a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e09f      	b.n	800b2f0 <_printf_i+0x1ec>
 800b1b0:	6820      	ldr	r0, [r4, #0]
 800b1b2:	682b      	ldr	r3, [r5, #0]
 800b1b4:	0607      	lsls	r7, r0, #24
 800b1b6:	f103 0104 	add.w	r1, r3, #4
 800b1ba:	6029      	str	r1, [r5, #0]
 800b1bc:	d501      	bpl.n	800b1c2 <_printf_i+0xbe>
 800b1be:	681e      	ldr	r6, [r3, #0]
 800b1c0:	e003      	b.n	800b1ca <_printf_i+0xc6>
 800b1c2:	0646      	lsls	r6, r0, #25
 800b1c4:	d5fb      	bpl.n	800b1be <_printf_i+0xba>
 800b1c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b1ca:	2e00      	cmp	r6, #0
 800b1cc:	da03      	bge.n	800b1d6 <_printf_i+0xd2>
 800b1ce:	232d      	movs	r3, #45	; 0x2d
 800b1d0:	4276      	negs	r6, r6
 800b1d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1d6:	485a      	ldr	r0, [pc, #360]	; (800b340 <_printf_i+0x23c>)
 800b1d8:	230a      	movs	r3, #10
 800b1da:	e012      	b.n	800b202 <_printf_i+0xfe>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	6820      	ldr	r0, [r4, #0]
 800b1e0:	1d19      	adds	r1, r3, #4
 800b1e2:	6029      	str	r1, [r5, #0]
 800b1e4:	0605      	lsls	r5, r0, #24
 800b1e6:	d501      	bpl.n	800b1ec <_printf_i+0xe8>
 800b1e8:	681e      	ldr	r6, [r3, #0]
 800b1ea:	e002      	b.n	800b1f2 <_printf_i+0xee>
 800b1ec:	0641      	lsls	r1, r0, #25
 800b1ee:	d5fb      	bpl.n	800b1e8 <_printf_i+0xe4>
 800b1f0:	881e      	ldrh	r6, [r3, #0]
 800b1f2:	4853      	ldr	r0, [pc, #332]	; (800b340 <_printf_i+0x23c>)
 800b1f4:	2f6f      	cmp	r7, #111	; 0x6f
 800b1f6:	bf0c      	ite	eq
 800b1f8:	2308      	moveq	r3, #8
 800b1fa:	230a      	movne	r3, #10
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b202:	6865      	ldr	r5, [r4, #4]
 800b204:	60a5      	str	r5, [r4, #8]
 800b206:	2d00      	cmp	r5, #0
 800b208:	bfa2      	ittt	ge
 800b20a:	6821      	ldrge	r1, [r4, #0]
 800b20c:	f021 0104 	bicge.w	r1, r1, #4
 800b210:	6021      	strge	r1, [r4, #0]
 800b212:	b90e      	cbnz	r6, 800b218 <_printf_i+0x114>
 800b214:	2d00      	cmp	r5, #0
 800b216:	d04b      	beq.n	800b2b0 <_printf_i+0x1ac>
 800b218:	4615      	mov	r5, r2
 800b21a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b21e:	fb03 6711 	mls	r7, r3, r1, r6
 800b222:	5dc7      	ldrb	r7, [r0, r7]
 800b224:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b228:	4637      	mov	r7, r6
 800b22a:	42bb      	cmp	r3, r7
 800b22c:	460e      	mov	r6, r1
 800b22e:	d9f4      	bls.n	800b21a <_printf_i+0x116>
 800b230:	2b08      	cmp	r3, #8
 800b232:	d10b      	bne.n	800b24c <_printf_i+0x148>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	07de      	lsls	r6, r3, #31
 800b238:	d508      	bpl.n	800b24c <_printf_i+0x148>
 800b23a:	6923      	ldr	r3, [r4, #16]
 800b23c:	6861      	ldr	r1, [r4, #4]
 800b23e:	4299      	cmp	r1, r3
 800b240:	bfde      	ittt	le
 800b242:	2330      	movle	r3, #48	; 0x30
 800b244:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b248:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b24c:	1b52      	subs	r2, r2, r5
 800b24e:	6122      	str	r2, [r4, #16]
 800b250:	f8cd a000 	str.w	sl, [sp]
 800b254:	464b      	mov	r3, r9
 800b256:	aa03      	add	r2, sp, #12
 800b258:	4621      	mov	r1, r4
 800b25a:	4640      	mov	r0, r8
 800b25c:	f7ff fee4 	bl	800b028 <_printf_common>
 800b260:	3001      	adds	r0, #1
 800b262:	d14a      	bne.n	800b2fa <_printf_i+0x1f6>
 800b264:	f04f 30ff 	mov.w	r0, #4294967295
 800b268:	b004      	add	sp, #16
 800b26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	f043 0320 	orr.w	r3, r3, #32
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	4833      	ldr	r0, [pc, #204]	; (800b344 <_printf_i+0x240>)
 800b278:	2778      	movs	r7, #120	; 0x78
 800b27a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	6829      	ldr	r1, [r5, #0]
 800b282:	061f      	lsls	r7, r3, #24
 800b284:	f851 6b04 	ldr.w	r6, [r1], #4
 800b288:	d402      	bmi.n	800b290 <_printf_i+0x18c>
 800b28a:	065f      	lsls	r7, r3, #25
 800b28c:	bf48      	it	mi
 800b28e:	b2b6      	uxthmi	r6, r6
 800b290:	07df      	lsls	r7, r3, #31
 800b292:	bf48      	it	mi
 800b294:	f043 0320 	orrmi.w	r3, r3, #32
 800b298:	6029      	str	r1, [r5, #0]
 800b29a:	bf48      	it	mi
 800b29c:	6023      	strmi	r3, [r4, #0]
 800b29e:	b91e      	cbnz	r6, 800b2a8 <_printf_i+0x1a4>
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	f023 0320 	bic.w	r3, r3, #32
 800b2a6:	6023      	str	r3, [r4, #0]
 800b2a8:	2310      	movs	r3, #16
 800b2aa:	e7a7      	b.n	800b1fc <_printf_i+0xf8>
 800b2ac:	4824      	ldr	r0, [pc, #144]	; (800b340 <_printf_i+0x23c>)
 800b2ae:	e7e4      	b.n	800b27a <_printf_i+0x176>
 800b2b0:	4615      	mov	r5, r2
 800b2b2:	e7bd      	b.n	800b230 <_printf_i+0x12c>
 800b2b4:	682b      	ldr	r3, [r5, #0]
 800b2b6:	6826      	ldr	r6, [r4, #0]
 800b2b8:	6961      	ldr	r1, [r4, #20]
 800b2ba:	1d18      	adds	r0, r3, #4
 800b2bc:	6028      	str	r0, [r5, #0]
 800b2be:	0635      	lsls	r5, r6, #24
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	d501      	bpl.n	800b2c8 <_printf_i+0x1c4>
 800b2c4:	6019      	str	r1, [r3, #0]
 800b2c6:	e002      	b.n	800b2ce <_printf_i+0x1ca>
 800b2c8:	0670      	lsls	r0, r6, #25
 800b2ca:	d5fb      	bpl.n	800b2c4 <_printf_i+0x1c0>
 800b2cc:	8019      	strh	r1, [r3, #0]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	6123      	str	r3, [r4, #16]
 800b2d2:	4615      	mov	r5, r2
 800b2d4:	e7bc      	b.n	800b250 <_printf_i+0x14c>
 800b2d6:	682b      	ldr	r3, [r5, #0]
 800b2d8:	1d1a      	adds	r2, r3, #4
 800b2da:	602a      	str	r2, [r5, #0]
 800b2dc:	681d      	ldr	r5, [r3, #0]
 800b2de:	6862      	ldr	r2, [r4, #4]
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	f7f5 f80c 	bl	8000300 <memchr>
 800b2e8:	b108      	cbz	r0, 800b2ee <_printf_i+0x1ea>
 800b2ea:	1b40      	subs	r0, r0, r5
 800b2ec:	6060      	str	r0, [r4, #4]
 800b2ee:	6863      	ldr	r3, [r4, #4]
 800b2f0:	6123      	str	r3, [r4, #16]
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2f8:	e7aa      	b.n	800b250 <_printf_i+0x14c>
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	462a      	mov	r2, r5
 800b2fe:	4649      	mov	r1, r9
 800b300:	4640      	mov	r0, r8
 800b302:	47d0      	blx	sl
 800b304:	3001      	adds	r0, #1
 800b306:	d0ad      	beq.n	800b264 <_printf_i+0x160>
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	079b      	lsls	r3, r3, #30
 800b30c:	d413      	bmi.n	800b336 <_printf_i+0x232>
 800b30e:	68e0      	ldr	r0, [r4, #12]
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	4298      	cmp	r0, r3
 800b314:	bfb8      	it	lt
 800b316:	4618      	movlt	r0, r3
 800b318:	e7a6      	b.n	800b268 <_printf_i+0x164>
 800b31a:	2301      	movs	r3, #1
 800b31c:	4632      	mov	r2, r6
 800b31e:	4649      	mov	r1, r9
 800b320:	4640      	mov	r0, r8
 800b322:	47d0      	blx	sl
 800b324:	3001      	adds	r0, #1
 800b326:	d09d      	beq.n	800b264 <_printf_i+0x160>
 800b328:	3501      	adds	r5, #1
 800b32a:	68e3      	ldr	r3, [r4, #12]
 800b32c:	9903      	ldr	r1, [sp, #12]
 800b32e:	1a5b      	subs	r3, r3, r1
 800b330:	42ab      	cmp	r3, r5
 800b332:	dcf2      	bgt.n	800b31a <_printf_i+0x216>
 800b334:	e7eb      	b.n	800b30e <_printf_i+0x20a>
 800b336:	2500      	movs	r5, #0
 800b338:	f104 0619 	add.w	r6, r4, #25
 800b33c:	e7f5      	b.n	800b32a <_printf_i+0x226>
 800b33e:	bf00      	nop
 800b340:	0800b70d 	.word	0x0800b70d
 800b344:	0800b71e 	.word	0x0800b71e

0800b348 <memmove>:
 800b348:	4288      	cmp	r0, r1
 800b34a:	b510      	push	{r4, lr}
 800b34c:	eb01 0402 	add.w	r4, r1, r2
 800b350:	d902      	bls.n	800b358 <memmove+0x10>
 800b352:	4284      	cmp	r4, r0
 800b354:	4623      	mov	r3, r4
 800b356:	d807      	bhi.n	800b368 <memmove+0x20>
 800b358:	1e43      	subs	r3, r0, #1
 800b35a:	42a1      	cmp	r1, r4
 800b35c:	d008      	beq.n	800b370 <memmove+0x28>
 800b35e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b362:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b366:	e7f8      	b.n	800b35a <memmove+0x12>
 800b368:	4402      	add	r2, r0
 800b36a:	4601      	mov	r1, r0
 800b36c:	428a      	cmp	r2, r1
 800b36e:	d100      	bne.n	800b372 <memmove+0x2a>
 800b370:	bd10      	pop	{r4, pc}
 800b372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b37a:	e7f7      	b.n	800b36c <memmove+0x24>

0800b37c <_sbrk_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4d06      	ldr	r5, [pc, #24]	; (800b398 <_sbrk_r+0x1c>)
 800b380:	2300      	movs	r3, #0
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	602b      	str	r3, [r5, #0]
 800b388:	f7f7 f92a 	bl	80025e0 <_sbrk>
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d102      	bne.n	800b396 <_sbrk_r+0x1a>
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	b103      	cbz	r3, 800b396 <_sbrk_r+0x1a>
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	bd38      	pop	{r3, r4, r5, pc}
 800b398:	24000574 	.word	0x24000574

0800b39c <_realloc_r>:
 800b39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a0:	4680      	mov	r8, r0
 800b3a2:	4614      	mov	r4, r2
 800b3a4:	460e      	mov	r6, r1
 800b3a6:	b921      	cbnz	r1, 800b3b2 <_realloc_r+0x16>
 800b3a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	f7ff bc57 	b.w	800ac60 <_malloc_r>
 800b3b2:	b92a      	cbnz	r2, 800b3c0 <_realloc_r+0x24>
 800b3b4:	f7ff fbe8 	bl	800ab88 <_free_r>
 800b3b8:	4625      	mov	r5, r4
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c0:	f000 f81b 	bl	800b3fa <_malloc_usable_size_r>
 800b3c4:	4284      	cmp	r4, r0
 800b3c6:	4607      	mov	r7, r0
 800b3c8:	d802      	bhi.n	800b3d0 <_realloc_r+0x34>
 800b3ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3ce:	d812      	bhi.n	800b3f6 <_realloc_r+0x5a>
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	f7ff fc44 	bl	800ac60 <_malloc_r>
 800b3d8:	4605      	mov	r5, r0
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d0ed      	beq.n	800b3ba <_realloc_r+0x1e>
 800b3de:	42bc      	cmp	r4, r7
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	bf28      	it	cs
 800b3e6:	463a      	movcs	r2, r7
 800b3e8:	f7ff fbc0 	bl	800ab6c <memcpy>
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4640      	mov	r0, r8
 800b3f0:	f7ff fbca 	bl	800ab88 <_free_r>
 800b3f4:	e7e1      	b.n	800b3ba <_realloc_r+0x1e>
 800b3f6:	4635      	mov	r5, r6
 800b3f8:	e7df      	b.n	800b3ba <_realloc_r+0x1e>

0800b3fa <_malloc_usable_size_r>:
 800b3fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3fe:	1f18      	subs	r0, r3, #4
 800b400:	2b00      	cmp	r3, #0
 800b402:	bfbc      	itt	lt
 800b404:	580b      	ldrlt	r3, [r1, r0]
 800b406:	18c0      	addlt	r0, r0, r3
 800b408:	4770      	bx	lr
	...

0800b40c <_init>:
 800b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40e:	bf00      	nop
 800b410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b412:	bc08      	pop	{r3}
 800b414:	469e      	mov	lr, r3
 800b416:	4770      	bx	lr

0800b418 <_fini>:
 800b418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41a:	bf00      	nop
 800b41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41e:	bc08      	pop	{r3}
 800b420:	469e      	mov	lr, r3
 800b422:	4770      	bx	lr
