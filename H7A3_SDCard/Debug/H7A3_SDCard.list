
H7A3_SDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c188  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800c438  0800c438  0001c438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c8c0  0800c8c0  0001c8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c8c8  0800c8c8  0001c8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c8cc  0800c8cc  0001c8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800c8d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000418  24000078  0800c948  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24000490  0800c948  00020490  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d5d9  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003644  00000000  00000000  0003d67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001750  00000000  00000000  00040cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015f8  00000000  00000000  00042418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033d94  00000000  00000000  00043a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001fc61  00000000  00000000  000777a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014b8c0  00000000  00000000  00097405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e2cc5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006708  00000000  00000000  001e2d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c420 	.word	0x0800c420

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800c420 	.word	0x0800c420

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b09c      	sub	sp, #112	; 0x70
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006aa:	f000 ff89 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f87d 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f000 faaf 	bl	8000c14 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006b6:	f000 f9db 	bl	8000a70 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006ba:	f000 fa25 	bl	8000b08 <MX_USB_OTG_HS_USB_Init>
  MX_DMA_Init();
 80006be:	f000 fa4b 	bl	8000b58 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80006c2:	f000 f8e9 	bl	8000898 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80006c6:	f00a ff91 	bl	800b5ec <MX_FATFS_Init>
  MX_SPI1_Init();
 80006ca:	f000 f903 	bl	80008d4 <MX_SPI1_Init>
  MX_TIM3_Init();
 80006ce:	f000 f957 	bl	8000980 <MX_TIM3_Init>
  MX_WWDG1_Init();
 80006d2:	f000 fa21 	bl	8000b18 <MX_WWDG1_Init>
  /* USER CODE BEGIN 2 */


  //SDMMC_Ex1();
  char temp[]="--------------------H7A3_SDCard----------------------"
 80006d6:	4a2a      	ldr	r2, [pc, #168]	; (8000780 <main+0xdc>)
 80006d8:	463b      	mov	r3, r7
 80006da:	4611      	mov	r1, r2
 80006dc:	226e      	movs	r2, #110	; 0x6e
 80006de:	4618      	mov	r0, r3
 80006e0:	f00b fa28 	bl	800bb34 <memcpy>
		  "\r\n Welcome to UART Port 115200 8 bit/stop1 none parity\r\n";
  HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp),30); // strlen = length of str -> config length of data
 80006e4:	463b      	mov	r3, r7
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fe02 	bl	80002f0 <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	4639      	mov	r1, r7
 80006f2:	231e      	movs	r3, #30
 80006f4:	4823      	ldr	r0, [pc, #140]	; (8000784 <main+0xe0>)
 80006f6:	f008 ffc1 	bl	800967c <HAL_UART_Transmit>
  //SDCard_init();

  //// PWM Test
  HAL_TIM_Base_Start(&htim3);
 80006fa:	4823      	ldr	r0, [pc, #140]	; (8000788 <main+0xe4>)
 80006fc:	f007 fec0 	bl	8008480 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000700:	2108      	movs	r1, #8
 8000702:	4821      	ldr	r0, [pc, #132]	; (8000788 <main+0xe4>)
 8000704:	f007 ff8e 	bl	8008624 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - timestamp_one >= 1000){
 8000708:	f000 ffe0 	bl	80016cc <HAL_GetTick>
 800070c:	4602      	mov	r2, r0
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <main+0xe8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000718:	d31e      	bcc.n	8000758 <main+0xb4>
		  timestamp_one = HAL_GetTick();
 800071a:	f000 ffd7 	bl	80016cc <HAL_GetTick>
 800071e:	4603      	mov	r3, r0
 8000720:	4a1a      	ldr	r2, [pc, #104]	; (800078c <main+0xe8>)
 8000722:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000724:	2102      	movs	r1, #2
 8000726:	481a      	ldr	r0, [pc, #104]	; (8000790 <main+0xec>)
 8000728:	f003 f807 	bl	800373a <HAL_GPIO_TogglePin>

		  sprintf(txtUARTBF,"timestamp =  %d\r\n", (int)timestamp_one);
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <main+0xe8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4918      	ldr	r1, [pc, #96]	; (8000794 <main+0xf0>)
 8000734:	4818      	ldr	r0, [pc, #96]	; (8000798 <main+0xf4>)
 8000736:	f00b fa13 	bl	800bb60 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 800073a:	4817      	ldr	r0, [pc, #92]	; (8000798 <main+0xf4>)
 800073c:	f7ff fdd8 	bl	80002f0 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	b29a      	uxth	r2, r3
 8000744:	230a      	movs	r3, #10
 8000746:	4914      	ldr	r1, [pc, #80]	; (8000798 <main+0xf4>)
 8000748:	480e      	ldr	r0, [pc, #56]	; (8000784 <main+0xe0>)
 800074a:	f008 ff97 	bl	800967c <HAL_UART_Transmit>

		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, PWMOut1); // dutycycle
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <main+0xf8>)
 8000750:	881a      	ldrh	r2, [r3, #0]
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <main+0xe4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
	  	   * IWDG
	  	   * Prescalr = 64
	  	   * Reload = 4095
	  	   * (1/37KHz)* Prescalr * Reload = 7.08 sec
	  	   * */
	  if(HAL_GetTick() - timestamp_wwdg >= timerefresh_wwdg){ // flag_dis_wwdg for test only && SRAM4->flag_dis_wwdg != 12
 8000758:	f000 ffb8 	bl	80016cc <HAL_GetTick>
 800075c:	4602      	mov	r2, r0
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <main+0xfc>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <main+0x100>)
 8000766:	8812      	ldrh	r2, [r2, #0]
 8000768:	4293      	cmp	r3, r2
 800076a:	d3cd      	bcc.n	8000708 <main+0x64>
	  	  timestamp_wwdg = HAL_GetTick();
 800076c:	f000 ffae 	bl	80016cc <HAL_GetTick>
 8000770:	4603      	mov	r3, r0
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <main+0xfc>)
 8000774:	6013      	str	r3, [r2, #0]
		  HAL_WWDG_Refresh(&hwwdg1);
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <main+0x104>)
 8000778:	f00a f95e 	bl	800aa38 <HAL_WWDG_Refresh>
	  if(HAL_GetTick() - timestamp_one >= 1000){
 800077c:	e7c4      	b.n	8000708 <main+0x64>
 800077e:	bf00      	nop
 8000780:	0800c7c8 	.word	0x0800c7c8
 8000784:	240001e4 	.word	0x240001e4
 8000788:	24000198 	.word	0x24000198
 800078c:	240003f0 	.word	0x240003f0
 8000790:	58021000 	.word	0x58021000
 8000794:	0800c7b4 	.word	0x0800c7b4
 8000798:	240003f8 	.word	0x240003f8
 800079c:	24000000 	.word	0x24000000
 80007a0:	240003f4 	.word	0x240003f4
 80007a4:	24000002 	.word	0x24000002
 80007a8:	24000364 	.word	0x24000364

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b09c      	sub	sp, #112	; 0x70
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	224c      	movs	r2, #76	; 0x4c
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f00b f9c8 	bl	800bb50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2220      	movs	r2, #32
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f00b f9c2 	bl	800bb50 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80007cc:	4b30      	ldr	r3, [pc, #192]	; (8000890 <SystemClock_Config+0xe4>)
 80007ce:	f04f 32ff 	mov.w	r2, #4294967295
 80007d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007d6:	2004      	movs	r0, #4
 80007d8:	f002 ffe4 	bl	80037a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <SystemClock_Config+0xe8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a2b      	ldr	r2, [pc, #172]	; (8000894 <SystemClock_Config+0xe8>)
 80007e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b29      	ldr	r3, [pc, #164]	; (8000894 <SystemClock_Config+0xe8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f8:	bf00      	nop
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <SystemClock_Config+0xe8>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000806:	d1f8      	bne.n	80007fa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000808:	2321      	movs	r3, #33	; 0x21
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800080c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000812:	2301      	movs	r3, #1
 8000814:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	2302      	movs	r3, #2
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000822:	2319      	movs	r3, #25
 8000824:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800082a:	2304      	movs	r3, #4
 800082c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000832:	230c      	movs	r3, #12
 8000834:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000836:	2300      	movs	r3, #0
 8000838:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	4618      	mov	r0, r3
 8000844:	f003 f808 	bl	8003858 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800084e:	f000 fb31 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	233f      	movs	r3, #63	; 0x3f
 8000854:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2303      	movs	r3, #3
 8000858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2102      	movs	r1, #2
 8000876:	4618      	mov	r0, r3
 8000878:	f003 fbf2 	bl	8004060 <HAL_RCC_ClockConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000882:	f000 fb17 	bl	8000eb4 <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3770      	adds	r7, #112	; 0x70
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	58024400 	.word	0x58024400
 8000894:	58024800 	.word	0x58024800

08000898 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_SDMMC1_SD_Init+0x34>)
 800089e:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <MX_SDMMC1_SD_Init+0x38>)
 80008a0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_SDMMC1_SD_Init+0x34>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_SDMMC1_SD_Init+0x34>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_SDMMC1_SD_Init+0x34>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <MX_SDMMC1_SD_Init+0x34>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <MX_SDMMC1_SD_Init+0x34>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	24000094 	.word	0x24000094
 80008d0:	52007000 	.word	0x52007000

080008d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_SPI1_Init+0xa4>)
 80008da:	4a28      	ldr	r2, [pc, #160]	; (800097c <MX_SPI1_Init+0xa8>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <MX_SPI1_Init+0xa4>)
 80008e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_SPI1_Init+0xa4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_SPI1_Init+0xa4>)
 80008ee:	2207      	movs	r2, #7
 80008f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_SPI1_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_SPI1_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000900:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000904:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000908:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800090c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_SPI1_Init+0xa4>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000922:	2200      	movs	r2, #0
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000930:	2200      	movs	r2, #0
 8000932:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000936:	2200      	movs	r2, #0
 8000938:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_SPI1_Init+0xa4>)
 800093c:	2200      	movs	r2, #0
 800093e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000942:	2200      	movs	r2, #0
 8000944:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_SPI1_Init+0xa4>)
 800094e:	2200      	movs	r2, #0
 8000950:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_SPI1_Init+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000960:	2200      	movs	r2, #0
 8000962:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_SPI1_Init+0xa4>)
 8000966:	f007 fc13 	bl	8008190 <HAL_SPI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000970:	f000 faa0 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24000110 	.word	0x24000110
 800097c:	40013000 	.word	0x40013000

08000980 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08e      	sub	sp, #56	; 0x38
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a0:	463b      	mov	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009b4:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <MX_TIM3_Init+0xec>)
 80009b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 80009b8:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80009be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80009cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ce:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d4:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009da:	4823      	ldr	r0, [pc, #140]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009dc:	f007 fcf9 	bl	80083d2 <HAL_TIM_Base_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80009e6:	f000 fa65 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f4:	4619      	mov	r1, r3
 80009f6:	481c      	ldr	r0, [pc, #112]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009f8:	f008 f836 	bl	8008a68 <HAL_TIM_ConfigClockSource>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000a02:	f000 fa57 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a06:	4818      	ldr	r0, [pc, #96]	; (8000a68 <MX_TIM3_Init+0xe8>)
 8000a08:	f007 fdaa 	bl	8008560 <HAL_TIM_PWM_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a12:	f000 fa4f 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4810      	ldr	r0, [pc, #64]	; (8000a68 <MX_TIM3_Init+0xe8>)
 8000a26:	f008 fd4b 	bl	80094c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000a30:	f000 fa40 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a34:	2360      	movs	r3, #96	; 0x60
 8000a36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	2208      	movs	r2, #8
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4807      	ldr	r0, [pc, #28]	; (8000a68 <MX_TIM3_Init+0xe8>)
 8000a4c:	f007 fef8 	bl	8008840 <HAL_TIM_PWM_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000a56:	f000 fa2d 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <MX_TIM3_Init+0xe8>)
 8000a5c:	f000 fb64 	bl	8001128 <HAL_TIM_MspPostInit>

}
 8000a60:	bf00      	nop
 8000a62:	3738      	adds	r7, #56	; 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	24000198 	.word	0x24000198
 8000a6c:	40000400 	.word	0x40000400

08000a70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000a76:	4a23      	ldr	r2, [pc, #140]	; (8000b04 <MX_USART3_UART_Init+0x94>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab8:	4811      	ldr	r0, [pc, #68]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000aba:	f008 fd8f 	bl	80095dc <HAL_UART_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ac4:	f000 f9f6 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	480d      	ldr	r0, [pc, #52]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000acc:	f009 fec6 	bl	800a85c <HAL_UARTEx_SetTxFifoThreshold>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ad6:	f000 f9ed 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ada:	2100      	movs	r1, #0
 8000adc:	4808      	ldr	r0, [pc, #32]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000ade:	f009 fefb 	bl	800a8d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ae8:	f000 f9e4 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_USART3_UART_Init+0x90>)
 8000aee:	f009 fe7c 	bl	800a7ea <HAL_UARTEx_DisableFifoMode>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000af8:	f000 f9dc 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	240001e4 	.word	0x240001e4
 8000b04:	40004800 	.word	0x40004800

08000b08 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <MX_WWDG1_Init>:
  * @brief WWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG1_Init 0 */

  /* USER CODE BEGIN WWDG1_Init 1 */

  /* USER CODE END WWDG1_Init 1 */
  hwwdg1.Instance = WWDG1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_WWDG1_Init+0x38>)
 8000b1e:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <MX_WWDG1_Init+0x3c>)
 8000b20:	601a      	str	r2, [r3, #0]
  hwwdg1.Init.Prescaler = WWDG_PRESCALER_128;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_WWDG1_Init+0x38>)
 8000b24:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b28:	605a      	str	r2, [r3, #4]
  hwwdg1.Init.Window = 112;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_WWDG1_Init+0x38>)
 8000b2c:	2270      	movs	r2, #112	; 0x70
 8000b2e:	609a      	str	r2, [r3, #8]
  hwwdg1.Init.Counter = 127;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_WWDG1_Init+0x38>)
 8000b32:	227f      	movs	r2, #127	; 0x7f
 8000b34:	60da      	str	r2, [r3, #12]
  hwwdg1.Init.EWIMode = WWDG_EWI_DISABLE;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_WWDG1_Init+0x38>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg1) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_WWDG1_Init+0x38>)
 8000b3e:	f009 ff57 	bl	800a9f0 <HAL_WWDG_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_WWDG1_Init+0x34>
  {
    Error_Handler();
 8000b48:	f000 f9b4 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG1_Init 2 */

  /* USER CODE END WWDG1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	24000364 	.word	0x24000364
 8000b54:	50003000 	.word	0x50003000

08000b58 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <MX_DMA_Init+0xb0>)
 8000b60:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b64:	4a28      	ldr	r2, [pc, #160]	; (8000c08 <MX_DMA_Init+0xb0>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <MX_DMA_Init+0xb0>)
 8000b70:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000b7e:	4a24      	ldr	r2, [pc, #144]	; (8000c10 <MX_DMA_Init+0xb8>)
 8000b80:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b94:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b9c:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000bb8:	2204      	movs	r2, #4
 8000bba:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_dma_generator0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_dma_generator0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_dma_generator0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000bce:	480f      	ldr	r0, [pc, #60]	; (8000c0c <MX_DMA_Init+0xb4>)
 8000bd0:	f000 febc 	bl	800194c <HAL_DMA_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_DMA_Init+0x86>
  {
    Error_Handler( );
 8000bda:	f000 f96b 	bl	8000eb4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	200c      	movs	r0, #12
 8000be4:	f000 fe7d 	bl	80018e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000be8:	200c      	movs	r0, #12
 8000bea:	f000 fe94 	bl	8001916 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	200d      	movs	r0, #13
 8000bf4:	f000 fe75 	bl	80018e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000bf8:	200d      	movs	r0, #13
 8000bfa:	f000 fe8c 	bl	8001916 <HAL_NVIC_EnableIRQ>

}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	24000378 	.word	0x24000378
 8000c10:	40020010 	.word	0x40020010

08000c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08e      	sub	sp, #56	; 0x38
 8000c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	4b8f      	ldr	r3, [pc, #572]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000c2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c30:	4a8d      	ldr	r2, [pc, #564]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c3a:	4b8b      	ldr	r3, [pc, #556]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000c3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	623b      	str	r3, [r7, #32]
 8000c46:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c48:	4b87      	ldr	r3, [pc, #540]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000c4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c4e:	4a86      	ldr	r2, [pc, #536]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000c50:	f043 0320 	orr.w	r3, r3, #32
 8000c54:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c58:	4b83      	ldr	r3, [pc, #524]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000c5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c5e:	f003 0320 	and.w	r3, r3, #32
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c66:	4b80      	ldr	r3, [pc, #512]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000c68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c6c:	4a7e      	ldr	r2, [pc, #504]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c72:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c76:	4b7c      	ldr	r3, [pc, #496]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000c78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c80:	61bb      	str	r3, [r7, #24]
 8000c82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b78      	ldr	r3, [pc, #480]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000c86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c8a:	4a77      	ldr	r2, [pc, #476]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c94:	4b74      	ldr	r3, [pc, #464]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000c96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b71      	ldr	r3, [pc, #452]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000ca4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ca8:	4a6f      	ldr	r2, [pc, #444]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cb2:	4b6d      	ldr	r3, [pc, #436]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000cb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc0:	4b69      	ldr	r3, [pc, #420]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000cc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cc6:	4a68      	ldr	r2, [pc, #416]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cd0:	4b65      	ldr	r3, [pc, #404]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000cd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cde:	4b62      	ldr	r3, [pc, #392]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000ce0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce4:	4a60      	ldr	r2, [pc, #384]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cee:	4b5e      	ldr	r3, [pc, #376]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000cf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfc:	4b5a      	ldr	r3, [pc, #360]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000cfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d02:	4a59      	ldr	r2, [pc, #356]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000d04:	f043 0310 	orr.w	r3, r3, #16
 8000d08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d0c:	4b56      	ldr	r3, [pc, #344]	; (8000e68 <MX_GPIO_Init+0x254>)
 8000d0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d20:	4852      	ldr	r0, [pc, #328]	; (8000e6c <MX_GPIO_Init+0x258>)
 8000d22:	f002 fcf1 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d2c:	4850      	ldr	r0, [pc, #320]	; (8000e70 <MX_GPIO_Init+0x25c>)
 8000d2e:	f002 fceb 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SDCard_CS_GPIO_Port, SPI1_SDCard_CS_Pin, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d38:	484e      	ldr	r0, [pc, #312]	; (8000e74 <MX_GPIO_Init+0x260>)
 8000d3a:	f002 fce5 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2102      	movs	r1, #2
 8000d42:	484d      	ldr	r0, [pc, #308]	; (8000e78 <MX_GPIO_Init+0x264>)
 8000d44:	f002 fce0 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4847      	ldr	r0, [pc, #284]	; (8000e7c <MX_GPIO_Init+0x268>)
 8000d60:	f002 fb22 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	483b      	ldr	r0, [pc, #236]	; (8000e6c <MX_GPIO_Init+0x258>)
 8000d7e:	f002 fb13 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4835      	ldr	r0, [pc, #212]	; (8000e70 <MX_GPIO_Init+0x25c>)
 8000d9c:	f002 fb04 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SDCard_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_SDCard_CS_Pin;
 8000da0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_SDCard_CS_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	482e      	ldr	r0, [pc, #184]	; (8000e74 <MX_GPIO_Init+0x260>)
 8000dba:	f002 faf5 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	482b      	ldr	r0, [pc, #172]	; (8000e80 <MX_GPIO_Init+0x26c>)
 8000dd4:	f002 fae8 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	4825      	ldr	r0, [pc, #148]	; (8000e84 <MX_GPIO_Init+0x270>)
 8000dee:	f002 fadb 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e04:	230a      	movs	r3, #10
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	481d      	ldr	r0, [pc, #116]	; (8000e84 <MX_GPIO_Init+0x270>)
 8000e10:	f002 faca 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000e14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4815      	ldr	r0, [pc, #84]	; (8000e84 <MX_GPIO_Init+0x270>)
 8000e2e:	f002 fabb 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e32:	2302      	movs	r3, #2
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <MX_GPIO_Init+0x264>)
 8000e4a:	f002 faad 	bl	80033a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	2028      	movs	r0, #40	; 0x28
 8000e54:	f000 fd45 	bl	80018e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e58:	2028      	movs	r0, #40	; 0x28
 8000e5a:	f000 fd5c 	bl	8001916 <HAL_NVIC_EnableIRQ>

}
 8000e5e:	bf00      	nop
 8000e60:	3738      	adds	r7, #56	; 0x38
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58021400 	.word	0x58021400
 8000e70:	58020400 	.word	0x58020400
 8000e74:	58020c00 	.word	0x58020c00
 8000e78:	58021000 	.word	0x58021000
 8000e7c:	58020800 	.word	0x58020800
 8000e80:	58021800 	.word	0x58021800
 8000e84:	58020000 	.word	0x58020000

08000e88 <HAL_GPIO_EXTI_Callback>:
	    f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
}
#endif


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e98:	d103      	bne.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x1a>
			timerefresh_wwdg = 1000;
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x28>)
 8000e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ea0:	801a      	strh	r2, [r3, #0]
		}
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	24000002 	.word	0x24000002

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <Error_Handler+0x8>
	...

08000ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_MspInit+0x30>)
 8000ec8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ecc:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_MspInit+0x30>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_MspInit+0x30>)
 8000ed8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	58024400 	.word	0x58024400

08000ef4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0b8      	sub	sp, #224	; 0xe0
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	22b8      	movs	r2, #184	; 0xb8
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00a fe1b 	bl	800bb50 <memset>
  if(hsd->Instance==SDMMC1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a3b      	ldr	r2, [pc, #236]	; (800100c <HAL_SD_MspInit+0x118>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d16e      	bne.n	8001002 <HAL_SD_MspInit+0x10e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fc20 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000f3e:	f7ff ffb9 	bl	8000eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f42:	4b33      	ldr	r3, [pc, #204]	; (8001010 <HAL_SD_MspInit+0x11c>)
 8000f44:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000f48:	4a31      	ldr	r2, [pc, #196]	; (8001010 <HAL_SD_MspInit+0x11c>)
 8000f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000f52:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <HAL_SD_MspInit+0x11c>)
 8000f54:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <HAL_SD_MspInit+0x11c>)
 8000f62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f66:	4a2a      	ldr	r2, [pc, #168]	; (8001010 <HAL_SD_MspInit+0x11c>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <HAL_SD_MspInit+0x11c>)
 8000f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <HAL_SD_MspInit+0x11c>)
 8000f80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f84:	4a22      	ldr	r2, [pc, #136]	; (8001010 <HAL_SD_MspInit+0x11c>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <HAL_SD_MspInit+0x11c>)
 8000f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000f9c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fb6:	230c      	movs	r3, #12
 8000fb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4814      	ldr	r0, [pc, #80]	; (8001014 <HAL_SD_MspInit+0x120>)
 8000fc4:	f002 f9f0 	bl	80033a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fea:	4619      	mov	r1, r3
 8000fec:	480a      	ldr	r0, [pc, #40]	; (8001018 <HAL_SD_MspInit+0x124>)
 8000fee:	f002 f9db 	bl	80033a8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2031      	movs	r0, #49	; 0x31
 8000ff8:	f000 fc73 	bl	80018e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000ffc:	2031      	movs	r0, #49	; 0x31
 8000ffe:	f000 fc8a 	bl	8001916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001002:	bf00      	nop
 8001004:	37e0      	adds	r7, #224	; 0xe0
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	52007000 	.word	0x52007000
 8001010:	58024400 	.word	0x58024400
 8001014:	58020800 	.word	0x58020800
 8001018:	58020c00 	.word	0x58020c00

0800101c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0b8      	sub	sp, #224	; 0xe0
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	22b8      	movs	r2, #184	; 0xb8
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f00a fd87 	bl	800bb50 <memset>
  if(hspi->Instance==SPI1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a24      	ldr	r2, [pc, #144]	; (80010d8 <HAL_SPI_MspInit+0xbc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d141      	bne.n	80010d0 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001050:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001052:	2300      	movs	r3, #0
 8001054:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fb8c 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001066:	f7ff ff25 	bl	8000eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_SPI_MspInit+0xc0>)
 800106c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001070:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <HAL_SPI_MspInit+0xc0>)
 8001072:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001076:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_SPI_MspInit+0xc0>)
 800107c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_SPI_MspInit+0xc0>)
 800108a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800108e:	4a13      	ldr	r2, [pc, #76]	; (80010dc <HAL_SPI_MspInit+0xc0>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_SPI_MspInit+0xc0>)
 800109a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010a6:	23e0      	movs	r3, #224	; 0xe0
 80010a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010be:	2305      	movs	r3, #5
 80010c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010c8:	4619      	mov	r1, r3
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_SPI_MspInit+0xc4>)
 80010cc:	f002 f96c 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	37e0      	adds	r7, #224	; 0xe0
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40013000 	.word	0x40013000
 80010dc:	58024400 	.word	0x58024400
 80010e0:	58020000 	.word	0x58020000

080010e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <HAL_TIM_Base_MspInit+0x3c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d10e      	bne.n	8001114 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_TIM_Base_MspInit+0x40>)
 80010f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010fc:	4a09      	ldr	r2, [pc, #36]	; (8001124 <HAL_TIM_Base_MspInit+0x40>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <HAL_TIM_Base_MspInit+0x40>)
 8001108:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40000400 	.word	0x40000400
 8001124:	58024400 	.word	0x58024400

08001128 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <HAL_TIM_MspPostInit+0x68>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d11e      	bne.n	8001188 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_TIM_MspPostInit+0x6c>)
 800114c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001150:	4a10      	ldr	r2, [pc, #64]	; (8001194 <HAL_TIM_MspPostInit+0x6c>)
 8001152:	f043 0302 	orr.w	r3, r3, #2
 8001156:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_TIM_MspPostInit+0x6c>)
 800115c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001168:	2301      	movs	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001178:	2302      	movs	r3, #2
 800117a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_TIM_MspPostInit+0x70>)
 8001184:	f002 f910 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40000400 	.word	0x40000400
 8001194:	58024400 	.word	0x58024400
 8001198:	58020400 	.word	0x58020400

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0b8      	sub	sp, #224	; 0xe0
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	22b8      	movs	r2, #184	; 0xb8
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f00a fcc7 	bl	800bb50 <memset>
  if(huart->Instance==USART3)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a52      	ldr	r2, [pc, #328]	; (8001310 <HAL_UART_MspInit+0x174>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	f040 809d 	bne.w	8001308 <HAL_UART_MspInit+0x16c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011ce:	2302      	movs	r3, #2
 80011d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 facb 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80011e8:	f7ff fe64 	bl	8000eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ec:	4b49      	ldr	r3, [pc, #292]	; (8001314 <HAL_UART_MspInit+0x178>)
 80011ee:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011f2:	4a48      	ldr	r2, [pc, #288]	; (8001314 <HAL_UART_MspInit+0x178>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011fc:	4b45      	ldr	r3, [pc, #276]	; (8001314 <HAL_UART_MspInit+0x178>)
 80011fe:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	4b42      	ldr	r3, [pc, #264]	; (8001314 <HAL_UART_MspInit+0x178>)
 800120c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001210:	4a40      	ldr	r2, [pc, #256]	; (8001314 <HAL_UART_MspInit+0x178>)
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800121a:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <HAL_UART_MspInit+0x178>)
 800121c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001228:	f44f 7340 	mov.w	r3, #768	; 0x300
 800122c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001242:	2307      	movs	r3, #7
 8001244:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001248:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800124c:	4619      	mov	r1, r3
 800124e:	4832      	ldr	r0, [pc, #200]	; (8001318 <HAL_UART_MspInit+0x17c>)
 8001250:	f002 f8aa 	bl	80033a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_UART_MspInit+0x180>)
 8001256:	4a32      	ldr	r2, [pc, #200]	; (8001320 <HAL_UART_MspInit+0x184>)
 8001258:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_UART_MspInit+0x180>)
 800125c:	222d      	movs	r2, #45	; 0x2d
 800125e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <HAL_UART_MspInit+0x180>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_UART_MspInit+0x180>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_UART_MspInit+0x180>)
 800126e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001272:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <HAL_UART_MspInit+0x180>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <HAL_UART_MspInit+0x180>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001280:	4b26      	ldr	r3, [pc, #152]	; (800131c <HAL_UART_MspInit+0x180>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <HAL_UART_MspInit+0x180>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <HAL_UART_MspInit+0x180>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001292:	4822      	ldr	r0, [pc, #136]	; (800131c <HAL_UART_MspInit+0x180>)
 8001294:	f000 fb5a 	bl	800194c <HAL_DMA_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 800129e:	f7ff fe09 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a1d      	ldr	r2, [pc, #116]	; (800131c <HAL_UART_MspInit+0x180>)
 80012a6:	67da      	str	r2, [r3, #124]	; 0x7c
 80012a8:	4a1c      	ldr	r2, [pc, #112]	; (800131c <HAL_UART_MspInit+0x180>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <HAL_UART_MspInit+0x188>)
 80012b0:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_UART_MspInit+0x18c>)
 80012b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_UART_MspInit+0x188>)
 80012b6:	222e      	movs	r2, #46	; 0x2e
 80012b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_UART_MspInit+0x188>)
 80012bc:	2240      	movs	r2, #64	; 0x40
 80012be:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_UART_MspInit+0x188>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_UART_MspInit+0x188>)
 80012c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012cc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_UART_MspInit+0x188>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_UART_MspInit+0x188>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_UART_MspInit+0x188>)
 80012dc:	2200      	movs	r2, #0
 80012de:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_UART_MspInit+0x188>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_UART_MspInit+0x188>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <HAL_UART_MspInit+0x188>)
 80012ee:	f000 fb2d 	bl	800194c <HAL_DMA_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 80012f8:	f7ff fddc 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <HAL_UART_MspInit+0x188>)
 8001300:	679a      	str	r2, [r3, #120]	; 0x78
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_UART_MspInit+0x188>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	37e0      	adds	r7, #224	; 0xe0
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40004800 	.word	0x40004800
 8001314:	58024400 	.word	0x58024400
 8001318:	58020c00 	.word	0x58020c00
 800131c:	24000274 	.word	0x24000274
 8001320:	40020028 	.word	0x40020028
 8001324:	240002ec 	.word	0x240002ec
 8001328:	40020040 	.word	0x40020040

0800132c <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_WWDG_MspInit+0x3c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10e      	bne.n	800135c <HAL_WWDG_MspInit+0x30>
  {
  /* USER CODE BEGIN WWDG1_MspInit 0 */

  /* USER CODE END WWDG1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG1_CLK_ENABLE();
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_WWDG_MspInit+0x40>)
 8001340:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001344:	4a09      	ldr	r2, [pc, #36]	; (800136c <HAL_WWDG_MspInit+0x40>)
 8001346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134a:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_WWDG_MspInit+0x40>)
 8001350:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG1_MspInit 1 */

  /* USER CODE END WWDG1_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	50003000 	.word	0x50003000
 800136c:	58024400 	.word	0x58024400

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <NMI_Handler+0x4>

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f972 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <DMA1_Stream1_IRQHandler+0x10>)
 80013ca:	f000 fe4f 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	24000274 	.word	0x24000274

080013d8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <DMA1_Stream2_IRQHandler+0x10>)
 80013de:	f000 fe45 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	240002ec 	.word	0x240002ec

080013ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013f4:	f002 f9bb 	bl	800376e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <SDMMC1_IRQHandler+0x10>)
 8001402:	f005 fcd1 	bl	8006da8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	24000094 	.word	0x24000094

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f00a fb4e 	bl	800bae0 <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	24100000 	.word	0x24100000
 8001470:	00000800 	.word	0x00000800
 8001474:	2400045c 	.word	0x2400045c
 8001478:	24000490 	.word	0x24000490

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <SystemInit+0xd0>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a31      	ldr	r2, [pc, #196]	; (800154c <SystemInit+0xd0>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001490:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <SystemInit+0xd4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	2b02      	cmp	r3, #2
 800149a:	d807      	bhi.n	80014ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800149c:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <SystemInit+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f023 030f 	bic.w	r3, r3, #15
 80014a4:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <SystemInit+0xd4>)
 80014a6:	f043 0303 	orr.w	r3, r3, #3
 80014aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <SystemInit+0xd8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a28      	ldr	r2, [pc, #160]	; (8001554 <SystemInit+0xd8>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <SystemInit+0xd8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014be:	4b25      	ldr	r3, [pc, #148]	; (8001554 <SystemInit+0xd8>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4924      	ldr	r1, [pc, #144]	; (8001554 <SystemInit+0xd8>)
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <SystemInit+0xdc>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <SystemInit+0xd4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <SystemInit+0xd4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 030f 	bic.w	r3, r3, #15
 80014de:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <SystemInit+0xd4>)
 80014e0:	f043 0303 	orr.w	r3, r3, #3
 80014e4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <SystemInit+0xd8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <SystemInit+0xd8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <SystemInit+0xd8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <SystemInit+0xd8>)
 80014fa:	4a18      	ldr	r2, [pc, #96]	; (800155c <SystemInit+0xe0>)
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <SystemInit+0xd8>)
 8001500:	4a17      	ldr	r2, [pc, #92]	; (8001560 <SystemInit+0xe4>)
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <SystemInit+0xd8>)
 8001506:	4a17      	ldr	r2, [pc, #92]	; (8001564 <SystemInit+0xe8>)
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <SystemInit+0xd8>)
 800150c:	2200      	movs	r2, #0
 800150e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <SystemInit+0xd8>)
 8001512:	4a14      	ldr	r2, [pc, #80]	; (8001564 <SystemInit+0xe8>)
 8001514:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <SystemInit+0xd8>)
 8001518:	2200      	movs	r2, #0
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <SystemInit+0xd8>)
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <SystemInit+0xe8>)
 8001520:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <SystemInit+0xd8>)
 8001524:	2200      	movs	r2, #0
 8001526:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <SystemInit+0xd8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a09      	ldr	r2, [pc, #36]	; (8001554 <SystemInit+0xd8>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <SystemInit+0xd8>)
 8001536:	2200      	movs	r2, #0
 8001538:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <SystemInit+0xec>)
 800153c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001540:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00
 8001550:	52002000 	.word	0x52002000
 8001554:	58024400 	.word	0x58024400
 8001558:	eaf6ed7f 	.word	0xeaf6ed7f
 800155c:	02020200 	.word	0x02020200
 8001560:	01ff0000 	.word	0x01ff0000
 8001564:	01010280 	.word	0x01010280
 8001568:	52004000 	.word	0x52004000

0800156c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800156c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001570:	f7ff ff84 	bl	800147c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001576:	490d      	ldr	r1, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800158c:	4c0a      	ldr	r4, [pc, #40]	; (80015b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800159a:	f00a faa7 	bl	800baec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159e:	f7ff f881 	bl	80006a4 <main>
  bx  lr
 80015a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80015a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015ac:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80015b0:	0800c8d0 	.word	0x0800c8d0
  ldr r2, =_sbss
 80015b4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80015b8:	24000490 	.word	0x24000490

080015bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC_IRQHandler>
	...

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c6:	2003      	movs	r0, #3
 80015c8:	f000 f980 	bl	80018cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80015cc:	f002 fefe 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_Init+0x68>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	4913      	ldr	r1, [pc, #76]	; (800162c <HAL_Init+0x6c>)
 80015de:	5ccb      	ldrb	r3, [r1, r3]
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	fa22 f303 	lsr.w	r3, r2, r3
 80015e8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_Init+0x68>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_Init+0x6c>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <HAL_Init+0x70>)
 8001602:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_Init+0x74>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160a:	2000      	movs	r0, #0
 800160c:	f000 f814 	bl	8001638 <HAL_InitTick>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e002      	b.n	8001620 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800161a:	f7ff fc51 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	58024400 	.word	0x58024400
 800162c:	0800c838 	.word	0x0800c838
 8001630:	24000008 	.word	0x24000008
 8001634:	24000004 	.word	0x24000004

08001638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_InitTick+0x60>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e021      	b.n	8001690 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_InitTick+0x64>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_InitTick+0x60>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	fbb3 f3f1 	udiv	r3, r3, r1
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f965 	bl	8001932 <HAL_SYSTICK_Config>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00e      	b.n	8001690 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d80a      	bhi.n	800168e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001678:	2200      	movs	r2, #0
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f000 f92f 	bl	80018e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_InitTick+0x68>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	24000010 	.word	0x24000010
 800169c:	24000004 	.word	0x24000004
 80016a0:	2400000c 	.word	0x2400000c

080016a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x20>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x24>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_IncTick+0x24>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	24000010 	.word	0x24000010
 80016c8:	24000460 	.word	0x24000460

080016cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_GetTick+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	24000460 	.word	0x24000460

080016e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff ffee 	bl	80016cc <HAL_GetTick>
 80016f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d005      	beq.n	800170a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_Delay+0x44>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170a:	bf00      	nop
 800170c:	f7ff ffde 	bl	80016cc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d8f7      	bhi.n	800170c <HAL_Delay+0x28>
  {
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	24000010 	.word	0x24000010

0800172c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <__NVIC_SetPriorityGrouping+0x40>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001748:	4013      	ands	r3, r2
 800174a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	4313      	orrs	r3, r2
 8001758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175a:	4a04      	ldr	r2, [pc, #16]	; (800176c <__NVIC_SetPriorityGrouping+0x40>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	60d3      	str	r3, [r2, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00
 8001770:	05fa0000 	.word	0x05fa0000

08001774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <__NVIC_GetPriorityGrouping+0x18>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	f003 0307 	and.w	r3, r3, #7
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800179a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db0b      	blt.n	80017ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	f003 021f 	and.w	r2, r3, #31
 80017a8:	4907      	ldr	r1, [pc, #28]	; (80017c8 <__NVIC_EnableIRQ+0x38>)
 80017aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	2001      	movs	r0, #1
 80017b2:	fa00 f202 	lsl.w	r2, r0, r2
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100

080017cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db0a      	blt.n	80017f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <__NVIC_SetPriority+0x4c>)
 80017e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	440b      	add	r3, r1
 80017f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f4:	e00a      	b.n	800180c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	; (800181c <__NVIC_SetPriority+0x50>)
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	3b04      	subs	r3, #4
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	440b      	add	r3, r1
 800180a:	761a      	strb	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f1c3 0307 	rsb	r3, r3, #7
 800183a:	2b04      	cmp	r3, #4
 800183c:	bf28      	it	cs
 800183e:	2304      	movcs	r3, #4
 8001840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3304      	adds	r3, #4
 8001846:	2b06      	cmp	r3, #6
 8001848:	d902      	bls.n	8001850 <NVIC_EncodePriority+0x30>
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3b03      	subs	r3, #3
 800184e:	e000      	b.n	8001852 <NVIC_EncodePriority+0x32>
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	401a      	ands	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43d9      	mvns	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	4313      	orrs	r3, r2
         );
}
 800187a:	4618      	mov	r0, r3
 800187c:	3724      	adds	r7, #36	; 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001898:	d301      	bcc.n	800189e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189a:	2301      	movs	r3, #1
 800189c:	e00f      	b.n	80018be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <SysTick_Config+0x40>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a6:	210f      	movs	r1, #15
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f7ff ff8e 	bl	80017cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <SysTick_Config+0x40>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SysTick_Config+0x40>)
 80018b8:	2207      	movs	r2, #7
 80018ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	e000e010 	.word	0xe000e010

080018cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff29 	bl	800172c <__NVIC_SetPriorityGrouping>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff40 	bl	8001774 <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff90 	bl	8001820 <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5f 	bl	80017cc <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff33 	bl	8001790 <__NVIC_EnableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffa4 	bl	8001888 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff feba 	bl	80016cc <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e37f      	b.n	8002064 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a66      	ldr	r2, [pc, #408]	; (8001b04 <HAL_DMA_Init+0x1b8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d04a      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a65      	ldr	r2, [pc, #404]	; (8001b08 <HAL_DMA_Init+0x1bc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d045      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a63      	ldr	r2, [pc, #396]	; (8001b0c <HAL_DMA_Init+0x1c0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d040      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a62      	ldr	r2, [pc, #392]	; (8001b10 <HAL_DMA_Init+0x1c4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d03b      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a60      	ldr	r2, [pc, #384]	; (8001b14 <HAL_DMA_Init+0x1c8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d036      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a5f      	ldr	r2, [pc, #380]	; (8001b18 <HAL_DMA_Init+0x1cc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d031      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a5d      	ldr	r2, [pc, #372]	; (8001b1c <HAL_DMA_Init+0x1d0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d02c      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a5c      	ldr	r2, [pc, #368]	; (8001b20 <HAL_DMA_Init+0x1d4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d027      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5a      	ldr	r2, [pc, #360]	; (8001b24 <HAL_DMA_Init+0x1d8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d022      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a59      	ldr	r2, [pc, #356]	; (8001b28 <HAL_DMA_Init+0x1dc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d01d      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a57      	ldr	r2, [pc, #348]	; (8001b2c <HAL_DMA_Init+0x1e0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d018      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a56      	ldr	r2, [pc, #344]	; (8001b30 <HAL_DMA_Init+0x1e4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d013      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a54      	ldr	r2, [pc, #336]	; (8001b34 <HAL_DMA_Init+0x1e8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00e      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a53      	ldr	r2, [pc, #332]	; (8001b38 <HAL_DMA_Init+0x1ec>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d009      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a51      	ldr	r2, [pc, #324]	; (8001b3c <HAL_DMA_Init+0x1f0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d004      	beq.n	8001a04 <HAL_DMA_Init+0xb8>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a50      	ldr	r2, [pc, #320]	; (8001b40 <HAL_DMA_Init+0x1f4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_DMA_Init+0xbc>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_DMA_Init+0xbe>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 813c 	beq.w	8001c88 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a37      	ldr	r2, [pc, #220]	; (8001b04 <HAL_DMA_Init+0x1b8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d04a      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a36      	ldr	r2, [pc, #216]	; (8001b08 <HAL_DMA_Init+0x1bc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d045      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <HAL_DMA_Init+0x1c0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d040      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a33      	ldr	r2, [pc, #204]	; (8001b10 <HAL_DMA_Init+0x1c4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d03b      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a31      	ldr	r2, [pc, #196]	; (8001b14 <HAL_DMA_Init+0x1c8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d036      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a30      	ldr	r2, [pc, #192]	; (8001b18 <HAL_DMA_Init+0x1cc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d031      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2e      	ldr	r2, [pc, #184]	; (8001b1c <HAL_DMA_Init+0x1d0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d02c      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	; (8001b20 <HAL_DMA_Init+0x1d4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d027      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2b      	ldr	r2, [pc, #172]	; (8001b24 <HAL_DMA_Init+0x1d8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d022      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a2a      	ldr	r2, [pc, #168]	; (8001b28 <HAL_DMA_Init+0x1dc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d01d      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <HAL_DMA_Init+0x1e0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d018      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <HAL_DMA_Init+0x1e4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d013      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <HAL_DMA_Init+0x1e8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00e      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <HAL_DMA_Init+0x1ec>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d009      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_DMA_Init+0x1f0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d004      	beq.n	8001ac0 <HAL_DMA_Init+0x174>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <HAL_DMA_Init+0x1f4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d108      	bne.n	8001ad2 <HAL_DMA_Init+0x186>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	e007      	b.n	8001ae2 <HAL_DMA_Init+0x196>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0201 	bic.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ae2:	e02f      	b.n	8001b44 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ae4:	f7ff fdf2 	bl	80016cc <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d928      	bls.n	8001b44 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2220      	movs	r2, #32
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2203      	movs	r2, #3
 8001afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e2af      	b.n	8002064 <HAL_DMA_Init+0x718>
 8001b04:	40020010 	.word	0x40020010
 8001b08:	40020028 	.word	0x40020028
 8001b0c:	40020040 	.word	0x40020040
 8001b10:	40020058 	.word	0x40020058
 8001b14:	40020070 	.word	0x40020070
 8001b18:	40020088 	.word	0x40020088
 8001b1c:	400200a0 	.word	0x400200a0
 8001b20:	400200b8 	.word	0x400200b8
 8001b24:	40020410 	.word	0x40020410
 8001b28:	40020428 	.word	0x40020428
 8001b2c:	40020440 	.word	0x40020440
 8001b30:	40020458 	.word	0x40020458
 8001b34:	40020470 	.word	0x40020470
 8001b38:	40020488 	.word	0x40020488
 8001b3c:	400204a0 	.word	0x400204a0
 8001b40:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1c8      	bne.n	8001ae4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <HAL_DMA_Init+0x3e0>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b76:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b82:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d107      	bne.n	8001ba8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b28      	cmp	r3, #40	; 0x28
 8001bae:	d903      	bls.n	8001bb8 <HAL_DMA_Init+0x26c>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8001bb6:	d91f      	bls.n	8001bf8 <HAL_DMA_Init+0x2ac>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b3e      	cmp	r3, #62	; 0x3e
 8001bbe:	d903      	bls.n	8001bc8 <HAL_DMA_Init+0x27c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b42      	cmp	r3, #66	; 0x42
 8001bc6:	d917      	bls.n	8001bf8 <HAL_DMA_Init+0x2ac>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b46      	cmp	r3, #70	; 0x46
 8001bce:	d903      	bls.n	8001bd8 <HAL_DMA_Init+0x28c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b48      	cmp	r3, #72	; 0x48
 8001bd6:	d90f      	bls.n	8001bf8 <HAL_DMA_Init+0x2ac>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b4e      	cmp	r3, #78	; 0x4e
 8001bde:	d903      	bls.n	8001be8 <HAL_DMA_Init+0x29c>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b52      	cmp	r3, #82	; 0x52
 8001be6:	d907      	bls.n	8001bf8 <HAL_DMA_Init+0x2ac>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b73      	cmp	r3, #115	; 0x73
 8001bee:	d905      	bls.n	8001bfc <HAL_DMA_Init+0x2b0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b77      	cmp	r3, #119	; 0x77
 8001bf6:	d801      	bhi.n	8001bfc <HAL_DMA_Init+0x2b0>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_DMA_Init+0x2b2>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c08:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f023 0307 	bic.w	r3, r3, #7
 8001c20:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d117      	bne.n	8001c64 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00e      	beq.n	8001c64 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f001 fa24 	bl	8003094 <DMA_CheckFifoParam>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d008      	beq.n	8001c64 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e1ff      	b.n	8002064 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f001 f95f 	bl	8002f30 <DMA_CalcBaseAndBitshift>
 8001c72:	4603      	mov	r3, r0
 8001c74:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	223f      	movs	r2, #63	; 0x3f
 8001c80:	409a      	lsls	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	e0fe      	b.n	8001e86 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a28      	ldr	r2, [pc, #160]	; (8001d30 <HAL_DMA_Init+0x3e4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d04a      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a27      	ldr	r2, [pc, #156]	; (8001d34 <HAL_DMA_Init+0x3e8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d045      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a25      	ldr	r2, [pc, #148]	; (8001d38 <HAL_DMA_Init+0x3ec>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d040      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a24      	ldr	r2, [pc, #144]	; (8001d3c <HAL_DMA_Init+0x3f0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d03b      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a22      	ldr	r2, [pc, #136]	; (8001d40 <HAL_DMA_Init+0x3f4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d036      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <HAL_DMA_Init+0x3f8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d031      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_DMA_Init+0x3fc>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d02c      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <HAL_DMA_Init+0x400>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d027      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <HAL_DMA_Init+0x404>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d022      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1b      	ldr	r2, [pc, #108]	; (8001d54 <HAL_DMA_Init+0x408>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d01d      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a19      	ldr	r2, [pc, #100]	; (8001d58 <HAL_DMA_Init+0x40c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d018      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <HAL_DMA_Init+0x410>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d013      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <HAL_DMA_Init+0x414>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00e      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <HAL_DMA_Init+0x418>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d009      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <HAL_DMA_Init+0x41c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d004      	beq.n	8001d28 <HAL_DMA_Init+0x3dc>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_DMA_Init+0x420>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d123      	bne.n	8001d70 <HAL_DMA_Init+0x424>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e022      	b.n	8001d72 <HAL_DMA_Init+0x426>
 8001d2c:	fe10803f 	.word	0xfe10803f
 8001d30:	48022c08 	.word	0x48022c08
 8001d34:	48022c1c 	.word	0x48022c1c
 8001d38:	48022c30 	.word	0x48022c30
 8001d3c:	48022c44 	.word	0x48022c44
 8001d40:	48022c58 	.word	0x48022c58
 8001d44:	48022c6c 	.word	0x48022c6c
 8001d48:	48022c80 	.word	0x48022c80
 8001d4c:	48022c94 	.word	0x48022c94
 8001d50:	58025408 	.word	0x58025408
 8001d54:	5802541c 	.word	0x5802541c
 8001d58:	58025430 	.word	0x58025430
 8001d5c:	58025444 	.word	0x58025444
 8001d60:	58025458 	.word	0x58025458
 8001d64:	5802546c 	.word	0x5802546c
 8001d68:	58025480 	.word	0x58025480
 8001d6c:	58025494 	.word	0x58025494
 8001d70:	2300      	movs	r3, #0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d07e      	beq.n	8001e74 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a80      	ldr	r2, [pc, #512]	; (8001f7c <HAL_DMA_Init+0x630>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d021      	beq.n	8001dc4 <HAL_DMA_Init+0x478>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a7e      	ldr	r2, [pc, #504]	; (8001f80 <HAL_DMA_Init+0x634>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01c      	beq.n	8001dc4 <HAL_DMA_Init+0x478>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a7d      	ldr	r2, [pc, #500]	; (8001f84 <HAL_DMA_Init+0x638>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d017      	beq.n	8001dc4 <HAL_DMA_Init+0x478>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a7b      	ldr	r2, [pc, #492]	; (8001f88 <HAL_DMA_Init+0x63c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d012      	beq.n	8001dc4 <HAL_DMA_Init+0x478>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7a      	ldr	r2, [pc, #488]	; (8001f8c <HAL_DMA_Init+0x640>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00d      	beq.n	8001dc4 <HAL_DMA_Init+0x478>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a78      	ldr	r2, [pc, #480]	; (8001f90 <HAL_DMA_Init+0x644>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d008      	beq.n	8001dc4 <HAL_DMA_Init+0x478>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a77      	ldr	r2, [pc, #476]	; (8001f94 <HAL_DMA_Init+0x648>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <HAL_DMA_Init+0x478>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a75      	ldr	r2, [pc, #468]	; (8001f98 <HAL_DMA_Init+0x64c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4b6e      	ldr	r3, [pc, #440]	; (8001f9c <HAL_DMA_Init+0x650>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b40      	cmp	r3, #64	; 0x40
 8001dec:	d008      	beq.n	8001e00 <HAL_DMA_Init+0x4b4>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b80      	cmp	r3, #128	; 0x80
 8001df4:	d102      	bne.n	8001dfc <HAL_DMA_Init+0x4b0>
 8001df6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dfa:	e002      	b.n	8001e02 <HAL_DMA_Init+0x4b6>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e000      	b.n	8001e02 <HAL_DMA_Init+0x4b6>
 8001e00:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68d2      	ldr	r2, [r2, #12]
 8001e06:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e30:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b56      	ldr	r3, [pc, #344]	; (8001fa0 <HAL_DMA_Init+0x654>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a56      	ldr	r2, [pc, #344]	; (8001fa4 <HAL_DMA_Init+0x658>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	009a      	lsls	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f001 f869 	bl	8002f30 <DMA_CalcBaseAndBitshift>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	e008      	b.n	8001e86 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2240      	movs	r2, #64	; 0x40
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0ee      	b.n	8002064 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a47      	ldr	r2, [pc, #284]	; (8001fa8 <HAL_DMA_Init+0x65c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d072      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a45      	ldr	r2, [pc, #276]	; (8001fac <HAL_DMA_Init+0x660>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d06d      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a44      	ldr	r2, [pc, #272]	; (8001fb0 <HAL_DMA_Init+0x664>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d068      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a42      	ldr	r2, [pc, #264]	; (8001fb4 <HAL_DMA_Init+0x668>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d063      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a41      	ldr	r2, [pc, #260]	; (8001fb8 <HAL_DMA_Init+0x66c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d05e      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a3f      	ldr	r2, [pc, #252]	; (8001fbc <HAL_DMA_Init+0x670>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d059      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a3e      	ldr	r2, [pc, #248]	; (8001fc0 <HAL_DMA_Init+0x674>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d054      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a3c      	ldr	r2, [pc, #240]	; (8001fc4 <HAL_DMA_Init+0x678>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d04f      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a3b      	ldr	r2, [pc, #236]	; (8001fc8 <HAL_DMA_Init+0x67c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d04a      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a39      	ldr	r2, [pc, #228]	; (8001fcc <HAL_DMA_Init+0x680>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d045      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a38      	ldr	r2, [pc, #224]	; (8001fd0 <HAL_DMA_Init+0x684>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d040      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a36      	ldr	r2, [pc, #216]	; (8001fd4 <HAL_DMA_Init+0x688>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d03b      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a35      	ldr	r2, [pc, #212]	; (8001fd8 <HAL_DMA_Init+0x68c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d036      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <HAL_DMA_Init+0x690>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d031      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a32      	ldr	r2, [pc, #200]	; (8001fe0 <HAL_DMA_Init+0x694>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d02c      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a30      	ldr	r2, [pc, #192]	; (8001fe4 <HAL_DMA_Init+0x698>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d027      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <HAL_DMA_Init+0x630>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d022      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <HAL_DMA_Init+0x634>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01d      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <HAL_DMA_Init+0x638>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d018      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_DMA_Init+0x63c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <HAL_DMA_Init+0x640>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d00e      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <HAL_DMA_Init+0x644>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <HAL_DMA_Init+0x648>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_DMA_Init+0x62a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a09      	ldr	r2, [pc, #36]	; (8001f98 <HAL_DMA_Init+0x64c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d138      	bne.n	8001fe8 <HAL_DMA_Init+0x69c>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e037      	b.n	8001fea <HAL_DMA_Init+0x69e>
 8001f7a:	bf00      	nop
 8001f7c:	58025408 	.word	0x58025408
 8001f80:	5802541c 	.word	0x5802541c
 8001f84:	58025430 	.word	0x58025430
 8001f88:	58025444 	.word	0x58025444
 8001f8c:	58025458 	.word	0x58025458
 8001f90:	5802546c 	.word	0x5802546c
 8001f94:	58025480 	.word	0x58025480
 8001f98:	58025494 	.word	0x58025494
 8001f9c:	fffe000f 	.word	0xfffe000f
 8001fa0:	a7fdabf8 	.word	0xa7fdabf8
 8001fa4:	cccccccd 	.word	0xcccccccd
 8001fa8:	40020010 	.word	0x40020010
 8001fac:	40020028 	.word	0x40020028
 8001fb0:	40020040 	.word	0x40020040
 8001fb4:	40020058 	.word	0x40020058
 8001fb8:	40020070 	.word	0x40020070
 8001fbc:	40020088 	.word	0x40020088
 8001fc0:	400200a0 	.word	0x400200a0
 8001fc4:	400200b8 	.word	0x400200b8
 8001fc8:	40020410 	.word	0x40020410
 8001fcc:	40020428 	.word	0x40020428
 8001fd0:	40020440 	.word	0x40020440
 8001fd4:	40020458 	.word	0x40020458
 8001fd8:	40020470 	.word	0x40020470
 8001fdc:	40020488 	.word	0x40020488
 8001fe0:	400204a0 	.word	0x400204a0
 8001fe4:	400204b8 	.word	0x400204b8
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d032      	beq.n	8002054 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f001 f8cc 	bl	800318c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b80      	cmp	r3, #128	; 0x80
 8001ffa:	d102      	bne.n	8002002 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002016:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_DMA_Init+0x6f6>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b08      	cmp	r3, #8
 8002026:	d80c      	bhi.n	8002042 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f001 f949 	bl	80032c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	e008      	b.n	8002054 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002078:	4b67      	ldr	r3, [pc, #412]	; (8002218 <HAL_DMA_IRQHandler+0x1ac>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a67      	ldr	r2, [pc, #412]	; (800221c <HAL_DMA_IRQHandler+0x1b0>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0a9b      	lsrs	r3, r3, #10
 8002084:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a5f      	ldr	r2, [pc, #380]	; (8002220 <HAL_DMA_IRQHandler+0x1b4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d04a      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a5d      	ldr	r2, [pc, #372]	; (8002224 <HAL_DMA_IRQHandler+0x1b8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d045      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a5c      	ldr	r2, [pc, #368]	; (8002228 <HAL_DMA_IRQHandler+0x1bc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d040      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a5a      	ldr	r2, [pc, #360]	; (800222c <HAL_DMA_IRQHandler+0x1c0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d03b      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a59      	ldr	r2, [pc, #356]	; (8002230 <HAL_DMA_IRQHandler+0x1c4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d036      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a57      	ldr	r2, [pc, #348]	; (8002234 <HAL_DMA_IRQHandler+0x1c8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d031      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a56      	ldr	r2, [pc, #344]	; (8002238 <HAL_DMA_IRQHandler+0x1cc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d02c      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a54      	ldr	r2, [pc, #336]	; (800223c <HAL_DMA_IRQHandler+0x1d0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d027      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a53      	ldr	r2, [pc, #332]	; (8002240 <HAL_DMA_IRQHandler+0x1d4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d022      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a51      	ldr	r2, [pc, #324]	; (8002244 <HAL_DMA_IRQHandler+0x1d8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01d      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a50      	ldr	r2, [pc, #320]	; (8002248 <HAL_DMA_IRQHandler+0x1dc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d018      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a4e      	ldr	r2, [pc, #312]	; (800224c <HAL_DMA_IRQHandler+0x1e0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <HAL_DMA_IRQHandler+0x1e4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00e      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a4b      	ldr	r2, [pc, #300]	; (8002254 <HAL_DMA_IRQHandler+0x1e8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d009      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a4a      	ldr	r2, [pc, #296]	; (8002258 <HAL_DMA_IRQHandler+0x1ec>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d004      	beq.n	800213e <HAL_DMA_IRQHandler+0xd2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a48      	ldr	r2, [pc, #288]	; (800225c <HAL_DMA_IRQHandler+0x1f0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d101      	bne.n	8002142 <HAL_DMA_IRQHandler+0xd6>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_DMA_IRQHandler+0xd8>
 8002142:	2300      	movs	r3, #0
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 842b 	beq.w	80029a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	2208      	movs	r2, #8
 8002154:	409a      	lsls	r2, r3
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80a2 	beq.w	80022a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2e      	ldr	r2, [pc, #184]	; (8002220 <HAL_DMA_IRQHandler+0x1b4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d04a      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2d      	ldr	r2, [pc, #180]	; (8002224 <HAL_DMA_IRQHandler+0x1b8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d045      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2b      	ldr	r2, [pc, #172]	; (8002228 <HAL_DMA_IRQHandler+0x1bc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d040      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2a      	ldr	r2, [pc, #168]	; (800222c <HAL_DMA_IRQHandler+0x1c0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d03b      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a28      	ldr	r2, [pc, #160]	; (8002230 <HAL_DMA_IRQHandler+0x1c4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d036      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a27      	ldr	r2, [pc, #156]	; (8002234 <HAL_DMA_IRQHandler+0x1c8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d031      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a25      	ldr	r2, [pc, #148]	; (8002238 <HAL_DMA_IRQHandler+0x1cc>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d02c      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a24      	ldr	r2, [pc, #144]	; (800223c <HAL_DMA_IRQHandler+0x1d0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d027      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a22      	ldr	r2, [pc, #136]	; (8002240 <HAL_DMA_IRQHandler+0x1d4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d022      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a21      	ldr	r2, [pc, #132]	; (8002244 <HAL_DMA_IRQHandler+0x1d8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d01d      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <HAL_DMA_IRQHandler+0x1dc>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d018      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a1e      	ldr	r2, [pc, #120]	; (800224c <HAL_DMA_IRQHandler+0x1e0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d013      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <HAL_DMA_IRQHandler+0x1e4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00e      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <HAL_DMA_IRQHandler+0x1e8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d009      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <HAL_DMA_IRQHandler+0x1ec>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <HAL_DMA_IRQHandler+0x194>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_DMA_IRQHandler+0x1f0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d12f      	bne.n	8002260 <HAL_DMA_IRQHandler+0x1f4>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	bf14      	ite	ne
 800220e:	2301      	movne	r3, #1
 8002210:	2300      	moveq	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	e02e      	b.n	8002274 <HAL_DMA_IRQHandler+0x208>
 8002216:	bf00      	nop
 8002218:	24000004 	.word	0x24000004
 800221c:	1b4e81b5 	.word	0x1b4e81b5
 8002220:	40020010 	.word	0x40020010
 8002224:	40020028 	.word	0x40020028
 8002228:	40020040 	.word	0x40020040
 800222c:	40020058 	.word	0x40020058
 8002230:	40020070 	.word	0x40020070
 8002234:	40020088 	.word	0x40020088
 8002238:	400200a0 	.word	0x400200a0
 800223c:	400200b8 	.word	0x400200b8
 8002240:	40020410 	.word	0x40020410
 8002244:	40020428 	.word	0x40020428
 8002248:	40020440 	.word	0x40020440
 800224c:	40020458 	.word	0x40020458
 8002250:	40020470 	.word	0x40020470
 8002254:	40020488 	.word	0x40020488
 8002258:	400204a0 	.word	0x400204a0
 800225c:	400204b8 	.word	0x400204b8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	bf14      	ite	ne
 800226e:	2301      	movne	r3, #1
 8002270:	2300      	moveq	r3, #0
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d015      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0204 	bic.w	r2, r2, #4
 8002286:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	2208      	movs	r2, #8
 8002292:	409a      	lsls	r2, r3
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d06e      	beq.n	8002398 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a69      	ldr	r2, [pc, #420]	; (8002464 <HAL_DMA_IRQHandler+0x3f8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d04a      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a67      	ldr	r2, [pc, #412]	; (8002468 <HAL_DMA_IRQHandler+0x3fc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d045      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a66      	ldr	r2, [pc, #408]	; (800246c <HAL_DMA_IRQHandler+0x400>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d040      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a64      	ldr	r2, [pc, #400]	; (8002470 <HAL_DMA_IRQHandler+0x404>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d03b      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a63      	ldr	r2, [pc, #396]	; (8002474 <HAL_DMA_IRQHandler+0x408>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d036      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a61      	ldr	r2, [pc, #388]	; (8002478 <HAL_DMA_IRQHandler+0x40c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d031      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a60      	ldr	r2, [pc, #384]	; (800247c <HAL_DMA_IRQHandler+0x410>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d02c      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a5e      	ldr	r2, [pc, #376]	; (8002480 <HAL_DMA_IRQHandler+0x414>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d027      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a5d      	ldr	r2, [pc, #372]	; (8002484 <HAL_DMA_IRQHandler+0x418>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d022      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a5b      	ldr	r2, [pc, #364]	; (8002488 <HAL_DMA_IRQHandler+0x41c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01d      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a5a      	ldr	r2, [pc, #360]	; (800248c <HAL_DMA_IRQHandler+0x420>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d018      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a58      	ldr	r2, [pc, #352]	; (8002490 <HAL_DMA_IRQHandler+0x424>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a57      	ldr	r2, [pc, #348]	; (8002494 <HAL_DMA_IRQHandler+0x428>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00e      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a55      	ldr	r2, [pc, #340]	; (8002498 <HAL_DMA_IRQHandler+0x42c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d009      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a54      	ldr	r2, [pc, #336]	; (800249c <HAL_DMA_IRQHandler+0x430>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d004      	beq.n	800235a <HAL_DMA_IRQHandler+0x2ee>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <HAL_DMA_IRQHandler+0x434>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d10a      	bne.n	8002370 <HAL_DMA_IRQHandler+0x304>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf14      	ite	ne
 8002368:	2301      	movne	r3, #1
 800236a:	2300      	moveq	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	e003      	b.n	8002378 <HAL_DMA_IRQHandler+0x30c>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	2201      	movs	r2, #1
 8002386:	409a      	lsls	r2, r3
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	f043 0202 	orr.w	r2, r3, #2
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2204      	movs	r2, #4
 80023a2:	409a      	lsls	r2, r3
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 808f 	beq.w	80024cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2c      	ldr	r2, [pc, #176]	; (8002464 <HAL_DMA_IRQHandler+0x3f8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d04a      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2a      	ldr	r2, [pc, #168]	; (8002468 <HAL_DMA_IRQHandler+0x3fc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d045      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a29      	ldr	r2, [pc, #164]	; (800246c <HAL_DMA_IRQHandler+0x400>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d040      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a27      	ldr	r2, [pc, #156]	; (8002470 <HAL_DMA_IRQHandler+0x404>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d03b      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a26      	ldr	r2, [pc, #152]	; (8002474 <HAL_DMA_IRQHandler+0x408>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d036      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a24      	ldr	r2, [pc, #144]	; (8002478 <HAL_DMA_IRQHandler+0x40c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d031      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a23      	ldr	r2, [pc, #140]	; (800247c <HAL_DMA_IRQHandler+0x410>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d02c      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a21      	ldr	r2, [pc, #132]	; (8002480 <HAL_DMA_IRQHandler+0x414>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d027      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a20      	ldr	r2, [pc, #128]	; (8002484 <HAL_DMA_IRQHandler+0x418>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d022      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_DMA_IRQHandler+0x41c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01d      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_DMA_IRQHandler+0x420>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d018      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <HAL_DMA_IRQHandler+0x424>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <HAL_DMA_IRQHandler+0x428>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00e      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_DMA_IRQHandler+0x42c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d009      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <HAL_DMA_IRQHandler+0x430>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d004      	beq.n	800244e <HAL_DMA_IRQHandler+0x3e2>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <HAL_DMA_IRQHandler+0x434>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d12a      	bne.n	80024a4 <HAL_DMA_IRQHandler+0x438>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e023      	b.n	80024ac <HAL_DMA_IRQHandler+0x440>
 8002464:	40020010 	.word	0x40020010
 8002468:	40020028 	.word	0x40020028
 800246c:	40020040 	.word	0x40020040
 8002470:	40020058 	.word	0x40020058
 8002474:	40020070 	.word	0x40020070
 8002478:	40020088 	.word	0x40020088
 800247c:	400200a0 	.word	0x400200a0
 8002480:	400200b8 	.word	0x400200b8
 8002484:	40020410 	.word	0x40020410
 8002488:	40020428 	.word	0x40020428
 800248c:	40020440 	.word	0x40020440
 8002490:	40020458 	.word	0x40020458
 8002494:	40020470 	.word	0x40020470
 8002498:	40020488 	.word	0x40020488
 800249c:	400204a0 	.word	0x400204a0
 80024a0:	400204b8 	.word	0x400204b8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	2204      	movs	r2, #4
 80024ba:	409a      	lsls	r2, r3
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f043 0204 	orr.w	r2, r3, #4
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2210      	movs	r2, #16
 80024d6:	409a      	lsls	r2, r3
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80a6 	beq.w	800262e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a85      	ldr	r2, [pc, #532]	; (80026fc <HAL_DMA_IRQHandler+0x690>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d04a      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a83      	ldr	r2, [pc, #524]	; (8002700 <HAL_DMA_IRQHandler+0x694>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d045      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a82      	ldr	r2, [pc, #520]	; (8002704 <HAL_DMA_IRQHandler+0x698>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d040      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a80      	ldr	r2, [pc, #512]	; (8002708 <HAL_DMA_IRQHandler+0x69c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d03b      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7f      	ldr	r2, [pc, #508]	; (800270c <HAL_DMA_IRQHandler+0x6a0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d036      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a7d      	ldr	r2, [pc, #500]	; (8002710 <HAL_DMA_IRQHandler+0x6a4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d031      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a7c      	ldr	r2, [pc, #496]	; (8002714 <HAL_DMA_IRQHandler+0x6a8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d02c      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a7a      	ldr	r2, [pc, #488]	; (8002718 <HAL_DMA_IRQHandler+0x6ac>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d027      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a79      	ldr	r2, [pc, #484]	; (800271c <HAL_DMA_IRQHandler+0x6b0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a77      	ldr	r2, [pc, #476]	; (8002720 <HAL_DMA_IRQHandler+0x6b4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01d      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a76      	ldr	r2, [pc, #472]	; (8002724 <HAL_DMA_IRQHandler+0x6b8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d018      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a74      	ldr	r2, [pc, #464]	; (8002728 <HAL_DMA_IRQHandler+0x6bc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a73      	ldr	r2, [pc, #460]	; (800272c <HAL_DMA_IRQHandler+0x6c0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00e      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a71      	ldr	r2, [pc, #452]	; (8002730 <HAL_DMA_IRQHandler+0x6c4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d009      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a70      	ldr	r2, [pc, #448]	; (8002734 <HAL_DMA_IRQHandler+0x6c8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d004      	beq.n	8002582 <HAL_DMA_IRQHandler+0x516>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6e      	ldr	r2, [pc, #440]	; (8002738 <HAL_DMA_IRQHandler+0x6cc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10a      	bne.n	8002598 <HAL_DMA_IRQHandler+0x52c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e009      	b.n	80025ac <HAL_DMA_IRQHandler+0x540>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf14      	ite	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2300      	moveq	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d03e      	beq.n	800262e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	2210      	movs	r2, #16
 80025ba:	409a      	lsls	r2, r3
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d018      	beq.n	8002600 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d108      	bne.n	80025ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d024      	beq.n	800262e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	4798      	blx	r3
 80025ec:	e01f      	b.n	800262e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01b      	beq.n	800262e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4798      	blx	r3
 80025fe:	e016      	b.n	800262e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d107      	bne.n	800261e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0208 	bic.w	r2, r2, #8
 800261c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	2220      	movs	r2, #32
 8002638:	409a      	lsls	r2, r3
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8110 	beq.w	8002864 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <HAL_DMA_IRQHandler+0x690>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d04a      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a2b      	ldr	r2, [pc, #172]	; (8002700 <HAL_DMA_IRQHandler+0x694>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d045      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a29      	ldr	r2, [pc, #164]	; (8002704 <HAL_DMA_IRQHandler+0x698>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d040      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a28      	ldr	r2, [pc, #160]	; (8002708 <HAL_DMA_IRQHandler+0x69c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d03b      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a26      	ldr	r2, [pc, #152]	; (800270c <HAL_DMA_IRQHandler+0x6a0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d036      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a25      	ldr	r2, [pc, #148]	; (8002710 <HAL_DMA_IRQHandler+0x6a4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d031      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a23      	ldr	r2, [pc, #140]	; (8002714 <HAL_DMA_IRQHandler+0x6a8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02c      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a22      	ldr	r2, [pc, #136]	; (8002718 <HAL_DMA_IRQHandler+0x6ac>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d027      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a20      	ldr	r2, [pc, #128]	; (800271c <HAL_DMA_IRQHandler+0x6b0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d022      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <HAL_DMA_IRQHandler+0x6b4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d01d      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_DMA_IRQHandler+0x6b8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d018      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <HAL_DMA_IRQHandler+0x6bc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1a      	ldr	r2, [pc, #104]	; (800272c <HAL_DMA_IRQHandler+0x6c0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00e      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a19      	ldr	r2, [pc, #100]	; (8002730 <HAL_DMA_IRQHandler+0x6c4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a17      	ldr	r2, [pc, #92]	; (8002734 <HAL_DMA_IRQHandler+0x6c8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d004      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x678>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a16      	ldr	r2, [pc, #88]	; (8002738 <HAL_DMA_IRQHandler+0x6cc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d12b      	bne.n	800273c <HAL_DMA_IRQHandler+0x6d0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bf14      	ite	ne
 80026f2:	2301      	movne	r3, #1
 80026f4:	2300      	moveq	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	e02a      	b.n	8002750 <HAL_DMA_IRQHandler+0x6e4>
 80026fa:	bf00      	nop
 80026fc:	40020010 	.word	0x40020010
 8002700:	40020028 	.word	0x40020028
 8002704:	40020040 	.word	0x40020040
 8002708:	40020058 	.word	0x40020058
 800270c:	40020070 	.word	0x40020070
 8002710:	40020088 	.word	0x40020088
 8002714:	400200a0 	.word	0x400200a0
 8002718:	400200b8 	.word	0x400200b8
 800271c:	40020410 	.word	0x40020410
 8002720:	40020428 	.word	0x40020428
 8002724:	40020440 	.word	0x40020440
 8002728:	40020458 	.word	0x40020458
 800272c:	40020470 	.word	0x40020470
 8002730:	40020488 	.word	0x40020488
 8002734:	400204a0 	.word	0x400204a0
 8002738:	400204b8 	.word	0x400204b8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	bf14      	ite	ne
 800274a:	2301      	movne	r3, #1
 800274c:	2300      	moveq	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8087 	beq.w	8002864 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2220      	movs	r2, #32
 8002760:	409a      	lsls	r2, r3
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b04      	cmp	r3, #4
 8002770:	d139      	bne.n	80027e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0216 	bic.w	r2, r2, #22
 8002780:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002790:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <HAL_DMA_IRQHandler+0x736>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0208 	bic.w	r2, r2, #8
 80027b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	223f      	movs	r2, #63	; 0x3f
 80027bc:	409a      	lsls	r2, r3
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8382 	beq.w	8002ee0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
          }
          return;
 80027e4:	e37c      	b.n	8002ee0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d108      	bne.n	8002814 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	2b00      	cmp	r3, #0
 8002808:	d02c      	beq.n	8002864 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	4798      	blx	r3
 8002812:	e027      	b.n	8002864 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d023      	beq.n	8002864 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
 8002824:	e01e      	b.n	8002864 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10f      	bne.n	8002854 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0210 	bic.w	r2, r2, #16
 8002842:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 833e 	beq.w	8002eea <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8088 	beq.w	800298c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2204      	movs	r2, #4
 8002880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a89      	ldr	r2, [pc, #548]	; (8002ab0 <HAL_DMA_IRQHandler+0xa44>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d04a      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a88      	ldr	r2, [pc, #544]	; (8002ab4 <HAL_DMA_IRQHandler+0xa48>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d045      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a86      	ldr	r2, [pc, #536]	; (8002ab8 <HAL_DMA_IRQHandler+0xa4c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d040      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a85      	ldr	r2, [pc, #532]	; (8002abc <HAL_DMA_IRQHandler+0xa50>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d03b      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a83      	ldr	r2, [pc, #524]	; (8002ac0 <HAL_DMA_IRQHandler+0xa54>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d036      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a82      	ldr	r2, [pc, #520]	; (8002ac4 <HAL_DMA_IRQHandler+0xa58>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d031      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a80      	ldr	r2, [pc, #512]	; (8002ac8 <HAL_DMA_IRQHandler+0xa5c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d02c      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a7f      	ldr	r2, [pc, #508]	; (8002acc <HAL_DMA_IRQHandler+0xa60>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d027      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a7d      	ldr	r2, [pc, #500]	; (8002ad0 <HAL_DMA_IRQHandler+0xa64>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d022      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a7c      	ldr	r2, [pc, #496]	; (8002ad4 <HAL_DMA_IRQHandler+0xa68>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d01d      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a7a      	ldr	r2, [pc, #488]	; (8002ad8 <HAL_DMA_IRQHandler+0xa6c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d018      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a79      	ldr	r2, [pc, #484]	; (8002adc <HAL_DMA_IRQHandler+0xa70>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a77      	ldr	r2, [pc, #476]	; (8002ae0 <HAL_DMA_IRQHandler+0xa74>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00e      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a76      	ldr	r2, [pc, #472]	; (8002ae4 <HAL_DMA_IRQHandler+0xa78>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a74      	ldr	r2, [pc, #464]	; (8002ae8 <HAL_DMA_IRQHandler+0xa7c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_DMA_IRQHandler+0x8b8>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a73      	ldr	r2, [pc, #460]	; (8002aec <HAL_DMA_IRQHandler+0xa80>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d108      	bne.n	8002936 <HAL_DMA_IRQHandler+0x8ca>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e007      	b.n	8002946 <HAL_DMA_IRQHandler+0x8da>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3301      	adds	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294e:	429a      	cmp	r2, r3
 8002950:	d307      	bcc.n	8002962 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f2      	bne.n	8002946 <HAL_DMA_IRQHandler+0x8da>
 8002960:	e000      	b.n	8002964 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002962:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d004      	beq.n	800297c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800297a:	e003      	b.n	8002984 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 82aa 	beq.w	8002eea <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
 800299e:	e2a4      	b.n	8002eea <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_DMA_IRQHandler+0xa84>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d04a      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a51      	ldr	r2, [pc, #324]	; (8002af4 <HAL_DMA_IRQHandler+0xa88>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d045      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a4f      	ldr	r2, [pc, #316]	; (8002af8 <HAL_DMA_IRQHandler+0xa8c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d040      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a4e      	ldr	r2, [pc, #312]	; (8002afc <HAL_DMA_IRQHandler+0xa90>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d03b      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a4c      	ldr	r2, [pc, #304]	; (8002b00 <HAL_DMA_IRQHandler+0xa94>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d036      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a4b      	ldr	r2, [pc, #300]	; (8002b04 <HAL_DMA_IRQHandler+0xa98>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d031      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a49      	ldr	r2, [pc, #292]	; (8002b08 <HAL_DMA_IRQHandler+0xa9c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d02c      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a48      	ldr	r2, [pc, #288]	; (8002b0c <HAL_DMA_IRQHandler+0xaa0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d027      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a46      	ldr	r2, [pc, #280]	; (8002b10 <HAL_DMA_IRQHandler+0xaa4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d022      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a45      	ldr	r2, [pc, #276]	; (8002b14 <HAL_DMA_IRQHandler+0xaa8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d01d      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a43      	ldr	r2, [pc, #268]	; (8002b18 <HAL_DMA_IRQHandler+0xaac>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d018      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a42      	ldr	r2, [pc, #264]	; (8002b1c <HAL_DMA_IRQHandler+0xab0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d013      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a40      	ldr	r2, [pc, #256]	; (8002b20 <HAL_DMA_IRQHandler+0xab4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00e      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a3f      	ldr	r2, [pc, #252]	; (8002b24 <HAL_DMA_IRQHandler+0xab8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d009      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a3d      	ldr	r2, [pc, #244]	; (8002b28 <HAL_DMA_IRQHandler+0xabc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d004      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x9d4>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a3c      	ldr	r2, [pc, #240]	; (8002b2c <HAL_DMA_IRQHandler+0xac0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d101      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x9d8>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <HAL_DMA_IRQHandler+0x9da>
 8002a44:	2300      	movs	r3, #0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 824f 	beq.w	8002eea <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80dd 	beq.w	8002c24 <HAL_DMA_IRQHandler+0xbb8>
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80d7 	beq.w	8002c24 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2204      	movs	r2, #4
 8002a80:	409a      	lsls	r2, r3
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d059      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d14a      	bne.n	8002b30 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8220 	beq.w	8002ee4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aac:	e21a      	b.n	8002ee4 <HAL_DMA_IRQHandler+0xe78>
 8002aae:	bf00      	nop
 8002ab0:	40020010 	.word	0x40020010
 8002ab4:	40020028 	.word	0x40020028
 8002ab8:	40020040 	.word	0x40020040
 8002abc:	40020058 	.word	0x40020058
 8002ac0:	40020070 	.word	0x40020070
 8002ac4:	40020088 	.word	0x40020088
 8002ac8:	400200a0 	.word	0x400200a0
 8002acc:	400200b8 	.word	0x400200b8
 8002ad0:	40020410 	.word	0x40020410
 8002ad4:	40020428 	.word	0x40020428
 8002ad8:	40020440 	.word	0x40020440
 8002adc:	40020458 	.word	0x40020458
 8002ae0:	40020470 	.word	0x40020470
 8002ae4:	40020488 	.word	0x40020488
 8002ae8:	400204a0 	.word	0x400204a0
 8002aec:	400204b8 	.word	0x400204b8
 8002af0:	48022c08 	.word	0x48022c08
 8002af4:	48022c1c 	.word	0x48022c1c
 8002af8:	48022c30 	.word	0x48022c30
 8002afc:	48022c44 	.word	0x48022c44
 8002b00:	48022c58 	.word	0x48022c58
 8002b04:	48022c6c 	.word	0x48022c6c
 8002b08:	48022c80 	.word	0x48022c80
 8002b0c:	48022c94 	.word	0x48022c94
 8002b10:	58025408 	.word	0x58025408
 8002b14:	5802541c 	.word	0x5802541c
 8002b18:	58025430 	.word	0x58025430
 8002b1c:	58025444 	.word	0x58025444
 8002b20:	58025458 	.word	0x58025458
 8002b24:	5802546c 	.word	0x5802546c
 8002b28:	58025480 	.word	0x58025480
 8002b2c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 81d5 	beq.w	8002ee4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b42:	e1cf      	b.n	8002ee4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d160      	bne.n	8002c10 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a7f      	ldr	r2, [pc, #508]	; (8002d50 <HAL_DMA_IRQHandler+0xce4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d04a      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a7d      	ldr	r2, [pc, #500]	; (8002d54 <HAL_DMA_IRQHandler+0xce8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d045      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a7c      	ldr	r2, [pc, #496]	; (8002d58 <HAL_DMA_IRQHandler+0xcec>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d040      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a7a      	ldr	r2, [pc, #488]	; (8002d5c <HAL_DMA_IRQHandler+0xcf0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d03b      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a79      	ldr	r2, [pc, #484]	; (8002d60 <HAL_DMA_IRQHandler+0xcf4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d036      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a77      	ldr	r2, [pc, #476]	; (8002d64 <HAL_DMA_IRQHandler+0xcf8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d031      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a76      	ldr	r2, [pc, #472]	; (8002d68 <HAL_DMA_IRQHandler+0xcfc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d02c      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a74      	ldr	r2, [pc, #464]	; (8002d6c <HAL_DMA_IRQHandler+0xd00>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d027      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a73      	ldr	r2, [pc, #460]	; (8002d70 <HAL_DMA_IRQHandler+0xd04>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d022      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a71      	ldr	r2, [pc, #452]	; (8002d74 <HAL_DMA_IRQHandler+0xd08>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d01d      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a70      	ldr	r2, [pc, #448]	; (8002d78 <HAL_DMA_IRQHandler+0xd0c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d018      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a6e      	ldr	r2, [pc, #440]	; (8002d7c <HAL_DMA_IRQHandler+0xd10>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a6d      	ldr	r2, [pc, #436]	; (8002d80 <HAL_DMA_IRQHandler+0xd14>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d00e      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a6b      	ldr	r2, [pc, #428]	; (8002d84 <HAL_DMA_IRQHandler+0xd18>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d009      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6a      	ldr	r2, [pc, #424]	; (8002d88 <HAL_DMA_IRQHandler+0xd1c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d004      	beq.n	8002bee <HAL_DMA_IRQHandler+0xb82>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a68      	ldr	r2, [pc, #416]	; (8002d8c <HAL_DMA_IRQHandler+0xd20>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d108      	bne.n	8002c00 <HAL_DMA_IRQHandler+0xb94>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0208 	bic.w	r2, r2, #8
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e007      	b.n	8002c10 <HAL_DMA_IRQHandler+0xba4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0204 	bic.w	r2, r2, #4
 8002c0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8165 	beq.w	8002ee4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c22:	e15f      	b.n	8002ee4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80c5 	beq.w	8002dc4 <HAL_DMA_IRQHandler+0xd58>
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80bf 	beq.w	8002dc4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	2202      	movs	r2, #2
 8002c50:	409a      	lsls	r2, r3
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 813a 	beq.w	8002ee8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c7c:	e134      	b.n	8002ee8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8130 	beq.w	8002ee8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c90:	e12a      	b.n	8002ee8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f040 8089 	bne.w	8002db0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2b      	ldr	r2, [pc, #172]	; (8002d50 <HAL_DMA_IRQHandler+0xce4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d04a      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <HAL_DMA_IRQHandler+0xce8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d045      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a28      	ldr	r2, [pc, #160]	; (8002d58 <HAL_DMA_IRQHandler+0xcec>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d040      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <HAL_DMA_IRQHandler+0xcf0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d03b      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a25      	ldr	r2, [pc, #148]	; (8002d60 <HAL_DMA_IRQHandler+0xcf4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d036      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a23      	ldr	r2, [pc, #140]	; (8002d64 <HAL_DMA_IRQHandler+0xcf8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d031      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a22      	ldr	r2, [pc, #136]	; (8002d68 <HAL_DMA_IRQHandler+0xcfc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d02c      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <HAL_DMA_IRQHandler+0xd00>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d027      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1f      	ldr	r2, [pc, #124]	; (8002d70 <HAL_DMA_IRQHandler+0xd04>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d022      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <HAL_DMA_IRQHandler+0xd08>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01d      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <HAL_DMA_IRQHandler+0xd0c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d018      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1a      	ldr	r2, [pc, #104]	; (8002d7c <HAL_DMA_IRQHandler+0xd10>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a19      	ldr	r2, [pc, #100]	; (8002d80 <HAL_DMA_IRQHandler+0xd14>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00e      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_DMA_IRQHandler+0xd18>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d009      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <HAL_DMA_IRQHandler+0xd1c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xcd2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <HAL_DMA_IRQHandler+0xd20>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d128      	bne.n	8002d90 <HAL_DMA_IRQHandler+0xd24>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0214 	bic.w	r2, r2, #20
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e027      	b.n	8002da0 <HAL_DMA_IRQHandler+0xd34>
 8002d50:	40020010 	.word	0x40020010
 8002d54:	40020028 	.word	0x40020028
 8002d58:	40020040 	.word	0x40020040
 8002d5c:	40020058 	.word	0x40020058
 8002d60:	40020070 	.word	0x40020070
 8002d64:	40020088 	.word	0x40020088
 8002d68:	400200a0 	.word	0x400200a0
 8002d6c:	400200b8 	.word	0x400200b8
 8002d70:	40020410 	.word	0x40020410
 8002d74:	40020428 	.word	0x40020428
 8002d78:	40020440 	.word	0x40020440
 8002d7c:	40020458 	.word	0x40020458
 8002d80:	40020470 	.word	0x40020470
 8002d84:	40020488 	.word	0x40020488
 8002d88:	400204a0 	.word	0x400204a0
 8002d8c:	400204b8 	.word	0x400204b8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 020a 	bic.w	r2, r2, #10
 8002d9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8097 	beq.w	8002ee8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dc2:	e091      	b.n	8002ee8 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	2208      	movs	r2, #8
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8088 	beq.w	8002eea <HAL_DMA_IRQHandler+0xe7e>
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8082 	beq.w	8002eea <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a41      	ldr	r2, [pc, #260]	; (8002ef0 <HAL_DMA_IRQHandler+0xe84>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d04a      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a3f      	ldr	r2, [pc, #252]	; (8002ef4 <HAL_DMA_IRQHandler+0xe88>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d045      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a3e      	ldr	r2, [pc, #248]	; (8002ef8 <HAL_DMA_IRQHandler+0xe8c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d040      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a3c      	ldr	r2, [pc, #240]	; (8002efc <HAL_DMA_IRQHandler+0xe90>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d03b      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a3b      	ldr	r2, [pc, #236]	; (8002f00 <HAL_DMA_IRQHandler+0xe94>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d036      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a39      	ldr	r2, [pc, #228]	; (8002f04 <HAL_DMA_IRQHandler+0xe98>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d031      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a38      	ldr	r2, [pc, #224]	; (8002f08 <HAL_DMA_IRQHandler+0xe9c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d02c      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a36      	ldr	r2, [pc, #216]	; (8002f0c <HAL_DMA_IRQHandler+0xea0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d027      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a35      	ldr	r2, [pc, #212]	; (8002f10 <HAL_DMA_IRQHandler+0xea4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d022      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a33      	ldr	r2, [pc, #204]	; (8002f14 <HAL_DMA_IRQHandler+0xea8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01d      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a32      	ldr	r2, [pc, #200]	; (8002f18 <HAL_DMA_IRQHandler+0xeac>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d018      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a30      	ldr	r2, [pc, #192]	; (8002f1c <HAL_DMA_IRQHandler+0xeb0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2f      	ldr	r2, [pc, #188]	; (8002f20 <HAL_DMA_IRQHandler+0xeb4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00e      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2d      	ldr	r2, [pc, #180]	; (8002f24 <HAL_DMA_IRQHandler+0xeb8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d009      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2c      	ldr	r2, [pc, #176]	; (8002f28 <HAL_DMA_IRQHandler+0xebc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d004      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xe1a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2a      	ldr	r2, [pc, #168]	; (8002f2c <HAL_DMA_IRQHandler+0xec0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d108      	bne.n	8002e98 <HAL_DMA_IRQHandler+0xe2c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 021c 	bic.w	r2, r2, #28
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e007      	b.n	8002ea8 <HAL_DMA_IRQHandler+0xe3c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 020e 	bic.w	r2, r2, #14
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
 8002ede:	e004      	b.n	8002eea <HAL_DMA_IRQHandler+0xe7e>
          return;
 8002ee0:	bf00      	nop
 8002ee2:	e002      	b.n	8002eea <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ee8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002eea:	3728      	adds	r7, #40	; 0x28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40020010 	.word	0x40020010
 8002ef4:	40020028 	.word	0x40020028
 8002ef8:	40020040 	.word	0x40020040
 8002efc:	40020058 	.word	0x40020058
 8002f00:	40020070 	.word	0x40020070
 8002f04:	40020088 	.word	0x40020088
 8002f08:	400200a0 	.word	0x400200a0
 8002f0c:	400200b8 	.word	0x400200b8
 8002f10:	40020410 	.word	0x40020410
 8002f14:	40020428 	.word	0x40020428
 8002f18:	40020440 	.word	0x40020440
 8002f1c:	40020458 	.word	0x40020458
 8002f20:	40020470 	.word	0x40020470
 8002f24:	40020488 	.word	0x40020488
 8002f28:	400204a0 	.word	0x400204a0
 8002f2c:	400204b8 	.word	0x400204b8

08002f30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a42      	ldr	r2, [pc, #264]	; (8003048 <DMA_CalcBaseAndBitshift+0x118>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d04a      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a41      	ldr	r2, [pc, #260]	; (800304c <DMA_CalcBaseAndBitshift+0x11c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d045      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3f      	ldr	r2, [pc, #252]	; (8003050 <DMA_CalcBaseAndBitshift+0x120>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d040      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a3e      	ldr	r2, [pc, #248]	; (8003054 <DMA_CalcBaseAndBitshift+0x124>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d03b      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <DMA_CalcBaseAndBitshift+0x128>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d036      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a3b      	ldr	r2, [pc, #236]	; (800305c <DMA_CalcBaseAndBitshift+0x12c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d031      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a39      	ldr	r2, [pc, #228]	; (8003060 <DMA_CalcBaseAndBitshift+0x130>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d02c      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a38      	ldr	r2, [pc, #224]	; (8003064 <DMA_CalcBaseAndBitshift+0x134>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d027      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a36      	ldr	r2, [pc, #216]	; (8003068 <DMA_CalcBaseAndBitshift+0x138>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d022      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a35      	ldr	r2, [pc, #212]	; (800306c <DMA_CalcBaseAndBitshift+0x13c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d01d      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a33      	ldr	r2, [pc, #204]	; (8003070 <DMA_CalcBaseAndBitshift+0x140>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d018      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a32      	ldr	r2, [pc, #200]	; (8003074 <DMA_CalcBaseAndBitshift+0x144>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d013      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a30      	ldr	r2, [pc, #192]	; (8003078 <DMA_CalcBaseAndBitshift+0x148>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00e      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2f      	ldr	r2, [pc, #188]	; (800307c <DMA_CalcBaseAndBitshift+0x14c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <DMA_CalcBaseAndBitshift+0x150>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <DMA_CalcBaseAndBitshift+0x154>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <DMA_CalcBaseAndBitshift+0xac>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <DMA_CalcBaseAndBitshift+0xae>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d024      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3b10      	subs	r3, #16
 8002fea:	4a27      	ldr	r2, [pc, #156]	; (8003088 <DMA_CalcBaseAndBitshift+0x158>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	4a24      	ldr	r2, [pc, #144]	; (800308c <DMA_CalcBaseAndBitshift+0x15c>)
 8002ffc:	5cd3      	ldrb	r3, [r2, r3]
 8002ffe:	461a      	mov	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d908      	bls.n	800301c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <DMA_CalcBaseAndBitshift+0x160>)
 8003012:	4013      	ands	r3, r2
 8003014:	1d1a      	adds	r2, r3, #4
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	659a      	str	r2, [r3, #88]	; 0x58
 800301a:	e00d      	b.n	8003038 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <DMA_CalcBaseAndBitshift+0x160>)
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6593      	str	r3, [r2, #88]	; 0x58
 800302a:	e005      	b.n	8003038 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40020010 	.word	0x40020010
 800304c:	40020028 	.word	0x40020028
 8003050:	40020040 	.word	0x40020040
 8003054:	40020058 	.word	0x40020058
 8003058:	40020070 	.word	0x40020070
 800305c:	40020088 	.word	0x40020088
 8003060:	400200a0 	.word	0x400200a0
 8003064:	400200b8 	.word	0x400200b8
 8003068:	40020410 	.word	0x40020410
 800306c:	40020428 	.word	0x40020428
 8003070:	40020440 	.word	0x40020440
 8003074:	40020458 	.word	0x40020458
 8003078:	40020470 	.word	0x40020470
 800307c:	40020488 	.word	0x40020488
 8003080:	400204a0 	.word	0x400204a0
 8003084:	400204b8 	.word	0x400204b8
 8003088:	aaaaaaab 	.word	0xaaaaaaab
 800308c:	0800c848 	.word	0x0800c848
 8003090:	fffffc00 	.word	0xfffffc00

08003094 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d120      	bne.n	80030ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d858      	bhi.n	8003162 <DMA_CheckFifoParam+0xce>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <DMA_CheckFifoParam+0x24>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030db 	.word	0x080030db
 80030c0:	080030c9 	.word	0x080030c9
 80030c4:	08003163 	.word	0x08003163
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d048      	beq.n	8003166 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030d8:	e045      	b.n	8003166 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030e2:	d142      	bne.n	800316a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030e8:	e03f      	b.n	800316a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f2:	d123      	bne.n	800313c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d838      	bhi.n	800316e <DMA_CheckFifoParam+0xda>
 80030fc:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <DMA_CheckFifoParam+0x70>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	08003115 	.word	0x08003115
 8003108:	0800311b 	.word	0x0800311b
 800310c:	08003115 	.word	0x08003115
 8003110:	0800312d 	.word	0x0800312d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
        break;
 8003118:	e030      	b.n	800317c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d025      	beq.n	8003172 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800312a:	e022      	b.n	8003172 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003134:	d11f      	bne.n	8003176 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800313a:	e01c      	b.n	8003176 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	2b02      	cmp	r3, #2
 8003142:	d902      	bls.n	800314a <DMA_CheckFifoParam+0xb6>
 8003144:	2b03      	cmp	r3, #3
 8003146:	d003      	beq.n	8003150 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003148:	e018      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
        break;
 800314e:	e015      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00e      	beq.n	800317a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
    break;
 8003160:	e00b      	b.n	800317a <DMA_CheckFifoParam+0xe6>
        break;
 8003162:	bf00      	nop
 8003164:	e00a      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        break;
 8003166:	bf00      	nop
 8003168:	e008      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        break;
 800316a:	bf00      	nop
 800316c:	e006      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        break;
 800316e:	bf00      	nop
 8003170:	e004      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        break;
 8003172:	bf00      	nop
 8003174:	e002      	b.n	800317c <DMA_CheckFifoParam+0xe8>
        break;
 8003176:	bf00      	nop
 8003178:	e000      	b.n	800317c <DMA_CheckFifoParam+0xe8>
    break;
 800317a:	bf00      	nop
    }
  }

  return status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop

0800318c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a38      	ldr	r2, [pc, #224]	; (8003280 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d022      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a36      	ldr	r2, [pc, #216]	; (8003284 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01d      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a35      	ldr	r2, [pc, #212]	; (8003288 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d018      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a33      	ldr	r2, [pc, #204]	; (800328c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a32      	ldr	r2, [pc, #200]	; (8003290 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a30      	ldr	r2, [pc, #192]	; (8003294 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a2f      	ldr	r2, [pc, #188]	; (8003298 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2d      	ldr	r2, [pc, #180]	; (800329c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01a      	beq.n	800322a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	3b08      	subs	r3, #8
 80031fc:	4a28      	ldr	r2, [pc, #160]	; (80032a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003218:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	2201      	movs	r2, #1
 8003222:	409a      	lsls	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003228:	e024      	b.n	8003274 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3b10      	subs	r3, #16
 8003232:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d806      	bhi.n	8003252 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d902      	bls.n	8003252 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3308      	adds	r3, #8
 8003250:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	461a      	mov	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a16      	ldr	r2, [pc, #88]	; (80032bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003264:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2201      	movs	r2, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	58025408 	.word	0x58025408
 8003284:	5802541c 	.word	0x5802541c
 8003288:	58025430 	.word	0x58025430
 800328c:	58025444 	.word	0x58025444
 8003290:	58025458 	.word	0x58025458
 8003294:	5802546c 	.word	0x5802546c
 8003298:	58025480 	.word	0x58025480
 800329c:	58025494 	.word	0x58025494
 80032a0:	cccccccd 	.word	0xcccccccd
 80032a4:	16009600 	.word	0x16009600
 80032a8:	58025880 	.word	0x58025880
 80032ac:	aaaaaaab 	.word	0xaaaaaaab
 80032b0:	400204b8 	.word	0x400204b8
 80032b4:	4002040f 	.word	0x4002040f
 80032b8:	10008200 	.word	0x10008200
 80032bc:	40020880 	.word	0x40020880

080032c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d04a      	beq.n	800336c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d847      	bhi.n	800336c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a25      	ldr	r2, [pc, #148]	; (8003378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d022      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a24      	ldr	r2, [pc, #144]	; (800337c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d01d      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a22      	ldr	r2, [pc, #136]	; (8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a21      	ldr	r2, [pc, #132]	; (8003384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1e      	ldr	r2, [pc, #120]	; (800338c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d101      	bne.n	8003330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003330:	2300      	movs	r3, #0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4b17      	ldr	r3, [pc, #92]	; (8003398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a15      	ldr	r2, [pc, #84]	; (800339c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003348:	671a      	str	r2, [r3, #112]	; 0x70
 800334a:	e009      	b.n	8003360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	461a      	mov	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a11      	ldr	r2, [pc, #68]	; (80033a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800335e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3b01      	subs	r3, #1
 8003364:	2201      	movs	r2, #1
 8003366:	409a      	lsls	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	58025408 	.word	0x58025408
 800337c:	5802541c 	.word	0x5802541c
 8003380:	58025430 	.word	0x58025430
 8003384:	58025444 	.word	0x58025444
 8003388:	58025458 	.word	0x58025458
 800338c:	5802546c 	.word	0x5802546c
 8003390:	58025480 	.word	0x58025480
 8003394:	58025494 	.word	0x58025494
 8003398:	1600963f 	.word	0x1600963f
 800339c:	58025940 	.word	0x58025940
 80033a0:	1000823f 	.word	0x1000823f
 80033a4:	40020940 	.word	0x40020940

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033b6:	4b89      	ldr	r3, [pc, #548]	; (80035dc <HAL_GPIO_Init+0x234>)
 80033b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033ba:	e194      	b.n	80036e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8186 	beq.w	80036e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d005      	beq.n	80033ec <HAL_GPIO_Init+0x44>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d130      	bne.n	800344e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	2203      	movs	r2, #3
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003422:	2201      	movs	r2, #1
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	f003 0201 	and.w	r2, r3, #1
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b03      	cmp	r3, #3
 8003458:	d017      	beq.n	800348a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d123      	bne.n	80034de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	08da      	lsrs	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3208      	adds	r2, #8
 800349e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	08da      	lsrs	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3208      	adds	r2, #8
 80034d8:	69b9      	ldr	r1, [r7, #24]
 80034da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	2203      	movs	r2, #3
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0203 	and.w	r2, r3, #3
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80e0 	beq.w	80036e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003520:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <HAL_GPIO_Init+0x238>)
 8003522:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003526:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <HAL_GPIO_Init+0x238>)
 8003528:	f043 0302 	orr.w	r3, r3, #2
 800352c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003530:	4b2b      	ldr	r3, [pc, #172]	; (80035e0 <HAL_GPIO_Init+0x238>)
 8003532:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353e:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <HAL_GPIO_Init+0x23c>)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	3302      	adds	r3, #2
 8003546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	220f      	movs	r2, #15
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <HAL_GPIO_Init+0x240>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d052      	beq.n	8003610 <HAL_GPIO_Init+0x268>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <HAL_GPIO_Init+0x244>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d031      	beq.n	80035d6 <HAL_GPIO_Init+0x22e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <HAL_GPIO_Init+0x248>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d02b      	beq.n	80035d2 <HAL_GPIO_Init+0x22a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <HAL_GPIO_Init+0x24c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d025      	beq.n	80035ce <HAL_GPIO_Init+0x226>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <HAL_GPIO_Init+0x250>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01f      	beq.n	80035ca <HAL_GPIO_Init+0x222>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1b      	ldr	r2, [pc, #108]	; (80035fc <HAL_GPIO_Init+0x254>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d019      	beq.n	80035c6 <HAL_GPIO_Init+0x21e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <HAL_GPIO_Init+0x258>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_GPIO_Init+0x21a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a19      	ldr	r2, [pc, #100]	; (8003604 <HAL_GPIO_Init+0x25c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00d      	beq.n	80035be <HAL_GPIO_Init+0x216>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_GPIO_Init+0x260>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <HAL_GPIO_Init+0x212>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a17      	ldr	r2, [pc, #92]	; (800360c <HAL_GPIO_Init+0x264>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_GPIO_Init+0x20e>
 80035b2:	2309      	movs	r3, #9
 80035b4:	e02d      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035b6:	230a      	movs	r3, #10
 80035b8:	e02b      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035ba:	2308      	movs	r3, #8
 80035bc:	e029      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035be:	2307      	movs	r3, #7
 80035c0:	e027      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035c2:	2306      	movs	r3, #6
 80035c4:	e025      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035c6:	2305      	movs	r3, #5
 80035c8:	e023      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035ca:	2304      	movs	r3, #4
 80035cc:	e021      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035ce:	2303      	movs	r3, #3
 80035d0:	e01f      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e01d      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e01b      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035da:	bf00      	nop
 80035dc:	58000080 	.word	0x58000080
 80035e0:	58024400 	.word	0x58024400
 80035e4:	58000400 	.word	0x58000400
 80035e8:	58020000 	.word	0x58020000
 80035ec:	58020400 	.word	0x58020400
 80035f0:	58020800 	.word	0x58020800
 80035f4:	58020c00 	.word	0x58020c00
 80035f8:	58021000 	.word	0x58021000
 80035fc:	58021400 	.word	0x58021400
 8003600:	58021800 	.word	0x58021800
 8003604:	58021c00 	.word	0x58021c00
 8003608:	58022000 	.word	0x58022000
 800360c:	58022400 	.word	0x58022400
 8003610:	2300      	movs	r3, #0
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	f002 0203 	and.w	r2, r2, #3
 8003618:	0092      	lsls	r2, r2, #2
 800361a:	4093      	lsls	r3, r2
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003622:	4938      	ldr	r1, [pc, #224]	; (8003704 <HAL_GPIO_Init+0x35c>)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	3302      	adds	r3, #2
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	43db      	mvns	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	3301      	adds	r3, #1
 80036e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f47f ae63 	bne.w	80033bc <HAL_GPIO_Init+0x14>
  }
}
 80036f6:	bf00      	nop
 80036f8:	bf00      	nop
 80036fa:	3724      	adds	r7, #36	; 0x24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	58000400 	.word	0x58000400

08003708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
 8003714:	4613      	mov	r3, r2
 8003716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003718:	787b      	ldrb	r3, [r7, #1]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003724:	e003      	b.n	800372e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003726:	887b      	ldrh	r3, [r7, #2]
 8003728:	041a      	lsls	r2, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	619a      	str	r2, [r3, #24]
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800374c:	887a      	ldrh	r2, [r7, #2]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4013      	ands	r3, r2
 8003752:	041a      	lsls	r2, r3, #16
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	43d9      	mvns	r1, r3
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	400b      	ands	r3, r1
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	619a      	str	r2, [r3, #24]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	4603      	mov	r3, r0
 8003776:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	4618      	mov	r0, r3
 8003796:	f7fd fb77 	bl	8000e88 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80037ac:	4b29      	ldr	r3, [pc, #164]	; (8003854 <HAL_PWREx_ConfigSupply+0xb0>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	2b06      	cmp	r3, #6
 80037b6:	d00a      	beq.n	80037ce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037b8:	4b26      	ldr	r3, [pc, #152]	; (8003854 <HAL_PWREx_ConfigSupply+0xb0>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d001      	beq.n	80037ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e040      	b.n	800384c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e03e      	b.n	800384c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037ce:	4b21      	ldr	r3, [pc, #132]	; (8003854 <HAL_PWREx_ConfigSupply+0xb0>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80037d6:	491f      	ldr	r1, [pc, #124]	; (8003854 <HAL_PWREx_ConfigSupply+0xb0>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037de:	f7fd ff75 	bl	80016cc <HAL_GetTick>
 80037e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037e4:	e009      	b.n	80037fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037e6:	f7fd ff71 	bl	80016cc <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037f4:	d901      	bls.n	80037fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e028      	b.n	800384c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037fa:	4b16      	ldr	r3, [pc, #88]	; (8003854 <HAL_PWREx_ConfigSupply+0xb0>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003806:	d1ee      	bne.n	80037e6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b1e      	cmp	r3, #30
 800380c:	d008      	beq.n	8003820 <HAL_PWREx_ConfigSupply+0x7c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b2e      	cmp	r3, #46	; 0x2e
 8003812:	d005      	beq.n	8003820 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b1d      	cmp	r3, #29
 8003818:	d002      	beq.n	8003820 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b2d      	cmp	r3, #45	; 0x2d
 800381e:	d114      	bne.n	800384a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003820:	f7fd ff54 	bl	80016cc <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003826:	e009      	b.n	800383c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003828:	f7fd ff50 	bl	80016cc <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003836:	d901      	bls.n	800383c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e007      	b.n	800384c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_PWREx_ConfigSupply+0xb0>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d1ee      	bne.n	8003828 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	58024800 	.word	0x58024800

08003858 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08c      	sub	sp, #48	; 0x30
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e3f4      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 80b3 	beq.w	80039de <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003878:	4b95      	ldr	r3, [pc, #596]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003882:	4b93      	ldr	r3, [pc, #588]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388a:	2b10      	cmp	r3, #16
 800388c:	d007      	beq.n	800389e <HAL_RCC_OscConfig+0x46>
 800388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003890:	2b18      	cmp	r3, #24
 8003892:	d112      	bne.n	80038ba <HAL_RCC_OscConfig+0x62>
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d10d      	bne.n	80038ba <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389e:	4b8c      	ldr	r3, [pc, #560]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8098 	beq.w	80039dc <HAL_RCC_OscConfig+0x184>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f040 8093 	bne.w	80039dc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e3cc      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c2:	d106      	bne.n	80038d2 <HAL_RCC_OscConfig+0x7a>
 80038c4:	4b82      	ldr	r3, [pc, #520]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a81      	ldr	r2, [pc, #516]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80038ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	e058      	b.n	8003984 <HAL_RCC_OscConfig+0x12c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d112      	bne.n	8003900 <HAL_RCC_OscConfig+0xa8>
 80038da:	4b7d      	ldr	r3, [pc, #500]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a7c      	ldr	r2, [pc, #496]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80038e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b7a      	ldr	r3, [pc, #488]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a79      	ldr	r2, [pc, #484]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80038ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b77      	ldr	r3, [pc, #476]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a76      	ldr	r2, [pc, #472]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80038f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e041      	b.n	8003984 <HAL_RCC_OscConfig+0x12c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003908:	d112      	bne.n	8003930 <HAL_RCC_OscConfig+0xd8>
 800390a:	4b71      	ldr	r3, [pc, #452]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a70      	ldr	r2, [pc, #448]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b6e      	ldr	r3, [pc, #440]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6d      	ldr	r2, [pc, #436]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 800391c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b6b      	ldr	r3, [pc, #428]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a6a      	ldr	r2, [pc, #424]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e029      	b.n	8003984 <HAL_RCC_OscConfig+0x12c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003938:	d112      	bne.n	8003960 <HAL_RCC_OscConfig+0x108>
 800393a:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a64      	ldr	r2, [pc, #400]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b62      	ldr	r3, [pc, #392]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a61      	ldr	r2, [pc, #388]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 800394c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b5f      	ldr	r3, [pc, #380]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a5e      	ldr	r2, [pc, #376]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e011      	b.n	8003984 <HAL_RCC_OscConfig+0x12c>
 8003960:	4b5b      	ldr	r3, [pc, #364]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a5a      	ldr	r2, [pc, #360]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b58      	ldr	r3, [pc, #352]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a57      	ldr	r2, [pc, #348]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	4b55      	ldr	r3, [pc, #340]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a54      	ldr	r2, [pc, #336]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 800397e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fd fe9e 	bl	80016cc <HAL_GetTick>
 8003990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003994:	f7fd fe9a 	bl	80016cc <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e356      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039a6:	4b4a      	ldr	r3, [pc, #296]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x13c>
 80039b2:	e014      	b.n	80039de <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fe8a 	bl	80016cc <HAL_GetTick>
 80039b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fd fe86 	bl	80016cc <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e342      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039ce:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x164>
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 808d 	beq.w	8003b06 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ec:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039f6:	4b36      	ldr	r3, [pc, #216]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1ba>
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	2b18      	cmp	r3, #24
 8003a06:	d137      	bne.n	8003a78 <HAL_RCC_OscConfig+0x220>
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d132      	bne.n	8003a78 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a12:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_RCC_OscConfig+0x1d2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e314      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a2a:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 0219 	bic.w	r2, r3, #25
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	4926      	ldr	r1, [pc, #152]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a3c:	f7fd fe46 	bl	80016cc <HAL_GetTick>
 8003a40:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a44:	f7fd fe42 	bl	80016cc <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e2fe      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	061b      	lsls	r3, r3, #24
 8003a70:	4917      	ldr	r1, [pc, #92]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a76:	e046      	b.n	8003b06 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d029      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a80:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 0219 	bic.w	r2, r3, #25
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4910      	ldr	r1, [pc, #64]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a92:	f7fd fe1b 	bl	80016cc <HAL_GetTick>
 8003a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9a:	f7fd fe17 	bl	80016cc <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e2d3      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	061b      	lsls	r3, r3, #24
 8003ac6:	4902      	ldr	r1, [pc, #8]	; (8003ad0 <HAL_RCC_OscConfig+0x278>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]
 8003acc:	e01b      	b.n	8003b06 <HAL_RCC_OscConfig+0x2ae>
 8003ace:	bf00      	nop
 8003ad0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad4:	4b97      	ldr	r3, [pc, #604]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a96      	ldr	r2, [pc, #600]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fdf4 	bl	80016cc <HAL_GetTick>
 8003ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fd fdf0 	bl	80016cc <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e2ac      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003afa:	4b8e      	ldr	r3, [pc, #568]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d06a      	beq.n	8003be8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b12:	4b88      	ldr	r3, [pc, #544]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b1c:	4b85      	ldr	r3, [pc, #532]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d007      	beq.n	8003b38 <HAL_RCC_OscConfig+0x2e0>
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b18      	cmp	r3, #24
 8003b2c:	d11b      	bne.n	8003b66 <HAL_RCC_OscConfig+0x30e>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d116      	bne.n	8003b66 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b38:	4b7e      	ldr	r3, [pc, #504]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_OscConfig+0x2f8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e281      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b50:	4b78      	ldr	r3, [pc, #480]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	061b      	lsls	r3, r3, #24
 8003b5e:	4975      	ldr	r1, [pc, #468]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b64:	e040      	b.n	8003be8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d023      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b6e:	4b71      	ldr	r3, [pc, #452]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a70      	ldr	r2, [pc, #448]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fd fda7 	bl	80016cc <HAL_GetTick>
 8003b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b82:	f7fd fda3 	bl	80016cc <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e25f      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b94:	4b67      	ldr	r3, [pc, #412]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ba0:	4b64      	ldr	r3, [pc, #400]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	061b      	lsls	r3, r3, #24
 8003bae:	4961      	ldr	r1, [pc, #388]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60cb      	str	r3, [r1, #12]
 8003bb4:	e018      	b.n	8003be8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bb6:	4b5f      	ldr	r3, [pc, #380]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a5e      	ldr	r2, [pc, #376]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fd fd83 	bl	80016cc <HAL_GetTick>
 8003bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003bca:	f7fd fd7f 	bl	80016cc <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e23b      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bdc:	4b55      	ldr	r3, [pc, #340]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d036      	beq.n	8003c62 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d019      	beq.n	8003c30 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfc:	4b4d      	ldr	r3, [pc, #308]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c00:	4a4c      	ldr	r2, [pc, #304]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd fd60 	bl	80016cc <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c10:	f7fd fd5c 	bl	80016cc <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e218      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c22:	4b44      	ldr	r3, [pc, #272]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x3b8>
 8003c2e:	e018      	b.n	8003c62 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c30:	4b40      	ldr	r3, [pc, #256]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c34:	4a3f      	ldr	r2, [pc, #252]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fd fd46 	bl	80016cc <HAL_GetTick>
 8003c40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c44:	f7fd fd42 	bl	80016cc <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e1fe      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c56:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d036      	beq.n	8003cdc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d019      	beq.n	8003caa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c76:	4b2f      	ldr	r3, [pc, #188]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2e      	ldr	r2, [pc, #184]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c82:	f7fd fd23 	bl	80016cc <HAL_GetTick>
 8003c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c8a:	f7fd fd1f 	bl	80016cc <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e1db      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x432>
 8003ca8:	e018      	b.n	8003cdc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003caa:	4b22      	ldr	r3, [pc, #136]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a21      	ldr	r2, [pc, #132]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cb6:	f7fd fd09 	bl	80016cc <HAL_GetTick>
 8003cba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003cbe:	f7fd fd05 	bl	80016cc <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e1c1      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cd0:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80af 	beq.w	8003e48 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_RCC_OscConfig+0x4e0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <HAL_RCC_OscConfig+0x4e0>)
 8003cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fce9 	bl	80016cc <HAL_GetTick>
 8003cfa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003cfe:	f7fd fce5 	bl	80016cc <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b64      	cmp	r3, #100	; 0x64
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1a1      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <HAL_RCC_OscConfig+0x4e0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10b      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4e4>
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	4a02      	ldr	r2, [pc, #8]	; (8003d34 <HAL_RCC_OscConfig+0x4dc>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d30:	e05b      	b.n	8003dea <HAL_RCC_OscConfig+0x592>
 8003d32:	bf00      	nop
 8003d34:	58024400 	.word	0x58024400
 8003d38:	58024800 	.word	0x58024800
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d112      	bne.n	8003d6a <HAL_RCC_OscConfig+0x512>
 8003d44:	4b9d      	ldr	r3, [pc, #628]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a9c      	ldr	r2, [pc, #624]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d50:	4b9a      	ldr	r3, [pc, #616]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	4a99      	ldr	r2, [pc, #612]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5c:	4b97      	ldr	r3, [pc, #604]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a96      	ldr	r2, [pc, #600]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003d62:	f023 0304 	bic.w	r3, r3, #4
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
 8003d68:	e03f      	b.n	8003dea <HAL_RCC_OscConfig+0x592>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d112      	bne.n	8003d98 <HAL_RCC_OscConfig+0x540>
 8003d72:	4b92      	ldr	r3, [pc, #584]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a91      	ldr	r2, [pc, #580]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003d78:	f043 0304 	orr.w	r3, r3, #4
 8003d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7e:	4b8f      	ldr	r3, [pc, #572]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a8e      	ldr	r2, [pc, #568]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d88:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8a:	4b8c      	ldr	r3, [pc, #560]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a8b      	ldr	r2, [pc, #556]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
 8003d96:	e028      	b.n	8003dea <HAL_RCC_OscConfig+0x592>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b85      	cmp	r3, #133	; 0x85
 8003d9e:	d112      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x56e>
 8003da0:	4b86      	ldr	r3, [pc, #536]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	4a85      	ldr	r2, [pc, #532]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003da6:	f043 0304 	orr.w	r3, r3, #4
 8003daa:	6713      	str	r3, [r2, #112]	; 0x70
 8003dac:	4b83      	ldr	r3, [pc, #524]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	4a82      	ldr	r2, [pc, #520]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db6:	6713      	str	r3, [r2, #112]	; 0x70
 8003db8:	4b80      	ldr	r3, [pc, #512]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	4a7f      	ldr	r2, [pc, #508]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc4:	e011      	b.n	8003dea <HAL_RCC_OscConfig+0x592>
 8003dc6:	4b7d      	ldr	r3, [pc, #500]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a7c      	ldr	r2, [pc, #496]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	4b7a      	ldr	r3, [pc, #488]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a79      	ldr	r2, [pc, #484]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dde:	4b77      	ldr	r3, [pc, #476]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	4a76      	ldr	r2, [pc, #472]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d015      	beq.n	8003e1e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df2:	f7fd fc6b 	bl	80016cc <HAL_GetTick>
 8003df6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fd fc67 	bl	80016cc <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e121      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e10:	4b6a      	ldr	r3, [pc, #424]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0ee      	beq.n	8003dfa <HAL_RCC_OscConfig+0x5a2>
 8003e1c:	e014      	b.n	8003e48 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fd fc55 	bl	80016cc <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fd fc51 	bl	80016cc <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e10b      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e3c:	4b5f      	ldr	r3, [pc, #380]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ee      	bne.n	8003e26 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8100 	beq.w	8004052 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e52:	4b5a      	ldr	r3, [pc, #360]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e5a:	2b18      	cmp	r3, #24
 8003e5c:	f000 80bb 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	f040 8095 	bne.w	8003f94 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b54      	ldr	r3, [pc, #336]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a53      	ldr	r2, [pc, #332]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fd fc29 	bl	80016cc <HAL_GetTick>
 8003e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fd fc25 	bl	80016cc <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e0e1      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e90:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f0      	bne.n	8003e7e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e9c:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ea0:	4b47      	ldr	r3, [pc, #284]	; (8003fc0 <HAL_RCC_OscConfig+0x768>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003eac:	0112      	lsls	r2, r2, #4
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	4942      	ldr	r1, [pc, #264]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	628b      	str	r3, [r1, #40]	; 0x28
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	025b      	lsls	r3, r3, #9
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ee6:	4935      	ldr	r1, [pc, #212]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003eec:	4b33      	ldr	r3, [pc, #204]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	4a32      	ldr	r2, [pc, #200]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ef8:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003efc:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <HAL_RCC_OscConfig+0x76c>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f04:	00d2      	lsls	r2, r2, #3
 8003f06:	492d      	ldr	r1, [pc, #180]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	f023 020c 	bic.w	r2, r3, #12
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	4928      	ldr	r1, [pc, #160]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f1e:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	f023 0202 	bic.w	r2, r3, #2
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	4924      	ldr	r1, [pc, #144]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f30:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f3c:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f48:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003f54:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f60:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fd fbae 	bl	80016cc <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f74:	f7fd fbaa 	bl	80016cc <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e066      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f86:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0x71c>
 8003f92:	e05e      	b.n	8004052 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <HAL_RCC_OscConfig+0x764>)
 8003f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd fb94 	bl	80016cc <HAL_GetTick>
 8003fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fa6:	e00f      	b.n	8003fc8 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7fd fb90 	bl	80016cc <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d908      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e04c      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
 8003fba:	bf00      	nop
 8003fbc:	58024400 	.word	0x58024400
 8003fc0:	fffffc0c 	.word	0xfffffc0c
 8003fc4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fc8:	4b24      	ldr	r3, [pc, #144]	; (800405c <HAL_RCC_OscConfig+0x804>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e9      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x750>
 8003fd4:	e03d      	b.n	8004052 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fd6:	4b21      	ldr	r3, [pc, #132]	; (800405c <HAL_RCC_OscConfig+0x804>)
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fdc:	4b1f      	ldr	r3, [pc, #124]	; (800405c <HAL_RCC_OscConfig+0x804>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d031      	beq.n	800404e <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f003 0203 	and.w	r2, r3, #3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d12a      	bne.n	800404e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d122      	bne.n	800404e <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d11a      	bne.n	800404e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	0a5b      	lsrs	r3, r3, #9
 800401c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004024:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d111      	bne.n	800404e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d108      	bne.n	800404e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	0e1b      	lsrs	r3, r3, #24
 8004040:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004048:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d001      	beq.n	8004052 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3730      	adds	r7, #48	; 0x30
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	58024400 	.word	0x58024400

08004060 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e19c      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	4b8a      	ldr	r3, [pc, #552]	; (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d910      	bls.n	80040a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b87      	ldr	r3, [pc, #540]	; (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 020f 	bic.w	r2, r3, #15
 800408a:	4985      	ldr	r1, [pc, #532]	; (80042a0 <HAL_RCC_ClockConfig+0x240>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b83      	ldr	r3, [pc, #524]	; (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e184      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d010      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	4b7b      	ldr	r3, [pc, #492]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040bc:	429a      	cmp	r2, r3
 80040be:	d908      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040c0:	4b78      	ldr	r3, [pc, #480]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	4975      	ldr	r1, [pc, #468]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d010      	beq.n	8004100 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	4b70      	ldr	r3, [pc, #448]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d908      	bls.n	8004100 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040ee:	4b6d      	ldr	r3, [pc, #436]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	496a      	ldr	r1, [pc, #424]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	d010      	beq.n	800412e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699a      	ldr	r2, [r3, #24]
 8004110:	4b64      	ldr	r3, [pc, #400]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004118:	429a      	cmp	r2, r3
 800411a:	d908      	bls.n	800412e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800411c:	4b61      	ldr	r3, [pc, #388]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	495e      	ldr	r1, [pc, #376]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800412a:	4313      	orrs	r3, r2
 800412c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d010      	beq.n	800415c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69da      	ldr	r2, [r3, #28]
 800413e:	4b59      	ldr	r3, [pc, #356]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004146:	429a      	cmp	r2, r3
 8004148:	d908      	bls.n	800415c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800414a:	4b56      	ldr	r3, [pc, #344]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	4953      	ldr	r1, [pc, #332]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004158:	4313      	orrs	r3, r2
 800415a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d010      	beq.n	800418a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	4b4d      	ldr	r3, [pc, #308]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	429a      	cmp	r2, r3
 8004176:	d908      	bls.n	800418a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b4a      	ldr	r3, [pc, #296]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f023 020f 	bic.w	r2, r3, #15
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4947      	ldr	r1, [pc, #284]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004186:	4313      	orrs	r3, r2
 8004188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d055      	beq.n	8004242 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004196:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4940      	ldr	r1, [pc, #256]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041b0:	4b3c      	ldr	r3, [pc, #240]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d121      	bne.n	8004200 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0f6      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041c8:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d115      	bne.n	8004200 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0ea      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041e0:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0de      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041f0:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0d6      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004200:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f023 0207 	bic.w	r2, r3, #7
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4925      	ldr	r1, [pc, #148]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800420e:	4313      	orrs	r3, r2
 8004210:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004212:	f7fd fa5b 	bl	80016cc <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004218:	e00a      	b.n	8004230 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421a:	f7fd fa57 	bl	80016cc <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	f241 3288 	movw	r2, #5000	; 0x1388
 8004228:	4293      	cmp	r3, r2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e0be      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004230:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	429a      	cmp	r2, r3
 8004240:	d1eb      	bne.n	800421a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d010      	beq.n	8004270 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	429a      	cmp	r2, r3
 800425c:	d208      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f023 020f 	bic.w	r2, r3, #15
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	490e      	ldr	r1, [pc, #56]	; (80042a4 <HAL_RCC_ClockConfig+0x244>)
 800426c:	4313      	orrs	r3, r2
 800426e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d214      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 020f 	bic.w	r2, r3, #15
 8004286:	4906      	ldr	r1, [pc, #24]	; (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	4313      	orrs	r3, r2
 800428c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428e:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_RCC_ClockConfig+0x240>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e086      	b.n	80043ae <HAL_RCC_ClockConfig+0x34e>
 80042a0:	52002000 	.word	0x52002000
 80042a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d010      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	4b3f      	ldr	r3, [pc, #252]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d208      	bcs.n	80042d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042c4:	4b3c      	ldr	r3, [pc, #240]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	4939      	ldr	r1, [pc, #228]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d010      	beq.n	8004304 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	4b34      	ldr	r3, [pc, #208]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d208      	bcs.n	8004304 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042f2:	4b31      	ldr	r3, [pc, #196]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	492e      	ldr	r1, [pc, #184]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004300:	4313      	orrs	r3, r2
 8004302:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d010      	beq.n	8004332 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699a      	ldr	r2, [r3, #24]
 8004314:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800431c:	429a      	cmp	r2, r3
 800431e:	d208      	bcs.n	8004332 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004320:	4b25      	ldr	r3, [pc, #148]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	4922      	ldr	r1, [pc, #136]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 800432e:	4313      	orrs	r3, r2
 8004330:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d010      	beq.n	8004360 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69da      	ldr	r2, [r3, #28]
 8004342:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800434a:	429a      	cmp	r2, r3
 800434c:	d208      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800434e:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	4917      	ldr	r1, [pc, #92]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 800435c:	4313      	orrs	r3, r2
 800435e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004360:	f000 f834 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 8004364:	4602      	mov	r2, r0
 8004366:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	4912      	ldr	r1, [pc, #72]	; (80043bc <HAL_RCC_ClockConfig+0x35c>)
 8004372:	5ccb      	ldrb	r3, [r1, r3]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
 800437c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800437e:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <HAL_RCC_ClockConfig+0x358>)
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	4a0d      	ldr	r2, [pc, #52]	; (80043bc <HAL_RCC_ClockConfig+0x35c>)
 8004388:	5cd3      	ldrb	r3, [r2, r3]
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
 8004394:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <HAL_RCC_ClockConfig+0x360>)
 8004396:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004398:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <HAL_RCC_ClockConfig+0x364>)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <HAL_RCC_ClockConfig+0x368>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd f948 	bl	8001638 <HAL_InitTick>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	58024400 	.word	0x58024400
 80043bc:	0800c838 	.word	0x0800c838
 80043c0:	24000008 	.word	0x24000008
 80043c4:	24000004 	.word	0x24000004
 80043c8:	2400000c 	.word	0x2400000c

080043cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b089      	sub	sp, #36	; 0x24
 80043d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043d2:	4bb3      	ldr	r3, [pc, #716]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043da:	2b18      	cmp	r3, #24
 80043dc:	f200 8155 	bhi.w	800468a <HAL_RCC_GetSysClockFreq+0x2be>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	0800444d 	.word	0x0800444d
 80043ec:	0800468b 	.word	0x0800468b
 80043f0:	0800468b 	.word	0x0800468b
 80043f4:	0800468b 	.word	0x0800468b
 80043f8:	0800468b 	.word	0x0800468b
 80043fc:	0800468b 	.word	0x0800468b
 8004400:	0800468b 	.word	0x0800468b
 8004404:	0800468b 	.word	0x0800468b
 8004408:	08004473 	.word	0x08004473
 800440c:	0800468b 	.word	0x0800468b
 8004410:	0800468b 	.word	0x0800468b
 8004414:	0800468b 	.word	0x0800468b
 8004418:	0800468b 	.word	0x0800468b
 800441c:	0800468b 	.word	0x0800468b
 8004420:	0800468b 	.word	0x0800468b
 8004424:	0800468b 	.word	0x0800468b
 8004428:	08004479 	.word	0x08004479
 800442c:	0800468b 	.word	0x0800468b
 8004430:	0800468b 	.word	0x0800468b
 8004434:	0800468b 	.word	0x0800468b
 8004438:	0800468b 	.word	0x0800468b
 800443c:	0800468b 	.word	0x0800468b
 8004440:	0800468b 	.word	0x0800468b
 8004444:	0800468b 	.word	0x0800468b
 8004448:	0800447f 	.word	0x0800447f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800444c:	4b94      	ldr	r3, [pc, #592]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004458:	4b91      	ldr	r3, [pc, #580]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	08db      	lsrs	r3, r3, #3
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	4a90      	ldr	r2, [pc, #576]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
 8004468:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800446a:	e111      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800446c:	4b8d      	ldr	r3, [pc, #564]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800446e:	61bb      	str	r3, [r7, #24]
    break;
 8004470:	e10e      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004472:	4b8d      	ldr	r3, [pc, #564]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004474:	61bb      	str	r3, [r7, #24]
    break;
 8004476:	e10b      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004478:	4b8c      	ldr	r3, [pc, #560]	; (80046ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800447a:	61bb      	str	r3, [r7, #24]
    break;
 800447c:	e108      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800447e:	4b88      	ldr	r3, [pc, #544]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004488:	4b85      	ldr	r3, [pc, #532]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004492:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004494:	4b82      	ldr	r3, [pc, #520]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800449e:	4b80      	ldr	r3, [pc, #512]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	08db      	lsrs	r3, r3, #3
 80044a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80e1 	beq.w	8004684 <HAL_RCC_GetSysClockFreq+0x2b8>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	f000 8083 	beq.w	80045d0 <HAL_RCC_GetSysClockFreq+0x204>
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	f200 80a1 	bhi.w	8004614 <HAL_RCC_GetSysClockFreq+0x248>
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x114>
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d056      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0x1c0>
 80044de:	e099      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044e0:	4b6f      	ldr	r3, [pc, #444]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d02d      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044ec:	4b6c      	ldr	r3, [pc, #432]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	08db      	lsrs	r3, r3, #3
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	4a6b      	ldr	r2, [pc, #428]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
 80044fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	ee07 3a90 	vmov	s15, r3
 8004504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004516:	4b62      	ldr	r3, [pc, #392]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004526:	ed97 6a02 	vldr	s12, [r7, #8]
 800452a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80046b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800452e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004546:	e087      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	eddf 6a58 	vldr	s13, [pc, #352]	; 80046b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455a:	4b51      	ldr	r3, [pc, #324]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	ed97 6a02 	vldr	s12, [r7, #8]
 800456e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80046b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800457e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800458a:	e065      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	eddf 6a48 	vldr	s13, [pc, #288]	; 80046b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800459a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459e:	4b40      	ldr	r3, [pc, #256]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80045b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80046b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ce:	e043      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80046bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80045de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e2:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80046b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004612:	e021      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80046b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004626:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004636:	ed97 6a02 	vldr	s12, [r7, #8]
 800463a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80046b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800463e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800464a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004656:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	0a5b      	lsrs	r3, r3, #9
 800465e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004662:	3301      	adds	r3, #1
 8004664:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004670:	edd7 6a07 	vldr	s13, [r7, #28]
 8004674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467c:	ee17 3a90 	vmov	r3, s15
 8004680:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004682:	e005      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
    break;
 8004688:	e002      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800468a:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800468c:	61bb      	str	r3, [r7, #24]
    break;
 800468e:	bf00      	nop
  }

  return sysclockfreq;
 8004690:	69bb      	ldr	r3, [r7, #24]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3724      	adds	r7, #36	; 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	58024400 	.word	0x58024400
 80046a4:	03d09000 	.word	0x03d09000
 80046a8:	003d0900 	.word	0x003d0900
 80046ac:	007a1200 	.word	0x007a1200
 80046b0:	46000000 	.word	0x46000000
 80046b4:	4c742400 	.word	0x4c742400
 80046b8:	4a742400 	.word	0x4a742400
 80046bc:	4af42400 	.word	0x4af42400

080046c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80046c6:	f7ff fe81 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 80046ca:	4602      	mov	r2, r0
 80046cc:	4b10      	ldr	r3, [pc, #64]	; (8004710 <HAL_RCC_GetHCLKFreq+0x50>)
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	490f      	ldr	r1, [pc, #60]	; (8004714 <HAL_RCC_GetHCLKFreq+0x54>)
 80046d8:	5ccb      	ldrb	r3, [r1, r3]
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	fa22 f303 	lsr.w	r3, r2, r3
 80046e2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <HAL_RCC_GetHCLKFreq+0x50>)
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	4a09      	ldr	r2, [pc, #36]	; (8004714 <HAL_RCC_GetHCLKFreq+0x54>)
 80046ee:	5cd3      	ldrb	r3, [r2, r3]
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	fa22 f303 	lsr.w	r3, r2, r3
 80046fa:	4a07      	ldr	r2, [pc, #28]	; (8004718 <HAL_RCC_GetHCLKFreq+0x58>)
 80046fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046fe:	4a07      	ldr	r2, [pc, #28]	; (800471c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <HAL_RCC_GetHCLKFreq+0x58>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	58024400 	.word	0x58024400
 8004714:	0800c838 	.word	0x0800c838
 8004718:	24000008 	.word	0x24000008
 800471c:	24000004 	.word	0x24000004

08004720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004724:	f7ff ffcc 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 8004728:	4602      	mov	r2, r0
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	091b      	lsrs	r3, r3, #4
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	4904      	ldr	r1, [pc, #16]	; (8004748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004736:	5ccb      	ldrb	r3, [r1, r3]
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004740:	4618      	mov	r0, r3
 8004742:	bd80      	pop	{r7, pc}
 8004744:	58024400 	.word	0x58024400
 8004748:	0800c838 	.word	0x0800c838

0800474c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004750:	f7ff ffb6 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 8004754:	4602      	mov	r2, r0
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	4904      	ldr	r1, [pc, #16]	; (8004774 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004762:	5ccb      	ldrb	r3, [r1, r3]
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	58024400 	.word	0x58024400
 8004774:	0800c838 	.word	0x0800c838

08004778 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004780:	2300      	movs	r3, #0
 8004782:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004784:	2300      	movs	r3, #0
 8004786:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d03f      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004798:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800479c:	d02a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800479e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047a2:	d824      	bhi.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047a8:	d018      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ae:	d81e      	bhi.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b8:	d007      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80047ba:	e018      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047bc:	4b9f      	ldr	r3, [pc, #636]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	4a9e      	ldr	r2, [pc, #632]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047c8:	e015      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3304      	adds	r3, #4
 80047ce:	2102      	movs	r1, #2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 ff1b 	bl	800660c <RCCEx_PLL2_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047da:	e00c      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3324      	adds	r3, #36	; 0x24
 80047e0:	2102      	movs	r1, #2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 ffc4 	bl	8006770 <RCCEx_PLL3_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047ec:	e003      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	75fb      	strb	r3, [r7, #23]
      break;
 80047f2:	e000      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d109      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047fc:	4b8f      	ldr	r3, [pc, #572]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004808:	498c      	ldr	r1, [pc, #560]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	650b      	str	r3, [r1, #80]	; 0x50
 800480e:	e001      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004810:	7dfb      	ldrb	r3, [r7, #23]
 8004812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d03d      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	2b04      	cmp	r3, #4
 8004826:	d826      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004828:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482e:	bf00      	nop
 8004830:	08004845 	.word	0x08004845
 8004834:	08004853 	.word	0x08004853
 8004838:	08004865 	.word	0x08004865
 800483c:	0800487d 	.word	0x0800487d
 8004840:	0800487d 	.word	0x0800487d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004844:	4b7d      	ldr	r3, [pc, #500]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	4a7c      	ldr	r2, [pc, #496]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800484a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004850:	e015      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3304      	adds	r3, #4
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f001 fed7 	bl	800660c <RCCEx_PLL2_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004862:	e00c      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3324      	adds	r3, #36	; 0x24
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f001 ff80 	bl	8006770 <RCCEx_PLL3_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004874:	e003      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
      break;
 800487a:	e000      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800487c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004884:	4b6d      	ldr	r3, [pc, #436]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004888:	f023 0207 	bic.w	r2, r3, #7
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004890:	496a      	ldr	r1, [pc, #424]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	650b      	str	r3, [r1, #80]	; 0x50
 8004896:	e001      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d04a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80048b0:	d031      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80048b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80048b6:	d82b      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80048b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048bc:	d02d      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80048be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c2:	d825      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80048c4:	2bc0      	cmp	r3, #192	; 0xc0
 80048c6:	d02a      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80048c8:	2bc0      	cmp	r3, #192	; 0xc0
 80048ca:	d821      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80048cc:	2b80      	cmp	r3, #128	; 0x80
 80048ce:	d016      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x186>
 80048d0:	2b80      	cmp	r3, #128	; 0x80
 80048d2:	d81d      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x166>
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d007      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>
 80048dc:	e018      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048de:	4b57      	ldr	r3, [pc, #348]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	4a56      	ldr	r2, [pc, #344]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80048ea:	e019      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 fe8a 	bl	800660c <RCCEx_PLL2_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80048fc:	e010      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3324      	adds	r3, #36	; 0x24
 8004902:	2100      	movs	r1, #0
 8004904:	4618      	mov	r0, r3
 8004906:	f001 ff33 	bl	8006770 <RCCEx_PLL3_Config>
 800490a:	4603      	mov	r3, r0
 800490c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800490e:	e007      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
      break;
 8004914:	e004      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004916:	bf00      	nop
 8004918:	e002      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800491a:	bf00      	nop
 800491c:	e000      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800491e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004920:	7dfb      	ldrb	r3, [r7, #23]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004926:	4b45      	ldr	r3, [pc, #276]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	4942      	ldr	r1, [pc, #264]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004934:	4313      	orrs	r3, r2
 8004936:	650b      	str	r3, [r1, #80]	; 0x50
 8004938:	e001      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493a:	7dfb      	ldrb	r3, [r7, #23]
 800493c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004946:	2b00      	cmp	r3, #0
 8004948:	d04f      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004952:	d036      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004954:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004958:	d830      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800495a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495e:	d032      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004964:	d82a      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004966:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800496a:	d02e      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x252>
 800496c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004970:	d824      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004976:	d018      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497c:	d81e      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004986:	d007      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004988:	e018      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800498a:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	4a2b      	ldr	r2, [pc, #172]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004994:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004996:	e019      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	2100      	movs	r1, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f001 fe34 	bl	800660c <RCCEx_PLL2_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80049a8:	e010      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3324      	adds	r3, #36	; 0x24
 80049ae:	2100      	movs	r1, #0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f001 fedd 	bl	8006770 <RCCEx_PLL3_Config>
 80049b6:	4603      	mov	r3, r0
 80049b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80049ba:	e007      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	75fb      	strb	r3, [r7, #23]
      break;
 80049c0:	e004      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80049c2:	bf00      	nop
 80049c4:	e002      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80049ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80049d2:	4b1a      	ldr	r3, [pc, #104]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	4917      	ldr	r1, [pc, #92]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	650b      	str	r3, [r1, #80]	; 0x50
 80049e4:	e001      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d034      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fa:	2b30      	cmp	r3, #48	; 0x30
 80049fc:	d01c      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80049fe:	2b30      	cmp	r3, #48	; 0x30
 8004a00:	d817      	bhi.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d00c      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a06:	2b20      	cmp	r3, #32
 8004a08:	d813      	bhi.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d018      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004a0e:	2b10      	cmp	r3, #16
 8004a10:	d10f      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a12:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004a1e:	e010      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3304      	adds	r3, #4
 8004a24:	2102      	movs	r1, #2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 fdf0 	bl	800660c <RCCEx_PLL2_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004a30:	e007      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	75fb      	strb	r3, [r7, #23]
      break;
 8004a36:	e004      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8004a38:	bf00      	nop
 8004a3a:	e002      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a3c:	58024400 	.word	0x58024400
      break;
 8004a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a48:	4b9b      	ldr	r3, [pc, #620]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a54:	4998      	ldr	r1, [pc, #608]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a5a:	e001      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
 8004a5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d047      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a74:	d030      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004a76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a7a:	d82a      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004a7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a80:	d02c      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a86:	d824      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8c:	d018      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a92:	d81e      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9c:	d007      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004a9e:	e018      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa0:	4b85      	ldr	r3, [pc, #532]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	4a84      	ldr	r2, [pc, #528]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004aac:	e017      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f001 fda9 	bl	800660c <RCCEx_PLL2_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004abe:	e00e      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3324      	adds	r3, #36	; 0x24
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 fe52 	bl	8006770 <RCCEx_PLL3_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004ad0:	e005      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad6:	e002      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004ad8:	bf00      	nop
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ae4:	4b74      	ldr	r3, [pc, #464]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af0:	4971      	ldr	r1, [pc, #452]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	650b      	str	r3, [r1, #80]	; 0x50
 8004af6:	e001      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d049      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b10:	d02e      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004b12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b16:	d828      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004b18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b1c:	d02a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004b1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b22:	d822      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004b24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b28:	d026      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004b2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b2e:	d81c      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b34:	d010      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b3a:	d816      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01d      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d111      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f001 fd5d 	bl	800660c <RCCEx_PLL2_Config>
 8004b52:	4603      	mov	r3, r0
 8004b54:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b56:	e012      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3324      	adds	r3, #36	; 0x24
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 fe06 	bl	8006770 <RCCEx_PLL3_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b68:	e009      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b6e:	e006      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004b70:	bf00      	nop
 8004b72:	e004      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004b74:	bf00      	nop
 8004b76:	e002      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004b78:	bf00      	nop
 8004b7a:	e000      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b84:	4b4c      	ldr	r3, [pc, #304]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b90:	4949      	ldr	r1, [pc, #292]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	650b      	str	r3, [r1, #80]	; 0x50
 8004b96:	e001      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d053      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bae:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004bb2:	d034      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004bb4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004bb8:	d82e      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bbe:	d030      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bc4:	d828      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bca:	d02c      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd0:	d822      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004bd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bd6:	d028      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004bd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bdc:	d81c      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be2:	d010      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be8:	d816      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01f      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bf2:	d111      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 fd06 	bl	800660c <RCCEx_PLL2_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c04:	e014      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3324      	adds	r3, #36	; 0x24
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 fdaf 	bl	8006770 <RCCEx_PLL3_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c16:	e00b      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1c:	e008      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e006      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004c22:	bf00      	nop
 8004c24:	e004      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004c26:	bf00      	nop
 8004c28:	e002      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e000      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c36:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c44:	491c      	ldr	r1, [pc, #112]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	658b      	str	r3, [r1, #88]	; 0x58
 8004c4a:	e001      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d031      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c64:	d00e      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6a:	d814      	bhi.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d015      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c74:	d10f      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c76:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	4a0f      	ldr	r2, [pc, #60]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004c82:	e00c      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	2101      	movs	r1, #1
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f001 fcbe 	bl	800660c <RCCEx_PLL2_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004c94:	e003      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9a:	e000      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ca4:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb0:	4901      	ldr	r1, [pc, #4]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	650b      	str	r3, [r1, #80]	; 0x50
 8004cb6:	e003      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004cb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d032      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d81b      	bhi.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004cd4:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004d13 	.word	0x08004d13
 8004ce0:	08004ced 	.word	0x08004ced
 8004ce4:	08004cfb 	.word	0x08004cfb
 8004ce8:	08004d13 	.word	0x08004d13
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cec:	4bb2      	ldr	r3, [pc, #712]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	4ab1      	ldr	r2, [pc, #708]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004cf8:	e00c      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	2102      	movs	r1, #2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 fc83 	bl	800660c <RCCEx_PLL2_Config>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d0a:	e003      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d10:	e000      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d1a:	4ba7      	ldr	r3, [pc, #668]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1e:	f023 0203 	bic.w	r2, r3, #3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	49a4      	ldr	r1, [pc, #656]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d2c:	e001      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8086 	beq.w	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d40:	4b9e      	ldr	r3, [pc, #632]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a9d      	ldr	r2, [pc, #628]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d4c:	f7fc fcbe 	bl	80016cc <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d52:	e009      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d54:	f7fc fcba 	bl	80016cc <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	; 0x64
 8004d60:	d902      	bls.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	75fb      	strb	r3, [r7, #23]
        break;
 8004d66:	e005      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d68:	4b94      	ldr	r3, [pc, #592]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0ef      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004d74:	7dfb      	ldrb	r3, [r7, #23]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d166      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d7a:	4b8f      	ldr	r3, [pc, #572]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d84:	4053      	eors	r3, r2
 8004d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d013      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d8e:	4b8a      	ldr	r3, [pc, #552]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d96:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d98:	4b87      	ldr	r3, [pc, #540]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9c:	4a86      	ldr	r2, [pc, #536]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004da4:	4b84      	ldr	r3, [pc, #528]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	4a83      	ldr	r2, [pc, #524]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004db0:	4a81      	ldr	r2, [pc, #516]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc0:	d115      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc2:	f7fc fc83 	bl	80016cc <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dc8:	e00b      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dca:	f7fc fc7f 	bl	80016cc <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d902      	bls.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	75fb      	strb	r3, [r7, #23]
            break;
 8004de0:	e005      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004de2:	4b75      	ldr	r3, [pc, #468]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0ed      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d126      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e02:	d10d      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8004e04:	4b6c      	ldr	r3, [pc, #432]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e12:	0919      	lsrs	r1, r3, #4
 8004e14:	4b6a      	ldr	r3, [pc, #424]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004e16:	400b      	ands	r3, r1
 8004e18:	4967      	ldr	r1, [pc, #412]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	610b      	str	r3, [r1, #16]
 8004e1e:	e005      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004e20:	4b65      	ldr	r3, [pc, #404]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	4a64      	ldr	r2, [pc, #400]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e2a:	6113      	str	r3, [r2, #16]
 8004e2c:	4b62      	ldr	r3, [pc, #392]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3a:	495f      	ldr	r1, [pc, #380]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	670b      	str	r3, [r1, #112]	; 0x70
 8004e40:	e004      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
 8004e44:	75bb      	strb	r3, [r7, #22]
 8004e46:	e001      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d07f      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e5e:	2b28      	cmp	r3, #40	; 0x28
 8004e60:	d866      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8004e62:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004f37 	.word	0x08004f37
 8004e6c:	08004f31 	.word	0x08004f31
 8004e70:	08004f31 	.word	0x08004f31
 8004e74:	08004f31 	.word	0x08004f31
 8004e78:	08004f31 	.word	0x08004f31
 8004e7c:	08004f31 	.word	0x08004f31
 8004e80:	08004f31 	.word	0x08004f31
 8004e84:	08004f31 	.word	0x08004f31
 8004e88:	08004f0d 	.word	0x08004f0d
 8004e8c:	08004f31 	.word	0x08004f31
 8004e90:	08004f31 	.word	0x08004f31
 8004e94:	08004f31 	.word	0x08004f31
 8004e98:	08004f31 	.word	0x08004f31
 8004e9c:	08004f31 	.word	0x08004f31
 8004ea0:	08004f31 	.word	0x08004f31
 8004ea4:	08004f31 	.word	0x08004f31
 8004ea8:	08004f1f 	.word	0x08004f1f
 8004eac:	08004f31 	.word	0x08004f31
 8004eb0:	08004f31 	.word	0x08004f31
 8004eb4:	08004f31 	.word	0x08004f31
 8004eb8:	08004f31 	.word	0x08004f31
 8004ebc:	08004f31 	.word	0x08004f31
 8004ec0:	08004f31 	.word	0x08004f31
 8004ec4:	08004f31 	.word	0x08004f31
 8004ec8:	08004f37 	.word	0x08004f37
 8004ecc:	08004f31 	.word	0x08004f31
 8004ed0:	08004f31 	.word	0x08004f31
 8004ed4:	08004f31 	.word	0x08004f31
 8004ed8:	08004f31 	.word	0x08004f31
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08004f31 	.word	0x08004f31
 8004ee8:	08004f37 	.word	0x08004f37
 8004eec:	08004f31 	.word	0x08004f31
 8004ef0:	08004f31 	.word	0x08004f31
 8004ef4:	08004f31 	.word	0x08004f31
 8004ef8:	08004f31 	.word	0x08004f31
 8004efc:	08004f31 	.word	0x08004f31
 8004f00:	08004f31 	.word	0x08004f31
 8004f04:	08004f31 	.word	0x08004f31
 8004f08:	08004f37 	.word	0x08004f37
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	2101      	movs	r1, #1
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 fb7a 	bl	800660c <RCCEx_PLL2_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004f1c:	e00c      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3324      	adds	r3, #36	; 0x24
 8004f22:	2101      	movs	r1, #1
 8004f24:	4618      	mov	r0, r3
 8004f26:	f001 fc23 	bl	8006770 <RCCEx_PLL3_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004f2e:	e003      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	75fb      	strb	r3, [r7, #23]
      break;
 8004f34:	e000      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8004f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f3e:	4b1e      	ldr	r3, [pc, #120]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f4c:	491a      	ldr	r1, [pc, #104]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	654b      	str	r3, [r1, #84]	; 0x54
 8004f52:	e001      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
 8004f56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d03f      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f68:	2b05      	cmp	r3, #5
 8004f6a:	d821      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004f6c:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f72:	bf00      	nop
 8004f74:	08004fc5 	.word	0x08004fc5
 8004f78:	08004f8d 	.word	0x08004f8d
 8004f7c:	08004f9f 	.word	0x08004f9f
 8004f80:	08004fc5 	.word	0x08004fc5
 8004f84:	08004fc5 	.word	0x08004fc5
 8004f88:	08004fc5 	.word	0x08004fc5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	2101      	movs	r1, #1
 8004f92:	4618      	mov	r0, r3
 8004f94:	f001 fb3a 	bl	800660c <RCCEx_PLL2_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004f9c:	e013      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3324      	adds	r3, #36	; 0x24
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 fbe3 	bl	8006770 <RCCEx_PLL3_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb4:	e007      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004fb6:	bf00      	nop
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	58024800 	.word	0x58024800
 8004fc0:	00ffffcf 	.word	0x00ffffcf
      break;
 8004fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d109      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004fcc:	4b9f      	ldr	r3, [pc, #636]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	f023 0207 	bic.w	r2, r3, #7
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd8:	499c      	ldr	r1, [pc, #624]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	654b      	str	r3, [r1, #84]	; 0x54
 8004fde:	e001      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d039      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ff6:	2b05      	cmp	r3, #5
 8004ff8:	d820      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004ffa:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005000:	08005043 	.word	0x08005043
 8005004:	08005019 	.word	0x08005019
 8005008:	0800502b 	.word	0x0800502b
 800500c:	08005043 	.word	0x08005043
 8005010:	08005043 	.word	0x08005043
 8005014:	08005043 	.word	0x08005043
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	2101      	movs	r1, #1
 800501e:	4618      	mov	r0, r3
 8005020:	f001 faf4 	bl	800660c <RCCEx_PLL2_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005028:	e00c      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3324      	adds	r3, #36	; 0x24
 800502e:	2101      	movs	r1, #1
 8005030:	4618      	mov	r0, r3
 8005032:	f001 fb9d 	bl	8006770 <RCCEx_PLL3_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800503a:	e003      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	75fb      	strb	r3, [r7, #23]
      break;
 8005040:	e000      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8005042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005044:	7dfb      	ldrb	r3, [r7, #23]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10a      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800504a:	4b80      	ldr	r3, [pc, #512]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	f023 0207 	bic.w	r2, r3, #7
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005058:	497c      	ldr	r1, [pc, #496]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800505a:	4313      	orrs	r3, r2
 800505c:	658b      	str	r3, [r1, #88]	; 0x58
 800505e:	e001      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b00      	cmp	r3, #0
 800506e:	d04b      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800507a:	d02e      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x962>
 800507c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005080:	d828      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005086:	d02a      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508c:	d822      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800508e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005092:	d026      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005094:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005098:	d81c      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800509a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509e:	d010      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80050a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a4:	d816      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d01d      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80050aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050ae:	d111      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f001 faa8 	bl	800660c <RCCEx_PLL2_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80050c0:	e012      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3324      	adds	r3, #36	; 0x24
 80050c6:	2102      	movs	r1, #2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 fb51 	bl	8006770 <RCCEx_PLL3_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80050d2:	e009      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	75fb      	strb	r3, [r7, #23]
      break;
 80050d8:	e006      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80050da:	bf00      	nop
 80050dc:	e004      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80050de:	bf00      	nop
 80050e0:	e002      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80050e2:	bf00      	nop
 80050e4:	e000      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80050e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ee:	4b57      	ldr	r3, [pc, #348]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050fc:	4953      	ldr	r1, [pc, #332]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	654b      	str	r3, [r1, #84]	; 0x54
 8005102:	e001      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	d04b      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800511a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800511e:	d02e      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005120:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005124:	d828      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512a:	d02a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800512c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005130:	d822      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005132:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005136:	d026      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005138:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800513c:	d81c      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800513e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005142:	d010      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005148:	d816      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01d      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800514e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005152:	d111      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	2100      	movs	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f001 fa56 	bl	800660c <RCCEx_PLL2_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005164:	e012      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3324      	adds	r3, #36	; 0x24
 800516a:	2102      	movs	r1, #2
 800516c:	4618      	mov	r0, r3
 800516e:	f001 faff 	bl	8006770 <RCCEx_PLL3_Config>
 8005172:	4603      	mov	r3, r0
 8005174:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005176:	e009      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	75fb      	strb	r3, [r7, #23]
      break;
 800517c:	e006      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800517e:	bf00      	nop
 8005180:	e004      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800518a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005192:	4b2e      	ldr	r3, [pc, #184]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005196:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051a0:	492a      	ldr	r1, [pc, #168]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	658b      	str	r3, [r1, #88]	; 0x58
 80051a6:	e001      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
 80051aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d04d      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051c2:	d02e      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80051c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051c8:	d828      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80051ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ce:	d02a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80051d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d4:	d822      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80051d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80051da:	d026      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80051dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80051e0:	d81c      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80051e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051e6:	d010      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80051e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ec:	d816      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01d      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80051f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f6:	d111      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 fa04 	bl	800660c <RCCEx_PLL2_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005208:	e012      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3324      	adds	r3, #36	; 0x24
 800520e:	2102      	movs	r1, #2
 8005210:	4618      	mov	r0, r3
 8005212:	f001 faad 	bl	8006770 <RCCEx_PLL3_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800521a:	e009      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	75fb      	strb	r3, [r7, #23]
      break;
 8005220:	e006      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005222:	bf00      	nop
 8005224:	e004      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005226:	bf00      	nop
 8005228:	e002      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800522e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10c      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005244:	4901      	ldr	r1, [pc, #4]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005246:	4313      	orrs	r3, r2
 8005248:	658b      	str	r3, [r1, #88]	; 0x58
 800524a:	e003      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800524c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005250:	7dfb      	ldrb	r3, [r7, #23]
 8005252:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	d10a      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3324      	adds	r3, #36	; 0x24
 8005270:	2102      	movs	r1, #2
 8005272:	4618      	mov	r0, r3
 8005274:	f001 fa7c 	bl	8006770 <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005282:	4b8c      	ldr	r3, [pc, #560]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	4988      	ldr	r1, [pc, #544]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005292:	4313      	orrs	r3, r2
 8005294:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ac:	d10a      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3324      	adds	r3, #36	; 0x24
 80052b2:	2102      	movs	r1, #2
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 fa5b 	bl	8006770 <RCCEx_PLL3_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052c4:	4b7b      	ldr	r3, [pc, #492]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052d2:	4978      	ldr	r1, [pc, #480]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d034      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ee:	d01d      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80052f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052f4:	d817      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fe:	d009      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005300:	e011      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3304      	adds	r3, #4
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f001 f97f 	bl	800660c <RCCEx_PLL2_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005312:	e00c      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3324      	adds	r3, #36	; 0x24
 8005318:	2102      	movs	r1, #2
 800531a:	4618      	mov	r0, r3
 800531c:	f001 fa28 	bl	8006770 <RCCEx_PLL3_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005324:	e003      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	75fb      	strb	r3, [r7, #23]
      break;
 800532a:	e000      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800532c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005334:	4b5f      	ldr	r3, [pc, #380]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005342:	495c      	ldr	r1, [pc, #368]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005344:	4313      	orrs	r3, r2
 8005346:	658b      	str	r3, [r1, #88]	; 0x58
 8005348:	e001      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d033      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005360:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005364:	d01c      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005366:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800536a:	d816      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800536c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005370:	d003      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005376:	d007      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005378:	e00f      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537a:	4b4e      	ldr	r3, [pc, #312]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	4a4d      	ldr	r2, [pc, #308]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005384:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005386:	e00c      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3324      	adds	r3, #36	; 0x24
 800538c:	2101      	movs	r1, #1
 800538e:	4618      	mov	r0, r3
 8005390:	f001 f9ee 	bl	8006770 <RCCEx_PLL3_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005398:	e003      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	75fb      	strb	r3, [r7, #23]
      break;
 800539e:	e000      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80053a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053a8:	4b42      	ldr	r3, [pc, #264]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80053aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b6:	493f      	ldr	r1, [pc, #252]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	654b      	str	r3, [r1, #84]	; 0x54
 80053bc:	e001      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d029      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80053d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053da:	d007      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80053dc:	e00f      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053de:	4b35      	ldr	r3, [pc, #212]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	4a34      	ldr	r2, [pc, #208]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80053e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80053ea:	e00b      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	2102      	movs	r1, #2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f001 f90a 	bl	800660c <RCCEx_PLL2_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80053fc:	e002      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	75fb      	strb	r3, [r7, #23]
      break;
 8005402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d109      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800540a:	4b2a      	ldr	r3, [pc, #168]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800540c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005416:	4927      	ldr	r1, [pc, #156]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005418:	4313      	orrs	r3, r2
 800541a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800541c:	e001      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541e:	7dfb      	ldrb	r3, [r7, #23]
 8005420:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3324      	adds	r3, #36	; 0x24
 8005432:	2102      	movs	r1, #2
 8005434:	4618      	mov	r0, r3
 8005436:	f001 f99b 	bl	8006770 <RCCEx_PLL3_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d035      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800545a:	d017      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800545c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005460:	d811      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005466:	d013      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546c:	d80b      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d010      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005476:	d106      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005478:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	4a0d      	ldr	r2, [pc, #52]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800547e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005484:	e007      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	75fb      	strb	r3, [r7, #23]
      break;
 800548a:	e004      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800548c:	bf00      	nop
 800548e:	e002      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005490:	bf00      	nop
 8005492:	e000      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005496:	7dfb      	ldrb	r3, [r7, #23]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10d      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800549e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054aa:	4902      	ldr	r1, [pc, #8]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	654b      	str	r3, [r1, #84]	; 0x54
 80054b0:	e004      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80054b2:	bf00      	nop
 80054b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
 80054ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054c8:	4b30      	ldr	r3, [pc, #192]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80054ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d4:	492d      	ldr	r1, [pc, #180]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d008      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054e6:	4b29      	ldr	r3, [pc, #164]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80054e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f2:	4926      	ldr	r1, [pc, #152]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005504:	4b21      	ldr	r3, [pc, #132]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005508:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005510:	491e      	ldr	r1, [pc, #120]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005512:	4313      	orrs	r3, r2
 8005514:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00d      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005522:	4b1a      	ldr	r3, [pc, #104]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	4a19      	ldr	r2, [pc, #100]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005528:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800552c:	6113      	str	r3, [r2, #16]
 800552e:	4b17      	ldr	r3, [pc, #92]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005538:	4914      	ldr	r1, [pc, #80]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800553a:	4313      	orrs	r3, r2
 800553c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da08      	bge.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005546:	4b11      	ldr	r3, [pc, #68]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005552:	490e      	ldr	r1, [pc, #56]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005554:	4313      	orrs	r3, r2
 8005556:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d009      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005564:	4b09      	ldr	r3, [pc, #36]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	4906      	ldr	r1, [pc, #24]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005574:	4313      	orrs	r3, r2
 8005576:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005578:	7dbb      	ldrb	r3, [r7, #22]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	e000      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	58024400 	.word	0x58024400

08005590 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b090      	sub	sp, #64	; 0x40
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800559e:	f040 8089 	bne.w	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80055a2:	4b91      	ldr	r3, [pc, #580]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80055a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d87d      	bhi.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	080055cd 	.word	0x080055cd
 80055bc:	080055f1 	.word	0x080055f1
 80055c0:	08005615 	.word	0x08005615
 80055c4:	080056a9 	.word	0x080056a9
 80055c8:	08005639 	.word	0x08005639
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055cc:	4b86      	ldr	r3, [pc, #536]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055d8:	d107      	bne.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fec2 	bl	8006368 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055e8:	e3f4      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ee:	e3f1      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055f0:	4b7d      	ldr	r3, [pc, #500]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055fc:	d107      	bne.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055fe:	f107 0318 	add.w	r3, r7, #24
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fc08 	bl	8005e18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800560c:	e3e2      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005612:	e3df      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005614:	4b74      	ldr	r3, [pc, #464]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800561c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005620:	d107      	bne.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005622:	f107 030c 	add.w	r3, r7, #12
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fd4a 	bl	80060c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005630:	e3d0      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005636:	e3cd      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005638:	4b6b      	ldr	r3, [pc, #428]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800563a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005640:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005642:	4b69      	ldr	r3, [pc, #420]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b04      	cmp	r3, #4
 800564c:	d10c      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800564e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005654:	4b64      	ldr	r3, [pc, #400]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	08db      	lsrs	r3, r3, #3
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	4a63      	ldr	r2, [pc, #396]	; (80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
 8005664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005666:	e01e      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005668:	4b5f      	ldr	r3, [pc, #380]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005674:	d106      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800567c:	d102      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800567e:	4b5c      	ldr	r3, [pc, #368]	; (80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005682:	e010      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005684:	4b58      	ldr	r3, [pc, #352]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005690:	d106      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005698:	d102      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800569a:	4b56      	ldr	r3, [pc, #344]	; (80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569e:	e002      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80056a4:	e396      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80056a6:	e395      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80056a8:	4b53      	ldr	r3, [pc, #332]	; (80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056ac:	e392      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b2:	e38f      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ba:	f040 809f 	bne.w	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80056be:	4b4a      	ldr	r3, [pc, #296]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80056c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80056c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ce:	d04d      	beq.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d6:	f200 8084 	bhi.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	2bc0      	cmp	r3, #192	; 0xc0
 80056de:	d07d      	beq.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	2bc0      	cmp	r3, #192	; 0xc0
 80056e4:	d87d      	bhi.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	2b80      	cmp	r3, #128	; 0x80
 80056ea:	d02d      	beq.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	2b80      	cmp	r3, #128	; 0x80
 80056f0:	d877      	bhi.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d012      	beq.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80056fe:	e070      	b.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005700:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800570c:	d107      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800570e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fe28 	bl	8006368 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800571c:	e35a      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005722:	e357      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005724:	4b30      	ldr	r3, [pc, #192]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800572c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005730:	d107      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005732:	f107 0318 	add.w	r3, r7, #24
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fb6e 	bl	8005e18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005740:	e348      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005746:	e345      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005748:	4b27      	ldr	r3, [pc, #156]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005754:	d107      	bne.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005756:	f107 030c 	add.w	r3, r7, #12
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fcb0 	bl	80060c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005764:	e336      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800576a:	e333      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800576c:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800576e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005770:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005774:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005776:	4b1c      	ldr	r3, [pc, #112]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b04      	cmp	r3, #4
 8005780:	d10c      	bne.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005788:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	08db      	lsrs	r3, r3, #3
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	4a16      	ldr	r2, [pc, #88]	; (80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800579a:	e01e      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800579c:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a8:	d106      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057b0:	d102      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80057b2:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b6:	e010      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057b8:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057c4:	d106      	bne.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057cc:	d102      	bne.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d2:	e002      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80057d8:	e2fc      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80057da:	e2fb      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80057dc:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057e0:	e2f8      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057e6:	e2f5      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80057e8:	58024400 	.word	0x58024400
 80057ec:	03d09000 	.word	0x03d09000
 80057f0:	003d0900 	.word	0x003d0900
 80057f4:	007a1200 	.word	0x007a1200
 80057f8:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005802:	f040 809c 	bne.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8005806:	4b9d      	ldr	r3, [pc, #628]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800580e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005816:	d054      	beq.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800581e:	f200 808b 	bhi.w	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005828:	f000 8083 	beq.w	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005832:	f200 8081 	bhi.w	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583c:	d02f      	beq.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005844:	d878      	bhi.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	2b00      	cmp	r3, #0
 800584a:	d004      	beq.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005852:	d012      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005854:	e070      	b.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005856:	4b89      	ldr	r3, [pc, #548]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005862:	d107      	bne.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fd7d 	bl	8006368 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005872:	e2af      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005878:	e2ac      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800587a:	4b80      	ldr	r3, [pc, #512]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005886:	d107      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005888:	f107 0318 	add.w	r3, r7, #24
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fac3 	bl	8005e18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005896:	e29d      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800589c:	e29a      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800589e:	4b77      	ldr	r3, [pc, #476]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058aa:	d107      	bne.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ac:	f107 030c 	add.w	r3, r7, #12
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fc05 	bl	80060c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058ba:	e28b      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058c0:	e288      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80058c2:	4b6e      	ldr	r3, [pc, #440]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80058c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058cc:	4b6b      	ldr	r3, [pc, #428]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d10c      	bne.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 80058d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d109      	bne.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058de:	4b67      	ldr	r3, [pc, #412]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	08db      	lsrs	r3, r3, #3
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	4a65      	ldr	r2, [pc, #404]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 80058ea:	fa22 f303 	lsr.w	r3, r2, r3
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f0:	e01e      	b.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058f2:	4b62      	ldr	r3, [pc, #392]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fe:	d106      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005906:	d102      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005908:	4b5e      	ldr	r3, [pc, #376]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590c:	e010      	b.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800590e:	4b5b      	ldr	r3, [pc, #364]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800591a:	d106      	bne.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005922:	d102      	bne.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005924:	4b58      	ldr	r3, [pc, #352]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005928:	e002      	b.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 800592e:	e251      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005930:	e250      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005932:	4b56      	ldr	r3, [pc, #344]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005936:	e24d      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800593c:	e24a      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005944:	f040 80a7 	bne.w	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005948:	4b4c      	ldr	r3, [pc, #304]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005950:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005958:	d055      	beq.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005960:	f200 8096 	bhi.w	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800596a:	f000 8084 	beq.w	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005974:	f200 808c 	bhi.w	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597e:	d030      	beq.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005986:	f200 8083 	bhi.w	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8005990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005996:	d012      	beq.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8005998:	e07a      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800599a:	4b38      	ldr	r3, [pc, #224]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059a6:	d107      	bne.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fcdb 	bl	8006368 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059b6:	e20d      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059bc:	e20a      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059be:	4b2f      	ldr	r3, [pc, #188]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ca:	d107      	bne.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059cc:	f107 0318 	add.w	r3, r7, #24
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fa21 	bl	8005e18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059da:	e1fb      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059e0:	e1f8      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059e2:	4b26      	ldr	r3, [pc, #152]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ee:	d107      	bne.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059f0:	f107 030c 	add.w	r3, r7, #12
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fb63 	bl	80060c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059fe:	e1e9      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a04:	e1e6      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a06:	4b1d      	ldr	r3, [pc, #116]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a0e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a10:	4b1a      	ldr	r3, [pc, #104]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d10c      	bne.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a22:	4b16      	ldr	r3, [pc, #88]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	08db      	lsrs	r3, r3, #3
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	4a14      	ldr	r2, [pc, #80]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8005a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a34:	e01e      	b.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a36:	4b11      	ldr	r3, [pc, #68]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a42:	d106      	bne.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8005a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a4a:	d102      	bne.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a4c:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a50:	e010      	b.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a52:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a5e:	d106      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a66:	d102      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a68:	4b07      	ldr	r3, [pc, #28]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8005a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a6c:	e002      	b.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a72:	e1af      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005a74:	e1ae      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a76:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005a78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a7a:	e1ab      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005a7c:	58024400 	.word	0x58024400
 8005a80:	03d09000 	.word	0x03d09000
 8005a84:	003d0900 	.word	0x003d0900
 8005a88:	007a1200 	.word	0x007a1200
 8005a8c:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a94:	e19e      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a9c:	d173      	bne.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005a9e:	4b9d      	ldr	r3, [pc, #628]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005aa6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aae:	d02f      	beq.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ab6:	d863      	bhi.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac4:	d012      	beq.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8005ac6:	e05b      	b.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ac8:	4b92      	ldr	r3, [pc, #584]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ad4:	d107      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ad6:	f107 0318 	add.w	r3, r7, #24
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f99c 	bl	8005e18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ae4:	e176      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aea:	e173      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005aec:	4b89      	ldr	r3, [pc, #548]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005af8:	d107      	bne.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005afa:	f107 030c 	add.w	r3, r7, #12
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fade 	bl	80060c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b08:	e164      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b0e:	e161      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b10:	4b80      	ldr	r3, [pc, #512]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b18:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b1a:	4b7e      	ldr	r3, [pc, #504]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d10c      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8005b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b2c:	4b79      	ldr	r3, [pc, #484]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	08db      	lsrs	r3, r3, #3
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	4a78      	ldr	r2, [pc, #480]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b3e:	e01e      	b.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b40:	4b74      	ldr	r3, [pc, #464]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4c:	d106      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b54:	d102      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005b56:	4b71      	ldr	r3, [pc, #452]	; (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b5a:	e010      	b.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b5c:	4b6d      	ldr	r3, [pc, #436]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b68:	d106      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b70:	d102      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005b72:	4b6b      	ldr	r3, [pc, #428]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b76:	e002      	b.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005b7c:	e12a      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005b7e:	e129      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b84:	e126      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8c:	d133      	bne.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005b8e:	4b61      	ldr	r3, [pc, #388]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba4:	d012      	beq.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005ba6:	e023      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ba8:	4b5a      	ldr	r3, [pc, #360]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bb4:	d107      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fbd4 	bl	8006368 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005bc4:	e106      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bca:	e103      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bcc:	4b51      	ldr	r3, [pc, #324]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd8:	d107      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bda:	f107 0318 	add.w	r3, r7, #24
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f91a 	bl	8005e18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005be8:	e0f4      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bee:	e0f1      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bf4:	e0ee      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bfc:	f040 809b 	bne.w	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005c00:	4b44      	ldr	r3, [pc, #272]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c04:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005c08:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005c10:	f000 808b 	beq.w	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005c1a:	f200 8089 	bhi.w	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c24:	d06c      	beq.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c2c:	f200 8080 	bhi.w	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c36:	d056      	beq.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3e:	d877      	bhi.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c46:	d03b      	beq.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c4e:	d86f      	bhi.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c56:	d021      	beq.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c5e:	d867      	bhi.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d004      	beq.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c6c:	d004      	beq.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8005c6e:	e05f      	b.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005c70:	f000 f8bc 	bl	8005dec <HAL_RCCEx_GetD3PCLK1Freq>
 8005c74:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005c76:	e0ad      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c78:	4b26      	ldr	r3, [pc, #152]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c84:	d107      	bne.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c86:	f107 0318 	add.w	r3, r7, #24
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 f8c4 	bl	8005e18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c94:	e09e      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c9a:	e09b      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c9c:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca8:	d107      	bne.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005caa:	f107 030c 	add.w	r3, r7, #12
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fa06 	bl	80060c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005cb8:	e08c      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cbe:	e089      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cc0:	4b14      	ldr	r3, [pc, #80]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d109      	bne.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ccc:	4b11      	ldr	r3, [pc, #68]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	08db      	lsrs	r3, r3, #3
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	4a10      	ldr	r2, [pc, #64]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005cde:	e079      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ce4:	e076      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cf2:	d102      	bne.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8005cf4:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cf8:	e06c      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cfe:	e069      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d00:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d0c:	d10a      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8005d0e:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005d10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005d12:	e05f      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005d14:	58024400 	.word	0x58024400
 8005d18:	03d09000 	.word	0x03d09000
 8005d1c:	003d0900 	.word	0x003d0900
 8005d20:	007a1200 	.word	0x007a1200
          frequency = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d28:	e054      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d2a:	4b2d      	ldr	r3, [pc, #180]	; (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d2e:	e051      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005d30:	2300      	movs	r3, #0
 8005d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d34:	e04e      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d3c:	d148      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005d3e:	4b29      	ldr	r3, [pc, #164]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d4e:	d02a      	beq.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d56:	d838      	bhi.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d64:	d00d      	beq.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005d66:	e030      	b.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d68:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d74:	d102      	bne.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8005d76:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005d7a:	e02b      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d80:	e028      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d82:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d8e:	d107      	bne.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fae7 	bl	8006368 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005d9e:	e019      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005da4:	e016      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005da6:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005db2:	d107      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005db4:	f107 0318 	add.w	r3, r7, #24
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 f82d 	bl	8005e18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005dc2:	e007      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dc8:	e004      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dce:	e001      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3740      	adds	r7, #64	; 0x40
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	00bb8000 	.word	0x00bb8000
 8005de4:	58024400 	.word	0x58024400
 8005de8:	007a1200 	.word	0x007a1200

08005dec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005df0:	f7fe fc66 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 8005df4:	4602      	mov	r2, r0
 8005df6:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	091b      	lsrs	r3, r3, #4
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	4904      	ldr	r1, [pc, #16]	; (8005e14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e02:	5ccb      	ldrb	r3, [r1, r3]
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	58024400 	.word	0x58024400
 8005e14:	0800c838 	.word	0x0800c838

08005e18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b089      	sub	sp, #36	; 0x24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e20:	4ba1      	ldr	r3, [pc, #644]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005e2a:	4b9f      	ldr	r3, [pc, #636]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2e:	0b1b      	lsrs	r3, r3, #12
 8005e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e36:	4b9c      	ldr	r3, [pc, #624]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	091b      	lsrs	r3, r3, #4
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005e42:	4b99      	ldr	r3, [pc, #612]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e46:	08db      	lsrs	r3, r3, #3
 8005e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	fb02 f303 	mul.w	r3, r2, r3
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8111 	beq.w	8006088 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	f000 8083 	beq.w	8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	f200 80a1 	bhi.w	8005fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d056      	beq.n	8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e82:	e099      	b.n	8005fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e84:	4b88      	ldr	r3, [pc, #544]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02d      	beq.n	8005eec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e90:	4b85      	ldr	r3, [pc, #532]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	08db      	lsrs	r3, r3, #3
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	4a84      	ldr	r2, [pc, #528]	; (80060ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eba:	4b7b      	ldr	r3, [pc, #492]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ece:	eddf 5a78 	vldr	s11, [pc, #480]	; 80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005eea:	e087      	b.n	8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80060b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efe:	4b6a      	ldr	r3, [pc, #424]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f12:	eddf 5a67 	vldr	s11, [pc, #412]	; 80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f2e:	e065      	b.n	8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80060b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f42:	4b59      	ldr	r3, [pc, #356]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f56:	eddf 5a56 	vldr	s11, [pc, #344]	; 80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f72:	e043      	b.n	8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80060bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f86:	4b48      	ldr	r3, [pc, #288]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fb6:	e021      	b.n	8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80060b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fca:	4b37      	ldr	r3, [pc, #220]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fde:	eddf 5a34 	vldr	s11, [pc, #208]	; 80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ffa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005ffc:	4b2a      	ldr	r3, [pc, #168]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	0a5b      	lsrs	r3, r3, #9
 8006002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006012:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006016:	edd7 6a07 	vldr	s13, [r7, #28]
 800601a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800601e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006022:	ee17 2a90 	vmov	r2, s15
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800602a:	4b1f      	ldr	r3, [pc, #124]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	0c1b      	lsrs	r3, r3, #16
 8006030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006034:	ee07 3a90 	vmov	s15, r3
 8006038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006040:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006044:	edd7 6a07 	vldr	s13, [r7, #28]
 8006048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800604c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006050:	ee17 2a90 	vmov	r2, s15
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006058:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	0e1b      	lsrs	r3, r3, #24
 800605e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800606e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006072:	edd7 6a07 	vldr	s13, [r7, #28]
 8006076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800607a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800607e:	ee17 2a90 	vmov	r2, s15
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006086:	e008      	b.n	800609a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	609a      	str	r2, [r3, #8]
}
 800609a:	bf00      	nop
 800609c:	3724      	adds	r7, #36	; 0x24
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	58024400 	.word	0x58024400
 80060ac:	03d09000 	.word	0x03d09000
 80060b0:	46000000 	.word	0x46000000
 80060b4:	4c742400 	.word	0x4c742400
 80060b8:	4a742400 	.word	0x4a742400
 80060bc:	4af42400 	.word	0x4af42400

080060c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b089      	sub	sp, #36	; 0x24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060c8:	4ba1      	ldr	r3, [pc, #644]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060cc:	f003 0303 	and.w	r3, r3, #3
 80060d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80060d2:	4b9f      	ldr	r3, [pc, #636]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	0d1b      	lsrs	r3, r3, #20
 80060d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80060de:	4b9c      	ldr	r3, [pc, #624]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e2:	0a1b      	lsrs	r3, r3, #8
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80060ea:	4b99      	ldr	r3, [pc, #612]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	08db      	lsrs	r3, r3, #3
 80060f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	fb02 f303 	mul.w	r3, r2, r3
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006102:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 8111 	beq.w	8006330 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b02      	cmp	r3, #2
 8006112:	f000 8083 	beq.w	800621c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b02      	cmp	r3, #2
 800611a:	f200 80a1 	bhi.w	8006260 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d056      	beq.n	80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800612a:	e099      	b.n	8006260 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800612c:	4b88      	ldr	r3, [pc, #544]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	d02d      	beq.n	8006194 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006138:	4b85      	ldr	r3, [pc, #532]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	08db      	lsrs	r3, r3, #3
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	4a84      	ldr	r2, [pc, #528]	; (8006354 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006144:	fa22 f303 	lsr.w	r3, r2, r3
 8006148:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	ee07 3a90 	vmov	s15, r3
 8006150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006162:	4b7b      	ldr	r3, [pc, #492]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006172:	ed97 6a03 	vldr	s12, [r7, #12]
 8006176:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800617a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006192:	e087      	b.n	80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800635c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80061a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a6:	4b6a      	ldr	r3, [pc, #424]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061d6:	e065      	b.n	80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ea:	4b59      	ldr	r3, [pc, #356]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80061fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800620e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800621a:	e043      	b.n	80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006226:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800622a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622e:	4b48      	ldr	r3, [pc, #288]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006242:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800625e:	e021      	b.n	80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800626e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006272:	4b37      	ldr	r3, [pc, #220]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006282:	ed97 6a03 	vldr	s12, [r7, #12]
 8006286:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800628a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80062a4:	4b2a      	ldr	r3, [pc, #168]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a8:	0a5b      	lsrs	r3, r3, #9
 80062aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062be:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ca:	ee17 2a90 	vmov	r2, s15
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80062d2:	4b1f      	ldr	r3, [pc, #124]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	0c1b      	lsrs	r3, r3, #16
 80062d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80062f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f8:	ee17 2a90 	vmov	r2, s15
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006300:	4b13      	ldr	r3, [pc, #76]	; (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	0e1b      	lsrs	r3, r3, #24
 8006306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800631a:	edd7 6a07 	vldr	s13, [r7, #28]
 800631e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006326:	ee17 2a90 	vmov	r2, s15
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800632e:	e008      	b.n	8006342 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	609a      	str	r2, [r3, #8]
}
 8006342:	bf00      	nop
 8006344:	3724      	adds	r7, #36	; 0x24
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	58024400 	.word	0x58024400
 8006354:	03d09000 	.word	0x03d09000
 8006358:	46000000 	.word	0x46000000
 800635c:	4c742400 	.word	0x4c742400
 8006360:	4a742400 	.word	0x4a742400
 8006364:	4af42400 	.word	0x4af42400

08006368 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006368:	b480      	push	{r7}
 800636a:	b089      	sub	sp, #36	; 0x24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006370:	4ba0      	ldr	r3, [pc, #640]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006374:	f003 0303 	and.w	r3, r3, #3
 8006378:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800637a:	4b9e      	ldr	r3, [pc, #632]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	091b      	lsrs	r3, r3, #4
 8006380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006384:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006386:	4b9b      	ldr	r3, [pc, #620]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006390:	4b98      	ldr	r3, [pc, #608]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006394:	08db      	lsrs	r3, r3, #3
 8006396:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	ee07 3a90 	vmov	s15, r3
 80063a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8111 	beq.w	80065d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	f000 8083 	beq.w	80064c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	f200 80a1 	bhi.w	8006506 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d056      	beq.n	800647e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80063d0:	e099      	b.n	8006506 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063d2:	4b88      	ldr	r3, [pc, #544]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d02d      	beq.n	800643a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063de:	4b85      	ldr	r3, [pc, #532]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	08db      	lsrs	r3, r3, #3
 80063e4:	f003 0303 	and.w	r3, r3, #3
 80063e8:	4a83      	ldr	r2, [pc, #524]	; (80065f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80063ea:	fa22 f303 	lsr.w	r3, r2, r3
 80063ee:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006408:	4b7a      	ldr	r3, [pc, #488]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006410:	ee07 3a90 	vmov	s15, r3
 8006414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006418:	ed97 6a03 	vldr	s12, [r7, #12]
 800641c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800642c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006434:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006438:	e087      	b.n	800654a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006444:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006600 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800644c:	4b69      	ldr	r3, [pc, #420]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006454:	ee07 3a90 	vmov	s15, r3
 8006458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006460:	eddf 5a66 	vldr	s11, [pc, #408]	; 80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800646c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006470:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006478:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800647c:	e065      	b.n	800654a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006488:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006604 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800648c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006490:	4b58      	ldr	r3, [pc, #352]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80064a4:	eddf 5a55 	vldr	s11, [pc, #340]	; 80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064c0:	e043      	b.n	800654a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	ee07 3a90 	vmov	s15, r3
 80064c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064cc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006608 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80064d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d4:	4b47      	ldr	r3, [pc, #284]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80064e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006500:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006504:	e021      	b.n	800654a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	ee07 3a90 	vmov	s15, r3
 800650c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006510:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006600 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006518:	4b36      	ldr	r3, [pc, #216]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006520:	ee07 3a90 	vmov	s15, r3
 8006524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006528:	ed97 6a03 	vldr	s12, [r7, #12]
 800652c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800653c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006544:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006548:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800654a:	4b2a      	ldr	r3, [pc, #168]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654e:	0a5b      	lsrs	r3, r3, #9
 8006550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006554:	ee07 3a90 	vmov	s15, r3
 8006558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006560:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006564:	edd7 6a07 	vldr	s13, [r7, #28]
 8006568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800656c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006570:	ee17 2a90 	vmov	r2, s15
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006578:	4b1e      	ldr	r3, [pc, #120]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800658e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006592:	edd7 6a07 	vldr	s13, [r7, #28]
 8006596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800659a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800659e:	ee17 2a90 	vmov	r2, s15
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80065a6:	4b13      	ldr	r3, [pc, #76]	; (80065f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	0e1b      	lsrs	r3, r3, #24
 80065ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b0:	ee07 3a90 	vmov	s15, r3
 80065b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80065c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065cc:	ee17 2a90 	vmov	r2, s15
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80065d4:	e008      	b.n	80065e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	609a      	str	r2, [r3, #8]
}
 80065e8:	bf00      	nop
 80065ea:	3724      	adds	r7, #36	; 0x24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	58024400 	.word	0x58024400
 80065f8:	03d09000 	.word	0x03d09000
 80065fc:	46000000 	.word	0x46000000
 8006600:	4c742400 	.word	0x4c742400
 8006604:	4a742400 	.word	0x4a742400
 8006608:	4af42400 	.word	0x4af42400

0800660c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800661a:	4b53      	ldr	r3, [pc, #332]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	2b03      	cmp	r3, #3
 8006624:	d101      	bne.n	800662a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e099      	b.n	800675e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800662a:	4b4f      	ldr	r3, [pc, #316]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a4e      	ldr	r2, [pc, #312]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 8006630:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006636:	f7fb f849 	bl	80016cc <HAL_GetTick>
 800663a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800663c:	e008      	b.n	8006650 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800663e:	f7fb f845 	bl	80016cc <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e086      	b.n	800675e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006650:	4b45      	ldr	r3, [pc, #276]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1f0      	bne.n	800663e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800665c:	4b42      	ldr	r3, [pc, #264]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	031b      	lsls	r3, r3, #12
 800666a:	493f      	ldr	r1, [pc, #252]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 800666c:	4313      	orrs	r3, r2
 800666e:	628b      	str	r3, [r1, #40]	; 0x28
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	3b01      	subs	r3, #1
 8006676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	3b01      	subs	r3, #1
 8006680:	025b      	lsls	r3, r3, #9
 8006682:	b29b      	uxth	r3, r3
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	3b01      	subs	r3, #1
 800668c:	041b      	lsls	r3, r3, #16
 800668e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	3b01      	subs	r3, #1
 800669a:	061b      	lsls	r3, r3, #24
 800669c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066a0:	4931      	ldr	r1, [pc, #196]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80066a6:	4b30      	ldr	r3, [pc, #192]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	492d      	ldr	r1, [pc, #180]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80066b8:	4b2b      	ldr	r3, [pc, #172]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	f023 0220 	bic.w	r2, r3, #32
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	4928      	ldr	r1, [pc, #160]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80066ca:	4b27      	ldr	r3, [pc, #156]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	4a26      	ldr	r2, [pc, #152]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 80066d0:	f023 0310 	bic.w	r3, r3, #16
 80066d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80066d6:	4b24      	ldr	r3, [pc, #144]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 80066d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066da:	4b24      	ldr	r3, [pc, #144]	; (800676c <RCCEx_PLL2_Config+0x160>)
 80066dc:	4013      	ands	r3, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	69d2      	ldr	r2, [r2, #28]
 80066e2:	00d2      	lsls	r2, r2, #3
 80066e4:	4920      	ldr	r1, [pc, #128]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80066ea:	4b1f      	ldr	r3, [pc, #124]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	4a1e      	ldr	r2, [pc, #120]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 80066f0:	f043 0310 	orr.w	r3, r3, #16
 80066f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80066fc:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	4a19      	ldr	r2, [pc, #100]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 8006702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006706:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006708:	e00f      	b.n	800672a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d106      	bne.n	800671e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006710:	4b15      	ldr	r3, [pc, #84]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	4a14      	ldr	r2, [pc, #80]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 8006716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800671a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800671c:	e005      	b.n	800672a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800671e:	4b12      	ldr	r3, [pc, #72]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	4a11      	ldr	r2, [pc, #68]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 8006724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006728:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800672a:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a0e      	ldr	r2, [pc, #56]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 8006730:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006736:	f7fa ffc9 	bl	80016cc <HAL_GetTick>
 800673a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800673c:	e008      	b.n	8006750 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800673e:	f7fa ffc5 	bl	80016cc <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e006      	b.n	800675e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <RCCEx_PLL2_Config+0x15c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0f0      	beq.n	800673e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	58024400 	.word	0x58024400
 800676c:	ffff0007 	.word	0xffff0007

08006770 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800677e:	4b53      	ldr	r3, [pc, #332]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	2b03      	cmp	r3, #3
 8006788:	d101      	bne.n	800678e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e099      	b.n	80068c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800678e:	4b4f      	ldr	r3, [pc, #316]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a4e      	ldr	r2, [pc, #312]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800679a:	f7fa ff97 	bl	80016cc <HAL_GetTick>
 800679e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067a0:	e008      	b.n	80067b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80067a2:	f7fa ff93 	bl	80016cc <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e086      	b.n	80068c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067b4:	4b45      	ldr	r3, [pc, #276]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f0      	bne.n	80067a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80067c0:	4b42      	ldr	r3, [pc, #264]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	051b      	lsls	r3, r3, #20
 80067ce:	493f      	ldr	r1, [pc, #252]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	628b      	str	r3, [r1, #40]	; 0x28
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	3b01      	subs	r3, #1
 80067da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	025b      	lsls	r3, r3, #9
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	431a      	orrs	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	041b      	lsls	r3, r3, #16
 80067f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	061b      	lsls	r3, r3, #24
 8006800:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006804:	4931      	ldr	r1, [pc, #196]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006806:	4313      	orrs	r3, r2
 8006808:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800680a:	4b30      	ldr	r3, [pc, #192]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	492d      	ldr	r1, [pc, #180]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006818:	4313      	orrs	r3, r2
 800681a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800681c:	4b2b      	ldr	r3, [pc, #172]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	4928      	ldr	r1, [pc, #160]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 800682a:	4313      	orrs	r3, r2
 800682c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800682e:	4b27      	ldr	r3, [pc, #156]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006832:	4a26      	ldr	r2, [pc, #152]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006838:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800683a:	4b24      	ldr	r3, [pc, #144]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 800683c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800683e:	4b24      	ldr	r3, [pc, #144]	; (80068d0 <RCCEx_PLL3_Config+0x160>)
 8006840:	4013      	ands	r3, r2
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	69d2      	ldr	r2, [r2, #28]
 8006846:	00d2      	lsls	r2, r2, #3
 8006848:	4920      	ldr	r1, [pc, #128]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 800684a:	4313      	orrs	r3, r2
 800684c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800684e:	4b1f      	ldr	r3, [pc, #124]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006852:	4a1e      	ldr	r2, [pc, #120]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006858:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006860:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	4a19      	ldr	r2, [pc, #100]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006866:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800686a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800686c:	e00f      	b.n	800688e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d106      	bne.n	8006882 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006874:	4b15      	ldr	r3, [pc, #84]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	4a14      	ldr	r2, [pc, #80]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 800687a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800687e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006880:	e005      	b.n	800688e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006882:	4b12      	ldr	r3, [pc, #72]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	4a11      	ldr	r2, [pc, #68]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800688c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a0e      	ldr	r2, [pc, #56]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 8006894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800689a:	f7fa ff17 	bl	80016cc <HAL_GetTick>
 800689e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068a0:	e008      	b.n	80068b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80068a2:	f7fa ff13 	bl	80016cc <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e006      	b.n	80068c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068b4:	4b05      	ldr	r3, [pc, #20]	; (80068cc <RCCEx_PLL3_Config+0x15c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	58024400 	.word	0x58024400
 80068d0:	ffff0007 	.word	0xffff0007

080068d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	; 0x28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e075      	b.n	80069d2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d105      	bne.n	80068fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7fa fafb 	bl	8000ef4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2204      	movs	r2, #4
 8006902:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f868 	bl	80069dc <HAL_SD_InitCard>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e05d      	b.n	80069d2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006916:	f107 0308 	add.w	r3, r7, #8
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fda9 	bl	8007474 <HAL_SD_GetCardStatus>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e052      	b.n	80069d2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800692c:	7e3b      	ldrb	r3, [r7, #24]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006932:	7e7b      	ldrb	r3, [r7, #25]
 8006934:	b2db      	uxtb	r3, r3
 8006936:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	2b01      	cmp	r3, #1
 800693e:	d10a      	bne.n	8006956 <HAL_SD_Init+0x82>
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <HAL_SD_Init+0x78>
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d004      	beq.n	8006956 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006952:	659a      	str	r2, [r3, #88]	; 0x58
 8006954:	e00b      	b.n	800696e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695a:	2b01      	cmp	r3, #1
 800695c:	d104      	bne.n	8006968 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006964:	659a      	str	r2, [r3, #88]	; 0x58
 8006966:	e002      	b.n	800696e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fe67 	bl	8007648 <HAL_SD_ConfigWideBusOperation>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e026      	b.n	80069d2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006984:	f7fa fea2 	bl	80016cc <HAL_GetTick>
 8006988:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800698a:	e011      	b.n	80069b0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800698c:	f7fa fe9e 	bl	80016cc <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699a:	d109      	bne.n	80069b0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069a2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e010      	b.n	80069d2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 ff5b 	bl	800786c <HAL_SD_GetCardState>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d1e7      	bne.n	800698c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3728      	adds	r7, #40	; 0x28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80069dc:	b590      	push	{r4, r7, lr}
 80069de:	b08d      	sub	sp, #52	; 0x34
 80069e0:	af02      	add	r7, sp, #8
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80069f8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80069fc:	f7fe fdc8 	bl	8005590 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a00:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d109      	bne.n	8006a1c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a16:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e06a      	b.n	8006af2 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	0a1b      	lsrs	r3, r3, #8
 8006a20:	4a36      	ldr	r2, [pc, #216]	; (8006afc <HAL_SD_InitCard+0x120>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	091b      	lsrs	r3, r3, #4
 8006a28:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681c      	ldr	r4, [r3, #0]
 8006a2e:	466a      	mov	r2, sp
 8006a30:	f107 0318 	add.w	r3, r7, #24
 8006a34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006a38:	e882 0003 	stmia.w	r2, {r0, r1}
 8006a3c:	f107 030c 	add.w	r3, r7, #12
 8006a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a42:	4620      	mov	r0, r4
 8006a44:	f004 f808 	bl	800aa58 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f004 f84b 	bl	800aae8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006a5e:	4a28      	ldr	r2, [pc, #160]	; (8006b00 <HAL_SD_InitCard+0x124>)
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a66:	3301      	adds	r3, #1
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fa fe3b 	bl	80016e4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 ffea 	bl	8007a48 <SD_PowerON>
 8006a74:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e02e      	b.n	8006af2 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 ff09 	bl	80078ac <SD_InitCard>
 8006a9a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00b      	beq.n	8006aba <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e01b      	b.n	8006af2 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f004 f8a6 	bl	800ac14 <SDMMC_CmdBlockLength>
 8006ac8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00f      	beq.n	8006af0 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a0b      	ldr	r2, [pc, #44]	; (8006b04 <HAL_SD_InitCard+0x128>)
 8006ad6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	372c      	adds	r7, #44	; 0x2c
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd90      	pop	{r4, r7, pc}
 8006afa:	bf00      	nop
 8006afc:	014f8b59 	.word	0x014f8b59
 8006b00:	00012110 	.word	0x00012110
 8006b04:	1fe00fff 	.word	0x1fe00fff

08006b08 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08c      	sub	sp, #48	; 0x30
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d107      	bne.n	8006b30 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e08d      	b.n	8006c4c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	f040 8086 	bne.w	8006c4a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	441a      	add	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d907      	bls.n	8006b62 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b56:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e074      	b.n	8006c4c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2203      	movs	r2, #3
 8006b66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	025a      	lsls	r2, r3, #9
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d002      	beq.n	8006b8e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	025b      	lsls	r3, r3, #9
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	025b      	lsls	r3, r3, #9
 8006b98:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b9a:	2390      	movs	r3, #144	; 0x90
 8006b9c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f107 0210 	add.w	r2, r7, #16
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f004 f801 	bl	800abbc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bc8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d90a      	bls.n	8006bf6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2282      	movs	r2, #130	; 0x82
 8006be4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bec:	4618      	mov	r0, r3
 8006bee:	f004 f857 	bl	800aca0 <SDMMC_CmdReadMultiBlock>
 8006bf2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006bf4:	e009      	b.n	8006c0a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2281      	movs	r2, #129	; 0x81
 8006bfa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c02:	4618      	mov	r0, r3
 8006c04:	f004 f829 	bl	800ac5a <SDMMC_CmdReadSingleBlock>
 8006c08:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d012      	beq.n	8006c36 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a0f      	ldr	r2, [pc, #60]	; (8006c54 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e00a      	b.n	8006c4c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006c44:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e000      	b.n	8006c4c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006c4a:	2302      	movs	r3, #2
  }
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3730      	adds	r7, #48	; 0x30
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	1fe00fff 	.word	0x1fe00fff

08006c58 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08c      	sub	sp, #48	; 0x30
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d107      	bne.n	8006c80 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e08d      	b.n	8006d9c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	f040 8086 	bne.w	8006d9a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	441a      	add	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d907      	bls.n	8006cb2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e074      	b.n	8006d9c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	025a      	lsls	r2, r3, #9
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d002      	beq.n	8006cde <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	025b      	lsls	r3, r3, #9
 8006cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006cde:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	025b      	lsls	r3, r3, #9
 8006ce8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006cea:	2390      	movs	r3, #144	; 0x90
 8006cec:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f107 0210 	add.w	r2, r7, #16
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f003 ff59 	bl	800abbc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d18:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2201      	movs	r2, #1
 8006d28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d90a      	bls.n	8006d46 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	22a0      	movs	r2, #160	; 0xa0
 8006d34:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f003 fff5 	bl	800ad2c <SDMMC_CmdWriteMultiBlock>
 8006d42:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006d44:	e009      	b.n	8006d5a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2290      	movs	r2, #144	; 0x90
 8006d4a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d52:	4618      	mov	r0, r3
 8006d54:	f003 ffc7 	bl	800ace6 <SDMMC_CmdWriteSingleBlock>
 8006d58:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d012      	beq.n	8006d86 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a0f      	ldr	r2, [pc, #60]	; (8006da4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e00a      	b.n	8006d9c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006d94:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e000      	b.n	8006d9c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006d9a:	2302      	movs	r3, #2
  }
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3730      	adds	r7, #48	; 0x30
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	1fe00fff 	.word	0x1fe00fff

08006da8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d008      	beq.n	8006dd6 <HAL_SD_IRQHandler+0x2e>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 f926 	bl	8008020 <SD_Read_IT>
 8006dd4:	e19a      	b.n	800710c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80ac 	beq.w	8006f3e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	4b59      	ldr	r3, [pc, #356]	; (8006f60 <HAL_SD_IRQHandler+0x1b8>)
 8006dfc:	400b      	ands	r3, r1
 8006dfe:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e1e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d038      	beq.n	8006e9c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <HAL_SD_IRQHandler+0x96>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d011      	beq.n	8006e62 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f003 ff96 	bl	800ad74 <SDMMC_CmdStopTransfer>
 8006e48:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d008      	beq.n	8006e62 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f95b 	bl	8007118 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a3f      	ldr	r2, [pc, #252]	; (8006f64 <HAL_SD_IRQHandler+0x1bc>)
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d104      	bne.n	8006e8c <HAL_SD_IRQHandler+0xe4>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f004 fc33 	bl	800b6f8 <HAL_SD_RxCpltCallback>
 8006e92:	e13b      	b.n	800710c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f004 fc25 	bl	800b6e4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e9a:	e137      	b.n	800710c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 8132 	beq.w	800710c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2200      	movs	r2, #0
 8006eae:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <HAL_SD_IRQHandler+0x12c>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f003 0320 	and.w	r3, r3, #32
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d011      	beq.n	8006ef8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f003 ff4b 	bl	800ad74 <SDMMC_CmdStopTransfer>
 8006ede:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d008      	beq.n	8006ef8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f910 	bl	8007118 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d104      	bne.n	8006f1a <HAL_SD_IRQHandler+0x172>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f004 fbe2 	bl	800b6e4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d105      	bne.n	8006f36 <HAL_SD_IRQHandler+0x18e>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80eb 	beq.w	800710c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f004 fbde 	bl	800b6f8 <HAL_SD_RxCpltCallback>
}
 8006f3c:	e0e6      	b.n	800710c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00d      	beq.n	8006f68 <HAL_SD_IRQHandler+0x1c0>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d008      	beq.n	8006f68 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 f8a8 	bl	80080ac <SD_Write_IT>
 8006f5c:	e0d6      	b.n	800710c <HAL_SD_IRQHandler+0x364>
 8006f5e:	bf00      	nop
 8006f60:	ffff3ec5 	.word	0xffff3ec5
 8006f64:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 809d 	beq.w	80070b2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d005      	beq.n	8006f92 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	f043 0202 	orr.w	r2, r3, #2
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f98:	f003 0308 	and.w	r3, r3, #8
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa4:	f043 0208 	orr.w	r2, r3, #8
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbe:	f043 0220 	orr.w	r2, r3, #32
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fcc:	f003 0310 	and.w	r3, r3, #16
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	f043 0210 	orr.w	r2, r3, #16
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a4b      	ldr	r2, [pc, #300]	; (8007114 <HAL_SD_IRQHandler+0x36c>)
 8006fe6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006ff6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007006:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007016:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007026:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f003 fea1 	bl	800ad74 <SDMMC_CmdStopTransfer>
 8007032:	4602      	mov	r2, r0
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800704c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007056:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f851 	bl	8007118 <HAL_SD_ErrorCallback>
}
 8007076:	e049      	b.n	800710c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707e:	2b00      	cmp	r3, #0
 8007080:	d044      	beq.n	800710c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007086:	2b00      	cmp	r3, #0
 8007088:	d040      	beq.n	800710c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007098:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2200      	movs	r2, #0
 80070a0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f834 	bl	8007118 <HAL_SD_ErrorCallback>
}
 80070b0:	e02c      	b.n	800710c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d025      	beq.n	800710c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c8:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10c      	bne.n	80070f2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 f84a 	bl	800817c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80070e8:	e010      	b.n	800710c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 f832 	bl	8008154 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80070f0:	e00c      	b.n	800710c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f003 0320 	and.w	r3, r3, #32
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 f833 	bl	8008168 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8007102:	e003      	b.n	800710c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 f81b 	bl	8008140 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800710a:	e7ff      	b.n	800710c <HAL_SD_IRQHandler+0x364>
 800710c:	bf00      	nop
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	18000f3a 	.word	0x18000f3a

08007118 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800713a:	0f9b      	lsrs	r3, r3, #30
 800713c:	b2da      	uxtb	r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007146:	0e9b      	lsrs	r3, r3, #26
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	b2da      	uxtb	r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007158:	0e1b      	lsrs	r3, r3, #24
 800715a:	b2db      	uxtb	r3, r3
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	b2da      	uxtb	r2, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716a:	0c1b      	lsrs	r3, r3, #16
 800716c:	b2da      	uxtb	r2, r3
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007176:	0a1b      	lsrs	r3, r3, #8
 8007178:	b2da      	uxtb	r2, r3
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007182:	b2da      	uxtb	r2, r3
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800718c:	0d1b      	lsrs	r3, r3, #20
 800718e:	b29a      	uxth	r2, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007198:	0c1b      	lsrs	r3, r3, #16
 800719a:	b2db      	uxtb	r3, r3
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071aa:	0bdb      	lsrs	r3, r3, #15
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071bc:	0b9b      	lsrs	r3, r3, #14
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ce:	0b5b      	lsrs	r3, r3, #13
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e0:	0b1b      	lsrs	r3, r3, #12
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2200      	movs	r2, #0
 80071f2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d163      	bne.n	80072c4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007200:	009a      	lsls	r2, r3, #2
 8007202:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007206:	4013      	ands	r3, r2
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800720c:	0f92      	lsrs	r2, r2, #30
 800720e:	431a      	orrs	r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007218:	0edb      	lsrs	r3, r3, #27
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	b2da      	uxtb	r2, r3
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800722a:	0e1b      	lsrs	r3, r3, #24
 800722c:	b2db      	uxtb	r3, r3
 800722e:	f003 0307 	and.w	r3, r3, #7
 8007232:	b2da      	uxtb	r2, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800723c:	0d5b      	lsrs	r3, r3, #21
 800723e:	b2db      	uxtb	r3, r3
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	b2da      	uxtb	r2, r3
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800724e:	0c9b      	lsrs	r3, r3, #18
 8007250:	b2db      	uxtb	r3, r3
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	b2da      	uxtb	r2, r3
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007260:	0bdb      	lsrs	r3, r3, #15
 8007262:	b2db      	uxtb	r3, r3
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	b2da      	uxtb	r2, r3
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	7e1b      	ldrb	r3, [r3, #24]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	3302      	adds	r3, #2
 8007284:	2201      	movs	r2, #1
 8007286:	fa02 f303 	lsl.w	r3, r2, r3
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800728e:	fb03 f202 	mul.w	r2, r3, r2
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	7a1b      	ldrb	r3, [r3, #8]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	2201      	movs	r2, #1
 80072a2:	409a      	lsls	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80072b0:	0a52      	lsrs	r2, r2, #9
 80072b2:	fb03 f202 	mul.w	r2, r3, r2
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072c0:	655a      	str	r2, [r3, #84]	; 0x54
 80072c2:	e031      	b.n	8007328 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d11d      	bne.n	8007308 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072da:	0c1b      	lsrs	r3, r3, #16
 80072dc:	431a      	orrs	r2, r3
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	3301      	adds	r3, #1
 80072e8:	029a      	lsls	r2, r3, #10
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	655a      	str	r2, [r3, #84]	; 0x54
 8007306:	e00f      	b.n	8007328 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a58      	ldr	r2, [pc, #352]	; (8007470 <HAL_SD_GetCardCSD+0x344>)
 800730e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007314:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e09d      	b.n	8007464 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800732c:	0b9b      	lsrs	r3, r3, #14
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	b2da      	uxtb	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800733e:	09db      	lsrs	r3, r3, #7
 8007340:	b2db      	uxtb	r3, r3
 8007342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007346:	b2da      	uxtb	r2, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007356:	b2da      	uxtb	r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007360:	0fdb      	lsrs	r3, r3, #31
 8007362:	b2da      	uxtb	r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800736c:	0f5b      	lsrs	r3, r3, #29
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f003 0303 	and.w	r3, r3, #3
 8007374:	b2da      	uxtb	r2, r3
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800737e:	0e9b      	lsrs	r3, r3, #26
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	b2da      	uxtb	r2, r3
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007390:	0d9b      	lsrs	r3, r3, #22
 8007392:	b2db      	uxtb	r3, r3
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	b2da      	uxtb	r2, r3
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073a2:	0d5b      	lsrs	r3, r3, #21
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073be:	0c1b      	lsrs	r3, r3, #16
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073d2:	0bdb      	lsrs	r3, r3, #15
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073e6:	0b9b      	lsrs	r3, r3, #14
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073fa:	0b5b      	lsrs	r3, r3, #13
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	b2da      	uxtb	r2, r3
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800740e:	0b1b      	lsrs	r3, r3, #12
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	b2da      	uxtb	r2, r3
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007422:	0a9b      	lsrs	r3, r3, #10
 8007424:	b2db      	uxtb	r3, r3
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	b2da      	uxtb	r2, r3
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007436:	0a1b      	lsrs	r3, r3, #8
 8007438:	b2db      	uxtb	r3, r3
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	b2da      	uxtb	r2, r3
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	b2db      	uxtb	r3, r3
 800744e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007452:	b2da      	uxtb	r2, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	1fe00fff 	.word	0x1fe00fff

08007474 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b094      	sub	sp, #80	; 0x50
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b03      	cmp	r3, #3
 800748e:	d101      	bne.n	8007494 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e0a7      	b.n	80075e4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007494:	f107 0308 	add.w	r3, r7, #8
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fb62 	bl	8007b64 <SD_SendSDStatus>
 80074a0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80074a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d011      	beq.n	80074cc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a4f      	ldr	r2, [pc, #316]	; (80075ec <HAL_SD_GetCardStatus+0x178>)
 80074ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80074ca:	e070      	b.n	80075ae <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	099b      	lsrs	r3, r3, #6
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	095b      	lsrs	r3, r3, #5
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	0e1b      	lsrs	r3, r3, #24
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	4313      	orrs	r3, r2
 8007500:	b29a      	uxth	r2, r3
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	061a      	lsls	r2, r3, #24
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007512:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	0a1b      	lsrs	r3, r3, #8
 8007518:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800751c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	0e1b      	lsrs	r3, r3, #24
 8007522:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	b2da      	uxtb	r2, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	0a1b      	lsrs	r3, r3, #8
 8007534:	b2da      	uxtb	r2, r3
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	0d1b      	lsrs	r3, r3, #20
 800753e:	b2db      	uxtb	r3, r3
 8007540:	f003 030f 	and.w	r3, r3, #15
 8007544:	b2da      	uxtb	r2, r3
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	0c1b      	lsrs	r3, r3, #16
 800754e:	b29b      	uxth	r3, r3
 8007550:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007554:	b29a      	uxth	r2, r3
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	b29b      	uxth	r3, r3
 800755a:	b2db      	uxtb	r3, r3
 800755c:	b29b      	uxth	r3, r3
 800755e:	4313      	orrs	r3, r2
 8007560:	b29a      	uxth	r2, r3
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	0a9b      	lsrs	r3, r3, #10
 800756a:	b2db      	uxtb	r3, r3
 800756c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007570:	b2da      	uxtb	r2, r3
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	0a1b      	lsrs	r3, r3, #8
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f003 0303 	and.w	r3, r3, #3
 8007580:	b2da      	uxtb	r2, r3
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	091b      	lsrs	r3, r3, #4
 800758a:	b2db      	uxtb	r3, r3
 800758c:	f003 030f 	and.w	r3, r3, #15
 8007590:	b2da      	uxtb	r2, r3
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	0e1b      	lsrs	r3, r3, #24
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075b6:	4618      	mov	r0, r3
 80075b8:	f003 fb2c 	bl	800ac14 <SDMMC_CmdBlockLength>
 80075bc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80075be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00d      	beq.n	80075e0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a08      	ldr	r2, [pc, #32]	; (80075ec <HAL_SD_GetCardStatus+0x178>)
 80075ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075d0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80075e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3750      	adds	r7, #80	; 0x50
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	1fe00fff 	.word	0x1fe00fff

080075f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007648:	b590      	push	{r4, r7, lr}
 800764a:	b08d      	sub	sp, #52	; 0x34
 800764c:	af02      	add	r7, sp, #8
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2203      	movs	r2, #3
 8007660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	2b03      	cmp	r3, #3
 800766a:	d02e      	beq.n	80076ca <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007672:	d106      	bne.n	8007682 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007678:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	635a      	str	r2, [r3, #52]	; 0x34
 8007680:	e029      	b.n	80076d6 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007688:	d10a      	bne.n	80076a0 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fb62 	bl	8007d54 <SD_WideBus_Enable>
 8007690:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	635a      	str	r2, [r3, #52]	; 0x34
 800769e:	e01a      	b.n	80076d6 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fb9f 	bl	8007dea <SD_WideBus_Disable>
 80076ac:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	431a      	orrs	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	635a      	str	r2, [r3, #52]	; 0x34
 80076ba:	e00c      	b.n	80076d6 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	635a      	str	r2, [r3, #52]	; 0x34
 80076c8:	e005      	b.n	80076d6 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d007      	beq.n	80076ee <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a5e      	ldr	r2, [pc, #376]	; (800785c <HAL_SD_ConfigWideBusOperation+0x214>)
 80076e4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80076ec:	e094      	b.n	8007818 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80076ee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80076f2:	f7fd ff4d 	bl	8005590 <HAL_RCCEx_GetPeriphCLKFreq>
 80076f6:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8083 	beq.w	8007806 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	695a      	ldr	r2, [r3, #20]
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	4950      	ldr	r1, [pc, #320]	; (8007860 <HAL_SD_ConfigWideBusOperation+0x218>)
 800771e:	fba1 1303 	umull	r1, r3, r1, r3
 8007722:	0e1b      	lsrs	r3, r3, #24
 8007724:	429a      	cmp	r2, r3
 8007726:	d303      	bcc.n	8007730 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	e05a      	b.n	80077e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007738:	d103      	bne.n	8007742 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	61bb      	str	r3, [r7, #24]
 8007740:	e051      	b.n	80077e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800774a:	d126      	bne.n	800779a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10e      	bne.n	8007772 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	4a43      	ldr	r2, [pc, #268]	; (8007864 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d906      	bls.n	800776a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	4a40      	ldr	r2, [pc, #256]	; (8007860 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007760:	fba2 2303 	umull	r2, r3, r2, r3
 8007764:	0e5b      	lsrs	r3, r3, #25
 8007766:	61bb      	str	r3, [r7, #24]
 8007768:	e03d      	b.n	80077e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	61bb      	str	r3, [r7, #24]
 8007770:	e039      	b.n	80077e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	6a3a      	ldr	r2, [r7, #32]
 800777a:	fbb2 f3f3 	udiv	r3, r2, r3
 800777e:	4a39      	ldr	r2, [pc, #228]	; (8007864 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d906      	bls.n	8007792 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	4a36      	ldr	r2, [pc, #216]	; (8007860 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007788:	fba2 2303 	umull	r2, r3, r2, r3
 800778c:	0e5b      	lsrs	r3, r3, #25
 800778e:	61bb      	str	r3, [r7, #24]
 8007790:	e029      	b.n	80077e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	e025      	b.n	80077e6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10e      	bne.n	80077c0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	4a30      	ldr	r2, [pc, #192]	; (8007868 <HAL_SD_ConfigWideBusOperation+0x220>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d906      	bls.n	80077b8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	4a2c      	ldr	r2, [pc, #176]	; (8007860 <HAL_SD_ConfigWideBusOperation+0x218>)
 80077ae:	fba2 2303 	umull	r2, r3, r2, r3
 80077b2:	0e1b      	lsrs	r3, r3, #24
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	e016      	b.n	80077e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	e012      	b.n	80077e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	6a3a      	ldr	r2, [r7, #32]
 80077c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077cc:	4a26      	ldr	r2, [pc, #152]	; (8007868 <HAL_SD_ConfigWideBusOperation+0x220>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d906      	bls.n	80077e0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	4a22      	ldr	r2, [pc, #136]	; (8007860 <HAL_SD_ConfigWideBusOperation+0x218>)
 80077d6:	fba2 2303 	umull	r2, r3, r2, r3
 80077da:	0e1b      	lsrs	r3, r3, #24
 80077dc:	61bb      	str	r3, [r7, #24]
 80077de:	e002      	b.n	80077e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681c      	ldr	r4, [r3, #0]
 80077ea:	466a      	mov	r2, sp
 80077ec:	f107 0314 	add.w	r3, r7, #20
 80077f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80077f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80077f8:	f107 0308 	add.w	r3, r7, #8
 80077fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077fe:	4620      	mov	r0, r4
 8007800:	f003 f92a 	bl	800aa58 <SDMMC_Init>
 8007804:	e008      	b.n	8007818 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007820:	4618      	mov	r0, r3
 8007822:	f003 f9f7 	bl	800ac14 <SDMMC_CmdBlockLength>
 8007826:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00c      	beq.n	8007848 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a0a      	ldr	r2, [pc, #40]	; (800785c <HAL_SD_ConfigWideBusOperation+0x214>)
 8007834:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	431a      	orrs	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007854:	4618      	mov	r0, r3
 8007856:	372c      	adds	r7, #44	; 0x2c
 8007858:	46bd      	mov	sp, r7
 800785a:	bd90      	pop	{r4, r7, pc}
 800785c:	1fe00fff 	.word	0x1fe00fff
 8007860:	55e63b89 	.word	0x55e63b89
 8007864:	02faf080 	.word	0x02faf080
 8007868:	017d7840 	.word	0x017d7840

0800786c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007878:	f107 030c 	add.w	r3, r7, #12
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fa40 	bl	8007d04 <SD_SendStatus>
 8007884:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d005      	beq.n	8007898 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	0a5b      	lsrs	r3, r3, #9
 800789c:	f003 030f 	and.w	r3, r3, #15
 80078a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80078a2:	693b      	ldr	r3, [r7, #16]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b090      	sub	sp, #64	; 0x40
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80078b8:	f7f9 ff08 	bl	80016cc <HAL_GetTick>
 80078bc:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f003 f921 	bl	800ab0a <SDMMC_GetPowerState>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80078ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80078d2:	e0b5      	b.n	8007a40 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d02e      	beq.n	800793a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f003 fb6c 	bl	800afbe <SDMMC_CmdSendCID>
 80078e6:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80078e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <SD_InitCard+0x46>
    {
      return errorstate;
 80078ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f0:	e0a6      	b.n	8007a40 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f003 f94c 	bl	800ab96 <SDMMC_GetResponse>
 80078fe:	4602      	mov	r2, r0
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2104      	movs	r1, #4
 800790a:	4618      	mov	r0, r3
 800790c:	f003 f943 	bl	800ab96 <SDMMC_GetResponse>
 8007910:	4602      	mov	r2, r0
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2108      	movs	r1, #8
 800791c:	4618      	mov	r0, r3
 800791e:	f003 f93a 	bl	800ab96 <SDMMC_GetResponse>
 8007922:	4602      	mov	r2, r0
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	210c      	movs	r1, #12
 800792e:	4618      	mov	r0, r3
 8007930:	f003 f931 	bl	800ab96 <SDMMC_GetResponse>
 8007934:	4602      	mov	r2, r0
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	2b03      	cmp	r3, #3
 8007940:	d01d      	beq.n	800797e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007942:	e019      	b.n	8007978 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f107 020a 	add.w	r2, r7, #10
 800794c:	4611      	mov	r1, r2
 800794e:	4618      	mov	r0, r3
 8007950:	f003 fb74 	bl	800b03c <SDMMC_CmdSetRelAdd>
 8007954:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <SD_InitCard+0xb4>
      {
        return errorstate;
 800795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795e:	e06f      	b.n	8007a40 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007960:	f7f9 feb4 	bl	80016cc <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	f241 3287 	movw	r2, #4999	; 0x1387
 800796e:	4293      	cmp	r3, r2
 8007970:	d902      	bls.n	8007978 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007972:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007976:	e063      	b.n	8007a40 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007978:	897b      	ldrh	r3, [r7, #10]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0e2      	beq.n	8007944 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	2b03      	cmp	r3, #3
 8007984:	d036      	beq.n	80079f4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007986:	897b      	ldrh	r3, [r7, #10]
 8007988:	461a      	mov	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	041b      	lsls	r3, r3, #16
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f003 fb2e 	bl	800affc <SDMMC_CmdSendCSD>
 80079a0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <SD_InitCard+0x100>
    {
      return errorstate;
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	e049      	b.n	8007a40 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f003 f8ef 	bl	800ab96 <SDMMC_GetResponse>
 80079b8:	4602      	mov	r2, r0
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2104      	movs	r1, #4
 80079c4:	4618      	mov	r0, r3
 80079c6:	f003 f8e6 	bl	800ab96 <SDMMC_GetResponse>
 80079ca:	4602      	mov	r2, r0
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2108      	movs	r1, #8
 80079d6:	4618      	mov	r0, r3
 80079d8:	f003 f8dd 	bl	800ab96 <SDMMC_GetResponse>
 80079dc:	4602      	mov	r2, r0
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	210c      	movs	r1, #12
 80079e8:	4618      	mov	r0, r3
 80079ea:	f003 f8d4 	bl	800ab96 <SDMMC_GetResponse>
 80079ee:	4602      	mov	r2, r0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2104      	movs	r1, #4
 80079fa:	4618      	mov	r0, r3
 80079fc:	f003 f8cb 	bl	800ab96 <SDMMC_GetResponse>
 8007a00:	4603      	mov	r3, r0
 8007a02:	0d1a      	lsrs	r2, r3, #20
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007a08:	f107 030c 	add.w	r3, r7, #12
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff fb8c 	bl	800712c <HAL_SD_GetCardCSD>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a1e:	e00f      	b.n	8007a40 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a28:	041b      	lsls	r3, r3, #16
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f003 f9dd 	bl	800adec <SDMMC_CmdSelDesel>
 8007a32:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <SD_InitCard+0x192>
  {
    return errorstate;
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	e000      	b.n	8007a40 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3740      	adds	r7, #64	; 0x40
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f003 f9e6 	bl	800ae32 <SDMMC_CmdGoIdleState>
 8007a66:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	e072      	b.n	8007b58 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f003 f9f9 	bl	800ae6e <SDMMC_CmdOperCond>
 8007a7c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a84:	d10d      	bne.n	8007aa2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f003 f9ce 	bl	800ae32 <SDMMC_CmdGoIdleState>
 8007a96:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <SD_PowerON+0x60>
    {
      return errorstate;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	e05a      	b.n	8007b58 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d137      	bne.n	8007b20 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f003 f9f9 	bl	800aeae <SDMMC_CmdAppCommand>
 8007abc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d02d      	beq.n	8007b20 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ac4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ac8:	e046      	b.n	8007b58 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f003 f9ec 	bl	800aeae <SDMMC_CmdAppCommand>
 8007ad6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <SD_PowerON+0x9a>
    {
      return errorstate;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	e03a      	b.n	8007b58 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	491e      	ldr	r1, [pc, #120]	; (8007b60 <SD_PowerON+0x118>)
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f003 fa03 	bl	800aef4 <SDMMC_CmdAppOperCommand>
 8007aee:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007af6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007afa:	e02d      	b.n	8007b58 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2100      	movs	r1, #0
 8007b02:	4618      	mov	r0, r3
 8007b04:	f003 f847 	bl	800ab96 <SDMMC_GetResponse>
 8007b08:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	0fdb      	lsrs	r3, r3, #31
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d101      	bne.n	8007b16 <SD_PowerON+0xce>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <SD_PowerON+0xd0>
 8007b16:	2300      	movs	r3, #0
 8007b18:	613b      	str	r3, [r7, #16]

    count++;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d802      	bhi.n	8007b30 <SD_PowerON+0xe8>
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0cc      	beq.n	8007aca <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d902      	bls.n	8007b40 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007b3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b3e:	e00b      	b.n	8007b58 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	c1100000 	.word	0xc1100000

08007b64 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08c      	sub	sp, #48	; 0x30
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b6e:	f7f9 fdad 	bl	80016cc <HAL_GetTick>
 8007b72:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f003 f809 	bl	800ab96 <SDMMC_GetResponse>
 8007b84:	4603      	mov	r3, r0
 8007b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b8e:	d102      	bne.n	8007b96 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b94:	e0b0      	b.n	8007cf8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2140      	movs	r1, #64	; 0x40
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f003 f839 	bl	800ac14 <SDMMC_CmdBlockLength>
 8007ba2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	e0a0      	b.n	8007cf8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbe:	041b      	lsls	r3, r3, #16
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	f003 f973 	bl	800aeae <SDMMC_CmdAppCommand>
 8007bc8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	e08d      	b.n	8007cf8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8007be0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007be2:	2340      	movs	r3, #64	; 0x40
 8007be4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007be6:	2360      	movs	r3, #96	; 0x60
 8007be8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bea:	2302      	movs	r3, #2
 8007bec:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f107 0208 	add.w	r2, r7, #8
 8007bfe:	4611      	mov	r1, r2
 8007c00:	4618      	mov	r0, r3
 8007c02:	f002 ffdb 	bl	800abbc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f003 fa5b 	bl	800b0c6 <SDMMC_CmdStatusRegister>
 8007c10:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d02b      	beq.n	8007c70 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	e069      	b.n	8007cf8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d013      	beq.n	8007c5a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007c32:	2300      	movs	r3, #0
 8007c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c36:	e00d      	b.n	8007c54 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f002 ff35 	bl	800aaac <SDMMC_ReadFIFO>
 8007c42:	4602      	mov	r2, r0
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	601a      	str	r2, [r3, #0]
        pData++;
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	3301      	adds	r3, #1
 8007c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	2b07      	cmp	r3, #7
 8007c58:	d9ee      	bls.n	8007c38 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c5a:	f7f9 fd37 	bl	80016cc <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d102      	bne.n	8007c70 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c6e:	e043      	b.n	8007cf8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c76:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0d2      	beq.n	8007c24 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	e033      	b.n	8007cf8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e02a      	b.n	8007cf8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d017      	beq.n	8007ce0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007cb0:	2320      	movs	r3, #32
 8007cb2:	e021      	b.n	8007cf8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f002 fef7 	bl	800aaac <SDMMC_ReadFIFO>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	601a      	str	r2, [r3, #0]
    pData++;
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007cca:	f7f9 fcff 	bl	80016cc <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd8:	d102      	bne.n	8007ce0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007cda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cde:	e00b      	b.n	8007cf8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e2      	bne.n	8007cb4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a03      	ldr	r2, [pc, #12]	; (8007d00 <SD_SendSDStatus+0x19c>)
 8007cf4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3730      	adds	r7, #48	; 0x30
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	18000f3a 	.word	0x18000f3a

08007d04 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d102      	bne.n	8007d1a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007d14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d18:	e018      	b.n	8007d4c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d22:	041b      	lsls	r3, r3, #16
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f003 f9aa 	bl	800b080 <SDMMC_CmdSendStatus>
 8007d2c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	e009      	b.n	8007d4c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f002 ff29 	bl	800ab96 <SDMMC_GetResponse>
 8007d44:	4602      	mov	r2, r0
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	2300      	movs	r3, #0
 8007d62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f002 ff13 	bl	800ab96 <SDMMC_GetResponse>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d7a:	d102      	bne.n	8007d82 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d80:	e02f      	b.n	8007de2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007d82:	f107 030c 	add.w	r3, r7, #12
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f879 	bl	8007e80 <SD_FindSCR>
 8007d8e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	e023      	b.n	8007de2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01c      	beq.n	8007dde <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dac:	041b      	lsls	r3, r3, #16
 8007dae:	4619      	mov	r1, r3
 8007db0:	4610      	mov	r0, r2
 8007db2:	f003 f87c 	bl	800aeae <SDMMC_CmdAppCommand>
 8007db6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	e00f      	b.n	8007de2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2102      	movs	r1, #2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f003 f8b3 	bl	800af34 <SDMMC_CmdBusWidth>
 8007dce:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	e003      	b.n	8007de2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e001      	b.n	8007de2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007dde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b086      	sub	sp, #24
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007df2:	2300      	movs	r3, #0
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	2300      	movs	r3, #0
 8007df8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2100      	movs	r1, #0
 8007e00:	4618      	mov	r0, r3
 8007e02:	f002 fec8 	bl	800ab96 <SDMMC_GetResponse>
 8007e06:	4603      	mov	r3, r0
 8007e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e10:	d102      	bne.n	8007e18 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e16:	e02f      	b.n	8007e78 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e18:	f107 030c 	add.w	r3, r7, #12
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f82e 	bl	8007e80 <SD_FindSCR>
 8007e24:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	e023      	b.n	8007e78 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d01c      	beq.n	8007e74 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e42:	041b      	lsls	r3, r3, #16
 8007e44:	4619      	mov	r1, r3
 8007e46:	4610      	mov	r0, r2
 8007e48:	f003 f831 	bl	800aeae <SDMMC_CmdAppCommand>
 8007e4c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	e00f      	b.n	8007e78 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f003 f868 	bl	800af34 <SDMMC_CmdBusWidth>
 8007e64:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	e003      	b.n	8007e78 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007e70:	2300      	movs	r3, #0
 8007e72:	e001      	b.n	8007e78 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08e      	sub	sp, #56	; 0x38
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e8a:	f7f9 fc1f 	bl	80016cc <HAL_GetTick>
 8007e8e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007e94:	2300      	movs	r3, #0
 8007e96:	60bb      	str	r3, [r7, #8]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2108      	movs	r1, #8
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f002 feb4 	bl	800ac14 <SDMMC_CmdBlockLength>
 8007eac:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	e0ad      	b.n	8008014 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec0:	041b      	lsls	r3, r3, #16
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	f002 fff2 	bl	800aeae <SDMMC_CmdAppCommand>
 8007eca:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	e09e      	b.n	8008014 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eda:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007edc:	2308      	movs	r3, #8
 8007ede:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007ee0:	2330      	movs	r3, #48	; 0x30
 8007ee2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007eec:	2301      	movs	r3, #1
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f107 0210 	add.w	r2, r7, #16
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f002 fe5e 	bl	800abbc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f003 f838 	bl	800af7a <SDMMC_CmdSendSCR>
 8007f0a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d027      	beq.n	8007f62 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	e07e      	b.n	8008014 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d113      	bne.n	8007f4c <SD_FindSCR+0xcc>
 8007f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d110      	bne.n	8007f4c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f002 fdbc 	bl	800aaac <SDMMC_ReadFIFO>
 8007f34:	4603      	mov	r3, r0
 8007f36:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f002 fdb5 	bl	800aaac <SDMMC_ReadFIFO>
 8007f42:	4603      	mov	r3, r0
 8007f44:	60fb      	str	r3, [r7, #12]
      index++;
 8007f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f48:	3301      	adds	r3, #1
 8007f4a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f4c:	f7f9 fbbe 	bl	80016cc <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5a:	d102      	bne.n	8007f62 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f60:	e058      	b.n	8008014 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f68:	f240 532a 	movw	r3, #1322	; 0x52a
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0d1      	beq.n	8007f16 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d005      	beq.n	8007f8c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2208      	movs	r2, #8
 8007f86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007f88:	2308      	movs	r3, #8
 8007f8a:	e043      	b.n	8008014 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e036      	b.n	8008014 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007fbc:	2320      	movs	r3, #32
 8007fbe:	e029      	b.n	8008014 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a15      	ldr	r2, [pc, #84]	; (800801c <SD_FindSCR+0x19c>)
 8007fc6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	061a      	lsls	r2, r3, #24
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	021b      	lsls	r3, r3, #8
 8007fd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fd4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	0a1b      	lsrs	r3, r3, #8
 8007fda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007fde:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	0e1b      	lsrs	r3, r3, #24
 8007fe4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe8:	601a      	str	r2, [r3, #0]
    scr++;
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	3304      	adds	r3, #4
 8007fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	061a      	lsls	r2, r3, #24
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	021b      	lsls	r3, r3, #8
 8007ff8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ffc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	0a1b      	lsrs	r3, r3, #8
 8008002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008006:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	0e1b      	lsrs	r3, r3, #24
 800800c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3738      	adds	r7, #56	; 0x38
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	18000f3a 	.word	0x18000f3a

08008020 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008032:	2b1f      	cmp	r3, #31
 8008034:	d936      	bls.n	80080a4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8008036:	2300      	movs	r3, #0
 8008038:	617b      	str	r3, [r7, #20]
 800803a:	e027      	b.n	800808c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4618      	mov	r0, r3
 8008042:	f002 fd33 	bl	800aaac <SDMMC_ReadFIFO>
 8008046:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	b2da      	uxtb	r2, r3
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	3301      	adds	r3, #1
 8008054:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	0a1b      	lsrs	r3, r3, #8
 800805a:	b2da      	uxtb	r2, r3
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	3301      	adds	r3, #1
 8008064:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	0c1b      	lsrs	r3, r3, #16
 800806a:	b2da      	uxtb	r2, r3
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	3301      	adds	r3, #1
 8008074:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	0e1b      	lsrs	r3, r3, #24
 800807a:	b2da      	uxtb	r2, r3
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	3301      	adds	r3, #1
 8008084:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	3301      	adds	r3, #1
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	2b07      	cmp	r3, #7
 8008090:	d9d4      	bls.n	800803c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809c:	f1a3 0220 	sub.w	r2, r3, #32
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80080a4:	bf00      	nop
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	2b1f      	cmp	r3, #31
 80080c0:	d93a      	bls.n	8008138 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80080c2:	2300      	movs	r3, #0
 80080c4:	617b      	str	r3, [r7, #20]
 80080c6:	e02b      	b.n	8008120 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	60fb      	str	r3, [r7, #12]
      tmp++;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	3301      	adds	r3, #1
 80080d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	021a      	lsls	r2, r3, #8
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
      tmp++;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	3301      	adds	r3, #1
 80080e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	041a      	lsls	r2, r3, #16
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]
      tmp++;
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	3301      	adds	r3, #1
 80080f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	061a      	lsls	r2, r3, #24
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4313      	orrs	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	3301      	adds	r3, #1
 8008108:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f107 020c 	add.w	r2, r7, #12
 8008112:	4611      	mov	r1, r2
 8008114:	4618      	mov	r0, r3
 8008116:	f002 fcd6 	bl	800aac6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	3301      	adds	r3, #1
 800811e:	617b      	str	r3, [r7, #20]
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b07      	cmp	r3, #7
 8008124:	d9d0      	bls.n	80080c8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	f1a3 0220 	sub.w	r2, r3, #32
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	621a      	str	r2, [r3, #32]
  }
}
 8008138:	bf00      	nop
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e0f1      	b.n	8008386 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a78      	ldr	r2, [pc, #480]	; (8008390 <HAL_SPI_Init+0x200>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d00f      	beq.n	80081d2 <HAL_SPI_Init+0x42>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a77      	ldr	r2, [pc, #476]	; (8008394 <HAL_SPI_Init+0x204>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00a      	beq.n	80081d2 <HAL_SPI_Init+0x42>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a75      	ldr	r2, [pc, #468]	; (8008398 <HAL_SPI_Init+0x208>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d005      	beq.n	80081d2 <HAL_SPI_Init+0x42>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	2b0f      	cmp	r3, #15
 80081cc:	d901      	bls.n	80081d2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e0d9      	b.n	8008386 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f8e2 	bl	800839c <SPI_GetPacketSize>
 80081d8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a6c      	ldr	r2, [pc, #432]	; (8008390 <HAL_SPI_Init+0x200>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00c      	beq.n	80081fe <HAL_SPI_Init+0x6e>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a6a      	ldr	r2, [pc, #424]	; (8008394 <HAL_SPI_Init+0x204>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d007      	beq.n	80081fe <HAL_SPI_Init+0x6e>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a69      	ldr	r2, [pc, #420]	; (8008398 <HAL_SPI_Init+0x208>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d002      	beq.n	80081fe <HAL_SPI_Init+0x6e>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b08      	cmp	r3, #8
 80081fc:	d811      	bhi.n	8008222 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008202:	4a63      	ldr	r2, [pc, #396]	; (8008390 <HAL_SPI_Init+0x200>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d009      	beq.n	800821c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a61      	ldr	r2, [pc, #388]	; (8008394 <HAL_SPI_Init+0x204>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d004      	beq.n	800821c <HAL_SPI_Init+0x8c>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a60      	ldr	r2, [pc, #384]	; (8008398 <HAL_SPI_Init+0x208>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d104      	bne.n	8008226 <HAL_SPI_Init+0x96>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b10      	cmp	r3, #16
 8008220:	d901      	bls.n	8008226 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e0af      	b.n	8008386 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7f8 feee 	bl	800101c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0201 	bic.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008262:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800826c:	d119      	bne.n	80082a2 <HAL_SPI_Init+0x112>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008276:	d103      	bne.n	8008280 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800827c:	2b00      	cmp	r3, #0
 800827e:	d008      	beq.n	8008292 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10c      	bne.n	80082a2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800828c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008290:	d107      	bne.n	80082a2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69da      	ldr	r2, [r3, #28]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082aa:	431a      	orrs	r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b4:	ea42 0103 	orr.w	r1, r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	431a      	orrs	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	431a      	orrs	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	431a      	orrs	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008302:	ea42 0103 	orr.w	r1, r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d113      	bne.n	8008342 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800832c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008340:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0201 	bic.w	r2, r2, #1
 8008350:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	40013000 	.word	0x40013000
 8008394:	40003800 	.word	0x40003800
 8008398:	40003c00 	.word	0x40003c00

0800839c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a8:	095b      	lsrs	r3, r3, #5
 80083aa:	3301      	adds	r3, #1
 80083ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	3301      	adds	r3, #1
 80083b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	3307      	adds	r3, #7
 80083ba:	08db      	lsrs	r3, r3, #3
 80083bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	fb02 f303 	mul.w	r3, r2, r3
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e049      	b.n	8008478 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d106      	bne.n	80083fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7f8 fe73 	bl	80010e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2202      	movs	r2, #2
 8008402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3304      	adds	r3, #4
 800840e:	4619      	mov	r1, r3
 8008410:	4610      	mov	r0, r2
 8008412:	f000 fc21 	bl	8008c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b01      	cmp	r3, #1
 8008492:	d001      	beq.n	8008498 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e04c      	b.n	8008532 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2202      	movs	r2, #2
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a26      	ldr	r2, [pc, #152]	; (8008540 <HAL_TIM_Base_Start+0xc0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d022      	beq.n	80084f0 <HAL_TIM_Base_Start+0x70>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084b2:	d01d      	beq.n	80084f0 <HAL_TIM_Base_Start+0x70>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a22      	ldr	r2, [pc, #136]	; (8008544 <HAL_TIM_Base_Start+0xc4>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d018      	beq.n	80084f0 <HAL_TIM_Base_Start+0x70>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a21      	ldr	r2, [pc, #132]	; (8008548 <HAL_TIM_Base_Start+0xc8>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d013      	beq.n	80084f0 <HAL_TIM_Base_Start+0x70>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a1f      	ldr	r2, [pc, #124]	; (800854c <HAL_TIM_Base_Start+0xcc>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d00e      	beq.n	80084f0 <HAL_TIM_Base_Start+0x70>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a1e      	ldr	r2, [pc, #120]	; (8008550 <HAL_TIM_Base_Start+0xd0>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d009      	beq.n	80084f0 <HAL_TIM_Base_Start+0x70>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a1c      	ldr	r2, [pc, #112]	; (8008554 <HAL_TIM_Base_Start+0xd4>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d004      	beq.n	80084f0 <HAL_TIM_Base_Start+0x70>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a1b      	ldr	r2, [pc, #108]	; (8008558 <HAL_TIM_Base_Start+0xd8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d115      	bne.n	800851c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	4b19      	ldr	r3, [pc, #100]	; (800855c <HAL_TIM_Base_Start+0xdc>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2b06      	cmp	r3, #6
 8008500:	d015      	beq.n	800852e <HAL_TIM_Base_Start+0xae>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008508:	d011      	beq.n	800852e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f042 0201 	orr.w	r2, r2, #1
 8008518:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800851a:	e008      	b.n	800852e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f042 0201 	orr.w	r2, r2, #1
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	e000      	b.n	8008530 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40010000 	.word	0x40010000
 8008544:	40000400 	.word	0x40000400
 8008548:	40000800 	.word	0x40000800
 800854c:	40000c00 	.word	0x40000c00
 8008550:	40010400 	.word	0x40010400
 8008554:	40001800 	.word	0x40001800
 8008558:	40014000 	.word	0x40014000
 800855c:	00010007 	.word	0x00010007

08008560 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e049      	b.n	8008606 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d106      	bne.n	800858c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f841 	bl	800860e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3304      	adds	r3, #4
 800859c:	4619      	mov	r1, r3
 800859e:	4610      	mov	r0, r2
 80085a0:	f000 fb5a 	bl	8008c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
	...

08008624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d109      	bne.n	8008648 <HAL_TIM_PWM_Start+0x24>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b01      	cmp	r3, #1
 800863e:	bf14      	ite	ne
 8008640:	2301      	movne	r3, #1
 8008642:	2300      	moveq	r3, #0
 8008644:	b2db      	uxtb	r3, r3
 8008646:	e03c      	b.n	80086c2 <HAL_TIM_PWM_Start+0x9e>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2b04      	cmp	r3, #4
 800864c:	d109      	bne.n	8008662 <HAL_TIM_PWM_Start+0x3e>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b01      	cmp	r3, #1
 8008658:	bf14      	ite	ne
 800865a:	2301      	movne	r3, #1
 800865c:	2300      	moveq	r3, #0
 800865e:	b2db      	uxtb	r3, r3
 8008660:	e02f      	b.n	80086c2 <HAL_TIM_PWM_Start+0x9e>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b08      	cmp	r3, #8
 8008666:	d109      	bne.n	800867c <HAL_TIM_PWM_Start+0x58>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b01      	cmp	r3, #1
 8008672:	bf14      	ite	ne
 8008674:	2301      	movne	r3, #1
 8008676:	2300      	moveq	r3, #0
 8008678:	b2db      	uxtb	r3, r3
 800867a:	e022      	b.n	80086c2 <HAL_TIM_PWM_Start+0x9e>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b0c      	cmp	r3, #12
 8008680:	d109      	bne.n	8008696 <HAL_TIM_PWM_Start+0x72>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b01      	cmp	r3, #1
 800868c:	bf14      	ite	ne
 800868e:	2301      	movne	r3, #1
 8008690:	2300      	moveq	r3, #0
 8008692:	b2db      	uxtb	r3, r3
 8008694:	e015      	b.n	80086c2 <HAL_TIM_PWM_Start+0x9e>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b10      	cmp	r3, #16
 800869a:	d109      	bne.n	80086b0 <HAL_TIM_PWM_Start+0x8c>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	bf14      	ite	ne
 80086a8:	2301      	movne	r3, #1
 80086aa:	2300      	moveq	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	e008      	b.n	80086c2 <HAL_TIM_PWM_Start+0x9e>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	bf14      	ite	ne
 80086bc:	2301      	movne	r3, #1
 80086be:	2300      	moveq	r3, #0
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e0a1      	b.n	800880e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d104      	bne.n	80086da <HAL_TIM_PWM_Start+0xb6>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086d8:	e023      	b.n	8008722 <HAL_TIM_PWM_Start+0xfe>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d104      	bne.n	80086ea <HAL_TIM_PWM_Start+0xc6>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086e8:	e01b      	b.n	8008722 <HAL_TIM_PWM_Start+0xfe>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d104      	bne.n	80086fa <HAL_TIM_PWM_Start+0xd6>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086f8:	e013      	b.n	8008722 <HAL_TIM_PWM_Start+0xfe>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b0c      	cmp	r3, #12
 80086fe:	d104      	bne.n	800870a <HAL_TIM_PWM_Start+0xe6>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2202      	movs	r2, #2
 8008704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008708:	e00b      	b.n	8008722 <HAL_TIM_PWM_Start+0xfe>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b10      	cmp	r3, #16
 800870e:	d104      	bne.n	800871a <HAL_TIM_PWM_Start+0xf6>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008718:	e003      	b.n	8008722 <HAL_TIM_PWM_Start+0xfe>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2202      	movs	r2, #2
 800871e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2201      	movs	r2, #1
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 fea2 	bl	8009474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a38      	ldr	r2, [pc, #224]	; (8008818 <HAL_TIM_PWM_Start+0x1f4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d013      	beq.n	8008762 <HAL_TIM_PWM_Start+0x13e>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a37      	ldr	r2, [pc, #220]	; (800881c <HAL_TIM_PWM_Start+0x1f8>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d00e      	beq.n	8008762 <HAL_TIM_PWM_Start+0x13e>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a35      	ldr	r2, [pc, #212]	; (8008820 <HAL_TIM_PWM_Start+0x1fc>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d009      	beq.n	8008762 <HAL_TIM_PWM_Start+0x13e>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a34      	ldr	r2, [pc, #208]	; (8008824 <HAL_TIM_PWM_Start+0x200>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d004      	beq.n	8008762 <HAL_TIM_PWM_Start+0x13e>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a32      	ldr	r2, [pc, #200]	; (8008828 <HAL_TIM_PWM_Start+0x204>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d101      	bne.n	8008766 <HAL_TIM_PWM_Start+0x142>
 8008762:	2301      	movs	r3, #1
 8008764:	e000      	b.n	8008768 <HAL_TIM_PWM_Start+0x144>
 8008766:	2300      	movs	r3, #0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d007      	beq.n	800877c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800877a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a25      	ldr	r2, [pc, #148]	; (8008818 <HAL_TIM_PWM_Start+0x1f4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d022      	beq.n	80087cc <HAL_TIM_PWM_Start+0x1a8>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800878e:	d01d      	beq.n	80087cc <HAL_TIM_PWM_Start+0x1a8>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a25      	ldr	r2, [pc, #148]	; (800882c <HAL_TIM_PWM_Start+0x208>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d018      	beq.n	80087cc <HAL_TIM_PWM_Start+0x1a8>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a24      	ldr	r2, [pc, #144]	; (8008830 <HAL_TIM_PWM_Start+0x20c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d013      	beq.n	80087cc <HAL_TIM_PWM_Start+0x1a8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a22      	ldr	r2, [pc, #136]	; (8008834 <HAL_TIM_PWM_Start+0x210>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00e      	beq.n	80087cc <HAL_TIM_PWM_Start+0x1a8>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a1a      	ldr	r2, [pc, #104]	; (800881c <HAL_TIM_PWM_Start+0x1f8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d009      	beq.n	80087cc <HAL_TIM_PWM_Start+0x1a8>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a1e      	ldr	r2, [pc, #120]	; (8008838 <HAL_TIM_PWM_Start+0x214>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d004      	beq.n	80087cc <HAL_TIM_PWM_Start+0x1a8>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a16      	ldr	r2, [pc, #88]	; (8008820 <HAL_TIM_PWM_Start+0x1fc>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d115      	bne.n	80087f8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	4b1a      	ldr	r3, [pc, #104]	; (800883c <HAL_TIM_PWM_Start+0x218>)
 80087d4:	4013      	ands	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b06      	cmp	r3, #6
 80087dc:	d015      	beq.n	800880a <HAL_TIM_PWM_Start+0x1e6>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e4:	d011      	beq.n	800880a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f042 0201 	orr.w	r2, r2, #1
 80087f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f6:	e008      	b.n	800880a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f042 0201 	orr.w	r2, r2, #1
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	e000      	b.n	800880c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800880a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	40010000 	.word	0x40010000
 800881c:	40010400 	.word	0x40010400
 8008820:	40014000 	.word	0x40014000
 8008824:	40014400 	.word	0x40014400
 8008828:	40014800 	.word	0x40014800
 800882c:	40000400 	.word	0x40000400
 8008830:	40000800 	.word	0x40000800
 8008834:	40000c00 	.word	0x40000c00
 8008838:	40001800 	.word	0x40001800
 800883c:	00010007 	.word	0x00010007

08008840 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800885a:	2302      	movs	r3, #2
 800885c:	e0ff      	b.n	8008a5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b14      	cmp	r3, #20
 800886a:	f200 80f0 	bhi.w	8008a4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800886e:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008874:	080088c9 	.word	0x080088c9
 8008878:	08008a4f 	.word	0x08008a4f
 800887c:	08008a4f 	.word	0x08008a4f
 8008880:	08008a4f 	.word	0x08008a4f
 8008884:	08008909 	.word	0x08008909
 8008888:	08008a4f 	.word	0x08008a4f
 800888c:	08008a4f 	.word	0x08008a4f
 8008890:	08008a4f 	.word	0x08008a4f
 8008894:	0800894b 	.word	0x0800894b
 8008898:	08008a4f 	.word	0x08008a4f
 800889c:	08008a4f 	.word	0x08008a4f
 80088a0:	08008a4f 	.word	0x08008a4f
 80088a4:	0800898b 	.word	0x0800898b
 80088a8:	08008a4f 	.word	0x08008a4f
 80088ac:	08008a4f 	.word	0x08008a4f
 80088b0:	08008a4f 	.word	0x08008a4f
 80088b4:	080089cd 	.word	0x080089cd
 80088b8:	08008a4f 	.word	0x08008a4f
 80088bc:	08008a4f 	.word	0x08008a4f
 80088c0:	08008a4f 	.word	0x08008a4f
 80088c4:	08008a0d 	.word	0x08008a0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68b9      	ldr	r1, [r7, #8]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fa5c 	bl	8008d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699a      	ldr	r2, [r3, #24]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0208 	orr.w	r2, r2, #8
 80088e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0204 	bic.w	r2, r2, #4
 80088f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6999      	ldr	r1, [r3, #24]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	691a      	ldr	r2, [r3, #16]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	619a      	str	r2, [r3, #24]
      break;
 8008906:	e0a5      	b.n	8008a54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68b9      	ldr	r1, [r7, #8]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 facc 	bl	8008eac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	699a      	ldr	r2, [r3, #24]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6999      	ldr	r1, [r3, #24]
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	021a      	lsls	r2, r3, #8
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	619a      	str	r2, [r3, #24]
      break;
 8008948:	e084      	b.n	8008a54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68b9      	ldr	r1, [r7, #8]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fb35 	bl	8008fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69da      	ldr	r2, [r3, #28]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f042 0208 	orr.w	r2, r2, #8
 8008964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69da      	ldr	r2, [r3, #28]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0204 	bic.w	r2, r2, #4
 8008974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	69d9      	ldr	r1, [r3, #28]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	691a      	ldr	r2, [r3, #16]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	61da      	str	r2, [r3, #28]
      break;
 8008988:	e064      	b.n	8008a54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68b9      	ldr	r1, [r7, #8]
 8008990:	4618      	mov	r0, r3
 8008992:	f000 fb9d 	bl	80090d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	69da      	ldr	r2, [r3, #28]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	69da      	ldr	r2, [r3, #28]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	69d9      	ldr	r1, [r3, #28]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	021a      	lsls	r2, r3, #8
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	61da      	str	r2, [r3, #28]
      break;
 80089ca:	e043      	b.n	8008a54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68b9      	ldr	r1, [r7, #8]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fbe6 	bl	80091a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0208 	orr.w	r2, r2, #8
 80089e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0204 	bic.w	r2, r2, #4
 80089f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	691a      	ldr	r2, [r3, #16]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a0a:	e023      	b.n	8008a54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68b9      	ldr	r1, [r7, #8]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 fc2a 	bl	800926c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	021a      	lsls	r2, r3, #8
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a4c:	e002      	b.n	8008a54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	75fb      	strb	r3, [r7, #23]
      break;
 8008a52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop

08008a68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <HAL_TIM_ConfigClockSource+0x1c>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e0dc      	b.n	8008c3e <HAL_TIM_ConfigClockSource+0x1d6>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	4b6a      	ldr	r3, [pc, #424]	; (8008c48 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a64      	ldr	r2, [pc, #400]	; (8008c4c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	f000 80a9 	beq.w	8008c12 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ac0:	4a62      	ldr	r2, [pc, #392]	; (8008c4c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	f200 80ae 	bhi.w	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ac8:	4a61      	ldr	r2, [pc, #388]	; (8008c50 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	f000 80a1 	beq.w	8008c12 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ad0:	4a5f      	ldr	r2, [pc, #380]	; (8008c50 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	f200 80a6 	bhi.w	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ad8:	4a5e      	ldr	r2, [pc, #376]	; (8008c54 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	f000 8099 	beq.w	8008c12 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ae0:	4a5c      	ldr	r2, [pc, #368]	; (8008c54 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	f200 809e 	bhi.w	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ae8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008aec:	f000 8091 	beq.w	8008c12 <HAL_TIM_ConfigClockSource+0x1aa>
 8008af0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008af4:	f200 8096 	bhi.w	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008afc:	f000 8089 	beq.w	8008c12 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b04:	f200 808e 	bhi.w	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b0c:	d03e      	beq.n	8008b8c <HAL_TIM_ConfigClockSource+0x124>
 8008b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b12:	f200 8087 	bhi.w	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b1a:	f000 8086 	beq.w	8008c2a <HAL_TIM_ConfigClockSource+0x1c2>
 8008b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b22:	d87f      	bhi.n	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b24:	2b70      	cmp	r3, #112	; 0x70
 8008b26:	d01a      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0xf6>
 8008b28:	2b70      	cmp	r3, #112	; 0x70
 8008b2a:	d87b      	bhi.n	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b2c:	2b60      	cmp	r3, #96	; 0x60
 8008b2e:	d050      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x16a>
 8008b30:	2b60      	cmp	r3, #96	; 0x60
 8008b32:	d877      	bhi.n	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b34:	2b50      	cmp	r3, #80	; 0x50
 8008b36:	d03c      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x14a>
 8008b38:	2b50      	cmp	r3, #80	; 0x50
 8008b3a:	d873      	bhi.n	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b3c:	2b40      	cmp	r3, #64	; 0x40
 8008b3e:	d058      	beq.n	8008bf2 <HAL_TIM_ConfigClockSource+0x18a>
 8008b40:	2b40      	cmp	r3, #64	; 0x40
 8008b42:	d86f      	bhi.n	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b44:	2b30      	cmp	r3, #48	; 0x30
 8008b46:	d064      	beq.n	8008c12 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b48:	2b30      	cmp	r3, #48	; 0x30
 8008b4a:	d86b      	bhi.n	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b4c:	2b20      	cmp	r3, #32
 8008b4e:	d060      	beq.n	8008c12 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	d867      	bhi.n	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d05c      	beq.n	8008c12 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b58:	2b10      	cmp	r3, #16
 8008b5a:	d05a      	beq.n	8008c12 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b5c:	e062      	b.n	8008c24 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	6899      	ldr	r1, [r3, #8]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f000 fc61 	bl	8009434 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	609a      	str	r2, [r3, #8]
      break;
 8008b8a:	e04f      	b.n	8008c2c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6818      	ldr	r0, [r3, #0]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	6899      	ldr	r1, [r3, #8]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f000 fc4a 	bl	8009434 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bae:	609a      	str	r2, [r3, #8]
      break;
 8008bb0:	e03c      	b.n	8008c2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	6859      	ldr	r1, [r3, #4]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f000 fbba 	bl	8009338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2150      	movs	r1, #80	; 0x50
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fc14 	bl	80093f8 <TIM_ITRx_SetConfig>
      break;
 8008bd0:	e02c      	b.n	8008c2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	6859      	ldr	r1, [r3, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	461a      	mov	r2, r3
 8008be0:	f000 fbd9 	bl	8009396 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2160      	movs	r1, #96	; 0x60
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 fc04 	bl	80093f8 <TIM_ITRx_SetConfig>
      break;
 8008bf0:	e01c      	b.n	8008c2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	6859      	ldr	r1, [r3, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f000 fb9a 	bl	8009338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2140      	movs	r1, #64	; 0x40
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fbf4 	bl	80093f8 <TIM_ITRx_SetConfig>
      break;
 8008c10:	e00c      	b.n	8008c2c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	f000 fbeb 	bl	80093f8 <TIM_ITRx_SetConfig>
      break;
 8008c22:	e003      	b.n	8008c2c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
      break;
 8008c28:	e000      	b.n	8008c2c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008c2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	ffceff88 	.word	0xffceff88
 8008c4c:	00100040 	.word	0x00100040
 8008c50:	00100030 	.word	0x00100030
 8008c54:	00100020 	.word	0x00100020

08008c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a40      	ldr	r2, [pc, #256]	; (8008d6c <TIM_Base_SetConfig+0x114>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d013      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c76:	d00f      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a3d      	ldr	r2, [pc, #244]	; (8008d70 <TIM_Base_SetConfig+0x118>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d00b      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a3c      	ldr	r2, [pc, #240]	; (8008d74 <TIM_Base_SetConfig+0x11c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d007      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a3b      	ldr	r2, [pc, #236]	; (8008d78 <TIM_Base_SetConfig+0x120>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d003      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a3a      	ldr	r2, [pc, #232]	; (8008d7c <TIM_Base_SetConfig+0x124>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d108      	bne.n	8008caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a2f      	ldr	r2, [pc, #188]	; (8008d6c <TIM_Base_SetConfig+0x114>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d01f      	beq.n	8008cf2 <TIM_Base_SetConfig+0x9a>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb8:	d01b      	beq.n	8008cf2 <TIM_Base_SetConfig+0x9a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a2c      	ldr	r2, [pc, #176]	; (8008d70 <TIM_Base_SetConfig+0x118>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d017      	beq.n	8008cf2 <TIM_Base_SetConfig+0x9a>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a2b      	ldr	r2, [pc, #172]	; (8008d74 <TIM_Base_SetConfig+0x11c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d013      	beq.n	8008cf2 <TIM_Base_SetConfig+0x9a>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a2a      	ldr	r2, [pc, #168]	; (8008d78 <TIM_Base_SetConfig+0x120>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d00f      	beq.n	8008cf2 <TIM_Base_SetConfig+0x9a>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a29      	ldr	r2, [pc, #164]	; (8008d7c <TIM_Base_SetConfig+0x124>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d00b      	beq.n	8008cf2 <TIM_Base_SetConfig+0x9a>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a28      	ldr	r2, [pc, #160]	; (8008d80 <TIM_Base_SetConfig+0x128>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d007      	beq.n	8008cf2 <TIM_Base_SetConfig+0x9a>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a27      	ldr	r2, [pc, #156]	; (8008d84 <TIM_Base_SetConfig+0x12c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d003      	beq.n	8008cf2 <TIM_Base_SetConfig+0x9a>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a26      	ldr	r2, [pc, #152]	; (8008d88 <TIM_Base_SetConfig+0x130>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d108      	bne.n	8008d04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	689a      	ldr	r2, [r3, #8]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a10      	ldr	r2, [pc, #64]	; (8008d6c <TIM_Base_SetConfig+0x114>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d00f      	beq.n	8008d50 <TIM_Base_SetConfig+0xf8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a12      	ldr	r2, [pc, #72]	; (8008d7c <TIM_Base_SetConfig+0x124>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d00b      	beq.n	8008d50 <TIM_Base_SetConfig+0xf8>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a11      	ldr	r2, [pc, #68]	; (8008d80 <TIM_Base_SetConfig+0x128>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d007      	beq.n	8008d50 <TIM_Base_SetConfig+0xf8>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a10      	ldr	r2, [pc, #64]	; (8008d84 <TIM_Base_SetConfig+0x12c>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d003      	beq.n	8008d50 <TIM_Base_SetConfig+0xf8>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a0f      	ldr	r2, [pc, #60]	; (8008d88 <TIM_Base_SetConfig+0x130>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d103      	bne.n	8008d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	691a      	ldr	r2, [r3, #16]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	615a      	str	r2, [r3, #20]
}
 8008d5e:	bf00      	nop
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	40010000 	.word	0x40010000
 8008d70:	40000400 	.word	0x40000400
 8008d74:	40000800 	.word	0x40000800
 8008d78:	40000c00 	.word	0x40000c00
 8008d7c:	40010400 	.word	0x40010400
 8008d80:	40014000 	.word	0x40014000
 8008d84:	40014400 	.word	0x40014400
 8008d88:	40014800 	.word	0x40014800

08008d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	f023 0201 	bic.w	r2, r3, #1
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	4b37      	ldr	r3, [pc, #220]	; (8008e94 <TIM_OC1_SetConfig+0x108>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f023 0303 	bic.w	r3, r3, #3
 8008dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f023 0302 	bic.w	r3, r3, #2
 8008dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a2d      	ldr	r2, [pc, #180]	; (8008e98 <TIM_OC1_SetConfig+0x10c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d00f      	beq.n	8008e08 <TIM_OC1_SetConfig+0x7c>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a2c      	ldr	r2, [pc, #176]	; (8008e9c <TIM_OC1_SetConfig+0x110>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00b      	beq.n	8008e08 <TIM_OC1_SetConfig+0x7c>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a2b      	ldr	r2, [pc, #172]	; (8008ea0 <TIM_OC1_SetConfig+0x114>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d007      	beq.n	8008e08 <TIM_OC1_SetConfig+0x7c>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a2a      	ldr	r2, [pc, #168]	; (8008ea4 <TIM_OC1_SetConfig+0x118>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d003      	beq.n	8008e08 <TIM_OC1_SetConfig+0x7c>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a29      	ldr	r2, [pc, #164]	; (8008ea8 <TIM_OC1_SetConfig+0x11c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d10c      	bne.n	8008e22 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f023 0308 	bic.w	r3, r3, #8
 8008e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	f023 0304 	bic.w	r3, r3, #4
 8008e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a1c      	ldr	r2, [pc, #112]	; (8008e98 <TIM_OC1_SetConfig+0x10c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d00f      	beq.n	8008e4a <TIM_OC1_SetConfig+0xbe>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a1b      	ldr	r2, [pc, #108]	; (8008e9c <TIM_OC1_SetConfig+0x110>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d00b      	beq.n	8008e4a <TIM_OC1_SetConfig+0xbe>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a1a      	ldr	r2, [pc, #104]	; (8008ea0 <TIM_OC1_SetConfig+0x114>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d007      	beq.n	8008e4a <TIM_OC1_SetConfig+0xbe>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a19      	ldr	r2, [pc, #100]	; (8008ea4 <TIM_OC1_SetConfig+0x118>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d003      	beq.n	8008e4a <TIM_OC1_SetConfig+0xbe>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a18      	ldr	r2, [pc, #96]	; (8008ea8 <TIM_OC1_SetConfig+0x11c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d111      	bne.n	8008e6e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	621a      	str	r2, [r3, #32]
}
 8008e88:	bf00      	nop
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	fffeff8f 	.word	0xfffeff8f
 8008e98:	40010000 	.word	0x40010000
 8008e9c:	40010400 	.word	0x40010400
 8008ea0:	40014000 	.word	0x40014000
 8008ea4:	40014400 	.word	0x40014400
 8008ea8:	40014800 	.word	0x40014800

08008eac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	f023 0210 	bic.w	r2, r3, #16
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	4b34      	ldr	r3, [pc, #208]	; (8008fa8 <TIM_OC2_SetConfig+0xfc>)
 8008ed8:	4013      	ands	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	021b      	lsls	r3, r3, #8
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f023 0320 	bic.w	r3, r3, #32
 8008ef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	011b      	lsls	r3, r3, #4
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a29      	ldr	r2, [pc, #164]	; (8008fac <TIM_OC2_SetConfig+0x100>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d003      	beq.n	8008f14 <TIM_OC2_SetConfig+0x68>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a28      	ldr	r2, [pc, #160]	; (8008fb0 <TIM_OC2_SetConfig+0x104>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d10d      	bne.n	8008f30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a1e      	ldr	r2, [pc, #120]	; (8008fac <TIM_OC2_SetConfig+0x100>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d00f      	beq.n	8008f58 <TIM_OC2_SetConfig+0xac>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a1d      	ldr	r2, [pc, #116]	; (8008fb0 <TIM_OC2_SetConfig+0x104>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d00b      	beq.n	8008f58 <TIM_OC2_SetConfig+0xac>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a1c      	ldr	r2, [pc, #112]	; (8008fb4 <TIM_OC2_SetConfig+0x108>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d007      	beq.n	8008f58 <TIM_OC2_SetConfig+0xac>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a1b      	ldr	r2, [pc, #108]	; (8008fb8 <TIM_OC2_SetConfig+0x10c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d003      	beq.n	8008f58 <TIM_OC2_SetConfig+0xac>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a1a      	ldr	r2, [pc, #104]	; (8008fbc <TIM_OC2_SetConfig+0x110>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d113      	bne.n	8008f80 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	621a      	str	r2, [r3, #32]
}
 8008f9a:	bf00      	nop
 8008f9c:	371c      	adds	r7, #28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	feff8fff 	.word	0xfeff8fff
 8008fac:	40010000 	.word	0x40010000
 8008fb0:	40010400 	.word	0x40010400
 8008fb4:	40014000 	.word	0x40014000
 8008fb8:	40014400 	.word	0x40014400
 8008fbc:	40014800 	.word	0x40014800

08008fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
 8008fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4b33      	ldr	r3, [pc, #204]	; (80090b8 <TIM_OC3_SetConfig+0xf8>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f023 0303 	bic.w	r3, r3, #3
 8008ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	4313      	orrs	r3, r2
 8009014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a28      	ldr	r2, [pc, #160]	; (80090bc <TIM_OC3_SetConfig+0xfc>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d003      	beq.n	8009026 <TIM_OC3_SetConfig+0x66>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a27      	ldr	r2, [pc, #156]	; (80090c0 <TIM_OC3_SetConfig+0x100>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d10d      	bne.n	8009042 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800902c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	4313      	orrs	r3, r2
 8009038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a1d      	ldr	r2, [pc, #116]	; (80090bc <TIM_OC3_SetConfig+0xfc>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00f      	beq.n	800906a <TIM_OC3_SetConfig+0xaa>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a1c      	ldr	r2, [pc, #112]	; (80090c0 <TIM_OC3_SetConfig+0x100>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00b      	beq.n	800906a <TIM_OC3_SetConfig+0xaa>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a1b      	ldr	r2, [pc, #108]	; (80090c4 <TIM_OC3_SetConfig+0x104>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d007      	beq.n	800906a <TIM_OC3_SetConfig+0xaa>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a1a      	ldr	r2, [pc, #104]	; (80090c8 <TIM_OC3_SetConfig+0x108>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d003      	beq.n	800906a <TIM_OC3_SetConfig+0xaa>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a19      	ldr	r2, [pc, #100]	; (80090cc <TIM_OC3_SetConfig+0x10c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d113      	bne.n	8009092 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	4313      	orrs	r3, r2
 8009084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	621a      	str	r2, [r3, #32]
}
 80090ac:	bf00      	nop
 80090ae:	371c      	adds	r7, #28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	fffeff8f 	.word	0xfffeff8f
 80090bc:	40010000 	.word	0x40010000
 80090c0:	40010400 	.word	0x40010400
 80090c4:	40014000 	.word	0x40014000
 80090c8:	40014400 	.word	0x40014400
 80090cc:	40014800 	.word	0x40014800

080090d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	4b24      	ldr	r3, [pc, #144]	; (800918c <TIM_OC4_SetConfig+0xbc>)
 80090fc:	4013      	ands	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	021b      	lsls	r3, r3, #8
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	4313      	orrs	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800911a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	031b      	lsls	r3, r3, #12
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	4313      	orrs	r3, r2
 8009126:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a19      	ldr	r2, [pc, #100]	; (8009190 <TIM_OC4_SetConfig+0xc0>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d00f      	beq.n	8009150 <TIM_OC4_SetConfig+0x80>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a18      	ldr	r2, [pc, #96]	; (8009194 <TIM_OC4_SetConfig+0xc4>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d00b      	beq.n	8009150 <TIM_OC4_SetConfig+0x80>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a17      	ldr	r2, [pc, #92]	; (8009198 <TIM_OC4_SetConfig+0xc8>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d007      	beq.n	8009150 <TIM_OC4_SetConfig+0x80>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a16      	ldr	r2, [pc, #88]	; (800919c <TIM_OC4_SetConfig+0xcc>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d003      	beq.n	8009150 <TIM_OC4_SetConfig+0x80>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a15      	ldr	r2, [pc, #84]	; (80091a0 <TIM_OC4_SetConfig+0xd0>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d109      	bne.n	8009164 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	019b      	lsls	r3, r3, #6
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	4313      	orrs	r3, r2
 8009162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	621a      	str	r2, [r3, #32]
}
 800917e:	bf00      	nop
 8009180:	371c      	adds	r7, #28
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	feff8fff 	.word	0xfeff8fff
 8009190:	40010000 	.word	0x40010000
 8009194:	40010400 	.word	0x40010400
 8009198:	40014000 	.word	0x40014000
 800919c:	40014400 	.word	0x40014400
 80091a0:	40014800 	.word	0x40014800

080091a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	4b21      	ldr	r3, [pc, #132]	; (8009254 <TIM_OC5_SetConfig+0xb0>)
 80091d0:	4013      	ands	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80091e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	041b      	lsls	r3, r3, #16
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a18      	ldr	r2, [pc, #96]	; (8009258 <TIM_OC5_SetConfig+0xb4>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d00f      	beq.n	800921a <TIM_OC5_SetConfig+0x76>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a17      	ldr	r2, [pc, #92]	; (800925c <TIM_OC5_SetConfig+0xb8>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d00b      	beq.n	800921a <TIM_OC5_SetConfig+0x76>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a16      	ldr	r2, [pc, #88]	; (8009260 <TIM_OC5_SetConfig+0xbc>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d007      	beq.n	800921a <TIM_OC5_SetConfig+0x76>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a15      	ldr	r2, [pc, #84]	; (8009264 <TIM_OC5_SetConfig+0xc0>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d003      	beq.n	800921a <TIM_OC5_SetConfig+0x76>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a14      	ldr	r2, [pc, #80]	; (8009268 <TIM_OC5_SetConfig+0xc4>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d109      	bne.n	800922e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009220:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	021b      	lsls	r3, r3, #8
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	4313      	orrs	r3, r2
 800922c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	621a      	str	r2, [r3, #32]
}
 8009248:	bf00      	nop
 800924a:	371c      	adds	r7, #28
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	fffeff8f 	.word	0xfffeff8f
 8009258:	40010000 	.word	0x40010000
 800925c:	40010400 	.word	0x40010400
 8009260:	40014000 	.word	0x40014000
 8009264:	40014400 	.word	0x40014400
 8009268:	40014800 	.word	0x40014800

0800926c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	4b22      	ldr	r3, [pc, #136]	; (8009320 <TIM_OC6_SetConfig+0xb4>)
 8009298:	4013      	ands	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	051b      	lsls	r3, r3, #20
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a19      	ldr	r2, [pc, #100]	; (8009324 <TIM_OC6_SetConfig+0xb8>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00f      	beq.n	80092e4 <TIM_OC6_SetConfig+0x78>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a18      	ldr	r2, [pc, #96]	; (8009328 <TIM_OC6_SetConfig+0xbc>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d00b      	beq.n	80092e4 <TIM_OC6_SetConfig+0x78>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a17      	ldr	r2, [pc, #92]	; (800932c <TIM_OC6_SetConfig+0xc0>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d007      	beq.n	80092e4 <TIM_OC6_SetConfig+0x78>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a16      	ldr	r2, [pc, #88]	; (8009330 <TIM_OC6_SetConfig+0xc4>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d003      	beq.n	80092e4 <TIM_OC6_SetConfig+0x78>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a15      	ldr	r2, [pc, #84]	; (8009334 <TIM_OC6_SetConfig+0xc8>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d109      	bne.n	80092f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	029b      	lsls	r3, r3, #10
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	621a      	str	r2, [r3, #32]
}
 8009312:	bf00      	nop
 8009314:	371c      	adds	r7, #28
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	feff8fff 	.word	0xfeff8fff
 8009324:	40010000 	.word	0x40010000
 8009328:	40010400 	.word	0x40010400
 800932c:	40014000 	.word	0x40014000
 8009330:	40014400 	.word	0x40014400
 8009334:	40014800 	.word	0x40014800

08009338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6a1b      	ldr	r3, [r3, #32]
 8009348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	f023 0201 	bic.w	r2, r3, #1
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	011b      	lsls	r3, r3, #4
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	4313      	orrs	r3, r2
 800936c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f023 030a 	bic.w	r3, r3, #10
 8009374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	4313      	orrs	r3, r2
 800937c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	621a      	str	r2, [r3, #32]
}
 800938a:	bf00      	nop
 800938c:	371c      	adds	r7, #28
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009396:	b480      	push	{r7}
 8009398:	b087      	sub	sp, #28
 800939a:	af00      	add	r7, sp, #0
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	f023 0210 	bic.w	r2, r3, #16
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6a1b      	ldr	r3, [r3, #32]
 80093b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	031b      	lsls	r3, r3, #12
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	011b      	lsls	r3, r3, #4
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	4313      	orrs	r3, r2
 80093dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	693a      	ldr	r2, [r7, #16]
 80093e8:	621a      	str	r2, [r3, #32]
}
 80093ea:	bf00      	nop
 80093ec:	371c      	adds	r7, #28
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
	...

080093f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4b09      	ldr	r3, [pc, #36]	; (8009430 <TIM_ITRx_SetConfig+0x38>)
 800940c:	4013      	ands	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4313      	orrs	r3, r2
 8009416:	f043 0307 	orr.w	r3, r3, #7
 800941a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	609a      	str	r2, [r3, #8]
}
 8009422:	bf00      	nop
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	ffcfff8f 	.word	0xffcfff8f

08009434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800944e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	021a      	lsls	r2, r3, #8
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	431a      	orrs	r2, r3
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	4313      	orrs	r3, r2
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	4313      	orrs	r3, r2
 8009460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	609a      	str	r2, [r3, #8]
}
 8009468:	bf00      	nop
 800946a:	371c      	adds	r7, #28
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	f003 031f 	and.w	r3, r3, #31
 8009486:	2201      	movs	r2, #1
 8009488:	fa02 f303 	lsl.w	r3, r2, r3
 800948c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6a1a      	ldr	r2, [r3, #32]
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	43db      	mvns	r3, r3
 8009496:	401a      	ands	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6a1a      	ldr	r2, [r3, #32]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f003 031f 	and.w	r3, r3, #31
 80094a6:	6879      	ldr	r1, [r7, #4]
 80094a8:	fa01 f303 	lsl.w	r3, r1, r3
 80094ac:	431a      	orrs	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	621a      	str	r2, [r3, #32]
}
 80094b2:	bf00      	nop
 80094b4:	371c      	adds	r7, #28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
	...

080094c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d101      	bne.n	80094d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094d4:	2302      	movs	r3, #2
 80094d6:	e06d      	b.n	80095b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a30      	ldr	r2, [pc, #192]	; (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d004      	beq.n	800950c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a2f      	ldr	r2, [pc, #188]	; (80095c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d108      	bne.n	800951e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009512:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009524:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	4313      	orrs	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a20      	ldr	r2, [pc, #128]	; (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d022      	beq.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800954a:	d01d      	beq.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a1d      	ldr	r2, [pc, #116]	; (80095c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d018      	beq.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a1c      	ldr	r2, [pc, #112]	; (80095cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d013      	beq.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a1a      	ldr	r2, [pc, #104]	; (80095d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d00e      	beq.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a15      	ldr	r2, [pc, #84]	; (80095c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d009      	beq.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a16      	ldr	r2, [pc, #88]	; (80095d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d004      	beq.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a15      	ldr	r2, [pc, #84]	; (80095d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d10c      	bne.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800958e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	4313      	orrs	r3, r2
 8009598:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	40010000 	.word	0x40010000
 80095c4:	40010400 	.word	0x40010400
 80095c8:	40000400 	.word	0x40000400
 80095cc:	40000800 	.word	0x40000800
 80095d0:	40000c00 	.word	0x40000c00
 80095d4:	40001800 	.word	0x40001800
 80095d8:	40014000 	.word	0x40014000

080095dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e042      	b.n	8009674 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d106      	bne.n	8009606 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7f7 fdcb 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2224      	movs	r2, #36	; 0x24
 800960a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f022 0201 	bic.w	r2, r2, #1
 800961c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f8c2 	bl	80097a8 <UART_SetConfig>
 8009624:	4603      	mov	r3, r0
 8009626:	2b01      	cmp	r3, #1
 8009628:	d101      	bne.n	800962e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e022      	b.n	8009674 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009632:	2b00      	cmp	r3, #0
 8009634:	d002      	beq.n	800963c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 ff22 	bl	800a480 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800964a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800965a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f042 0201 	orr.w	r2, r2, #1
 800966a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 ffa9 	bl	800a5c4 <UART_CheckIdleState>
 8009672:	4603      	mov	r3, r0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08a      	sub	sp, #40	; 0x28
 8009680:	af02      	add	r7, sp, #8
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	4613      	mov	r3, r2
 800968a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009692:	2b20      	cmp	r3, #32
 8009694:	f040 8083 	bne.w	800979e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d002      	beq.n	80096a4 <HAL_UART_Transmit+0x28>
 800969e:	88fb      	ldrh	r3, [r7, #6]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e07b      	b.n	80097a0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d101      	bne.n	80096b6 <HAL_UART_Transmit+0x3a>
 80096b2:	2302      	movs	r3, #2
 80096b4:	e074      	b.n	80097a0 <HAL_UART_Transmit+0x124>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2221      	movs	r2, #33	; 0x21
 80096ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096ce:	f7f7 fffd 	bl	80016cc <HAL_GetTick>
 80096d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	88fa      	ldrh	r2, [r7, #6]
 80096d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	88fa      	ldrh	r2, [r7, #6]
 80096e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ec:	d108      	bne.n	8009700 <HAL_UART_Transmit+0x84>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d104      	bne.n	8009700 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	61bb      	str	r3, [r7, #24]
 80096fe:	e003      	b.n	8009708 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009704:	2300      	movs	r3, #0
 8009706:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009710:	e02c      	b.n	800976c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2200      	movs	r2, #0
 800971a:	2180      	movs	r1, #128	; 0x80
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 ff9c 	bl	800a65a <UART_WaitOnFlagUntilTimeout>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e039      	b.n	80097a0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10b      	bne.n	800974a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009740:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	3302      	adds	r3, #2
 8009746:	61bb      	str	r3, [r7, #24]
 8009748:	e007      	b.n	800975a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	781a      	ldrb	r2, [r3, #0]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	3301      	adds	r3, #1
 8009758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009760:	b29b      	uxth	r3, r3
 8009762:	3b01      	subs	r3, #1
 8009764:	b29a      	uxth	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009772:	b29b      	uxth	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1cc      	bne.n	8009712 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	2200      	movs	r2, #0
 8009780:	2140      	movs	r1, #64	; 0x40
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 ff69 	bl	800a65a <UART_WaitOnFlagUntilTimeout>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e006      	b.n	80097a0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	e000      	b.n	80097a0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800979e:	2302      	movs	r3, #2
  }
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3720      	adds	r7, #32
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097ac:	b092      	sub	sp, #72	; 0x48
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	431a      	orrs	r2, r3
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	431a      	orrs	r2, r3
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	4bbe      	ldr	r3, [pc, #760]	; (8009ad0 <UART_SetConfig+0x328>)
 80097d8:	4013      	ands	r3, r2
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	6812      	ldr	r2, [r2, #0]
 80097de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097e0:	430b      	orrs	r3, r1
 80097e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	68da      	ldr	r2, [r3, #12]
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4ab3      	ldr	r2, [pc, #716]	; (8009ad4 <UART_SetConfig+0x32c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d004      	beq.n	8009814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009810:	4313      	orrs	r3, r2
 8009812:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	689a      	ldr	r2, [r3, #8]
 800981a:	4baf      	ldr	r3, [pc, #700]	; (8009ad8 <UART_SetConfig+0x330>)
 800981c:	4013      	ands	r3, r2
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	6812      	ldr	r2, [r2, #0]
 8009822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009824:	430b      	orrs	r3, r1
 8009826:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982e:	f023 010f 	bic.w	r1, r3, #15
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	430a      	orrs	r2, r1
 800983c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4aa6      	ldr	r2, [pc, #664]	; (8009adc <UART_SetConfig+0x334>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d177      	bne.n	8009938 <UART_SetConfig+0x190>
 8009848:	4ba5      	ldr	r3, [pc, #660]	; (8009ae0 <UART_SetConfig+0x338>)
 800984a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800984c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009850:	2b28      	cmp	r3, #40	; 0x28
 8009852:	d86d      	bhi.n	8009930 <UART_SetConfig+0x188>
 8009854:	a201      	add	r2, pc, #4	; (adr r2, 800985c <UART_SetConfig+0xb4>)
 8009856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985a:	bf00      	nop
 800985c:	08009901 	.word	0x08009901
 8009860:	08009931 	.word	0x08009931
 8009864:	08009931 	.word	0x08009931
 8009868:	08009931 	.word	0x08009931
 800986c:	08009931 	.word	0x08009931
 8009870:	08009931 	.word	0x08009931
 8009874:	08009931 	.word	0x08009931
 8009878:	08009931 	.word	0x08009931
 800987c:	08009909 	.word	0x08009909
 8009880:	08009931 	.word	0x08009931
 8009884:	08009931 	.word	0x08009931
 8009888:	08009931 	.word	0x08009931
 800988c:	08009931 	.word	0x08009931
 8009890:	08009931 	.word	0x08009931
 8009894:	08009931 	.word	0x08009931
 8009898:	08009931 	.word	0x08009931
 800989c:	08009911 	.word	0x08009911
 80098a0:	08009931 	.word	0x08009931
 80098a4:	08009931 	.word	0x08009931
 80098a8:	08009931 	.word	0x08009931
 80098ac:	08009931 	.word	0x08009931
 80098b0:	08009931 	.word	0x08009931
 80098b4:	08009931 	.word	0x08009931
 80098b8:	08009931 	.word	0x08009931
 80098bc:	08009919 	.word	0x08009919
 80098c0:	08009931 	.word	0x08009931
 80098c4:	08009931 	.word	0x08009931
 80098c8:	08009931 	.word	0x08009931
 80098cc:	08009931 	.word	0x08009931
 80098d0:	08009931 	.word	0x08009931
 80098d4:	08009931 	.word	0x08009931
 80098d8:	08009931 	.word	0x08009931
 80098dc:	08009921 	.word	0x08009921
 80098e0:	08009931 	.word	0x08009931
 80098e4:	08009931 	.word	0x08009931
 80098e8:	08009931 	.word	0x08009931
 80098ec:	08009931 	.word	0x08009931
 80098f0:	08009931 	.word	0x08009931
 80098f4:	08009931 	.word	0x08009931
 80098f8:	08009931 	.word	0x08009931
 80098fc:	08009929 	.word	0x08009929
 8009900:	2301      	movs	r3, #1
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009906:	e326      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009908:	2304      	movs	r3, #4
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800990e:	e322      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009910:	2308      	movs	r3, #8
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009916:	e31e      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009918:	2310      	movs	r3, #16
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800991e:	e31a      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009920:	2320      	movs	r3, #32
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009926:	e316      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009928:	2340      	movs	r3, #64	; 0x40
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800992e:	e312      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009930:	2380      	movs	r3, #128	; 0x80
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009936:	e30e      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a69      	ldr	r2, [pc, #420]	; (8009ae4 <UART_SetConfig+0x33c>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d130      	bne.n	80099a4 <UART_SetConfig+0x1fc>
 8009942:	4b67      	ldr	r3, [pc, #412]	; (8009ae0 <UART_SetConfig+0x338>)
 8009944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	2b05      	cmp	r3, #5
 800994c:	d826      	bhi.n	800999c <UART_SetConfig+0x1f4>
 800994e:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <UART_SetConfig+0x1ac>)
 8009950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009954:	0800996d 	.word	0x0800996d
 8009958:	08009975 	.word	0x08009975
 800995c:	0800997d 	.word	0x0800997d
 8009960:	08009985 	.word	0x08009985
 8009964:	0800998d 	.word	0x0800998d
 8009968:	08009995 	.word	0x08009995
 800996c:	2300      	movs	r3, #0
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009972:	e2f0      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009974:	2304      	movs	r3, #4
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997a:	e2ec      	b.n	8009f56 <UART_SetConfig+0x7ae>
 800997c:	2308      	movs	r3, #8
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009982:	e2e8      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009984:	2310      	movs	r3, #16
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998a:	e2e4      	b.n	8009f56 <UART_SetConfig+0x7ae>
 800998c:	2320      	movs	r3, #32
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009992:	e2e0      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009994:	2340      	movs	r3, #64	; 0x40
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999a:	e2dc      	b.n	8009f56 <UART_SetConfig+0x7ae>
 800999c:	2380      	movs	r3, #128	; 0x80
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a2:	e2d8      	b.n	8009f56 <UART_SetConfig+0x7ae>
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a4f      	ldr	r2, [pc, #316]	; (8009ae8 <UART_SetConfig+0x340>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d130      	bne.n	8009a10 <UART_SetConfig+0x268>
 80099ae:	4b4c      	ldr	r3, [pc, #304]	; (8009ae0 <UART_SetConfig+0x338>)
 80099b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b2:	f003 0307 	and.w	r3, r3, #7
 80099b6:	2b05      	cmp	r3, #5
 80099b8:	d826      	bhi.n	8009a08 <UART_SetConfig+0x260>
 80099ba:	a201      	add	r2, pc, #4	; (adr r2, 80099c0 <UART_SetConfig+0x218>)
 80099bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c0:	080099d9 	.word	0x080099d9
 80099c4:	080099e1 	.word	0x080099e1
 80099c8:	080099e9 	.word	0x080099e9
 80099cc:	080099f1 	.word	0x080099f1
 80099d0:	080099f9 	.word	0x080099f9
 80099d4:	08009a01 	.word	0x08009a01
 80099d8:	2300      	movs	r3, #0
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099de:	e2ba      	b.n	8009f56 <UART_SetConfig+0x7ae>
 80099e0:	2304      	movs	r3, #4
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e6:	e2b6      	b.n	8009f56 <UART_SetConfig+0x7ae>
 80099e8:	2308      	movs	r3, #8
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ee:	e2b2      	b.n	8009f56 <UART_SetConfig+0x7ae>
 80099f0:	2310      	movs	r3, #16
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f6:	e2ae      	b.n	8009f56 <UART_SetConfig+0x7ae>
 80099f8:	2320      	movs	r3, #32
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fe:	e2aa      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009a00:	2340      	movs	r3, #64	; 0x40
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a06:	e2a6      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009a08:	2380      	movs	r3, #128	; 0x80
 8009a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0e:	e2a2      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a35      	ldr	r2, [pc, #212]	; (8009aec <UART_SetConfig+0x344>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d130      	bne.n	8009a7c <UART_SetConfig+0x2d4>
 8009a1a:	4b31      	ldr	r3, [pc, #196]	; (8009ae0 <UART_SetConfig+0x338>)
 8009a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a1e:	f003 0307 	and.w	r3, r3, #7
 8009a22:	2b05      	cmp	r3, #5
 8009a24:	d826      	bhi.n	8009a74 <UART_SetConfig+0x2cc>
 8009a26:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <UART_SetConfig+0x284>)
 8009a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2c:	08009a45 	.word	0x08009a45
 8009a30:	08009a4d 	.word	0x08009a4d
 8009a34:	08009a55 	.word	0x08009a55
 8009a38:	08009a5d 	.word	0x08009a5d
 8009a3c:	08009a65 	.word	0x08009a65
 8009a40:	08009a6d 	.word	0x08009a6d
 8009a44:	2300      	movs	r3, #0
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4a:	e284      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009a4c:	2304      	movs	r3, #4
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a52:	e280      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009a54:	2308      	movs	r3, #8
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5a:	e27c      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009a5c:	2310      	movs	r3, #16
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a62:	e278      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009a64:	2320      	movs	r3, #32
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6a:	e274      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009a6c:	2340      	movs	r3, #64	; 0x40
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a72:	e270      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009a74:	2380      	movs	r3, #128	; 0x80
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7a:	e26c      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a1b      	ldr	r2, [pc, #108]	; (8009af0 <UART_SetConfig+0x348>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d142      	bne.n	8009b0c <UART_SetConfig+0x364>
 8009a86:	4b16      	ldr	r3, [pc, #88]	; (8009ae0 <UART_SetConfig+0x338>)
 8009a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	2b05      	cmp	r3, #5
 8009a90:	d838      	bhi.n	8009b04 <UART_SetConfig+0x35c>
 8009a92:	a201      	add	r2, pc, #4	; (adr r2, 8009a98 <UART_SetConfig+0x2f0>)
 8009a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a98:	08009ab1 	.word	0x08009ab1
 8009a9c:	08009ab9 	.word	0x08009ab9
 8009aa0:	08009ac1 	.word	0x08009ac1
 8009aa4:	08009ac9 	.word	0x08009ac9
 8009aa8:	08009af5 	.word	0x08009af5
 8009aac:	08009afd 	.word	0x08009afd
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab6:	e24e      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009ab8:	2304      	movs	r3, #4
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009abe:	e24a      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009ac0:	2308      	movs	r3, #8
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac6:	e246      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009ac8:	2310      	movs	r3, #16
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ace:	e242      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009ad0:	cfff69f3 	.word	0xcfff69f3
 8009ad4:	58000c00 	.word	0x58000c00
 8009ad8:	11fff4ff 	.word	0x11fff4ff
 8009adc:	40011000 	.word	0x40011000
 8009ae0:	58024400 	.word	0x58024400
 8009ae4:	40004400 	.word	0x40004400
 8009ae8:	40004800 	.word	0x40004800
 8009aec:	40004c00 	.word	0x40004c00
 8009af0:	40005000 	.word	0x40005000
 8009af4:	2320      	movs	r3, #32
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e22c      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009afc:	2340      	movs	r3, #64	; 0x40
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e228      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009b04:	2380      	movs	r3, #128	; 0x80
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e224      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4ab1      	ldr	r2, [pc, #708]	; (8009dd8 <UART_SetConfig+0x630>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d176      	bne.n	8009c04 <UART_SetConfig+0x45c>
 8009b16:	4bb1      	ldr	r3, [pc, #708]	; (8009ddc <UART_SetConfig+0x634>)
 8009b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b1e:	2b28      	cmp	r3, #40	; 0x28
 8009b20:	d86c      	bhi.n	8009bfc <UART_SetConfig+0x454>
 8009b22:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <UART_SetConfig+0x380>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009bcd 	.word	0x08009bcd
 8009b2c:	08009bfd 	.word	0x08009bfd
 8009b30:	08009bfd 	.word	0x08009bfd
 8009b34:	08009bfd 	.word	0x08009bfd
 8009b38:	08009bfd 	.word	0x08009bfd
 8009b3c:	08009bfd 	.word	0x08009bfd
 8009b40:	08009bfd 	.word	0x08009bfd
 8009b44:	08009bfd 	.word	0x08009bfd
 8009b48:	08009bd5 	.word	0x08009bd5
 8009b4c:	08009bfd 	.word	0x08009bfd
 8009b50:	08009bfd 	.word	0x08009bfd
 8009b54:	08009bfd 	.word	0x08009bfd
 8009b58:	08009bfd 	.word	0x08009bfd
 8009b5c:	08009bfd 	.word	0x08009bfd
 8009b60:	08009bfd 	.word	0x08009bfd
 8009b64:	08009bfd 	.word	0x08009bfd
 8009b68:	08009bdd 	.word	0x08009bdd
 8009b6c:	08009bfd 	.word	0x08009bfd
 8009b70:	08009bfd 	.word	0x08009bfd
 8009b74:	08009bfd 	.word	0x08009bfd
 8009b78:	08009bfd 	.word	0x08009bfd
 8009b7c:	08009bfd 	.word	0x08009bfd
 8009b80:	08009bfd 	.word	0x08009bfd
 8009b84:	08009bfd 	.word	0x08009bfd
 8009b88:	08009be5 	.word	0x08009be5
 8009b8c:	08009bfd 	.word	0x08009bfd
 8009b90:	08009bfd 	.word	0x08009bfd
 8009b94:	08009bfd 	.word	0x08009bfd
 8009b98:	08009bfd 	.word	0x08009bfd
 8009b9c:	08009bfd 	.word	0x08009bfd
 8009ba0:	08009bfd 	.word	0x08009bfd
 8009ba4:	08009bfd 	.word	0x08009bfd
 8009ba8:	08009bed 	.word	0x08009bed
 8009bac:	08009bfd 	.word	0x08009bfd
 8009bb0:	08009bfd 	.word	0x08009bfd
 8009bb4:	08009bfd 	.word	0x08009bfd
 8009bb8:	08009bfd 	.word	0x08009bfd
 8009bbc:	08009bfd 	.word	0x08009bfd
 8009bc0:	08009bfd 	.word	0x08009bfd
 8009bc4:	08009bfd 	.word	0x08009bfd
 8009bc8:	08009bf5 	.word	0x08009bf5
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd2:	e1c0      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009bd4:	2304      	movs	r3, #4
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bda:	e1bc      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009bdc:	2308      	movs	r3, #8
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be2:	e1b8      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009be4:	2310      	movs	r3, #16
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bea:	e1b4      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009bec:	2320      	movs	r3, #32
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf2:	e1b0      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009bf4:	2340      	movs	r3, #64	; 0x40
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfa:	e1ac      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009bfc:	2380      	movs	r3, #128	; 0x80
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c02:	e1a8      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a75      	ldr	r2, [pc, #468]	; (8009de0 <UART_SetConfig+0x638>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d130      	bne.n	8009c70 <UART_SetConfig+0x4c8>
 8009c0e:	4b73      	ldr	r3, [pc, #460]	; (8009ddc <UART_SetConfig+0x634>)
 8009c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c12:	f003 0307 	and.w	r3, r3, #7
 8009c16:	2b05      	cmp	r3, #5
 8009c18:	d826      	bhi.n	8009c68 <UART_SetConfig+0x4c0>
 8009c1a:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <UART_SetConfig+0x478>)
 8009c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c20:	08009c39 	.word	0x08009c39
 8009c24:	08009c41 	.word	0x08009c41
 8009c28:	08009c49 	.word	0x08009c49
 8009c2c:	08009c51 	.word	0x08009c51
 8009c30:	08009c59 	.word	0x08009c59
 8009c34:	08009c61 	.word	0x08009c61
 8009c38:	2300      	movs	r3, #0
 8009c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3e:	e18a      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009c40:	2304      	movs	r3, #4
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c46:	e186      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009c48:	2308      	movs	r3, #8
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4e:	e182      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009c50:	2310      	movs	r3, #16
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c56:	e17e      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009c58:	2320      	movs	r3, #32
 8009c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5e:	e17a      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009c60:	2340      	movs	r3, #64	; 0x40
 8009c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c66:	e176      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009c68:	2380      	movs	r3, #128	; 0x80
 8009c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6e:	e172      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a5b      	ldr	r2, [pc, #364]	; (8009de4 <UART_SetConfig+0x63c>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d130      	bne.n	8009cdc <UART_SetConfig+0x534>
 8009c7a:	4b58      	ldr	r3, [pc, #352]	; (8009ddc <UART_SetConfig+0x634>)
 8009c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7e:	f003 0307 	and.w	r3, r3, #7
 8009c82:	2b05      	cmp	r3, #5
 8009c84:	d826      	bhi.n	8009cd4 <UART_SetConfig+0x52c>
 8009c86:	a201      	add	r2, pc, #4	; (adr r2, 8009c8c <UART_SetConfig+0x4e4>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009ca5 	.word	0x08009ca5
 8009c90:	08009cad 	.word	0x08009cad
 8009c94:	08009cb5 	.word	0x08009cb5
 8009c98:	08009cbd 	.word	0x08009cbd
 8009c9c:	08009cc5 	.word	0x08009cc5
 8009ca0:	08009ccd 	.word	0x08009ccd
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009caa:	e154      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009cac:	2304      	movs	r3, #4
 8009cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb2:	e150      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009cb4:	2308      	movs	r3, #8
 8009cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cba:	e14c      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009cbc:	2310      	movs	r3, #16
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc2:	e148      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009cc4:	2320      	movs	r3, #32
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cca:	e144      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009ccc:	2340      	movs	r3, #64	; 0x40
 8009cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd2:	e140      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009cd4:	2380      	movs	r3, #128	; 0x80
 8009cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cda:	e13c      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a41      	ldr	r2, [pc, #260]	; (8009de8 <UART_SetConfig+0x640>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	f040 8082 	bne.w	8009dec <UART_SetConfig+0x644>
 8009ce8:	4b3c      	ldr	r3, [pc, #240]	; (8009ddc <UART_SetConfig+0x634>)
 8009cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cf0:	2b28      	cmp	r3, #40	; 0x28
 8009cf2:	d86d      	bhi.n	8009dd0 <UART_SetConfig+0x628>
 8009cf4:	a201      	add	r2, pc, #4	; (adr r2, 8009cfc <UART_SetConfig+0x554>)
 8009cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfa:	bf00      	nop
 8009cfc:	08009da1 	.word	0x08009da1
 8009d00:	08009dd1 	.word	0x08009dd1
 8009d04:	08009dd1 	.word	0x08009dd1
 8009d08:	08009dd1 	.word	0x08009dd1
 8009d0c:	08009dd1 	.word	0x08009dd1
 8009d10:	08009dd1 	.word	0x08009dd1
 8009d14:	08009dd1 	.word	0x08009dd1
 8009d18:	08009dd1 	.word	0x08009dd1
 8009d1c:	08009da9 	.word	0x08009da9
 8009d20:	08009dd1 	.word	0x08009dd1
 8009d24:	08009dd1 	.word	0x08009dd1
 8009d28:	08009dd1 	.word	0x08009dd1
 8009d2c:	08009dd1 	.word	0x08009dd1
 8009d30:	08009dd1 	.word	0x08009dd1
 8009d34:	08009dd1 	.word	0x08009dd1
 8009d38:	08009dd1 	.word	0x08009dd1
 8009d3c:	08009db1 	.word	0x08009db1
 8009d40:	08009dd1 	.word	0x08009dd1
 8009d44:	08009dd1 	.word	0x08009dd1
 8009d48:	08009dd1 	.word	0x08009dd1
 8009d4c:	08009dd1 	.word	0x08009dd1
 8009d50:	08009dd1 	.word	0x08009dd1
 8009d54:	08009dd1 	.word	0x08009dd1
 8009d58:	08009dd1 	.word	0x08009dd1
 8009d5c:	08009db9 	.word	0x08009db9
 8009d60:	08009dd1 	.word	0x08009dd1
 8009d64:	08009dd1 	.word	0x08009dd1
 8009d68:	08009dd1 	.word	0x08009dd1
 8009d6c:	08009dd1 	.word	0x08009dd1
 8009d70:	08009dd1 	.word	0x08009dd1
 8009d74:	08009dd1 	.word	0x08009dd1
 8009d78:	08009dd1 	.word	0x08009dd1
 8009d7c:	08009dc1 	.word	0x08009dc1
 8009d80:	08009dd1 	.word	0x08009dd1
 8009d84:	08009dd1 	.word	0x08009dd1
 8009d88:	08009dd1 	.word	0x08009dd1
 8009d8c:	08009dd1 	.word	0x08009dd1
 8009d90:	08009dd1 	.word	0x08009dd1
 8009d94:	08009dd1 	.word	0x08009dd1
 8009d98:	08009dd1 	.word	0x08009dd1
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	2301      	movs	r3, #1
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009da6:	e0d6      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009da8:	2304      	movs	r3, #4
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dae:	e0d2      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009db0:	2308      	movs	r3, #8
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db6:	e0ce      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009db8:	2310      	movs	r3, #16
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dbe:	e0ca      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009dc0:	2320      	movs	r3, #32
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc6:	e0c6      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dce:	e0c2      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009dd0:	2380      	movs	r3, #128	; 0x80
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd6:	e0be      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009dd8:	40011400 	.word	0x40011400
 8009ddc:	58024400 	.word	0x58024400
 8009de0:	40007800 	.word	0x40007800
 8009de4:	40007c00 	.word	0x40007c00
 8009de8:	40011800 	.word	0x40011800
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4aad      	ldr	r2, [pc, #692]	; (800a0a8 <UART_SetConfig+0x900>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d176      	bne.n	8009ee4 <UART_SetConfig+0x73c>
 8009df6:	4bad      	ldr	r3, [pc, #692]	; (800a0ac <UART_SetConfig+0x904>)
 8009df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dfe:	2b28      	cmp	r3, #40	; 0x28
 8009e00:	d86c      	bhi.n	8009edc <UART_SetConfig+0x734>
 8009e02:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <UART_SetConfig+0x660>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009ead 	.word	0x08009ead
 8009e0c:	08009edd 	.word	0x08009edd
 8009e10:	08009edd 	.word	0x08009edd
 8009e14:	08009edd 	.word	0x08009edd
 8009e18:	08009edd 	.word	0x08009edd
 8009e1c:	08009edd 	.word	0x08009edd
 8009e20:	08009edd 	.word	0x08009edd
 8009e24:	08009edd 	.word	0x08009edd
 8009e28:	08009eb5 	.word	0x08009eb5
 8009e2c:	08009edd 	.word	0x08009edd
 8009e30:	08009edd 	.word	0x08009edd
 8009e34:	08009edd 	.word	0x08009edd
 8009e38:	08009edd 	.word	0x08009edd
 8009e3c:	08009edd 	.word	0x08009edd
 8009e40:	08009edd 	.word	0x08009edd
 8009e44:	08009edd 	.word	0x08009edd
 8009e48:	08009ebd 	.word	0x08009ebd
 8009e4c:	08009edd 	.word	0x08009edd
 8009e50:	08009edd 	.word	0x08009edd
 8009e54:	08009edd 	.word	0x08009edd
 8009e58:	08009edd 	.word	0x08009edd
 8009e5c:	08009edd 	.word	0x08009edd
 8009e60:	08009edd 	.word	0x08009edd
 8009e64:	08009edd 	.word	0x08009edd
 8009e68:	08009ec5 	.word	0x08009ec5
 8009e6c:	08009edd 	.word	0x08009edd
 8009e70:	08009edd 	.word	0x08009edd
 8009e74:	08009edd 	.word	0x08009edd
 8009e78:	08009edd 	.word	0x08009edd
 8009e7c:	08009edd 	.word	0x08009edd
 8009e80:	08009edd 	.word	0x08009edd
 8009e84:	08009edd 	.word	0x08009edd
 8009e88:	08009ecd 	.word	0x08009ecd
 8009e8c:	08009edd 	.word	0x08009edd
 8009e90:	08009edd 	.word	0x08009edd
 8009e94:	08009edd 	.word	0x08009edd
 8009e98:	08009edd 	.word	0x08009edd
 8009e9c:	08009edd 	.word	0x08009edd
 8009ea0:	08009edd 	.word	0x08009edd
 8009ea4:	08009edd 	.word	0x08009edd
 8009ea8:	08009ed5 	.word	0x08009ed5
 8009eac:	2301      	movs	r3, #1
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb2:	e050      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009eb4:	2304      	movs	r3, #4
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eba:	e04c      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009ebc:	2308      	movs	r3, #8
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec2:	e048      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eca:	e044      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009ecc:	2320      	movs	r3, #32
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed2:	e040      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009ed4:	2340      	movs	r3, #64	; 0x40
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eda:	e03c      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009edc:	2380      	movs	r3, #128	; 0x80
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee2:	e038      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a71      	ldr	r2, [pc, #452]	; (800a0b0 <UART_SetConfig+0x908>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d130      	bne.n	8009f50 <UART_SetConfig+0x7a8>
 8009eee:	4b6f      	ldr	r3, [pc, #444]	; (800a0ac <UART_SetConfig+0x904>)
 8009ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef2:	f003 0307 	and.w	r3, r3, #7
 8009ef6:	2b05      	cmp	r3, #5
 8009ef8:	d826      	bhi.n	8009f48 <UART_SetConfig+0x7a0>
 8009efa:	a201      	add	r2, pc, #4	; (adr r2, 8009f00 <UART_SetConfig+0x758>)
 8009efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f00:	08009f19 	.word	0x08009f19
 8009f04:	08009f21 	.word	0x08009f21
 8009f08:	08009f29 	.word	0x08009f29
 8009f0c:	08009f31 	.word	0x08009f31
 8009f10:	08009f39 	.word	0x08009f39
 8009f14:	08009f41 	.word	0x08009f41
 8009f18:	2302      	movs	r3, #2
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1e:	e01a      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009f20:	2304      	movs	r3, #4
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f26:	e016      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009f28:	2308      	movs	r3, #8
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2e:	e012      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009f30:	2310      	movs	r3, #16
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f36:	e00e      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009f38:	2320      	movs	r3, #32
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3e:	e00a      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009f40:	2340      	movs	r3, #64	; 0x40
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f46:	e006      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009f48:	2380      	movs	r3, #128	; 0x80
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4e:	e002      	b.n	8009f56 <UART_SetConfig+0x7ae>
 8009f50:	2380      	movs	r3, #128	; 0x80
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a55      	ldr	r2, [pc, #340]	; (800a0b0 <UART_SetConfig+0x908>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	f040 80f8 	bne.w	800a152 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f66:	2b20      	cmp	r3, #32
 8009f68:	dc46      	bgt.n	8009ff8 <UART_SetConfig+0x850>
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	db75      	blt.n	800a05a <UART_SetConfig+0x8b2>
 8009f6e:	3b02      	subs	r3, #2
 8009f70:	2b1e      	cmp	r3, #30
 8009f72:	d872      	bhi.n	800a05a <UART_SetConfig+0x8b2>
 8009f74:	a201      	add	r2, pc, #4	; (adr r2, 8009f7c <UART_SetConfig+0x7d4>)
 8009f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7a:	bf00      	nop
 8009f7c:	08009fff 	.word	0x08009fff
 8009f80:	0800a05b 	.word	0x0800a05b
 8009f84:	0800a007 	.word	0x0800a007
 8009f88:	0800a05b 	.word	0x0800a05b
 8009f8c:	0800a05b 	.word	0x0800a05b
 8009f90:	0800a05b 	.word	0x0800a05b
 8009f94:	0800a017 	.word	0x0800a017
 8009f98:	0800a05b 	.word	0x0800a05b
 8009f9c:	0800a05b 	.word	0x0800a05b
 8009fa0:	0800a05b 	.word	0x0800a05b
 8009fa4:	0800a05b 	.word	0x0800a05b
 8009fa8:	0800a05b 	.word	0x0800a05b
 8009fac:	0800a05b 	.word	0x0800a05b
 8009fb0:	0800a05b 	.word	0x0800a05b
 8009fb4:	0800a027 	.word	0x0800a027
 8009fb8:	0800a05b 	.word	0x0800a05b
 8009fbc:	0800a05b 	.word	0x0800a05b
 8009fc0:	0800a05b 	.word	0x0800a05b
 8009fc4:	0800a05b 	.word	0x0800a05b
 8009fc8:	0800a05b 	.word	0x0800a05b
 8009fcc:	0800a05b 	.word	0x0800a05b
 8009fd0:	0800a05b 	.word	0x0800a05b
 8009fd4:	0800a05b 	.word	0x0800a05b
 8009fd8:	0800a05b 	.word	0x0800a05b
 8009fdc:	0800a05b 	.word	0x0800a05b
 8009fe0:	0800a05b 	.word	0x0800a05b
 8009fe4:	0800a05b 	.word	0x0800a05b
 8009fe8:	0800a05b 	.word	0x0800a05b
 8009fec:	0800a05b 	.word	0x0800a05b
 8009ff0:	0800a05b 	.word	0x0800a05b
 8009ff4:	0800a04d 	.word	0x0800a04d
 8009ff8:	2b40      	cmp	r3, #64	; 0x40
 8009ffa:	d02a      	beq.n	800a052 <UART_SetConfig+0x8aa>
 8009ffc:	e02d      	b.n	800a05a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009ffe:	f7fb fef5 	bl	8005dec <HAL_RCCEx_GetD3PCLK1Freq>
 800a002:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a004:	e02f      	b.n	800a066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fb ff04 	bl	8005e18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a014:	e027      	b.n	800a066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a016:	f107 0318 	add.w	r3, r7, #24
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fc f850 	bl	80060c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a024:	e01f      	b.n	800a066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a026:	4b21      	ldr	r3, [pc, #132]	; (800a0ac <UART_SetConfig+0x904>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 0320 	and.w	r3, r3, #32
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d009      	beq.n	800a046 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a032:	4b1e      	ldr	r3, [pc, #120]	; (800a0ac <UART_SetConfig+0x904>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	08db      	lsrs	r3, r3, #3
 800a038:	f003 0303 	and.w	r3, r3, #3
 800a03c:	4a1d      	ldr	r2, [pc, #116]	; (800a0b4 <UART_SetConfig+0x90c>)
 800a03e:	fa22 f303 	lsr.w	r3, r2, r3
 800a042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a044:	e00f      	b.n	800a066 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a046:	4b1b      	ldr	r3, [pc, #108]	; (800a0b4 <UART_SetConfig+0x90c>)
 800a048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a04a:	e00c      	b.n	800a066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a04c:	4b1a      	ldr	r3, [pc, #104]	; (800a0b8 <UART_SetConfig+0x910>)
 800a04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a050:	e009      	b.n	800a066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a058:	e005      	b.n	800a066 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a05a:	2300      	movs	r3, #0
 800a05c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 81ee 	beq.w	800a44a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a072:	4a12      	ldr	r2, [pc, #72]	; (800a0bc <UART_SetConfig+0x914>)
 800a074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a078:	461a      	mov	r2, r3
 800a07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a07c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a080:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	4613      	mov	r3, r2
 800a088:	005b      	lsls	r3, r3, #1
 800a08a:	4413      	add	r3, r2
 800a08c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a08e:	429a      	cmp	r2, r3
 800a090:	d305      	bcc.n	800a09e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d910      	bls.n	800a0c0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a0a4:	e1d1      	b.n	800a44a <UART_SetConfig+0xca2>
 800a0a6:	bf00      	nop
 800a0a8:	40011c00 	.word	0x40011c00
 800a0ac:	58024400 	.word	0x58024400
 800a0b0:	58000c00 	.word	0x58000c00
 800a0b4:	03d09000 	.word	0x03d09000
 800a0b8:	003d0900 	.word	0x003d0900
 800a0bc:	0800c850 	.word	0x0800c850
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	60bb      	str	r3, [r7, #8]
 800a0c6:	60fa      	str	r2, [r7, #12]
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	4ac0      	ldr	r2, [pc, #768]	; (800a3d0 <UART_SetConfig+0xc28>)
 800a0ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	607a      	str	r2, [r7, #4]
 800a0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0e2:	f7f6 f95d 	bl	80003a0 <__aeabi_uldivmod>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	f04f 0200 	mov.w	r2, #0
 800a0f2:	f04f 0300 	mov.w	r3, #0
 800a0f6:	020b      	lsls	r3, r1, #8
 800a0f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0fc:	0202      	lsls	r2, r0, #8
 800a0fe:	6979      	ldr	r1, [r7, #20]
 800a100:	6849      	ldr	r1, [r1, #4]
 800a102:	0849      	lsrs	r1, r1, #1
 800a104:	2000      	movs	r0, #0
 800a106:	460c      	mov	r4, r1
 800a108:	4605      	mov	r5, r0
 800a10a:	eb12 0804 	adds.w	r8, r2, r4
 800a10e:	eb43 0905 	adc.w	r9, r3, r5
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	469a      	mov	sl, r3
 800a11a:	4693      	mov	fp, r2
 800a11c:	4652      	mov	r2, sl
 800a11e:	465b      	mov	r3, fp
 800a120:	4640      	mov	r0, r8
 800a122:	4649      	mov	r1, r9
 800a124:	f7f6 f93c 	bl	80003a0 <__aeabi_uldivmod>
 800a128:	4602      	mov	r2, r0
 800a12a:	460b      	mov	r3, r1
 800a12c:	4613      	mov	r3, r2
 800a12e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a136:	d308      	bcc.n	800a14a <UART_SetConfig+0x9a2>
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a13e:	d204      	bcs.n	800a14a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a146:	60da      	str	r2, [r3, #12]
 800a148:	e17f      	b.n	800a44a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a150:	e17b      	b.n	800a44a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a15a:	f040 80bd 	bne.w	800a2d8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a15e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a162:	2b20      	cmp	r3, #32
 800a164:	dc48      	bgt.n	800a1f8 <UART_SetConfig+0xa50>
 800a166:	2b00      	cmp	r3, #0
 800a168:	db7b      	blt.n	800a262 <UART_SetConfig+0xaba>
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	d879      	bhi.n	800a262 <UART_SetConfig+0xaba>
 800a16e:	a201      	add	r2, pc, #4	; (adr r2, 800a174 <UART_SetConfig+0x9cc>)
 800a170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a174:	0800a1ff 	.word	0x0800a1ff
 800a178:	0800a207 	.word	0x0800a207
 800a17c:	0800a263 	.word	0x0800a263
 800a180:	0800a263 	.word	0x0800a263
 800a184:	0800a20f 	.word	0x0800a20f
 800a188:	0800a263 	.word	0x0800a263
 800a18c:	0800a263 	.word	0x0800a263
 800a190:	0800a263 	.word	0x0800a263
 800a194:	0800a21f 	.word	0x0800a21f
 800a198:	0800a263 	.word	0x0800a263
 800a19c:	0800a263 	.word	0x0800a263
 800a1a0:	0800a263 	.word	0x0800a263
 800a1a4:	0800a263 	.word	0x0800a263
 800a1a8:	0800a263 	.word	0x0800a263
 800a1ac:	0800a263 	.word	0x0800a263
 800a1b0:	0800a263 	.word	0x0800a263
 800a1b4:	0800a22f 	.word	0x0800a22f
 800a1b8:	0800a263 	.word	0x0800a263
 800a1bc:	0800a263 	.word	0x0800a263
 800a1c0:	0800a263 	.word	0x0800a263
 800a1c4:	0800a263 	.word	0x0800a263
 800a1c8:	0800a263 	.word	0x0800a263
 800a1cc:	0800a263 	.word	0x0800a263
 800a1d0:	0800a263 	.word	0x0800a263
 800a1d4:	0800a263 	.word	0x0800a263
 800a1d8:	0800a263 	.word	0x0800a263
 800a1dc:	0800a263 	.word	0x0800a263
 800a1e0:	0800a263 	.word	0x0800a263
 800a1e4:	0800a263 	.word	0x0800a263
 800a1e8:	0800a263 	.word	0x0800a263
 800a1ec:	0800a263 	.word	0x0800a263
 800a1f0:	0800a263 	.word	0x0800a263
 800a1f4:	0800a255 	.word	0x0800a255
 800a1f8:	2b40      	cmp	r3, #64	; 0x40
 800a1fa:	d02e      	beq.n	800a25a <UART_SetConfig+0xab2>
 800a1fc:	e031      	b.n	800a262 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1fe:	f7fa fa8f 	bl	8004720 <HAL_RCC_GetPCLK1Freq>
 800a202:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a204:	e033      	b.n	800a26e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a206:	f7fa faa1 	bl	800474c <HAL_RCC_GetPCLK2Freq>
 800a20a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a20c:	e02f      	b.n	800a26e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a20e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a212:	4618      	mov	r0, r3
 800a214:	f7fb fe00 	bl	8005e18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a21c:	e027      	b.n	800a26e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a21e:	f107 0318 	add.w	r3, r7, #24
 800a222:	4618      	mov	r0, r3
 800a224:	f7fb ff4c 	bl	80060c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a22c:	e01f      	b.n	800a26e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a22e:	4b69      	ldr	r3, [pc, #420]	; (800a3d4 <UART_SetConfig+0xc2c>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0320 	and.w	r3, r3, #32
 800a236:	2b00      	cmp	r3, #0
 800a238:	d009      	beq.n	800a24e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a23a:	4b66      	ldr	r3, [pc, #408]	; (800a3d4 <UART_SetConfig+0xc2c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	08db      	lsrs	r3, r3, #3
 800a240:	f003 0303 	and.w	r3, r3, #3
 800a244:	4a64      	ldr	r2, [pc, #400]	; (800a3d8 <UART_SetConfig+0xc30>)
 800a246:	fa22 f303 	lsr.w	r3, r2, r3
 800a24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a24c:	e00f      	b.n	800a26e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a24e:	4b62      	ldr	r3, [pc, #392]	; (800a3d8 <UART_SetConfig+0xc30>)
 800a250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a252:	e00c      	b.n	800a26e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a254:	4b61      	ldr	r3, [pc, #388]	; (800a3dc <UART_SetConfig+0xc34>)
 800a256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a258:	e009      	b.n	800a26e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a25a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a260:	e005      	b.n	800a26e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a26c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 80ea 	beq.w	800a44a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27a:	4a55      	ldr	r2, [pc, #340]	; (800a3d0 <UART_SetConfig+0xc28>)
 800a27c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a280:	461a      	mov	r2, r3
 800a282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a284:	fbb3 f3f2 	udiv	r3, r3, r2
 800a288:	005a      	lsls	r2, r3, #1
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	085b      	lsrs	r3, r3, #1
 800a290:	441a      	add	r2, r3
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29e:	2b0f      	cmp	r3, #15
 800a2a0:	d916      	bls.n	800a2d0 <UART_SetConfig+0xb28>
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a8:	d212      	bcs.n	800a2d0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f023 030f 	bic.w	r3, r3, #15
 800a2b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	085b      	lsrs	r3, r3, #1
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	f003 0307 	and.w	r3, r3, #7
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a2cc:	60da      	str	r2, [r3, #12]
 800a2ce:	e0bc      	b.n	800a44a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2d6:	e0b8      	b.n	800a44a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2dc:	2b20      	cmp	r3, #32
 800a2de:	dc4b      	bgt.n	800a378 <UART_SetConfig+0xbd0>
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f2c0 8087 	blt.w	800a3f4 <UART_SetConfig+0xc4c>
 800a2e6:	2b20      	cmp	r3, #32
 800a2e8:	f200 8084 	bhi.w	800a3f4 <UART_SetConfig+0xc4c>
 800a2ec:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <UART_SetConfig+0xb4c>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a37f 	.word	0x0800a37f
 800a2f8:	0800a387 	.word	0x0800a387
 800a2fc:	0800a3f5 	.word	0x0800a3f5
 800a300:	0800a3f5 	.word	0x0800a3f5
 800a304:	0800a38f 	.word	0x0800a38f
 800a308:	0800a3f5 	.word	0x0800a3f5
 800a30c:	0800a3f5 	.word	0x0800a3f5
 800a310:	0800a3f5 	.word	0x0800a3f5
 800a314:	0800a39f 	.word	0x0800a39f
 800a318:	0800a3f5 	.word	0x0800a3f5
 800a31c:	0800a3f5 	.word	0x0800a3f5
 800a320:	0800a3f5 	.word	0x0800a3f5
 800a324:	0800a3f5 	.word	0x0800a3f5
 800a328:	0800a3f5 	.word	0x0800a3f5
 800a32c:	0800a3f5 	.word	0x0800a3f5
 800a330:	0800a3f5 	.word	0x0800a3f5
 800a334:	0800a3af 	.word	0x0800a3af
 800a338:	0800a3f5 	.word	0x0800a3f5
 800a33c:	0800a3f5 	.word	0x0800a3f5
 800a340:	0800a3f5 	.word	0x0800a3f5
 800a344:	0800a3f5 	.word	0x0800a3f5
 800a348:	0800a3f5 	.word	0x0800a3f5
 800a34c:	0800a3f5 	.word	0x0800a3f5
 800a350:	0800a3f5 	.word	0x0800a3f5
 800a354:	0800a3f5 	.word	0x0800a3f5
 800a358:	0800a3f5 	.word	0x0800a3f5
 800a35c:	0800a3f5 	.word	0x0800a3f5
 800a360:	0800a3f5 	.word	0x0800a3f5
 800a364:	0800a3f5 	.word	0x0800a3f5
 800a368:	0800a3f5 	.word	0x0800a3f5
 800a36c:	0800a3f5 	.word	0x0800a3f5
 800a370:	0800a3f5 	.word	0x0800a3f5
 800a374:	0800a3e7 	.word	0x0800a3e7
 800a378:	2b40      	cmp	r3, #64	; 0x40
 800a37a:	d037      	beq.n	800a3ec <UART_SetConfig+0xc44>
 800a37c:	e03a      	b.n	800a3f4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a37e:	f7fa f9cf 	bl	8004720 <HAL_RCC_GetPCLK1Freq>
 800a382:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a384:	e03c      	b.n	800a400 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a386:	f7fa f9e1 	bl	800474c <HAL_RCC_GetPCLK2Freq>
 800a38a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a38c:	e038      	b.n	800a400 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a38e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a392:	4618      	mov	r0, r3
 800a394:	f7fb fd40 	bl	8005e18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a39c:	e030      	b.n	800a400 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a39e:	f107 0318 	add.w	r3, r7, #24
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fb fe8c 	bl	80060c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3ac:	e028      	b.n	800a400 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3ae:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <UART_SetConfig+0xc2c>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0320 	and.w	r3, r3, #32
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d012      	beq.n	800a3e0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3ba:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <UART_SetConfig+0xc2c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	08db      	lsrs	r3, r3, #3
 800a3c0:	f003 0303 	and.w	r3, r3, #3
 800a3c4:	4a04      	ldr	r2, [pc, #16]	; (800a3d8 <UART_SetConfig+0xc30>)
 800a3c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3cc:	e018      	b.n	800a400 <UART_SetConfig+0xc58>
 800a3ce:	bf00      	nop
 800a3d0:	0800c850 	.word	0x0800c850
 800a3d4:	58024400 	.word	0x58024400
 800a3d8:	03d09000 	.word	0x03d09000
 800a3dc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a3e0:	4b24      	ldr	r3, [pc, #144]	; (800a474 <UART_SetConfig+0xccc>)
 800a3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3e4:	e00c      	b.n	800a400 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3e6:	4b24      	ldr	r3, [pc, #144]	; (800a478 <UART_SetConfig+0xcd0>)
 800a3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3ea:	e009      	b.n	800a400 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3f2:	e005      	b.n	800a400 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a3fe:	bf00      	nop
    }

    if (pclk != 0U)
 800a400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a402:	2b00      	cmp	r3, #0
 800a404:	d021      	beq.n	800a44a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	4a1c      	ldr	r2, [pc, #112]	; (800a47c <UART_SetConfig+0xcd4>)
 800a40c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a410:	461a      	mov	r2, r3
 800a412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a414:	fbb3 f2f2 	udiv	r2, r3, r2
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	085b      	lsrs	r3, r3, #1
 800a41e:	441a      	add	r2, r3
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	fbb2 f3f3 	udiv	r3, r2, r3
 800a428:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42c:	2b0f      	cmp	r3, #15
 800a42e:	d909      	bls.n	800a444 <UART_SetConfig+0xc9c>
 800a430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a436:	d205      	bcs.n	800a444 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	60da      	str	r2, [r3, #12]
 800a442:	e002      	b.n	800a44a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2201      	movs	r2, #1
 800a456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2200      	movs	r2, #0
 800a45e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2200      	movs	r2, #0
 800a464:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a466:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3748      	adds	r7, #72	; 0x48
 800a46e:	46bd      	mov	sp, r7
 800a470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a474:	03d09000 	.word	0x03d09000
 800a478:	003d0900 	.word	0x003d0900
 800a47c:	0800c850 	.word	0x0800c850

0800a480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00a      	beq.n	800a4aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ae:	f003 0302 	and.w	r3, r3, #2
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00a      	beq.n	800a4cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d0:	f003 0304 	and.w	r3, r3, #4
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00a      	beq.n	800a4ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	430a      	orrs	r2, r1
 800a4ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f2:	f003 0308 	and.w	r3, r3, #8
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00a      	beq.n	800a510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	430a      	orrs	r2, r1
 800a50e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a514:	f003 0310 	and.w	r3, r3, #16
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00a      	beq.n	800a532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	430a      	orrs	r2, r1
 800a530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a536:	f003 0320 	and.w	r3, r3, #32
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00a      	beq.n	800a554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	430a      	orrs	r2, r1
 800a552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d01a      	beq.n	800a596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	430a      	orrs	r2, r1
 800a574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a57a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a57e:	d10a      	bne.n	800a596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	430a      	orrs	r2, r1
 800a594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00a      	beq.n	800a5b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	605a      	str	r2, [r3, #4]
  }
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af02      	add	r7, sp, #8
 800a5ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5d4:	f7f7 f87a 	bl	80016cc <HAL_GetTick>
 800a5d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 0308 	and.w	r3, r3, #8
 800a5e4:	2b08      	cmp	r3, #8
 800a5e6:	d10e      	bne.n	800a606 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f82f 	bl	800a65a <UART_WaitOnFlagUntilTimeout>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e025      	b.n	800a652 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b04      	cmp	r3, #4
 800a612:	d10e      	bne.n	800a632 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f819 	bl	800a65a <UART_WaitOnFlagUntilTimeout>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e00f      	b.n	800a652 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2220      	movs	r2, #32
 800a636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2220      	movs	r2, #32
 800a63e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b09c      	sub	sp, #112	; 0x70
 800a65e:	af00      	add	r7, sp, #0
 800a660:	60f8      	str	r0, [r7, #12]
 800a662:	60b9      	str	r1, [r7, #8]
 800a664:	603b      	str	r3, [r7, #0]
 800a666:	4613      	mov	r3, r2
 800a668:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a66a:	e0a9      	b.n	800a7c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a66c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a672:	f000 80a5 	beq.w	800a7c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a676:	f7f7 f829 	bl	80016cc <HAL_GetTick>
 800a67a:	4602      	mov	r2, r0
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	1ad3      	subs	r3, r2, r3
 800a680:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a682:	429a      	cmp	r2, r3
 800a684:	d302      	bcc.n	800a68c <UART_WaitOnFlagUntilTimeout+0x32>
 800a686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d140      	bne.n	800a70e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a694:	e853 3f00 	ldrex	r3, [r3]
 800a698:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a69a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a69c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6a0:	667b      	str	r3, [r7, #100]	; 0x64
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6b2:	e841 2300 	strex	r3, r2, [r1]
 800a6b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a6b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1e6      	bne.n	800a68c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3308      	adds	r3, #8
 800a6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6c8:	e853 3f00 	ldrex	r3, [r3]
 800a6cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	f023 0301 	bic.w	r3, r3, #1
 800a6d4:	663b      	str	r3, [r7, #96]	; 0x60
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3308      	adds	r3, #8
 800a6dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6de:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1e5      	bne.n	800a6be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2220      	movs	r2, #32
 800a6f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a70a:	2303      	movs	r3, #3
 800a70c:	e069      	b.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d051      	beq.n	800a7c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a72a:	d149      	bne.n	800a7c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a734:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73e:	e853 3f00 	ldrex	r3, [r3]
 800a742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a746:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a74a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	461a      	mov	r2, r3
 800a752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a754:	637b      	str	r3, [r7, #52]	; 0x34
 800a756:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a758:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a75a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a75c:	e841 2300 	strex	r3, r2, [r1]
 800a760:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1e6      	bne.n	800a736 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	3308      	adds	r3, #8
 800a76e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	e853 3f00 	ldrex	r3, [r3]
 800a776:	613b      	str	r3, [r7, #16]
   return(result);
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f023 0301 	bic.w	r3, r3, #1
 800a77e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3308      	adds	r3, #8
 800a786:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a788:	623a      	str	r2, [r7, #32]
 800a78a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78c:	69f9      	ldr	r1, [r7, #28]
 800a78e:	6a3a      	ldr	r2, [r7, #32]
 800a790:	e841 2300 	strex	r3, r2, [r1]
 800a794:	61bb      	str	r3, [r7, #24]
   return(result);
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e5      	bne.n	800a768 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2220      	movs	r2, #32
 800a7a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2220      	movs	r2, #32
 800a7a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2220      	movs	r2, #32
 800a7b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e010      	b.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	69da      	ldr	r2, [r3, #28]
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	bf0c      	ite	eq
 800a7d0:	2301      	moveq	r3, #1
 800a7d2:	2300      	movne	r3, #0
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	79fb      	ldrb	r3, [r7, #7]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	f43f af46 	beq.w	800a66c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3770      	adds	r7, #112	; 0x70
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d101      	bne.n	800a800 <HAL_UARTEx_DisableFifoMode+0x16>
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	e027      	b.n	800a850 <HAL_UARTEx_DisableFifoMode+0x66>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2224      	movs	r2, #36	; 0x24
 800a80c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f022 0201 	bic.w	r2, r2, #1
 800a826:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a82e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2220      	movs	r2, #32
 800a842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d101      	bne.n	800a874 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a870:	2302      	movs	r3, #2
 800a872:	e02d      	b.n	800a8d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2224      	movs	r2, #36	; 0x24
 800a880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f022 0201 	bic.w	r2, r2, #1
 800a89a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f84f 	bl	800a954 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d101      	bne.n	800a8f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	e02d      	b.n	800a94c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2224      	movs	r2, #36	; 0x24
 800a8fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f022 0201 	bic.w	r2, r2, #1
 800a916:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	430a      	orrs	r2, r1
 800a92a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f811 	bl	800a954 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2220      	movs	r2, #32
 800a93e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a960:	2b00      	cmp	r3, #0
 800a962:	d108      	bne.n	800a976 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a974:	e031      	b.n	800a9da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a976:	2310      	movs	r3, #16
 800a978:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a97a:	2310      	movs	r3, #16
 800a97c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	0e5b      	lsrs	r3, r3, #25
 800a986:	b2db      	uxtb	r3, r3
 800a988:	f003 0307 	and.w	r3, r3, #7
 800a98c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	0f5b      	lsrs	r3, r3, #29
 800a996:	b2db      	uxtb	r3, r3
 800a998:	f003 0307 	and.w	r3, r3, #7
 800a99c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a99e:	7bbb      	ldrb	r3, [r7, #14]
 800a9a0:	7b3a      	ldrb	r2, [r7, #12]
 800a9a2:	4911      	ldr	r1, [pc, #68]	; (800a9e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a9a4:	5c8a      	ldrb	r2, [r1, r2]
 800a9a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9aa:	7b3a      	ldrb	r2, [r7, #12]
 800a9ac:	490f      	ldr	r1, [pc, #60]	; (800a9ec <UARTEx_SetNbDataToProcess+0x98>)
 800a9ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	7b7a      	ldrb	r2, [r7, #13]
 800a9c0:	4909      	ldr	r1, [pc, #36]	; (800a9e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a9c2:	5c8a      	ldrb	r2, [r1, r2]
 800a9c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9c8:	7b7a      	ldrb	r2, [r7, #13]
 800a9ca:	4908      	ldr	r1, [pc, #32]	; (800a9ec <UARTEx_SetNbDataToProcess+0x98>)
 800a9cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9da:	bf00      	nop
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	0800c868 	.word	0x0800c868
 800a9ec:	0800c870 	.word	0x0800c870

0800a9f0 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e016      	b.n	800aa30 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7f6 fc92 	bl	800132c <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68da      	ldr	r2, [r3, #12]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aa14:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	691a      	ldr	r2, [r3, #16]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	ea42 0103 	orr.w	r1, r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	689a      	ldr	r2, [r3, #8]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	68d2      	ldr	r2, [r2, #12]
 800aa48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa58:	b084      	sub	sp, #16
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	f107 001c 	add.w	r0, r7, #28
 800aa66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800aa6e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800aa70:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800aa72:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800aa76:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800aa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800aa7a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aa7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800aa7e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685a      	ldr	r2, [r3, #4]
 800aa8a:	4b07      	ldr	r3, [pc, #28]	; (800aaa8 <SDMMC_Init+0x50>)
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	431a      	orrs	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3714      	adds	r7, #20
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	b004      	add	sp, #16
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	ffc02c00 	.word	0xffc02c00

0800aaac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	370c      	adds	r7, #12
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800aac6:	b480      	push	{r7}
 800aac8:	b083      	sub	sp, #12
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f043 0203 	orr.w	r2, r3, #3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b083      	sub	sp, #12
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0303 	and.w	r3, r3, #3
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
	...

0800ab28 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ab46:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ab4c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ab52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	68da      	ldr	r2, [r3, #12]
 800ab5e:	4b06      	ldr	r3, [pc, #24]	; (800ab78 <SDMMC_SendCommand+0x50>)
 800ab60:	4013      	ands	r3, r2
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	431a      	orrs	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr
 800ab78:	fffee0c0 	.word	0xfffee0c0

0800ab7c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	b2db      	uxtb	r3, r3
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b085      	sub	sp, #20
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3314      	adds	r3, #20
 800aba4:	461a      	mov	r2, r3
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	4413      	add	r3, r2
 800abaa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800abe2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800abe8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800abee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	431a      	orrs	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac06:	2300      	movs	r3, #0

}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b088      	sub	sp, #32
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac22:	2310      	movs	r3, #16
 800ac24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac36:	f107 0308 	add.w	r3, r7, #8
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff ff73 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac42:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac46:	2110      	movs	r1, #16
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 fa5f 	bl	800b10c <SDMMC_GetCmdResp1>
 800ac4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac50:	69fb      	ldr	r3, [r7, #28]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3720      	adds	r7, #32
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b088      	sub	sp, #32
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac68:	2311      	movs	r3, #17
 800ac6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac72:	2300      	movs	r3, #0
 800ac74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac7c:	f107 0308 	add.w	r3, r7, #8
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7ff ff50 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac88:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac8c:	2111      	movs	r1, #17
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fa3c 	bl	800b10c <SDMMC_GetCmdResp1>
 800ac94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac96:	69fb      	ldr	r3, [r7, #28]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3720      	adds	r7, #32
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b088      	sub	sp, #32
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800acae:	2312      	movs	r3, #18
 800acb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acb8:	2300      	movs	r3, #0
 800acba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acc2:	f107 0308 	add.w	r3, r7, #8
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff ff2d 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800acce:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd2:	2112      	movs	r1, #18
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fa19 	bl	800b10c <SDMMC_GetCmdResp1>
 800acda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acdc:	69fb      	ldr	r3, [r7, #28]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3720      	adds	r7, #32
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b088      	sub	sp, #32
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800acf4:	2318      	movs	r3, #24
 800acf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acfe:	2300      	movs	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad08:	f107 0308 	add.w	r3, r7, #8
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7ff ff0a 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad18:	2118      	movs	r1, #24
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 f9f6 	bl	800b10c <SDMMC_GetCmdResp1>
 800ad20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad22:	69fb      	ldr	r3, [r7, #28]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3720      	adds	r7, #32
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad3a:	2319      	movs	r3, #25
 800ad3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad44:	2300      	movs	r3, #0
 800ad46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad4e:	f107 0308 	add.w	r3, r7, #8
 800ad52:	4619      	mov	r1, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff fee7 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad5e:	2119      	movs	r1, #25
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f9d3 	bl	800b10c <SDMMC_GetCmdResp1>
 800ad66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad68:	69fb      	ldr	r3, [r7, #28]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3720      	adds	r7, #32
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
	...

0800ad74 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad80:	230c      	movs	r3, #12
 800ad82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad92:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adac:	f107 0308 	add.w	r3, r7, #8
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7ff feb8 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800adb8:	4a0b      	ldr	r2, [pc, #44]	; (800ade8 <SDMMC_CmdStopTransfer+0x74>)
 800adba:	210c      	movs	r1, #12
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f9a5 	bl	800b10c <SDMMC_GetCmdResp1>
 800adc2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800add6:	d101      	bne.n	800addc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800add8:	2300      	movs	r3, #0
 800adda:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800addc:	69fb      	ldr	r3, [r7, #28]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3720      	adds	r7, #32
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	05f5e100 	.word	0x05f5e100

0800adec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b088      	sub	sp, #32
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800adfa:	2307      	movs	r3, #7
 800adfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae04:	2300      	movs	r3, #0
 800ae06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae0e:	f107 0308 	add.w	r3, r7, #8
 800ae12:	4619      	mov	r1, r3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7ff fe87 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae1e:	2107      	movs	r1, #7
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f973 	bl	800b10c <SDMMC_GetCmdResp1>
 800ae26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae28:	69fb      	ldr	r3, [r7, #28]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3720      	adds	r7, #32
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b088      	sub	sp, #32
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae42:	2300      	movs	r3, #0
 800ae44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae46:	2300      	movs	r3, #0
 800ae48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae50:	f107 0308 	add.w	r3, r7, #8
 800ae54:	4619      	mov	r1, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7ff fe66 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fb97 	bl	800b590 <SDMMC_GetCmdError>
 800ae62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae64:	69fb      	ldr	r3, [r7, #28]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3720      	adds	r7, #32
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b088      	sub	sp, #32
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ae76:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ae7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ae7c:	2308      	movs	r3, #8
 800ae7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae86:	2300      	movs	r3, #0
 800ae88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae90:	f107 0308 	add.w	r3, r7, #8
 800ae94:	4619      	mov	r1, r3
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f7ff fe46 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fb29 	bl	800b4f4 <SDMMC_GetCmdResp7>
 800aea2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aea4:	69fb      	ldr	r3, [r7, #28]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3720      	adds	r7, #32
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b088      	sub	sp, #32
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aebc:	2337      	movs	r3, #55	; 0x37
 800aebe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aec4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aec6:	2300      	movs	r3, #0
 800aec8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aece:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aed0:	f107 0308 	add.w	r3, r7, #8
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7ff fe26 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aedc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aee0:	2137      	movs	r1, #55	; 0x37
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f912 	bl	800b10c <SDMMC_GetCmdResp1>
 800aee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeea:	69fb      	ldr	r3, [r7, #28]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3720      	adds	r7, #32
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b088      	sub	sp, #32
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af02:	2329      	movs	r3, #41	; 0x29
 800af04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af0c:	2300      	movs	r3, #0
 800af0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af16:	f107 0308 	add.w	r3, r7, #8
 800af1a:	4619      	mov	r1, r3
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff fe03 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fa2e 	bl	800b384 <SDMMC_GetCmdResp3>
 800af28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af2a:	69fb      	ldr	r3, [r7, #28]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3720      	adds	r7, #32
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b088      	sub	sp, #32
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af42:	2306      	movs	r3, #6
 800af44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af4c:	2300      	movs	r3, #0
 800af4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af56:	f107 0308 	add.w	r3, r7, #8
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff fde3 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af62:	f241 3288 	movw	r2, #5000	; 0x1388
 800af66:	2106      	movs	r1, #6
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 f8cf 	bl	800b10c <SDMMC_GetCmdResp1>
 800af6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af70:	69fb      	ldr	r3, [r7, #28]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3720      	adds	r7, #32
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b088      	sub	sp, #32
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800af82:	2300      	movs	r3, #0
 800af84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800af86:	2333      	movs	r3, #51	; 0x33
 800af88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af90:	2300      	movs	r3, #0
 800af92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af9a:	f107 0308 	add.w	r3, r7, #8
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7ff fdc1 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800afa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800afaa:	2133      	movs	r1, #51	; 0x33
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f8ad 	bl	800b10c <SDMMC_GetCmdResp1>
 800afb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afb4:	69fb      	ldr	r3, [r7, #28]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3720      	adds	r7, #32
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b088      	sub	sp, #32
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800afca:	2302      	movs	r3, #2
 800afcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800afce:	f44f 7340 	mov.w	r3, #768	; 0x300
 800afd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afd4:	2300      	movs	r3, #0
 800afd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afde:	f107 0308 	add.w	r3, r7, #8
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff fd9f 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f980 	bl	800b2f0 <SDMMC_GetCmdResp2>
 800aff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aff2:	69fb      	ldr	r3, [r7, #28]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3720      	adds	r7, #32
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b088      	sub	sp, #32
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b00a:	2309      	movs	r3, #9
 800b00c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b00e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b014:	2300      	movs	r3, #0
 800b016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b01c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b01e:	f107 0308 	add.w	r3, r7, #8
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff fd7f 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f960 	bl	800b2f0 <SDMMC_GetCmdResp2>
 800b030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b032:	69fb      	ldr	r3, [r7, #28]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3720      	adds	r7, #32
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b088      	sub	sp, #32
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b046:	2300      	movs	r3, #0
 800b048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b04a:	2303      	movs	r3, #3
 800b04c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b04e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b054:	2300      	movs	r3, #0
 800b056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b05c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b05e:	f107 0308 	add.w	r3, r7, #8
 800b062:	4619      	mov	r1, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7ff fd5f 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b06a:	683a      	ldr	r2, [r7, #0]
 800b06c:	2103      	movs	r1, #3
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f9c8 	bl	800b404 <SDMMC_GetCmdResp6>
 800b074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b076:	69fb      	ldr	r3, [r7, #28]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3720      	adds	r7, #32
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b088      	sub	sp, #32
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b08e:	230d      	movs	r3, #13
 800b090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b092:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b098:	2300      	movs	r3, #0
 800b09a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b09c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0a2:	f107 0308 	add.w	r3, r7, #8
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff fd3d 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b0ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0b2:	210d      	movs	r1, #13
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f829 	bl	800b10c <SDMMC_GetCmdResp1>
 800b0ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0bc:	69fb      	ldr	r3, [r7, #28]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3720      	adds	r7, #32
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b088      	sub	sp, #32
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b0d2:	230d      	movs	r3, #13
 800b0d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0e6:	f107 0308 	add.w	r3, r7, #8
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f7ff fd1b 	bl	800ab28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b0f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0f6:	210d      	movs	r1, #13
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f807 	bl	800b10c <SDMMC_GetCmdResp1>
 800b0fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b100:	69fb      	ldr	r3, [r7, #28]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3720      	adds	r7, #32
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b088      	sub	sp, #32
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	460b      	mov	r3, r1
 800b116:	607a      	str	r2, [r7, #4]
 800b118:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b11a:	4b70      	ldr	r3, [pc, #448]	; (800b2dc <SDMMC_GetCmdResp1+0x1d0>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a70      	ldr	r2, [pc, #448]	; (800b2e0 <SDMMC_GetCmdResp1+0x1d4>)
 800b120:	fba2 2303 	umull	r2, r3, r2, r3
 800b124:	0a5a      	lsrs	r2, r3, #9
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	fb02 f303 	mul.w	r3, r2, r3
 800b12c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	1e5a      	subs	r2, r3, #1
 800b132:	61fa      	str	r2, [r7, #28]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d102      	bne.n	800b13e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b138:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b13c:	e0c9      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b142:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b144:	69ba      	ldr	r2, [r7, #24]
 800b146:	4b67      	ldr	r3, [pc, #412]	; (800b2e4 <SDMMC_GetCmdResp1+0x1d8>)
 800b148:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d0ef      	beq.n	800b12e <SDMMC_GetCmdResp1+0x22>
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1ea      	bne.n	800b12e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15c:	f003 0304 	and.w	r3, r3, #4
 800b160:	2b00      	cmp	r3, #0
 800b162:	d004      	beq.n	800b16e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2204      	movs	r2, #4
 800b168:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b16a:	2304      	movs	r3, #4
 800b16c:	e0b1      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b172:	f003 0301 	and.w	r3, r3, #1
 800b176:	2b00      	cmp	r3, #0
 800b178:	d004      	beq.n	800b184 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2201      	movs	r2, #1
 800b17e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b180:	2301      	movs	r3, #1
 800b182:	e0a6      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	4a58      	ldr	r2, [pc, #352]	; (800b2e8 <SDMMC_GetCmdResp1+0x1dc>)
 800b188:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f7ff fcf6 	bl	800ab7c <SDMMC_GetCommandResponse>
 800b190:	4603      	mov	r3, r0
 800b192:	461a      	mov	r2, r3
 800b194:	7afb      	ldrb	r3, [r7, #11]
 800b196:	4293      	cmp	r3, r2
 800b198:	d001      	beq.n	800b19e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b19a:	2301      	movs	r3, #1
 800b19c:	e099      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b19e:	2100      	movs	r1, #0
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f7ff fcf8 	bl	800ab96 <SDMMC_GetResponse>
 800b1a6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	4b50      	ldr	r3, [pc, #320]	; (800b2ec <SDMMC_GetCmdResp1+0x1e0>)
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	e08d      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	da02      	bge.n	800b1c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b1bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1c0:	e087      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b1cc:	2340      	movs	r3, #64	; 0x40
 800b1ce:	e080      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d001      	beq.n	800b1de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b1da:	2380      	movs	r3, #128	; 0x80
 800b1dc:	e079      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d002      	beq.n	800b1ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b1e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1ec:	e071      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d002      	beq.n	800b1fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b1f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1fc:	e069      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b20c:	e061      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d002      	beq.n	800b21e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b218:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b21c:	e059      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b22c:	e051      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b23c:	e049      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b244:	2b00      	cmp	r3, #0
 800b246:	d002      	beq.n	800b24e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b248:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b24c:	e041      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b25c:	e039      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d002      	beq.n	800b26e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b26c:	e031      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b278:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b27c:	e029      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b288:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b28c:	e021      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b298:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b29c:	e019      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b2a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b2ac:	e011      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b2b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b2bc:	e009      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	f003 0308 	and.w	r3, r3, #8
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b2c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b2cc:	e001      	b.n	800b2d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3720      	adds	r7, #32
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	24000004 	.word	0x24000004
 800b2e0:	10624dd3 	.word	0x10624dd3
 800b2e4:	00200045 	.word	0x00200045
 800b2e8:	002000c5 	.word	0x002000c5
 800b2ec:	fdffe008 	.word	0xfdffe008

0800b2f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b2f8:	4b1f      	ldr	r3, [pc, #124]	; (800b378 <SDMMC_GetCmdResp2+0x88>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a1f      	ldr	r2, [pc, #124]	; (800b37c <SDMMC_GetCmdResp2+0x8c>)
 800b2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b302:	0a5b      	lsrs	r3, r3, #9
 800b304:	f241 3288 	movw	r2, #5000	; 0x1388
 800b308:	fb02 f303 	mul.w	r3, r2, r3
 800b30c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	1e5a      	subs	r2, r3, #1
 800b312:	60fa      	str	r2, [r7, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d102      	bne.n	800b31e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b31c:	e026      	b.n	800b36c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b322:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d0ef      	beq.n	800b30e <SDMMC_GetCmdResp2+0x1e>
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1ea      	bne.n	800b30e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b33c:	f003 0304 	and.w	r3, r3, #4
 800b340:	2b00      	cmp	r3, #0
 800b342:	d004      	beq.n	800b34e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2204      	movs	r2, #4
 800b348:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b34a:	2304      	movs	r3, #4
 800b34c:	e00e      	b.n	800b36c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	2b00      	cmp	r3, #0
 800b358:	d004      	beq.n	800b364 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2201      	movs	r2, #1
 800b35e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b360:	2301      	movs	r3, #1
 800b362:	e003      	b.n	800b36c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a06      	ldr	r2, [pc, #24]	; (800b380 <SDMMC_GetCmdResp2+0x90>)
 800b368:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	24000004 	.word	0x24000004
 800b37c:	10624dd3 	.word	0x10624dd3
 800b380:	002000c5 	.word	0x002000c5

0800b384 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b38c:	4b1a      	ldr	r3, [pc, #104]	; (800b3f8 <SDMMC_GetCmdResp3+0x74>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a1a      	ldr	r2, [pc, #104]	; (800b3fc <SDMMC_GetCmdResp3+0x78>)
 800b392:	fba2 2303 	umull	r2, r3, r2, r3
 800b396:	0a5b      	lsrs	r3, r3, #9
 800b398:	f241 3288 	movw	r2, #5000	; 0x1388
 800b39c:	fb02 f303 	mul.w	r3, r2, r3
 800b3a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	1e5a      	subs	r2, r3, #1
 800b3a6:	60fa      	str	r2, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d102      	bne.n	800b3b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3b0:	e01b      	b.n	800b3ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d0ef      	beq.n	800b3a2 <SDMMC_GetCmdResp3+0x1e>
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1ea      	bne.n	800b3a2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d0:	f003 0304 	and.w	r3, r3, #4
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d004      	beq.n	800b3e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2204      	movs	r2, #4
 800b3dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3de:	2304      	movs	r3, #4
 800b3e0:	e003      	b.n	800b3ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a06      	ldr	r2, [pc, #24]	; (800b400 <SDMMC_GetCmdResp3+0x7c>)
 800b3e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	24000004 	.word	0x24000004
 800b3fc:	10624dd3 	.word	0x10624dd3
 800b400:	002000c5 	.word	0x002000c5

0800b404 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b088      	sub	sp, #32
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	460b      	mov	r3, r1
 800b40e:	607a      	str	r2, [r7, #4]
 800b410:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b412:	4b35      	ldr	r3, [pc, #212]	; (800b4e8 <SDMMC_GetCmdResp6+0xe4>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a35      	ldr	r2, [pc, #212]	; (800b4ec <SDMMC_GetCmdResp6+0xe8>)
 800b418:	fba2 2303 	umull	r2, r3, r2, r3
 800b41c:	0a5b      	lsrs	r3, r3, #9
 800b41e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b422:	fb02 f303 	mul.w	r3, r2, r3
 800b426:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	1e5a      	subs	r2, r3, #1
 800b42c:	61fa      	str	r2, [r7, #28]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d102      	bne.n	800b438 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b432:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b436:	e052      	b.n	800b4de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b43c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b444:	2b00      	cmp	r3, #0
 800b446:	d0ef      	beq.n	800b428 <SDMMC_GetCmdResp6+0x24>
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1ea      	bne.n	800b428 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b456:	f003 0304 	and.w	r3, r3, #4
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d004      	beq.n	800b468 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2204      	movs	r2, #4
 800b462:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b464:	2304      	movs	r3, #4
 800b466:	e03a      	b.n	800b4de <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b46c:	f003 0301 	and.w	r3, r3, #1
 800b470:	2b00      	cmp	r3, #0
 800b472:	d004      	beq.n	800b47e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2201      	movs	r2, #1
 800b478:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e02f      	b.n	800b4de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f7ff fb7c 	bl	800ab7c <SDMMC_GetCommandResponse>
 800b484:	4603      	mov	r3, r0
 800b486:	461a      	mov	r2, r3
 800b488:	7afb      	ldrb	r3, [r7, #11]
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d001      	beq.n	800b492 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b48e:	2301      	movs	r3, #1
 800b490:	e025      	b.n	800b4de <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	4a16      	ldr	r2, [pc, #88]	; (800b4f0 <SDMMC_GetCmdResp6+0xec>)
 800b496:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b498:	2100      	movs	r1, #0
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f7ff fb7b 	bl	800ab96 <SDMMC_GetResponse>
 800b4a0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d106      	bne.n	800b4ba <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	0c1b      	lsrs	r3, r3, #16
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	e011      	b.n	800b4de <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b4c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4c8:	e009      	b.n	800b4de <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b4d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4d8:	e001      	b.n	800b4de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b4da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3720      	adds	r7, #32
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	24000004 	.word	0x24000004
 800b4ec:	10624dd3 	.word	0x10624dd3
 800b4f0:	002000c5 	.word	0x002000c5

0800b4f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b4fc:	4b22      	ldr	r3, [pc, #136]	; (800b588 <SDMMC_GetCmdResp7+0x94>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a22      	ldr	r2, [pc, #136]	; (800b58c <SDMMC_GetCmdResp7+0x98>)
 800b502:	fba2 2303 	umull	r2, r3, r2, r3
 800b506:	0a5b      	lsrs	r3, r3, #9
 800b508:	f241 3288 	movw	r2, #5000	; 0x1388
 800b50c:	fb02 f303 	mul.w	r3, r2, r3
 800b510:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	1e5a      	subs	r2, r3, #1
 800b516:	60fa      	str	r2, [r7, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d102      	bne.n	800b522 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b51c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b520:	e02c      	b.n	800b57c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b526:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0ef      	beq.n	800b512 <SDMMC_GetCmdResp7+0x1e>
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1ea      	bne.n	800b512 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b00      	cmp	r3, #0
 800b546:	d004      	beq.n	800b552 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2204      	movs	r2, #4
 800b54c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b54e:	2304      	movs	r3, #4
 800b550:	e014      	b.n	800b57c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d004      	beq.n	800b568 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b564:	2301      	movs	r3, #1
 800b566:	e009      	b.n	800b57c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2240      	movs	r2, #64	; 0x40
 800b578:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b57a:	2300      	movs	r3, #0

}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr
 800b588:	24000004 	.word	0x24000004
 800b58c:	10624dd3 	.word	0x10624dd3

0800b590 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b598:	4b11      	ldr	r3, [pc, #68]	; (800b5e0 <SDMMC_GetCmdError+0x50>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a11      	ldr	r2, [pc, #68]	; (800b5e4 <SDMMC_GetCmdError+0x54>)
 800b59e:	fba2 2303 	umull	r2, r3, r2, r3
 800b5a2:	0a5b      	lsrs	r3, r3, #9
 800b5a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5a8:	fb02 f303 	mul.w	r3, r2, r3
 800b5ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	1e5a      	subs	r2, r3, #1
 800b5b2:	60fa      	str	r2, [r7, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d102      	bne.n	800b5be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5bc:	e009      	b.n	800b5d2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d0f1      	beq.n	800b5ae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a06      	ldr	r2, [pc, #24]	; (800b5e8 <SDMMC_GetCmdError+0x58>)
 800b5ce:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	24000004 	.word	0x24000004
 800b5e4:	10624dd3 	.word	0x10624dd3
 800b5e8:	002000c5 	.word	0x002000c5

0800b5ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b5f0:	4904      	ldr	r1, [pc, #16]	; (800b604 <MX_FATFS_Init+0x18>)
 800b5f2:	4805      	ldr	r0, [pc, #20]	; (800b608 <MX_FATFS_Init+0x1c>)
 800b5f4:	f000 fa64 	bl	800bac0 <FATFS_LinkDriver>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	4b03      	ldr	r3, [pc, #12]	; (800b60c <MX_FATFS_Init+0x20>)
 800b5fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b600:	bf00      	nop
 800b602:	bd80      	pop	{r7, pc}
 800b604:	24000468 	.word	0x24000468
 800b608:	0800c878 	.word	0x0800c878
 800b60c:	24000464 	.word	0x24000464

0800b610 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b61a:	f000 f877 	bl	800b70c <BSP_SD_IsDetected>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b01      	cmp	r3, #1
 800b622:	d001      	beq.n	800b628 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b624:	2302      	movs	r3, #2
 800b626:	e005      	b.n	800b634 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b628:	4804      	ldr	r0, [pc, #16]	; (800b63c <BSP_SD_Init+0x2c>)
 800b62a:	f7fb f953 	bl	80068d4 <HAL_SD_Init>
 800b62e:	4603      	mov	r3, r0
 800b630:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b632:	79fb      	ldrb	r3, [r7, #7]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	24000094 	.word	0x24000094

0800b640 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b64c:	2300      	movs	r3, #0
 800b64e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	68f9      	ldr	r1, [r7, #12]
 800b656:	4806      	ldr	r0, [pc, #24]	; (800b670 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b658:	f7fb fa56 	bl	8006b08 <HAL_SD_ReadBlocks_DMA>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d001      	beq.n	800b666 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b666:	7dfb      	ldrb	r3, [r7, #23]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3718      	adds	r7, #24
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	24000094 	.word	0x24000094

0800b674 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b680:	2300      	movs	r3, #0
 800b682:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	68f9      	ldr	r1, [r7, #12]
 800b68a:	4806      	ldr	r0, [pc, #24]	; (800b6a4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b68c:	f7fb fae4 	bl	8006c58 <HAL_SD_WriteBlocks_DMA>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3718      	adds	r7, #24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	24000094 	.word	0x24000094

0800b6a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b6ac:	4805      	ldr	r0, [pc, #20]	; (800b6c4 <BSP_SD_GetCardState+0x1c>)
 800b6ae:	f7fc f8dd 	bl	800786c <HAL_SD_GetCardState>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b04      	cmp	r3, #4
 800b6b6:	bf14      	ite	ne
 800b6b8:	2301      	movne	r3, #1
 800b6ba:	2300      	moveq	r3, #0
 800b6bc:	b2db      	uxtb	r3, r3
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	24000094 	.word	0x24000094

0800b6c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b6d0:	6879      	ldr	r1, [r7, #4]
 800b6d2:	4803      	ldr	r0, [pc, #12]	; (800b6e0 <BSP_SD_GetCardInfo+0x18>)
 800b6d4:	f7fb ff8c 	bl	80075f0 <HAL_SD_GetCardInfo>
}
 800b6d8:	bf00      	nop
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	24000094 	.word	0x24000094

0800b6e4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b6ec:	f000 f984 	bl	800b9f8 <BSP_SD_WriteCpltCallback>
}
 800b6f0:	bf00      	nop
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b700:	f000 f986 	bl	800ba10 <BSP_SD_ReadCpltCallback>
}
 800b704:	bf00      	nop
 800b706:	3708      	adds	r7, #8
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b712:	2301      	movs	r3, #1
 800b714:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800b716:	79fb      	ldrb	r3, [r7, #7]
 800b718:	b2db      	uxtb	r3, r3
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b084      	sub	sp, #16
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b72e:	f7f5 ffcd 	bl	80016cc <HAL_GetTick>
 800b732:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b734:	e006      	b.n	800b744 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b736:	f7ff ffb7 	bl	800b6a8 <BSP_SD_GetCardState>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d101      	bne.n	800b744 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b740:	2300      	movs	r3, #0
 800b742:	e009      	b.n	800b758 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b744:	f7f5 ffc2 	bl	80016cc <HAL_GetTick>
 800b748:	4602      	mov	r2, r0
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	429a      	cmp	r2, r3
 800b752:	d8f0      	bhi.n	800b736 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b754:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	4603      	mov	r3, r0
 800b768:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b76a:	4b0b      	ldr	r3, [pc, #44]	; (800b798 <SD_CheckStatus+0x38>)
 800b76c:	2201      	movs	r2, #1
 800b76e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b770:	f7ff ff9a 	bl	800b6a8 <BSP_SD_GetCardState>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d107      	bne.n	800b78a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b77a:	4b07      	ldr	r3, [pc, #28]	; (800b798 <SD_CheckStatus+0x38>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	f023 0301 	bic.w	r3, r3, #1
 800b784:	b2da      	uxtb	r2, r3
 800b786:	4b04      	ldr	r3, [pc, #16]	; (800b798 <SD_CheckStatus+0x38>)
 800b788:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b78a:	4b03      	ldr	r3, [pc, #12]	; (800b798 <SD_CheckStatus+0x38>)
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	b2db      	uxtb	r3, r3
}
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	24000011 	.word	0x24000011

0800b79c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b7a6:	f7ff ff33 	bl	800b610 <BSP_SD_Init>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d107      	bne.n	800b7c0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7ff ffd4 	bl	800b760 <SD_CheckStatus>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	4b04      	ldr	r3, [pc, #16]	; (800b7d0 <SD_initialize+0x34>)
 800b7be:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b7c0:	4b03      	ldr	r3, [pc, #12]	; (800b7d0 <SD_initialize+0x34>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	b2db      	uxtb	r3, r3
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	24000011 	.word	0x24000011

0800b7d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b7de:	79fb      	ldrb	r3, [r7, #7]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7ff ffbd 	bl	800b760 <SD_CheckStatus>
 800b7e6:	4603      	mov	r3, r0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60b9      	str	r1, [r7, #8]
 800b7f8:	607a      	str	r2, [r7, #4]
 800b7fa:	603b      	str	r3, [r7, #0]
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b804:	f247 5030 	movw	r0, #30000	; 0x7530
 800b808:	f7ff ff8d 	bl	800b726 <SD_CheckStatusWithTimeout>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	da01      	bge.n	800b816 <SD_read+0x26>
  {
    return res;
 800b812:	7dfb      	ldrb	r3, [r7, #23]
 800b814:	e03b      	b.n	800b88e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	6879      	ldr	r1, [r7, #4]
 800b81a:	68b8      	ldr	r0, [r7, #8]
 800b81c:	f7ff ff10 	bl	800b640 <BSP_SD_ReadBlocks_DMA>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d132      	bne.n	800b88c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b826:	4b1c      	ldr	r3, [pc, #112]	; (800b898 <SD_read+0xa8>)
 800b828:	2200      	movs	r2, #0
 800b82a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b82c:	f7f5 ff4e 	bl	80016cc <HAL_GetTick>
 800b830:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b832:	bf00      	nop
 800b834:	4b18      	ldr	r3, [pc, #96]	; (800b898 <SD_read+0xa8>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d108      	bne.n	800b84e <SD_read+0x5e>
 800b83c:	f7f5 ff46 	bl	80016cc <HAL_GetTick>
 800b840:	4602      	mov	r2, r0
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	f247 522f 	movw	r2, #29999	; 0x752f
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d9f2      	bls.n	800b834 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b84e:	4b12      	ldr	r3, [pc, #72]	; (800b898 <SD_read+0xa8>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d102      	bne.n	800b85c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	75fb      	strb	r3, [r7, #23]
 800b85a:	e017      	b.n	800b88c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b85c:	4b0e      	ldr	r3, [pc, #56]	; (800b898 <SD_read+0xa8>)
 800b85e:	2200      	movs	r2, #0
 800b860:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b862:	f7f5 ff33 	bl	80016cc <HAL_GetTick>
 800b866:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b868:	e007      	b.n	800b87a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b86a:	f7ff ff1d 	bl	800b6a8 <BSP_SD_GetCardState>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d102      	bne.n	800b87a <SD_read+0x8a>
          {
            res = RES_OK;
 800b874:	2300      	movs	r3, #0
 800b876:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b878:	e008      	b.n	800b88c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b87a:	f7f5 ff27 	bl	80016cc <HAL_GetTick>
 800b87e:	4602      	mov	r2, r0
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	f247 522f 	movw	r2, #29999	; 0x752f
 800b888:	4293      	cmp	r3, r2
 800b88a:	d9ee      	bls.n	800b86a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b88c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	24000470 	.word	0x24000470

0800b89c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	607a      	str	r2, [r7, #4]
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b8b0:	4b24      	ldr	r3, [pc, #144]	; (800b944 <SD_write+0xa8>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b8b6:	f247 5030 	movw	r0, #30000	; 0x7530
 800b8ba:	f7ff ff34 	bl	800b726 <SD_CheckStatusWithTimeout>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	da01      	bge.n	800b8c8 <SD_write+0x2c>
  {
    return res;
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
 800b8c6:	e038      	b.n	800b93a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b8c8:	683a      	ldr	r2, [r7, #0]
 800b8ca:	6879      	ldr	r1, [r7, #4]
 800b8cc:	68b8      	ldr	r0, [r7, #8]
 800b8ce:	f7ff fed1 	bl	800b674 <BSP_SD_WriteBlocks_DMA>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d12f      	bne.n	800b938 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b8d8:	f7f5 fef8 	bl	80016cc <HAL_GetTick>
 800b8dc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b8de:	bf00      	nop
 800b8e0:	4b18      	ldr	r3, [pc, #96]	; (800b944 <SD_write+0xa8>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d108      	bne.n	800b8fa <SD_write+0x5e>
 800b8e8:	f7f5 fef0 	bl	80016cc <HAL_GetTick>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	f247 522f 	movw	r2, #29999	; 0x752f
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d9f2      	bls.n	800b8e0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b8fa:	4b12      	ldr	r3, [pc, #72]	; (800b944 <SD_write+0xa8>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d102      	bne.n	800b908 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	75fb      	strb	r3, [r7, #23]
 800b906:	e017      	b.n	800b938 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b908:	4b0e      	ldr	r3, [pc, #56]	; (800b944 <SD_write+0xa8>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b90e:	f7f5 fedd 	bl	80016cc <HAL_GetTick>
 800b912:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b914:	e007      	b.n	800b926 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b916:	f7ff fec7 	bl	800b6a8 <BSP_SD_GetCardState>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d102      	bne.n	800b926 <SD_write+0x8a>
          {
            res = RES_OK;
 800b920:	2300      	movs	r3, #0
 800b922:	75fb      	strb	r3, [r7, #23]
            break;
 800b924:	e008      	b.n	800b938 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b926:	f7f5 fed1 	bl	80016cc <HAL_GetTick>
 800b92a:	4602      	mov	r2, r0
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	f247 522f 	movw	r2, #29999	; 0x752f
 800b934:	4293      	cmp	r3, r2
 800b936:	d9ee      	bls.n	800b916 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b938:	7dfb      	ldrb	r3, [r7, #23]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3718      	adds	r7, #24
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	2400046c 	.word	0x2400046c

0800b948 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b08c      	sub	sp, #48	; 0x30
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	4603      	mov	r3, r0
 800b950:	603a      	str	r2, [r7, #0]
 800b952:	71fb      	strb	r3, [r7, #7]
 800b954:	460b      	mov	r3, r1
 800b956:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b958:	2301      	movs	r3, #1
 800b95a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b95e:	4b25      	ldr	r3, [pc, #148]	; (800b9f4 <SD_ioctl+0xac>)
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	b2db      	uxtb	r3, r3
 800b964:	f003 0301 	and.w	r3, r3, #1
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <SD_ioctl+0x28>
 800b96c:	2303      	movs	r3, #3
 800b96e:	e03c      	b.n	800b9ea <SD_ioctl+0xa2>

  switch (cmd)
 800b970:	79bb      	ldrb	r3, [r7, #6]
 800b972:	2b03      	cmp	r3, #3
 800b974:	d834      	bhi.n	800b9e0 <SD_ioctl+0x98>
 800b976:	a201      	add	r2, pc, #4	; (adr r2, 800b97c <SD_ioctl+0x34>)
 800b978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b97c:	0800b98d 	.word	0x0800b98d
 800b980:	0800b995 	.word	0x0800b995
 800b984:	0800b9ad 	.word	0x0800b9ad
 800b988:	0800b9c7 	.word	0x0800b9c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b992:	e028      	b.n	800b9e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b994:	f107 0308 	add.w	r3, r7, #8
 800b998:	4618      	mov	r0, r3
 800b99a:	f7ff fe95 	bl	800b6c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b99e:	6a3a      	ldr	r2, [r7, #32]
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b9aa:	e01c      	b.n	800b9e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b9ac:	f107 0308 	add.w	r3, r7, #8
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7ff fe89 	bl	800b6c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b9c4:	e00f      	b.n	800b9e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b9c6:	f107 0308 	add.w	r3, r7, #8
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7ff fe7c 	bl	800b6c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	0a5a      	lsrs	r2, r3, #9
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b9de:	e002      	b.n	800b9e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b9e0:	2304      	movs	r3, #4
 800b9e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b9e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3730      	adds	r7, #48	; 0x30
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	24000011 	.word	0x24000011

0800b9f8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b9fc:	4b03      	ldr	r3, [pc, #12]	; (800ba0c <BSP_SD_WriteCpltCallback+0x14>)
 800b9fe:	2201      	movs	r2, #1
 800ba00:	601a      	str	r2, [r3, #0]
}
 800ba02:	bf00      	nop
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr
 800ba0c:	2400046c 	.word	0x2400046c

0800ba10 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ba10:	b480      	push	{r7}
 800ba12:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ba14:	4b03      	ldr	r3, [pc, #12]	; (800ba24 <BSP_SD_ReadCpltCallback+0x14>)
 800ba16:	2201      	movs	r2, #1
 800ba18:	601a      	str	r2, [r3, #0]
}
 800ba1a:	bf00      	nop
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	24000470 	.word	0x24000470

0800ba28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b087      	sub	sp, #28
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	4613      	mov	r3, r2
 800ba34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ba36:	2301      	movs	r3, #1
 800ba38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ba3e:	4b1f      	ldr	r3, [pc, #124]	; (800babc <FATFS_LinkDriverEx+0x94>)
 800ba40:	7a5b      	ldrb	r3, [r3, #9]
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d131      	bne.n	800baac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ba48:	4b1c      	ldr	r3, [pc, #112]	; (800babc <FATFS_LinkDriverEx+0x94>)
 800ba4a:	7a5b      	ldrb	r3, [r3, #9]
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	461a      	mov	r2, r3
 800ba50:	4b1a      	ldr	r3, [pc, #104]	; (800babc <FATFS_LinkDriverEx+0x94>)
 800ba52:	2100      	movs	r1, #0
 800ba54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ba56:	4b19      	ldr	r3, [pc, #100]	; (800babc <FATFS_LinkDriverEx+0x94>)
 800ba58:	7a5b      	ldrb	r3, [r3, #9]
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	4a17      	ldr	r2, [pc, #92]	; (800babc <FATFS_LinkDriverEx+0x94>)
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4413      	add	r3, r2
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ba66:	4b15      	ldr	r3, [pc, #84]	; (800babc <FATFS_LinkDriverEx+0x94>)
 800ba68:	7a5b      	ldrb	r3, [r3, #9]
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	4b13      	ldr	r3, [pc, #76]	; (800babc <FATFS_LinkDriverEx+0x94>)
 800ba70:	4413      	add	r3, r2
 800ba72:	79fa      	ldrb	r2, [r7, #7]
 800ba74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ba76:	4b11      	ldr	r3, [pc, #68]	; (800babc <FATFS_LinkDriverEx+0x94>)
 800ba78:	7a5b      	ldrb	r3, [r3, #9]
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	1c5a      	adds	r2, r3, #1
 800ba7e:	b2d1      	uxtb	r1, r2
 800ba80:	4a0e      	ldr	r2, [pc, #56]	; (800babc <FATFS_LinkDriverEx+0x94>)
 800ba82:	7251      	strb	r1, [r2, #9]
 800ba84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ba86:	7dbb      	ldrb	r3, [r7, #22]
 800ba88:	3330      	adds	r3, #48	; 0x30
 800ba8a:	b2da      	uxtb	r2, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	3301      	adds	r3, #1
 800ba94:	223a      	movs	r2, #58	; 0x3a
 800ba96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	3302      	adds	r3, #2
 800ba9c:	222f      	movs	r2, #47	; 0x2f
 800ba9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	3303      	adds	r3, #3
 800baa4:	2200      	movs	r2, #0
 800baa6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800baac:	7dfb      	ldrb	r3, [r7, #23]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	371c      	adds	r7, #28
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	24000474 	.word	0x24000474

0800bac0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800baca:	2200      	movs	r2, #0
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f7ff ffaa 	bl	800ba28 <FATFS_LinkDriverEx>
 800bad4:	4603      	mov	r3, r0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
	...

0800bae0 <__errno>:
 800bae0:	4b01      	ldr	r3, [pc, #4]	; (800bae8 <__errno+0x8>)
 800bae2:	6818      	ldr	r0, [r3, #0]
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	24000014 	.word	0x24000014

0800baec <__libc_init_array>:
 800baec:	b570      	push	{r4, r5, r6, lr}
 800baee:	4d0d      	ldr	r5, [pc, #52]	; (800bb24 <__libc_init_array+0x38>)
 800baf0:	4c0d      	ldr	r4, [pc, #52]	; (800bb28 <__libc_init_array+0x3c>)
 800baf2:	1b64      	subs	r4, r4, r5
 800baf4:	10a4      	asrs	r4, r4, #2
 800baf6:	2600      	movs	r6, #0
 800baf8:	42a6      	cmp	r6, r4
 800bafa:	d109      	bne.n	800bb10 <__libc_init_array+0x24>
 800bafc:	4d0b      	ldr	r5, [pc, #44]	; (800bb2c <__libc_init_array+0x40>)
 800bafe:	4c0c      	ldr	r4, [pc, #48]	; (800bb30 <__libc_init_array+0x44>)
 800bb00:	f000 fc8e 	bl	800c420 <_init>
 800bb04:	1b64      	subs	r4, r4, r5
 800bb06:	10a4      	asrs	r4, r4, #2
 800bb08:	2600      	movs	r6, #0
 800bb0a:	42a6      	cmp	r6, r4
 800bb0c:	d105      	bne.n	800bb1a <__libc_init_array+0x2e>
 800bb0e:	bd70      	pop	{r4, r5, r6, pc}
 800bb10:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb14:	4798      	blx	r3
 800bb16:	3601      	adds	r6, #1
 800bb18:	e7ee      	b.n	800baf8 <__libc_init_array+0xc>
 800bb1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb1e:	4798      	blx	r3
 800bb20:	3601      	adds	r6, #1
 800bb22:	e7f2      	b.n	800bb0a <__libc_init_array+0x1e>
 800bb24:	0800c8c8 	.word	0x0800c8c8
 800bb28:	0800c8c8 	.word	0x0800c8c8
 800bb2c:	0800c8c8 	.word	0x0800c8c8
 800bb30:	0800c8cc 	.word	0x0800c8cc

0800bb34 <memcpy>:
 800bb34:	440a      	add	r2, r1
 800bb36:	4291      	cmp	r1, r2
 800bb38:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb3c:	d100      	bne.n	800bb40 <memcpy+0xc>
 800bb3e:	4770      	bx	lr
 800bb40:	b510      	push	{r4, lr}
 800bb42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb4a:	4291      	cmp	r1, r2
 800bb4c:	d1f9      	bne.n	800bb42 <memcpy+0xe>
 800bb4e:	bd10      	pop	{r4, pc}

0800bb50 <memset>:
 800bb50:	4402      	add	r2, r0
 800bb52:	4603      	mov	r3, r0
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d100      	bne.n	800bb5a <memset+0xa>
 800bb58:	4770      	bx	lr
 800bb5a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb5e:	e7f9      	b.n	800bb54 <memset+0x4>

0800bb60 <siprintf>:
 800bb60:	b40e      	push	{r1, r2, r3}
 800bb62:	b500      	push	{lr}
 800bb64:	b09c      	sub	sp, #112	; 0x70
 800bb66:	ab1d      	add	r3, sp, #116	; 0x74
 800bb68:	9002      	str	r0, [sp, #8]
 800bb6a:	9006      	str	r0, [sp, #24]
 800bb6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb70:	4809      	ldr	r0, [pc, #36]	; (800bb98 <siprintf+0x38>)
 800bb72:	9107      	str	r1, [sp, #28]
 800bb74:	9104      	str	r1, [sp, #16]
 800bb76:	4909      	ldr	r1, [pc, #36]	; (800bb9c <siprintf+0x3c>)
 800bb78:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb7c:	9105      	str	r1, [sp, #20]
 800bb7e:	6800      	ldr	r0, [r0, #0]
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	a902      	add	r1, sp, #8
 800bb84:	f000 f868 	bl	800bc58 <_svfiprintf_r>
 800bb88:	9b02      	ldr	r3, [sp, #8]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	701a      	strb	r2, [r3, #0]
 800bb8e:	b01c      	add	sp, #112	; 0x70
 800bb90:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb94:	b003      	add	sp, #12
 800bb96:	4770      	bx	lr
 800bb98:	24000014 	.word	0x24000014
 800bb9c:	ffff0208 	.word	0xffff0208

0800bba0 <__ssputs_r>:
 800bba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba4:	688e      	ldr	r6, [r1, #8]
 800bba6:	429e      	cmp	r6, r3
 800bba8:	4682      	mov	sl, r0
 800bbaa:	460c      	mov	r4, r1
 800bbac:	4690      	mov	r8, r2
 800bbae:	461f      	mov	r7, r3
 800bbb0:	d838      	bhi.n	800bc24 <__ssputs_r+0x84>
 800bbb2:	898a      	ldrh	r2, [r1, #12]
 800bbb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbb8:	d032      	beq.n	800bc20 <__ssputs_r+0x80>
 800bbba:	6825      	ldr	r5, [r4, #0]
 800bbbc:	6909      	ldr	r1, [r1, #16]
 800bbbe:	eba5 0901 	sub.w	r9, r5, r1
 800bbc2:	6965      	ldr	r5, [r4, #20]
 800bbc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbcc:	3301      	adds	r3, #1
 800bbce:	444b      	add	r3, r9
 800bbd0:	106d      	asrs	r5, r5, #1
 800bbd2:	429d      	cmp	r5, r3
 800bbd4:	bf38      	it	cc
 800bbd6:	461d      	movcc	r5, r3
 800bbd8:	0553      	lsls	r3, r2, #21
 800bbda:	d531      	bpl.n	800bc40 <__ssputs_r+0xa0>
 800bbdc:	4629      	mov	r1, r5
 800bbde:	f000 fb55 	bl	800c28c <_malloc_r>
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	b950      	cbnz	r0, 800bbfc <__ssputs_r+0x5c>
 800bbe6:	230c      	movs	r3, #12
 800bbe8:	f8ca 3000 	str.w	r3, [sl]
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf2:	81a3      	strh	r3, [r4, #12]
 800bbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbfc:	6921      	ldr	r1, [r4, #16]
 800bbfe:	464a      	mov	r2, r9
 800bc00:	f7ff ff98 	bl	800bb34 <memcpy>
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc0e:	81a3      	strh	r3, [r4, #12]
 800bc10:	6126      	str	r6, [r4, #16]
 800bc12:	6165      	str	r5, [r4, #20]
 800bc14:	444e      	add	r6, r9
 800bc16:	eba5 0509 	sub.w	r5, r5, r9
 800bc1a:	6026      	str	r6, [r4, #0]
 800bc1c:	60a5      	str	r5, [r4, #8]
 800bc1e:	463e      	mov	r6, r7
 800bc20:	42be      	cmp	r6, r7
 800bc22:	d900      	bls.n	800bc26 <__ssputs_r+0x86>
 800bc24:	463e      	mov	r6, r7
 800bc26:	6820      	ldr	r0, [r4, #0]
 800bc28:	4632      	mov	r2, r6
 800bc2a:	4641      	mov	r1, r8
 800bc2c:	f000 faa8 	bl	800c180 <memmove>
 800bc30:	68a3      	ldr	r3, [r4, #8]
 800bc32:	1b9b      	subs	r3, r3, r6
 800bc34:	60a3      	str	r3, [r4, #8]
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	4433      	add	r3, r6
 800bc3a:	6023      	str	r3, [r4, #0]
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	e7db      	b.n	800bbf8 <__ssputs_r+0x58>
 800bc40:	462a      	mov	r2, r5
 800bc42:	f000 fb97 	bl	800c374 <_realloc_r>
 800bc46:	4606      	mov	r6, r0
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d1e1      	bne.n	800bc10 <__ssputs_r+0x70>
 800bc4c:	6921      	ldr	r1, [r4, #16]
 800bc4e:	4650      	mov	r0, sl
 800bc50:	f000 fab0 	bl	800c1b4 <_free_r>
 800bc54:	e7c7      	b.n	800bbe6 <__ssputs_r+0x46>
	...

0800bc58 <_svfiprintf_r>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	4698      	mov	r8, r3
 800bc5e:	898b      	ldrh	r3, [r1, #12]
 800bc60:	061b      	lsls	r3, r3, #24
 800bc62:	b09d      	sub	sp, #116	; 0x74
 800bc64:	4607      	mov	r7, r0
 800bc66:	460d      	mov	r5, r1
 800bc68:	4614      	mov	r4, r2
 800bc6a:	d50e      	bpl.n	800bc8a <_svfiprintf_r+0x32>
 800bc6c:	690b      	ldr	r3, [r1, #16]
 800bc6e:	b963      	cbnz	r3, 800bc8a <_svfiprintf_r+0x32>
 800bc70:	2140      	movs	r1, #64	; 0x40
 800bc72:	f000 fb0b 	bl	800c28c <_malloc_r>
 800bc76:	6028      	str	r0, [r5, #0]
 800bc78:	6128      	str	r0, [r5, #16]
 800bc7a:	b920      	cbnz	r0, 800bc86 <_svfiprintf_r+0x2e>
 800bc7c:	230c      	movs	r3, #12
 800bc7e:	603b      	str	r3, [r7, #0]
 800bc80:	f04f 30ff 	mov.w	r0, #4294967295
 800bc84:	e0d1      	b.n	800be2a <_svfiprintf_r+0x1d2>
 800bc86:	2340      	movs	r3, #64	; 0x40
 800bc88:	616b      	str	r3, [r5, #20]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc8e:	2320      	movs	r3, #32
 800bc90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc94:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc98:	2330      	movs	r3, #48	; 0x30
 800bc9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be44 <_svfiprintf_r+0x1ec>
 800bc9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bca2:	f04f 0901 	mov.w	r9, #1
 800bca6:	4623      	mov	r3, r4
 800bca8:	469a      	mov	sl, r3
 800bcaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcae:	b10a      	cbz	r2, 800bcb4 <_svfiprintf_r+0x5c>
 800bcb0:	2a25      	cmp	r2, #37	; 0x25
 800bcb2:	d1f9      	bne.n	800bca8 <_svfiprintf_r+0x50>
 800bcb4:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb8:	d00b      	beq.n	800bcd2 <_svfiprintf_r+0x7a>
 800bcba:	465b      	mov	r3, fp
 800bcbc:	4622      	mov	r2, r4
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	4638      	mov	r0, r7
 800bcc2:	f7ff ff6d 	bl	800bba0 <__ssputs_r>
 800bcc6:	3001      	adds	r0, #1
 800bcc8:	f000 80aa 	beq.w	800be20 <_svfiprintf_r+0x1c8>
 800bccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcce:	445a      	add	r2, fp
 800bcd0:	9209      	str	r2, [sp, #36]	; 0x24
 800bcd2:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f000 80a2 	beq.w	800be20 <_svfiprintf_r+0x1c8>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f04f 32ff 	mov.w	r2, #4294967295
 800bce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce6:	f10a 0a01 	add.w	sl, sl, #1
 800bcea:	9304      	str	r3, [sp, #16]
 800bcec:	9307      	str	r3, [sp, #28]
 800bcee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcf2:	931a      	str	r3, [sp, #104]	; 0x68
 800bcf4:	4654      	mov	r4, sl
 800bcf6:	2205      	movs	r2, #5
 800bcf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcfc:	4851      	ldr	r0, [pc, #324]	; (800be44 <_svfiprintf_r+0x1ec>)
 800bcfe:	f7f4 faff 	bl	8000300 <memchr>
 800bd02:	9a04      	ldr	r2, [sp, #16]
 800bd04:	b9d8      	cbnz	r0, 800bd3e <_svfiprintf_r+0xe6>
 800bd06:	06d0      	lsls	r0, r2, #27
 800bd08:	bf44      	itt	mi
 800bd0a:	2320      	movmi	r3, #32
 800bd0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd10:	0711      	lsls	r1, r2, #28
 800bd12:	bf44      	itt	mi
 800bd14:	232b      	movmi	r3, #43	; 0x2b
 800bd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd1a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd20:	d015      	beq.n	800bd4e <_svfiprintf_r+0xf6>
 800bd22:	9a07      	ldr	r2, [sp, #28]
 800bd24:	4654      	mov	r4, sl
 800bd26:	2000      	movs	r0, #0
 800bd28:	f04f 0c0a 	mov.w	ip, #10
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd32:	3b30      	subs	r3, #48	; 0x30
 800bd34:	2b09      	cmp	r3, #9
 800bd36:	d94e      	bls.n	800bdd6 <_svfiprintf_r+0x17e>
 800bd38:	b1b0      	cbz	r0, 800bd68 <_svfiprintf_r+0x110>
 800bd3a:	9207      	str	r2, [sp, #28]
 800bd3c:	e014      	b.n	800bd68 <_svfiprintf_r+0x110>
 800bd3e:	eba0 0308 	sub.w	r3, r0, r8
 800bd42:	fa09 f303 	lsl.w	r3, r9, r3
 800bd46:	4313      	orrs	r3, r2
 800bd48:	9304      	str	r3, [sp, #16]
 800bd4a:	46a2      	mov	sl, r4
 800bd4c:	e7d2      	b.n	800bcf4 <_svfiprintf_r+0x9c>
 800bd4e:	9b03      	ldr	r3, [sp, #12]
 800bd50:	1d19      	adds	r1, r3, #4
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	9103      	str	r1, [sp, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	bfbb      	ittet	lt
 800bd5a:	425b      	neglt	r3, r3
 800bd5c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd60:	9307      	strge	r3, [sp, #28]
 800bd62:	9307      	strlt	r3, [sp, #28]
 800bd64:	bfb8      	it	lt
 800bd66:	9204      	strlt	r2, [sp, #16]
 800bd68:	7823      	ldrb	r3, [r4, #0]
 800bd6a:	2b2e      	cmp	r3, #46	; 0x2e
 800bd6c:	d10c      	bne.n	800bd88 <_svfiprintf_r+0x130>
 800bd6e:	7863      	ldrb	r3, [r4, #1]
 800bd70:	2b2a      	cmp	r3, #42	; 0x2a
 800bd72:	d135      	bne.n	800bde0 <_svfiprintf_r+0x188>
 800bd74:	9b03      	ldr	r3, [sp, #12]
 800bd76:	1d1a      	adds	r2, r3, #4
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	9203      	str	r2, [sp, #12]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	bfb8      	it	lt
 800bd80:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd84:	3402      	adds	r4, #2
 800bd86:	9305      	str	r3, [sp, #20]
 800bd88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be54 <_svfiprintf_r+0x1fc>
 800bd8c:	7821      	ldrb	r1, [r4, #0]
 800bd8e:	2203      	movs	r2, #3
 800bd90:	4650      	mov	r0, sl
 800bd92:	f7f4 fab5 	bl	8000300 <memchr>
 800bd96:	b140      	cbz	r0, 800bdaa <_svfiprintf_r+0x152>
 800bd98:	2340      	movs	r3, #64	; 0x40
 800bd9a:	eba0 000a 	sub.w	r0, r0, sl
 800bd9e:	fa03 f000 	lsl.w	r0, r3, r0
 800bda2:	9b04      	ldr	r3, [sp, #16]
 800bda4:	4303      	orrs	r3, r0
 800bda6:	3401      	adds	r4, #1
 800bda8:	9304      	str	r3, [sp, #16]
 800bdaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdae:	4826      	ldr	r0, [pc, #152]	; (800be48 <_svfiprintf_r+0x1f0>)
 800bdb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdb4:	2206      	movs	r2, #6
 800bdb6:	f7f4 faa3 	bl	8000300 <memchr>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d038      	beq.n	800be30 <_svfiprintf_r+0x1d8>
 800bdbe:	4b23      	ldr	r3, [pc, #140]	; (800be4c <_svfiprintf_r+0x1f4>)
 800bdc0:	bb1b      	cbnz	r3, 800be0a <_svfiprintf_r+0x1b2>
 800bdc2:	9b03      	ldr	r3, [sp, #12]
 800bdc4:	3307      	adds	r3, #7
 800bdc6:	f023 0307 	bic.w	r3, r3, #7
 800bdca:	3308      	adds	r3, #8
 800bdcc:	9303      	str	r3, [sp, #12]
 800bdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd0:	4433      	add	r3, r6
 800bdd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd4:	e767      	b.n	800bca6 <_svfiprintf_r+0x4e>
 800bdd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdda:	460c      	mov	r4, r1
 800bddc:	2001      	movs	r0, #1
 800bdde:	e7a5      	b.n	800bd2c <_svfiprintf_r+0xd4>
 800bde0:	2300      	movs	r3, #0
 800bde2:	3401      	adds	r4, #1
 800bde4:	9305      	str	r3, [sp, #20]
 800bde6:	4619      	mov	r1, r3
 800bde8:	f04f 0c0a 	mov.w	ip, #10
 800bdec:	4620      	mov	r0, r4
 800bdee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdf2:	3a30      	subs	r2, #48	; 0x30
 800bdf4:	2a09      	cmp	r2, #9
 800bdf6:	d903      	bls.n	800be00 <_svfiprintf_r+0x1a8>
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d0c5      	beq.n	800bd88 <_svfiprintf_r+0x130>
 800bdfc:	9105      	str	r1, [sp, #20]
 800bdfe:	e7c3      	b.n	800bd88 <_svfiprintf_r+0x130>
 800be00:	fb0c 2101 	mla	r1, ip, r1, r2
 800be04:	4604      	mov	r4, r0
 800be06:	2301      	movs	r3, #1
 800be08:	e7f0      	b.n	800bdec <_svfiprintf_r+0x194>
 800be0a:	ab03      	add	r3, sp, #12
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	462a      	mov	r2, r5
 800be10:	4b0f      	ldr	r3, [pc, #60]	; (800be50 <_svfiprintf_r+0x1f8>)
 800be12:	a904      	add	r1, sp, #16
 800be14:	4638      	mov	r0, r7
 800be16:	f3af 8000 	nop.w
 800be1a:	1c42      	adds	r2, r0, #1
 800be1c:	4606      	mov	r6, r0
 800be1e:	d1d6      	bne.n	800bdce <_svfiprintf_r+0x176>
 800be20:	89ab      	ldrh	r3, [r5, #12]
 800be22:	065b      	lsls	r3, r3, #25
 800be24:	f53f af2c 	bmi.w	800bc80 <_svfiprintf_r+0x28>
 800be28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be2a:	b01d      	add	sp, #116	; 0x74
 800be2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be30:	ab03      	add	r3, sp, #12
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	462a      	mov	r2, r5
 800be36:	4b06      	ldr	r3, [pc, #24]	; (800be50 <_svfiprintf_r+0x1f8>)
 800be38:	a904      	add	r1, sp, #16
 800be3a:	4638      	mov	r0, r7
 800be3c:	f000 f87a 	bl	800bf34 <_printf_i>
 800be40:	e7eb      	b.n	800be1a <_svfiprintf_r+0x1c2>
 800be42:	bf00      	nop
 800be44:	0800c88c 	.word	0x0800c88c
 800be48:	0800c896 	.word	0x0800c896
 800be4c:	00000000 	.word	0x00000000
 800be50:	0800bba1 	.word	0x0800bba1
 800be54:	0800c892 	.word	0x0800c892

0800be58 <_printf_common>:
 800be58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be5c:	4616      	mov	r6, r2
 800be5e:	4699      	mov	r9, r3
 800be60:	688a      	ldr	r2, [r1, #8]
 800be62:	690b      	ldr	r3, [r1, #16]
 800be64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be68:	4293      	cmp	r3, r2
 800be6a:	bfb8      	it	lt
 800be6c:	4613      	movlt	r3, r2
 800be6e:	6033      	str	r3, [r6, #0]
 800be70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be74:	4607      	mov	r7, r0
 800be76:	460c      	mov	r4, r1
 800be78:	b10a      	cbz	r2, 800be7e <_printf_common+0x26>
 800be7a:	3301      	adds	r3, #1
 800be7c:	6033      	str	r3, [r6, #0]
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	0699      	lsls	r1, r3, #26
 800be82:	bf42      	ittt	mi
 800be84:	6833      	ldrmi	r3, [r6, #0]
 800be86:	3302      	addmi	r3, #2
 800be88:	6033      	strmi	r3, [r6, #0]
 800be8a:	6825      	ldr	r5, [r4, #0]
 800be8c:	f015 0506 	ands.w	r5, r5, #6
 800be90:	d106      	bne.n	800bea0 <_printf_common+0x48>
 800be92:	f104 0a19 	add.w	sl, r4, #25
 800be96:	68e3      	ldr	r3, [r4, #12]
 800be98:	6832      	ldr	r2, [r6, #0]
 800be9a:	1a9b      	subs	r3, r3, r2
 800be9c:	42ab      	cmp	r3, r5
 800be9e:	dc26      	bgt.n	800beee <_printf_common+0x96>
 800bea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bea4:	1e13      	subs	r3, r2, #0
 800bea6:	6822      	ldr	r2, [r4, #0]
 800bea8:	bf18      	it	ne
 800beaa:	2301      	movne	r3, #1
 800beac:	0692      	lsls	r2, r2, #26
 800beae:	d42b      	bmi.n	800bf08 <_printf_common+0xb0>
 800beb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800beb4:	4649      	mov	r1, r9
 800beb6:	4638      	mov	r0, r7
 800beb8:	47c0      	blx	r8
 800beba:	3001      	adds	r0, #1
 800bebc:	d01e      	beq.n	800befc <_printf_common+0xa4>
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	68e5      	ldr	r5, [r4, #12]
 800bec2:	6832      	ldr	r2, [r6, #0]
 800bec4:	f003 0306 	and.w	r3, r3, #6
 800bec8:	2b04      	cmp	r3, #4
 800beca:	bf08      	it	eq
 800becc:	1aad      	subeq	r5, r5, r2
 800bece:	68a3      	ldr	r3, [r4, #8]
 800bed0:	6922      	ldr	r2, [r4, #16]
 800bed2:	bf0c      	ite	eq
 800bed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bed8:	2500      	movne	r5, #0
 800beda:	4293      	cmp	r3, r2
 800bedc:	bfc4      	itt	gt
 800bede:	1a9b      	subgt	r3, r3, r2
 800bee0:	18ed      	addgt	r5, r5, r3
 800bee2:	2600      	movs	r6, #0
 800bee4:	341a      	adds	r4, #26
 800bee6:	42b5      	cmp	r5, r6
 800bee8:	d11a      	bne.n	800bf20 <_printf_common+0xc8>
 800beea:	2000      	movs	r0, #0
 800beec:	e008      	b.n	800bf00 <_printf_common+0xa8>
 800beee:	2301      	movs	r3, #1
 800bef0:	4652      	mov	r2, sl
 800bef2:	4649      	mov	r1, r9
 800bef4:	4638      	mov	r0, r7
 800bef6:	47c0      	blx	r8
 800bef8:	3001      	adds	r0, #1
 800befa:	d103      	bne.n	800bf04 <_printf_common+0xac>
 800befc:	f04f 30ff 	mov.w	r0, #4294967295
 800bf00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf04:	3501      	adds	r5, #1
 800bf06:	e7c6      	b.n	800be96 <_printf_common+0x3e>
 800bf08:	18e1      	adds	r1, r4, r3
 800bf0a:	1c5a      	adds	r2, r3, #1
 800bf0c:	2030      	movs	r0, #48	; 0x30
 800bf0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf12:	4422      	add	r2, r4
 800bf14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf1c:	3302      	adds	r3, #2
 800bf1e:	e7c7      	b.n	800beb0 <_printf_common+0x58>
 800bf20:	2301      	movs	r3, #1
 800bf22:	4622      	mov	r2, r4
 800bf24:	4649      	mov	r1, r9
 800bf26:	4638      	mov	r0, r7
 800bf28:	47c0      	blx	r8
 800bf2a:	3001      	adds	r0, #1
 800bf2c:	d0e6      	beq.n	800befc <_printf_common+0xa4>
 800bf2e:	3601      	adds	r6, #1
 800bf30:	e7d9      	b.n	800bee6 <_printf_common+0x8e>
	...

0800bf34 <_printf_i>:
 800bf34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf38:	7e0f      	ldrb	r7, [r1, #24]
 800bf3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf3c:	2f78      	cmp	r7, #120	; 0x78
 800bf3e:	4691      	mov	r9, r2
 800bf40:	4680      	mov	r8, r0
 800bf42:	460c      	mov	r4, r1
 800bf44:	469a      	mov	sl, r3
 800bf46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf4a:	d807      	bhi.n	800bf5c <_printf_i+0x28>
 800bf4c:	2f62      	cmp	r7, #98	; 0x62
 800bf4e:	d80a      	bhi.n	800bf66 <_printf_i+0x32>
 800bf50:	2f00      	cmp	r7, #0
 800bf52:	f000 80d8 	beq.w	800c106 <_printf_i+0x1d2>
 800bf56:	2f58      	cmp	r7, #88	; 0x58
 800bf58:	f000 80a3 	beq.w	800c0a2 <_printf_i+0x16e>
 800bf5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf64:	e03a      	b.n	800bfdc <_printf_i+0xa8>
 800bf66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf6a:	2b15      	cmp	r3, #21
 800bf6c:	d8f6      	bhi.n	800bf5c <_printf_i+0x28>
 800bf6e:	a101      	add	r1, pc, #4	; (adr r1, 800bf74 <_printf_i+0x40>)
 800bf70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf74:	0800bfcd 	.word	0x0800bfcd
 800bf78:	0800bfe1 	.word	0x0800bfe1
 800bf7c:	0800bf5d 	.word	0x0800bf5d
 800bf80:	0800bf5d 	.word	0x0800bf5d
 800bf84:	0800bf5d 	.word	0x0800bf5d
 800bf88:	0800bf5d 	.word	0x0800bf5d
 800bf8c:	0800bfe1 	.word	0x0800bfe1
 800bf90:	0800bf5d 	.word	0x0800bf5d
 800bf94:	0800bf5d 	.word	0x0800bf5d
 800bf98:	0800bf5d 	.word	0x0800bf5d
 800bf9c:	0800bf5d 	.word	0x0800bf5d
 800bfa0:	0800c0ed 	.word	0x0800c0ed
 800bfa4:	0800c011 	.word	0x0800c011
 800bfa8:	0800c0cf 	.word	0x0800c0cf
 800bfac:	0800bf5d 	.word	0x0800bf5d
 800bfb0:	0800bf5d 	.word	0x0800bf5d
 800bfb4:	0800c10f 	.word	0x0800c10f
 800bfb8:	0800bf5d 	.word	0x0800bf5d
 800bfbc:	0800c011 	.word	0x0800c011
 800bfc0:	0800bf5d 	.word	0x0800bf5d
 800bfc4:	0800bf5d 	.word	0x0800bf5d
 800bfc8:	0800c0d7 	.word	0x0800c0d7
 800bfcc:	682b      	ldr	r3, [r5, #0]
 800bfce:	1d1a      	adds	r2, r3, #4
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	602a      	str	r2, [r5, #0]
 800bfd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e0a3      	b.n	800c128 <_printf_i+0x1f4>
 800bfe0:	6820      	ldr	r0, [r4, #0]
 800bfe2:	6829      	ldr	r1, [r5, #0]
 800bfe4:	0606      	lsls	r6, r0, #24
 800bfe6:	f101 0304 	add.w	r3, r1, #4
 800bfea:	d50a      	bpl.n	800c002 <_printf_i+0xce>
 800bfec:	680e      	ldr	r6, [r1, #0]
 800bfee:	602b      	str	r3, [r5, #0]
 800bff0:	2e00      	cmp	r6, #0
 800bff2:	da03      	bge.n	800bffc <_printf_i+0xc8>
 800bff4:	232d      	movs	r3, #45	; 0x2d
 800bff6:	4276      	negs	r6, r6
 800bff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bffc:	485e      	ldr	r0, [pc, #376]	; (800c178 <_printf_i+0x244>)
 800bffe:	230a      	movs	r3, #10
 800c000:	e019      	b.n	800c036 <_printf_i+0x102>
 800c002:	680e      	ldr	r6, [r1, #0]
 800c004:	602b      	str	r3, [r5, #0]
 800c006:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c00a:	bf18      	it	ne
 800c00c:	b236      	sxthne	r6, r6
 800c00e:	e7ef      	b.n	800bff0 <_printf_i+0xbc>
 800c010:	682b      	ldr	r3, [r5, #0]
 800c012:	6820      	ldr	r0, [r4, #0]
 800c014:	1d19      	adds	r1, r3, #4
 800c016:	6029      	str	r1, [r5, #0]
 800c018:	0601      	lsls	r1, r0, #24
 800c01a:	d501      	bpl.n	800c020 <_printf_i+0xec>
 800c01c:	681e      	ldr	r6, [r3, #0]
 800c01e:	e002      	b.n	800c026 <_printf_i+0xf2>
 800c020:	0646      	lsls	r6, r0, #25
 800c022:	d5fb      	bpl.n	800c01c <_printf_i+0xe8>
 800c024:	881e      	ldrh	r6, [r3, #0]
 800c026:	4854      	ldr	r0, [pc, #336]	; (800c178 <_printf_i+0x244>)
 800c028:	2f6f      	cmp	r7, #111	; 0x6f
 800c02a:	bf0c      	ite	eq
 800c02c:	2308      	moveq	r3, #8
 800c02e:	230a      	movne	r3, #10
 800c030:	2100      	movs	r1, #0
 800c032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c036:	6865      	ldr	r5, [r4, #4]
 800c038:	60a5      	str	r5, [r4, #8]
 800c03a:	2d00      	cmp	r5, #0
 800c03c:	bfa2      	ittt	ge
 800c03e:	6821      	ldrge	r1, [r4, #0]
 800c040:	f021 0104 	bicge.w	r1, r1, #4
 800c044:	6021      	strge	r1, [r4, #0]
 800c046:	b90e      	cbnz	r6, 800c04c <_printf_i+0x118>
 800c048:	2d00      	cmp	r5, #0
 800c04a:	d04d      	beq.n	800c0e8 <_printf_i+0x1b4>
 800c04c:	4615      	mov	r5, r2
 800c04e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c052:	fb03 6711 	mls	r7, r3, r1, r6
 800c056:	5dc7      	ldrb	r7, [r0, r7]
 800c058:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c05c:	4637      	mov	r7, r6
 800c05e:	42bb      	cmp	r3, r7
 800c060:	460e      	mov	r6, r1
 800c062:	d9f4      	bls.n	800c04e <_printf_i+0x11a>
 800c064:	2b08      	cmp	r3, #8
 800c066:	d10b      	bne.n	800c080 <_printf_i+0x14c>
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	07de      	lsls	r6, r3, #31
 800c06c:	d508      	bpl.n	800c080 <_printf_i+0x14c>
 800c06e:	6923      	ldr	r3, [r4, #16]
 800c070:	6861      	ldr	r1, [r4, #4]
 800c072:	4299      	cmp	r1, r3
 800c074:	bfde      	ittt	le
 800c076:	2330      	movle	r3, #48	; 0x30
 800c078:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c07c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c080:	1b52      	subs	r2, r2, r5
 800c082:	6122      	str	r2, [r4, #16]
 800c084:	f8cd a000 	str.w	sl, [sp]
 800c088:	464b      	mov	r3, r9
 800c08a:	aa03      	add	r2, sp, #12
 800c08c:	4621      	mov	r1, r4
 800c08e:	4640      	mov	r0, r8
 800c090:	f7ff fee2 	bl	800be58 <_printf_common>
 800c094:	3001      	adds	r0, #1
 800c096:	d14c      	bne.n	800c132 <_printf_i+0x1fe>
 800c098:	f04f 30ff 	mov.w	r0, #4294967295
 800c09c:	b004      	add	sp, #16
 800c09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a2:	4835      	ldr	r0, [pc, #212]	; (800c178 <_printf_i+0x244>)
 800c0a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c0a8:	6829      	ldr	r1, [r5, #0]
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0b0:	6029      	str	r1, [r5, #0]
 800c0b2:	061d      	lsls	r5, r3, #24
 800c0b4:	d514      	bpl.n	800c0e0 <_printf_i+0x1ac>
 800c0b6:	07df      	lsls	r7, r3, #31
 800c0b8:	bf44      	itt	mi
 800c0ba:	f043 0320 	orrmi.w	r3, r3, #32
 800c0be:	6023      	strmi	r3, [r4, #0]
 800c0c0:	b91e      	cbnz	r6, 800c0ca <_printf_i+0x196>
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	f023 0320 	bic.w	r3, r3, #32
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	2310      	movs	r3, #16
 800c0cc:	e7b0      	b.n	800c030 <_printf_i+0xfc>
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	f043 0320 	orr.w	r3, r3, #32
 800c0d4:	6023      	str	r3, [r4, #0]
 800c0d6:	2378      	movs	r3, #120	; 0x78
 800c0d8:	4828      	ldr	r0, [pc, #160]	; (800c17c <_printf_i+0x248>)
 800c0da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0de:	e7e3      	b.n	800c0a8 <_printf_i+0x174>
 800c0e0:	0659      	lsls	r1, r3, #25
 800c0e2:	bf48      	it	mi
 800c0e4:	b2b6      	uxthmi	r6, r6
 800c0e6:	e7e6      	b.n	800c0b6 <_printf_i+0x182>
 800c0e8:	4615      	mov	r5, r2
 800c0ea:	e7bb      	b.n	800c064 <_printf_i+0x130>
 800c0ec:	682b      	ldr	r3, [r5, #0]
 800c0ee:	6826      	ldr	r6, [r4, #0]
 800c0f0:	6961      	ldr	r1, [r4, #20]
 800c0f2:	1d18      	adds	r0, r3, #4
 800c0f4:	6028      	str	r0, [r5, #0]
 800c0f6:	0635      	lsls	r5, r6, #24
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	d501      	bpl.n	800c100 <_printf_i+0x1cc>
 800c0fc:	6019      	str	r1, [r3, #0]
 800c0fe:	e002      	b.n	800c106 <_printf_i+0x1d2>
 800c100:	0670      	lsls	r0, r6, #25
 800c102:	d5fb      	bpl.n	800c0fc <_printf_i+0x1c8>
 800c104:	8019      	strh	r1, [r3, #0]
 800c106:	2300      	movs	r3, #0
 800c108:	6123      	str	r3, [r4, #16]
 800c10a:	4615      	mov	r5, r2
 800c10c:	e7ba      	b.n	800c084 <_printf_i+0x150>
 800c10e:	682b      	ldr	r3, [r5, #0]
 800c110:	1d1a      	adds	r2, r3, #4
 800c112:	602a      	str	r2, [r5, #0]
 800c114:	681d      	ldr	r5, [r3, #0]
 800c116:	6862      	ldr	r2, [r4, #4]
 800c118:	2100      	movs	r1, #0
 800c11a:	4628      	mov	r0, r5
 800c11c:	f7f4 f8f0 	bl	8000300 <memchr>
 800c120:	b108      	cbz	r0, 800c126 <_printf_i+0x1f2>
 800c122:	1b40      	subs	r0, r0, r5
 800c124:	6060      	str	r0, [r4, #4]
 800c126:	6863      	ldr	r3, [r4, #4]
 800c128:	6123      	str	r3, [r4, #16]
 800c12a:	2300      	movs	r3, #0
 800c12c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c130:	e7a8      	b.n	800c084 <_printf_i+0x150>
 800c132:	6923      	ldr	r3, [r4, #16]
 800c134:	462a      	mov	r2, r5
 800c136:	4649      	mov	r1, r9
 800c138:	4640      	mov	r0, r8
 800c13a:	47d0      	blx	sl
 800c13c:	3001      	adds	r0, #1
 800c13e:	d0ab      	beq.n	800c098 <_printf_i+0x164>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	079b      	lsls	r3, r3, #30
 800c144:	d413      	bmi.n	800c16e <_printf_i+0x23a>
 800c146:	68e0      	ldr	r0, [r4, #12]
 800c148:	9b03      	ldr	r3, [sp, #12]
 800c14a:	4298      	cmp	r0, r3
 800c14c:	bfb8      	it	lt
 800c14e:	4618      	movlt	r0, r3
 800c150:	e7a4      	b.n	800c09c <_printf_i+0x168>
 800c152:	2301      	movs	r3, #1
 800c154:	4632      	mov	r2, r6
 800c156:	4649      	mov	r1, r9
 800c158:	4640      	mov	r0, r8
 800c15a:	47d0      	blx	sl
 800c15c:	3001      	adds	r0, #1
 800c15e:	d09b      	beq.n	800c098 <_printf_i+0x164>
 800c160:	3501      	adds	r5, #1
 800c162:	68e3      	ldr	r3, [r4, #12]
 800c164:	9903      	ldr	r1, [sp, #12]
 800c166:	1a5b      	subs	r3, r3, r1
 800c168:	42ab      	cmp	r3, r5
 800c16a:	dcf2      	bgt.n	800c152 <_printf_i+0x21e>
 800c16c:	e7eb      	b.n	800c146 <_printf_i+0x212>
 800c16e:	2500      	movs	r5, #0
 800c170:	f104 0619 	add.w	r6, r4, #25
 800c174:	e7f5      	b.n	800c162 <_printf_i+0x22e>
 800c176:	bf00      	nop
 800c178:	0800c89d 	.word	0x0800c89d
 800c17c:	0800c8ae 	.word	0x0800c8ae

0800c180 <memmove>:
 800c180:	4288      	cmp	r0, r1
 800c182:	b510      	push	{r4, lr}
 800c184:	eb01 0402 	add.w	r4, r1, r2
 800c188:	d902      	bls.n	800c190 <memmove+0x10>
 800c18a:	4284      	cmp	r4, r0
 800c18c:	4623      	mov	r3, r4
 800c18e:	d807      	bhi.n	800c1a0 <memmove+0x20>
 800c190:	1e43      	subs	r3, r0, #1
 800c192:	42a1      	cmp	r1, r4
 800c194:	d008      	beq.n	800c1a8 <memmove+0x28>
 800c196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c19a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c19e:	e7f8      	b.n	800c192 <memmove+0x12>
 800c1a0:	4402      	add	r2, r0
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	428a      	cmp	r2, r1
 800c1a6:	d100      	bne.n	800c1aa <memmove+0x2a>
 800c1a8:	bd10      	pop	{r4, pc}
 800c1aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1b2:	e7f7      	b.n	800c1a4 <memmove+0x24>

0800c1b4 <_free_r>:
 800c1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1b6:	2900      	cmp	r1, #0
 800c1b8:	d044      	beq.n	800c244 <_free_r+0x90>
 800c1ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1be:	9001      	str	r0, [sp, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f1a1 0404 	sub.w	r4, r1, #4
 800c1c6:	bfb8      	it	lt
 800c1c8:	18e4      	addlt	r4, r4, r3
 800c1ca:	f000 f913 	bl	800c3f4 <__malloc_lock>
 800c1ce:	4a1e      	ldr	r2, [pc, #120]	; (800c248 <_free_r+0x94>)
 800c1d0:	9801      	ldr	r0, [sp, #4]
 800c1d2:	6813      	ldr	r3, [r2, #0]
 800c1d4:	b933      	cbnz	r3, 800c1e4 <_free_r+0x30>
 800c1d6:	6063      	str	r3, [r4, #4]
 800c1d8:	6014      	str	r4, [r2, #0]
 800c1da:	b003      	add	sp, #12
 800c1dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1e0:	f000 b90e 	b.w	800c400 <__malloc_unlock>
 800c1e4:	42a3      	cmp	r3, r4
 800c1e6:	d908      	bls.n	800c1fa <_free_r+0x46>
 800c1e8:	6825      	ldr	r5, [r4, #0]
 800c1ea:	1961      	adds	r1, r4, r5
 800c1ec:	428b      	cmp	r3, r1
 800c1ee:	bf01      	itttt	eq
 800c1f0:	6819      	ldreq	r1, [r3, #0]
 800c1f2:	685b      	ldreq	r3, [r3, #4]
 800c1f4:	1949      	addeq	r1, r1, r5
 800c1f6:	6021      	streq	r1, [r4, #0]
 800c1f8:	e7ed      	b.n	800c1d6 <_free_r+0x22>
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	b10b      	cbz	r3, 800c204 <_free_r+0x50>
 800c200:	42a3      	cmp	r3, r4
 800c202:	d9fa      	bls.n	800c1fa <_free_r+0x46>
 800c204:	6811      	ldr	r1, [r2, #0]
 800c206:	1855      	adds	r5, r2, r1
 800c208:	42a5      	cmp	r5, r4
 800c20a:	d10b      	bne.n	800c224 <_free_r+0x70>
 800c20c:	6824      	ldr	r4, [r4, #0]
 800c20e:	4421      	add	r1, r4
 800c210:	1854      	adds	r4, r2, r1
 800c212:	42a3      	cmp	r3, r4
 800c214:	6011      	str	r1, [r2, #0]
 800c216:	d1e0      	bne.n	800c1da <_free_r+0x26>
 800c218:	681c      	ldr	r4, [r3, #0]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	6053      	str	r3, [r2, #4]
 800c21e:	4421      	add	r1, r4
 800c220:	6011      	str	r1, [r2, #0]
 800c222:	e7da      	b.n	800c1da <_free_r+0x26>
 800c224:	d902      	bls.n	800c22c <_free_r+0x78>
 800c226:	230c      	movs	r3, #12
 800c228:	6003      	str	r3, [r0, #0]
 800c22a:	e7d6      	b.n	800c1da <_free_r+0x26>
 800c22c:	6825      	ldr	r5, [r4, #0]
 800c22e:	1961      	adds	r1, r4, r5
 800c230:	428b      	cmp	r3, r1
 800c232:	bf04      	itt	eq
 800c234:	6819      	ldreq	r1, [r3, #0]
 800c236:	685b      	ldreq	r3, [r3, #4]
 800c238:	6063      	str	r3, [r4, #4]
 800c23a:	bf04      	itt	eq
 800c23c:	1949      	addeq	r1, r1, r5
 800c23e:	6021      	streq	r1, [r4, #0]
 800c240:	6054      	str	r4, [r2, #4]
 800c242:	e7ca      	b.n	800c1da <_free_r+0x26>
 800c244:	b003      	add	sp, #12
 800c246:	bd30      	pop	{r4, r5, pc}
 800c248:	24000480 	.word	0x24000480

0800c24c <sbrk_aligned>:
 800c24c:	b570      	push	{r4, r5, r6, lr}
 800c24e:	4e0e      	ldr	r6, [pc, #56]	; (800c288 <sbrk_aligned+0x3c>)
 800c250:	460c      	mov	r4, r1
 800c252:	6831      	ldr	r1, [r6, #0]
 800c254:	4605      	mov	r5, r0
 800c256:	b911      	cbnz	r1, 800c25e <sbrk_aligned+0x12>
 800c258:	f000 f8bc 	bl	800c3d4 <_sbrk_r>
 800c25c:	6030      	str	r0, [r6, #0]
 800c25e:	4621      	mov	r1, r4
 800c260:	4628      	mov	r0, r5
 800c262:	f000 f8b7 	bl	800c3d4 <_sbrk_r>
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	d00a      	beq.n	800c280 <sbrk_aligned+0x34>
 800c26a:	1cc4      	adds	r4, r0, #3
 800c26c:	f024 0403 	bic.w	r4, r4, #3
 800c270:	42a0      	cmp	r0, r4
 800c272:	d007      	beq.n	800c284 <sbrk_aligned+0x38>
 800c274:	1a21      	subs	r1, r4, r0
 800c276:	4628      	mov	r0, r5
 800c278:	f000 f8ac 	bl	800c3d4 <_sbrk_r>
 800c27c:	3001      	adds	r0, #1
 800c27e:	d101      	bne.n	800c284 <sbrk_aligned+0x38>
 800c280:	f04f 34ff 	mov.w	r4, #4294967295
 800c284:	4620      	mov	r0, r4
 800c286:	bd70      	pop	{r4, r5, r6, pc}
 800c288:	24000484 	.word	0x24000484

0800c28c <_malloc_r>:
 800c28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c290:	1ccd      	adds	r5, r1, #3
 800c292:	f025 0503 	bic.w	r5, r5, #3
 800c296:	3508      	adds	r5, #8
 800c298:	2d0c      	cmp	r5, #12
 800c29a:	bf38      	it	cc
 800c29c:	250c      	movcc	r5, #12
 800c29e:	2d00      	cmp	r5, #0
 800c2a0:	4607      	mov	r7, r0
 800c2a2:	db01      	blt.n	800c2a8 <_malloc_r+0x1c>
 800c2a4:	42a9      	cmp	r1, r5
 800c2a6:	d905      	bls.n	800c2b4 <_malloc_r+0x28>
 800c2a8:	230c      	movs	r3, #12
 800c2aa:	603b      	str	r3, [r7, #0]
 800c2ac:	2600      	movs	r6, #0
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b4:	4e2e      	ldr	r6, [pc, #184]	; (800c370 <_malloc_r+0xe4>)
 800c2b6:	f000 f89d 	bl	800c3f4 <__malloc_lock>
 800c2ba:	6833      	ldr	r3, [r6, #0]
 800c2bc:	461c      	mov	r4, r3
 800c2be:	bb34      	cbnz	r4, 800c30e <_malloc_r+0x82>
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	f7ff ffc2 	bl	800c24c <sbrk_aligned>
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	d14d      	bne.n	800c36a <_malloc_r+0xde>
 800c2ce:	6834      	ldr	r4, [r6, #0]
 800c2d0:	4626      	mov	r6, r4
 800c2d2:	2e00      	cmp	r6, #0
 800c2d4:	d140      	bne.n	800c358 <_malloc_r+0xcc>
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	4631      	mov	r1, r6
 800c2da:	4638      	mov	r0, r7
 800c2dc:	eb04 0803 	add.w	r8, r4, r3
 800c2e0:	f000 f878 	bl	800c3d4 <_sbrk_r>
 800c2e4:	4580      	cmp	r8, r0
 800c2e6:	d13a      	bne.n	800c35e <_malloc_r+0xd2>
 800c2e8:	6821      	ldr	r1, [r4, #0]
 800c2ea:	3503      	adds	r5, #3
 800c2ec:	1a6d      	subs	r5, r5, r1
 800c2ee:	f025 0503 	bic.w	r5, r5, #3
 800c2f2:	3508      	adds	r5, #8
 800c2f4:	2d0c      	cmp	r5, #12
 800c2f6:	bf38      	it	cc
 800c2f8:	250c      	movcc	r5, #12
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f7ff ffa5 	bl	800c24c <sbrk_aligned>
 800c302:	3001      	adds	r0, #1
 800c304:	d02b      	beq.n	800c35e <_malloc_r+0xd2>
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	442b      	add	r3, r5
 800c30a:	6023      	str	r3, [r4, #0]
 800c30c:	e00e      	b.n	800c32c <_malloc_r+0xa0>
 800c30e:	6822      	ldr	r2, [r4, #0]
 800c310:	1b52      	subs	r2, r2, r5
 800c312:	d41e      	bmi.n	800c352 <_malloc_r+0xc6>
 800c314:	2a0b      	cmp	r2, #11
 800c316:	d916      	bls.n	800c346 <_malloc_r+0xba>
 800c318:	1961      	adds	r1, r4, r5
 800c31a:	42a3      	cmp	r3, r4
 800c31c:	6025      	str	r5, [r4, #0]
 800c31e:	bf18      	it	ne
 800c320:	6059      	strne	r1, [r3, #4]
 800c322:	6863      	ldr	r3, [r4, #4]
 800c324:	bf08      	it	eq
 800c326:	6031      	streq	r1, [r6, #0]
 800c328:	5162      	str	r2, [r4, r5]
 800c32a:	604b      	str	r3, [r1, #4]
 800c32c:	4638      	mov	r0, r7
 800c32e:	f104 060b 	add.w	r6, r4, #11
 800c332:	f000 f865 	bl	800c400 <__malloc_unlock>
 800c336:	f026 0607 	bic.w	r6, r6, #7
 800c33a:	1d23      	adds	r3, r4, #4
 800c33c:	1af2      	subs	r2, r6, r3
 800c33e:	d0b6      	beq.n	800c2ae <_malloc_r+0x22>
 800c340:	1b9b      	subs	r3, r3, r6
 800c342:	50a3      	str	r3, [r4, r2]
 800c344:	e7b3      	b.n	800c2ae <_malloc_r+0x22>
 800c346:	6862      	ldr	r2, [r4, #4]
 800c348:	42a3      	cmp	r3, r4
 800c34a:	bf0c      	ite	eq
 800c34c:	6032      	streq	r2, [r6, #0]
 800c34e:	605a      	strne	r2, [r3, #4]
 800c350:	e7ec      	b.n	800c32c <_malloc_r+0xa0>
 800c352:	4623      	mov	r3, r4
 800c354:	6864      	ldr	r4, [r4, #4]
 800c356:	e7b2      	b.n	800c2be <_malloc_r+0x32>
 800c358:	4634      	mov	r4, r6
 800c35a:	6876      	ldr	r6, [r6, #4]
 800c35c:	e7b9      	b.n	800c2d2 <_malloc_r+0x46>
 800c35e:	230c      	movs	r3, #12
 800c360:	603b      	str	r3, [r7, #0]
 800c362:	4638      	mov	r0, r7
 800c364:	f000 f84c 	bl	800c400 <__malloc_unlock>
 800c368:	e7a1      	b.n	800c2ae <_malloc_r+0x22>
 800c36a:	6025      	str	r5, [r4, #0]
 800c36c:	e7de      	b.n	800c32c <_malloc_r+0xa0>
 800c36e:	bf00      	nop
 800c370:	24000480 	.word	0x24000480

0800c374 <_realloc_r>:
 800c374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c378:	4680      	mov	r8, r0
 800c37a:	4614      	mov	r4, r2
 800c37c:	460e      	mov	r6, r1
 800c37e:	b921      	cbnz	r1, 800c38a <_realloc_r+0x16>
 800c380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c384:	4611      	mov	r1, r2
 800c386:	f7ff bf81 	b.w	800c28c <_malloc_r>
 800c38a:	b92a      	cbnz	r2, 800c398 <_realloc_r+0x24>
 800c38c:	f7ff ff12 	bl	800c1b4 <_free_r>
 800c390:	4625      	mov	r5, r4
 800c392:	4628      	mov	r0, r5
 800c394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c398:	f000 f838 	bl	800c40c <_malloc_usable_size_r>
 800c39c:	4284      	cmp	r4, r0
 800c39e:	4607      	mov	r7, r0
 800c3a0:	d802      	bhi.n	800c3a8 <_realloc_r+0x34>
 800c3a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3a6:	d812      	bhi.n	800c3ce <_realloc_r+0x5a>
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	f7ff ff6e 	bl	800c28c <_malloc_r>
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	d0ed      	beq.n	800c392 <_realloc_r+0x1e>
 800c3b6:	42bc      	cmp	r4, r7
 800c3b8:	4622      	mov	r2, r4
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	bf28      	it	cs
 800c3be:	463a      	movcs	r2, r7
 800c3c0:	f7ff fbb8 	bl	800bb34 <memcpy>
 800c3c4:	4631      	mov	r1, r6
 800c3c6:	4640      	mov	r0, r8
 800c3c8:	f7ff fef4 	bl	800c1b4 <_free_r>
 800c3cc:	e7e1      	b.n	800c392 <_realloc_r+0x1e>
 800c3ce:	4635      	mov	r5, r6
 800c3d0:	e7df      	b.n	800c392 <_realloc_r+0x1e>
	...

0800c3d4 <_sbrk_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	4d06      	ldr	r5, [pc, #24]	; (800c3f0 <_sbrk_r+0x1c>)
 800c3d8:	2300      	movs	r3, #0
 800c3da:	4604      	mov	r4, r0
 800c3dc:	4608      	mov	r0, r1
 800c3de:	602b      	str	r3, [r5, #0]
 800c3e0:	f7f5 f816 	bl	8001410 <_sbrk>
 800c3e4:	1c43      	adds	r3, r0, #1
 800c3e6:	d102      	bne.n	800c3ee <_sbrk_r+0x1a>
 800c3e8:	682b      	ldr	r3, [r5, #0]
 800c3ea:	b103      	cbz	r3, 800c3ee <_sbrk_r+0x1a>
 800c3ec:	6023      	str	r3, [r4, #0]
 800c3ee:	bd38      	pop	{r3, r4, r5, pc}
 800c3f0:	24000488 	.word	0x24000488

0800c3f4 <__malloc_lock>:
 800c3f4:	4801      	ldr	r0, [pc, #4]	; (800c3fc <__malloc_lock+0x8>)
 800c3f6:	f000 b811 	b.w	800c41c <__retarget_lock_acquire_recursive>
 800c3fa:	bf00      	nop
 800c3fc:	2400048c 	.word	0x2400048c

0800c400 <__malloc_unlock>:
 800c400:	4801      	ldr	r0, [pc, #4]	; (800c408 <__malloc_unlock+0x8>)
 800c402:	f000 b80c 	b.w	800c41e <__retarget_lock_release_recursive>
 800c406:	bf00      	nop
 800c408:	2400048c 	.word	0x2400048c

0800c40c <_malloc_usable_size_r>:
 800c40c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c410:	1f18      	subs	r0, r3, #4
 800c412:	2b00      	cmp	r3, #0
 800c414:	bfbc      	itt	lt
 800c416:	580b      	ldrlt	r3, [r1, r0]
 800c418:	18c0      	addlt	r0, r0, r3
 800c41a:	4770      	bx	lr

0800c41c <__retarget_lock_acquire_recursive>:
 800c41c:	4770      	bx	lr

0800c41e <__retarget_lock_release_recursive>:
 800c41e:	4770      	bx	lr

0800c420 <_init>:
 800c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c422:	bf00      	nop
 800c424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c426:	bc08      	pop	{r3}
 800c428:	469e      	mov	lr, r3
 800c42a:	4770      	bx	lr

0800c42c <_fini>:
 800c42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42e:	bf00      	nop
 800c430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c432:	bc08      	pop	{r3}
 800c434:	469e      	mov	lr, r3
 800c436:	4770      	bx	lr
