
H7A3_SDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e80  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800a130  0800a130  0001a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a43c  0800a43c  0001a43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a444  0800a444  0001a444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a448  0800a448  0001a448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800a44c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000380  24000078  0800a4c4  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  240003f8  0800a4c4  000203f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018d9e  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cbd  00000000  00000000  00038e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001358  00000000  00000000  0003bb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001250  00000000  00000000  0003ce60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031b2b  00000000  00000000  0003e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a3b8  00000000  00000000  0006fbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00144e90  00000000  00000000  00089f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cee23  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005738  00000000  00000000  001cee74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a118 	.word	0x0800a118

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800a118 	.word	0x0800a118

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <UART_Printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART_Printf(const char* fmt, ...) {
 80006a4:	b40f      	push	{r0, r1, r2, r3}
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b0c2      	sub	sp, #264	; 0x108
 80006aa:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 80006ac:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80006b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80006b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80006b8:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 80006ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80006be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80006c2:	f107 0008 	add.w	r0, r7, #8
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80006cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d0:	f009 f8d4 	bl	800987c <vsniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fe09 	bl	80002f0 <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f107 0108 	add.w	r1, r7, #8
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <UART_Printf+0x5c>)
 80006ec:	f007 fe18 	bl	8008320 <HAL_UART_Transmit>
    va_end(args);
}
 80006f0:	bf00      	nop
 80006f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80006f6:	46bd      	mov	sp, r7
 80006f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006fc:	b004      	add	sp, #16
 80006fe:	4770      	bx	lr
 8000700:	24000168 	.word	0x24000168

08000704 <SDCard_init_scr>:

void SDCard_init_scr() {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800070a:	af08      	add	r7, sp, #32
    int code;
    UART_Printf("Ready!\r\n");
 800070c:	4884      	ldr	r0, [pc, #528]	; (8000920 <SDCard_init_scr+0x21c>)
 800070e:	f7ff ffc9 	bl	80006a4 <UART_Printf>

    code = SDCARD_Init();
 8000712:	f000 fda7 	bl	8001264 <SDCARD_Init>
 8000716:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
    if(code < 0) {
 800071a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800071e:	2b00      	cmp	r3, #0
 8000720:	da05      	bge.n	800072e <SDCard_init_scr+0x2a>
        UART_Printf("SDCARD_Init() failed: code = %d\r\n", code);
 8000722:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000726:	487f      	ldr	r0, [pc, #508]	; (8000924 <SDCard_init_scr+0x220>)
 8000728:	f7ff ffbc 	bl	80006a4 <UART_Printf>
        return;
 800072c:	e0f3      	b.n	8000916 <SDCard_init_scr+0x212>
    }

    UART_Printf("SDCARD_Init() done!\r\n");
 800072e:	487e      	ldr	r0, [pc, #504]	; (8000928 <SDCard_init_scr+0x224>)
 8000730:	f7ff ffb8 	bl	80006a4 <UART_Printf>

    uint32_t blocksNum;
    code = SDCARD_GetBlocksNumber(&blocksNum);
 8000734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fe7f 	bl	800143c <SDCARD_GetBlocksNumber>
 800073e:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
    if(code < 0) {
 8000742:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000746:	2b00      	cmp	r3, #0
 8000748:	da05      	bge.n	8000756 <SDCard_init_scr+0x52>
        UART_Printf("SDCARD_GetBlocksNumber() failed: code = %d\r\n", code);
 800074a:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800074e:	4877      	ldr	r0, [pc, #476]	; (800092c <SDCard_init_scr+0x228>)
 8000750:	f7ff ffa8 	bl	80006a4 <UART_Printf>
        return;
 8000754:	e0df      	b.n	8000916 <SDCard_init_scr+0x212>
    }

    UART_Printf("SDCARD_GetBlocksNumber() done! blocksNum = %u (or %u Mb)\r\n",
 8000756:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 800075a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800075e:	4a74      	ldr	r2, [pc, #464]	; (8000930 <SDCard_init_scr+0x22c>)
 8000760:	fba2 2303 	umull	r2, r3, r2, r3
 8000764:	09db      	lsrs	r3, r3, #7
 8000766:	461a      	mov	r2, r3
 8000768:	4872      	ldr	r0, [pc, #456]	; (8000934 <SDCard_init_scr+0x230>)
 800076a:	f7ff ff9b 	bl	80006a4 <UART_Printf>
        blocksNum, blocksNum/2000 /* same as * 512 / 1000 / 1000 */);

    uint32_t startBlockAddr = 0x00AAAA;
 800076e:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000772:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    uint32_t blockAddr = startBlockAddr;
 8000776:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800077a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    uint8_t block[512];
//    for(int i = 0; i < 500; i++){
//    	block[i] = i % 256;
//    }
    block[0] = 0xAA; block[1] = 0xBB; block[2] = 0xCC; block[3] = 0xDD; block[4] = 0xEE;
 800077e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000782:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000786:	22aa      	movs	r2, #170	; 0xaa
 8000788:	701a      	strb	r2, [r3, #0]
 800078a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800078e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000792:	22bb      	movs	r2, #187	; 0xbb
 8000794:	705a      	strb	r2, [r3, #1]
 8000796:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800079a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800079e:	22cc      	movs	r2, #204	; 0xcc
 80007a0:	709a      	strb	r2, [r3, #2]
 80007a2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80007a6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80007aa:	22dd      	movs	r2, #221	; 0xdd
 80007ac:	70da      	strb	r2, [r3, #3]
 80007ae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80007b2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80007b6:	22ee      	movs	r2, #238	; 0xee
 80007b8:	711a      	strb	r2, [r3, #4]

    snprintf((char*)block, sizeof(block), "0x%08X", (int)blockAddr);
 80007ba:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80007be:	f107 0008 	add.w	r0, r7, #8
 80007c2:	4a5d      	ldr	r2, [pc, #372]	; (8000938 <SDCard_init_scr+0x234>)
 80007c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c8:	f008 ffd8 	bl	800977c <sniprintf>

    code = SDCARD_WriteSingleBlock(blockAddr, &block[0]);
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	4619      	mov	r1, r3
 80007d2:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80007d6:	f000 ff07 	bl	80015e8 <SDCARD_WriteSingleBlock>
 80007da:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
    if(code < 0) {
 80007de:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	da05      	bge.n	80007f2 <SDCard_init_scr+0xee>
        UART_Printf("SDCARD_WriteSingleBlock() failed: code = %d\r\n", code);
 80007e6:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80007ea:	4854      	ldr	r0, [pc, #336]	; (800093c <SDCard_init_scr+0x238>)
 80007ec:	f7ff ff5a 	bl	80006a4 <UART_Printf>
        return;
 80007f0:	e091      	b.n	8000916 <SDCard_init_scr+0x212>
    }
    UART_Printf("SDCARD_WriteSingleBlock(0x%08X, ...) done!\r\n", blockAddr);
 80007f2:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80007f6:	4852      	ldr	r0, [pc, #328]	; (8000940 <SDCard_init_scr+0x23c>)
 80007f8:	f7ff ff54 	bl	80006a4 <UART_Printf>

    memset(block, 0, sizeof(block));
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f008 ffb0 	bl	800976c <memset>

    code = SDCARD_ReadSingleBlock(blockAddr, block);
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4619      	mov	r1, r3
 8000812:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000816:	f000 fe81 	bl	800151c <SDCARD_ReadSingleBlock>
 800081a:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
    if(code < 0) {
 800081e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000822:	2b00      	cmp	r3, #0
 8000824:	da05      	bge.n	8000832 <SDCard_init_scr+0x12e>
        UART_Printf("SDCARD_ReadSingleBlock() failed: code = %d\r\n", code);
 8000826:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800082a:	4846      	ldr	r0, [pc, #280]	; (8000944 <SDCard_init_scr+0x240>)
 800082c:	f7ff ff3a 	bl	80006a4 <UART_Printf>
        return;
 8000830:	e071      	b.n	8000916 <SDCard_init_scr+0x212>
    }

    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000832:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000836:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800083a:	781b      	ldrb	r3, [r3, #0]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800083c:	469c      	mov	ip, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800083e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000842:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000846:	785b      	ldrb	r3, [r3, #1]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000848:	469e      	mov	lr, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800084a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800084e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000852:	789b      	ldrb	r3, [r3, #2]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000854:	461a      	mov	r2, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000856:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800085a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800085e:	78db      	ldrb	r3, [r3, #3]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000860:	4619      	mov	r1, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000862:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000866:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800086a:	791b      	ldrb	r3, [r3, #4]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800086c:	4618      	mov	r0, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800086e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000872:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000876:	795b      	ldrb	r3, [r3, #5]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000878:	461c      	mov	r4, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800087a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800087e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000882:	799b      	ldrb	r3, [r3, #6]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000884:	461d      	mov	r5, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000886:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800088a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800088e:	79db      	ldrb	r3, [r3, #7]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8000890:	461e      	mov	r6, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8000892:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000896:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800089a:	7a1b      	ldrb	r3, [r3, #8]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800089c:	607b      	str	r3, [r7, #4]
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800089e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80008a2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80008a6:	7a5b      	ldrb	r3, [r3, #9]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80008a8:	9307      	str	r3, [sp, #28]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	9306      	str	r3, [sp, #24]
 80008ae:	9605      	str	r6, [sp, #20]
 80008b0:	9504      	str	r5, [sp, #16]
 80008b2:	9403      	str	r4, [sp, #12]
 80008b4:	9002      	str	r0, [sp, #8]
 80008b6:	9101      	str	r1, [sp, #4]
 80008b8:	9200      	str	r2, [sp, #0]
 80008ba:	4673      	mov	r3, lr
 80008bc:	4662      	mov	r2, ip
 80008be:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80008c2:	4821      	ldr	r0, [pc, #132]	; (8000948 <SDCard_init_scr+0x244>)
 80008c4:	f7ff feee 	bl	80006a4 <UART_Printf>
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 80008c8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80008cc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80008d0:	781b      	ldrb	r3, [r3, #0]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 80008d2:	4618      	mov	r0, r3
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 80008d4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80008d8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80008dc:	785b      	ldrb	r3, [r3, #1]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 80008de:	461c      	mov	r4, r3
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 80008e0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80008e4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80008e8:	789b      	ldrb	r3, [r3, #2]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 80008ea:	461a      	mov	r2, r3
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 80008ec:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80008f0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80008f4:	78db      	ldrb	r3, [r3, #3]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 80008f6:	4619      	mov	r1, r3
            blockAddr, block[0], block[1], block[2], block[3], block[10]);
 80008f8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80008fc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000900:	7a9b      	ldrb	r3, [r3, #10]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%x %x %x &x %x...\"\r\n",
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	9101      	str	r1, [sp, #4]
 8000906:	9200      	str	r2, [sp, #0]
 8000908:	4623      	mov	r3, r4
 800090a:	4602      	mov	r2, r0
 800090c:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8000910:	480e      	ldr	r0, [pc, #56]	; (800094c <SDCard_init_scr+0x248>)
 8000912:	f7ff fec7 	bl	80006a4 <UART_Printf>
//    if(code < 0) {
//        UART_Printf("SDCARD_ReadEnd() failed: code = %d\r\n", code);
//        return;
//    }
//    UART_Printf("SDCARD_ReadEnd() done!\r\n");
}
 8000916:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800091a:	46bd      	mov	sp, r7
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091e:	bf00      	nop
 8000920:	0800a130 	.word	0x0800a130
 8000924:	0800a13c 	.word	0x0800a13c
 8000928:	0800a160 	.word	0x0800a160
 800092c:	0800a178 	.word	0x0800a178
 8000930:	10624dd3 	.word	0x10624dd3
 8000934:	0800a1a8 	.word	0x0800a1a8
 8000938:	0800a1e4 	.word	0x0800a1e4
 800093c:	0800a1ec 	.word	0x0800a1ec
 8000940:	0800a21c 	.word	0x0800a21c
 8000944:	0800a24c 	.word	0x0800a24c
 8000948:	0800a27c 	.word	0x0800a27c
 800094c:	0800a2cc 	.word	0x0800a2cc

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b09c      	sub	sp, #112	; 0x70
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f001 f99f 	bl	8001c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 f87f 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095e:	f000 fa93 	bl	8000e88 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000962:	f000 f9bf 	bl	8000ce4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000966:	f000 fa09 	bl	8000d7c <MX_USB_OTG_HS_USB_Init>
  MX_DMA_Init();
 800096a:	f000 fa2f 	bl	8000dcc <MX_DMA_Init>
  MX_SPI1_Init();
 800096e:	f000 f8eb 	bl	8000b48 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000972:	f000 f93f 	bl	8000bf4 <MX_TIM3_Init>
  MX_WWDG1_Init();
 8000976:	f000 fa09 	bl	8000d8c <MX_WWDG1_Init>
  /* USER CODE BEGIN 2 */


  //SDMMC_Ex1();
  char temp[]="--------------------H7A3_SDCard----------------------"
 800097a:	4a2d      	ldr	r2, [pc, #180]	; (8000a30 <main+0xe0>)
 800097c:	463b      	mov	r3, r7
 800097e:	4611      	mov	r1, r2
 8000980:	226e      	movs	r2, #110	; 0x6e
 8000982:	4618      	mov	r0, r3
 8000984:	f008 fee4 	bl	8009750 <memcpy>
		  "\r\n Welcome to UART Port 115200 8 bit/stop1 none parity\r\n";
  HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp),30); // strlen = length of str -> config length of data
 8000988:	463b      	mov	r3, r7
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fcb0 	bl	80002f0 <strlen>
 8000990:	4603      	mov	r3, r0
 8000992:	b29a      	uxth	r2, r3
 8000994:	4639      	mov	r1, r7
 8000996:	231e      	movs	r3, #30
 8000998:	4826      	ldr	r0, [pc, #152]	; (8000a34 <main+0xe4>)
 800099a:	f007 fcc1 	bl	8008320 <HAL_UART_Transmit>


  //// PWM Test
  HAL_TIM_Base_Start(&htim3);
 800099e:	4826      	ldr	r0, [pc, #152]	; (8000a38 <main+0xe8>)
 80009a0:	f006 fbc0 	bl	8007124 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80009a4:	2108      	movs	r1, #8
 80009a6:	4824      	ldr	r0, [pc, #144]	; (8000a38 <main+0xe8>)
 80009a8:	f006 fc8e 	bl	80072c8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - timestamp_one >= 1000){
 80009ac:	f001 f9fa 	bl	8001da4 <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <main+0xec>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009bc:	d324      	bcc.n	8000a08 <main+0xb8>
		  timestamp_one = HAL_GetTick();
 80009be:	f001 f9f1 	bl	8001da4 <HAL_GetTick>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a1d      	ldr	r2, [pc, #116]	; (8000a3c <main+0xec>)
 80009c6:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009c8:	2102      	movs	r1, #2
 80009ca:	481d      	ldr	r0, [pc, #116]	; (8000a40 <main+0xf0>)
 80009cc:	f003 f9fd 	bl	8003dca <HAL_GPIO_TogglePin>

		  sprintf(txtUARTBF,"timestamp =  %d\r\n", (int)timestamp_one);
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <main+0xec>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	491b      	ldr	r1, [pc, #108]	; (8000a44 <main+0xf4>)
 80009d8:	481b      	ldr	r0, [pc, #108]	; (8000a48 <main+0xf8>)
 80009da:	f008 ff03 	bl	80097e4 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 80009de:	481a      	ldr	r0, [pc, #104]	; (8000a48 <main+0xf8>)
 80009e0:	f7ff fc86 	bl	80002f0 <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	230a      	movs	r3, #10
 80009ea:	4917      	ldr	r1, [pc, #92]	; (8000a48 <main+0xf8>)
 80009ec:	4811      	ldr	r0, [pc, #68]	; (8000a34 <main+0xe4>)
 80009ee:	f007 fc97 	bl	8008320 <HAL_UART_Transmit>

		  PWMOut1 = PWMOut1 + 10 % 10000;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <main+0xfc>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	330a      	adds	r3, #10
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <main+0xfc>)
 80009fc:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, PWMOut1); // dutycycle
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <main+0xfc>)
 8000a00:	881a      	ldrh	r2, [r3, #0]
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <main+0xe8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
	  	   * Prescalr = 64
	  	   * Reload = 4095
	  	   * (1/37KHz)* Prescalr * Reload = 7.08 sec
	  	   * */
#ifdef WWDG_EN
	  if(HAL_GetTick() - timestamp_wwdg >= timerefresh_wwdg){ // flag_dis_wwdg for test only && SRAM4->flag_dis_wwdg != 12
 8000a08:	f001 f9cc 	bl	8001da4 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <main+0x100>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <main+0x104>)
 8000a16:	8812      	ldrh	r2, [r2, #0]
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d3c7      	bcc.n	80009ac <main+0x5c>
	  	  timestamp_wwdg = HAL_GetTick();
 8000a1c:	f001 f9c2 	bl	8001da4 <HAL_GetTick>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <main+0x100>)
 8000a24:	6013      	str	r3, [r2, #0]
		  HAL_WWDG_Refresh(&hwwdg1);
 8000a26:	480c      	ldr	r0, [pc, #48]	; (8000a58 <main+0x108>)
 8000a28:	f008 fe58 	bl	80096dc <HAL_WWDG_Refresh>
	  if(HAL_GetTick() - timestamp_one >= 1000){
 8000a2c:	e7be      	b.n	80009ac <main+0x5c>
 8000a2e:	bf00      	nop
 8000a30:	0800a328 	.word	0x0800a328
 8000a34:	24000168 	.word	0x24000168
 8000a38:	2400011c 	.word	0x2400011c
 8000a3c:	24000374 	.word	0x24000374
 8000a40:	58021000 	.word	0x58021000
 8000a44:	0800a314 	.word	0x0800a314
 8000a48:	2400037c 	.word	0x2400037c
 8000a4c:	24000000 	.word	0x24000000
 8000a50:	24000378 	.word	0x24000378
 8000a54:	24000002 	.word	0x24000002
 8000a58:	240002e8 	.word	0x240002e8

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09c      	sub	sp, #112	; 0x70
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	224c      	movs	r2, #76	; 0x4c
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f008 fe7e 	bl	800976c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2220      	movs	r2, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f008 fe78 	bl	800976c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000a7c:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <SystemClock_Config+0xe4>)
 8000a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a86:	2004      	movs	r0, #4
 8000a88:	f003 f9d4 	bl	8003e34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <SystemClock_Config+0xe8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a2b      	ldr	r2, [pc, #172]	; (8000b44 <SystemClock_Config+0xe8>)
 8000a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <SystemClock_Config+0xe8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa8:	bf00      	nop
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <SystemClock_Config+0xe8>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab6:	d1f8      	bne.n	8000aaa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ab8:	2321      	movs	r3, #33	; 0x21
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000abc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000ad2:	2319      	movs	r3, #25
 8000ad4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ada:	2304      	movs	r3, #4
 8000adc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 f9f8 	bl	8003ee8 <HAL_RCC_OscConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000afe:	f000 fb1c 	bl	800113a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b02:	233f      	movs	r3, #63	; 0x3f
 8000b04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b06:	2303      	movs	r3, #3
 8000b08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 fde2 	bl	80046f0 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000b32:	f000 fb02 	bl	800113a <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3770      	adds	r7, #112	; 0x70
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	58024400 	.word	0x58024400
 8000b44:	58024800 	.word	0x58024800

08000b48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b4e:	4a28      	ldr	r2, [pc, #160]	; (8000bf0 <MX_SPI1_Init+0xa8>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b62:	2207      	movs	r2, #7
 8000b64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000b9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_SPI1_Init+0xa4>)
 8000bda:	f005 fc43 	bl	8006464 <HAL_SPI_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000be4:	f000 faa9 	bl	800113a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	24000094 	.word	0x24000094
 8000bf0:	40013000 	.word	0x40013000

08000bf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c14:	463b      	mov	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c28:	4a2d      	ldr	r2, [pc, #180]	; (8000ce0 <MX_TIM3_Init+0xec>)
 8000c2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c2e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000c3a:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c4e:	4823      	ldr	r0, [pc, #140]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c50:	f006 fa11 	bl	8007076 <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000c5a:	f000 fa6e 	bl	800113a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481c      	ldr	r0, [pc, #112]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c6c:	f006 fd4e 	bl	800770c <HAL_TIM_ConfigClockSource>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000c76:	f000 fa60 	bl	800113a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c7a:	4818      	ldr	r0, [pc, #96]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c7c:	f006 fac2 	bl	8007204 <HAL_TIM_PWM_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c86:	f000 fa58 	bl	800113a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4810      	ldr	r0, [pc, #64]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c9a:	f007 fa63 	bl	8008164 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ca4:	f000 fa49 	bl	800113a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca8:	2360      	movs	r3, #96	; 0x60
 8000caa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2208      	movs	r2, #8
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000cc0:	f006 fc10 	bl	80074e4 <HAL_TIM_PWM_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000cca:	f000 fa36 	bl	800113a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cce:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000cd0:	f000 fda0 	bl	8001814 <HAL_TIM_MspPostInit>

}
 8000cd4:	bf00      	nop
 8000cd6:	3738      	adds	r7, #56	; 0x38
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2400011c 	.word	0x2400011c
 8000ce0:	40000400 	.word	0x40000400

08000ce4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000cea:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <MX_USART3_UART_Init+0x94>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d2c:	4811      	ldr	r0, [pc, #68]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d2e:	f007 faa7 	bl	8008280 <HAL_UART_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d38:	f000 f9ff 	bl	800113a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d40:	f008 fbde 	bl	8009500 <HAL_UARTEx_SetTxFifoThreshold>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d4a:	f000 f9f6 	bl	800113a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d52:	f008 fc13 	bl	800957c <HAL_UARTEx_SetRxFifoThreshold>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d5c:	f000 f9ed 	bl	800113a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d62:	f008 fb94 	bl	800948e <HAL_UARTEx_DisableFifoMode>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f000 f9e5 	bl	800113a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	24000168 	.word	0x24000168
 8000d78:	40004800 	.word	0x40004800

08000d7c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <MX_WWDG1_Init>:
  * @brief WWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG1_Init 0 */

  /* USER CODE BEGIN WWDG1_Init 1 */

  /* USER CODE END WWDG1_Init 1 */
  hwwdg1.Instance = WWDG1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_WWDG1_Init+0x38>)
 8000d92:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <MX_WWDG1_Init+0x3c>)
 8000d94:	601a      	str	r2, [r3, #0]
  hwwdg1.Init.Prescaler = WWDG_PRESCALER_128;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_WWDG1_Init+0x38>)
 8000d98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000d9c:	605a      	str	r2, [r3, #4]
  hwwdg1.Init.Window = 112;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_WWDG1_Init+0x38>)
 8000da0:	2270      	movs	r2, #112	; 0x70
 8000da2:	609a      	str	r2, [r3, #8]
  hwwdg1.Init.Counter = 127;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <MX_WWDG1_Init+0x38>)
 8000da6:	227f      	movs	r2, #127	; 0x7f
 8000da8:	60da      	str	r2, [r3, #12]
  hwwdg1.Init.EWIMode = WWDG_EWI_DISABLE;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_WWDG1_Init+0x38>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg1) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_WWDG1_Init+0x38>)
 8000db2:	f008 fc6f 	bl	8009694 <HAL_WWDG_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_WWDG1_Init+0x34>
  {
    Error_Handler();
 8000dbc:	f000 f9bd 	bl	800113a <Error_Handler>
  }
  /* USER CODE BEGIN WWDG1_Init 2 */

  /* USER CODE END WWDG1_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	240002e8 	.word	0x240002e8
 8000dc8:	50003000 	.word	0x50003000

08000dcc <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <MX_DMA_Init+0xb0>)
 8000dd4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000dd8:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <MX_DMA_Init+0xb0>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <MX_DMA_Init+0xb0>)
 8000de4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000df2:	4a24      	ldr	r2, [pc, #144]	; (8000e84 <MX_DMA_Init+0xb8>)
 8000df4:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e08:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e10:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_dma_generator0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000e32:	2203      	movs	r2, #3
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_dma_generator0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_dma_generator0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000e42:	480f      	ldr	r0, [pc, #60]	; (8000e80 <MX_DMA_Init+0xb4>)
 8000e44:	f001 f8ca 	bl	8001fdc <HAL_DMA_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_DMA_Init+0x86>
  {
    Error_Handler( );
 8000e4e:	f000 f974 	bl	800113a <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	200c      	movs	r0, #12
 8000e58:	f001 f88b 	bl	8001f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e5c:	200c      	movs	r0, #12
 8000e5e:	f001 f8a2 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	200d      	movs	r0, #13
 8000e68:	f001 f883 	bl	8001f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e6c:	200d      	movs	r0, #13
 8000e6e:	f001 f89a 	bl	8001fa6 <HAL_NVIC_EnableIRQ>

}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	240002fc 	.word	0x240002fc
 8000e84:	40020010 	.word	0x40020010

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	; 0x38
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b97      	ldr	r3, [pc, #604]	; (80010fc <MX_GPIO_Init+0x274>)
 8000ea0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea4:	4a95      	ldr	r2, [pc, #596]	; (80010fc <MX_GPIO_Init+0x274>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eae:	4b93      	ldr	r3, [pc, #588]	; (80010fc <MX_GPIO_Init+0x274>)
 8000eb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	623b      	str	r3, [r7, #32]
 8000eba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ebc:	4b8f      	ldr	r3, [pc, #572]	; (80010fc <MX_GPIO_Init+0x274>)
 8000ebe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ec2:	4a8e      	ldr	r2, [pc, #568]	; (80010fc <MX_GPIO_Init+0x274>)
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ecc:	4b8b      	ldr	r3, [pc, #556]	; (80010fc <MX_GPIO_Init+0x274>)
 8000ece:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed2:	f003 0320 	and.w	r3, r3, #32
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	4b88      	ldr	r3, [pc, #544]	; (80010fc <MX_GPIO_Init+0x274>)
 8000edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee0:	4a86      	ldr	r2, [pc, #536]	; (80010fc <MX_GPIO_Init+0x274>)
 8000ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eea:	4b84      	ldr	r3, [pc, #528]	; (80010fc <MX_GPIO_Init+0x274>)
 8000eec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef4:	61bb      	str	r3, [r7, #24]
 8000ef6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b80      	ldr	r3, [pc, #512]	; (80010fc <MX_GPIO_Init+0x274>)
 8000efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000efe:	4a7f      	ldr	r2, [pc, #508]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f08:	4b7c      	ldr	r3, [pc, #496]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b79      	ldr	r3, [pc, #484]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f1c:	4a77      	ldr	r2, [pc, #476]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f26:	4b75      	ldr	r3, [pc, #468]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f34:	4b71      	ldr	r3, [pc, #452]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f3a:	4a70      	ldr	r2, [pc, #448]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f44:	4b6d      	ldr	r3, [pc, #436]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f52:	4b6a      	ldr	r3, [pc, #424]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f58:	4a68      	ldr	r2, [pc, #416]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f62:	4b66      	ldr	r3, [pc, #408]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f70:	4b62      	ldr	r3, [pc, #392]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f76:	4a61      	ldr	r2, [pc, #388]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f80:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <MX_GPIO_Init+0x274>)
 8000f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f94:	485a      	ldr	r0, [pc, #360]	; (8001100 <MX_GPIO_Init+0x278>)
 8000f96:	f002 feff 	bl	8003d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa0:	4858      	ldr	r0, [pc, #352]	; (8001104 <MX_GPIO_Init+0x27c>)
 8000fa2:	f002 fef9 	bl	8003d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SDCard_CS_GPIO_Port, SPI1_SDCard_CS_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fac:	4856      	ldr	r0, [pc, #344]	; (8001108 <MX_GPIO_Init+0x280>)
 8000fae:	f002 fef3 	bl	8003d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4855      	ldr	r0, [pc, #340]	; (800110c <MX_GPIO_Init+0x284>)
 8000fb8:	f002 feee 	bl	8003d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	484f      	ldr	r0, [pc, #316]	; (8001110 <MX_GPIO_Init+0x288>)
 8000fd4:	f002 fd30 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4843      	ldr	r0, [pc, #268]	; (8001100 <MX_GPIO_Init+0x278>)
 8000ff2:	f002 fd21 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ff6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	4619      	mov	r1, r3
 800100e:	483d      	ldr	r0, [pc, #244]	; (8001104 <MX_GPIO_Init+0x27c>)
 8001010:	f002 fd12 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SDCard_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_SDCard_CS_Pin;
 8001014:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_SDCard_CS_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	4836      	ldr	r0, [pc, #216]	; (8001108 <MX_GPIO_Init+0x280>)
 800102e:	f002 fd03 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001036:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	4833      	ldr	r0, [pc, #204]	; (8001114 <MX_GPIO_Init+0x28c>)
 8001048:	f002 fcf6 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800104c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800105e:	230c      	movs	r3, #12
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	4829      	ldr	r0, [pc, #164]	; (8001110 <MX_GPIO_Init+0x288>)
 800106a:	f002 fce5 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800106e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	2300      	movs	r3, #0
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001080:	4619      	mov	r1, r3
 8001082:	4825      	ldr	r0, [pc, #148]	; (8001118 <MX_GPIO_Init+0x290>)
 8001084:	f002 fcd8 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800109a:	230a      	movs	r3, #10
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	481c      	ldr	r0, [pc, #112]	; (8001118 <MX_GPIO_Init+0x290>)
 80010a6:	f002 fcc7 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80010aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4815      	ldr	r0, [pc, #84]	; (8001118 <MX_GPIO_Init+0x290>)
 80010c4:	f002 fcb8 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010c8:	2302      	movs	r3, #2
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	480b      	ldr	r0, [pc, #44]	; (800110c <MX_GPIO_Init+0x284>)
 80010e0:	f002 fcaa 	bl	8003a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2028      	movs	r0, #40	; 0x28
 80010ea:	f000 ff42 	bl	8001f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ee:	2028      	movs	r0, #40	; 0x28
 80010f0:	f000 ff59 	bl	8001fa6 <HAL_NVIC_EnableIRQ>

}
 80010f4:	bf00      	nop
 80010f6:	3738      	adds	r7, #56	; 0x38
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	58024400 	.word	0x58024400
 8001100:	58021400 	.word	0x58021400
 8001104:	58020400 	.word	0x58020400
 8001108:	58020c00 	.word	0x58020c00
 800110c:	58021000 	.word	0x58021000
 8001110:	58020800 	.word	0x58020800
 8001114:	58021800 	.word	0x58021800
 8001118:	58020000 	.word	0x58020000

0800111c <HAL_GPIO_EXTI_Callback>:
	    f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
}
#endif


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800112c:	d101      	bne.n	8001132 <HAL_GPIO_EXTI_Callback+0x16>
			//timerefresh_wwdg = 1000;
			SDCard_init_scr();
 800112e:	f7ff fae9 	bl	8000704 <SDCard_init_scr>
		}
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113e:	b672      	cpsid	i
}
 8001140:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001142:	e7fe      	b.n	8001142 <Error_Handler+0x8>

08001144 <SDCARD_Select>:
/* vim: set ai et ts=4 sw=4: */

#include "sdcard.h"

static void SDCARD_Select() {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114e:	4802      	ldr	r0, [pc, #8]	; (8001158 <SDCARD_Select+0x14>)
 8001150:	f002 fe22 	bl	8003d98 <HAL_GPIO_WritePin>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	58020c00 	.word	0x58020c00

0800115c <SDCARD_Unselect>:

void SDCARD_Unselect() {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001166:	4802      	ldr	r0, [pc, #8]	; (8001170 <SDCARD_Unselect+0x14>)
 8001168:	f002 fe16 	bl	8003d98 <HAL_GPIO_WritePin>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58020c00 	.word	0x58020c00

08001174 <SDCARD_ReadR1>:
     ||`----- 5th bit (c): error in the sequence of erase commands
     |`------ 6th bit (b): misaligned addres used in command
     `------- 7th bit (a): command argument outside allowed range
             (8th bit is always zero)
*/
static uint8_t SDCARD_ReadR1() {
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af02      	add	r7, sp, #8
    uint8_t r1;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 800117a:	23ff      	movs	r3, #255	; 0xff
 800117c:	71bb      	strb	r3, [r7, #6]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 800117e:	1dfa      	adds	r2, r7, #7
 8001180:	1db9      	adds	r1, r7, #6
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <SDCARD_ReadR1+0x34>)
 800118c:	f005 fc62 	bl	8006a54 <HAL_SPI_TransmitReceive>
        if((r1 & 0x80) == 0) // 8th bit alwyas zero, r1 recevied
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	b25b      	sxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	da00      	bge.n	800119a <SDCARD_ReadR1+0x26>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8001198:	e7f1      	b.n	800117e <SDCARD_ReadR1+0xa>
            break;
 800119a:	bf00      	nop
    }
    return r1;
 800119c:	79fb      	ldrb	r3, [r7, #7]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	24000094 	.word	0x24000094

080011ac <SDCARD_WaitDataToken>:
#define DATA_TOKEN_CMD17 0xFE
#define DATA_TOKEN_CMD18 0xFE
#define DATA_TOKEN_CMD24 0xFE
#define DATA_TOKEN_CMD25 0xFC

static int SDCARD_WaitDataToken(uint8_t token) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
    uint8_t fb;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 80011b6:	23ff      	movs	r3, #255	; 0xff
 80011b8:	73bb      	strb	r3, [r7, #14]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &fb, sizeof(fb), HAL_MAX_DELAY);
 80011ba:	f107 020f 	add.w	r2, r7, #15
 80011be:	f107 010e 	add.w	r1, r7, #14
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	4809      	ldr	r0, [pc, #36]	; (80011f0 <SDCARD_WaitDataToken+0x44>)
 80011cc:	f005 fc42 	bl	8006a54 <HAL_SPI_TransmitReceive>
        if(fb == token)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d005      	beq.n	80011e4 <SDCARD_WaitDataToken+0x38>
            break;

        if(fb != 0xFF)
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2bff      	cmp	r3, #255	; 0xff
 80011dc:	d0ed      	beq.n	80011ba <SDCARD_WaitDataToken+0xe>
            return -1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e001      	b.n	80011e8 <SDCARD_WaitDataToken+0x3c>
            break;
 80011e4:	bf00      	nop
    }
    return 0;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	24000094 	.word	0x24000094

080011f4 <SDCARD_ReadBytes>:

static int SDCARD_ReadBytes(uint8_t* buff, size_t buff_size) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 80011fe:	23ff      	movs	r3, #255	; 0xff
 8001200:	73fb      	strb	r3, [r7, #15]
    while(buff_size > 0) {
 8001202:	e00f      	b.n	8001224 <SDCARD_ReadBytes+0x30>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 8001204:	f107 010f 	add.w	r1, r7, #15
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <SDCARD_ReadBytes+0x40>)
 8001214:	f005 fc1e 	bl	8006a54 <HAL_SPI_TransmitReceive>
        buff++;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3301      	adds	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
        buff_size--;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3b01      	subs	r3, #1
 8001222:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1ec      	bne.n	8001204 <SDCARD_ReadBytes+0x10>
    }

    return 0;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	24000094 	.word	0x24000094

08001238 <SDCARD_WaitNotBusy>:

static int SDCARD_WaitNotBusy() {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
    uint8_t busy;
    do {
        if(SDCARD_ReadBytes(&busy, sizeof(busy)) < 0) {
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	2101      	movs	r1, #1
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ffd6 	bl	80011f4 <SDCARD_ReadBytes>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	da02      	bge.n	8001254 <SDCARD_WaitNotBusy+0x1c>
            return -1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e003      	b.n	800125c <SDCARD_WaitNotBusy+0x24>
        }
    } while(busy != 0xFF);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2bff      	cmp	r3, #255	; 0xff
 8001258:	d1f1      	bne.n	800123e <SDCARD_WaitNotBusy+0x6>

    return 0;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <SDCARD_Init>:
 
int SDCARD_Init() {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0

    Set DI and CS high and apply 74 or more clock pulses to SCLK. Without this
    step under certain circumstances SD-card will not work. For instance, when
    multiple SPI devices are sharing the same bus (i.e. MISO, MOSI, CS).
    */
    SDCARD_Unselect();
 800126a:	f7ff ff77 	bl	800115c <SDCARD_Unselect>

    uint8_t high = 0xFF;
 800126e:	23ff      	movs	r3, #255	; 0xff
 8001270:	72bb      	strb	r3, [r7, #10]
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	e00a      	b.n	800128e <SDCARD_Init+0x2a>
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, &high, sizeof(high), HAL_MAX_DELAY);
 8001278:	f107 010a 	add.w	r1, r7, #10
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	2201      	movs	r2, #1
 8001282:	4868      	ldr	r0, [pc, #416]	; (8001424 <SDCARD_Init+0x1c0>)
 8001284:	f005 f9f4 	bl	8006670 <HAL_SPI_Transmit>
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b09      	cmp	r3, #9
 8001292:	ddf1      	ble.n	8001278 <SDCARD_Init+0x14>
    }

    SDCARD_Select();
 8001294:	f7ff ff56 	bl	8001144 <SDCARD_Select>
    /*
    Step 2.
    
    Send CMD0 (GO_IDLE_STATE): Reset the SD card.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001298:	f7ff ffce 	bl	8001238 <SDCARD_WaitNotBusy>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	da04      	bge.n	80012ac <SDCARD_Init+0x48>
        SDCARD_Unselect();
 80012a2:	f7ff ff5b 	bl	800115c <SDCARD_Unselect>
        return -1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	e0b6      	b.n	800141a <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x00 /* CMD0 */, 0x00, 0x00, 0x00, 0x00 /* ARG = 0 */, (0x4A << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	2206      	movs	r2, #6
 80012b2:	495d      	ldr	r1, [pc, #372]	; (8001428 <SDCARD_Init+0x1c4>)
 80012b4:	485b      	ldr	r0, [pc, #364]	; (8001424 <SDCARD_Init+0x1c0>)
 80012b6:	f005 f9db 	bl	8006670 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 80012ba:	f7ff ff5b 	bl	8001174 <SDCARD_ReadR1>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d004      	beq.n	80012ce <SDCARD_Init+0x6a>
        SDCARD_Unselect();
 80012c4:	f7ff ff4a 	bl	800115c <SDCARD_Unselect>
        return -1;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	e0a5      	b.n	800141a <SDCARD_Init+0x1b6>
    MMC version 3. If accepted, R7 response (R1(0x01) + 32-bit return value)
    will be returned. The lower 12 bits in the return value 0x1AA means that
    the card is SDC version 2 and it can work at voltage range of 2.7 to 3.6
    volts. If not the case, the card should be rejected.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80012ce:	f7ff ffb3 	bl	8001238 <SDCARD_WaitNotBusy>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	da04      	bge.n	80012e2 <SDCARD_Init+0x7e>
        SDCARD_Unselect();
 80012d8:	f7ff ff40 	bl	800115c <SDCARD_Unselect>
        return -1;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	e09b      	b.n	800141a <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x08 /* CMD8 */, 0x00, 0x00, 0x01, 0xAA /* ARG */, (0x43 << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	2206      	movs	r2, #6
 80012e8:	4950      	ldr	r1, [pc, #320]	; (800142c <SDCARD_Init+0x1c8>)
 80012ea:	484e      	ldr	r0, [pc, #312]	; (8001424 <SDCARD_Init+0x1c0>)
 80012ec:	f005 f9c0 	bl	8006670 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 80012f0:	f7ff ff40 	bl	8001174 <SDCARD_ReadR1>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d004      	beq.n	8001304 <SDCARD_Init+0xa0>
        SDCARD_Unselect();
 80012fa:	f7ff ff2f 	bl	800115c <SDCARD_Unselect>
        return -2; // not an SDHC/SDXC card (i.e. SDSC, not supported)
 80012fe:	f06f 0301 	mvn.w	r3, #1
 8001302:	e08a      	b.n	800141a <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2104      	movs	r1, #4
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff73 	bl	80011f4 <SDCARD_ReadBytes>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	da04      	bge.n	800131e <SDCARD_Init+0xba>
            SDCARD_Unselect();
 8001314:	f7ff ff22 	bl	800115c <SDCARD_Unselect>
            return -3;
 8001318:	f06f 0302 	mvn.w	r3, #2
 800131c:	e07d      	b.n	800141a <SDCARD_Init+0x1b6>
        }

        if(((resp[2] & 0x01) != 1) || (resp[3] != 0xAA)) {
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <SDCARD_Init+0xca>
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2baa      	cmp	r3, #170	; 0xaa
 800132c:	d004      	beq.n	8001338 <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 800132e:	f7ff ff15 	bl	800115c <SDCARD_Unselect>
            return -4;
 8001332:	f06f 0303 	mvn.w	r3, #3
 8001336:	e070      	b.n	800141a <SDCARD_Init+0x1b6>
    Step 4.

    And then initiate initialization with ACMD41 with HCS flag (bit 30).
    */
    for(;;) {
        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001338:	f7ff ff7e 	bl	8001238 <SDCARD_WaitNotBusy>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	da04      	bge.n	800134c <SDCARD_Init+0xe8>
            SDCARD_Unselect();
 8001342:	f7ff ff0b 	bl	800115c <SDCARD_Unselect>
            return -1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e066      	b.n	800141a <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x37 /* CMD55 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	2206      	movs	r2, #6
 8001352:	4937      	ldr	r1, [pc, #220]	; (8001430 <SDCARD_Init+0x1cc>)
 8001354:	4833      	ldr	r0, [pc, #204]	; (8001424 <SDCARD_Init+0x1c0>)
 8001356:	f005 f98b 	bl	8006670 <HAL_SPI_Transmit>
        }

        if(SDCARD_ReadR1() != 0x01) {
 800135a:	f7ff ff0b 	bl	8001174 <SDCARD_ReadR1>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d004      	beq.n	800136e <SDCARD_Init+0x10a>
            SDCARD_Unselect();
 8001364:	f7ff fefa 	bl	800115c <SDCARD_Unselect>
            return -5;
 8001368:	f06f 0304 	mvn.w	r3, #4
 800136c:	e055      	b.n	800141a <SDCARD_Init+0x1b6>
        }

        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 800136e:	f7ff ff63 	bl	8001238 <SDCARD_WaitNotBusy>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	da04      	bge.n	8001382 <SDCARD_Init+0x11e>
            SDCARD_Unselect();
 8001378:	f7ff fef0 	bl	800115c <SDCARD_Unselect>
            return -1;
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	e04b      	b.n	800141a <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x29 /* ACMD41 */, 0x40, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	2206      	movs	r2, #6
 8001388:	492a      	ldr	r1, [pc, #168]	; (8001434 <SDCARD_Init+0x1d0>)
 800138a:	4826      	ldr	r0, [pc, #152]	; (8001424 <SDCARD_Init+0x1c0>)
 800138c:	f005 f970 	bl	8006670 <HAL_SPI_Transmit>
        }

        uint8_t r1 = SDCARD_ReadR1();
 8001390:	f7ff fef0 	bl	8001174 <SDCARD_ReadR1>
 8001394:	4603      	mov	r3, r0
 8001396:	72fb      	strb	r3, [r7, #11]
        if(r1 == 0x00) {
 8001398:	7afb      	ldrb	r3, [r7, #11]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <SDCARD_Init+0x14a>
            break;
        }

        if(r1 != 0x01) {
 800139e:	7afb      	ldrb	r3, [r7, #11]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d0c9      	beq.n	8001338 <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 80013a4:	f7ff feda 	bl	800115c <SDCARD_Unselect>
            return -6;
 80013a8:	f06f 0305 	mvn.w	r3, #5
 80013ac:	e035      	b.n	800141a <SDCARD_Init+0x1b6>
            break;
 80013ae:	bf00      	nop

    After the initialization completed, read OCR register with CMD58 and check
    CCS flag (bit 30). When it is set, the card is a high-capacity card known
    as SDHC/SDXC.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80013b0:	f7ff ff42 	bl	8001238 <SDCARD_WaitNotBusy>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	da04      	bge.n	80013c4 <SDCARD_Init+0x160>
        SDCARD_Unselect();
 80013ba:	f7ff fecf 	bl	800115c <SDCARD_Unselect>
        return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e02a      	b.n	800141a <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x3A /* CMD58 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	2206      	movs	r2, #6
 80013ca:	491b      	ldr	r1, [pc, #108]	; (8001438 <SDCARD_Init+0x1d4>)
 80013cc:	4815      	ldr	r0, [pc, #84]	; (8001424 <SDCARD_Init+0x1c0>)
 80013ce:	f005 f94f 	bl	8006670 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 80013d2:	f7ff fecf 	bl	8001174 <SDCARD_ReadR1>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <SDCARD_Init+0x182>
        SDCARD_Unselect();
 80013dc:	f7ff febe 	bl	800115c <SDCARD_Unselect>
        return -7;
 80013e0:	f06f 0306 	mvn.w	r3, #6
 80013e4:	e019      	b.n	800141a <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 80013e6:	463b      	mov	r3, r7
 80013e8:	2104      	movs	r1, #4
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff02 	bl	80011f4 <SDCARD_ReadBytes>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da04      	bge.n	8001400 <SDCARD_Init+0x19c>
            SDCARD_Unselect();
 80013f6:	f7ff feb1 	bl	800115c <SDCARD_Unselect>
            return -8;
 80013fa:	f06f 0307 	mvn.w	r3, #7
 80013fe:	e00c      	b.n	800141a <SDCARD_Init+0x1b6>
        }

        if((resp[0] & 0xC0) != 0xC0) {
 8001400:	783b      	ldrb	r3, [r7, #0]
 8001402:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001406:	2bc0      	cmp	r3, #192	; 0xc0
 8001408:	d004      	beq.n	8001414 <SDCARD_Init+0x1b0>
            SDCARD_Unselect();
 800140a:	f7ff fea7 	bl	800115c <SDCARD_Unselect>
            return -9;
 800140e:	f06f 0308 	mvn.w	r3, #8
 8001412:	e002      	b.n	800141a <SDCARD_Init+0x1b6>
        }
    }

    SDCARD_Unselect();
 8001414:	f7ff fea2 	bl	800115c <SDCARD_Unselect>
    return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	24000094 	.word	0x24000094
 8001428:	0800a398 	.word	0x0800a398
 800142c:	0800a3a0 	.word	0x0800a3a0
 8001430:	0800a3a8 	.word	0x0800a3a8
 8001434:	0800a3b0 	.word	0x0800a3b0
 8001438:	0800a3b8 	.word	0x0800a3b8

0800143c <SDCARD_GetBlocksNumber>:


int SDCARD_GetBlocksNumber(uint32_t* num) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    uint8_t csd[16];
    uint8_t crc[2];

    SDCARD_Select();
 8001444:	f7ff fe7e 	bl	8001144 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001448:	f7ff fef6 	bl	8001238 <SDCARD_WaitNotBusy>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	da04      	bge.n	800145c <SDCARD_GetBlocksNumber+0x20>
        SDCARD_Unselect();
 8001452:	f7ff fe83 	bl	800115c <SDCARD_Unselect>
        return -1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e057      	b.n	800150c <SDCARD_GetBlocksNumber+0xd0>

    /* CMD9 (SEND_CSD) command */
    {
        static const uint8_t cmd[] =
            { 0x40 | 0x09 /* CMD9 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	2206      	movs	r2, #6
 8001462:	492c      	ldr	r1, [pc, #176]	; (8001514 <SDCARD_GetBlocksNumber+0xd8>)
 8001464:	482c      	ldr	r0, [pc, #176]	; (8001518 <SDCARD_GetBlocksNumber+0xdc>)
 8001466:	f005 f903 	bl	8006670 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 800146a:	f7ff fe83 	bl	8001174 <SDCARD_ReadR1>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d004      	beq.n	800147e <SDCARD_GetBlocksNumber+0x42>
        SDCARD_Unselect();
 8001474:	f7ff fe72 	bl	800115c <SDCARD_Unselect>
        return -2;
 8001478:	f06f 0301 	mvn.w	r3, #1
 800147c:	e046      	b.n	800150c <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD9) < 0) {
 800147e:	20fe      	movs	r0, #254	; 0xfe
 8001480:	f7ff fe94 	bl	80011ac <SDCARD_WaitDataToken>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	da04      	bge.n	8001494 <SDCARD_GetBlocksNumber+0x58>
        SDCARD_Unselect();
 800148a:	f7ff fe67 	bl	800115c <SDCARD_Unselect>
        return -3;
 800148e:	f06f 0302 	mvn.w	r3, #2
 8001492:	e03b      	b.n	800150c <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(csd, sizeof(csd)) < 0) {
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2110      	movs	r1, #16
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff feaa 	bl	80011f4 <SDCARD_ReadBytes>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da04      	bge.n	80014b0 <SDCARD_GetBlocksNumber+0x74>
        SDCARD_Unselect();
 80014a6:	f7ff fe59 	bl	800115c <SDCARD_Unselect>
        return -4;
 80014aa:	f06f 0303 	mvn.w	r3, #3
 80014ae:	e02d      	b.n	800150c <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(crc, sizeof(crc)) < 0) {
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	2102      	movs	r1, #2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe9c 	bl	80011f4 <SDCARD_ReadBytes>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da04      	bge.n	80014cc <SDCARD_GetBlocksNumber+0x90>
        SDCARD_Unselect();
 80014c2:	f7ff fe4b 	bl	800115c <SDCARD_Unselect>
        return -5;
 80014c6:	f06f 0304 	mvn.w	r3, #4
 80014ca:	e01f      	b.n	800150c <SDCARD_GetBlocksNumber+0xd0>
    }

    SDCARD_Unselect();
 80014cc:	f7ff fe46 	bl	800115c <SDCARD_Unselect>

    // first byte is VVxxxxxxxx where VV is csd.version
    if((csd[0] & 0xC0) != 0x40) // csd.version != 1
 80014d0:	7b3b      	ldrb	r3, [r7, #12]
 80014d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014d6:	2b40      	cmp	r3, #64	; 0x40
 80014d8:	d002      	beq.n	80014e0 <SDCARD_GetBlocksNumber+0xa4>
        return -6;
 80014da:	f06f 0305 	mvn.w	r3, #5
 80014de:	e015      	b.n	800150c <SDCARD_GetBlocksNumber+0xd0>

    uint32_t tmp = csd[7] & 0x3F; // two bits are reserved
 80014e0:	7cfb      	ldrb	r3, [r7, #19]
 80014e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e6:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[8];
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	7d3a      	ldrb	r2, [r7, #20]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[9];
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	7d7a      	ldrb	r2, [r7, #21]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61fb      	str	r3, [r7, #28]
    // Full volume: (C_SIZE+1)*512KByte == (C_SIZE+1)<<19
    // Block size: 512Byte == 1<<9
    // Blocks number: CARD_SIZE/BLOCK_SIZE = (C_SIZE+1)*(1<<19) / (1<<9) = (C_SIZE+1)*(1<<10)
    tmp = (tmp + 1) << 10;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	3301      	adds	r3, #1
 8001500:	029b      	lsls	r3, r3, #10
 8001502:	61fb      	str	r3, [r7, #28]
    *num = tmp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	601a      	str	r2, [r3, #0]

    return 0;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	0800a3c0 	.word	0x0800a3c0
 8001518:	24000094 	.word	0x24000094

0800151c <SDCARD_ReadSingleBlock>:

int SDCARD_ReadSingleBlock(uint32_t blockNum, uint8_t* buff) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
    uint8_t crc[2];

    SDCARD_Select();
 8001526:	f7ff fe0d 	bl	8001144 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 800152a:	f7ff fe85 	bl	8001238 <SDCARD_WaitNotBusy>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	da04      	bge.n	800153e <SDCARD_ReadSingleBlock+0x22>
        SDCARD_Unselect();
 8001534:	f7ff fe12 	bl	800115c <SDCARD_Unselect>
        return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
 800153c:	e04d      	b.n	80015da <SDCARD_ReadSingleBlock+0xbe>
    }

    /* CMD17 (SEND_SINGLE_BLOCK) command */
    uint8_t cmd[] = {
 800153e:	2351      	movs	r3, #81	; 0x51
 8001540:	733b      	strb	r3, [r7, #12]
        0x40 | 0x11 /* CMD17 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8001546:	b2db      	uxtb	r3, r3
 8001548:	737b      	strb	r3, [r7, #13]
        (blockNum >> 16) & 0xFF,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 800154e:	b2db      	uxtb	r3, r3
 8001550:	73bb      	strb	r3, [r7, #14]
        (blockNum >> 8) & 0xFF,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8001556:	b2db      	uxtb	r3, r3
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	743b      	strb	r3, [r7, #16]
 8001560:	23ff      	movs	r3, #255	; 0xff
 8001562:	747b      	strb	r3, [r7, #17]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001564:	f107 010c 	add.w	r1, r7, #12
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	2206      	movs	r2, #6
 800156e:	481d      	ldr	r0, [pc, #116]	; (80015e4 <SDCARD_ReadSingleBlock+0xc8>)
 8001570:	f005 f87e 	bl	8006670 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8001574:	f7ff fdfe 	bl	8001174 <SDCARD_ReadR1>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d004      	beq.n	8001588 <SDCARD_ReadSingleBlock+0x6c>
        SDCARD_Unselect();
 800157e:	f7ff fded 	bl	800115c <SDCARD_Unselect>
        return -2;
 8001582:	f06f 0301 	mvn.w	r3, #1
 8001586:	e028      	b.n	80015da <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD17) < 0) {
 8001588:	20fe      	movs	r0, #254	; 0xfe
 800158a:	f7ff fe0f 	bl	80011ac <SDCARD_WaitDataToken>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	da04      	bge.n	800159e <SDCARD_ReadSingleBlock+0x82>
        SDCARD_Unselect();
 8001594:	f7ff fde2 	bl	800115c <SDCARD_Unselect>
        return -3;
 8001598:	f06f 0302 	mvn.w	r3, #2
 800159c:	e01d      	b.n	80015da <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_ReadBytes(buff, 512) < 0) {
 800159e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a2:	6838      	ldr	r0, [r7, #0]
 80015a4:	f7ff fe26 	bl	80011f4 <SDCARD_ReadBytes>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da04      	bge.n	80015b8 <SDCARD_ReadSingleBlock+0x9c>
        SDCARD_Unselect();
 80015ae:	f7ff fdd5 	bl	800115c <SDCARD_Unselect>
        return -4;
 80015b2:	f06f 0303 	mvn.w	r3, #3
 80015b6:	e010      	b.n	80015da <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_ReadBytes(crc, 2) < 0) {
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2102      	movs	r1, #2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fe18 	bl	80011f4 <SDCARD_ReadBytes>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da04      	bge.n	80015d4 <SDCARD_ReadSingleBlock+0xb8>
        SDCARD_Unselect();
 80015ca:	f7ff fdc7 	bl	800115c <SDCARD_Unselect>
        return -5;
 80015ce:	f06f 0304 	mvn.w	r3, #4
 80015d2:	e002      	b.n	80015da <SDCARD_ReadSingleBlock+0xbe>
    }

    SDCARD_Unselect();
 80015d4:	f7ff fdc2 	bl	800115c <SDCARD_Unselect>
    return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	24000094 	.word	0x24000094

080015e8 <SDCARD_WriteSingleBlock>:


int SDCARD_WriteSingleBlock(uint32_t blockNum, const uint8_t* buff) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
    SDCARD_Select();
 80015f2:	f7ff fda7 	bl	8001144 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80015f6:	f7ff fe1f 	bl	8001238 <SDCARD_WaitNotBusy>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	da04      	bge.n	800160a <SDCARD_WriteSingleBlock+0x22>
        SDCARD_Unselect();
 8001600:	f7ff fdac 	bl	800115c <SDCARD_Unselect>
        return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	e05e      	b.n	80016c8 <SDCARD_WriteSingleBlock+0xe0>
    }

    /* CMD24 (WRITE_BLOCK) command */
    uint8_t cmd[] = {
 800160a:	2358      	movs	r3, #88	; 0x58
 800160c:	743b      	strb	r3, [r7, #16]
        0x40 | 0x18 /* CMD24 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8001612:	b2db      	uxtb	r3, r3
 8001614:	747b      	strb	r3, [r7, #17]
        (blockNum >> 16) & 0xFF,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 800161a:	b2db      	uxtb	r3, r3
 800161c:	74bb      	strb	r3, [r7, #18]
        (blockNum >> 8) & 0xFF,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8001622:	b2db      	uxtb	r3, r3
 8001624:	74fb      	strb	r3, [r7, #19]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	753b      	strb	r3, [r7, #20]
 800162c:	23ff      	movs	r3, #255	; 0xff
 800162e:	757b      	strb	r3, [r7, #21]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001630:	f107 0110 	add.w	r1, r7, #16
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	2206      	movs	r2, #6
 800163a:	4825      	ldr	r0, [pc, #148]	; (80016d0 <SDCARD_WriteSingleBlock+0xe8>)
 800163c:	f005 f818 	bl	8006670 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8001640:	f7ff fd98 	bl	8001174 <SDCARD_ReadR1>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <SDCARD_WriteSingleBlock+0x6c>
        SDCARD_Unselect();
 800164a:	f7ff fd87 	bl	800115c <SDCARD_Unselect>
        return -2;
 800164e:	f06f 0301 	mvn.w	r3, #1
 8001652:	e039      	b.n	80016c8 <SDCARD_WriteSingleBlock+0xe0>
    }

    uint8_t dataToken = DATA_TOKEN_CMD24;
 8001654:	23fe      	movs	r3, #254	; 0xfe
 8001656:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 8001658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165c:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 800165e:	f107 010f 	add.w	r1, r7, #15
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	2201      	movs	r2, #1
 8001668:	4819      	ldr	r0, [pc, #100]	; (80016d0 <SDCARD_WriteSingleBlock+0xe8>)
 800166a:	f005 f801 	bl	8006670 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	4815      	ldr	r0, [pc, #84]	; (80016d0 <SDCARD_WriteSingleBlock+0xe8>)
 800167a:	f004 fff9 	bl	8006670 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 800167e:	f107 010c 	add.w	r1, r7, #12
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	2202      	movs	r2, #2
 8001688:	4811      	ldr	r0, [pc, #68]	; (80016d0 <SDCARD_WriteSingleBlock+0xe8>)
 800168a:	f004 fff1 	bl	8006670 <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 800168e:	f107 030b 	add.w	r3, r7, #11
 8001692:	2101      	movs	r1, #1
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fdad 	bl	80011f4 <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d004      	beq.n	80016ae <SDCARD_WriteSingleBlock+0xc6>
        SDCARD_Unselect();
 80016a4:	f7ff fd5a 	bl	800115c <SDCARD_Unselect>
        return -3;
 80016a8:	f06f 0302 	mvn.w	r3, #2
 80016ac:	e00c      	b.n	80016c8 <SDCARD_WriteSingleBlock+0xe0>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 80016ae:	f7ff fdc3 	bl	8001238 <SDCARD_WaitNotBusy>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da04      	bge.n	80016c2 <SDCARD_WriteSingleBlock+0xda>
        SDCARD_Unselect();
 80016b8:	f7ff fd50 	bl	800115c <SDCARD_Unselect>
        return -4;
 80016bc:	f06f 0303 	mvn.w	r3, #3
 80016c0:	e002      	b.n	80016c8 <SDCARD_WriteSingleBlock+0xe0>
    }

    SDCARD_Unselect();
 80016c2:	f7ff fd4b 	bl	800115c <SDCARD_Unselect>
    return 0;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	24000094 	.word	0x24000094

080016d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_MspInit+0x30>)
 80016dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016e0:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_MspInit+0x30>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_MspInit+0x30>)
 80016ec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	58024400 	.word	0x58024400

08001708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0b8      	sub	sp, #224	; 0xe0
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	22b8      	movs	r2, #184	; 0xb8
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f008 f81f 	bl	800976c <memset>
  if(hspi->Instance==SPI1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a24      	ldr	r2, [pc, #144]	; (80017c4 <HAL_SPI_MspInit+0xbc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d141      	bne.n	80017bc <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800173e:	2300      	movs	r3, #0
 8001740:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4618      	mov	r0, r3
 8001748:	f003 fb5e 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001752:	f7ff fcf2 	bl	800113a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_SPI_MspInit+0xc0>)
 8001758:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800175c:	4a1a      	ldr	r2, [pc, #104]	; (80017c8 <HAL_SPI_MspInit+0xc0>)
 800175e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001762:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_SPI_MspInit+0xc0>)
 8001768:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800176c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_SPI_MspInit+0xc0>)
 8001776:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <HAL_SPI_MspInit+0xc0>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_SPI_MspInit+0xc0>)
 8001786:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001792:	23e0      	movs	r3, #224	; 0xe0
 8001794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017aa:	2305      	movs	r3, #5
 80017ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017b4:	4619      	mov	r1, r3
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_SPI_MspInit+0xc4>)
 80017b8:	f002 f93e 	bl	8003a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017bc:	bf00      	nop
 80017be:	37e0      	adds	r7, #224	; 0xe0
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40013000 	.word	0x40013000
 80017c8:	58024400 	.word	0x58024400
 80017cc:	58020000 	.word	0x58020000

080017d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_TIM_Base_MspInit+0x3c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10e      	bne.n	8001800 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_TIM_Base_MspInit+0x40>)
 80017e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017e8:	4a09      	ldr	r2, [pc, #36]	; (8001810 <HAL_TIM_Base_MspInit+0x40>)
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <HAL_TIM_Base_MspInit+0x40>)
 80017f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40000400 	.word	0x40000400
 8001810:	58024400 	.word	0x58024400

08001814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <HAL_TIM_MspPostInit+0x68>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d11e      	bne.n	8001874 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_TIM_MspPostInit+0x6c>)
 8001838:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800183c:	4a10      	ldr	r2, [pc, #64]	; (8001880 <HAL_TIM_MspPostInit+0x6c>)
 800183e:	f043 0302 	orr.w	r3, r3, #2
 8001842:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_TIM_MspPostInit+0x6c>)
 8001848:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001854:	2301      	movs	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001864:	2302      	movs	r3, #2
 8001866:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	4619      	mov	r1, r3
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <HAL_TIM_MspPostInit+0x70>)
 8001870:	f002 f8e2 	bl	8003a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001874:	bf00      	nop
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40000400 	.word	0x40000400
 8001880:	58024400 	.word	0x58024400
 8001884:	58020400 	.word	0x58020400

08001888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b0b8      	sub	sp, #224	; 0xe0
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	22b8      	movs	r2, #184	; 0xb8
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f007 ff5f 	bl	800976c <memset>
  if(huart->Instance==USART3)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a52      	ldr	r2, [pc, #328]	; (80019fc <HAL_UART_MspInit+0x174>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	f040 809d 	bne.w	80019f4 <HAL_UART_MspInit+0x16c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018ba:	2302      	movs	r3, #2
 80018bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 fa9d 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80018d4:	f7ff fc31 	bl	800113a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018d8:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <HAL_UART_MspInit+0x178>)
 80018da:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018de:	4a48      	ldr	r2, [pc, #288]	; (8001a00 <HAL_UART_MspInit+0x178>)
 80018e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80018e8:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <HAL_UART_MspInit+0x178>)
 80018ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f6:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <HAL_UART_MspInit+0x178>)
 80018f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018fc:	4a40      	ldr	r2, [pc, #256]	; (8001a00 <HAL_UART_MspInit+0x178>)
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001906:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <HAL_UART_MspInit+0x178>)
 8001908:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001914:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001918:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800192e:	2307      	movs	r3, #7
 8001930:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001934:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001938:	4619      	mov	r1, r3
 800193a:	4832      	ldr	r0, [pc, #200]	; (8001a04 <HAL_UART_MspInit+0x17c>)
 800193c:	f002 f87c 	bl	8003a38 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001940:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <HAL_UART_MspInit+0x180>)
 8001942:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <HAL_UART_MspInit+0x184>)
 8001944:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001946:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <HAL_UART_MspInit+0x180>)
 8001948:	222d      	movs	r2, #45	; 0x2d
 800194a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800194c:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_UART_MspInit+0x180>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_UART_MspInit+0x180>)
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001958:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_UART_MspInit+0x180>)
 800195a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800195e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001960:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <HAL_UART_MspInit+0x180>)
 8001962:	2200      	movs	r2, #0
 8001964:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_UART_MspInit+0x180>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_UART_MspInit+0x180>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001972:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_UART_MspInit+0x180>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <HAL_UART_MspInit+0x180>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800197e:	4822      	ldr	r0, [pc, #136]	; (8001a08 <HAL_UART_MspInit+0x180>)
 8001980:	f000 fb2c 	bl	8001fdc <HAL_DMA_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 800198a:	f7ff fbd6 	bl	800113a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <HAL_UART_MspInit+0x180>)
 8001992:	67da      	str	r2, [r3, #124]	; 0x7c
 8001994:	4a1c      	ldr	r2, [pc, #112]	; (8001a08 <HAL_UART_MspInit+0x180>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_UART_MspInit+0x188>)
 800199c:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_UART_MspInit+0x18c>)
 800199e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_UART_MspInit+0x188>)
 80019a2:	222e      	movs	r2, #46	; 0x2e
 80019a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_UART_MspInit+0x188>)
 80019a8:	2240      	movs	r2, #64	; 0x40
 80019aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_UART_MspInit+0x188>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_UART_MspInit+0x188>)
 80019b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_UART_MspInit+0x188>)
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_UART_MspInit+0x188>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_UART_MspInit+0x188>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_UART_MspInit+0x188>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_UART_MspInit+0x188>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <HAL_UART_MspInit+0x188>)
 80019da:	f000 faff 	bl	8001fdc <HAL_DMA_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 80019e4:	f7ff fba9 	bl	800113a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_UART_MspInit+0x188>)
 80019ec:	679a      	str	r2, [r3, #120]	; 0x78
 80019ee:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <HAL_UART_MspInit+0x188>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019f4:	bf00      	nop
 80019f6:	37e0      	adds	r7, #224	; 0xe0
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40004800 	.word	0x40004800
 8001a00:	58024400 	.word	0x58024400
 8001a04:	58020c00 	.word	0x58020c00
 8001a08:	240001f8 	.word	0x240001f8
 8001a0c:	40020028 	.word	0x40020028
 8001a10:	24000270 	.word	0x24000270
 8001a14:	40020040 	.word	0x40020040

08001a18 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <HAL_WWDG_MspInit+0x3c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10e      	bne.n	8001a48 <HAL_WWDG_MspInit+0x30>
  {
  /* USER CODE BEGIN WWDG1_MspInit 0 */

  /* USER CODE END WWDG1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG1_CLK_ENABLE();
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_WWDG_MspInit+0x40>)
 8001a2c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001a30:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_WWDG_MspInit+0x40>)
 8001a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a36:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_WWDG_MspInit+0x40>)
 8001a3c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG1_MspInit 1 */

  /* USER CODE END WWDG1_MspInit 1 */
  }

}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	50003000 	.word	0x50003000
 8001a58:	58024400 	.word	0x58024400

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <NMI_Handler+0x4>

08001a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <MemManage_Handler+0x4>

08001a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa8:	f000 f968 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA1_Stream1_IRQHandler+0x10>)
 8001ab6:	f000 fe21 	bl	80026fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	240001f8 	.word	0x240001f8

08001ac4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA1_Stream2_IRQHandler+0x10>)
 8001aca:	f000 fe17 	bl	80026fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	24000270 	.word	0x24000270

08001ad8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001adc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ae0:	f002 f98d 	bl	8003dfe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f007 fdf0 	bl	80096fc <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	24100000 	.word	0x24100000
 8001b48:	00000800 	.word	0x00000800
 8001b4c:	240003e0 	.word	0x240003e0
 8001b50:	240003f8 	.word	0x240003f8

08001b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b58:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <SystemInit+0xd0>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <SystemInit+0xd0>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b68:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <SystemInit+0xd4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d807      	bhi.n	8001b84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b74:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <SystemInit+0xd4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 030f 	bic.w	r3, r3, #15
 8001b7c:	4a2a      	ldr	r2, [pc, #168]	; (8001c28 <SystemInit+0xd4>)
 8001b7e:	f043 0303 	orr.w	r3, r3, #3
 8001b82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b84:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <SystemInit+0xd8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a28      	ldr	r2, [pc, #160]	; (8001c2c <SystemInit+0xd8>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b90:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <SystemInit+0xd8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b96:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <SystemInit+0xd8>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4924      	ldr	r1, [pc, #144]	; (8001c2c <SystemInit+0xd8>)
 8001b9c:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <SystemInit+0xdc>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <SystemInit+0xd4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <SystemInit+0xd4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 030f 	bic.w	r3, r3, #15
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <SystemInit+0xd4>)
 8001bb8:	f043 0303 	orr.w	r3, r3, #3
 8001bbc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <SystemInit+0xd8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <SystemInit+0xd8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <SystemInit+0xd8>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <SystemInit+0xd8>)
 8001bd2:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <SystemInit+0xe0>)
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <SystemInit+0xd8>)
 8001bd8:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <SystemInit+0xe4>)
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <SystemInit+0xd8>)
 8001bde:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <SystemInit+0xe8>)
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <SystemInit+0xd8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <SystemInit+0xd8>)
 8001bea:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <SystemInit+0xe8>)
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <SystemInit+0xd8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <SystemInit+0xd8>)
 8001bf6:	4a11      	ldr	r2, [pc, #68]	; (8001c3c <SystemInit+0xe8>)
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <SystemInit+0xd8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <SystemInit+0xd8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <SystemInit+0xd8>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <SystemInit+0xd8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <SystemInit+0xec>)
 8001c14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00
 8001c28:	52002000 	.word	0x52002000
 8001c2c:	58024400 	.word	0x58024400
 8001c30:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c34:	02020200 	.word	0x02020200
 8001c38:	01ff0000 	.word	0x01ff0000
 8001c3c:	01010280 	.word	0x01010280
 8001c40:	52004000 	.word	0x52004000

08001c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c48:	f7ff ff84 	bl	8001b54 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c4c:	480c      	ldr	r0, [pc, #48]	; (8001c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c4e:	490d      	ldr	r1, [pc, #52]	; (8001c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c64:	4c0a      	ldr	r4, [pc, #40]	; (8001c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c72:	f007 fd49 	bl	8009708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c76:	f7fe fe6b 	bl	8000950 <main>
  bx  lr
 8001c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c7c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001c80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c84:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001c88:	0800a44c 	.word	0x0800a44c
  ldr r2, =_sbss
 8001c8c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001c90:	240003f8 	.word	0x240003f8

08001c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC_IRQHandler>
	...

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9e:	2003      	movs	r0, #3
 8001ca0:	f000 f95c 	bl	8001f5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001ca4:	f002 feda 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_Init+0x68>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	4913      	ldr	r1, [pc, #76]	; (8001d04 <HAL_Init+0x6c>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_Init+0x68>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_Init+0x6c>)
 8001ccc:	5cd3      	ldrb	r3, [r2, r3]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <HAL_Init+0x70>)
 8001cda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_Init+0x74>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 f814 	bl	8001d10 <HAL_InitTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e002      	b.n	8001cf8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf2:	f7ff fcef 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	58024400 	.word	0x58024400
 8001d04:	0800a3c8 	.word	0x0800a3c8
 8001d08:	24000008 	.word	0x24000008
 8001d0c:	24000004 	.word	0x24000004

08001d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_InitTick+0x60>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e021      	b.n	8001d68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_InitTick+0x64>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_InitTick+0x60>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f941 	bl	8001fc2 <HAL_SYSTICK_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00e      	b.n	8001d68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d80a      	bhi.n	8001d66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f000 f90b 	bl	8001f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <HAL_InitTick+0x68>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	24000010 	.word	0x24000010
 8001d74:	24000004 	.word	0x24000004
 8001d78:	2400000c 	.word	0x2400000c

08001d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_IncTick+0x20>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x24>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_IncTick+0x24>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	24000010 	.word	0x24000010
 8001da0:	240003e4 	.word	0x240003e4

08001da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_GetTick+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	240003e4 	.word	0x240003e4

08001dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <__NVIC_SetPriorityGrouping+0x40>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <__NVIC_SetPriorityGrouping+0x40>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00
 8001e00:	05fa0000 	.word	0x05fa0000

08001e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db0b      	blt.n	8001e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4907      	ldr	r1, [pc, #28]	; (8001e58 <__NVIC_EnableIRQ+0x38>)
 8001e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	2001      	movs	r0, #1
 8001e42:	fa00 f202 	lsl.w	r2, r0, r2
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e100 	.word	0xe000e100

08001e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0a      	blt.n	8001e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	490c      	ldr	r1, [pc, #48]	; (8001ea8 <__NVIC_SetPriority+0x4c>)
 8001e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e84:	e00a      	b.n	8001e9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	; (8001eac <__NVIC_SetPriority+0x50>)
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	3b04      	subs	r3, #4
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	761a      	strb	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f1c3 0307 	rsb	r3, r3, #7
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	bf28      	it	cs
 8001ece:	2304      	movcs	r3, #4
 8001ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d902      	bls.n	8001ee0 <NVIC_EncodePriority+0x30>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b03      	subs	r3, #3
 8001ede:	e000      	b.n	8001ee2 <NVIC_EncodePriority+0x32>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	4313      	orrs	r3, r2
         );
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	; 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f28:	d301      	bcc.n	8001f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00f      	b.n	8001f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <SysTick_Config+0x40>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f36:	210f      	movs	r1, #15
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f7ff ff8e 	bl	8001e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <SysTick_Config+0x40>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <SysTick_Config+0x40>)
 8001f48:	2207      	movs	r2, #7
 8001f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	e000e010 	.word	0xe000e010

08001f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff29 	bl	8001dbc <__NVIC_SetPriorityGrouping>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f80:	f7ff ff40 	bl	8001e04 <__NVIC_GetPriorityGrouping>
 8001f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	6978      	ldr	r0, [r7, #20]
 8001f8c:	f7ff ff90 	bl	8001eb0 <NVIC_EncodePriority>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff5f 	bl	8001e5c <__NVIC_SetPriority>
}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff33 	bl	8001e20 <__NVIC_EnableIRQ>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ffa4 	bl	8001f18 <SysTick_Config>
 8001fd0:	4603      	mov	r3, r0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff fede 	bl	8001da4 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e37f      	b.n	80026f4 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a66      	ldr	r2, [pc, #408]	; (8002194 <HAL_DMA_Init+0x1b8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d04a      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a65      	ldr	r2, [pc, #404]	; (8002198 <HAL_DMA_Init+0x1bc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d045      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a63      	ldr	r2, [pc, #396]	; (800219c <HAL_DMA_Init+0x1c0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d040      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a62      	ldr	r2, [pc, #392]	; (80021a0 <HAL_DMA_Init+0x1c4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d03b      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a60      	ldr	r2, [pc, #384]	; (80021a4 <HAL_DMA_Init+0x1c8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d036      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a5f      	ldr	r2, [pc, #380]	; (80021a8 <HAL_DMA_Init+0x1cc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d031      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5d      	ldr	r2, [pc, #372]	; (80021ac <HAL_DMA_Init+0x1d0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d02c      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a5c      	ldr	r2, [pc, #368]	; (80021b0 <HAL_DMA_Init+0x1d4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d027      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a5a      	ldr	r2, [pc, #360]	; (80021b4 <HAL_DMA_Init+0x1d8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d022      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a59      	ldr	r2, [pc, #356]	; (80021b8 <HAL_DMA_Init+0x1dc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d01d      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a57      	ldr	r2, [pc, #348]	; (80021bc <HAL_DMA_Init+0x1e0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d018      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a56      	ldr	r2, [pc, #344]	; (80021c0 <HAL_DMA_Init+0x1e4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d013      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a54      	ldr	r2, [pc, #336]	; (80021c4 <HAL_DMA_Init+0x1e8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00e      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a53      	ldr	r2, [pc, #332]	; (80021c8 <HAL_DMA_Init+0x1ec>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d009      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a51      	ldr	r2, [pc, #324]	; (80021cc <HAL_DMA_Init+0x1f0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d004      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a50      	ldr	r2, [pc, #320]	; (80021d0 <HAL_DMA_Init+0x1f4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_DMA_Init+0xbc>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_DMA_Init+0xbe>
 8002098:	2300      	movs	r3, #0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 813c 	beq.w	8002318 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a37      	ldr	r2, [pc, #220]	; (8002194 <HAL_DMA_Init+0x1b8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d04a      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a36      	ldr	r2, [pc, #216]	; (8002198 <HAL_DMA_Init+0x1bc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d045      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a34      	ldr	r2, [pc, #208]	; (800219c <HAL_DMA_Init+0x1c0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d040      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a33      	ldr	r2, [pc, #204]	; (80021a0 <HAL_DMA_Init+0x1c4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d03b      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <HAL_DMA_Init+0x1c8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d036      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a30      	ldr	r2, [pc, #192]	; (80021a8 <HAL_DMA_Init+0x1cc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d031      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <HAL_DMA_Init+0x1d0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02c      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a2d      	ldr	r2, [pc, #180]	; (80021b0 <HAL_DMA_Init+0x1d4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d027      	beq.n	8002150 <HAL_DMA_Init+0x174>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2b      	ldr	r2, [pc, #172]	; (80021b4 <HAL_DMA_Init+0x1d8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d022      	beq.n	8002150 <HAL_DMA_Init+0x174>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <HAL_DMA_Init+0x1dc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d01d      	beq.n	8002150 <HAL_DMA_Init+0x174>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a28      	ldr	r2, [pc, #160]	; (80021bc <HAL_DMA_Init+0x1e0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d018      	beq.n	8002150 <HAL_DMA_Init+0x174>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <HAL_DMA_Init+0x1e4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d013      	beq.n	8002150 <HAL_DMA_Init+0x174>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <HAL_DMA_Init+0x1e8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00e      	beq.n	8002150 <HAL_DMA_Init+0x174>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a24      	ldr	r2, [pc, #144]	; (80021c8 <HAL_DMA_Init+0x1ec>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d009      	beq.n	8002150 <HAL_DMA_Init+0x174>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a22      	ldr	r2, [pc, #136]	; (80021cc <HAL_DMA_Init+0x1f0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_DMA_Init+0x174>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <HAL_DMA_Init+0x1f4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d108      	bne.n	8002162 <HAL_DMA_Init+0x186>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e007      	b.n	8002172 <HAL_DMA_Init+0x196>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002172:	e02f      	b.n	80021d4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002174:	f7ff fe16 	bl	8001da4 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b05      	cmp	r3, #5
 8002180:	d928      	bls.n	80021d4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2220      	movs	r2, #32
 8002186:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2203      	movs	r2, #3
 800218c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e2af      	b.n	80026f4 <HAL_DMA_Init+0x718>
 8002194:	40020010 	.word	0x40020010
 8002198:	40020028 	.word	0x40020028
 800219c:	40020040 	.word	0x40020040
 80021a0:	40020058 	.word	0x40020058
 80021a4:	40020070 	.word	0x40020070
 80021a8:	40020088 	.word	0x40020088
 80021ac:	400200a0 	.word	0x400200a0
 80021b0:	400200b8 	.word	0x400200b8
 80021b4:	40020410 	.word	0x40020410
 80021b8:	40020428 	.word	0x40020428
 80021bc:	40020440 	.word	0x40020440
 80021c0:	40020458 	.word	0x40020458
 80021c4:	40020470 	.word	0x40020470
 80021c8:	40020488 	.word	0x40020488
 80021cc:	400204a0 	.word	0x400204a0
 80021d0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1c8      	bne.n	8002174 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4b73      	ldr	r3, [pc, #460]	; (80023bc <HAL_DMA_Init+0x3e0>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80021fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002206:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002212:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	2b04      	cmp	r3, #4
 8002226:	d107      	bne.n	8002238 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	4313      	orrs	r3, r2
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b28      	cmp	r3, #40	; 0x28
 800223e:	d903      	bls.n	8002248 <HAL_DMA_Init+0x26c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b2e      	cmp	r3, #46	; 0x2e
 8002246:	d91f      	bls.n	8002288 <HAL_DMA_Init+0x2ac>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b3e      	cmp	r3, #62	; 0x3e
 800224e:	d903      	bls.n	8002258 <HAL_DMA_Init+0x27c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b42      	cmp	r3, #66	; 0x42
 8002256:	d917      	bls.n	8002288 <HAL_DMA_Init+0x2ac>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b46      	cmp	r3, #70	; 0x46
 800225e:	d903      	bls.n	8002268 <HAL_DMA_Init+0x28c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b48      	cmp	r3, #72	; 0x48
 8002266:	d90f      	bls.n	8002288 <HAL_DMA_Init+0x2ac>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b4e      	cmp	r3, #78	; 0x4e
 800226e:	d903      	bls.n	8002278 <HAL_DMA_Init+0x29c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b52      	cmp	r3, #82	; 0x52
 8002276:	d907      	bls.n	8002288 <HAL_DMA_Init+0x2ac>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b73      	cmp	r3, #115	; 0x73
 800227e:	d905      	bls.n	800228c <HAL_DMA_Init+0x2b0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b77      	cmp	r3, #119	; 0x77
 8002286:	d801      	bhi.n	800228c <HAL_DMA_Init+0x2b0>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_DMA_Init+0x2b2>
 800228c:	2300      	movs	r3, #0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002298:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f023 0307 	bic.w	r3, r3, #7
 80022b0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d117      	bne.n	80022f4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00e      	beq.n	80022f4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f001 fa24 	bl	8003724 <DMA_CheckFifoParam>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e1ff      	b.n	80026f4 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f001 f95f 	bl	80035c0 <DMA_CalcBaseAndBitshift>
 8002302:	4603      	mov	r3, r0
 8002304:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	223f      	movs	r2, #63	; 0x3f
 8002310:	409a      	lsls	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	e0fe      	b.n	8002516 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a28      	ldr	r2, [pc, #160]	; (80023c0 <HAL_DMA_Init+0x3e4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d04a      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <HAL_DMA_Init+0x3e8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d045      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a25      	ldr	r2, [pc, #148]	; (80023c8 <HAL_DMA_Init+0x3ec>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d040      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a24      	ldr	r2, [pc, #144]	; (80023cc <HAL_DMA_Init+0x3f0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d03b      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_DMA_Init+0x3f4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d036      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <HAL_DMA_Init+0x3f8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d031      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <HAL_DMA_Init+0x3fc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d02c      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <HAL_DMA_Init+0x400>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d027      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <HAL_DMA_Init+0x404>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d022      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_DMA_Init+0x408>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d01d      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_DMA_Init+0x40c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d018      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a18      	ldr	r2, [pc, #96]	; (80023ec <HAL_DMA_Init+0x410>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <HAL_DMA_Init+0x414>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00e      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a15      	ldr	r2, [pc, #84]	; (80023f4 <HAL_DMA_Init+0x418>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d009      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <HAL_DMA_Init+0x41c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d004      	beq.n	80023b8 <HAL_DMA_Init+0x3dc>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_DMA_Init+0x420>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d123      	bne.n	8002400 <HAL_DMA_Init+0x424>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e022      	b.n	8002402 <HAL_DMA_Init+0x426>
 80023bc:	fe10803f 	.word	0xfe10803f
 80023c0:	48022c08 	.word	0x48022c08
 80023c4:	48022c1c 	.word	0x48022c1c
 80023c8:	48022c30 	.word	0x48022c30
 80023cc:	48022c44 	.word	0x48022c44
 80023d0:	48022c58 	.word	0x48022c58
 80023d4:	48022c6c 	.word	0x48022c6c
 80023d8:	48022c80 	.word	0x48022c80
 80023dc:	48022c94 	.word	0x48022c94
 80023e0:	58025408 	.word	0x58025408
 80023e4:	5802541c 	.word	0x5802541c
 80023e8:	58025430 	.word	0x58025430
 80023ec:	58025444 	.word	0x58025444
 80023f0:	58025458 	.word	0x58025458
 80023f4:	5802546c 	.word	0x5802546c
 80023f8:	58025480 	.word	0x58025480
 80023fc:	58025494 	.word	0x58025494
 8002400:	2300      	movs	r3, #0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d07e      	beq.n	8002504 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a80      	ldr	r2, [pc, #512]	; (800260c <HAL_DMA_Init+0x630>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d021      	beq.n	8002454 <HAL_DMA_Init+0x478>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a7e      	ldr	r2, [pc, #504]	; (8002610 <HAL_DMA_Init+0x634>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01c      	beq.n	8002454 <HAL_DMA_Init+0x478>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7d      	ldr	r2, [pc, #500]	; (8002614 <HAL_DMA_Init+0x638>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d017      	beq.n	8002454 <HAL_DMA_Init+0x478>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a7b      	ldr	r2, [pc, #492]	; (8002618 <HAL_DMA_Init+0x63c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d012      	beq.n	8002454 <HAL_DMA_Init+0x478>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7a      	ldr	r2, [pc, #488]	; (800261c <HAL_DMA_Init+0x640>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d00d      	beq.n	8002454 <HAL_DMA_Init+0x478>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a78      	ldr	r2, [pc, #480]	; (8002620 <HAL_DMA_Init+0x644>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d008      	beq.n	8002454 <HAL_DMA_Init+0x478>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a77      	ldr	r2, [pc, #476]	; (8002624 <HAL_DMA_Init+0x648>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d003      	beq.n	8002454 <HAL_DMA_Init+0x478>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a75      	ldr	r2, [pc, #468]	; (8002628 <HAL_DMA_Init+0x64c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4b6e      	ldr	r3, [pc, #440]	; (800262c <HAL_DMA_Init+0x650>)
 8002472:	4013      	ands	r3, r2
 8002474:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b40      	cmp	r3, #64	; 0x40
 800247c:	d008      	beq.n	8002490 <HAL_DMA_Init+0x4b4>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b80      	cmp	r3, #128	; 0x80
 8002484:	d102      	bne.n	800248c <HAL_DMA_Init+0x4b0>
 8002486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800248a:	e002      	b.n	8002492 <HAL_DMA_Init+0x4b6>
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_DMA_Init+0x4b6>
 8002490:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68d2      	ldr	r2, [r2, #12]
 8002496:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002498:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b56      	ldr	r3, [pc, #344]	; (8002630 <HAL_DMA_Init+0x654>)
 80024d8:	4413      	add	r3, r2
 80024da:	4a56      	ldr	r2, [pc, #344]	; (8002634 <HAL_DMA_Init+0x658>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	009a      	lsls	r2, r3, #2
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f001 f869 	bl	80035c0 <DMA_CalcBaseAndBitshift>
 80024ee:	4603      	mov	r3, r0
 80024f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2201      	movs	r2, #1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	e008      	b.n	8002516 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2240      	movs	r2, #64	; 0x40
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2203      	movs	r2, #3
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0ee      	b.n	80026f4 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a47      	ldr	r2, [pc, #284]	; (8002638 <HAL_DMA_Init+0x65c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d072      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a45      	ldr	r2, [pc, #276]	; (800263c <HAL_DMA_Init+0x660>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d06d      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a44      	ldr	r2, [pc, #272]	; (8002640 <HAL_DMA_Init+0x664>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d068      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a42      	ldr	r2, [pc, #264]	; (8002644 <HAL_DMA_Init+0x668>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d063      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a41      	ldr	r2, [pc, #260]	; (8002648 <HAL_DMA_Init+0x66c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d05e      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a3f      	ldr	r2, [pc, #252]	; (800264c <HAL_DMA_Init+0x670>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d059      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a3e      	ldr	r2, [pc, #248]	; (8002650 <HAL_DMA_Init+0x674>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d054      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a3c      	ldr	r2, [pc, #240]	; (8002654 <HAL_DMA_Init+0x678>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d04f      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a3b      	ldr	r2, [pc, #236]	; (8002658 <HAL_DMA_Init+0x67c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d04a      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a39      	ldr	r2, [pc, #228]	; (800265c <HAL_DMA_Init+0x680>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d045      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a38      	ldr	r2, [pc, #224]	; (8002660 <HAL_DMA_Init+0x684>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d040      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a36      	ldr	r2, [pc, #216]	; (8002664 <HAL_DMA_Init+0x688>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d03b      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a35      	ldr	r2, [pc, #212]	; (8002668 <HAL_DMA_Init+0x68c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d036      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a33      	ldr	r2, [pc, #204]	; (800266c <HAL_DMA_Init+0x690>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d031      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a32      	ldr	r2, [pc, #200]	; (8002670 <HAL_DMA_Init+0x694>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d02c      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a30      	ldr	r2, [pc, #192]	; (8002674 <HAL_DMA_Init+0x698>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d027      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a14      	ldr	r2, [pc, #80]	; (800260c <HAL_DMA_Init+0x630>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a12      	ldr	r2, [pc, #72]	; (8002610 <HAL_DMA_Init+0x634>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01d      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_DMA_Init+0x638>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d018      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_DMA_Init+0x63c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <HAL_DMA_Init+0x640>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00e      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <HAL_DMA_Init+0x644>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <HAL_DMA_Init+0x648>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_DMA_Init+0x62a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a09      	ldr	r2, [pc, #36]	; (8002628 <HAL_DMA_Init+0x64c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d138      	bne.n	8002678 <HAL_DMA_Init+0x69c>
 8002606:	2301      	movs	r3, #1
 8002608:	e037      	b.n	800267a <HAL_DMA_Init+0x69e>
 800260a:	bf00      	nop
 800260c:	58025408 	.word	0x58025408
 8002610:	5802541c 	.word	0x5802541c
 8002614:	58025430 	.word	0x58025430
 8002618:	58025444 	.word	0x58025444
 800261c:	58025458 	.word	0x58025458
 8002620:	5802546c 	.word	0x5802546c
 8002624:	58025480 	.word	0x58025480
 8002628:	58025494 	.word	0x58025494
 800262c:	fffe000f 	.word	0xfffe000f
 8002630:	a7fdabf8 	.word	0xa7fdabf8
 8002634:	cccccccd 	.word	0xcccccccd
 8002638:	40020010 	.word	0x40020010
 800263c:	40020028 	.word	0x40020028
 8002640:	40020040 	.word	0x40020040
 8002644:	40020058 	.word	0x40020058
 8002648:	40020070 	.word	0x40020070
 800264c:	40020088 	.word	0x40020088
 8002650:	400200a0 	.word	0x400200a0
 8002654:	400200b8 	.word	0x400200b8
 8002658:	40020410 	.word	0x40020410
 800265c:	40020428 	.word	0x40020428
 8002660:	40020440 	.word	0x40020440
 8002664:	40020458 	.word	0x40020458
 8002668:	40020470 	.word	0x40020470
 800266c:	40020488 	.word	0x40020488
 8002670:	400204a0 	.word	0x400204a0
 8002674:	400204b8 	.word	0x400204b8
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d032      	beq.n	80026e4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f001 f8cc 	bl	800381c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b80      	cmp	r3, #128	; 0x80
 800268a:	d102      	bne.n	8002692 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80026a6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <HAL_DMA_Init+0x6f6>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d80c      	bhi.n	80026d2 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f001 f949 	bl	8003950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	e008      	b.n	80026e4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002708:	4b67      	ldr	r3, [pc, #412]	; (80028a8 <HAL_DMA_IRQHandler+0x1ac>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a67      	ldr	r2, [pc, #412]	; (80028ac <HAL_DMA_IRQHandler+0x1b0>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0a9b      	lsrs	r3, r3, #10
 8002714:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5f      	ldr	r2, [pc, #380]	; (80028b0 <HAL_DMA_IRQHandler+0x1b4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d04a      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a5d      	ldr	r2, [pc, #372]	; (80028b4 <HAL_DMA_IRQHandler+0x1b8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d045      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a5c      	ldr	r2, [pc, #368]	; (80028b8 <HAL_DMA_IRQHandler+0x1bc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d040      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a5a      	ldr	r2, [pc, #360]	; (80028bc <HAL_DMA_IRQHandler+0x1c0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d03b      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a59      	ldr	r2, [pc, #356]	; (80028c0 <HAL_DMA_IRQHandler+0x1c4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d036      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a57      	ldr	r2, [pc, #348]	; (80028c4 <HAL_DMA_IRQHandler+0x1c8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d031      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a56      	ldr	r2, [pc, #344]	; (80028c8 <HAL_DMA_IRQHandler+0x1cc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d02c      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a54      	ldr	r2, [pc, #336]	; (80028cc <HAL_DMA_IRQHandler+0x1d0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d027      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a53      	ldr	r2, [pc, #332]	; (80028d0 <HAL_DMA_IRQHandler+0x1d4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d022      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <HAL_DMA_IRQHandler+0x1d8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01d      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a50      	ldr	r2, [pc, #320]	; (80028d8 <HAL_DMA_IRQHandler+0x1dc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d018      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a4e      	ldr	r2, [pc, #312]	; (80028dc <HAL_DMA_IRQHandler+0x1e0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a4d      	ldr	r2, [pc, #308]	; (80028e0 <HAL_DMA_IRQHandler+0x1e4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00e      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a4b      	ldr	r2, [pc, #300]	; (80028e4 <HAL_DMA_IRQHandler+0x1e8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d009      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a4a      	ldr	r2, [pc, #296]	; (80028e8 <HAL_DMA_IRQHandler+0x1ec>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d004      	beq.n	80027ce <HAL_DMA_IRQHandler+0xd2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a48      	ldr	r2, [pc, #288]	; (80028ec <HAL_DMA_IRQHandler+0x1f0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_DMA_IRQHandler+0xd6>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_DMA_IRQHandler+0xd8>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 842b 	beq.w	8003030 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2208      	movs	r2, #8
 80027e4:	409a      	lsls	r2, r3
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80a2 	beq.w	8002934 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2e      	ldr	r2, [pc, #184]	; (80028b0 <HAL_DMA_IRQHandler+0x1b4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d04a      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2d      	ldr	r2, [pc, #180]	; (80028b4 <HAL_DMA_IRQHandler+0x1b8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d045      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a2b      	ldr	r2, [pc, #172]	; (80028b8 <HAL_DMA_IRQHandler+0x1bc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d040      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a2a      	ldr	r2, [pc, #168]	; (80028bc <HAL_DMA_IRQHandler+0x1c0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d03b      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a28      	ldr	r2, [pc, #160]	; (80028c0 <HAL_DMA_IRQHandler+0x1c4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d036      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a27      	ldr	r2, [pc, #156]	; (80028c4 <HAL_DMA_IRQHandler+0x1c8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d031      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <HAL_DMA_IRQHandler+0x1cc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d02c      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a24      	ldr	r2, [pc, #144]	; (80028cc <HAL_DMA_IRQHandler+0x1d0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d027      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a22      	ldr	r2, [pc, #136]	; (80028d0 <HAL_DMA_IRQHandler+0x1d4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d022      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a21      	ldr	r2, [pc, #132]	; (80028d4 <HAL_DMA_IRQHandler+0x1d8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d01d      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <HAL_DMA_IRQHandler+0x1dc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d018      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1e      	ldr	r2, [pc, #120]	; (80028dc <HAL_DMA_IRQHandler+0x1e0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d013      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <HAL_DMA_IRQHandler+0x1e4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00e      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <HAL_DMA_IRQHandler+0x1e8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d009      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_DMA_IRQHandler+0x1ec>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_DMA_IRQHandler+0x194>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a18      	ldr	r2, [pc, #96]	; (80028ec <HAL_DMA_IRQHandler+0x1f0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d12f      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x1f4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf14      	ite	ne
 800289e:	2301      	movne	r3, #1
 80028a0:	2300      	moveq	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	e02e      	b.n	8002904 <HAL_DMA_IRQHandler+0x208>
 80028a6:	bf00      	nop
 80028a8:	24000004 	.word	0x24000004
 80028ac:	1b4e81b5 	.word	0x1b4e81b5
 80028b0:	40020010 	.word	0x40020010
 80028b4:	40020028 	.word	0x40020028
 80028b8:	40020040 	.word	0x40020040
 80028bc:	40020058 	.word	0x40020058
 80028c0:	40020070 	.word	0x40020070
 80028c4:	40020088 	.word	0x40020088
 80028c8:	400200a0 	.word	0x400200a0
 80028cc:	400200b8 	.word	0x400200b8
 80028d0:	40020410 	.word	0x40020410
 80028d4:	40020428 	.word	0x40020428
 80028d8:	40020440 	.word	0x40020440
 80028dc:	40020458 	.word	0x40020458
 80028e0:	40020470 	.word	0x40020470
 80028e4:	40020488 	.word	0x40020488
 80028e8:	400204a0 	.word	0x400204a0
 80028ec:	400204b8 	.word	0x400204b8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d015      	beq.n	8002934 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0204 	bic.w	r2, r2, #4
 8002916:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2208      	movs	r2, #8
 8002922:	409a      	lsls	r2, r3
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292c:	f043 0201 	orr.w	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d06e      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a69      	ldr	r2, [pc, #420]	; (8002af4 <HAL_DMA_IRQHandler+0x3f8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d04a      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a67      	ldr	r2, [pc, #412]	; (8002af8 <HAL_DMA_IRQHandler+0x3fc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d045      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a66      	ldr	r2, [pc, #408]	; (8002afc <HAL_DMA_IRQHandler+0x400>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d040      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a64      	ldr	r2, [pc, #400]	; (8002b00 <HAL_DMA_IRQHandler+0x404>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d03b      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a63      	ldr	r2, [pc, #396]	; (8002b04 <HAL_DMA_IRQHandler+0x408>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d036      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a61      	ldr	r2, [pc, #388]	; (8002b08 <HAL_DMA_IRQHandler+0x40c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d031      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a60      	ldr	r2, [pc, #384]	; (8002b0c <HAL_DMA_IRQHandler+0x410>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d02c      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a5e      	ldr	r2, [pc, #376]	; (8002b10 <HAL_DMA_IRQHandler+0x414>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d027      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a5d      	ldr	r2, [pc, #372]	; (8002b14 <HAL_DMA_IRQHandler+0x418>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a5b      	ldr	r2, [pc, #364]	; (8002b18 <HAL_DMA_IRQHandler+0x41c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01d      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a5a      	ldr	r2, [pc, #360]	; (8002b1c <HAL_DMA_IRQHandler+0x420>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d018      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <HAL_DMA_IRQHandler+0x424>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a57      	ldr	r2, [pc, #348]	; (8002b24 <HAL_DMA_IRQHandler+0x428>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a55      	ldr	r2, [pc, #340]	; (8002b28 <HAL_DMA_IRQHandler+0x42c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a54      	ldr	r2, [pc, #336]	; (8002b2c <HAL_DMA_IRQHandler+0x430>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2ee>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <HAL_DMA_IRQHandler+0x434>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10a      	bne.n	8002a00 <HAL_DMA_IRQHandler+0x304>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e003      	b.n	8002a08 <HAL_DMA_IRQHandler+0x30c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2201      	movs	r2, #1
 8002a16:	409a      	lsls	r2, r3
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f043 0202 	orr.w	r2, r3, #2
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2204      	movs	r2, #4
 8002a32:	409a      	lsls	r2, r3
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 808f 	beq.w	8002b5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a2c      	ldr	r2, [pc, #176]	; (8002af4 <HAL_DMA_IRQHandler+0x3f8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d04a      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2a      	ldr	r2, [pc, #168]	; (8002af8 <HAL_DMA_IRQHandler+0x3fc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d045      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a29      	ldr	r2, [pc, #164]	; (8002afc <HAL_DMA_IRQHandler+0x400>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d040      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a27      	ldr	r2, [pc, #156]	; (8002b00 <HAL_DMA_IRQHandler+0x404>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d03b      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a26      	ldr	r2, [pc, #152]	; (8002b04 <HAL_DMA_IRQHandler+0x408>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d036      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a24      	ldr	r2, [pc, #144]	; (8002b08 <HAL_DMA_IRQHandler+0x40c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d031      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a23      	ldr	r2, [pc, #140]	; (8002b0c <HAL_DMA_IRQHandler+0x410>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d02c      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a21      	ldr	r2, [pc, #132]	; (8002b10 <HAL_DMA_IRQHandler+0x414>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d027      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <HAL_DMA_IRQHandler+0x418>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d022      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <HAL_DMA_IRQHandler+0x41c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01d      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <HAL_DMA_IRQHandler+0x420>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d018      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <HAL_DMA_IRQHandler+0x424>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d013      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <HAL_DMA_IRQHandler+0x428>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00e      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_DMA_IRQHandler+0x42c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d009      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <HAL_DMA_IRQHandler+0x430>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d004      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3e2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <HAL_DMA_IRQHandler+0x434>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d12a      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x438>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e023      	b.n	8002b3c <HAL_DMA_IRQHandler+0x440>
 8002af4:	40020010 	.word	0x40020010
 8002af8:	40020028 	.word	0x40020028
 8002afc:	40020040 	.word	0x40020040
 8002b00:	40020058 	.word	0x40020058
 8002b04:	40020070 	.word	0x40020070
 8002b08:	40020088 	.word	0x40020088
 8002b0c:	400200a0 	.word	0x400200a0
 8002b10:	400200b8 	.word	0x400200b8
 8002b14:	40020410 	.word	0x40020410
 8002b18:	40020428 	.word	0x40020428
 8002b1c:	40020440 	.word	0x40020440
 8002b20:	40020458 	.word	0x40020458
 8002b24:	40020470 	.word	0x40020470
 8002b28:	40020488 	.word	0x40020488
 8002b2c:	400204a0 	.word	0x400204a0
 8002b30:	400204b8 	.word	0x400204b8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00d      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	2204      	movs	r2, #4
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f043 0204 	orr.w	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2210      	movs	r2, #16
 8002b66:	409a      	lsls	r2, r3
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80a6 	beq.w	8002cbe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a85      	ldr	r2, [pc, #532]	; (8002d8c <HAL_DMA_IRQHandler+0x690>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d04a      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a83      	ldr	r2, [pc, #524]	; (8002d90 <HAL_DMA_IRQHandler+0x694>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d045      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a82      	ldr	r2, [pc, #520]	; (8002d94 <HAL_DMA_IRQHandler+0x698>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d040      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a80      	ldr	r2, [pc, #512]	; (8002d98 <HAL_DMA_IRQHandler+0x69c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d03b      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a7f      	ldr	r2, [pc, #508]	; (8002d9c <HAL_DMA_IRQHandler+0x6a0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d036      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7d      	ldr	r2, [pc, #500]	; (8002da0 <HAL_DMA_IRQHandler+0x6a4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d031      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7c      	ldr	r2, [pc, #496]	; (8002da4 <HAL_DMA_IRQHandler+0x6a8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d02c      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a7a      	ldr	r2, [pc, #488]	; (8002da8 <HAL_DMA_IRQHandler+0x6ac>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d027      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a79      	ldr	r2, [pc, #484]	; (8002dac <HAL_DMA_IRQHandler+0x6b0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d022      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a77      	ldr	r2, [pc, #476]	; (8002db0 <HAL_DMA_IRQHandler+0x6b4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d01d      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a76      	ldr	r2, [pc, #472]	; (8002db4 <HAL_DMA_IRQHandler+0x6b8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d018      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a74      	ldr	r2, [pc, #464]	; (8002db8 <HAL_DMA_IRQHandler+0x6bc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a73      	ldr	r2, [pc, #460]	; (8002dbc <HAL_DMA_IRQHandler+0x6c0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00e      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a71      	ldr	r2, [pc, #452]	; (8002dc0 <HAL_DMA_IRQHandler+0x6c4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d009      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a70      	ldr	r2, [pc, #448]	; (8002dc4 <HAL_DMA_IRQHandler+0x6c8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x516>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6e      	ldr	r2, [pc, #440]	; (8002dc8 <HAL_DMA_IRQHandler+0x6cc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10a      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x52c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	e009      	b.n	8002c3c <HAL_DMA_IRQHandler+0x540>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d03e      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2210      	movs	r2, #16
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d018      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d108      	bne.n	8002c7e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d024      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
 8002c7c:	e01f      	b.n	8002cbe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01b      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
 8002c8e:	e016      	b.n	8002cbe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0208 	bic.w	r2, r2, #8
 8002cac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 8110 	beq.w	8002ef4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2c      	ldr	r2, [pc, #176]	; (8002d8c <HAL_DMA_IRQHandler+0x690>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d04a      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2b      	ldr	r2, [pc, #172]	; (8002d90 <HAL_DMA_IRQHandler+0x694>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d045      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a29      	ldr	r2, [pc, #164]	; (8002d94 <HAL_DMA_IRQHandler+0x698>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d040      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a28      	ldr	r2, [pc, #160]	; (8002d98 <HAL_DMA_IRQHandler+0x69c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d03b      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a26      	ldr	r2, [pc, #152]	; (8002d9c <HAL_DMA_IRQHandler+0x6a0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d036      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a25      	ldr	r2, [pc, #148]	; (8002da0 <HAL_DMA_IRQHandler+0x6a4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d031      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a23      	ldr	r2, [pc, #140]	; (8002da4 <HAL_DMA_IRQHandler+0x6a8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d02c      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <HAL_DMA_IRQHandler+0x6ac>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d027      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a20      	ldr	r2, [pc, #128]	; (8002dac <HAL_DMA_IRQHandler+0x6b0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d022      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1f      	ldr	r2, [pc, #124]	; (8002db0 <HAL_DMA_IRQHandler+0x6b4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d01d      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_DMA_IRQHandler+0x6b8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d018      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1c      	ldr	r2, [pc, #112]	; (8002db8 <HAL_DMA_IRQHandler+0x6bc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <HAL_DMA_IRQHandler+0x6c0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00e      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <HAL_DMA_IRQHandler+0x6c4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d009      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a17      	ldr	r2, [pc, #92]	; (8002dc4 <HAL_DMA_IRQHandler+0x6c8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x678>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <HAL_DMA_IRQHandler+0x6cc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d12b      	bne.n	8002dcc <HAL_DMA_IRQHandler+0x6d0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf14      	ite	ne
 8002d82:	2301      	movne	r3, #1
 8002d84:	2300      	moveq	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	e02a      	b.n	8002de0 <HAL_DMA_IRQHandler+0x6e4>
 8002d8a:	bf00      	nop
 8002d8c:	40020010 	.word	0x40020010
 8002d90:	40020028 	.word	0x40020028
 8002d94:	40020040 	.word	0x40020040
 8002d98:	40020058 	.word	0x40020058
 8002d9c:	40020070 	.word	0x40020070
 8002da0:	40020088 	.word	0x40020088
 8002da4:	400200a0 	.word	0x400200a0
 8002da8:	400200b8 	.word	0x400200b8
 8002dac:	40020410 	.word	0x40020410
 8002db0:	40020428 	.word	0x40020428
 8002db4:	40020440 	.word	0x40020440
 8002db8:	40020458 	.word	0x40020458
 8002dbc:	40020470 	.word	0x40020470
 8002dc0:	40020488 	.word	0x40020488
 8002dc4:	400204a0 	.word	0x400204a0
 8002dc8:	400204b8 	.word	0x400204b8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf14      	ite	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	2300      	moveq	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8087 	beq.w	8002ef4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2220      	movs	r2, #32
 8002df0:	409a      	lsls	r2, r3
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d139      	bne.n	8002e76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0216 	bic.w	r2, r2, #22
 8002e10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d103      	bne.n	8002e32 <HAL_DMA_IRQHandler+0x736>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0208 	bic.w	r2, r2, #8
 8002e40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	223f      	movs	r2, #63	; 0x3f
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8382 	beq.w	8003570 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
          }
          return;
 8002e74:	e37c      	b.n	8003570 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d018      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d02c      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
 8002ea2:	e027      	b.n	8002ef4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d023      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
 8002eb4:	e01e      	b.n	8002ef4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10f      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0210 	bic.w	r2, r2, #16
 8002ed2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 833e 	beq.w	800357a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8088 	beq.w	800301c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a89      	ldr	r2, [pc, #548]	; (8003140 <HAL_DMA_IRQHandler+0xa44>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d04a      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a88      	ldr	r2, [pc, #544]	; (8003144 <HAL_DMA_IRQHandler+0xa48>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d045      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a86      	ldr	r2, [pc, #536]	; (8003148 <HAL_DMA_IRQHandler+0xa4c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d040      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a85      	ldr	r2, [pc, #532]	; (800314c <HAL_DMA_IRQHandler+0xa50>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d03b      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a83      	ldr	r2, [pc, #524]	; (8003150 <HAL_DMA_IRQHandler+0xa54>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d036      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a82      	ldr	r2, [pc, #520]	; (8003154 <HAL_DMA_IRQHandler+0xa58>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d031      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a80      	ldr	r2, [pc, #512]	; (8003158 <HAL_DMA_IRQHandler+0xa5c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d02c      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a7f      	ldr	r2, [pc, #508]	; (800315c <HAL_DMA_IRQHandler+0xa60>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d027      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a7d      	ldr	r2, [pc, #500]	; (8003160 <HAL_DMA_IRQHandler+0xa64>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d022      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7c      	ldr	r2, [pc, #496]	; (8003164 <HAL_DMA_IRQHandler+0xa68>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d01d      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a7a      	ldr	r2, [pc, #488]	; (8003168 <HAL_DMA_IRQHandler+0xa6c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d018      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a79      	ldr	r2, [pc, #484]	; (800316c <HAL_DMA_IRQHandler+0xa70>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d013      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a77      	ldr	r2, [pc, #476]	; (8003170 <HAL_DMA_IRQHandler+0xa74>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00e      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a76      	ldr	r2, [pc, #472]	; (8003174 <HAL_DMA_IRQHandler+0xa78>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d009      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a74      	ldr	r2, [pc, #464]	; (8003178 <HAL_DMA_IRQHandler+0xa7c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x8b8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a73      	ldr	r2, [pc, #460]	; (800317c <HAL_DMA_IRQHandler+0xa80>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d108      	bne.n	8002fc6 <HAL_DMA_IRQHandler+0x8ca>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e007      	b.n	8002fd6 <HAL_DMA_IRQHandler+0x8da>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d307      	bcc.n	8002ff2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f2      	bne.n	8002fd6 <HAL_DMA_IRQHandler+0x8da>
 8002ff0:	e000      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002ff2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2203      	movs	r2, #3
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800300a:	e003      	b.n	8003014 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 82aa 	beq.w	800357a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
 800302e:	e2a4      	b.n	800357a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_DMA_IRQHandler+0xa84>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d04a      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a51      	ldr	r2, [pc, #324]	; (8003184 <HAL_DMA_IRQHandler+0xa88>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d045      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a4f      	ldr	r2, [pc, #316]	; (8003188 <HAL_DMA_IRQHandler+0xa8c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d040      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a4e      	ldr	r2, [pc, #312]	; (800318c <HAL_DMA_IRQHandler+0xa90>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d03b      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a4c      	ldr	r2, [pc, #304]	; (8003190 <HAL_DMA_IRQHandler+0xa94>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d036      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a4b      	ldr	r2, [pc, #300]	; (8003194 <HAL_DMA_IRQHandler+0xa98>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d031      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a49      	ldr	r2, [pc, #292]	; (8003198 <HAL_DMA_IRQHandler+0xa9c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d02c      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a48      	ldr	r2, [pc, #288]	; (800319c <HAL_DMA_IRQHandler+0xaa0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d027      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a46      	ldr	r2, [pc, #280]	; (80031a0 <HAL_DMA_IRQHandler+0xaa4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d022      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a45      	ldr	r2, [pc, #276]	; (80031a4 <HAL_DMA_IRQHandler+0xaa8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d01d      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a43      	ldr	r2, [pc, #268]	; (80031a8 <HAL_DMA_IRQHandler+0xaac>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d018      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a42      	ldr	r2, [pc, #264]	; (80031ac <HAL_DMA_IRQHandler+0xab0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d013      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a40      	ldr	r2, [pc, #256]	; (80031b0 <HAL_DMA_IRQHandler+0xab4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00e      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a3f      	ldr	r2, [pc, #252]	; (80031b4 <HAL_DMA_IRQHandler+0xab8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d009      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a3d      	ldr	r2, [pc, #244]	; (80031b8 <HAL_DMA_IRQHandler+0xabc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x9d4>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a3c      	ldr	r2, [pc, #240]	; (80031bc <HAL_DMA_IRQHandler+0xac0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x9d8>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <HAL_DMA_IRQHandler+0x9da>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 824f 	beq.w	800357a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	2204      	movs	r2, #4
 80030ee:	409a      	lsls	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80dd 	beq.w	80032b4 <HAL_DMA_IRQHandler+0xbb8>
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80d7 	beq.w	80032b4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	2204      	movs	r2, #4
 8003110:	409a      	lsls	r2, r3
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d059      	beq.n	80031d4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d14a      	bne.n	80031c0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8220 	beq.w	8003574 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800313c:	e21a      	b.n	8003574 <HAL_DMA_IRQHandler+0xe78>
 800313e:	bf00      	nop
 8003140:	40020010 	.word	0x40020010
 8003144:	40020028 	.word	0x40020028
 8003148:	40020040 	.word	0x40020040
 800314c:	40020058 	.word	0x40020058
 8003150:	40020070 	.word	0x40020070
 8003154:	40020088 	.word	0x40020088
 8003158:	400200a0 	.word	0x400200a0
 800315c:	400200b8 	.word	0x400200b8
 8003160:	40020410 	.word	0x40020410
 8003164:	40020428 	.word	0x40020428
 8003168:	40020440 	.word	0x40020440
 800316c:	40020458 	.word	0x40020458
 8003170:	40020470 	.word	0x40020470
 8003174:	40020488 	.word	0x40020488
 8003178:	400204a0 	.word	0x400204a0
 800317c:	400204b8 	.word	0x400204b8
 8003180:	48022c08 	.word	0x48022c08
 8003184:	48022c1c 	.word	0x48022c1c
 8003188:	48022c30 	.word	0x48022c30
 800318c:	48022c44 	.word	0x48022c44
 8003190:	48022c58 	.word	0x48022c58
 8003194:	48022c6c 	.word	0x48022c6c
 8003198:	48022c80 	.word	0x48022c80
 800319c:	48022c94 	.word	0x48022c94
 80031a0:	58025408 	.word	0x58025408
 80031a4:	5802541c 	.word	0x5802541c
 80031a8:	58025430 	.word	0x58025430
 80031ac:	58025444 	.word	0x58025444
 80031b0:	58025458 	.word	0x58025458
 80031b4:	5802546c 	.word	0x5802546c
 80031b8:	58025480 	.word	0x58025480
 80031bc:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 81d5 	beq.w	8003574 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031d2:	e1cf      	b.n	8003574 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d160      	bne.n	80032a0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a7f      	ldr	r2, [pc, #508]	; (80033e0 <HAL_DMA_IRQHandler+0xce4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d04a      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a7d      	ldr	r2, [pc, #500]	; (80033e4 <HAL_DMA_IRQHandler+0xce8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d045      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a7c      	ldr	r2, [pc, #496]	; (80033e8 <HAL_DMA_IRQHandler+0xcec>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d040      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a7a      	ldr	r2, [pc, #488]	; (80033ec <HAL_DMA_IRQHandler+0xcf0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d03b      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a79      	ldr	r2, [pc, #484]	; (80033f0 <HAL_DMA_IRQHandler+0xcf4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d036      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a77      	ldr	r2, [pc, #476]	; (80033f4 <HAL_DMA_IRQHandler+0xcf8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d031      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a76      	ldr	r2, [pc, #472]	; (80033f8 <HAL_DMA_IRQHandler+0xcfc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d02c      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a74      	ldr	r2, [pc, #464]	; (80033fc <HAL_DMA_IRQHandler+0xd00>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d027      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a73      	ldr	r2, [pc, #460]	; (8003400 <HAL_DMA_IRQHandler+0xd04>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d022      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a71      	ldr	r2, [pc, #452]	; (8003404 <HAL_DMA_IRQHandler+0xd08>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01d      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a70      	ldr	r2, [pc, #448]	; (8003408 <HAL_DMA_IRQHandler+0xd0c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d018      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a6e      	ldr	r2, [pc, #440]	; (800340c <HAL_DMA_IRQHandler+0xd10>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d013      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6d      	ldr	r2, [pc, #436]	; (8003410 <HAL_DMA_IRQHandler+0xd14>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00e      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6b      	ldr	r2, [pc, #428]	; (8003414 <HAL_DMA_IRQHandler+0xd18>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d009      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6a      	ldr	r2, [pc, #424]	; (8003418 <HAL_DMA_IRQHandler+0xd1c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_DMA_IRQHandler+0xb82>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a68      	ldr	r2, [pc, #416]	; (800341c <HAL_DMA_IRQHandler+0xd20>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d108      	bne.n	8003290 <HAL_DMA_IRQHandler+0xb94>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0208 	bic.w	r2, r2, #8
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e007      	b.n	80032a0 <HAL_DMA_IRQHandler+0xba4>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0204 	bic.w	r2, r2, #4
 800329e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8165 	beq.w	8003574 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032b2:	e15f      	b.n	8003574 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2202      	movs	r2, #2
 80032be:	409a      	lsls	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80c5 	beq.w	8003454 <HAL_DMA_IRQHandler+0xd58>
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80bf 	beq.w	8003454 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2202      	movs	r2, #2
 80032e0:	409a      	lsls	r2, r3
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d018      	beq.n	8003322 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 813a 	beq.w	8003578 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800330c:	e134      	b.n	8003578 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8130 	beq.w	8003578 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003320:	e12a      	b.n	8003578 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	f040 8089 	bne.w	8003440 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a2b      	ldr	r2, [pc, #172]	; (80033e0 <HAL_DMA_IRQHandler+0xce4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d04a      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <HAL_DMA_IRQHandler+0xce8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d045      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a28      	ldr	r2, [pc, #160]	; (80033e8 <HAL_DMA_IRQHandler+0xcec>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d040      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a26      	ldr	r2, [pc, #152]	; (80033ec <HAL_DMA_IRQHandler+0xcf0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d03b      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a25      	ldr	r2, [pc, #148]	; (80033f0 <HAL_DMA_IRQHandler+0xcf4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d036      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a23      	ldr	r2, [pc, #140]	; (80033f4 <HAL_DMA_IRQHandler+0xcf8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d031      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a22      	ldr	r2, [pc, #136]	; (80033f8 <HAL_DMA_IRQHandler+0xcfc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d02c      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a20      	ldr	r2, [pc, #128]	; (80033fc <HAL_DMA_IRQHandler+0xd00>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d027      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <HAL_DMA_IRQHandler+0xd04>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d022      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <HAL_DMA_IRQHandler+0xd08>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01d      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <HAL_DMA_IRQHandler+0xd0c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1a      	ldr	r2, [pc, #104]	; (800340c <HAL_DMA_IRQHandler+0xd10>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a19      	ldr	r2, [pc, #100]	; (8003410 <HAL_DMA_IRQHandler+0xd14>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a17      	ldr	r2, [pc, #92]	; (8003414 <HAL_DMA_IRQHandler+0xd18>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a16      	ldr	r2, [pc, #88]	; (8003418 <HAL_DMA_IRQHandler+0xd1c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_DMA_IRQHandler+0xcd2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a14      	ldr	r2, [pc, #80]	; (800341c <HAL_DMA_IRQHandler+0xd20>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d128      	bne.n	8003420 <HAL_DMA_IRQHandler+0xd24>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0214 	bic.w	r2, r2, #20
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e027      	b.n	8003430 <HAL_DMA_IRQHandler+0xd34>
 80033e0:	40020010 	.word	0x40020010
 80033e4:	40020028 	.word	0x40020028
 80033e8:	40020040 	.word	0x40020040
 80033ec:	40020058 	.word	0x40020058
 80033f0:	40020070 	.word	0x40020070
 80033f4:	40020088 	.word	0x40020088
 80033f8:	400200a0 	.word	0x400200a0
 80033fc:	400200b8 	.word	0x400200b8
 8003400:	40020410 	.word	0x40020410
 8003404:	40020428 	.word	0x40020428
 8003408:	40020440 	.word	0x40020440
 800340c:	40020458 	.word	0x40020458
 8003410:	40020470 	.word	0x40020470
 8003414:	40020488 	.word	0x40020488
 8003418:	400204a0 	.word	0x400204a0
 800341c:	400204b8 	.word	0x400204b8
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 020a 	bic.w	r2, r2, #10
 800342e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8097 	beq.w	8003578 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003452:	e091      	b.n	8003578 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2208      	movs	r2, #8
 800345e:	409a      	lsls	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8088 	beq.w	800357a <HAL_DMA_IRQHandler+0xe7e>
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8082 	beq.w	800357a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a41      	ldr	r2, [pc, #260]	; (8003580 <HAL_DMA_IRQHandler+0xe84>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d04a      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a3f      	ldr	r2, [pc, #252]	; (8003584 <HAL_DMA_IRQHandler+0xe88>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d045      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a3e      	ldr	r2, [pc, #248]	; (8003588 <HAL_DMA_IRQHandler+0xe8c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d040      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a3c      	ldr	r2, [pc, #240]	; (800358c <HAL_DMA_IRQHandler+0xe90>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d03b      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a3b      	ldr	r2, [pc, #236]	; (8003590 <HAL_DMA_IRQHandler+0xe94>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d036      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a39      	ldr	r2, [pc, #228]	; (8003594 <HAL_DMA_IRQHandler+0xe98>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d031      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a38      	ldr	r2, [pc, #224]	; (8003598 <HAL_DMA_IRQHandler+0xe9c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d02c      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a36      	ldr	r2, [pc, #216]	; (800359c <HAL_DMA_IRQHandler+0xea0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d027      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a35      	ldr	r2, [pc, #212]	; (80035a0 <HAL_DMA_IRQHandler+0xea4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a33      	ldr	r2, [pc, #204]	; (80035a4 <HAL_DMA_IRQHandler+0xea8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01d      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a32      	ldr	r2, [pc, #200]	; (80035a8 <HAL_DMA_IRQHandler+0xeac>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d018      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a30      	ldr	r2, [pc, #192]	; (80035ac <HAL_DMA_IRQHandler+0xeb0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2f      	ldr	r2, [pc, #188]	; (80035b0 <HAL_DMA_IRQHandler+0xeb4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a2d      	ldr	r2, [pc, #180]	; (80035b4 <HAL_DMA_IRQHandler+0xeb8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2c      	ldr	r2, [pc, #176]	; (80035b8 <HAL_DMA_IRQHandler+0xebc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe1a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2a      	ldr	r2, [pc, #168]	; (80035bc <HAL_DMA_IRQHandler+0xec0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d108      	bne.n	8003528 <HAL_DMA_IRQHandler+0xe2c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 021c 	bic.w	r2, r2, #28
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e007      	b.n	8003538 <HAL_DMA_IRQHandler+0xe3c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 020e 	bic.w	r2, r2, #14
 8003536:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2201      	movs	r2, #1
 8003542:	409a      	lsls	r2, r3
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
 800356e:	e004      	b.n	800357a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003570:	bf00      	nop
 8003572:	e002      	b.n	800357a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003574:	bf00      	nop
 8003576:	e000      	b.n	800357a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003578:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40020010 	.word	0x40020010
 8003584:	40020028 	.word	0x40020028
 8003588:	40020040 	.word	0x40020040
 800358c:	40020058 	.word	0x40020058
 8003590:	40020070 	.word	0x40020070
 8003594:	40020088 	.word	0x40020088
 8003598:	400200a0 	.word	0x400200a0
 800359c:	400200b8 	.word	0x400200b8
 80035a0:	40020410 	.word	0x40020410
 80035a4:	40020428 	.word	0x40020428
 80035a8:	40020440 	.word	0x40020440
 80035ac:	40020458 	.word	0x40020458
 80035b0:	40020470 	.word	0x40020470
 80035b4:	40020488 	.word	0x40020488
 80035b8:	400204a0 	.word	0x400204a0
 80035bc:	400204b8 	.word	0x400204b8

080035c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a42      	ldr	r2, [pc, #264]	; (80036d8 <DMA_CalcBaseAndBitshift+0x118>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d04a      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a41      	ldr	r2, [pc, #260]	; (80036dc <DMA_CalcBaseAndBitshift+0x11c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d045      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a3f      	ldr	r2, [pc, #252]	; (80036e0 <DMA_CalcBaseAndBitshift+0x120>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d040      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a3e      	ldr	r2, [pc, #248]	; (80036e4 <DMA_CalcBaseAndBitshift+0x124>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d03b      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a3c      	ldr	r2, [pc, #240]	; (80036e8 <DMA_CalcBaseAndBitshift+0x128>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d036      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a3b      	ldr	r2, [pc, #236]	; (80036ec <DMA_CalcBaseAndBitshift+0x12c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d031      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a39      	ldr	r2, [pc, #228]	; (80036f0 <DMA_CalcBaseAndBitshift+0x130>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d02c      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a38      	ldr	r2, [pc, #224]	; (80036f4 <DMA_CalcBaseAndBitshift+0x134>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d027      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a36      	ldr	r2, [pc, #216]	; (80036f8 <DMA_CalcBaseAndBitshift+0x138>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d022      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a35      	ldr	r2, [pc, #212]	; (80036fc <DMA_CalcBaseAndBitshift+0x13c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d01d      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a33      	ldr	r2, [pc, #204]	; (8003700 <DMA_CalcBaseAndBitshift+0x140>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d018      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a32      	ldr	r2, [pc, #200]	; (8003704 <DMA_CalcBaseAndBitshift+0x144>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d013      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a30      	ldr	r2, [pc, #192]	; (8003708 <DMA_CalcBaseAndBitshift+0x148>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00e      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2f      	ldr	r2, [pc, #188]	; (800370c <DMA_CalcBaseAndBitshift+0x14c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d009      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2d      	ldr	r2, [pc, #180]	; (8003710 <DMA_CalcBaseAndBitshift+0x150>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2c      	ldr	r2, [pc, #176]	; (8003714 <DMA_CalcBaseAndBitshift+0x154>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <DMA_CalcBaseAndBitshift+0xac>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <DMA_CalcBaseAndBitshift+0xae>
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d024      	beq.n	80036bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3b10      	subs	r3, #16
 800367a:	4a27      	ldr	r2, [pc, #156]	; (8003718 <DMA_CalcBaseAndBitshift+0x158>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	4a24      	ldr	r2, [pc, #144]	; (800371c <DMA_CalcBaseAndBitshift+0x15c>)
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	461a      	mov	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b03      	cmp	r3, #3
 8003698:	d908      	bls.n	80036ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <DMA_CalcBaseAndBitshift+0x160>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	1d1a      	adds	r2, r3, #4
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	659a      	str	r2, [r3, #88]	; 0x58
 80036aa:	e00d      	b.n	80036c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <DMA_CalcBaseAndBitshift+0x160>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6593      	str	r3, [r2, #88]	; 0x58
 80036ba:	e005      	b.n	80036c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40020010 	.word	0x40020010
 80036dc:	40020028 	.word	0x40020028
 80036e0:	40020040 	.word	0x40020040
 80036e4:	40020058 	.word	0x40020058
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40020088 	.word	0x40020088
 80036f0:	400200a0 	.word	0x400200a0
 80036f4:	400200b8 	.word	0x400200b8
 80036f8:	40020410 	.word	0x40020410
 80036fc:	40020428 	.word	0x40020428
 8003700:	40020440 	.word	0x40020440
 8003704:	40020458 	.word	0x40020458
 8003708:	40020470 	.word	0x40020470
 800370c:	40020488 	.word	0x40020488
 8003710:	400204a0 	.word	0x400204a0
 8003714:	400204b8 	.word	0x400204b8
 8003718:	aaaaaaab 	.word	0xaaaaaaab
 800371c:	0800a3d8 	.word	0x0800a3d8
 8003720:	fffffc00 	.word	0xfffffc00

08003724 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d120      	bne.n	800377a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	2b03      	cmp	r3, #3
 800373e:	d858      	bhi.n	80037f2 <DMA_CheckFifoParam+0xce>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <DMA_CheckFifoParam+0x24>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	08003759 	.word	0x08003759
 800374c:	0800376b 	.word	0x0800376b
 8003750:	08003759 	.word	0x08003759
 8003754:	080037f3 	.word	0x080037f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d048      	beq.n	80037f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003768:	e045      	b.n	80037f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003772:	d142      	bne.n	80037fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003778:	e03f      	b.n	80037fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003782:	d123      	bne.n	80037cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	2b03      	cmp	r3, #3
 800378a:	d838      	bhi.n	80037fe <DMA_CheckFifoParam+0xda>
 800378c:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <DMA_CheckFifoParam+0x70>)
 800378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003792:	bf00      	nop
 8003794:	080037a5 	.word	0x080037a5
 8003798:	080037ab 	.word	0x080037ab
 800379c:	080037a5 	.word	0x080037a5
 80037a0:	080037bd 	.word	0x080037bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
        break;
 80037a8:	e030      	b.n	800380c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d025      	beq.n	8003802 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037ba:	e022      	b.n	8003802 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037c4:	d11f      	bne.n	8003806 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037ca:	e01c      	b.n	8003806 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d902      	bls.n	80037da <DMA_CheckFifoParam+0xb6>
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d003      	beq.n	80037e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80037d8:	e018      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
        break;
 80037de:	e015      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00e      	beq.n	800380a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
    break;
 80037f0:	e00b      	b.n	800380a <DMA_CheckFifoParam+0xe6>
        break;
 80037f2:	bf00      	nop
 80037f4:	e00a      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        break;
 80037f6:	bf00      	nop
 80037f8:	e008      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        break;
 80037fa:	bf00      	nop
 80037fc:	e006      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        break;
 80037fe:	bf00      	nop
 8003800:	e004      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        break;
 8003802:	bf00      	nop
 8003804:	e002      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        break;
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <DMA_CheckFifoParam+0xe8>
    break;
 800380a:	bf00      	nop
    }
  }

  return status;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop

0800381c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a38      	ldr	r2, [pc, #224]	; (8003910 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d022      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a36      	ldr	r2, [pc, #216]	; (8003914 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d01d      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a35      	ldr	r2, [pc, #212]	; (8003918 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d018      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a33      	ldr	r2, [pc, #204]	; (800391c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a32      	ldr	r2, [pc, #200]	; (8003920 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00e      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a30      	ldr	r2, [pc, #192]	; (8003924 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d009      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2f      	ldr	r2, [pc, #188]	; (8003928 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d004      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a2d      	ldr	r2, [pc, #180]	; (800392c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d101      	bne.n	800387e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800387e:	2300      	movs	r3, #0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01a      	beq.n	80038ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	3b08      	subs	r3, #8
 800388c:	4a28      	ldr	r2, [pc, #160]	; (8003930 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	461a      	mov	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a24      	ldr	r2, [pc, #144]	; (8003938 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80038a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2201      	movs	r2, #1
 80038b2:	409a      	lsls	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80038b8:	e024      	b.n	8003904 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	3b10      	subs	r3, #16
 80038c2:	4a1e      	ldr	r2, [pc, #120]	; (800393c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d806      	bhi.n	80038e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d902      	bls.n	80038e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3308      	adds	r3, #8
 80038e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4b18      	ldr	r3, [pc, #96]	; (8003948 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	461a      	mov	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a16      	ldr	r2, [pc, #88]	; (800394c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80038f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	2201      	movs	r2, #1
 80038fe:	409a      	lsls	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	58025408 	.word	0x58025408
 8003914:	5802541c 	.word	0x5802541c
 8003918:	58025430 	.word	0x58025430
 800391c:	58025444 	.word	0x58025444
 8003920:	58025458 	.word	0x58025458
 8003924:	5802546c 	.word	0x5802546c
 8003928:	58025480 	.word	0x58025480
 800392c:	58025494 	.word	0x58025494
 8003930:	cccccccd 	.word	0xcccccccd
 8003934:	16009600 	.word	0x16009600
 8003938:	58025880 	.word	0x58025880
 800393c:	aaaaaaab 	.word	0xaaaaaaab
 8003940:	400204b8 	.word	0x400204b8
 8003944:	4002040f 	.word	0x4002040f
 8003948:	10008200 	.word	0x10008200
 800394c:	40020880 	.word	0x40020880

08003950 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d04a      	beq.n	80039fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d847      	bhi.n	80039fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a25      	ldr	r2, [pc, #148]	; (8003a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d022      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a24      	ldr	r2, [pc, #144]	; (8003a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d01d      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a22      	ldr	r2, [pc, #136]	; (8003a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d018      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a21      	ldr	r2, [pc, #132]	; (8003a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d013      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00e      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1e      	ldr	r2, [pc, #120]	; (8003a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d009      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1c      	ldr	r2, [pc, #112]	; (8003a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1b      	ldr	r2, [pc, #108]	; (8003a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80039c0:	2300      	movs	r3, #0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	461a      	mov	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80039d8:	671a      	str	r2, [r3, #112]	; 0x70
 80039da:	e009      	b.n	80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a11      	ldr	r2, [pc, #68]	; (8003a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80039ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	2201      	movs	r2, #1
 80039f6:	409a      	lsls	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	58025408 	.word	0x58025408
 8003a0c:	5802541c 	.word	0x5802541c
 8003a10:	58025430 	.word	0x58025430
 8003a14:	58025444 	.word	0x58025444
 8003a18:	58025458 	.word	0x58025458
 8003a1c:	5802546c 	.word	0x5802546c
 8003a20:	58025480 	.word	0x58025480
 8003a24:	58025494 	.word	0x58025494
 8003a28:	1600963f 	.word	0x1600963f
 8003a2c:	58025940 	.word	0x58025940
 8003a30:	1000823f 	.word	0x1000823f
 8003a34:	40020940 	.word	0x40020940

08003a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a46:	4b89      	ldr	r3, [pc, #548]	; (8003c6c <HAL_GPIO_Init+0x234>)
 8003a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a4a:	e194      	b.n	8003d76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2101      	movs	r1, #1
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8186 	beq.w	8003d70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d005      	beq.n	8003a7c <HAL_GPIO_Init+0x44>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d130      	bne.n	8003ade <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	2203      	movs	r2, #3
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	f003 0201 	and.w	r2, r3, #1
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d017      	beq.n	8003b1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	2203      	movs	r2, #3
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d123      	bne.n	8003b6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	08da      	lsrs	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3208      	adds	r2, #8
 8003b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	08da      	lsrs	r2, r3, #3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3208      	adds	r2, #8
 8003b68:	69b9      	ldr	r1, [r7, #24]
 8003b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	2203      	movs	r2, #3
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0203 	and.w	r2, r3, #3
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 80e0 	beq.w	8003d70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb0:	4b2f      	ldr	r3, [pc, #188]	; (8003c70 <HAL_GPIO_Init+0x238>)
 8003bb2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003bb6:	4a2e      	ldr	r2, [pc, #184]	; (8003c70 <HAL_GPIO_Init+0x238>)
 8003bb8:	f043 0302 	orr.w	r3, r3, #2
 8003bbc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_GPIO_Init+0x238>)
 8003bc2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bce:	4a29      	ldr	r2, [pc, #164]	; (8003c74 <HAL_GPIO_Init+0x23c>)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	220f      	movs	r2, #15
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <HAL_GPIO_Init+0x240>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d052      	beq.n	8003ca0 <HAL_GPIO_Init+0x268>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <HAL_GPIO_Init+0x244>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_GPIO_Init+0x22e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <HAL_GPIO_Init+0x248>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02b      	beq.n	8003c62 <HAL_GPIO_Init+0x22a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <HAL_GPIO_Init+0x24c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d025      	beq.n	8003c5e <HAL_GPIO_Init+0x226>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <HAL_GPIO_Init+0x250>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <HAL_GPIO_Init+0x222>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <HAL_GPIO_Init+0x254>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d019      	beq.n	8003c56 <HAL_GPIO_Init+0x21e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1a      	ldr	r2, [pc, #104]	; (8003c90 <HAL_GPIO_Init+0x258>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0x21a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <HAL_GPIO_Init+0x25c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_Init+0x216>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <HAL_GPIO_Init+0x260>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_Init+0x212>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a17      	ldr	r2, [pc, #92]	; (8003c9c <HAL_GPIO_Init+0x264>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_Init+0x20e>
 8003c42:	2309      	movs	r3, #9
 8003c44:	e02d      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c46:	230a      	movs	r3, #10
 8003c48:	e02b      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	e029      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c4e:	2307      	movs	r3, #7
 8003c50:	e027      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c52:	2306      	movs	r3, #6
 8003c54:	e025      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e023      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e021      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e01f      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e01d      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e01b      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c6a:	bf00      	nop
 8003c6c:	58000080 	.word	0x58000080
 8003c70:	58024400 	.word	0x58024400
 8003c74:	58000400 	.word	0x58000400
 8003c78:	58020000 	.word	0x58020000
 8003c7c:	58020400 	.word	0x58020400
 8003c80:	58020800 	.word	0x58020800
 8003c84:	58020c00 	.word	0x58020c00
 8003c88:	58021000 	.word	0x58021000
 8003c8c:	58021400 	.word	0x58021400
 8003c90:	58021800 	.word	0x58021800
 8003c94:	58021c00 	.word	0x58021c00
 8003c98:	58022000 	.word	0x58022000
 8003c9c:	58022400 	.word	0x58022400
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	f002 0203 	and.w	r2, r2, #3
 8003ca8:	0092      	lsls	r2, r2, #2
 8003caa:	4093      	lsls	r3, r2
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cb2:	4938      	ldr	r1, [pc, #224]	; (8003d94 <HAL_GPIO_Init+0x35c>)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	089b      	lsrs	r3, r3, #2
 8003cb8:	3302      	adds	r3, #2
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003ce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f47f ae63 	bne.w	8003a4c <HAL_GPIO_Init+0x14>
  }
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	3724      	adds	r7, #36	; 0x24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	58000400 	.word	0x58000400

08003d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
 8003da4:	4613      	mov	r3, r2
 8003da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003da8:	787b      	ldrb	r3, [r7, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dae:	887a      	ldrh	r2, [r7, #2]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003db4:	e003      	b.n	8003dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003db6:	887b      	ldrh	r3, [r7, #2]
 8003db8:	041a      	lsls	r2, r3, #16
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	619a      	str	r2, [r3, #24]
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ddc:	887a      	ldrh	r2, [r7, #2]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4013      	ands	r3, r2
 8003de2:	041a      	lsls	r2, r3, #16
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	43d9      	mvns	r1, r3
 8003de8:	887b      	ldrh	r3, [r7, #2]
 8003dea:	400b      	ands	r3, r1
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	619a      	str	r2, [r3, #24]
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	4603      	mov	r3, r0
 8003e06:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fd f979 	bl	800111c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003e3c:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	2b06      	cmp	r3, #6
 8003e46:	d00a      	beq.n	8003e5e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e48:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d001      	beq.n	8003e5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e040      	b.n	8003edc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e03e      	b.n	8003edc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e5e:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003e66:	491f      	ldr	r1, [pc, #124]	; (8003ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e6e:	f7fd ff99 	bl	8001da4 <HAL_GetTick>
 8003e72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e74:	e009      	b.n	8003e8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e76:	f7fd ff95 	bl	8001da4 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e84:	d901      	bls.n	8003e8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e028      	b.n	8003edc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e96:	d1ee      	bne.n	8003e76 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b1e      	cmp	r3, #30
 8003e9c:	d008      	beq.n	8003eb0 <HAL_PWREx_ConfigSupply+0x7c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ea2:	d005      	beq.n	8003eb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b1d      	cmp	r3, #29
 8003ea8:	d002      	beq.n	8003eb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b2d      	cmp	r3, #45	; 0x2d
 8003eae:	d114      	bne.n	8003eda <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003eb0:	f7fd ff78 	bl	8001da4 <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003eb6:	e009      	b.n	8003ecc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003eb8:	f7fd ff74 	bl	8001da4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ec6:	d901      	bls.n	8003ecc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e007      	b.n	8003edc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed8:	d1ee      	bne.n	8003eb8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	58024800 	.word	0x58024800

08003ee8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	; 0x30
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e3f4      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80b3 	beq.w	800406e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f08:	4b95      	ldr	r3, [pc, #596]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f12:	4b93      	ldr	r3, [pc, #588]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1a:	2b10      	cmp	r3, #16
 8003f1c:	d007      	beq.n	8003f2e <HAL_RCC_OscConfig+0x46>
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	2b18      	cmp	r3, #24
 8003f22:	d112      	bne.n	8003f4a <HAL_RCC_OscConfig+0x62>
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d10d      	bne.n	8003f4a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2e:	4b8c      	ldr	r3, [pc, #560]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8098 	beq.w	800406c <HAL_RCC_OscConfig+0x184>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f040 8093 	bne.w	800406c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e3cc      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f52:	d106      	bne.n	8003f62 <HAL_RCC_OscConfig+0x7a>
 8003f54:	4b82      	ldr	r3, [pc, #520]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a81      	ldr	r2, [pc, #516]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	e058      	b.n	8004014 <HAL_RCC_OscConfig+0x12c>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d112      	bne.n	8003f90 <HAL_RCC_OscConfig+0xa8>
 8003f6a:	4b7d      	ldr	r3, [pc, #500]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a7c      	ldr	r2, [pc, #496]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4b7a      	ldr	r3, [pc, #488]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a79      	ldr	r2, [pc, #484]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003f7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	4b77      	ldr	r3, [pc, #476]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a76      	ldr	r2, [pc, #472]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e041      	b.n	8004014 <HAL_RCC_OscConfig+0x12c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f98:	d112      	bne.n	8003fc0 <HAL_RCC_OscConfig+0xd8>
 8003f9a:	4b71      	ldr	r3, [pc, #452]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a70      	ldr	r2, [pc, #448]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b6e      	ldr	r3, [pc, #440]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a6d      	ldr	r2, [pc, #436]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003fac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	4b6b      	ldr	r3, [pc, #428]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6a      	ldr	r2, [pc, #424]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e029      	b.n	8004014 <HAL_RCC_OscConfig+0x12c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003fc8:	d112      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x108>
 8003fca:	4b65      	ldr	r3, [pc, #404]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a64      	ldr	r2, [pc, #400]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b62      	ldr	r3, [pc, #392]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a61      	ldr	r2, [pc, #388]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003fdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b5f      	ldr	r3, [pc, #380]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a5e      	ldr	r2, [pc, #376]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e011      	b.n	8004014 <HAL_RCC_OscConfig+0x12c>
 8003ff0:	4b5b      	ldr	r3, [pc, #364]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a5a      	ldr	r2, [pc, #360]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b58      	ldr	r3, [pc, #352]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a57      	ldr	r2, [pc, #348]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8004002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b55      	ldr	r3, [pc, #340]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a54      	ldr	r2, [pc, #336]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 800400e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fd fec2 	bl	8001da4 <HAL_GetTick>
 8004020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004024:	f7fd febe 	bl	8001da4 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e356      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004036:	4b4a      	ldr	r3, [pc, #296]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x13c>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fd feae 	bl	8001da4 <HAL_GetTick>
 8004048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404c:	f7fd feaa 	bl	8001da4 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e342      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800405e:	4b40      	ldr	r3, [pc, #256]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x164>
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 808d 	beq.w	8004196 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407c:	4b38      	ldr	r3, [pc, #224]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004084:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004086:	4b36      	ldr	r3, [pc, #216]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_RCC_OscConfig+0x1ba>
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	2b18      	cmp	r3, #24
 8004096:	d137      	bne.n	8004108 <HAL_RCC_OscConfig+0x220>
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d132      	bne.n	8004108 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a2:	4b2f      	ldr	r3, [pc, #188]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_RCC_OscConfig+0x1d2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e314      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040ba:	4b29      	ldr	r3, [pc, #164]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 0219 	bic.w	r2, r3, #25
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	4926      	ldr	r1, [pc, #152]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040cc:	f7fd fe6a 	bl	8001da4 <HAL_GetTick>
 80040d0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d4:	f7fd fe66 	bl	8001da4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e2fe      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040e6:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f2:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	061b      	lsls	r3, r3, #24
 8004100:	4917      	ldr	r1, [pc, #92]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004106:	e046      	b.n	8004196 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d029      	beq.n	8004164 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004110:	4b13      	ldr	r3, [pc, #76]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 0219 	bic.w	r2, r3, #25
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4910      	ldr	r1, [pc, #64]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004122:	f7fd fe3f 	bl	8001da4 <HAL_GetTick>
 8004126:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412a:	f7fd fe3b 	bl	8001da4 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e2d3      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	061b      	lsls	r3, r3, #24
 8004156:	4902      	ldr	r1, [pc, #8]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8004158:	4313      	orrs	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
 800415c:	e01b      	b.n	8004196 <HAL_RCC_OscConfig+0x2ae>
 800415e:	bf00      	nop
 8004160:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004164:	4b97      	ldr	r3, [pc, #604]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a96      	ldr	r2, [pc, #600]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd fe18 	bl	8001da4 <HAL_GetTick>
 8004174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004178:	f7fd fe14 	bl	8001da4 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e2ac      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800418a:	4b8e      	ldr	r3, [pc, #568]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d06a      	beq.n	8004278 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041a2:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041ac:	4b85      	ldr	r3, [pc, #532]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d007      	beq.n	80041c8 <HAL_RCC_OscConfig+0x2e0>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b18      	cmp	r3, #24
 80041bc:	d11b      	bne.n	80041f6 <HAL_RCC_OscConfig+0x30e>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d116      	bne.n	80041f6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041c8:	4b7e      	ldr	r3, [pc, #504]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_OscConfig+0x2f8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d001      	beq.n	80041e0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e281      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041e0:	4b78      	ldr	r3, [pc, #480]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	4975      	ldr	r1, [pc, #468]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041f4:	e040      	b.n	8004278 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d023      	beq.n	8004246 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041fe:	4b71      	ldr	r3, [pc, #452]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a70      	ldr	r2, [pc, #448]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 8004204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fd fdcb 	bl	8001da4 <HAL_GetTick>
 800420e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004212:	f7fd fdc7 	bl	8001da4 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e25f      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004224:	4b67      	ldr	r3, [pc, #412]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004230:	4b64      	ldr	r3, [pc, #400]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	061b      	lsls	r3, r3, #24
 800423e:	4961      	ldr	r1, [pc, #388]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 8004240:	4313      	orrs	r3, r2
 8004242:	60cb      	str	r3, [r1, #12]
 8004244:	e018      	b.n	8004278 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004246:	4b5f      	ldr	r3, [pc, #380]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a5e      	ldr	r2, [pc, #376]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 800424c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fd fda7 	bl	8001da4 <HAL_GetTick>
 8004256:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800425a:	f7fd fda3 	bl	8001da4 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e23b      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800426c:	4b55      	ldr	r3, [pc, #340]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f0      	bne.n	800425a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d036      	beq.n	80042f2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d019      	beq.n	80042c0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428c:	4b4d      	ldr	r3, [pc, #308]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 800428e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004290:	4a4c      	ldr	r2, [pc, #304]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fd fd84 	bl	8001da4 <HAL_GetTick>
 800429c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fd fd80 	bl	8001da4 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e218      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042b2:	4b44      	ldr	r3, [pc, #272]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 80042b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x3b8>
 80042be:	e018      	b.n	80042f2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c0:	4b40      	ldr	r3, [pc, #256]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 80042c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c4:	4a3f      	ldr	r2, [pc, #252]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fd fd6a 	bl	8001da4 <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d4:	f7fd fd66 	bl	8001da4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1fe      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042e6:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 80042e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d036      	beq.n	800436c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d019      	beq.n	800433a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004306:	4b2f      	ldr	r3, [pc, #188]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2e      	ldr	r2, [pc, #184]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 800430c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004310:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004312:	f7fd fd47 	bl	8001da4 <HAL_GetTick>
 8004316:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800431a:	f7fd fd43 	bl	8001da4 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e1db      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x432>
 8004338:	e018      	b.n	800436c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 8004340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004344:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004346:	f7fd fd2d 	bl	8001da4 <HAL_GetTick>
 800434a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800434e:	f7fd fd29 	bl	8001da4 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e1c1      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004360:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f0      	bne.n	800434e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80af 	beq.w	80044d8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800437a:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <HAL_RCC_OscConfig+0x4e0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a12      	ldr	r2, [pc, #72]	; (80043c8 <HAL_RCC_OscConfig+0x4e0>)
 8004380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004384:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004386:	f7fd fd0d 	bl	8001da4 <HAL_GetTick>
 800438a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800438e:	f7fd fd09 	bl	8001da4 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b64      	cmp	r3, #100	; 0x64
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e1a1      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043a0:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <HAL_RCC_OscConfig+0x4e0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d10b      	bne.n	80043cc <HAL_RCC_OscConfig+0x4e4>
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	4a02      	ldr	r2, [pc, #8]	; (80043c4 <HAL_RCC_OscConfig+0x4dc>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	6713      	str	r3, [r2, #112]	; 0x70
 80043c0:	e05b      	b.n	800447a <HAL_RCC_OscConfig+0x592>
 80043c2:	bf00      	nop
 80043c4:	58024400 	.word	0x58024400
 80043c8:	58024800 	.word	0x58024800
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d112      	bne.n	80043fa <HAL_RCC_OscConfig+0x512>
 80043d4:	4b9d      	ldr	r3, [pc, #628]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a9c      	ldr	r2, [pc, #624]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
 80043e0:	4b9a      	ldr	r3, [pc, #616]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	4a99      	ldr	r2, [pc, #612]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80043e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ea:	6713      	str	r3, [r2, #112]	; 0x70
 80043ec:	4b97      	ldr	r3, [pc, #604]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	4a96      	ldr	r2, [pc, #600]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80043f2:	f023 0304 	bic.w	r3, r3, #4
 80043f6:	6713      	str	r3, [r2, #112]	; 0x70
 80043f8:	e03f      	b.n	800447a <HAL_RCC_OscConfig+0x592>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b05      	cmp	r3, #5
 8004400:	d112      	bne.n	8004428 <HAL_RCC_OscConfig+0x540>
 8004402:	4b92      	ldr	r3, [pc, #584]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	4a91      	ldr	r2, [pc, #580]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004408:	f043 0304 	orr.w	r3, r3, #4
 800440c:	6713      	str	r3, [r2, #112]	; 0x70
 800440e:	4b8f      	ldr	r3, [pc, #572]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	4a8e      	ldr	r2, [pc, #568]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004418:	6713      	str	r3, [r2, #112]	; 0x70
 800441a:	4b8c      	ldr	r3, [pc, #560]	; (800464c <HAL_RCC_OscConfig+0x764>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	4a8b      	ldr	r2, [pc, #556]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6713      	str	r3, [r2, #112]	; 0x70
 8004426:	e028      	b.n	800447a <HAL_RCC_OscConfig+0x592>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b85      	cmp	r3, #133	; 0x85
 800442e:	d112      	bne.n	8004456 <HAL_RCC_OscConfig+0x56e>
 8004430:	4b86      	ldr	r3, [pc, #536]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	4a85      	ldr	r2, [pc, #532]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004436:	f043 0304 	orr.w	r3, r3, #4
 800443a:	6713      	str	r3, [r2, #112]	; 0x70
 800443c:	4b83      	ldr	r3, [pc, #524]	; (800464c <HAL_RCC_OscConfig+0x764>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004440:	4a82      	ldr	r2, [pc, #520]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004446:	6713      	str	r3, [r2, #112]	; 0x70
 8004448:	4b80      	ldr	r3, [pc, #512]	; (800464c <HAL_RCC_OscConfig+0x764>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	4a7f      	ldr	r2, [pc, #508]	; (800464c <HAL_RCC_OscConfig+0x764>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	; 0x70
 8004454:	e011      	b.n	800447a <HAL_RCC_OscConfig+0x592>
 8004456:	4b7d      	ldr	r3, [pc, #500]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	4a7c      	ldr	r2, [pc, #496]	; (800464c <HAL_RCC_OscConfig+0x764>)
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	6713      	str	r3, [r2, #112]	; 0x70
 8004462:	4b7a      	ldr	r3, [pc, #488]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	4a79      	ldr	r2, [pc, #484]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004468:	f023 0304 	bic.w	r3, r3, #4
 800446c:	6713      	str	r3, [r2, #112]	; 0x70
 800446e:	4b77      	ldr	r3, [pc, #476]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	4a76      	ldr	r2, [pc, #472]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004478:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d015      	beq.n	80044ae <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004482:	f7fd fc8f 	bl	8001da4 <HAL_GetTick>
 8004486:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004488:	e00a      	b.n	80044a0 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800448a:	f7fd fc8b 	bl	8001da4 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	f241 3288 	movw	r2, #5000	; 0x1388
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e121      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044a0:	4b6a      	ldr	r3, [pc, #424]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0ee      	beq.n	800448a <HAL_RCC_OscConfig+0x5a2>
 80044ac:	e014      	b.n	80044d8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ae:	f7fd fc79 	bl	8001da4 <HAL_GetTick>
 80044b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044b4:	e00a      	b.n	80044cc <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fd fc75 	bl	8001da4 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e10b      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044cc:	4b5f      	ldr	r3, [pc, #380]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1ee      	bne.n	80044b6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8100 	beq.w	80046e2 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044e2:	4b5a      	ldr	r3, [pc, #360]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ea:	2b18      	cmp	r3, #24
 80044ec:	f000 80bb 	beq.w	8004666 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	f040 8095 	bne.w	8004624 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fa:	4b54      	ldr	r3, [pc, #336]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a53      	ldr	r2, [pc, #332]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004506:	f7fd fc4d 	bl	8001da4 <HAL_GetTick>
 800450a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450e:	f7fd fc49 	bl	8001da4 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0e1      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004520:	4b4a      	ldr	r3, [pc, #296]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452c:	4b47      	ldr	r3, [pc, #284]	; (800464c <HAL_RCC_OscConfig+0x764>)
 800452e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004530:	4b47      	ldr	r3, [pc, #284]	; (8004650 <HAL_RCC_OscConfig+0x768>)
 8004532:	4013      	ands	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800453c:	0112      	lsls	r2, r2, #4
 800453e:	430a      	orrs	r2, r1
 8004540:	4942      	ldr	r1, [pc, #264]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004542:	4313      	orrs	r3, r2
 8004544:	628b      	str	r3, [r1, #40]	; 0x28
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	3b01      	subs	r3, #1
 800454c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	3b01      	subs	r3, #1
 8004556:	025b      	lsls	r3, r3, #9
 8004558:	b29b      	uxth	r3, r3
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	3b01      	subs	r3, #1
 8004562:	041b      	lsls	r3, r3, #16
 8004564:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	3b01      	subs	r3, #1
 8004570:	061b      	lsls	r3, r3, #24
 8004572:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004576:	4935      	ldr	r1, [pc, #212]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004578:	4313      	orrs	r3, r2
 800457a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800457c:	4b33      	ldr	r3, [pc, #204]	; (800464c <HAL_RCC_OscConfig+0x764>)
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	4a32      	ldr	r2, [pc, #200]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004588:	4b30      	ldr	r3, [pc, #192]	; (800464c <HAL_RCC_OscConfig+0x764>)
 800458a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458c:	4b31      	ldr	r3, [pc, #196]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 800458e:	4013      	ands	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004594:	00d2      	lsls	r2, r2, #3
 8004596:	492d      	ldr	r1, [pc, #180]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004598:	4313      	orrs	r3, r2
 800459a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800459c:	4b2b      	ldr	r3, [pc, #172]	; (800464c <HAL_RCC_OscConfig+0x764>)
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	f023 020c 	bic.w	r2, r3, #12
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	4928      	ldr	r1, [pc, #160]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045ae:	4b27      	ldr	r3, [pc, #156]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	f023 0202 	bic.w	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ba:	4924      	ldr	r1, [pc, #144]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045c0:	4b22      	ldr	r3, [pc, #136]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	4a21      	ldr	r2, [pc, #132]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	4a1e      	ldr	r2, [pc, #120]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045d8:	4b1c      	ldr	r3, [pc, #112]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	4a1b      	ldr	r2, [pc, #108]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80045e4:	4b19      	ldr	r3, [pc, #100]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	4a18      	ldr	r2, [pc, #96]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f0:	4b16      	ldr	r3, [pc, #88]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a15      	ldr	r2, [pc, #84]	; (800464c <HAL_RCC_OscConfig+0x764>)
 80045f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fd fbd2 	bl	8001da4 <HAL_GetTick>
 8004600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004604:	f7fd fbce 	bl	8001da4 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e066      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004616:	4b0d      	ldr	r3, [pc, #52]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x71c>
 8004622:	e05e      	b.n	80046e2 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCC_OscConfig+0x764>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a08      	ldr	r2, [pc, #32]	; (800464c <HAL_RCC_OscConfig+0x764>)
 800462a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800462e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fd fbb8 	bl	8001da4 <HAL_GetTick>
 8004634:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004636:	e00f      	b.n	8004658 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004638:	f7fd fbb4 	bl	8001da4 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d908      	bls.n	8004658 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e04c      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
 800464a:	bf00      	nop
 800464c:	58024400 	.word	0x58024400
 8004650:	fffffc0c 	.word	0xfffffc0c
 8004654:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004658:	4b24      	ldr	r3, [pc, #144]	; (80046ec <HAL_RCC_OscConfig+0x804>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e9      	bne.n	8004638 <HAL_RCC_OscConfig+0x750>
 8004664:	e03d      	b.n	80046e2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004666:	4b21      	ldr	r3, [pc, #132]	; (80046ec <HAL_RCC_OscConfig+0x804>)
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800466c:	4b1f      	ldr	r3, [pc, #124]	; (80046ec <HAL_RCC_OscConfig+0x804>)
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	2b01      	cmp	r3, #1
 8004678:	d031      	beq.n	80046de <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f003 0203 	and.w	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d12a      	bne.n	80046de <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d122      	bne.n	80046de <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d11a      	bne.n	80046de <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	0a5b      	lsrs	r3, r3, #9
 80046ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d111      	bne.n	80046de <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d108      	bne.n	80046de <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	0e1b      	lsrs	r3, r3, #24
 80046d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046da:	429a      	cmp	r2, r3
 80046dc:	d001      	beq.n	80046e2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3730      	adds	r7, #48	; 0x30
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	58024400 	.word	0x58024400

080046f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e19c      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004704:	4b8a      	ldr	r3, [pc, #552]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d910      	bls.n	8004734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b87      	ldr	r3, [pc, #540]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 020f 	bic.w	r2, r3, #15
 800471a:	4985      	ldr	r1, [pc, #532]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	4313      	orrs	r3, r2
 8004720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b83      	ldr	r3, [pc, #524]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e184      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d010      	beq.n	8004762 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	4b7b      	ldr	r3, [pc, #492]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800474c:	429a      	cmp	r2, r3
 800474e:	d908      	bls.n	8004762 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004750:	4b78      	ldr	r3, [pc, #480]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	4975      	ldr	r1, [pc, #468]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 800475e:	4313      	orrs	r3, r2
 8004760:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d010      	beq.n	8004790 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	4b70      	ldr	r3, [pc, #448]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800477a:	429a      	cmp	r2, r3
 800477c:	d908      	bls.n	8004790 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800477e:	4b6d      	ldr	r3, [pc, #436]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	496a      	ldr	r1, [pc, #424]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 800478c:	4313      	orrs	r3, r2
 800478e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	d010      	beq.n	80047be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699a      	ldr	r2, [r3, #24]
 80047a0:	4b64      	ldr	r3, [pc, #400]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d908      	bls.n	80047be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047ac:	4b61      	ldr	r3, [pc, #388]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	495e      	ldr	r1, [pc, #376]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d010      	beq.n	80047ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	4b59      	ldr	r3, [pc, #356]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d908      	bls.n	80047ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80047da:	4b56      	ldr	r3, [pc, #344]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	4953      	ldr	r1, [pc, #332]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	4b4d      	ldr	r3, [pc, #308]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	429a      	cmp	r2, r3
 8004806:	d908      	bls.n	800481a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004808:	4b4a      	ldr	r3, [pc, #296]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f023 020f 	bic.w	r2, r3, #15
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4947      	ldr	r1, [pc, #284]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004816:	4313      	orrs	r3, r2
 8004818:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d055      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004826:	4b43      	ldr	r3, [pc, #268]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	4940      	ldr	r1, [pc, #256]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004834:	4313      	orrs	r3, r2
 8004836:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d107      	bne.n	8004850 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004840:	4b3c      	ldr	r3, [pc, #240]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d121      	bne.n	8004890 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0f6      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d107      	bne.n	8004868 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004858:	4b36      	ldr	r3, [pc, #216]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d115      	bne.n	8004890 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0ea      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d107      	bne.n	8004880 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004870:	4b30      	ldr	r3, [pc, #192]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0de      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004880:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0d6      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004890:	4b28      	ldr	r3, [pc, #160]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f023 0207 	bic.w	r2, r3, #7
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	4925      	ldr	r1, [pc, #148]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a2:	f7fd fa7f 	bl	8001da4 <HAL_GetTick>
 80048a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a8:	e00a      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048aa:	f7fd fa7b 	bl	8001da4 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e0be      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c0:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d1eb      	bne.n	80048aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d010      	beq.n	8004900 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	4b14      	ldr	r3, [pc, #80]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d208      	bcs.n	8004900 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f023 020f 	bic.w	r2, r3, #15
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	490e      	ldr	r1, [pc, #56]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d214      	bcs.n	8004938 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b08      	ldr	r3, [pc, #32]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 020f 	bic.w	r2, r3, #15
 8004916:	4906      	ldr	r1, [pc, #24]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b04      	ldr	r3, [pc, #16]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d005      	beq.n	8004938 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e086      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
 8004930:	52002000 	.word	0x52002000
 8004934:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d010      	beq.n	8004966 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004950:	429a      	cmp	r2, r3
 8004952:	d208      	bcs.n	8004966 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004954:	4b3c      	ldr	r3, [pc, #240]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	4939      	ldr	r1, [pc, #228]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 8004962:	4313      	orrs	r3, r2
 8004964:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d010      	beq.n	8004994 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	4b34      	ldr	r3, [pc, #208]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800497e:	429a      	cmp	r2, r3
 8004980:	d208      	bcs.n	8004994 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004982:	4b31      	ldr	r3, [pc, #196]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	492e      	ldr	r1, [pc, #184]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 8004990:	4313      	orrs	r3, r2
 8004992:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	d010      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699a      	ldr	r2, [r3, #24]
 80049a4:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d208      	bcs.n	80049c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049b0:	4b25      	ldr	r3, [pc, #148]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	4922      	ldr	r1, [pc, #136]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d010      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049da:	429a      	cmp	r2, r3
 80049dc:	d208      	bcs.n	80049f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80049de:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	4917      	ldr	r1, [pc, #92]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80049f0:	f000 f834 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	4912      	ldr	r1, [pc, #72]	; (8004a4c <HAL_RCC_ClockConfig+0x35c>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	4a0d      	ldr	r2, [pc, #52]	; (8004a4c <HAL_RCC_ClockConfig+0x35c>)
 8004a18:	5cd3      	ldrb	r3, [r2, r3]
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
 8004a24:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <HAL_RCC_ClockConfig+0x360>)
 8004a26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a28:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x364>)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <HAL_RCC_ClockConfig+0x368>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fd f96c 	bl	8001d10 <HAL_InitTick>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	58024400 	.word	0x58024400
 8004a4c:	0800a3c8 	.word	0x0800a3c8
 8004a50:	24000008 	.word	0x24000008
 8004a54:	24000004 	.word	0x24000004
 8004a58:	2400000c 	.word	0x2400000c

08004a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b089      	sub	sp, #36	; 0x24
 8004a60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a62:	4bb3      	ldr	r3, [pc, #716]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a6a:	2b18      	cmp	r3, #24
 8004a6c:	f200 8155 	bhi.w	8004d1a <HAL_RCC_GetSysClockFreq+0x2be>
 8004a70:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a76:	bf00      	nop
 8004a78:	08004add 	.word	0x08004add
 8004a7c:	08004d1b 	.word	0x08004d1b
 8004a80:	08004d1b 	.word	0x08004d1b
 8004a84:	08004d1b 	.word	0x08004d1b
 8004a88:	08004d1b 	.word	0x08004d1b
 8004a8c:	08004d1b 	.word	0x08004d1b
 8004a90:	08004d1b 	.word	0x08004d1b
 8004a94:	08004d1b 	.word	0x08004d1b
 8004a98:	08004b03 	.word	0x08004b03
 8004a9c:	08004d1b 	.word	0x08004d1b
 8004aa0:	08004d1b 	.word	0x08004d1b
 8004aa4:	08004d1b 	.word	0x08004d1b
 8004aa8:	08004d1b 	.word	0x08004d1b
 8004aac:	08004d1b 	.word	0x08004d1b
 8004ab0:	08004d1b 	.word	0x08004d1b
 8004ab4:	08004d1b 	.word	0x08004d1b
 8004ab8:	08004b09 	.word	0x08004b09
 8004abc:	08004d1b 	.word	0x08004d1b
 8004ac0:	08004d1b 	.word	0x08004d1b
 8004ac4:	08004d1b 	.word	0x08004d1b
 8004ac8:	08004d1b 	.word	0x08004d1b
 8004acc:	08004d1b 	.word	0x08004d1b
 8004ad0:	08004d1b 	.word	0x08004d1b
 8004ad4:	08004d1b 	.word	0x08004d1b
 8004ad8:	08004b0f 	.word	0x08004b0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004adc:	4b94      	ldr	r3, [pc, #592]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d009      	beq.n	8004afc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ae8:	4b91      	ldr	r3, [pc, #580]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	08db      	lsrs	r3, r3, #3
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	4a90      	ldr	r2, [pc, #576]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004afa:	e111      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004afc:	4b8d      	ldr	r3, [pc, #564]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004afe:	61bb      	str	r3, [r7, #24]
    break;
 8004b00:	e10e      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004b02:	4b8d      	ldr	r3, [pc, #564]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b04:	61bb      	str	r3, [r7, #24]
    break;
 8004b06:	e10b      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004b08:	4b8c      	ldr	r3, [pc, #560]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b0a:	61bb      	str	r3, [r7, #24]
    break;
 8004b0c:	e108      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b0e:	4b88      	ldr	r3, [pc, #544]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004b18:	4b85      	ldr	r3, [pc, #532]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b24:	4b82      	ldr	r3, [pc, #520]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004b2e:	4b80      	ldr	r3, [pc, #512]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b32:	08db      	lsrs	r3, r3, #3
 8004b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80e1 	beq.w	8004d14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	f000 8083 	beq.w	8004c60 <HAL_RCC_GetSysClockFreq+0x204>
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	f200 80a1 	bhi.w	8004ca4 <HAL_RCC_GetSysClockFreq+0x248>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x114>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d056      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b6e:	e099      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b70:	4b6f      	ldr	r3, [pc, #444]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02d      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b7c:	4b6c      	ldr	r3, [pc, #432]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	08db      	lsrs	r3, r3, #3
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	4a6b      	ldr	r2, [pc, #428]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	ee07 3a90 	vmov	s15, r3
 8004b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba6:	4b62      	ldr	r3, [pc, #392]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004bd6:	e087      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004d44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bea:	4b51      	ldr	r3, [pc, #324]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bfe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c1a:	e065      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004d48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2e:	4b40      	ldr	r3, [pc, #256]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c5e:	e043      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004d4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c72:	4b2f      	ldr	r3, [pc, #188]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ca2:	e021      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004d48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb6:	4b1e      	ldr	r3, [pc, #120]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ce6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004ce8:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	0a5b      	lsrs	r3, r3, #9
 8004cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	ee07 3a90 	vmov	s15, r3
 8004cfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0c:	ee17 3a90 	vmov	r3, s15
 8004d10:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004d12:	e005      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
    break;
 8004d18:	e002      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004d1a:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d1c:	61bb      	str	r3, [r7, #24]
    break;
 8004d1e:	bf00      	nop
  }

  return sysclockfreq;
 8004d20:	69bb      	ldr	r3, [r7, #24]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3724      	adds	r7, #36	; 0x24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	58024400 	.word	0x58024400
 8004d34:	03d09000 	.word	0x03d09000
 8004d38:	003d0900 	.word	0x003d0900
 8004d3c:	007a1200 	.word	0x007a1200
 8004d40:	46000000 	.word	0x46000000
 8004d44:	4c742400 	.word	0x4c742400
 8004d48:	4a742400 	.word	0x4a742400
 8004d4c:	4af42400 	.word	0x4af42400

08004d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004d56:	f7ff fe81 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	490f      	ldr	r1, [pc, #60]	; (8004da4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d68:	5ccb      	ldrb	r3, [r1, r3]
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d72:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004d74:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	4a09      	ldr	r2, [pc, #36]	; (8004da4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d7e:	5cd3      	ldrb	r3, [r2, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8a:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d8e:	4a07      	ldr	r2, [pc, #28]	; (8004dac <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d94:	4b04      	ldr	r3, [pc, #16]	; (8004da8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	58024400 	.word	0x58024400
 8004da4:	0800a3c8 	.word	0x0800a3c8
 8004da8:	24000008 	.word	0x24000008
 8004dac:	24000004 	.word	0x24000004

08004db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004db4:	f7ff ffcc 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004db8:	4602      	mov	r2, r0
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	091b      	lsrs	r3, r3, #4
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	4904      	ldr	r1, [pc, #16]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dc6:	5ccb      	ldrb	r3, [r1, r3]
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	58024400 	.word	0x58024400
 8004dd8:	0800a3c8 	.word	0x0800a3c8

08004ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004de0:	f7ff ffb6 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	4904      	ldr	r1, [pc, #16]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004df2:	5ccb      	ldrb	r3, [r1, r3]
 8004df4:	f003 031f 	and.w	r3, r3, #31
 8004df8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	58024400 	.word	0x58024400
 8004e04:	0800a3c8 	.word	0x0800a3c8

08004e08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e10:	2300      	movs	r3, #0
 8004e12:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e14:	2300      	movs	r3, #0
 8004e16:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d03f      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e2c:	d02a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e32:	d824      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e38:	d018      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e3e:	d81e      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e48:	d007      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e4a:	e018      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4c:	4b9f      	ldr	r3, [pc, #636]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	4a9e      	ldr	r2, [pc, #632]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e58:	e015      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	2102      	movs	r1, #2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f001 f99b 	bl	800619c <RCCEx_PLL2_Config>
 8004e66:	4603      	mov	r3, r0
 8004e68:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e6a:	e00c      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3324      	adds	r3, #36	; 0x24
 8004e70:	2102      	movs	r1, #2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f001 fa44 	bl	8006300 <RCCEx_PLL3_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e7c:	e003      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	75fb      	strb	r3, [r7, #23]
      break;
 8004e82:	e000      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d109      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e8c:	4b8f      	ldr	r3, [pc, #572]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e98:	498c      	ldr	r1, [pc, #560]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	650b      	str	r3, [r1, #80]	; 0x50
 8004e9e:	e001      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
 8004ea2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d03d      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d826      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ed5 	.word	0x08004ed5
 8004ec4:	08004ee3 	.word	0x08004ee3
 8004ec8:	08004ef5 	.word	0x08004ef5
 8004ecc:	08004f0d 	.word	0x08004f0d
 8004ed0:	08004f0d 	.word	0x08004f0d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed4:	4b7d      	ldr	r3, [pc, #500]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	4a7c      	ldr	r2, [pc, #496]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ede:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ee0:	e015      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 f957 	bl	800619c <RCCEx_PLL2_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ef2:	e00c      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3324      	adds	r3, #36	; 0x24
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 fa00 	bl	8006300 <RCCEx_PLL3_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f04:	e003      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0a:	e000      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f14:	4b6d      	ldr	r3, [pc, #436]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f18:	f023 0207 	bic.w	r2, r3, #7
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	496a      	ldr	r1, [pc, #424]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	650b      	str	r3, [r1, #80]	; 0x50
 8004f26:	e001      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d04a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004f40:	d031      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004f42:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004f46:	d82b      	bhi.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4c:	d02d      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f52:	d825      	bhi.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004f54:	2bc0      	cmp	r3, #192	; 0xc0
 8004f56:	d02a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004f58:	2bc0      	cmp	r3, #192	; 0xc0
 8004f5a:	d821      	bhi.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004f5c:	2b80      	cmp	r3, #128	; 0x80
 8004f5e:	d016      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004f60:	2b80      	cmp	r3, #128	; 0x80
 8004f62:	d81d      	bhi.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004f68:	2b40      	cmp	r3, #64	; 0x40
 8004f6a:	d007      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004f6c:	e018      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f6e:	4b57      	ldr	r3, [pc, #348]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	4a56      	ldr	r2, [pc, #344]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004f7a:	e019      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	2100      	movs	r1, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f001 f90a 	bl	800619c <RCCEx_PLL2_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004f8c:	e010      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3324      	adds	r3, #36	; 0x24
 8004f92:	2100      	movs	r1, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	f001 f9b3 	bl	8006300 <RCCEx_PLL3_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004f9e:	e007      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa4:	e004      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004fa6:	bf00      	nop
 8004fa8:	e002      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004faa:	bf00      	nop
 8004fac:	e000      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004fb6:	4b45      	ldr	r3, [pc, #276]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc2:	4942      	ldr	r1, [pc, #264]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	650b      	str	r3, [r1, #80]	; 0x50
 8004fc8:	e001      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
 8004fcc:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d04f      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fde:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004fe2:	d036      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004fe4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004fe8:	d830      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fee:	d032      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff4:	d82a      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004ff6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ffa:	d02e      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004ffc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005000:	d824      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005006:	d018      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500c:	d81e      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005016:	d007      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005018:	e018      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501a:	4b2c      	ldr	r3, [pc, #176]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	4a2b      	ldr	r2, [pc, #172]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005026:	e019      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	2100      	movs	r1, #0
 800502e:	4618      	mov	r0, r3
 8005030:	f001 f8b4 	bl	800619c <RCCEx_PLL2_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005038:	e010      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3324      	adds	r3, #36	; 0x24
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f001 f95d 	bl	8006300 <RCCEx_PLL3_Config>
 8005046:	4603      	mov	r3, r0
 8005048:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800504a:	e007      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	75fb      	strb	r3, [r7, #23]
      break;
 8005050:	e004      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005052:	bf00      	nop
 8005054:	e002      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005056:	bf00      	nop
 8005058:	e000      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800505a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d109      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005062:	4b1a      	ldr	r3, [pc, #104]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005066:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506e:	4917      	ldr	r1, [pc, #92]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005070:	4313      	orrs	r3, r2
 8005072:	650b      	str	r3, [r1, #80]	; 0x50
 8005074:	e001      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d034      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508a:	2b30      	cmp	r3, #48	; 0x30
 800508c:	d01c      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800508e:	2b30      	cmp	r3, #48	; 0x30
 8005090:	d817      	bhi.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005092:	2b20      	cmp	r3, #32
 8005094:	d00c      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005096:	2b20      	cmp	r3, #32
 8005098:	d813      	bhi.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d018      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800509e:	2b10      	cmp	r3, #16
 80050a0:	d10f      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a2:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	4a09      	ldr	r2, [pc, #36]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80050ae:	e010      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	2102      	movs	r1, #2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f001 f870 	bl	800619c <RCCEx_PLL2_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80050c0:	e007      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	75fb      	strb	r3, [r7, #23]
      break;
 80050c6:	e004      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80050c8:	bf00      	nop
 80050ca:	e002      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80050cc:	58024400 	.word	0x58024400
      break;
 80050d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80050d8:	4b9b      	ldr	r3, [pc, #620]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80050da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e4:	4998      	ldr	r1, [pc, #608]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050ea:	e001      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
 80050ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d047      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005104:	d030      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005106:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800510a:	d82a      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800510c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005110:	d02c      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8005112:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005116:	d824      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511c:	d018      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800511e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005122:	d81e      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d007      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800512e:	e018      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005130:	4b85      	ldr	r3, [pc, #532]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	4a84      	ldr	r2, [pc, #528]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800513a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800513c:	e017      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3304      	adds	r3, #4
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f001 f829 	bl	800619c <RCCEx_PLL2_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800514e:	e00e      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3324      	adds	r3, #36	; 0x24
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f001 f8d2 	bl	8006300 <RCCEx_PLL3_Config>
 800515c:	4603      	mov	r3, r0
 800515e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005160:	e005      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	75fb      	strb	r3, [r7, #23]
      break;
 8005166:	e002      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005168:	bf00      	nop
 800516a:	e000      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800516c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d109      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005174:	4b74      	ldr	r3, [pc, #464]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005178:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005180:	4971      	ldr	r1, [pc, #452]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005182:	4313      	orrs	r3, r2
 8005184:	650b      	str	r3, [r1, #80]	; 0x50
 8005186:	e001      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005188:	7dfb      	ldrb	r3, [r7, #23]
 800518a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d049      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800519c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051a0:	d02e      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80051a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051a6:	d828      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80051a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051ac:	d02a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80051ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051b2:	d822      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80051b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051b8:	d026      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80051ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051be:	d81c      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80051c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c4:	d010      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80051c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ca:	d816      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01d      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x404>
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d111      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3304      	adds	r3, #4
 80051da:	2101      	movs	r1, #1
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 ffdd 	bl	800619c <RCCEx_PLL2_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80051e6:	e012      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3324      	adds	r3, #36	; 0x24
 80051ec:	2101      	movs	r1, #1
 80051ee:	4618      	mov	r0, r3
 80051f0:	f001 f886 	bl	8006300 <RCCEx_PLL3_Config>
 80051f4:	4603      	mov	r3, r0
 80051f6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80051f8:	e009      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75fb      	strb	r3, [r7, #23]
      break;
 80051fe:	e006      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005200:	bf00      	nop
 8005202:	e004      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005204:	bf00      	nop
 8005206:	e002      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005208:	bf00      	nop
 800520a:	e000      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800520c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005214:	4b4c      	ldr	r3, [pc, #304]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005218:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005220:	4949      	ldr	r1, [pc, #292]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005222:	4313      	orrs	r3, r2
 8005224:	650b      	str	r3, [r1, #80]	; 0x50
 8005226:	e001      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d053      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800523e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005242:	d034      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005244:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005248:	d82e      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800524a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800524e:	d030      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005254:	d828      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525a:	d02c      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d822      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005262:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005266:	d028      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005268:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800526c:	d81c      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800526e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005272:	d010      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005278:	d816      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01f      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800527e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005282:	d111      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	2101      	movs	r1, #1
 800528a:	4618      	mov	r0, r3
 800528c:	f000 ff86 	bl	800619c <RCCEx_PLL2_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005294:	e014      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3324      	adds	r3, #36	; 0x24
 800529a:	2101      	movs	r1, #1
 800529c:	4618      	mov	r0, r3
 800529e:	f001 f82f 	bl	8006300 <RCCEx_PLL3_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80052a6:	e00b      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	75fb      	strb	r3, [r7, #23]
      break;
 80052ac:	e008      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80052ae:	bf00      	nop
 80052b0:	e006      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80052b2:	bf00      	nop
 80052b4:	e004      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80052b6:	bf00      	nop
 80052b8:	e002      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80052ba:	bf00      	nop
 80052bc:	e000      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80052be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80052c6:	4b20      	ldr	r3, [pc, #128]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052d4:	491c      	ldr	r1, [pc, #112]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	658b      	str	r3, [r1, #88]	; 0x58
 80052da:	e001      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
 80052de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d031      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f4:	d00e      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80052f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052fa:	d814      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d015      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005304:	d10f      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005306:	4b10      	ldr	r3, [pc, #64]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	4a0f      	ldr	r2, [pc, #60]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800530c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005310:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005312:	e00c      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3304      	adds	r3, #4
 8005318:	2101      	movs	r1, #1
 800531a:	4618      	mov	r0, r3
 800531c:	f000 ff3e 	bl	800619c <RCCEx_PLL2_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005324:	e003      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	75fb      	strb	r3, [r7, #23]
      break;
 800532a:	e000      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 800532c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10b      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005334:	4b04      	ldr	r3, [pc, #16]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005338:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005340:	4901      	ldr	r1, [pc, #4]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005342:	4313      	orrs	r3, r2
 8005344:	650b      	str	r3, [r1, #80]	; 0x50
 8005346:	e003      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8005348:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534c:	7dfb      	ldrb	r3, [r7, #23]
 800534e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d032      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	2b03      	cmp	r3, #3
 8005362:	d81b      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080053a3 	.word	0x080053a3
 8005370:	0800537d 	.word	0x0800537d
 8005374:	0800538b 	.word	0x0800538b
 8005378:	080053a3 	.word	0x080053a3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537c:	4bb2      	ldr	r3, [pc, #712]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	4ab1      	ldr	r2, [pc, #708]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005386:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005388:	e00c      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3304      	adds	r3, #4
 800538e:	2102      	movs	r1, #2
 8005390:	4618      	mov	r0, r3
 8005392:	f000 ff03 	bl	800619c <RCCEx_PLL2_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800539a:	e003      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	75fb      	strb	r3, [r7, #23]
      break;
 80053a0:	e000      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80053a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80053aa:	4ba7      	ldr	r3, [pc, #668]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80053ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ae:	f023 0203 	bic.w	r2, r3, #3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	49a4      	ldr	r1, [pc, #656]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053bc:	e001      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8086 	beq.w	80054dc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053d0:	4b9e      	ldr	r3, [pc, #632]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a9d      	ldr	r2, [pc, #628]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80053d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053dc:	f7fc fce2 	bl	8001da4 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053e2:	e009      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e4:	f7fc fcde 	bl	8001da4 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	; 0x64
 80053f0:	d902      	bls.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	75fb      	strb	r3, [r7, #23]
        break;
 80053f6:	e005      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f8:	4b94      	ldr	r3, [pc, #592]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0ef      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d166      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800540a:	4b8f      	ldr	r3, [pc, #572]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800540c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005414:	4053      	eors	r3, r2
 8005416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541a:	2b00      	cmp	r3, #0
 800541c:	d013      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800541e:	4b8a      	ldr	r3, [pc, #552]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005426:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005428:	4b87      	ldr	r3, [pc, #540]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542c:	4a86      	ldr	r2, [pc, #536]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800542e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005432:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005434:	4b84      	ldr	r3, [pc, #528]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005438:	4a83      	ldr	r2, [pc, #524]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800543a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005440:	4a81      	ldr	r2, [pc, #516]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800544c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005450:	d115      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005452:	f7fc fca7 	bl	8001da4 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005458:	e00b      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7fc fca3 	bl	8001da4 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	; 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d902      	bls.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	75fb      	strb	r3, [r7, #23]
            break;
 8005470:	e005      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005472:	4b75      	ldr	r3, [pc, #468]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0ed      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d126      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800548a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005492:	d10d      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8005494:	4b6c      	ldr	r3, [pc, #432]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054a2:	0919      	lsrs	r1, r3, #4
 80054a4:	4b6a      	ldr	r3, [pc, #424]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054a6:	400b      	ands	r3, r1
 80054a8:	4967      	ldr	r1, [pc, #412]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	610b      	str	r3, [r1, #16]
 80054ae:	e005      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80054b0:	4b65      	ldr	r3, [pc, #404]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	4a64      	ldr	r2, [pc, #400]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054ba:	6113      	str	r3, [r2, #16]
 80054bc:	4b62      	ldr	r3, [pc, #392]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ca:	495f      	ldr	r1, [pc, #380]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	670b      	str	r3, [r1, #112]	; 0x70
 80054d0:	e004      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
 80054d4:	75bb      	strb	r3, [r7, #22]
 80054d6:	e001      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d07f      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ee:	2b28      	cmp	r3, #40	; 0x28
 80054f0:	d866      	bhi.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80054f2:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	080055c7 	.word	0x080055c7
 80054fc:	080055c1 	.word	0x080055c1
 8005500:	080055c1 	.word	0x080055c1
 8005504:	080055c1 	.word	0x080055c1
 8005508:	080055c1 	.word	0x080055c1
 800550c:	080055c1 	.word	0x080055c1
 8005510:	080055c1 	.word	0x080055c1
 8005514:	080055c1 	.word	0x080055c1
 8005518:	0800559d 	.word	0x0800559d
 800551c:	080055c1 	.word	0x080055c1
 8005520:	080055c1 	.word	0x080055c1
 8005524:	080055c1 	.word	0x080055c1
 8005528:	080055c1 	.word	0x080055c1
 800552c:	080055c1 	.word	0x080055c1
 8005530:	080055c1 	.word	0x080055c1
 8005534:	080055c1 	.word	0x080055c1
 8005538:	080055af 	.word	0x080055af
 800553c:	080055c1 	.word	0x080055c1
 8005540:	080055c1 	.word	0x080055c1
 8005544:	080055c1 	.word	0x080055c1
 8005548:	080055c1 	.word	0x080055c1
 800554c:	080055c1 	.word	0x080055c1
 8005550:	080055c1 	.word	0x080055c1
 8005554:	080055c1 	.word	0x080055c1
 8005558:	080055c7 	.word	0x080055c7
 800555c:	080055c1 	.word	0x080055c1
 8005560:	080055c1 	.word	0x080055c1
 8005564:	080055c1 	.word	0x080055c1
 8005568:	080055c1 	.word	0x080055c1
 800556c:	080055c1 	.word	0x080055c1
 8005570:	080055c1 	.word	0x080055c1
 8005574:	080055c1 	.word	0x080055c1
 8005578:	080055c7 	.word	0x080055c7
 800557c:	080055c1 	.word	0x080055c1
 8005580:	080055c1 	.word	0x080055c1
 8005584:	080055c1 	.word	0x080055c1
 8005588:	080055c1 	.word	0x080055c1
 800558c:	080055c1 	.word	0x080055c1
 8005590:	080055c1 	.word	0x080055c1
 8005594:	080055c1 	.word	0x080055c1
 8005598:	080055c7 	.word	0x080055c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	2101      	movs	r1, #1
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fdfa 	bl	800619c <RCCEx_PLL2_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80055ac:	e00c      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3324      	adds	r3, #36	; 0x24
 80055b2:	2101      	movs	r1, #1
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fea3 	bl	8006300 <RCCEx_PLL3_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80055be:	e003      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	75fb      	strb	r3, [r7, #23]
      break;
 80055c4:	e000      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80055c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10a      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80055ce:	4b1e      	ldr	r3, [pc, #120]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055dc:	491a      	ldr	r1, [pc, #104]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	654b      	str	r3, [r1, #84]	; 0x54
 80055e2:	e001      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e4:	7dfb      	ldrb	r3, [r7, #23]
 80055e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d03f      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055f8:	2b05      	cmp	r3, #5
 80055fa:	d821      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005655 	.word	0x08005655
 8005608:	0800561d 	.word	0x0800561d
 800560c:	0800562f 	.word	0x0800562f
 8005610:	08005655 	.word	0x08005655
 8005614:	08005655 	.word	0x08005655
 8005618:	08005655 	.word	0x08005655
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3304      	adds	r3, #4
 8005620:	2101      	movs	r1, #1
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fdba 	bl	800619c <RCCEx_PLL2_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800562c:	e013      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3324      	adds	r3, #36	; 0x24
 8005632:	2101      	movs	r1, #1
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fe63 	bl	8006300 <RCCEx_PLL3_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800563e:	e00a      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	75fb      	strb	r3, [r7, #23]
      break;
 8005644:	e007      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8005646:	bf00      	nop
 8005648:	58024400 	.word	0x58024400
 800564c:	58024800 	.word	0x58024800
 8005650:	00ffffcf 	.word	0x00ffffcf
      break;
 8005654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d109      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800565c:	4b9f      	ldr	r3, [pc, #636]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005660:	f023 0207 	bic.w	r2, r3, #7
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005668:	499c      	ldr	r1, [pc, #624]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800566a:	4313      	orrs	r3, r2
 800566c:	654b      	str	r3, [r1, #84]	; 0x54
 800566e:	e001      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	7dfb      	ldrb	r3, [r7, #23]
 8005672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d039      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005686:	2b05      	cmp	r3, #5
 8005688:	d820      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800568a:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056d3 	.word	0x080056d3
 8005694:	080056a9 	.word	0x080056a9
 8005698:	080056bb 	.word	0x080056bb
 800569c:	080056d3 	.word	0x080056d3
 80056a0:	080056d3 	.word	0x080056d3
 80056a4:	080056d3 	.word	0x080056d3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3304      	adds	r3, #4
 80056ac:	2101      	movs	r1, #1
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fd74 	bl	800619c <RCCEx_PLL2_Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80056b8:	e00c      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3324      	adds	r3, #36	; 0x24
 80056be:	2101      	movs	r1, #1
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fe1d 	bl	8006300 <RCCEx_PLL3_Config>
 80056c6:	4603      	mov	r3, r0
 80056c8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80056ca:	e003      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	75fb      	strb	r3, [r7, #23]
      break;
 80056d0:	e000      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80056d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10a      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056da:	4b80      	ldr	r3, [pc, #512]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80056dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056de:	f023 0207 	bic.w	r2, r3, #7
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056e8:	497c      	ldr	r1, [pc, #496]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	658b      	str	r3, [r1, #88]	; 0x58
 80056ee:	e001      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d04b      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800570a:	d02e      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800570c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005710:	d828      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005716:	d02a      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571c:	d822      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800571e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005722:	d026      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005724:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005728:	d81c      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800572a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572e:	d010      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8005730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005734:	d816      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01d      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800573a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800573e:	d111      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3304      	adds	r3, #4
 8005744:	2100      	movs	r1, #0
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fd28 	bl	800619c <RCCEx_PLL2_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005750:	e012      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3324      	adds	r3, #36	; 0x24
 8005756:	2102      	movs	r1, #2
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fdd1 	bl	8006300 <RCCEx_PLL3_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005762:	e009      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	75fb      	strb	r3, [r7, #23]
      break;
 8005768:	e006      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800576a:	bf00      	nop
 800576c:	e004      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800576e:	bf00      	nop
 8005770:	e002      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005772:	bf00      	nop
 8005774:	e000      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005778:	7dfb      	ldrb	r3, [r7, #23]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800577e:	4b57      	ldr	r3, [pc, #348]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005782:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800578c:	4953      	ldr	r1, [pc, #332]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800578e:	4313      	orrs	r3, r2
 8005790:	654b      	str	r3, [r1, #84]	; 0x54
 8005792:	e001      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005794:	7dfb      	ldrb	r3, [r7, #23]
 8005796:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d04b      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80057ae:	d02e      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80057b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80057b4:	d828      	bhi.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ba:	d02a      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80057bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c0:	d822      	bhi.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80057c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057c6:	d026      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80057c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057cc:	d81c      	bhi.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80057ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d2:	d010      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80057d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d8:	d816      	bhi.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01d      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e2:	d111      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3304      	adds	r3, #4
 80057e8:	2100      	movs	r1, #0
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fcd6 	bl	800619c <RCCEx_PLL2_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80057f4:	e012      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3324      	adds	r3, #36	; 0x24
 80057fa:	2102      	movs	r1, #2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fd7f 	bl	8006300 <RCCEx_PLL3_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005806:	e009      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	75fb      	strb	r3, [r7, #23]
      break;
 800580c:	e006      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800580e:	bf00      	nop
 8005810:	e004      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005812:	bf00      	nop
 8005814:	e002      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005816:	bf00      	nop
 8005818:	e000      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800581a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800581c:	7dfb      	ldrb	r3, [r7, #23]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005822:	4b2e      	ldr	r3, [pc, #184]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005826:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005830:	492a      	ldr	r1, [pc, #168]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005832:	4313      	orrs	r3, r2
 8005834:	658b      	str	r3, [r1, #88]	; 0x58
 8005836:	e001      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	7dfb      	ldrb	r3, [r7, #23]
 800583a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005844:	2b00      	cmp	r3, #0
 8005846:	d04d      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800584e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005852:	d02e      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005854:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005858:	d828      	bhi.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800585a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800585e:	d02a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005864:	d822      	bhi.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005866:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800586a:	d026      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800586c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005870:	d81c      	bhi.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005872:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005876:	d010      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800587c:	d816      	bhi.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01d      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005886:	d111      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fc84 	bl	800619c <RCCEx_PLL2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005898:	e012      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3324      	adds	r3, #36	; 0x24
 800589e:	2102      	movs	r1, #2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fd2d 	bl	8006300 <RCCEx_PLL3_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80058aa:	e009      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	75fb      	strb	r3, [r7, #23]
      break;
 80058b0:	e006      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80058b2:	bf00      	nop
 80058b4:	e004      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80058b6:	bf00      	nop
 80058b8:	e002      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80058be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10c      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80058c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058d4:	4901      	ldr	r1, [pc, #4]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	658b      	str	r3, [r1, #88]	; 0x58
 80058da:	e003      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80058dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01a      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fa:	d10a      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3324      	adds	r3, #36	; 0x24
 8005900:	2102      	movs	r1, #2
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fcfc 	bl	8006300 <RCCEx_PLL3_Config>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005912:	4b8c      	ldr	r3, [pc, #560]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005916:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005920:	4988      	ldr	r1, [pc, #544]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005922:	4313      	orrs	r3, r2
 8005924:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b00      	cmp	r3, #0
 8005930:	d01a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593c:	d10a      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3324      	adds	r3, #36	; 0x24
 8005942:	2102      	movs	r1, #2
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fcdb 	bl	8006300 <RCCEx_PLL3_Config>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005954:	4b7b      	ldr	r3, [pc, #492]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005962:	4978      	ldr	r1, [pc, #480]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005964:	4313      	orrs	r3, r2
 8005966:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d034      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800597a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800597e:	d01d      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8005980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005984:	d817      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800598a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800598e:	d009      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005990:	e011      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3304      	adds	r3, #4
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fbff 	bl	800619c <RCCEx_PLL2_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80059a2:	e00c      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3324      	adds	r3, #36	; 0x24
 80059a8:	2102      	movs	r1, #2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fca8 	bl	8006300 <RCCEx_PLL3_Config>
 80059b0:	4603      	mov	r3, r0
 80059b2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80059b4:	e003      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	75fb      	strb	r3, [r7, #23]
      break;
 80059ba:	e000      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80059bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059be:	7dfb      	ldrb	r3, [r7, #23]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059c4:	4b5f      	ldr	r3, [pc, #380]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059d2:	495c      	ldr	r1, [pc, #368]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	658b      	str	r3, [r1, #88]	; 0x58
 80059d8:	e001      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059da:	7dfb      	ldrb	r3, [r7, #23]
 80059dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d033      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059f4:	d01c      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80059f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059fa:	d816      	bhi.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80059fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a00:	d003      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a06:	d007      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005a08:	e00f      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a0a:	4b4e      	ldr	r3, [pc, #312]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0e:	4a4d      	ldr	r2, [pc, #308]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a16:	e00c      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3324      	adds	r3, #36	; 0x24
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fc6e 	bl	8006300 <RCCEx_PLL3_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a28:	e003      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a2e:	e000      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10a      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a38:	4b42      	ldr	r3, [pc, #264]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a46:	493f      	ldr	r1, [pc, #252]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	654b      	str	r3, [r1, #84]	; 0x54
 8005a4c:	e001      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
 8005a50:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d029      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6a:	d007      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005a6c:	e00f      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a6e:	4b35      	ldr	r3, [pc, #212]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	4a34      	ldr	r2, [pc, #208]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a7a:	e00b      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	2102      	movs	r1, #2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fb8a 	bl	800619c <RCCEx_PLL2_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a8c:	e002      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	75fb      	strb	r3, [r7, #23]
      break;
 8005a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a9a:	4b2a      	ldr	r3, [pc, #168]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa6:	4927      	ldr	r1, [pc, #156]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005aac:	e001      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3324      	adds	r3, #36	; 0x24
 8005ac2:	2102      	movs	r1, #2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fc1b 	bl	8006300 <RCCEx_PLL3_Config>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d035      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aea:	d017      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af0:	d811      	bhi.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af6:	d013      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afc:	d80b      	bhi.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d010      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b06:	d106      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	4a0d      	ldr	r2, [pc, #52]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005b14:	e007      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	75fb      	strb	r3, [r7, #23]
      break;
 8005b1a:	e004      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005b1c:	bf00      	nop
 8005b1e:	e002      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005b20:	bf00      	nop
 8005b22:	e000      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10d      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3a:	4902      	ldr	r1, [pc, #8]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	654b      	str	r3, [r1, #84]	; 0x54
 8005b40:	e004      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005b42:	bf00      	nop
 8005b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b58:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b64:	492d      	ldr	r1, [pc, #180]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d008      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b76:	4b29      	ldr	r3, [pc, #164]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b82:	4926      	ldr	r1, [pc, #152]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005b94:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b98:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba0:	491e      	ldr	r1, [pc, #120]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00d      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bb2:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	4a19      	ldr	r2, [pc, #100]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005bb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bbc:	6113      	str	r3, [r2, #16]
 8005bbe:	4b17      	ldr	r3, [pc, #92]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bc8:	4914      	ldr	r1, [pc, #80]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	da08      	bge.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005bd6:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be2:	490e      	ldr	r1, [pc, #56]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d009      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bf4:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c02:	4906      	ldr	r1, [pc, #24]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005c08:	7dbb      	ldrb	r3, [r7, #22]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e000      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	58024400 	.word	0x58024400

08005c20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005c24:	f7ff f894 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	091b      	lsrs	r3, r3, #4
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	4904      	ldr	r1, [pc, #16]	; (8005c48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	58024400 	.word	0x58024400
 8005c48:	0800a3c8 	.word	0x0800a3c8

08005c4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b089      	sub	sp, #36	; 0x24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c54:	4ba1      	ldr	r3, [pc, #644]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	f003 0303 	and.w	r3, r3, #3
 8005c5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005c5e:	4b9f      	ldr	r3, [pc, #636]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	0b1b      	lsrs	r3, r3, #12
 8005c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c6a:	4b9c      	ldr	r3, [pc, #624]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	091b      	lsrs	r3, r3, #4
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005c76:	4b99      	ldr	r3, [pc, #612]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	08db      	lsrs	r3, r3, #3
 8005c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	fb02 f303 	mul.w	r3, r2, r3
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 8111 	beq.w	8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	f000 8083 	beq.w	8005da8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	f200 80a1 	bhi.w	8005dec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d056      	beq.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005cb6:	e099      	b.n	8005dec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb8:	4b88      	ldr	r3, [pc, #544]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d02d      	beq.n	8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cc4:	4b85      	ldr	r3, [pc, #532]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	08db      	lsrs	r3, r3, #3
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	4a84      	ldr	r2, [pc, #528]	; (8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	ee07 3a90 	vmov	s15, r3
 8005cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cee:	4b7b      	ldr	r3, [pc, #492]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d1e:	e087      	b.n	8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d32:	4b6a      	ldr	r3, [pc, #424]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d62:	e065      	b.n	8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d76:	4b59      	ldr	r3, [pc, #356]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005da6:	e043      	b.n	8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	ee07 3a90 	vmov	s15, r3
 8005dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dba:	4b48      	ldr	r3, [pc, #288]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dea:	e021      	b.n	8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfe:	4b37      	ldr	r3, [pc, #220]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e30:	4b2a      	ldr	r3, [pc, #168]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	0a5b      	lsrs	r3, r3, #9
 8005e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e56:	ee17 2a90 	vmov	r2, s15
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005e5e:	4b1f      	ldr	r3, [pc, #124]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	0c1b      	lsrs	r3, r3, #16
 8005e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e68:	ee07 3a90 	vmov	s15, r3
 8005e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e78:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e84:	ee17 2a90 	vmov	r2, s15
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005e8c:	4b13      	ldr	r3, [pc, #76]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e90:	0e1b      	lsrs	r3, r3, #24
 8005e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb2:	ee17 2a90 	vmov	r2, s15
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005eba:	e008      	b.n	8005ece <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	609a      	str	r2, [r3, #8]
}
 8005ece:	bf00      	nop
 8005ed0:	3724      	adds	r7, #36	; 0x24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	58024400 	.word	0x58024400
 8005ee0:	03d09000 	.word	0x03d09000
 8005ee4:	46000000 	.word	0x46000000
 8005ee8:	4c742400 	.word	0x4c742400
 8005eec:	4a742400 	.word	0x4a742400
 8005ef0:	4af42400 	.word	0x4af42400

08005ef4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b089      	sub	sp, #36	; 0x24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005efc:	4ba1      	ldr	r3, [pc, #644]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f06:	4b9f      	ldr	r3, [pc, #636]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	0d1b      	lsrs	r3, r3, #20
 8005f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f12:	4b9c      	ldr	r3, [pc, #624]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	0a1b      	lsrs	r3, r3, #8
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f1e:	4b99      	ldr	r3, [pc, #612]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f22:	08db      	lsrs	r3, r3, #3
 8005f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	fb02 f303 	mul.w	r3, r2, r3
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 8111 	beq.w	8006164 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	f000 8083 	beq.w	8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	f200 80a1 	bhi.w	8006094 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d056      	beq.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f5e:	e099      	b.n	8006094 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f60:	4b88      	ldr	r3, [pc, #544]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d02d      	beq.n	8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f6c:	4b85      	ldr	r3, [pc, #532]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	08db      	lsrs	r3, r3, #3
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	4a84      	ldr	r2, [pc, #528]	; (8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f96:	4b7b      	ldr	r3, [pc, #492]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005faa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800618c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005fc6:	e087      	b.n	80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fda:	4b6a      	ldr	r3, [pc, #424]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800618c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006006:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800600a:	e065      	b.n	80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006016:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800601a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601e:	4b59      	ldr	r3, [pc, #356]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006032:	eddf 5a56 	vldr	s11, [pc, #344]	; 800618c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800604e:	e043      	b.n	80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800605e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006062:	4b48      	ldr	r3, [pc, #288]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006072:	ed97 6a03 	vldr	s12, [r7, #12]
 8006076:	eddf 5a45 	vldr	s11, [pc, #276]	; 800618c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800607a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006092:	e021      	b.n	80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a6:	4b37      	ldr	r3, [pc, #220]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800618c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80060d8:	4b2a      	ldr	r3, [pc, #168]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	0a5b      	lsrs	r3, r3, #9
 80060de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fe:	ee17 2a90 	vmov	r2, s15
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006106:	4b1f      	ldr	r3, [pc, #124]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	0c1b      	lsrs	r3, r3, #16
 800610c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800611c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006120:	edd7 6a07 	vldr	s13, [r7, #28]
 8006124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800612c:	ee17 2a90 	vmov	r2, s15
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	0e1b      	lsrs	r3, r3, #24
 800613a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800614a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800614e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800615a:	ee17 2a90 	vmov	r2, s15
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006162:	e008      	b.n	8006176 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	609a      	str	r2, [r3, #8]
}
 8006176:	bf00      	nop
 8006178:	3724      	adds	r7, #36	; 0x24
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	58024400 	.word	0x58024400
 8006188:	03d09000 	.word	0x03d09000
 800618c:	46000000 	.word	0x46000000
 8006190:	4c742400 	.word	0x4c742400
 8006194:	4a742400 	.word	0x4a742400
 8006198:	4af42400 	.word	0x4af42400

0800619c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061aa:	4b53      	ldr	r3, [pc, #332]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d101      	bne.n	80061ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e099      	b.n	80062ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061ba:	4b4f      	ldr	r3, [pc, #316]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a4e      	ldr	r2, [pc, #312]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80061c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c6:	f7fb fded 	bl	8001da4 <HAL_GetTick>
 80061ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061cc:	e008      	b.n	80061e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80061ce:	f7fb fde9 	bl	8001da4 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e086      	b.n	80062ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061e0:	4b45      	ldr	r3, [pc, #276]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f0      	bne.n	80061ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061ec:	4b42      	ldr	r3, [pc, #264]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	031b      	lsls	r3, r3, #12
 80061fa:	493f      	ldr	r1, [pc, #252]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	628b      	str	r3, [r1, #40]	; 0x28
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	3b01      	subs	r3, #1
 8006206:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	3b01      	subs	r3, #1
 8006210:	025b      	lsls	r3, r3, #9
 8006212:	b29b      	uxth	r3, r3
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	3b01      	subs	r3, #1
 800621c:	041b      	lsls	r3, r3, #16
 800621e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	3b01      	subs	r3, #1
 800622a:	061b      	lsls	r3, r3, #24
 800622c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006230:	4931      	ldr	r1, [pc, #196]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006232:	4313      	orrs	r3, r2
 8006234:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006236:	4b30      	ldr	r3, [pc, #192]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	492d      	ldr	r1, [pc, #180]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006244:	4313      	orrs	r3, r2
 8006246:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006248:	4b2b      	ldr	r3, [pc, #172]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	f023 0220 	bic.w	r2, r3, #32
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	4928      	ldr	r1, [pc, #160]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006256:	4313      	orrs	r3, r2
 8006258:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800625a:	4b27      	ldr	r3, [pc, #156]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	4a26      	ldr	r2, [pc, #152]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006260:	f023 0310 	bic.w	r3, r3, #16
 8006264:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006266:	4b24      	ldr	r3, [pc, #144]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800626a:	4b24      	ldr	r3, [pc, #144]	; (80062fc <RCCEx_PLL2_Config+0x160>)
 800626c:	4013      	ands	r3, r2
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	69d2      	ldr	r2, [r2, #28]
 8006272:	00d2      	lsls	r2, r2, #3
 8006274:	4920      	ldr	r1, [pc, #128]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006276:	4313      	orrs	r3, r2
 8006278:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800627a:	4b1f      	ldr	r3, [pc, #124]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627e:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006280:	f043 0310 	orr.w	r3, r3, #16
 8006284:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800628c:	4b1a      	ldr	r3, [pc, #104]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	4a19      	ldr	r2, [pc, #100]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006292:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006296:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006298:	e00f      	b.n	80062ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d106      	bne.n	80062ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062a0:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	4a14      	ldr	r2, [pc, #80]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062ac:	e005      	b.n	80062ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062ae:	4b12      	ldr	r3, [pc, #72]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	4a11      	ldr	r2, [pc, #68]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062ba:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a0e      	ldr	r2, [pc, #56]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c6:	f7fb fd6d 	bl	8001da4 <HAL_GetTick>
 80062ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062cc:	e008      	b.n	80062e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80062ce:	f7fb fd69 	bl	8001da4 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e006      	b.n	80062ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0f0      	beq.n	80062ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	58024400 	.word	0x58024400
 80062fc:	ffff0007 	.word	0xffff0007

08006300 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800630e:	4b53      	ldr	r3, [pc, #332]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	2b03      	cmp	r3, #3
 8006318:	d101      	bne.n	800631e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e099      	b.n	8006452 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800631e:	4b4f      	ldr	r3, [pc, #316]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a4e      	ldr	r2, [pc, #312]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632a:	f7fb fd3b 	bl	8001da4 <HAL_GetTick>
 800632e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006330:	e008      	b.n	8006344 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006332:	f7fb fd37 	bl	8001da4 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e086      	b.n	8006452 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006344:	4b45      	ldr	r3, [pc, #276]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f0      	bne.n	8006332 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006350:	4b42      	ldr	r3, [pc, #264]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006354:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	051b      	lsls	r3, r3, #20
 800635e:	493f      	ldr	r1, [pc, #252]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006360:	4313      	orrs	r3, r2
 8006362:	628b      	str	r3, [r1, #40]	; 0x28
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	3b01      	subs	r3, #1
 800636a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	3b01      	subs	r3, #1
 8006374:	025b      	lsls	r3, r3, #9
 8006376:	b29b      	uxth	r3, r3
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	3b01      	subs	r3, #1
 8006380:	041b      	lsls	r3, r3, #16
 8006382:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	3b01      	subs	r3, #1
 800638e:	061b      	lsls	r3, r3, #24
 8006390:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006394:	4931      	ldr	r1, [pc, #196]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006396:	4313      	orrs	r3, r2
 8006398:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800639a:	4b30      	ldr	r3, [pc, #192]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	492d      	ldr	r1, [pc, #180]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063ac:	4b2b      	ldr	r3, [pc, #172]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	4928      	ldr	r1, [pc, #160]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063be:	4b27      	ldr	r3, [pc, #156]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	4a26      	ldr	r2, [pc, #152]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063ca:	4b24      	ldr	r3, [pc, #144]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ce:	4b24      	ldr	r3, [pc, #144]	; (8006460 <RCCEx_PLL3_Config+0x160>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	69d2      	ldr	r2, [r2, #28]
 80063d6:	00d2      	lsls	r2, r2, #3
 80063d8:	4920      	ldr	r1, [pc, #128]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063de:	4b1f      	ldr	r3, [pc, #124]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	4a1e      	ldr	r2, [pc, #120]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063f0:	4b1a      	ldr	r3, [pc, #104]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	4a19      	ldr	r2, [pc, #100]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063fc:	e00f      	b.n	800641e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d106      	bne.n	8006412 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006404:	4b15      	ldr	r3, [pc, #84]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	4a14      	ldr	r2, [pc, #80]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 800640a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800640e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006410:	e005      	b.n	800641e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	4a11      	ldr	r2, [pc, #68]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006418:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800641c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a0e      	ldr	r2, [pc, #56]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800642a:	f7fb fcbb 	bl	8001da4 <HAL_GetTick>
 800642e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006430:	e008      	b.n	8006444 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006432:	f7fb fcb7 	bl	8001da4 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e006      	b.n	8006452 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006444:	4b05      	ldr	r3, [pc, #20]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	58024400 	.word	0x58024400
 8006460:	ffff0007 	.word	0xffff0007

08006464 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e0f1      	b.n	800665a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a78      	ldr	r2, [pc, #480]	; (8006664 <HAL_SPI_Init+0x200>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00f      	beq.n	80064a6 <HAL_SPI_Init+0x42>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a77      	ldr	r2, [pc, #476]	; (8006668 <HAL_SPI_Init+0x204>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00a      	beq.n	80064a6 <HAL_SPI_Init+0x42>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a75      	ldr	r2, [pc, #468]	; (800666c <HAL_SPI_Init+0x208>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d005      	beq.n	80064a6 <HAL_SPI_Init+0x42>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	2b0f      	cmp	r3, #15
 80064a0:	d901      	bls.n	80064a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e0d9      	b.n	800665a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fdca 	bl	8007040 <SPI_GetPacketSize>
 80064ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a6c      	ldr	r2, [pc, #432]	; (8006664 <HAL_SPI_Init+0x200>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00c      	beq.n	80064d2 <HAL_SPI_Init+0x6e>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a6a      	ldr	r2, [pc, #424]	; (8006668 <HAL_SPI_Init+0x204>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d007      	beq.n	80064d2 <HAL_SPI_Init+0x6e>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a69      	ldr	r2, [pc, #420]	; (800666c <HAL_SPI_Init+0x208>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d002      	beq.n	80064d2 <HAL_SPI_Init+0x6e>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d811      	bhi.n	80064f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80064d6:	4a63      	ldr	r2, [pc, #396]	; (8006664 <HAL_SPI_Init+0x200>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d009      	beq.n	80064f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a61      	ldr	r2, [pc, #388]	; (8006668 <HAL_SPI_Init+0x204>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_SPI_Init+0x8c>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a60      	ldr	r2, [pc, #384]	; (800666c <HAL_SPI_Init+0x208>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d104      	bne.n	80064fa <HAL_SPI_Init+0x96>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b10      	cmp	r3, #16
 80064f4:	d901      	bls.n	80064fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e0af      	b.n	800665a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fb f8fa 	bl	8001708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006536:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006540:	d119      	bne.n	8006576 <HAL_SPI_Init+0x112>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800654a:	d103      	bne.n	8006554 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10c      	bne.n	8006576 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006564:	d107      	bne.n	8006576 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006574:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69da      	ldr	r2, [r3, #28]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	431a      	orrs	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006588:	ea42 0103 	orr.w	r1, r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d6:	ea42 0103 	orr.w	r1, r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d113      	bne.n	8006616 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006600:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006614:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0201 	bic.w	r2, r2, #1
 8006624:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	40013000 	.word	0x40013000
 8006668:	40003800 	.word	0x40003800
 800666c:	40003c00 	.word	0x40003c00

08006670 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	; 0x28
 8006674:	af02      	add	r7, sp, #8
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	4613      	mov	r3, r2
 800667e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3320      	adds	r3, #32
 8006686:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_SPI_Transmit+0x2a>
 8006696:	2302      	movs	r3, #2
 8006698:	e1d7      	b.n	8006a4a <HAL_SPI_Transmit+0x3da>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066a2:	f7fb fb7f 	bl	8001da4 <HAL_GetTick>
 80066a6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d007      	beq.n	80066c4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
 80066b6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80066c0:	7efb      	ldrb	r3, [r7, #27]
 80066c2:	e1c2      	b.n	8006a4a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <HAL_SPI_Transmit+0x60>
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d107      	bne.n	80066e0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80066dc:	7efb      	ldrb	r3, [r7, #27]
 80066de:	e1b4      	b.n	8006a4a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2203      	movs	r2, #3
 80066e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	88fa      	ldrh	r2, [r7, #6]
 80066fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	88fa      	ldrh	r2, [r7, #6]
 8006702:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006730:	d107      	bne.n	8006742 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006740:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	4b96      	ldr	r3, [pc, #600]	; (80069a4 <HAL_SPI_Transmit+0x334>)
 800674a:	4013      	ands	r3, r2
 800674c:	88f9      	ldrh	r1, [r7, #6]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	430b      	orrs	r3, r1
 8006754:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0201 	orr.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800676e:	d107      	bne.n	8006780 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b0f      	cmp	r3, #15
 8006786:	d947      	bls.n	8006818 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006788:	e03f      	b.n	800680a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b02      	cmp	r3, #2
 8006796:	d114      	bne.n	80067c2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6812      	ldr	r2, [r2, #0]
 80067a2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a8:	1d1a      	adds	r2, r3, #4
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80067c0:	e023      	b.n	800680a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067c2:	f7fb faef 	bl	8001da4 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d803      	bhi.n	80067da <HAL_SPI_Transmit+0x16a>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d102      	bne.n	80067e0 <HAL_SPI_Transmit+0x170>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d114      	bne.n	800680a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fb5f 	bl	8006ea4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e11f      	b.n	8006a4a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1b9      	bne.n	800678a <HAL_SPI_Transmit+0x11a>
 8006816:	e0f2      	b.n	80069fe <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	2b07      	cmp	r3, #7
 800681e:	f240 80e7 	bls.w	80069f0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006822:	e05d      	b.n	80068e0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b02      	cmp	r3, #2
 8006830:	d132      	bne.n	8006898 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b01      	cmp	r3, #1
 800683c:	d918      	bls.n	8006870 <HAL_SPI_Transmit+0x200>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d014      	beq.n	8006870 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6812      	ldr	r2, [r2, #0]
 8006850:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006856:	1d1a      	adds	r2, r3, #4
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b02      	subs	r3, #2
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800686e:	e037      	b.n	80068e0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006874:	881a      	ldrh	r2, [r3, #0]
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687e:	1c9a      	adds	r2, r3, #2
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006896:	e023      	b.n	80068e0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006898:	f7fb fa84 	bl	8001da4 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d803      	bhi.n	80068b0 <HAL_SPI_Transmit+0x240>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ae:	d102      	bne.n	80068b6 <HAL_SPI_Transmit+0x246>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d114      	bne.n	80068e0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 faf4 	bl	8006ea4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e0b4      	b.n	8006a4a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d19b      	bne.n	8006824 <HAL_SPI_Transmit+0x1b4>
 80068ec:	e087      	b.n	80069fe <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d155      	bne.n	80069a8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006902:	b29b      	uxth	r3, r3
 8006904:	2b03      	cmp	r3, #3
 8006906:	d918      	bls.n	800693a <HAL_SPI_Transmit+0x2ca>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690c:	2b40      	cmp	r3, #64	; 0x40
 800690e:	d914      	bls.n	800693a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6812      	ldr	r2, [r2, #0]
 800691a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006920:	1d1a      	adds	r2, r3, #4
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b04      	subs	r3, #4
 8006930:	b29a      	uxth	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006938:	e05a      	b.n	80069f0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006940:	b29b      	uxth	r3, r3
 8006942:	2b01      	cmp	r3, #1
 8006944:	d917      	bls.n	8006976 <HAL_SPI_Transmit+0x306>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d013      	beq.n	8006976 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006952:	881a      	ldrh	r2, [r3, #0]
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695c:	1c9a      	adds	r2, r3, #2
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b02      	subs	r3, #2
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006974:	e03c      	b.n	80069f0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3320      	adds	r3, #32
 8006980:	7812      	ldrb	r2, [r2, #0]
 8006982:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80069a0:	e026      	b.n	80069f0 <HAL_SPI_Transmit+0x380>
 80069a2:	bf00      	nop
 80069a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069a8:	f7fb f9fc 	bl	8001da4 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d803      	bhi.n	80069c0 <HAL_SPI_Transmit+0x350>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069be:	d102      	bne.n	80069c6 <HAL_SPI_Transmit+0x356>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d114      	bne.n	80069f0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 fa6c 	bl	8006ea4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e02c      	b.n	8006a4a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f47f af78 	bne.w	80068ee <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2200      	movs	r2, #0
 8006a06:	2108      	movs	r1, #8
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 faeb 	bl	8006fe4 <SPI_WaitOnFlagUntilTimeout>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d007      	beq.n	8006a24 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a1a:	f043 0220 	orr.w	r2, r3, #32
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fa3d 	bl	8006ea4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006a48:	7efb      	ldrb	r3, [r7, #27]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3720      	adds	r7, #32
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop

08006a54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b08e      	sub	sp, #56	; 0x38
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3320      	adds	r3, #32
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3330      	adds	r3, #48	; 0x30
 8006a76:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <HAL_SPI_TransmitReceive+0x32>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e209      	b.n	8006e9a <HAL_SPI_TransmitReceive+0x446>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a8e:	f7fb f989 	bl	8001da4 <HAL_GetTick>
 8006a92:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006a94:	887b      	ldrh	r3, [r7, #2]
 8006a96:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006a98:	887b      	ldrh	r3, [r7, #2]
 8006a9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006aa2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aaa:	7efb      	ldrb	r3, [r7, #27]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d014      	beq.n	8006ada <HAL_SPI_TransmitReceive+0x86>
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ab6:	d106      	bne.n	8006ac6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d102      	bne.n	8006ac6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006ac0:	7efb      	ldrb	r3, [r7, #27]
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d009      	beq.n	8006ada <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006ad4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ad8:	e1df      	b.n	8006e9a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <HAL_SPI_TransmitReceive+0x98>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <HAL_SPI_TransmitReceive+0x98>
 8006ae6:	887b      	ldrh	r3, [r7, #2]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d109      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006afa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006afe:	e1cc      	b.n	8006e9a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d003      	beq.n	8006b14 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2205      	movs	r2, #5
 8006b10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	887a      	ldrh	r2, [r7, #2]
 8006b26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	887a      	ldrh	r2, [r7, #2]
 8006b2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	887a      	ldrh	r2, [r7, #2]
 8006b3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	887a      	ldrh	r2, [r7, #2]
 8006b44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	4b82      	ldr	r3, [pc, #520]	; (8006d64 <HAL_SPI_TransmitReceive+0x310>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	8879      	ldrh	r1, [r7, #2]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b80:	d107      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	d970      	bls.n	8006c7c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b9a:	e068      	b.n	8006c6e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d11a      	bne.n	8006be0 <HAL_SPI_TransmitReceive+0x18c>
 8006baa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d017      	beq.n	8006be0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6812      	ldr	r2, [r2, #0]
 8006bba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc0:	1d1a      	adds	r2, r3, #4
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bde:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695a      	ldr	r2, [r3, #20]
 8006be6:	f248 0308 	movw	r3, #32776	; 0x8008
 8006bea:	4013      	ands	r3, r2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01a      	beq.n	8006c26 <HAL_SPI_TransmitReceive+0x1d2>
 8006bf0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d017      	beq.n	8006c26 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c00:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c06:	1d1a      	adds	r2, r3, #4
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c24:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c26:	f7fb f8bd 	bl	8001da4 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d803      	bhi.n	8006c3e <HAL_SPI_TransmitReceive+0x1ea>
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3c:	d102      	bne.n	8006c44 <HAL_SPI_TransmitReceive+0x1f0>
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d114      	bne.n	8006c6e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 f92d 	bl	8006ea4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e115      	b.n	8006e9a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d193      	bne.n	8006b9c <HAL_SPI_TransmitReceive+0x148>
 8006c74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d190      	bne.n	8006b9c <HAL_SPI_TransmitReceive+0x148>
 8006c7a:	e0e7      	b.n	8006e4c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	2b07      	cmp	r3, #7
 8006c82:	f240 80dd 	bls.w	8006e40 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c86:	e066      	b.n	8006d56 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d119      	bne.n	8006cca <HAL_SPI_TransmitReceive+0x276>
 8006c96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d016      	beq.n	8006cca <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca0:	881a      	ldrh	r2, [r3, #0]
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006caa:	1c9a      	adds	r2, r3, #2
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d11a      	bne.n	8006d0e <HAL_SPI_TransmitReceive+0x2ba>
 8006cd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d017      	beq.n	8006d0e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce2:	6a3a      	ldr	r2, [r7, #32]
 8006ce4:	8812      	ldrh	r2, [r2, #0]
 8006ce6:	b292      	uxth	r2, r2
 8006ce8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cee:	1c9a      	adds	r2, r3, #2
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d0e:	f7fb f849 	bl	8001da4 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d803      	bhi.n	8006d26 <HAL_SPI_TransmitReceive+0x2d2>
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d24:	d102      	bne.n	8006d2c <HAL_SPI_TransmitReceive+0x2d8>
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d114      	bne.n	8006d56 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f8b9 	bl	8006ea4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e0a1      	b.n	8006e9a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006d56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d195      	bne.n	8006c88 <HAL_SPI_TransmitReceive+0x234>
 8006d5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d192      	bne.n	8006c88 <HAL_SPI_TransmitReceive+0x234>
 8006d62:	e073      	b.n	8006e4c <HAL_SPI_TransmitReceive+0x3f8>
 8006d64:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d11b      	bne.n	8006dae <HAL_SPI_TransmitReceive+0x35a>
 8006d76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d018      	beq.n	8006dae <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3320      	adds	r3, #32
 8006d86:	7812      	ldrb	r2, [r2, #0]
 8006d88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006dac:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d11d      	bne.n	8006df8 <HAL_SPI_TransmitReceive+0x3a4>
 8006dbc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d01a      	beq.n	8006df8 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dce:	7812      	ldrb	r2, [r2, #0]
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006df6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006df8:	f7fa ffd4 	bl	8001da4 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d803      	bhi.n	8006e10 <HAL_SPI_TransmitReceive+0x3bc>
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0e:	d102      	bne.n	8006e16 <HAL_SPI_TransmitReceive+0x3c2>
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d114      	bne.n	8006e40 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 f844 	bl	8006ea4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e02c      	b.n	8006e9a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006e40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d190      	bne.n	8006d68 <HAL_SPI_TransmitReceive+0x314>
 8006e46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d18d      	bne.n	8006d68 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	2200      	movs	r2, #0
 8006e54:	2108      	movs	r1, #8
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 f8c4 	bl	8006fe4 <SPI_WaitOnFlagUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d007      	beq.n	8006e72 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e68:	f043 0220 	orr.w	r2, r3, #32
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f816 	bl	8006ea4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e001      	b.n	8006e9a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8006e96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3730      	adds	r7, #48	; 0x30
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop

08006ea4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f042 0208 	orr.w	r2, r2, #8
 8006ec2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0210 	orr.w	r2, r2, #16
 8006ed2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0201 	bic.w	r2, r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6919      	ldr	r1, [r3, #16]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b3c      	ldr	r3, [pc, #240]	; (8006fe0 <SPI_CloseTransfer+0x13c>)
 8006ef0:	400b      	ands	r3, r1
 8006ef2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006f02:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d014      	beq.n	8006f3a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00f      	beq.n	8006f3a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	699a      	ldr	r2, [r3, #24]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f042 0220 	orr.w	r2, r2, #32
 8006f38:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d014      	beq.n	8006f70 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00f      	beq.n	8006f70 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f56:	f043 0204 	orr.w	r2, r3, #4
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699a      	ldr	r2, [r3, #24]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f6e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00f      	beq.n	8006f9a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f80:	f043 0201 	orr.w	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	699a      	ldr	r2, [r3, #24]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f98:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00f      	beq.n	8006fc4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006faa:	f043 0208 	orr.w	r2, r3, #8
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699a      	ldr	r2, [r3, #24]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fc2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	fffffc90 	.word	0xfffffc90

08006fe4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	603b      	str	r3, [r7, #0]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ff4:	e010      	b.n	8007018 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ff6:	f7fa fed5 	bl	8001da4 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	429a      	cmp	r2, r3
 8007004:	d803      	bhi.n	800700e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700c:	d102      	bne.n	8007014 <SPI_WaitOnFlagUntilTimeout+0x30>
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e00f      	b.n	8007038 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695a      	ldr	r2, [r3, #20]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	4013      	ands	r3, r2
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	429a      	cmp	r2, r3
 8007026:	bf0c      	ite	eq
 8007028:	2301      	moveq	r3, #1
 800702a:	2300      	movne	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	461a      	mov	r2, r3
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	429a      	cmp	r2, r3
 8007034:	d0df      	beq.n	8006ff6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704c:	095b      	lsrs	r3, r3, #5
 800704e:	3301      	adds	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	3307      	adds	r3, #7
 800705e:	08db      	lsrs	r3, r3, #3
 8007060:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	fb02 f303 	mul.w	r3, r2, r3
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e049      	b.n	800711c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d106      	bne.n	80070a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7fa fb97 	bl	80017d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2202      	movs	r2, #2
 80070a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4619      	mov	r1, r3
 80070b4:	4610      	mov	r0, r2
 80070b6:	f000 fc21 	bl	80078fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	d001      	beq.n	800713c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e04c      	b.n	80071d6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a26      	ldr	r2, [pc, #152]	; (80071e4 <HAL_TIM_Base_Start+0xc0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d022      	beq.n	8007194 <HAL_TIM_Base_Start+0x70>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007156:	d01d      	beq.n	8007194 <HAL_TIM_Base_Start+0x70>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a22      	ldr	r2, [pc, #136]	; (80071e8 <HAL_TIM_Base_Start+0xc4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d018      	beq.n	8007194 <HAL_TIM_Base_Start+0x70>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a21      	ldr	r2, [pc, #132]	; (80071ec <HAL_TIM_Base_Start+0xc8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d013      	beq.n	8007194 <HAL_TIM_Base_Start+0x70>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a1f      	ldr	r2, [pc, #124]	; (80071f0 <HAL_TIM_Base_Start+0xcc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00e      	beq.n	8007194 <HAL_TIM_Base_Start+0x70>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a1e      	ldr	r2, [pc, #120]	; (80071f4 <HAL_TIM_Base_Start+0xd0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d009      	beq.n	8007194 <HAL_TIM_Base_Start+0x70>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a1c      	ldr	r2, [pc, #112]	; (80071f8 <HAL_TIM_Base_Start+0xd4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <HAL_TIM_Base_Start+0x70>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a1b      	ldr	r2, [pc, #108]	; (80071fc <HAL_TIM_Base_Start+0xd8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d115      	bne.n	80071c0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	4b19      	ldr	r3, [pc, #100]	; (8007200 <HAL_TIM_Base_Start+0xdc>)
 800719c:	4013      	ands	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b06      	cmp	r3, #6
 80071a4:	d015      	beq.n	80071d2 <HAL_TIM_Base_Start+0xae>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ac:	d011      	beq.n	80071d2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0201 	orr.w	r2, r2, #1
 80071bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071be:	e008      	b.n	80071d2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0201 	orr.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	e000      	b.n	80071d4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40010000 	.word	0x40010000
 80071e8:	40000400 	.word	0x40000400
 80071ec:	40000800 	.word	0x40000800
 80071f0:	40000c00 	.word	0x40000c00
 80071f4:	40010400 	.word	0x40010400
 80071f8:	40001800 	.word	0x40001800
 80071fc:	40014000 	.word	0x40014000
 8007200:	00010007 	.word	0x00010007

08007204 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e049      	b.n	80072aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d106      	bne.n	8007230 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f841 	bl	80072b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3304      	adds	r3, #4
 8007240:	4619      	mov	r1, r3
 8007242:	4610      	mov	r0, r2
 8007244:	f000 fb5a 	bl	80078fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
	...

080072c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d109      	bne.n	80072ec <HAL_TIM_PWM_Start+0x24>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	e03c      	b.n	8007366 <HAL_TIM_PWM_Start+0x9e>
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d109      	bne.n	8007306 <HAL_TIM_PWM_Start+0x3e>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	bf14      	ite	ne
 80072fe:	2301      	movne	r3, #1
 8007300:	2300      	moveq	r3, #0
 8007302:	b2db      	uxtb	r3, r3
 8007304:	e02f      	b.n	8007366 <HAL_TIM_PWM_Start+0x9e>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b08      	cmp	r3, #8
 800730a:	d109      	bne.n	8007320 <HAL_TIM_PWM_Start+0x58>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b01      	cmp	r3, #1
 8007316:	bf14      	ite	ne
 8007318:	2301      	movne	r3, #1
 800731a:	2300      	moveq	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	e022      	b.n	8007366 <HAL_TIM_PWM_Start+0x9e>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b0c      	cmp	r3, #12
 8007324:	d109      	bne.n	800733a <HAL_TIM_PWM_Start+0x72>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b01      	cmp	r3, #1
 8007330:	bf14      	ite	ne
 8007332:	2301      	movne	r3, #1
 8007334:	2300      	moveq	r3, #0
 8007336:	b2db      	uxtb	r3, r3
 8007338:	e015      	b.n	8007366 <HAL_TIM_PWM_Start+0x9e>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b10      	cmp	r3, #16
 800733e:	d109      	bne.n	8007354 <HAL_TIM_PWM_Start+0x8c>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b01      	cmp	r3, #1
 800734a:	bf14      	ite	ne
 800734c:	2301      	movne	r3, #1
 800734e:	2300      	moveq	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	e008      	b.n	8007366 <HAL_TIM_PWM_Start+0x9e>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b01      	cmp	r3, #1
 800735e:	bf14      	ite	ne
 8007360:	2301      	movne	r3, #1
 8007362:	2300      	moveq	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e0a1      	b.n	80074b2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d104      	bne.n	800737e <HAL_TIM_PWM_Start+0xb6>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800737c:	e023      	b.n	80073c6 <HAL_TIM_PWM_Start+0xfe>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b04      	cmp	r3, #4
 8007382:	d104      	bne.n	800738e <HAL_TIM_PWM_Start+0xc6>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800738c:	e01b      	b.n	80073c6 <HAL_TIM_PWM_Start+0xfe>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b08      	cmp	r3, #8
 8007392:	d104      	bne.n	800739e <HAL_TIM_PWM_Start+0xd6>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800739c:	e013      	b.n	80073c6 <HAL_TIM_PWM_Start+0xfe>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b0c      	cmp	r3, #12
 80073a2:	d104      	bne.n	80073ae <HAL_TIM_PWM_Start+0xe6>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073ac:	e00b      	b.n	80073c6 <HAL_TIM_PWM_Start+0xfe>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b10      	cmp	r3, #16
 80073b2:	d104      	bne.n	80073be <HAL_TIM_PWM_Start+0xf6>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073bc:	e003      	b.n	80073c6 <HAL_TIM_PWM_Start+0xfe>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2201      	movs	r2, #1
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fea2 	bl	8008118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a38      	ldr	r2, [pc, #224]	; (80074bc <HAL_TIM_PWM_Start+0x1f4>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d013      	beq.n	8007406 <HAL_TIM_PWM_Start+0x13e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a37      	ldr	r2, [pc, #220]	; (80074c0 <HAL_TIM_PWM_Start+0x1f8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00e      	beq.n	8007406 <HAL_TIM_PWM_Start+0x13e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a35      	ldr	r2, [pc, #212]	; (80074c4 <HAL_TIM_PWM_Start+0x1fc>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d009      	beq.n	8007406 <HAL_TIM_PWM_Start+0x13e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a34      	ldr	r2, [pc, #208]	; (80074c8 <HAL_TIM_PWM_Start+0x200>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d004      	beq.n	8007406 <HAL_TIM_PWM_Start+0x13e>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a32      	ldr	r2, [pc, #200]	; (80074cc <HAL_TIM_PWM_Start+0x204>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d101      	bne.n	800740a <HAL_TIM_PWM_Start+0x142>
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <HAL_TIM_PWM_Start+0x144>
 800740a:	2300      	movs	r3, #0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800741e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a25      	ldr	r2, [pc, #148]	; (80074bc <HAL_TIM_PWM_Start+0x1f4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d022      	beq.n	8007470 <HAL_TIM_PWM_Start+0x1a8>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007432:	d01d      	beq.n	8007470 <HAL_TIM_PWM_Start+0x1a8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a25      	ldr	r2, [pc, #148]	; (80074d0 <HAL_TIM_PWM_Start+0x208>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d018      	beq.n	8007470 <HAL_TIM_PWM_Start+0x1a8>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a24      	ldr	r2, [pc, #144]	; (80074d4 <HAL_TIM_PWM_Start+0x20c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <HAL_TIM_PWM_Start+0x1a8>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a22      	ldr	r2, [pc, #136]	; (80074d8 <HAL_TIM_PWM_Start+0x210>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <HAL_TIM_PWM_Start+0x1a8>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1a      	ldr	r2, [pc, #104]	; (80074c0 <HAL_TIM_PWM_Start+0x1f8>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <HAL_TIM_PWM_Start+0x1a8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a1e      	ldr	r2, [pc, #120]	; (80074dc <HAL_TIM_PWM_Start+0x214>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <HAL_TIM_PWM_Start+0x1a8>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a16      	ldr	r2, [pc, #88]	; (80074c4 <HAL_TIM_PWM_Start+0x1fc>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d115      	bne.n	800749c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <HAL_TIM_PWM_Start+0x218>)
 8007478:	4013      	ands	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b06      	cmp	r3, #6
 8007480:	d015      	beq.n	80074ae <HAL_TIM_PWM_Start+0x1e6>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007488:	d011      	beq.n	80074ae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f042 0201 	orr.w	r2, r2, #1
 8007498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749a:	e008      	b.n	80074ae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0201 	orr.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	e000      	b.n	80074b0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	40010000 	.word	0x40010000
 80074c0:	40010400 	.word	0x40010400
 80074c4:	40014000 	.word	0x40014000
 80074c8:	40014400 	.word	0x40014400
 80074cc:	40014800 	.word	0x40014800
 80074d0:	40000400 	.word	0x40000400
 80074d4:	40000800 	.word	0x40000800
 80074d8:	40000c00 	.word	0x40000c00
 80074dc:	40001800 	.word	0x40001800
 80074e0:	00010007 	.word	0x00010007

080074e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d101      	bne.n	8007502 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074fe:	2302      	movs	r3, #2
 8007500:	e0ff      	b.n	8007702 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b14      	cmp	r3, #20
 800750e:	f200 80f0 	bhi.w	80076f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007512:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	0800756d 	.word	0x0800756d
 800751c:	080076f3 	.word	0x080076f3
 8007520:	080076f3 	.word	0x080076f3
 8007524:	080076f3 	.word	0x080076f3
 8007528:	080075ad 	.word	0x080075ad
 800752c:	080076f3 	.word	0x080076f3
 8007530:	080076f3 	.word	0x080076f3
 8007534:	080076f3 	.word	0x080076f3
 8007538:	080075ef 	.word	0x080075ef
 800753c:	080076f3 	.word	0x080076f3
 8007540:	080076f3 	.word	0x080076f3
 8007544:	080076f3 	.word	0x080076f3
 8007548:	0800762f 	.word	0x0800762f
 800754c:	080076f3 	.word	0x080076f3
 8007550:	080076f3 	.word	0x080076f3
 8007554:	080076f3 	.word	0x080076f3
 8007558:	08007671 	.word	0x08007671
 800755c:	080076f3 	.word	0x080076f3
 8007560:	080076f3 	.word	0x080076f3
 8007564:	080076f3 	.word	0x080076f3
 8007568:	080076b1 	.word	0x080076b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fa5c 	bl	8007a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0208 	orr.w	r2, r2, #8
 8007586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0204 	bic.w	r2, r2, #4
 8007596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6999      	ldr	r1, [r3, #24]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	691a      	ldr	r2, [r3, #16]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	619a      	str	r2, [r3, #24]
      break;
 80075aa:	e0a5      	b.n	80076f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68b9      	ldr	r1, [r7, #8]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 facc 	bl	8007b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6999      	ldr	r1, [r3, #24]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	021a      	lsls	r2, r3, #8
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	619a      	str	r2, [r3, #24]
      break;
 80075ec:	e084      	b.n	80076f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fb35 	bl	8007c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69da      	ldr	r2, [r3, #28]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f042 0208 	orr.w	r2, r2, #8
 8007608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69da      	ldr	r2, [r3, #28]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0204 	bic.w	r2, r2, #4
 8007618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69d9      	ldr	r1, [r3, #28]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	691a      	ldr	r2, [r3, #16]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	61da      	str	r2, [r3, #28]
      break;
 800762c:	e064      	b.n	80076f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68b9      	ldr	r1, [r7, #8]
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fb9d 	bl	8007d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69da      	ldr	r2, [r3, #28]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69d9      	ldr	r1, [r3, #28]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	021a      	lsls	r2, r3, #8
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	61da      	str	r2, [r3, #28]
      break;
 800766e:	e043      	b.n	80076f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fbe6 	bl	8007e48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0208 	orr.w	r2, r2, #8
 800768a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0204 	bic.w	r2, r2, #4
 800769a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076ae:	e023      	b.n	80076f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68b9      	ldr	r1, [r7, #8]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fc2a 	bl	8007f10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	021a      	lsls	r2, r3, #8
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076f0:	e002      	b.n	80076f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	75fb      	strb	r3, [r7, #23]
      break;
 80076f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop

0800770c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_TIM_ConfigClockSource+0x1c>
 8007724:	2302      	movs	r3, #2
 8007726:	e0dc      	b.n	80078e2 <HAL_TIM_ConfigClockSource+0x1d6>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	4b6a      	ldr	r3, [pc, #424]	; (80078ec <HAL_TIM_ConfigClockSource+0x1e0>)
 8007744:	4013      	ands	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800774e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a64      	ldr	r2, [pc, #400]	; (80078f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800775e:	4293      	cmp	r3, r2
 8007760:	f000 80a9 	beq.w	80078b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007764:	4a62      	ldr	r2, [pc, #392]	; (80078f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	f200 80ae 	bhi.w	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800776c:	4a61      	ldr	r2, [pc, #388]	; (80078f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	f000 80a1 	beq.w	80078b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007774:	4a5f      	ldr	r2, [pc, #380]	; (80078f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	f200 80a6 	bhi.w	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800777c:	4a5e      	ldr	r2, [pc, #376]	; (80078f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800777e:	4293      	cmp	r3, r2
 8007780:	f000 8099 	beq.w	80078b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007784:	4a5c      	ldr	r2, [pc, #368]	; (80078f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007786:	4293      	cmp	r3, r2
 8007788:	f200 809e 	bhi.w	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800778c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007790:	f000 8091 	beq.w	80078b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007794:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007798:	f200 8096 	bhi.w	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800779c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077a0:	f000 8089 	beq.w	80078b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80077a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077a8:	f200 808e 	bhi.w	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b0:	d03e      	beq.n	8007830 <HAL_TIM_ConfigClockSource+0x124>
 80077b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b6:	f200 8087 	bhi.w	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077be:	f000 8086 	beq.w	80078ce <HAL_TIM_ConfigClockSource+0x1c2>
 80077c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c6:	d87f      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077c8:	2b70      	cmp	r3, #112	; 0x70
 80077ca:	d01a      	beq.n	8007802 <HAL_TIM_ConfigClockSource+0xf6>
 80077cc:	2b70      	cmp	r3, #112	; 0x70
 80077ce:	d87b      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077d0:	2b60      	cmp	r3, #96	; 0x60
 80077d2:	d050      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0x16a>
 80077d4:	2b60      	cmp	r3, #96	; 0x60
 80077d6:	d877      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077d8:	2b50      	cmp	r3, #80	; 0x50
 80077da:	d03c      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x14a>
 80077dc:	2b50      	cmp	r3, #80	; 0x50
 80077de:	d873      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	d058      	beq.n	8007896 <HAL_TIM_ConfigClockSource+0x18a>
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d86f      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077e8:	2b30      	cmp	r3, #48	; 0x30
 80077ea:	d064      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80077ec:	2b30      	cmp	r3, #48	; 0x30
 80077ee:	d86b      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d060      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d867      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d05c      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80077fc:	2b10      	cmp	r3, #16
 80077fe:	d05a      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007800:	e062      	b.n	80078c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	6899      	ldr	r1, [r3, #8]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f000 fc61 	bl	80080d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007824:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	609a      	str	r2, [r3, #8]
      break;
 800782e:	e04f      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	6899      	ldr	r1, [r3, #8]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f000 fc4a 	bl	80080d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007852:	609a      	str	r2, [r3, #8]
      break;
 8007854:	e03c      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	6859      	ldr	r1, [r3, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	461a      	mov	r2, r3
 8007864:	f000 fbba 	bl	8007fdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2150      	movs	r1, #80	; 0x50
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fc14 	bl	800809c <TIM_ITRx_SetConfig>
      break;
 8007874:	e02c      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	6859      	ldr	r1, [r3, #4]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	461a      	mov	r2, r3
 8007884:	f000 fbd9 	bl	800803a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2160      	movs	r1, #96	; 0x60
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fc04 	bl	800809c <TIM_ITRx_SetConfig>
      break;
 8007894:	e01c      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6859      	ldr	r1, [r3, #4]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	461a      	mov	r2, r3
 80078a4:	f000 fb9a 	bl	8007fdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2140      	movs	r1, #64	; 0x40
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fbf4 	bl	800809c <TIM_ITRx_SetConfig>
      break;
 80078b4:	e00c      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4619      	mov	r1, r3
 80078c0:	4610      	mov	r0, r2
 80078c2:	f000 fbeb 	bl	800809c <TIM_ITRx_SetConfig>
      break;
 80078c6:	e003      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	73fb      	strb	r3, [r7, #15]
      break;
 80078cc:	e000      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80078ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	ffceff88 	.word	0xffceff88
 80078f0:	00100040 	.word	0x00100040
 80078f4:	00100030 	.word	0x00100030
 80078f8:	00100020 	.word	0x00100020

080078fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a40      	ldr	r2, [pc, #256]	; (8007a10 <TIM_Base_SetConfig+0x114>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d013      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791a:	d00f      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a3d      	ldr	r2, [pc, #244]	; (8007a14 <TIM_Base_SetConfig+0x118>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00b      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a3c      	ldr	r2, [pc, #240]	; (8007a18 <TIM_Base_SetConfig+0x11c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d007      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a3b      	ldr	r2, [pc, #236]	; (8007a1c <TIM_Base_SetConfig+0x120>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d003      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a3a      	ldr	r2, [pc, #232]	; (8007a20 <TIM_Base_SetConfig+0x124>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d108      	bne.n	800794e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a2f      	ldr	r2, [pc, #188]	; (8007a10 <TIM_Base_SetConfig+0x114>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d01f      	beq.n	8007996 <TIM_Base_SetConfig+0x9a>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795c:	d01b      	beq.n	8007996 <TIM_Base_SetConfig+0x9a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a2c      	ldr	r2, [pc, #176]	; (8007a14 <TIM_Base_SetConfig+0x118>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d017      	beq.n	8007996 <TIM_Base_SetConfig+0x9a>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a2b      	ldr	r2, [pc, #172]	; (8007a18 <TIM_Base_SetConfig+0x11c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <TIM_Base_SetConfig+0x9a>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a2a      	ldr	r2, [pc, #168]	; (8007a1c <TIM_Base_SetConfig+0x120>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00f      	beq.n	8007996 <TIM_Base_SetConfig+0x9a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a29      	ldr	r2, [pc, #164]	; (8007a20 <TIM_Base_SetConfig+0x124>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d00b      	beq.n	8007996 <TIM_Base_SetConfig+0x9a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a28      	ldr	r2, [pc, #160]	; (8007a24 <TIM_Base_SetConfig+0x128>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d007      	beq.n	8007996 <TIM_Base_SetConfig+0x9a>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a27      	ldr	r2, [pc, #156]	; (8007a28 <TIM_Base_SetConfig+0x12c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d003      	beq.n	8007996 <TIM_Base_SetConfig+0x9a>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a26      	ldr	r2, [pc, #152]	; (8007a2c <TIM_Base_SetConfig+0x130>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d108      	bne.n	80079a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800799c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a10      	ldr	r2, [pc, #64]	; (8007a10 <TIM_Base_SetConfig+0x114>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d00f      	beq.n	80079f4 <TIM_Base_SetConfig+0xf8>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a12      	ldr	r2, [pc, #72]	; (8007a20 <TIM_Base_SetConfig+0x124>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d00b      	beq.n	80079f4 <TIM_Base_SetConfig+0xf8>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a11      	ldr	r2, [pc, #68]	; (8007a24 <TIM_Base_SetConfig+0x128>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d007      	beq.n	80079f4 <TIM_Base_SetConfig+0xf8>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a10      	ldr	r2, [pc, #64]	; (8007a28 <TIM_Base_SetConfig+0x12c>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d003      	beq.n	80079f4 <TIM_Base_SetConfig+0xf8>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a0f      	ldr	r2, [pc, #60]	; (8007a2c <TIM_Base_SetConfig+0x130>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d103      	bne.n	80079fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	615a      	str	r2, [r3, #20]
}
 8007a02:	bf00      	nop
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	40010000 	.word	0x40010000
 8007a14:	40000400 	.word	0x40000400
 8007a18:	40000800 	.word	0x40000800
 8007a1c:	40000c00 	.word	0x40000c00
 8007a20:	40010400 	.word	0x40010400
 8007a24:	40014000 	.word	0x40014000
 8007a28:	40014400 	.word	0x40014400
 8007a2c:	40014800 	.word	0x40014800

08007a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	f023 0201 	bic.w	r2, r3, #1
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4b37      	ldr	r3, [pc, #220]	; (8007b38 <TIM_OC1_SetConfig+0x108>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0303 	bic.w	r3, r3, #3
 8007a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f023 0302 	bic.w	r3, r3, #2
 8007a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a2d      	ldr	r2, [pc, #180]	; (8007b3c <TIM_OC1_SetConfig+0x10c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d00f      	beq.n	8007aac <TIM_OC1_SetConfig+0x7c>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a2c      	ldr	r2, [pc, #176]	; (8007b40 <TIM_OC1_SetConfig+0x110>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00b      	beq.n	8007aac <TIM_OC1_SetConfig+0x7c>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a2b      	ldr	r2, [pc, #172]	; (8007b44 <TIM_OC1_SetConfig+0x114>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d007      	beq.n	8007aac <TIM_OC1_SetConfig+0x7c>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a2a      	ldr	r2, [pc, #168]	; (8007b48 <TIM_OC1_SetConfig+0x118>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d003      	beq.n	8007aac <TIM_OC1_SetConfig+0x7c>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a29      	ldr	r2, [pc, #164]	; (8007b4c <TIM_OC1_SetConfig+0x11c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d10c      	bne.n	8007ac6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f023 0308 	bic.w	r3, r3, #8
 8007ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f023 0304 	bic.w	r3, r3, #4
 8007ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a1c      	ldr	r2, [pc, #112]	; (8007b3c <TIM_OC1_SetConfig+0x10c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00f      	beq.n	8007aee <TIM_OC1_SetConfig+0xbe>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <TIM_OC1_SetConfig+0x110>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00b      	beq.n	8007aee <TIM_OC1_SetConfig+0xbe>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a1a      	ldr	r2, [pc, #104]	; (8007b44 <TIM_OC1_SetConfig+0x114>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d007      	beq.n	8007aee <TIM_OC1_SetConfig+0xbe>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a19      	ldr	r2, [pc, #100]	; (8007b48 <TIM_OC1_SetConfig+0x118>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d003      	beq.n	8007aee <TIM_OC1_SetConfig+0xbe>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a18      	ldr	r2, [pc, #96]	; (8007b4c <TIM_OC1_SetConfig+0x11c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d111      	bne.n	8007b12 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	621a      	str	r2, [r3, #32]
}
 8007b2c:	bf00      	nop
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	fffeff8f 	.word	0xfffeff8f
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40010400 	.word	0x40010400
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40014400 	.word	0x40014400
 8007b4c:	40014800 	.word	0x40014800

08007b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	f023 0210 	bic.w	r2, r3, #16
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4b34      	ldr	r3, [pc, #208]	; (8007c4c <TIM_OC2_SetConfig+0xfc>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f023 0320 	bic.w	r3, r3, #32
 8007b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a29      	ldr	r2, [pc, #164]	; (8007c50 <TIM_OC2_SetConfig+0x100>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d003      	beq.n	8007bb8 <TIM_OC2_SetConfig+0x68>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a28      	ldr	r2, [pc, #160]	; (8007c54 <TIM_OC2_SetConfig+0x104>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d10d      	bne.n	8007bd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a1e      	ldr	r2, [pc, #120]	; (8007c50 <TIM_OC2_SetConfig+0x100>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00f      	beq.n	8007bfc <TIM_OC2_SetConfig+0xac>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a1d      	ldr	r2, [pc, #116]	; (8007c54 <TIM_OC2_SetConfig+0x104>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00b      	beq.n	8007bfc <TIM_OC2_SetConfig+0xac>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a1c      	ldr	r2, [pc, #112]	; (8007c58 <TIM_OC2_SetConfig+0x108>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d007      	beq.n	8007bfc <TIM_OC2_SetConfig+0xac>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a1b      	ldr	r2, [pc, #108]	; (8007c5c <TIM_OC2_SetConfig+0x10c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d003      	beq.n	8007bfc <TIM_OC2_SetConfig+0xac>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a1a      	ldr	r2, [pc, #104]	; (8007c60 <TIM_OC2_SetConfig+0x110>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d113      	bne.n	8007c24 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	feff8fff 	.word	0xfeff8fff
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40010400 	.word	0x40010400
 8007c58:	40014000 	.word	0x40014000
 8007c5c:	40014400 	.word	0x40014400
 8007c60:	40014800 	.word	0x40014800

08007c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4b33      	ldr	r3, [pc, #204]	; (8007d5c <TIM_OC3_SetConfig+0xf8>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a28      	ldr	r2, [pc, #160]	; (8007d60 <TIM_OC3_SetConfig+0xfc>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d003      	beq.n	8007cca <TIM_OC3_SetConfig+0x66>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a27      	ldr	r2, [pc, #156]	; (8007d64 <TIM_OC3_SetConfig+0x100>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d10d      	bne.n	8007ce6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	021b      	lsls	r3, r3, #8
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1d      	ldr	r2, [pc, #116]	; (8007d60 <TIM_OC3_SetConfig+0xfc>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00f      	beq.n	8007d0e <TIM_OC3_SetConfig+0xaa>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a1c      	ldr	r2, [pc, #112]	; (8007d64 <TIM_OC3_SetConfig+0x100>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00b      	beq.n	8007d0e <TIM_OC3_SetConfig+0xaa>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a1b      	ldr	r2, [pc, #108]	; (8007d68 <TIM_OC3_SetConfig+0x104>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d007      	beq.n	8007d0e <TIM_OC3_SetConfig+0xaa>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a1a      	ldr	r2, [pc, #104]	; (8007d6c <TIM_OC3_SetConfig+0x108>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d003      	beq.n	8007d0e <TIM_OC3_SetConfig+0xaa>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a19      	ldr	r2, [pc, #100]	; (8007d70 <TIM_OC3_SetConfig+0x10c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d113      	bne.n	8007d36 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	621a      	str	r2, [r3, #32]
}
 8007d50:	bf00      	nop
 8007d52:	371c      	adds	r7, #28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	fffeff8f 	.word	0xfffeff8f
 8007d60:	40010000 	.word	0x40010000
 8007d64:	40010400 	.word	0x40010400
 8007d68:	40014000 	.word	0x40014000
 8007d6c:	40014400 	.word	0x40014400
 8007d70:	40014800 	.word	0x40014800

08007d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4b24      	ldr	r3, [pc, #144]	; (8007e30 <TIM_OC4_SetConfig+0xbc>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	021b      	lsls	r3, r3, #8
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	031b      	lsls	r3, r3, #12
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a19      	ldr	r2, [pc, #100]	; (8007e34 <TIM_OC4_SetConfig+0xc0>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d00f      	beq.n	8007df4 <TIM_OC4_SetConfig+0x80>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a18      	ldr	r2, [pc, #96]	; (8007e38 <TIM_OC4_SetConfig+0xc4>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d00b      	beq.n	8007df4 <TIM_OC4_SetConfig+0x80>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a17      	ldr	r2, [pc, #92]	; (8007e3c <TIM_OC4_SetConfig+0xc8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d007      	beq.n	8007df4 <TIM_OC4_SetConfig+0x80>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a16      	ldr	r2, [pc, #88]	; (8007e40 <TIM_OC4_SetConfig+0xcc>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d003      	beq.n	8007df4 <TIM_OC4_SetConfig+0x80>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a15      	ldr	r2, [pc, #84]	; (8007e44 <TIM_OC4_SetConfig+0xd0>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d109      	bne.n	8007e08 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	019b      	lsls	r3, r3, #6
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	621a      	str	r2, [r3, #32]
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	feff8fff 	.word	0xfeff8fff
 8007e34:	40010000 	.word	0x40010000
 8007e38:	40010400 	.word	0x40010400
 8007e3c:	40014000 	.word	0x40014000
 8007e40:	40014400 	.word	0x40014400
 8007e44:	40014800 	.word	0x40014800

08007e48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4b21      	ldr	r3, [pc, #132]	; (8007ef8 <TIM_OC5_SetConfig+0xb0>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a18      	ldr	r2, [pc, #96]	; (8007efc <TIM_OC5_SetConfig+0xb4>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00f      	beq.n	8007ebe <TIM_OC5_SetConfig+0x76>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a17      	ldr	r2, [pc, #92]	; (8007f00 <TIM_OC5_SetConfig+0xb8>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00b      	beq.n	8007ebe <TIM_OC5_SetConfig+0x76>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a16      	ldr	r2, [pc, #88]	; (8007f04 <TIM_OC5_SetConfig+0xbc>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d007      	beq.n	8007ebe <TIM_OC5_SetConfig+0x76>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a15      	ldr	r2, [pc, #84]	; (8007f08 <TIM_OC5_SetConfig+0xc0>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d003      	beq.n	8007ebe <TIM_OC5_SetConfig+0x76>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a14      	ldr	r2, [pc, #80]	; (8007f0c <TIM_OC5_SetConfig+0xc4>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d109      	bne.n	8007ed2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	021b      	lsls	r3, r3, #8
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	621a      	str	r2, [r3, #32]
}
 8007eec:	bf00      	nop
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	fffeff8f 	.word	0xfffeff8f
 8007efc:	40010000 	.word	0x40010000
 8007f00:	40010400 	.word	0x40010400
 8007f04:	40014000 	.word	0x40014000
 8007f08:	40014400 	.word	0x40014400
 8007f0c:	40014800 	.word	0x40014800

08007f10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4b22      	ldr	r3, [pc, #136]	; (8007fc4 <TIM_OC6_SetConfig+0xb4>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	021b      	lsls	r3, r3, #8
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	051b      	lsls	r3, r3, #20
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a19      	ldr	r2, [pc, #100]	; (8007fc8 <TIM_OC6_SetConfig+0xb8>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d00f      	beq.n	8007f88 <TIM_OC6_SetConfig+0x78>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a18      	ldr	r2, [pc, #96]	; (8007fcc <TIM_OC6_SetConfig+0xbc>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d00b      	beq.n	8007f88 <TIM_OC6_SetConfig+0x78>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a17      	ldr	r2, [pc, #92]	; (8007fd0 <TIM_OC6_SetConfig+0xc0>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d007      	beq.n	8007f88 <TIM_OC6_SetConfig+0x78>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a16      	ldr	r2, [pc, #88]	; (8007fd4 <TIM_OC6_SetConfig+0xc4>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d003      	beq.n	8007f88 <TIM_OC6_SetConfig+0x78>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a15      	ldr	r2, [pc, #84]	; (8007fd8 <TIM_OC6_SetConfig+0xc8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d109      	bne.n	8007f9c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	029b      	lsls	r3, r3, #10
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	621a      	str	r2, [r3, #32]
}
 8007fb6:	bf00      	nop
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	feff8fff 	.word	0xfeff8fff
 8007fc8:	40010000 	.word	0x40010000
 8007fcc:	40010400 	.word	0x40010400
 8007fd0:	40014000 	.word	0x40014000
 8007fd4:	40014400 	.word	0x40014400
 8007fd8:	40014800 	.word	0x40014800

08007fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6a1b      	ldr	r3, [r3, #32]
 8007fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	f023 0201 	bic.w	r2, r3, #1
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	4313      	orrs	r3, r2
 8008010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f023 030a 	bic.w	r3, r3, #10
 8008018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	4313      	orrs	r3, r2
 8008020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	621a      	str	r2, [r3, #32]
}
 800802e:	bf00      	nop
 8008030:	371c      	adds	r7, #28
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800803a:	b480      	push	{r7}
 800803c:	b087      	sub	sp, #28
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	f023 0210 	bic.w	r2, r3, #16
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008064:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	031b      	lsls	r3, r3, #12
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	4313      	orrs	r3, r2
 800806e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008076:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	621a      	str	r2, [r3, #32]
}
 800808e:	bf00      	nop
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
	...

0800809c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <TIM_ITRx_SetConfig+0x38>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	f043 0307 	orr.w	r3, r3, #7
 80080be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	609a      	str	r2, [r3, #8]
}
 80080c6:	bf00      	nop
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	ffcfff8f 	.word	0xffcfff8f

080080d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	021a      	lsls	r2, r3, #8
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	431a      	orrs	r2, r3
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	4313      	orrs	r3, r2
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	609a      	str	r2, [r3, #8]
}
 800810c:	bf00      	nop
 800810e:	371c      	adds	r7, #28
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f003 031f 	and.w	r3, r3, #31
 800812a:	2201      	movs	r2, #1
 800812c:	fa02 f303 	lsl.w	r3, r2, r3
 8008130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6a1a      	ldr	r2, [r3, #32]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	43db      	mvns	r3, r3
 800813a:	401a      	ands	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6a1a      	ldr	r2, [r3, #32]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f003 031f 	and.w	r3, r3, #31
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	fa01 f303 	lsl.w	r3, r1, r3
 8008150:	431a      	orrs	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	621a      	str	r2, [r3, #32]
}
 8008156:	bf00      	nop
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
	...

08008164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008178:	2302      	movs	r3, #2
 800817a:	e06d      	b.n	8008258 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2202      	movs	r2, #2
 8008188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a30      	ldr	r2, [pc, #192]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d004      	beq.n	80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a2f      	ldr	r2, [pc, #188]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d108      	bne.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a20      	ldr	r2, [pc, #128]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d022      	beq.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ee:	d01d      	beq.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1d      	ldr	r2, [pc, #116]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d018      	beq.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a1c      	ldr	r2, [pc, #112]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d013      	beq.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a1a      	ldr	r2, [pc, #104]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00e      	beq.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a15      	ldr	r2, [pc, #84]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d009      	beq.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a16      	ldr	r2, [pc, #88]	; (8008278 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d004      	beq.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a15      	ldr	r2, [pc, #84]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d10c      	bne.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008232:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	4313      	orrs	r3, r2
 800823c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	40010000 	.word	0x40010000
 8008268:	40010400 	.word	0x40010400
 800826c:	40000400 	.word	0x40000400
 8008270:	40000800 	.word	0x40000800
 8008274:	40000c00 	.word	0x40000c00
 8008278:	40001800 	.word	0x40001800
 800827c:	40014000 	.word	0x40014000

08008280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e042      	b.n	8008318 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008298:	2b00      	cmp	r3, #0
 800829a:	d106      	bne.n	80082aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7f9 faef 	bl	8001888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2224      	movs	r2, #36	; 0x24
 80082ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f022 0201 	bic.w	r2, r2, #1
 80082c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f8c2 	bl	800844c <UART_SetConfig>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e022      	b.n	8008318 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 ff22 	bl	8009124 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0201 	orr.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 ffa9 	bl	8009268 <UART_CheckIdleState>
 8008316:	4603      	mov	r3, r0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	; 0x28
 8008324:	af02      	add	r7, sp, #8
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	4613      	mov	r3, r2
 800832e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008336:	2b20      	cmp	r3, #32
 8008338:	f040 8083 	bne.w	8008442 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <HAL_UART_Transmit+0x28>
 8008342:	88fb      	ldrh	r3, [r7, #6]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e07b      	b.n	8008444 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008352:	2b01      	cmp	r3, #1
 8008354:	d101      	bne.n	800835a <HAL_UART_Transmit+0x3a>
 8008356:	2302      	movs	r3, #2
 8008358:	e074      	b.n	8008444 <HAL_UART_Transmit+0x124>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2221      	movs	r2, #33	; 0x21
 800836e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008372:	f7f9 fd17 	bl	8001da4 <HAL_GetTick>
 8008376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	88fa      	ldrh	r2, [r7, #6]
 800837c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	88fa      	ldrh	r2, [r7, #6]
 8008384:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008390:	d108      	bne.n	80083a4 <HAL_UART_Transmit+0x84>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d104      	bne.n	80083a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	61bb      	str	r3, [r7, #24]
 80083a2:	e003      	b.n	80083ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80083b4:	e02c      	b.n	8008410 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2200      	movs	r2, #0
 80083be:	2180      	movs	r1, #128	; 0x80
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 ff9c 	bl	80092fe <UART_WaitOnFlagUntilTimeout>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e039      	b.n	8008444 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10b      	bne.n	80083ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	3302      	adds	r3, #2
 80083ea:	61bb      	str	r3, [r7, #24]
 80083ec:	e007      	b.n	80083fe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	781a      	ldrb	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	3301      	adds	r3, #1
 80083fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008416:	b29b      	uxth	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1cc      	bne.n	80083b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2200      	movs	r2, #0
 8008424:	2140      	movs	r1, #64	; 0x40
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 ff69 	bl	80092fe <UART_WaitOnFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e006      	b.n	8008444 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2220      	movs	r2, #32
 800843a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	e000      	b.n	8008444 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008442:	2302      	movs	r3, #2
  }
}
 8008444:	4618      	mov	r0, r3
 8008446:	3720      	adds	r7, #32
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800844c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008450:	b092      	sub	sp, #72	; 0x48
 8008452:	af00      	add	r7, sp, #0
 8008454:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	431a      	orrs	r2, r3
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	431a      	orrs	r2, r3
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	4313      	orrs	r3, r2
 8008472:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	4bbe      	ldr	r3, [pc, #760]	; (8008774 <UART_SetConfig+0x328>)
 800847c:	4013      	ands	r3, r2
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	6812      	ldr	r2, [r2, #0]
 8008482:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008484:	430b      	orrs	r3, r1
 8008486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4ab3      	ldr	r2, [pc, #716]	; (8008778 <UART_SetConfig+0x32c>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d004      	beq.n	80084b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084b4:	4313      	orrs	r3, r2
 80084b6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	4baf      	ldr	r3, [pc, #700]	; (800877c <UART_SetConfig+0x330>)
 80084c0:	4013      	ands	r3, r2
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	6812      	ldr	r2, [r2, #0]
 80084c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084c8:	430b      	orrs	r3, r1
 80084ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d2:	f023 010f 	bic.w	r1, r3, #15
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4aa6      	ldr	r2, [pc, #664]	; (8008780 <UART_SetConfig+0x334>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d177      	bne.n	80085dc <UART_SetConfig+0x190>
 80084ec:	4ba5      	ldr	r3, [pc, #660]	; (8008784 <UART_SetConfig+0x338>)
 80084ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084f4:	2b28      	cmp	r3, #40	; 0x28
 80084f6:	d86d      	bhi.n	80085d4 <UART_SetConfig+0x188>
 80084f8:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <UART_SetConfig+0xb4>)
 80084fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fe:	bf00      	nop
 8008500:	080085a5 	.word	0x080085a5
 8008504:	080085d5 	.word	0x080085d5
 8008508:	080085d5 	.word	0x080085d5
 800850c:	080085d5 	.word	0x080085d5
 8008510:	080085d5 	.word	0x080085d5
 8008514:	080085d5 	.word	0x080085d5
 8008518:	080085d5 	.word	0x080085d5
 800851c:	080085d5 	.word	0x080085d5
 8008520:	080085ad 	.word	0x080085ad
 8008524:	080085d5 	.word	0x080085d5
 8008528:	080085d5 	.word	0x080085d5
 800852c:	080085d5 	.word	0x080085d5
 8008530:	080085d5 	.word	0x080085d5
 8008534:	080085d5 	.word	0x080085d5
 8008538:	080085d5 	.word	0x080085d5
 800853c:	080085d5 	.word	0x080085d5
 8008540:	080085b5 	.word	0x080085b5
 8008544:	080085d5 	.word	0x080085d5
 8008548:	080085d5 	.word	0x080085d5
 800854c:	080085d5 	.word	0x080085d5
 8008550:	080085d5 	.word	0x080085d5
 8008554:	080085d5 	.word	0x080085d5
 8008558:	080085d5 	.word	0x080085d5
 800855c:	080085d5 	.word	0x080085d5
 8008560:	080085bd 	.word	0x080085bd
 8008564:	080085d5 	.word	0x080085d5
 8008568:	080085d5 	.word	0x080085d5
 800856c:	080085d5 	.word	0x080085d5
 8008570:	080085d5 	.word	0x080085d5
 8008574:	080085d5 	.word	0x080085d5
 8008578:	080085d5 	.word	0x080085d5
 800857c:	080085d5 	.word	0x080085d5
 8008580:	080085c5 	.word	0x080085c5
 8008584:	080085d5 	.word	0x080085d5
 8008588:	080085d5 	.word	0x080085d5
 800858c:	080085d5 	.word	0x080085d5
 8008590:	080085d5 	.word	0x080085d5
 8008594:	080085d5 	.word	0x080085d5
 8008598:	080085d5 	.word	0x080085d5
 800859c:	080085d5 	.word	0x080085d5
 80085a0:	080085cd 	.word	0x080085cd
 80085a4:	2301      	movs	r3, #1
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085aa:	e326      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80085ac:	2304      	movs	r3, #4
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b2:	e322      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80085b4:	2308      	movs	r3, #8
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ba:	e31e      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80085bc:	2310      	movs	r3, #16
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c2:	e31a      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80085c4:	2320      	movs	r3, #32
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ca:	e316      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80085cc:	2340      	movs	r3, #64	; 0x40
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d2:	e312      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80085d4:	2380      	movs	r3, #128	; 0x80
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085da:	e30e      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a69      	ldr	r2, [pc, #420]	; (8008788 <UART_SetConfig+0x33c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d130      	bne.n	8008648 <UART_SetConfig+0x1fc>
 80085e6:	4b67      	ldr	r3, [pc, #412]	; (8008784 <UART_SetConfig+0x338>)
 80085e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ea:	f003 0307 	and.w	r3, r3, #7
 80085ee:	2b05      	cmp	r3, #5
 80085f0:	d826      	bhi.n	8008640 <UART_SetConfig+0x1f4>
 80085f2:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <UART_SetConfig+0x1ac>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008611 	.word	0x08008611
 80085fc:	08008619 	.word	0x08008619
 8008600:	08008621 	.word	0x08008621
 8008604:	08008629 	.word	0x08008629
 8008608:	08008631 	.word	0x08008631
 800860c:	08008639 	.word	0x08008639
 8008610:	2300      	movs	r3, #0
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008616:	e2f0      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008618:	2304      	movs	r3, #4
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861e:	e2ec      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008620:	2308      	movs	r3, #8
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008626:	e2e8      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008628:	2310      	movs	r3, #16
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862e:	e2e4      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008630:	2320      	movs	r3, #32
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008636:	e2e0      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008638:	2340      	movs	r3, #64	; 0x40
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863e:	e2dc      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008640:	2380      	movs	r3, #128	; 0x80
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008646:	e2d8      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a4f      	ldr	r2, [pc, #316]	; (800878c <UART_SetConfig+0x340>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d130      	bne.n	80086b4 <UART_SetConfig+0x268>
 8008652:	4b4c      	ldr	r3, [pc, #304]	; (8008784 <UART_SetConfig+0x338>)
 8008654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	2b05      	cmp	r3, #5
 800865c:	d826      	bhi.n	80086ac <UART_SetConfig+0x260>
 800865e:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <UART_SetConfig+0x218>)
 8008660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008664:	0800867d 	.word	0x0800867d
 8008668:	08008685 	.word	0x08008685
 800866c:	0800868d 	.word	0x0800868d
 8008670:	08008695 	.word	0x08008695
 8008674:	0800869d 	.word	0x0800869d
 8008678:	080086a5 	.word	0x080086a5
 800867c:	2300      	movs	r3, #0
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008682:	e2ba      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008684:	2304      	movs	r3, #4
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868a:	e2b6      	b.n	8008bfa <UART_SetConfig+0x7ae>
 800868c:	2308      	movs	r3, #8
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008692:	e2b2      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008694:	2310      	movs	r3, #16
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869a:	e2ae      	b.n	8008bfa <UART_SetConfig+0x7ae>
 800869c:	2320      	movs	r3, #32
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a2:	e2aa      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80086a4:	2340      	movs	r3, #64	; 0x40
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086aa:	e2a6      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80086ac:	2380      	movs	r3, #128	; 0x80
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b2:	e2a2      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a35      	ldr	r2, [pc, #212]	; (8008790 <UART_SetConfig+0x344>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d130      	bne.n	8008720 <UART_SetConfig+0x2d4>
 80086be:	4b31      	ldr	r3, [pc, #196]	; (8008784 <UART_SetConfig+0x338>)
 80086c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c2:	f003 0307 	and.w	r3, r3, #7
 80086c6:	2b05      	cmp	r3, #5
 80086c8:	d826      	bhi.n	8008718 <UART_SetConfig+0x2cc>
 80086ca:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <UART_SetConfig+0x284>)
 80086cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d0:	080086e9 	.word	0x080086e9
 80086d4:	080086f1 	.word	0x080086f1
 80086d8:	080086f9 	.word	0x080086f9
 80086dc:	08008701 	.word	0x08008701
 80086e0:	08008709 	.word	0x08008709
 80086e4:	08008711 	.word	0x08008711
 80086e8:	2300      	movs	r3, #0
 80086ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ee:	e284      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80086f0:	2304      	movs	r3, #4
 80086f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f6:	e280      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80086f8:	2308      	movs	r3, #8
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fe:	e27c      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008700:	2310      	movs	r3, #16
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008706:	e278      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008708:	2320      	movs	r3, #32
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870e:	e274      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008710:	2340      	movs	r3, #64	; 0x40
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008716:	e270      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008718:	2380      	movs	r3, #128	; 0x80
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871e:	e26c      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a1b      	ldr	r2, [pc, #108]	; (8008794 <UART_SetConfig+0x348>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d142      	bne.n	80087b0 <UART_SetConfig+0x364>
 800872a:	4b16      	ldr	r3, [pc, #88]	; (8008784 <UART_SetConfig+0x338>)
 800872c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	2b05      	cmp	r3, #5
 8008734:	d838      	bhi.n	80087a8 <UART_SetConfig+0x35c>
 8008736:	a201      	add	r2, pc, #4	; (adr r2, 800873c <UART_SetConfig+0x2f0>)
 8008738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873c:	08008755 	.word	0x08008755
 8008740:	0800875d 	.word	0x0800875d
 8008744:	08008765 	.word	0x08008765
 8008748:	0800876d 	.word	0x0800876d
 800874c:	08008799 	.word	0x08008799
 8008750:	080087a1 	.word	0x080087a1
 8008754:	2300      	movs	r3, #0
 8008756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800875a:	e24e      	b.n	8008bfa <UART_SetConfig+0x7ae>
 800875c:	2304      	movs	r3, #4
 800875e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008762:	e24a      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008764:	2308      	movs	r3, #8
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876a:	e246      	b.n	8008bfa <UART_SetConfig+0x7ae>
 800876c:	2310      	movs	r3, #16
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008772:	e242      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008774:	cfff69f3 	.word	0xcfff69f3
 8008778:	58000c00 	.word	0x58000c00
 800877c:	11fff4ff 	.word	0x11fff4ff
 8008780:	40011000 	.word	0x40011000
 8008784:	58024400 	.word	0x58024400
 8008788:	40004400 	.word	0x40004400
 800878c:	40004800 	.word	0x40004800
 8008790:	40004c00 	.word	0x40004c00
 8008794:	40005000 	.word	0x40005000
 8008798:	2320      	movs	r3, #32
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879e:	e22c      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80087a0:	2340      	movs	r3, #64	; 0x40
 80087a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a6:	e228      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80087a8:	2380      	movs	r3, #128	; 0x80
 80087aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ae:	e224      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4ab1      	ldr	r2, [pc, #708]	; (8008a7c <UART_SetConfig+0x630>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d176      	bne.n	80088a8 <UART_SetConfig+0x45c>
 80087ba:	4bb1      	ldr	r3, [pc, #708]	; (8008a80 <UART_SetConfig+0x634>)
 80087bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087c2:	2b28      	cmp	r3, #40	; 0x28
 80087c4:	d86c      	bhi.n	80088a0 <UART_SetConfig+0x454>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <UART_SetConfig+0x380>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	08008871 	.word	0x08008871
 80087d0:	080088a1 	.word	0x080088a1
 80087d4:	080088a1 	.word	0x080088a1
 80087d8:	080088a1 	.word	0x080088a1
 80087dc:	080088a1 	.word	0x080088a1
 80087e0:	080088a1 	.word	0x080088a1
 80087e4:	080088a1 	.word	0x080088a1
 80087e8:	080088a1 	.word	0x080088a1
 80087ec:	08008879 	.word	0x08008879
 80087f0:	080088a1 	.word	0x080088a1
 80087f4:	080088a1 	.word	0x080088a1
 80087f8:	080088a1 	.word	0x080088a1
 80087fc:	080088a1 	.word	0x080088a1
 8008800:	080088a1 	.word	0x080088a1
 8008804:	080088a1 	.word	0x080088a1
 8008808:	080088a1 	.word	0x080088a1
 800880c:	08008881 	.word	0x08008881
 8008810:	080088a1 	.word	0x080088a1
 8008814:	080088a1 	.word	0x080088a1
 8008818:	080088a1 	.word	0x080088a1
 800881c:	080088a1 	.word	0x080088a1
 8008820:	080088a1 	.word	0x080088a1
 8008824:	080088a1 	.word	0x080088a1
 8008828:	080088a1 	.word	0x080088a1
 800882c:	08008889 	.word	0x08008889
 8008830:	080088a1 	.word	0x080088a1
 8008834:	080088a1 	.word	0x080088a1
 8008838:	080088a1 	.word	0x080088a1
 800883c:	080088a1 	.word	0x080088a1
 8008840:	080088a1 	.word	0x080088a1
 8008844:	080088a1 	.word	0x080088a1
 8008848:	080088a1 	.word	0x080088a1
 800884c:	08008891 	.word	0x08008891
 8008850:	080088a1 	.word	0x080088a1
 8008854:	080088a1 	.word	0x080088a1
 8008858:	080088a1 	.word	0x080088a1
 800885c:	080088a1 	.word	0x080088a1
 8008860:	080088a1 	.word	0x080088a1
 8008864:	080088a1 	.word	0x080088a1
 8008868:	080088a1 	.word	0x080088a1
 800886c:	08008899 	.word	0x08008899
 8008870:	2301      	movs	r3, #1
 8008872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008876:	e1c0      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008878:	2304      	movs	r3, #4
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800887e:	e1bc      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008880:	2308      	movs	r3, #8
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008886:	e1b8      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008888:	2310      	movs	r3, #16
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888e:	e1b4      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008890:	2320      	movs	r3, #32
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008896:	e1b0      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008898:	2340      	movs	r3, #64	; 0x40
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889e:	e1ac      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80088a0:	2380      	movs	r3, #128	; 0x80
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a6:	e1a8      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a75      	ldr	r2, [pc, #468]	; (8008a84 <UART_SetConfig+0x638>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d130      	bne.n	8008914 <UART_SetConfig+0x4c8>
 80088b2:	4b73      	ldr	r3, [pc, #460]	; (8008a80 <UART_SetConfig+0x634>)
 80088b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	2b05      	cmp	r3, #5
 80088bc:	d826      	bhi.n	800890c <UART_SetConfig+0x4c0>
 80088be:	a201      	add	r2, pc, #4	; (adr r2, 80088c4 <UART_SetConfig+0x478>)
 80088c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c4:	080088dd 	.word	0x080088dd
 80088c8:	080088e5 	.word	0x080088e5
 80088cc:	080088ed 	.word	0x080088ed
 80088d0:	080088f5 	.word	0x080088f5
 80088d4:	080088fd 	.word	0x080088fd
 80088d8:	08008905 	.word	0x08008905
 80088dc:	2300      	movs	r3, #0
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088e2:	e18a      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80088e4:	2304      	movs	r3, #4
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ea:	e186      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80088ec:	2308      	movs	r3, #8
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f2:	e182      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80088f4:	2310      	movs	r3, #16
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fa:	e17e      	b.n	8008bfa <UART_SetConfig+0x7ae>
 80088fc:	2320      	movs	r3, #32
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008902:	e17a      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008904:	2340      	movs	r3, #64	; 0x40
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890a:	e176      	b.n	8008bfa <UART_SetConfig+0x7ae>
 800890c:	2380      	movs	r3, #128	; 0x80
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008912:	e172      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a5b      	ldr	r2, [pc, #364]	; (8008a88 <UART_SetConfig+0x63c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d130      	bne.n	8008980 <UART_SetConfig+0x534>
 800891e:	4b58      	ldr	r3, [pc, #352]	; (8008a80 <UART_SetConfig+0x634>)
 8008920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	2b05      	cmp	r3, #5
 8008928:	d826      	bhi.n	8008978 <UART_SetConfig+0x52c>
 800892a:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <UART_SetConfig+0x4e4>)
 800892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008930:	08008949 	.word	0x08008949
 8008934:	08008951 	.word	0x08008951
 8008938:	08008959 	.word	0x08008959
 800893c:	08008961 	.word	0x08008961
 8008940:	08008969 	.word	0x08008969
 8008944:	08008971 	.word	0x08008971
 8008948:	2300      	movs	r3, #0
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894e:	e154      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008950:	2304      	movs	r3, #4
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008956:	e150      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008958:	2308      	movs	r3, #8
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895e:	e14c      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008960:	2310      	movs	r3, #16
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008966:	e148      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008968:	2320      	movs	r3, #32
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896e:	e144      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008970:	2340      	movs	r3, #64	; 0x40
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008976:	e140      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008978:	2380      	movs	r3, #128	; 0x80
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897e:	e13c      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a41      	ldr	r2, [pc, #260]	; (8008a8c <UART_SetConfig+0x640>)
 8008986:	4293      	cmp	r3, r2
 8008988:	f040 8082 	bne.w	8008a90 <UART_SetConfig+0x644>
 800898c:	4b3c      	ldr	r3, [pc, #240]	; (8008a80 <UART_SetConfig+0x634>)
 800898e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008990:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008994:	2b28      	cmp	r3, #40	; 0x28
 8008996:	d86d      	bhi.n	8008a74 <UART_SetConfig+0x628>
 8008998:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <UART_SetConfig+0x554>)
 800899a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899e:	bf00      	nop
 80089a0:	08008a45 	.word	0x08008a45
 80089a4:	08008a75 	.word	0x08008a75
 80089a8:	08008a75 	.word	0x08008a75
 80089ac:	08008a75 	.word	0x08008a75
 80089b0:	08008a75 	.word	0x08008a75
 80089b4:	08008a75 	.word	0x08008a75
 80089b8:	08008a75 	.word	0x08008a75
 80089bc:	08008a75 	.word	0x08008a75
 80089c0:	08008a4d 	.word	0x08008a4d
 80089c4:	08008a75 	.word	0x08008a75
 80089c8:	08008a75 	.word	0x08008a75
 80089cc:	08008a75 	.word	0x08008a75
 80089d0:	08008a75 	.word	0x08008a75
 80089d4:	08008a75 	.word	0x08008a75
 80089d8:	08008a75 	.word	0x08008a75
 80089dc:	08008a75 	.word	0x08008a75
 80089e0:	08008a55 	.word	0x08008a55
 80089e4:	08008a75 	.word	0x08008a75
 80089e8:	08008a75 	.word	0x08008a75
 80089ec:	08008a75 	.word	0x08008a75
 80089f0:	08008a75 	.word	0x08008a75
 80089f4:	08008a75 	.word	0x08008a75
 80089f8:	08008a75 	.word	0x08008a75
 80089fc:	08008a75 	.word	0x08008a75
 8008a00:	08008a5d 	.word	0x08008a5d
 8008a04:	08008a75 	.word	0x08008a75
 8008a08:	08008a75 	.word	0x08008a75
 8008a0c:	08008a75 	.word	0x08008a75
 8008a10:	08008a75 	.word	0x08008a75
 8008a14:	08008a75 	.word	0x08008a75
 8008a18:	08008a75 	.word	0x08008a75
 8008a1c:	08008a75 	.word	0x08008a75
 8008a20:	08008a65 	.word	0x08008a65
 8008a24:	08008a75 	.word	0x08008a75
 8008a28:	08008a75 	.word	0x08008a75
 8008a2c:	08008a75 	.word	0x08008a75
 8008a30:	08008a75 	.word	0x08008a75
 8008a34:	08008a75 	.word	0x08008a75
 8008a38:	08008a75 	.word	0x08008a75
 8008a3c:	08008a75 	.word	0x08008a75
 8008a40:	08008a6d 	.word	0x08008a6d
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4a:	e0d6      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a52:	e0d2      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008a54:	2308      	movs	r3, #8
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5a:	e0ce      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008a5c:	2310      	movs	r3, #16
 8008a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a62:	e0ca      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008a64:	2320      	movs	r3, #32
 8008a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6a:	e0c6      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008a6c:	2340      	movs	r3, #64	; 0x40
 8008a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a72:	e0c2      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008a74:	2380      	movs	r3, #128	; 0x80
 8008a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7a:	e0be      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008a7c:	40011400 	.word	0x40011400
 8008a80:	58024400 	.word	0x58024400
 8008a84:	40007800 	.word	0x40007800
 8008a88:	40007c00 	.word	0x40007c00
 8008a8c:	40011800 	.word	0x40011800
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4aad      	ldr	r2, [pc, #692]	; (8008d4c <UART_SetConfig+0x900>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d176      	bne.n	8008b88 <UART_SetConfig+0x73c>
 8008a9a:	4bad      	ldr	r3, [pc, #692]	; (8008d50 <UART_SetConfig+0x904>)
 8008a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aa2:	2b28      	cmp	r3, #40	; 0x28
 8008aa4:	d86c      	bhi.n	8008b80 <UART_SetConfig+0x734>
 8008aa6:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <UART_SetConfig+0x660>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008b51 	.word	0x08008b51
 8008ab0:	08008b81 	.word	0x08008b81
 8008ab4:	08008b81 	.word	0x08008b81
 8008ab8:	08008b81 	.word	0x08008b81
 8008abc:	08008b81 	.word	0x08008b81
 8008ac0:	08008b81 	.word	0x08008b81
 8008ac4:	08008b81 	.word	0x08008b81
 8008ac8:	08008b81 	.word	0x08008b81
 8008acc:	08008b59 	.word	0x08008b59
 8008ad0:	08008b81 	.word	0x08008b81
 8008ad4:	08008b81 	.word	0x08008b81
 8008ad8:	08008b81 	.word	0x08008b81
 8008adc:	08008b81 	.word	0x08008b81
 8008ae0:	08008b81 	.word	0x08008b81
 8008ae4:	08008b81 	.word	0x08008b81
 8008ae8:	08008b81 	.word	0x08008b81
 8008aec:	08008b61 	.word	0x08008b61
 8008af0:	08008b81 	.word	0x08008b81
 8008af4:	08008b81 	.word	0x08008b81
 8008af8:	08008b81 	.word	0x08008b81
 8008afc:	08008b81 	.word	0x08008b81
 8008b00:	08008b81 	.word	0x08008b81
 8008b04:	08008b81 	.word	0x08008b81
 8008b08:	08008b81 	.word	0x08008b81
 8008b0c:	08008b69 	.word	0x08008b69
 8008b10:	08008b81 	.word	0x08008b81
 8008b14:	08008b81 	.word	0x08008b81
 8008b18:	08008b81 	.word	0x08008b81
 8008b1c:	08008b81 	.word	0x08008b81
 8008b20:	08008b81 	.word	0x08008b81
 8008b24:	08008b81 	.word	0x08008b81
 8008b28:	08008b81 	.word	0x08008b81
 8008b2c:	08008b71 	.word	0x08008b71
 8008b30:	08008b81 	.word	0x08008b81
 8008b34:	08008b81 	.word	0x08008b81
 8008b38:	08008b81 	.word	0x08008b81
 8008b3c:	08008b81 	.word	0x08008b81
 8008b40:	08008b81 	.word	0x08008b81
 8008b44:	08008b81 	.word	0x08008b81
 8008b48:	08008b81 	.word	0x08008b81
 8008b4c:	08008b79 	.word	0x08008b79
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b56:	e050      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008b58:	2304      	movs	r3, #4
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5e:	e04c      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008b60:	2308      	movs	r3, #8
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b66:	e048      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008b68:	2310      	movs	r3, #16
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6e:	e044      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008b70:	2320      	movs	r3, #32
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b76:	e040      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008b78:	2340      	movs	r3, #64	; 0x40
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7e:	e03c      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008b80:	2380      	movs	r3, #128	; 0x80
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b86:	e038      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a71      	ldr	r2, [pc, #452]	; (8008d54 <UART_SetConfig+0x908>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d130      	bne.n	8008bf4 <UART_SetConfig+0x7a8>
 8008b92:	4b6f      	ldr	r3, [pc, #444]	; (8008d50 <UART_SetConfig+0x904>)
 8008b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b96:	f003 0307 	and.w	r3, r3, #7
 8008b9a:	2b05      	cmp	r3, #5
 8008b9c:	d826      	bhi.n	8008bec <UART_SetConfig+0x7a0>
 8008b9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <UART_SetConfig+0x758>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bbd 	.word	0x08008bbd
 8008ba8:	08008bc5 	.word	0x08008bc5
 8008bac:	08008bcd 	.word	0x08008bcd
 8008bb0:	08008bd5 	.word	0x08008bd5
 8008bb4:	08008bdd 	.word	0x08008bdd
 8008bb8:	08008be5 	.word	0x08008be5
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc2:	e01a      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008bc4:	2304      	movs	r3, #4
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bca:	e016      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008bcc:	2308      	movs	r3, #8
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd2:	e012      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008bd4:	2310      	movs	r3, #16
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e00e      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008bdc:	2320      	movs	r3, #32
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e00a      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008be4:	2340      	movs	r3, #64	; 0x40
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e006      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008bec:	2380      	movs	r3, #128	; 0x80
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf2:	e002      	b.n	8008bfa <UART_SetConfig+0x7ae>
 8008bf4:	2380      	movs	r3, #128	; 0x80
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a55      	ldr	r2, [pc, #340]	; (8008d54 <UART_SetConfig+0x908>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	f040 80f8 	bne.w	8008df6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c0a:	2b20      	cmp	r3, #32
 8008c0c:	dc46      	bgt.n	8008c9c <UART_SetConfig+0x850>
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	db75      	blt.n	8008cfe <UART_SetConfig+0x8b2>
 8008c12:	3b02      	subs	r3, #2
 8008c14:	2b1e      	cmp	r3, #30
 8008c16:	d872      	bhi.n	8008cfe <UART_SetConfig+0x8b2>
 8008c18:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <UART_SetConfig+0x7d4>)
 8008c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1e:	bf00      	nop
 8008c20:	08008ca3 	.word	0x08008ca3
 8008c24:	08008cff 	.word	0x08008cff
 8008c28:	08008cab 	.word	0x08008cab
 8008c2c:	08008cff 	.word	0x08008cff
 8008c30:	08008cff 	.word	0x08008cff
 8008c34:	08008cff 	.word	0x08008cff
 8008c38:	08008cbb 	.word	0x08008cbb
 8008c3c:	08008cff 	.word	0x08008cff
 8008c40:	08008cff 	.word	0x08008cff
 8008c44:	08008cff 	.word	0x08008cff
 8008c48:	08008cff 	.word	0x08008cff
 8008c4c:	08008cff 	.word	0x08008cff
 8008c50:	08008cff 	.word	0x08008cff
 8008c54:	08008cff 	.word	0x08008cff
 8008c58:	08008ccb 	.word	0x08008ccb
 8008c5c:	08008cff 	.word	0x08008cff
 8008c60:	08008cff 	.word	0x08008cff
 8008c64:	08008cff 	.word	0x08008cff
 8008c68:	08008cff 	.word	0x08008cff
 8008c6c:	08008cff 	.word	0x08008cff
 8008c70:	08008cff 	.word	0x08008cff
 8008c74:	08008cff 	.word	0x08008cff
 8008c78:	08008cff 	.word	0x08008cff
 8008c7c:	08008cff 	.word	0x08008cff
 8008c80:	08008cff 	.word	0x08008cff
 8008c84:	08008cff 	.word	0x08008cff
 8008c88:	08008cff 	.word	0x08008cff
 8008c8c:	08008cff 	.word	0x08008cff
 8008c90:	08008cff 	.word	0x08008cff
 8008c94:	08008cff 	.word	0x08008cff
 8008c98:	08008cf1 	.word	0x08008cf1
 8008c9c:	2b40      	cmp	r3, #64	; 0x40
 8008c9e:	d02a      	beq.n	8008cf6 <UART_SetConfig+0x8aa>
 8008ca0:	e02d      	b.n	8008cfe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008ca2:	f7fc ffbd 	bl	8005c20 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ca6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ca8:	e02f      	b.n	8008d0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fc ffcc 	bl	8005c4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cb8:	e027      	b.n	8008d0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cba:	f107 0318 	add.w	r3, r7, #24
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fd f918 	bl	8005ef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cc8:	e01f      	b.n	8008d0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cca:	4b21      	ldr	r3, [pc, #132]	; (8008d50 <UART_SetConfig+0x904>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0320 	and.w	r3, r3, #32
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d009      	beq.n	8008cea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cd6:	4b1e      	ldr	r3, [pc, #120]	; (8008d50 <UART_SetConfig+0x904>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	08db      	lsrs	r3, r3, #3
 8008cdc:	f003 0303 	and.w	r3, r3, #3
 8008ce0:	4a1d      	ldr	r2, [pc, #116]	; (8008d58 <UART_SetConfig+0x90c>)
 8008ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ce8:	e00f      	b.n	8008d0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008cea:	4b1b      	ldr	r3, [pc, #108]	; (8008d58 <UART_SetConfig+0x90c>)
 8008cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cee:	e00c      	b.n	8008d0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cf0:	4b1a      	ldr	r3, [pc, #104]	; (8008d5c <UART_SetConfig+0x910>)
 8008cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cf4:	e009      	b.n	8008d0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cfc:	e005      	b.n	8008d0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 81ee 	beq.w	80090ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	4a12      	ldr	r2, [pc, #72]	; (8008d60 <UART_SetConfig+0x914>)
 8008d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d24:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	005b      	lsls	r3, r3, #1
 8008d2e:	4413      	add	r3, r2
 8008d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d305      	bcc.n	8008d42 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d910      	bls.n	8008d64 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d48:	e1d1      	b.n	80090ee <UART_SetConfig+0xca2>
 8008d4a:	bf00      	nop
 8008d4c:	40011c00 	.word	0x40011c00
 8008d50:	58024400 	.word	0x58024400
 8008d54:	58000c00 	.word	0x58000c00
 8008d58:	03d09000 	.word	0x03d09000
 8008d5c:	003d0900 	.word	0x003d0900
 8008d60:	0800a3e0 	.word	0x0800a3e0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d66:	2200      	movs	r2, #0
 8008d68:	60bb      	str	r3, [r7, #8]
 8008d6a:	60fa      	str	r2, [r7, #12]
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	4ac0      	ldr	r2, [pc, #768]	; (8009074 <UART_SetConfig+0xc28>)
 8008d72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	2200      	movs	r2, #0
 8008d7a:	603b      	str	r3, [r7, #0]
 8008d7c:	607a      	str	r2, [r7, #4]
 8008d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d86:	f7f7 fb0b 	bl	80003a0 <__aeabi_uldivmod>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4610      	mov	r0, r2
 8008d90:	4619      	mov	r1, r3
 8008d92:	f04f 0200 	mov.w	r2, #0
 8008d96:	f04f 0300 	mov.w	r3, #0
 8008d9a:	020b      	lsls	r3, r1, #8
 8008d9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008da0:	0202      	lsls	r2, r0, #8
 8008da2:	6979      	ldr	r1, [r7, #20]
 8008da4:	6849      	ldr	r1, [r1, #4]
 8008da6:	0849      	lsrs	r1, r1, #1
 8008da8:	2000      	movs	r0, #0
 8008daa:	460c      	mov	r4, r1
 8008dac:	4605      	mov	r5, r0
 8008dae:	eb12 0804 	adds.w	r8, r2, r4
 8008db2:	eb43 0905 	adc.w	r9, r3, r5
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	469a      	mov	sl, r3
 8008dbe:	4693      	mov	fp, r2
 8008dc0:	4652      	mov	r2, sl
 8008dc2:	465b      	mov	r3, fp
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	f7f7 faea 	bl	80003a0 <__aeabi_uldivmod>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dda:	d308      	bcc.n	8008dee <UART_SetConfig+0x9a2>
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008de2:	d204      	bcs.n	8008dee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dea:	60da      	str	r2, [r3, #12]
 8008dec:	e17f      	b.n	80090ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008df4:	e17b      	b.n	80090ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dfe:	f040 80bd 	bne.w	8008f7c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008e02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	dc48      	bgt.n	8008e9c <UART_SetConfig+0xa50>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	db7b      	blt.n	8008f06 <UART_SetConfig+0xaba>
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	d879      	bhi.n	8008f06 <UART_SetConfig+0xaba>
 8008e12:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <UART_SetConfig+0x9cc>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008ea3 	.word	0x08008ea3
 8008e1c:	08008eab 	.word	0x08008eab
 8008e20:	08008f07 	.word	0x08008f07
 8008e24:	08008f07 	.word	0x08008f07
 8008e28:	08008eb3 	.word	0x08008eb3
 8008e2c:	08008f07 	.word	0x08008f07
 8008e30:	08008f07 	.word	0x08008f07
 8008e34:	08008f07 	.word	0x08008f07
 8008e38:	08008ec3 	.word	0x08008ec3
 8008e3c:	08008f07 	.word	0x08008f07
 8008e40:	08008f07 	.word	0x08008f07
 8008e44:	08008f07 	.word	0x08008f07
 8008e48:	08008f07 	.word	0x08008f07
 8008e4c:	08008f07 	.word	0x08008f07
 8008e50:	08008f07 	.word	0x08008f07
 8008e54:	08008f07 	.word	0x08008f07
 8008e58:	08008ed3 	.word	0x08008ed3
 8008e5c:	08008f07 	.word	0x08008f07
 8008e60:	08008f07 	.word	0x08008f07
 8008e64:	08008f07 	.word	0x08008f07
 8008e68:	08008f07 	.word	0x08008f07
 8008e6c:	08008f07 	.word	0x08008f07
 8008e70:	08008f07 	.word	0x08008f07
 8008e74:	08008f07 	.word	0x08008f07
 8008e78:	08008f07 	.word	0x08008f07
 8008e7c:	08008f07 	.word	0x08008f07
 8008e80:	08008f07 	.word	0x08008f07
 8008e84:	08008f07 	.word	0x08008f07
 8008e88:	08008f07 	.word	0x08008f07
 8008e8c:	08008f07 	.word	0x08008f07
 8008e90:	08008f07 	.word	0x08008f07
 8008e94:	08008f07 	.word	0x08008f07
 8008e98:	08008ef9 	.word	0x08008ef9
 8008e9c:	2b40      	cmp	r3, #64	; 0x40
 8008e9e:	d02e      	beq.n	8008efe <UART_SetConfig+0xab2>
 8008ea0:	e031      	b.n	8008f06 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ea2:	f7fb ff85 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 8008ea6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ea8:	e033      	b.n	8008f12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008eaa:	f7fb ff97 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 8008eae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008eb0:	e02f      	b.n	8008f12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fc fec8 	bl	8005c4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ec0:	e027      	b.n	8008f12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ec2:	f107 0318 	add.w	r3, r7, #24
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fd f814 	bl	8005ef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ed0:	e01f      	b.n	8008f12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ed2:	4b69      	ldr	r3, [pc, #420]	; (8009078 <UART_SetConfig+0xc2c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0320 	and.w	r3, r3, #32
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ede:	4b66      	ldr	r3, [pc, #408]	; (8009078 <UART_SetConfig+0xc2c>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	08db      	lsrs	r3, r3, #3
 8008ee4:	f003 0303 	and.w	r3, r3, #3
 8008ee8:	4a64      	ldr	r2, [pc, #400]	; (800907c <UART_SetConfig+0xc30>)
 8008eea:	fa22 f303 	lsr.w	r3, r2, r3
 8008eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ef0:	e00f      	b.n	8008f12 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008ef2:	4b62      	ldr	r3, [pc, #392]	; (800907c <UART_SetConfig+0xc30>)
 8008ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ef6:	e00c      	b.n	8008f12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ef8:	4b61      	ldr	r3, [pc, #388]	; (8009080 <UART_SetConfig+0xc34>)
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008efc:	e009      	b.n	8008f12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f04:	e005      	b.n	8008f12 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008f06:	2300      	movs	r3, #0
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 80ea 	beq.w	80090ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	4a55      	ldr	r2, [pc, #340]	; (8009074 <UART_SetConfig+0xc28>)
 8008f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f2c:	005a      	lsls	r2, r3, #1
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	085b      	lsrs	r3, r3, #1
 8008f34:	441a      	add	r2, r3
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f42:	2b0f      	cmp	r3, #15
 8008f44:	d916      	bls.n	8008f74 <UART_SetConfig+0xb28>
 8008f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f4c:	d212      	bcs.n	8008f74 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	f023 030f 	bic.w	r3, r3, #15
 8008f56:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5a:	085b      	lsrs	r3, r3, #1
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f66:	4313      	orrs	r3, r2
 8008f68:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008f70:	60da      	str	r2, [r3, #12]
 8008f72:	e0bc      	b.n	80090ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f7a:	e0b8      	b.n	80090ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f80:	2b20      	cmp	r3, #32
 8008f82:	dc4b      	bgt.n	800901c <UART_SetConfig+0xbd0>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f2c0 8087 	blt.w	8009098 <UART_SetConfig+0xc4c>
 8008f8a:	2b20      	cmp	r3, #32
 8008f8c:	f200 8084 	bhi.w	8009098 <UART_SetConfig+0xc4c>
 8008f90:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <UART_SetConfig+0xb4c>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	08009023 	.word	0x08009023
 8008f9c:	0800902b 	.word	0x0800902b
 8008fa0:	08009099 	.word	0x08009099
 8008fa4:	08009099 	.word	0x08009099
 8008fa8:	08009033 	.word	0x08009033
 8008fac:	08009099 	.word	0x08009099
 8008fb0:	08009099 	.word	0x08009099
 8008fb4:	08009099 	.word	0x08009099
 8008fb8:	08009043 	.word	0x08009043
 8008fbc:	08009099 	.word	0x08009099
 8008fc0:	08009099 	.word	0x08009099
 8008fc4:	08009099 	.word	0x08009099
 8008fc8:	08009099 	.word	0x08009099
 8008fcc:	08009099 	.word	0x08009099
 8008fd0:	08009099 	.word	0x08009099
 8008fd4:	08009099 	.word	0x08009099
 8008fd8:	08009053 	.word	0x08009053
 8008fdc:	08009099 	.word	0x08009099
 8008fe0:	08009099 	.word	0x08009099
 8008fe4:	08009099 	.word	0x08009099
 8008fe8:	08009099 	.word	0x08009099
 8008fec:	08009099 	.word	0x08009099
 8008ff0:	08009099 	.word	0x08009099
 8008ff4:	08009099 	.word	0x08009099
 8008ff8:	08009099 	.word	0x08009099
 8008ffc:	08009099 	.word	0x08009099
 8009000:	08009099 	.word	0x08009099
 8009004:	08009099 	.word	0x08009099
 8009008:	08009099 	.word	0x08009099
 800900c:	08009099 	.word	0x08009099
 8009010:	08009099 	.word	0x08009099
 8009014:	08009099 	.word	0x08009099
 8009018:	0800908b 	.word	0x0800908b
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d037      	beq.n	8009090 <UART_SetConfig+0xc44>
 8009020:	e03a      	b.n	8009098 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009022:	f7fb fec5 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 8009026:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009028:	e03c      	b.n	80090a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800902a:	f7fb fed7 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 800902e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009030:	e038      	b.n	80090a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009036:	4618      	mov	r0, r3
 8009038:	f7fc fe08 	bl	8005c4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009040:	e030      	b.n	80090a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009042:	f107 0318 	add.w	r3, r7, #24
 8009046:	4618      	mov	r0, r3
 8009048:	f7fc ff54 	bl	8005ef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009050:	e028      	b.n	80090a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009052:	4b09      	ldr	r3, [pc, #36]	; (8009078 <UART_SetConfig+0xc2c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b00      	cmp	r3, #0
 800905c:	d012      	beq.n	8009084 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800905e:	4b06      	ldr	r3, [pc, #24]	; (8009078 <UART_SetConfig+0xc2c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	08db      	lsrs	r3, r3, #3
 8009064:	f003 0303 	and.w	r3, r3, #3
 8009068:	4a04      	ldr	r2, [pc, #16]	; (800907c <UART_SetConfig+0xc30>)
 800906a:	fa22 f303 	lsr.w	r3, r2, r3
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009070:	e018      	b.n	80090a4 <UART_SetConfig+0xc58>
 8009072:	bf00      	nop
 8009074:	0800a3e0 	.word	0x0800a3e0
 8009078:	58024400 	.word	0x58024400
 800907c:	03d09000 	.word	0x03d09000
 8009080:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009084:	4b24      	ldr	r3, [pc, #144]	; (8009118 <UART_SetConfig+0xccc>)
 8009086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009088:	e00c      	b.n	80090a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800908a:	4b24      	ldr	r3, [pc, #144]	; (800911c <UART_SetConfig+0xcd0>)
 800908c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800908e:	e009      	b.n	80090a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009094:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009096:	e005      	b.n	80090a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009098:	2300      	movs	r3, #0
 800909a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80090a2:	bf00      	nop
    }

    if (pclk != 0U)
 80090a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d021      	beq.n	80090ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	4a1c      	ldr	r2, [pc, #112]	; (8009120 <UART_SetConfig+0xcd4>)
 80090b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090b4:	461a      	mov	r2, r3
 80090b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	085b      	lsrs	r3, r3, #1
 80090c2:	441a      	add	r2, r3
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090cc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d0:	2b0f      	cmp	r3, #15
 80090d2:	d909      	bls.n	80090e8 <UART_SetConfig+0xc9c>
 80090d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090da:	d205      	bcs.n	80090e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090de:	b29a      	uxth	r2, r3
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60da      	str	r2, [r3, #12]
 80090e6:	e002      	b.n	80090ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	2200      	movs	r2, #0
 8009102:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	2200      	movs	r2, #0
 8009108:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800910a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800910e:	4618      	mov	r0, r3
 8009110:	3748      	adds	r7, #72	; 0x48
 8009112:	46bd      	mov	sp, r7
 8009114:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009118:	03d09000 	.word	0x03d09000
 800911c:	003d0900 	.word	0x003d0900
 8009120:	0800a3e0 	.word	0x0800a3e0

08009124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00a      	beq.n	800914e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	430a      	orrs	r2, r1
 800914c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	430a      	orrs	r2, r1
 800916e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	f003 0304 	and.w	r3, r3, #4
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00a      	beq.n	8009192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009196:	f003 0308 	and.w	r3, r3, #8
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b8:	f003 0310 	and.w	r3, r3, #16
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00a      	beq.n	80091d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091da:	f003 0320 	and.w	r3, r3, #32
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00a      	beq.n	80091f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009200:	2b00      	cmp	r3, #0
 8009202:	d01a      	beq.n	800923a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009222:	d10a      	bne.n	800923a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00a      	beq.n	800925c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	430a      	orrs	r2, r1
 800925a:	605a      	str	r2, [r3, #4]
  }
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af02      	add	r7, sp, #8
 800926e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009278:	f7f8 fd94 	bl	8001da4 <HAL_GetTick>
 800927c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0308 	and.w	r3, r3, #8
 8009288:	2b08      	cmp	r3, #8
 800928a:	d10e      	bne.n	80092aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800928c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f82f 	bl	80092fe <UART_WaitOnFlagUntilTimeout>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e025      	b.n	80092f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b04      	cmp	r3, #4
 80092b6:	d10e      	bne.n	80092d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f819 	bl	80092fe <UART_WaitOnFlagUntilTimeout>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e00f      	b.n	80092f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2220      	movs	r2, #32
 80092da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2220      	movs	r2, #32
 80092e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b09c      	sub	sp, #112	; 0x70
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	603b      	str	r3, [r7, #0]
 800930a:	4613      	mov	r3, r2
 800930c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800930e:	e0a9      	b.n	8009464 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009316:	f000 80a5 	beq.w	8009464 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800931a:	f7f8 fd43 	bl	8001da4 <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009326:	429a      	cmp	r2, r3
 8009328:	d302      	bcc.n	8009330 <UART_WaitOnFlagUntilTimeout+0x32>
 800932a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800932c:	2b00      	cmp	r3, #0
 800932e:	d140      	bne.n	80093b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800933e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009340:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009344:	667b      	str	r3, [r7, #100]	; 0x64
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800934e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009350:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009354:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800935c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e6      	bne.n	8009330 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3308      	adds	r3, #8
 8009368:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009374:	f023 0301 	bic.w	r3, r3, #1
 8009378:	663b      	str	r3, [r7, #96]	; 0x60
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3308      	adds	r3, #8
 8009380:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009382:	64ba      	str	r2, [r7, #72]	; 0x48
 8009384:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009386:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800938a:	e841 2300 	strex	r3, r2, [r1]
 800938e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e5      	bne.n	8009362 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2220      	movs	r2, #32
 800939a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2220      	movs	r2, #32
 80093a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e069      	b.n	8009486 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0304 	and.w	r3, r3, #4
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d051      	beq.n	8009464 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ce:	d149      	bne.n	8009464 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f8:	637b      	str	r3, [r7, #52]	; 0x34
 80093fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009400:	e841 2300 	strex	r3, r2, [r1]
 8009404:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e6      	bne.n	80093da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3308      	adds	r3, #8
 8009412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	e853 3f00 	ldrex	r3, [r3]
 800941a:	613b      	str	r3, [r7, #16]
   return(result);
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	f023 0301 	bic.w	r3, r3, #1
 8009422:	66bb      	str	r3, [r7, #104]	; 0x68
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3308      	adds	r3, #8
 800942a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800942c:	623a      	str	r2, [r7, #32]
 800942e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	69f9      	ldr	r1, [r7, #28]
 8009432:	6a3a      	ldr	r2, [r7, #32]
 8009434:	e841 2300 	strex	r3, r2, [r1]
 8009438:	61bb      	str	r3, [r7, #24]
   return(result);
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e5      	bne.n	800940c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2220      	movs	r2, #32
 8009444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2220      	movs	r2, #32
 800944c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2220      	movs	r2, #32
 8009454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e010      	b.n	8009486 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69da      	ldr	r2, [r3, #28]
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	4013      	ands	r3, r2
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	429a      	cmp	r2, r3
 8009472:	bf0c      	ite	eq
 8009474:	2301      	moveq	r3, #1
 8009476:	2300      	movne	r3, #0
 8009478:	b2db      	uxtb	r3, r3
 800947a:	461a      	mov	r2, r3
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	429a      	cmp	r2, r3
 8009480:	f43f af46 	beq.w	8009310 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3770      	adds	r7, #112	; 0x70
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800948e:	b480      	push	{r7}
 8009490:	b085      	sub	sp, #20
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800949c:	2b01      	cmp	r3, #1
 800949e:	d101      	bne.n	80094a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80094a0:	2302      	movs	r3, #2
 80094a2:	e027      	b.n	80094f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2224      	movs	r2, #36	; 0x24
 80094b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f022 0201 	bic.w	r2, r2, #1
 80094ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80094d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009510:	2b01      	cmp	r3, #1
 8009512:	d101      	bne.n	8009518 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009514:	2302      	movs	r3, #2
 8009516:	e02d      	b.n	8009574 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2224      	movs	r2, #36	; 0x24
 8009524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 0201 	bic.w	r2, r2, #1
 800953e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f84f 	bl	80095f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2220      	movs	r2, #32
 8009566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800958c:	2b01      	cmp	r3, #1
 800958e:	d101      	bne.n	8009594 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009590:	2302      	movs	r3, #2
 8009592:	e02d      	b.n	80095f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2224      	movs	r2, #36	; 0x24
 80095a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0201 	bic.w	r2, r2, #1
 80095ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f811 	bl	80095f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2220      	movs	r2, #32
 80095e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009604:	2b00      	cmp	r3, #0
 8009606:	d108      	bne.n	800961a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009618:	e031      	b.n	800967e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800961a:	2310      	movs	r3, #16
 800961c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800961e:	2310      	movs	r3, #16
 8009620:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	0e5b      	lsrs	r3, r3, #25
 800962a:	b2db      	uxtb	r3, r3
 800962c:	f003 0307 	and.w	r3, r3, #7
 8009630:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	0f5b      	lsrs	r3, r3, #29
 800963a:	b2db      	uxtb	r3, r3
 800963c:	f003 0307 	and.w	r3, r3, #7
 8009640:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009642:	7bbb      	ldrb	r3, [r7, #14]
 8009644:	7b3a      	ldrb	r2, [r7, #12]
 8009646:	4911      	ldr	r1, [pc, #68]	; (800968c <UARTEx_SetNbDataToProcess+0x94>)
 8009648:	5c8a      	ldrb	r2, [r1, r2]
 800964a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800964e:	7b3a      	ldrb	r2, [r7, #12]
 8009650:	490f      	ldr	r1, [pc, #60]	; (8009690 <UARTEx_SetNbDataToProcess+0x98>)
 8009652:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009654:	fb93 f3f2 	sdiv	r3, r3, r2
 8009658:	b29a      	uxth	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	7b7a      	ldrb	r2, [r7, #13]
 8009664:	4909      	ldr	r1, [pc, #36]	; (800968c <UARTEx_SetNbDataToProcess+0x94>)
 8009666:	5c8a      	ldrb	r2, [r1, r2]
 8009668:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800966c:	7b7a      	ldrb	r2, [r7, #13]
 800966e:	4908      	ldr	r1, [pc, #32]	; (8009690 <UARTEx_SetNbDataToProcess+0x98>)
 8009670:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009672:	fb93 f3f2 	sdiv	r3, r3, r2
 8009676:	b29a      	uxth	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800967e:	bf00      	nop
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	0800a3f8 	.word	0x0800a3f8
 8009690:	0800a400 	.word	0x0800a400

08009694 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e016      	b.n	80096d4 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7f8 f9b6 	bl	8001a18 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096b8:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	691a      	ldr	r2, [r3, #16]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	ea42 0103 	orr.w	r1, r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	689a      	ldr	r2, [r3, #8]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	430a      	orrs	r2, r1
 80096d0:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	68d2      	ldr	r2, [r2, #12]
 80096ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <__errno>:
 80096fc:	4b01      	ldr	r3, [pc, #4]	; (8009704 <__errno+0x8>)
 80096fe:	6818      	ldr	r0, [r3, #0]
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	24000014 	.word	0x24000014

08009708 <__libc_init_array>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	4d0d      	ldr	r5, [pc, #52]	; (8009740 <__libc_init_array+0x38>)
 800970c:	4c0d      	ldr	r4, [pc, #52]	; (8009744 <__libc_init_array+0x3c>)
 800970e:	1b64      	subs	r4, r4, r5
 8009710:	10a4      	asrs	r4, r4, #2
 8009712:	2600      	movs	r6, #0
 8009714:	42a6      	cmp	r6, r4
 8009716:	d109      	bne.n	800972c <__libc_init_array+0x24>
 8009718:	4d0b      	ldr	r5, [pc, #44]	; (8009748 <__libc_init_array+0x40>)
 800971a:	4c0c      	ldr	r4, [pc, #48]	; (800974c <__libc_init_array+0x44>)
 800971c:	f000 fcfc 	bl	800a118 <_init>
 8009720:	1b64      	subs	r4, r4, r5
 8009722:	10a4      	asrs	r4, r4, #2
 8009724:	2600      	movs	r6, #0
 8009726:	42a6      	cmp	r6, r4
 8009728:	d105      	bne.n	8009736 <__libc_init_array+0x2e>
 800972a:	bd70      	pop	{r4, r5, r6, pc}
 800972c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009730:	4798      	blx	r3
 8009732:	3601      	adds	r6, #1
 8009734:	e7ee      	b.n	8009714 <__libc_init_array+0xc>
 8009736:	f855 3b04 	ldr.w	r3, [r5], #4
 800973a:	4798      	blx	r3
 800973c:	3601      	adds	r6, #1
 800973e:	e7f2      	b.n	8009726 <__libc_init_array+0x1e>
 8009740:	0800a444 	.word	0x0800a444
 8009744:	0800a444 	.word	0x0800a444
 8009748:	0800a444 	.word	0x0800a444
 800974c:	0800a448 	.word	0x0800a448

08009750 <memcpy>:
 8009750:	440a      	add	r2, r1
 8009752:	4291      	cmp	r1, r2
 8009754:	f100 33ff 	add.w	r3, r0, #4294967295
 8009758:	d100      	bne.n	800975c <memcpy+0xc>
 800975a:	4770      	bx	lr
 800975c:	b510      	push	{r4, lr}
 800975e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009766:	4291      	cmp	r1, r2
 8009768:	d1f9      	bne.n	800975e <memcpy+0xe>
 800976a:	bd10      	pop	{r4, pc}

0800976c <memset>:
 800976c:	4402      	add	r2, r0
 800976e:	4603      	mov	r3, r0
 8009770:	4293      	cmp	r3, r2
 8009772:	d100      	bne.n	8009776 <memset+0xa>
 8009774:	4770      	bx	lr
 8009776:	f803 1b01 	strb.w	r1, [r3], #1
 800977a:	e7f9      	b.n	8009770 <memset+0x4>

0800977c <sniprintf>:
 800977c:	b40c      	push	{r2, r3}
 800977e:	b530      	push	{r4, r5, lr}
 8009780:	4b17      	ldr	r3, [pc, #92]	; (80097e0 <sniprintf+0x64>)
 8009782:	1e0c      	subs	r4, r1, #0
 8009784:	681d      	ldr	r5, [r3, #0]
 8009786:	b09d      	sub	sp, #116	; 0x74
 8009788:	da08      	bge.n	800979c <sniprintf+0x20>
 800978a:	238b      	movs	r3, #139	; 0x8b
 800978c:	602b      	str	r3, [r5, #0]
 800978e:	f04f 30ff 	mov.w	r0, #4294967295
 8009792:	b01d      	add	sp, #116	; 0x74
 8009794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009798:	b002      	add	sp, #8
 800979a:	4770      	bx	lr
 800979c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80097a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80097a4:	bf14      	ite	ne
 80097a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80097aa:	4623      	moveq	r3, r4
 80097ac:	9304      	str	r3, [sp, #16]
 80097ae:	9307      	str	r3, [sp, #28]
 80097b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80097b4:	9002      	str	r0, [sp, #8]
 80097b6:	9006      	str	r0, [sp, #24]
 80097b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80097bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80097be:	ab21      	add	r3, sp, #132	; 0x84
 80097c0:	a902      	add	r1, sp, #8
 80097c2:	4628      	mov	r0, r5
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	f000 f8c3 	bl	8009950 <_svfiprintf_r>
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	bfbc      	itt	lt
 80097ce:	238b      	movlt	r3, #139	; 0x8b
 80097d0:	602b      	strlt	r3, [r5, #0]
 80097d2:	2c00      	cmp	r4, #0
 80097d4:	d0dd      	beq.n	8009792 <sniprintf+0x16>
 80097d6:	9b02      	ldr	r3, [sp, #8]
 80097d8:	2200      	movs	r2, #0
 80097da:	701a      	strb	r2, [r3, #0]
 80097dc:	e7d9      	b.n	8009792 <sniprintf+0x16>
 80097de:	bf00      	nop
 80097e0:	24000014 	.word	0x24000014

080097e4 <siprintf>:
 80097e4:	b40e      	push	{r1, r2, r3}
 80097e6:	b500      	push	{lr}
 80097e8:	b09c      	sub	sp, #112	; 0x70
 80097ea:	ab1d      	add	r3, sp, #116	; 0x74
 80097ec:	9002      	str	r0, [sp, #8]
 80097ee:	9006      	str	r0, [sp, #24]
 80097f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097f4:	4809      	ldr	r0, [pc, #36]	; (800981c <siprintf+0x38>)
 80097f6:	9107      	str	r1, [sp, #28]
 80097f8:	9104      	str	r1, [sp, #16]
 80097fa:	4909      	ldr	r1, [pc, #36]	; (8009820 <siprintf+0x3c>)
 80097fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009800:	9105      	str	r1, [sp, #20]
 8009802:	6800      	ldr	r0, [r0, #0]
 8009804:	9301      	str	r3, [sp, #4]
 8009806:	a902      	add	r1, sp, #8
 8009808:	f000 f8a2 	bl	8009950 <_svfiprintf_r>
 800980c:	9b02      	ldr	r3, [sp, #8]
 800980e:	2200      	movs	r2, #0
 8009810:	701a      	strb	r2, [r3, #0]
 8009812:	b01c      	add	sp, #112	; 0x70
 8009814:	f85d eb04 	ldr.w	lr, [sp], #4
 8009818:	b003      	add	sp, #12
 800981a:	4770      	bx	lr
 800981c:	24000014 	.word	0x24000014
 8009820:	ffff0208 	.word	0xffff0208

08009824 <_vsniprintf_r>:
 8009824:	b530      	push	{r4, r5, lr}
 8009826:	4614      	mov	r4, r2
 8009828:	2c00      	cmp	r4, #0
 800982a:	b09b      	sub	sp, #108	; 0x6c
 800982c:	4605      	mov	r5, r0
 800982e:	461a      	mov	r2, r3
 8009830:	da05      	bge.n	800983e <_vsniprintf_r+0x1a>
 8009832:	238b      	movs	r3, #139	; 0x8b
 8009834:	6003      	str	r3, [r0, #0]
 8009836:	f04f 30ff 	mov.w	r0, #4294967295
 800983a:	b01b      	add	sp, #108	; 0x6c
 800983c:	bd30      	pop	{r4, r5, pc}
 800983e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009842:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009846:	bf14      	ite	ne
 8009848:	f104 33ff 	addne.w	r3, r4, #4294967295
 800984c:	4623      	moveq	r3, r4
 800984e:	9302      	str	r3, [sp, #8]
 8009850:	9305      	str	r3, [sp, #20]
 8009852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009856:	9100      	str	r1, [sp, #0]
 8009858:	9104      	str	r1, [sp, #16]
 800985a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800985e:	4669      	mov	r1, sp
 8009860:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009862:	f000 f875 	bl	8009950 <_svfiprintf_r>
 8009866:	1c43      	adds	r3, r0, #1
 8009868:	bfbc      	itt	lt
 800986a:	238b      	movlt	r3, #139	; 0x8b
 800986c:	602b      	strlt	r3, [r5, #0]
 800986e:	2c00      	cmp	r4, #0
 8009870:	d0e3      	beq.n	800983a <_vsniprintf_r+0x16>
 8009872:	9b00      	ldr	r3, [sp, #0]
 8009874:	2200      	movs	r2, #0
 8009876:	701a      	strb	r2, [r3, #0]
 8009878:	e7df      	b.n	800983a <_vsniprintf_r+0x16>
	...

0800987c <vsniprintf>:
 800987c:	b507      	push	{r0, r1, r2, lr}
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	4613      	mov	r3, r2
 8009882:	460a      	mov	r2, r1
 8009884:	4601      	mov	r1, r0
 8009886:	4803      	ldr	r0, [pc, #12]	; (8009894 <vsniprintf+0x18>)
 8009888:	6800      	ldr	r0, [r0, #0]
 800988a:	f7ff ffcb 	bl	8009824 <_vsniprintf_r>
 800988e:	b003      	add	sp, #12
 8009890:	f85d fb04 	ldr.w	pc, [sp], #4
 8009894:	24000014 	.word	0x24000014

08009898 <__ssputs_r>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	688e      	ldr	r6, [r1, #8]
 800989e:	429e      	cmp	r6, r3
 80098a0:	4682      	mov	sl, r0
 80098a2:	460c      	mov	r4, r1
 80098a4:	4690      	mov	r8, r2
 80098a6:	461f      	mov	r7, r3
 80098a8:	d838      	bhi.n	800991c <__ssputs_r+0x84>
 80098aa:	898a      	ldrh	r2, [r1, #12]
 80098ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098b0:	d032      	beq.n	8009918 <__ssputs_r+0x80>
 80098b2:	6825      	ldr	r5, [r4, #0]
 80098b4:	6909      	ldr	r1, [r1, #16]
 80098b6:	eba5 0901 	sub.w	r9, r5, r1
 80098ba:	6965      	ldr	r5, [r4, #20]
 80098bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098c4:	3301      	adds	r3, #1
 80098c6:	444b      	add	r3, r9
 80098c8:	106d      	asrs	r5, r5, #1
 80098ca:	429d      	cmp	r5, r3
 80098cc:	bf38      	it	cc
 80098ce:	461d      	movcc	r5, r3
 80098d0:	0553      	lsls	r3, r2, #21
 80098d2:	d531      	bpl.n	8009938 <__ssputs_r+0xa0>
 80098d4:	4629      	mov	r1, r5
 80098d6:	f000 fb55 	bl	8009f84 <_malloc_r>
 80098da:	4606      	mov	r6, r0
 80098dc:	b950      	cbnz	r0, 80098f4 <__ssputs_r+0x5c>
 80098de:	230c      	movs	r3, #12
 80098e0:	f8ca 3000 	str.w	r3, [sl]
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ea:	81a3      	strh	r3, [r4, #12]
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295
 80098f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f4:	6921      	ldr	r1, [r4, #16]
 80098f6:	464a      	mov	r2, r9
 80098f8:	f7ff ff2a 	bl	8009750 <memcpy>
 80098fc:	89a3      	ldrh	r3, [r4, #12]
 80098fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009906:	81a3      	strh	r3, [r4, #12]
 8009908:	6126      	str	r6, [r4, #16]
 800990a:	6165      	str	r5, [r4, #20]
 800990c:	444e      	add	r6, r9
 800990e:	eba5 0509 	sub.w	r5, r5, r9
 8009912:	6026      	str	r6, [r4, #0]
 8009914:	60a5      	str	r5, [r4, #8]
 8009916:	463e      	mov	r6, r7
 8009918:	42be      	cmp	r6, r7
 800991a:	d900      	bls.n	800991e <__ssputs_r+0x86>
 800991c:	463e      	mov	r6, r7
 800991e:	6820      	ldr	r0, [r4, #0]
 8009920:	4632      	mov	r2, r6
 8009922:	4641      	mov	r1, r8
 8009924:	f000 faa8 	bl	8009e78 <memmove>
 8009928:	68a3      	ldr	r3, [r4, #8]
 800992a:	1b9b      	subs	r3, r3, r6
 800992c:	60a3      	str	r3, [r4, #8]
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	4433      	add	r3, r6
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	2000      	movs	r0, #0
 8009936:	e7db      	b.n	80098f0 <__ssputs_r+0x58>
 8009938:	462a      	mov	r2, r5
 800993a:	f000 fb97 	bl	800a06c <_realloc_r>
 800993e:	4606      	mov	r6, r0
 8009940:	2800      	cmp	r0, #0
 8009942:	d1e1      	bne.n	8009908 <__ssputs_r+0x70>
 8009944:	6921      	ldr	r1, [r4, #16]
 8009946:	4650      	mov	r0, sl
 8009948:	f000 fab0 	bl	8009eac <_free_r>
 800994c:	e7c7      	b.n	80098de <__ssputs_r+0x46>
	...

08009950 <_svfiprintf_r>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	4698      	mov	r8, r3
 8009956:	898b      	ldrh	r3, [r1, #12]
 8009958:	061b      	lsls	r3, r3, #24
 800995a:	b09d      	sub	sp, #116	; 0x74
 800995c:	4607      	mov	r7, r0
 800995e:	460d      	mov	r5, r1
 8009960:	4614      	mov	r4, r2
 8009962:	d50e      	bpl.n	8009982 <_svfiprintf_r+0x32>
 8009964:	690b      	ldr	r3, [r1, #16]
 8009966:	b963      	cbnz	r3, 8009982 <_svfiprintf_r+0x32>
 8009968:	2140      	movs	r1, #64	; 0x40
 800996a:	f000 fb0b 	bl	8009f84 <_malloc_r>
 800996e:	6028      	str	r0, [r5, #0]
 8009970:	6128      	str	r0, [r5, #16]
 8009972:	b920      	cbnz	r0, 800997e <_svfiprintf_r+0x2e>
 8009974:	230c      	movs	r3, #12
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	e0d1      	b.n	8009b22 <_svfiprintf_r+0x1d2>
 800997e:	2340      	movs	r3, #64	; 0x40
 8009980:	616b      	str	r3, [r5, #20]
 8009982:	2300      	movs	r3, #0
 8009984:	9309      	str	r3, [sp, #36]	; 0x24
 8009986:	2320      	movs	r3, #32
 8009988:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800998c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009990:	2330      	movs	r3, #48	; 0x30
 8009992:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b3c <_svfiprintf_r+0x1ec>
 8009996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800999a:	f04f 0901 	mov.w	r9, #1
 800999e:	4623      	mov	r3, r4
 80099a0:	469a      	mov	sl, r3
 80099a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a6:	b10a      	cbz	r2, 80099ac <_svfiprintf_r+0x5c>
 80099a8:	2a25      	cmp	r2, #37	; 0x25
 80099aa:	d1f9      	bne.n	80099a0 <_svfiprintf_r+0x50>
 80099ac:	ebba 0b04 	subs.w	fp, sl, r4
 80099b0:	d00b      	beq.n	80099ca <_svfiprintf_r+0x7a>
 80099b2:	465b      	mov	r3, fp
 80099b4:	4622      	mov	r2, r4
 80099b6:	4629      	mov	r1, r5
 80099b8:	4638      	mov	r0, r7
 80099ba:	f7ff ff6d 	bl	8009898 <__ssputs_r>
 80099be:	3001      	adds	r0, #1
 80099c0:	f000 80aa 	beq.w	8009b18 <_svfiprintf_r+0x1c8>
 80099c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099c6:	445a      	add	r2, fp
 80099c8:	9209      	str	r2, [sp, #36]	; 0x24
 80099ca:	f89a 3000 	ldrb.w	r3, [sl]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 80a2 	beq.w	8009b18 <_svfiprintf_r+0x1c8>
 80099d4:	2300      	movs	r3, #0
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099de:	f10a 0a01 	add.w	sl, sl, #1
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	9307      	str	r3, [sp, #28]
 80099e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099ea:	931a      	str	r3, [sp, #104]	; 0x68
 80099ec:	4654      	mov	r4, sl
 80099ee:	2205      	movs	r2, #5
 80099f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f4:	4851      	ldr	r0, [pc, #324]	; (8009b3c <_svfiprintf_r+0x1ec>)
 80099f6:	f7f6 fc83 	bl	8000300 <memchr>
 80099fa:	9a04      	ldr	r2, [sp, #16]
 80099fc:	b9d8      	cbnz	r0, 8009a36 <_svfiprintf_r+0xe6>
 80099fe:	06d0      	lsls	r0, r2, #27
 8009a00:	bf44      	itt	mi
 8009a02:	2320      	movmi	r3, #32
 8009a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a08:	0711      	lsls	r1, r2, #28
 8009a0a:	bf44      	itt	mi
 8009a0c:	232b      	movmi	r3, #43	; 0x2b
 8009a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a12:	f89a 3000 	ldrb.w	r3, [sl]
 8009a16:	2b2a      	cmp	r3, #42	; 0x2a
 8009a18:	d015      	beq.n	8009a46 <_svfiprintf_r+0xf6>
 8009a1a:	9a07      	ldr	r2, [sp, #28]
 8009a1c:	4654      	mov	r4, sl
 8009a1e:	2000      	movs	r0, #0
 8009a20:	f04f 0c0a 	mov.w	ip, #10
 8009a24:	4621      	mov	r1, r4
 8009a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a2a:	3b30      	subs	r3, #48	; 0x30
 8009a2c:	2b09      	cmp	r3, #9
 8009a2e:	d94e      	bls.n	8009ace <_svfiprintf_r+0x17e>
 8009a30:	b1b0      	cbz	r0, 8009a60 <_svfiprintf_r+0x110>
 8009a32:	9207      	str	r2, [sp, #28]
 8009a34:	e014      	b.n	8009a60 <_svfiprintf_r+0x110>
 8009a36:	eba0 0308 	sub.w	r3, r0, r8
 8009a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	9304      	str	r3, [sp, #16]
 8009a42:	46a2      	mov	sl, r4
 8009a44:	e7d2      	b.n	80099ec <_svfiprintf_r+0x9c>
 8009a46:	9b03      	ldr	r3, [sp, #12]
 8009a48:	1d19      	adds	r1, r3, #4
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	9103      	str	r1, [sp, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bfbb      	ittet	lt
 8009a52:	425b      	neglt	r3, r3
 8009a54:	f042 0202 	orrlt.w	r2, r2, #2
 8009a58:	9307      	strge	r3, [sp, #28]
 8009a5a:	9307      	strlt	r3, [sp, #28]
 8009a5c:	bfb8      	it	lt
 8009a5e:	9204      	strlt	r2, [sp, #16]
 8009a60:	7823      	ldrb	r3, [r4, #0]
 8009a62:	2b2e      	cmp	r3, #46	; 0x2e
 8009a64:	d10c      	bne.n	8009a80 <_svfiprintf_r+0x130>
 8009a66:	7863      	ldrb	r3, [r4, #1]
 8009a68:	2b2a      	cmp	r3, #42	; 0x2a
 8009a6a:	d135      	bne.n	8009ad8 <_svfiprintf_r+0x188>
 8009a6c:	9b03      	ldr	r3, [sp, #12]
 8009a6e:	1d1a      	adds	r2, r3, #4
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	9203      	str	r2, [sp, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	bfb8      	it	lt
 8009a78:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a7c:	3402      	adds	r4, #2
 8009a7e:	9305      	str	r3, [sp, #20]
 8009a80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b4c <_svfiprintf_r+0x1fc>
 8009a84:	7821      	ldrb	r1, [r4, #0]
 8009a86:	2203      	movs	r2, #3
 8009a88:	4650      	mov	r0, sl
 8009a8a:	f7f6 fc39 	bl	8000300 <memchr>
 8009a8e:	b140      	cbz	r0, 8009aa2 <_svfiprintf_r+0x152>
 8009a90:	2340      	movs	r3, #64	; 0x40
 8009a92:	eba0 000a 	sub.w	r0, r0, sl
 8009a96:	fa03 f000 	lsl.w	r0, r3, r0
 8009a9a:	9b04      	ldr	r3, [sp, #16]
 8009a9c:	4303      	orrs	r3, r0
 8009a9e:	3401      	adds	r4, #1
 8009aa0:	9304      	str	r3, [sp, #16]
 8009aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa6:	4826      	ldr	r0, [pc, #152]	; (8009b40 <_svfiprintf_r+0x1f0>)
 8009aa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aac:	2206      	movs	r2, #6
 8009aae:	f7f6 fc27 	bl	8000300 <memchr>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d038      	beq.n	8009b28 <_svfiprintf_r+0x1d8>
 8009ab6:	4b23      	ldr	r3, [pc, #140]	; (8009b44 <_svfiprintf_r+0x1f4>)
 8009ab8:	bb1b      	cbnz	r3, 8009b02 <_svfiprintf_r+0x1b2>
 8009aba:	9b03      	ldr	r3, [sp, #12]
 8009abc:	3307      	adds	r3, #7
 8009abe:	f023 0307 	bic.w	r3, r3, #7
 8009ac2:	3308      	adds	r3, #8
 8009ac4:	9303      	str	r3, [sp, #12]
 8009ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac8:	4433      	add	r3, r6
 8009aca:	9309      	str	r3, [sp, #36]	; 0x24
 8009acc:	e767      	b.n	800999e <_svfiprintf_r+0x4e>
 8009ace:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	2001      	movs	r0, #1
 8009ad6:	e7a5      	b.n	8009a24 <_svfiprintf_r+0xd4>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	3401      	adds	r4, #1
 8009adc:	9305      	str	r3, [sp, #20]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	f04f 0c0a 	mov.w	ip, #10
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aea:	3a30      	subs	r2, #48	; 0x30
 8009aec:	2a09      	cmp	r2, #9
 8009aee:	d903      	bls.n	8009af8 <_svfiprintf_r+0x1a8>
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0c5      	beq.n	8009a80 <_svfiprintf_r+0x130>
 8009af4:	9105      	str	r1, [sp, #20]
 8009af6:	e7c3      	b.n	8009a80 <_svfiprintf_r+0x130>
 8009af8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009afc:	4604      	mov	r4, r0
 8009afe:	2301      	movs	r3, #1
 8009b00:	e7f0      	b.n	8009ae4 <_svfiprintf_r+0x194>
 8009b02:	ab03      	add	r3, sp, #12
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	462a      	mov	r2, r5
 8009b08:	4b0f      	ldr	r3, [pc, #60]	; (8009b48 <_svfiprintf_r+0x1f8>)
 8009b0a:	a904      	add	r1, sp, #16
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	f3af 8000 	nop.w
 8009b12:	1c42      	adds	r2, r0, #1
 8009b14:	4606      	mov	r6, r0
 8009b16:	d1d6      	bne.n	8009ac6 <_svfiprintf_r+0x176>
 8009b18:	89ab      	ldrh	r3, [r5, #12]
 8009b1a:	065b      	lsls	r3, r3, #25
 8009b1c:	f53f af2c 	bmi.w	8009978 <_svfiprintf_r+0x28>
 8009b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b22:	b01d      	add	sp, #116	; 0x74
 8009b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b28:	ab03      	add	r3, sp, #12
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	462a      	mov	r2, r5
 8009b2e:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <_svfiprintf_r+0x1f8>)
 8009b30:	a904      	add	r1, sp, #16
 8009b32:	4638      	mov	r0, r7
 8009b34:	f000 f87a 	bl	8009c2c <_printf_i>
 8009b38:	e7eb      	b.n	8009b12 <_svfiprintf_r+0x1c2>
 8009b3a:	bf00      	nop
 8009b3c:	0800a408 	.word	0x0800a408
 8009b40:	0800a412 	.word	0x0800a412
 8009b44:	00000000 	.word	0x00000000
 8009b48:	08009899 	.word	0x08009899
 8009b4c:	0800a40e 	.word	0x0800a40e

08009b50 <_printf_common>:
 8009b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	4616      	mov	r6, r2
 8009b56:	4699      	mov	r9, r3
 8009b58:	688a      	ldr	r2, [r1, #8]
 8009b5a:	690b      	ldr	r3, [r1, #16]
 8009b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b60:	4293      	cmp	r3, r2
 8009b62:	bfb8      	it	lt
 8009b64:	4613      	movlt	r3, r2
 8009b66:	6033      	str	r3, [r6, #0]
 8009b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	460c      	mov	r4, r1
 8009b70:	b10a      	cbz	r2, 8009b76 <_printf_common+0x26>
 8009b72:	3301      	adds	r3, #1
 8009b74:	6033      	str	r3, [r6, #0]
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	0699      	lsls	r1, r3, #26
 8009b7a:	bf42      	ittt	mi
 8009b7c:	6833      	ldrmi	r3, [r6, #0]
 8009b7e:	3302      	addmi	r3, #2
 8009b80:	6033      	strmi	r3, [r6, #0]
 8009b82:	6825      	ldr	r5, [r4, #0]
 8009b84:	f015 0506 	ands.w	r5, r5, #6
 8009b88:	d106      	bne.n	8009b98 <_printf_common+0x48>
 8009b8a:	f104 0a19 	add.w	sl, r4, #25
 8009b8e:	68e3      	ldr	r3, [r4, #12]
 8009b90:	6832      	ldr	r2, [r6, #0]
 8009b92:	1a9b      	subs	r3, r3, r2
 8009b94:	42ab      	cmp	r3, r5
 8009b96:	dc26      	bgt.n	8009be6 <_printf_common+0x96>
 8009b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b9c:	1e13      	subs	r3, r2, #0
 8009b9e:	6822      	ldr	r2, [r4, #0]
 8009ba0:	bf18      	it	ne
 8009ba2:	2301      	movne	r3, #1
 8009ba4:	0692      	lsls	r2, r2, #26
 8009ba6:	d42b      	bmi.n	8009c00 <_printf_common+0xb0>
 8009ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bac:	4649      	mov	r1, r9
 8009bae:	4638      	mov	r0, r7
 8009bb0:	47c0      	blx	r8
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	d01e      	beq.n	8009bf4 <_printf_common+0xa4>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	68e5      	ldr	r5, [r4, #12]
 8009bba:	6832      	ldr	r2, [r6, #0]
 8009bbc:	f003 0306 	and.w	r3, r3, #6
 8009bc0:	2b04      	cmp	r3, #4
 8009bc2:	bf08      	it	eq
 8009bc4:	1aad      	subeq	r5, r5, r2
 8009bc6:	68a3      	ldr	r3, [r4, #8]
 8009bc8:	6922      	ldr	r2, [r4, #16]
 8009bca:	bf0c      	ite	eq
 8009bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bd0:	2500      	movne	r5, #0
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	bfc4      	itt	gt
 8009bd6:	1a9b      	subgt	r3, r3, r2
 8009bd8:	18ed      	addgt	r5, r5, r3
 8009bda:	2600      	movs	r6, #0
 8009bdc:	341a      	adds	r4, #26
 8009bde:	42b5      	cmp	r5, r6
 8009be0:	d11a      	bne.n	8009c18 <_printf_common+0xc8>
 8009be2:	2000      	movs	r0, #0
 8009be4:	e008      	b.n	8009bf8 <_printf_common+0xa8>
 8009be6:	2301      	movs	r3, #1
 8009be8:	4652      	mov	r2, sl
 8009bea:	4649      	mov	r1, r9
 8009bec:	4638      	mov	r0, r7
 8009bee:	47c0      	blx	r8
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d103      	bne.n	8009bfc <_printf_common+0xac>
 8009bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfc:	3501      	adds	r5, #1
 8009bfe:	e7c6      	b.n	8009b8e <_printf_common+0x3e>
 8009c00:	18e1      	adds	r1, r4, r3
 8009c02:	1c5a      	adds	r2, r3, #1
 8009c04:	2030      	movs	r0, #48	; 0x30
 8009c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c0a:	4422      	add	r2, r4
 8009c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c14:	3302      	adds	r3, #2
 8009c16:	e7c7      	b.n	8009ba8 <_printf_common+0x58>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	4638      	mov	r0, r7
 8009c20:	47c0      	blx	r8
 8009c22:	3001      	adds	r0, #1
 8009c24:	d0e6      	beq.n	8009bf4 <_printf_common+0xa4>
 8009c26:	3601      	adds	r6, #1
 8009c28:	e7d9      	b.n	8009bde <_printf_common+0x8e>
	...

08009c2c <_printf_i>:
 8009c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c30:	7e0f      	ldrb	r7, [r1, #24]
 8009c32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c34:	2f78      	cmp	r7, #120	; 0x78
 8009c36:	4691      	mov	r9, r2
 8009c38:	4680      	mov	r8, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	469a      	mov	sl, r3
 8009c3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c42:	d807      	bhi.n	8009c54 <_printf_i+0x28>
 8009c44:	2f62      	cmp	r7, #98	; 0x62
 8009c46:	d80a      	bhi.n	8009c5e <_printf_i+0x32>
 8009c48:	2f00      	cmp	r7, #0
 8009c4a:	f000 80d8 	beq.w	8009dfe <_printf_i+0x1d2>
 8009c4e:	2f58      	cmp	r7, #88	; 0x58
 8009c50:	f000 80a3 	beq.w	8009d9a <_printf_i+0x16e>
 8009c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c5c:	e03a      	b.n	8009cd4 <_printf_i+0xa8>
 8009c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c62:	2b15      	cmp	r3, #21
 8009c64:	d8f6      	bhi.n	8009c54 <_printf_i+0x28>
 8009c66:	a101      	add	r1, pc, #4	; (adr r1, 8009c6c <_printf_i+0x40>)
 8009c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c6c:	08009cc5 	.word	0x08009cc5
 8009c70:	08009cd9 	.word	0x08009cd9
 8009c74:	08009c55 	.word	0x08009c55
 8009c78:	08009c55 	.word	0x08009c55
 8009c7c:	08009c55 	.word	0x08009c55
 8009c80:	08009c55 	.word	0x08009c55
 8009c84:	08009cd9 	.word	0x08009cd9
 8009c88:	08009c55 	.word	0x08009c55
 8009c8c:	08009c55 	.word	0x08009c55
 8009c90:	08009c55 	.word	0x08009c55
 8009c94:	08009c55 	.word	0x08009c55
 8009c98:	08009de5 	.word	0x08009de5
 8009c9c:	08009d09 	.word	0x08009d09
 8009ca0:	08009dc7 	.word	0x08009dc7
 8009ca4:	08009c55 	.word	0x08009c55
 8009ca8:	08009c55 	.word	0x08009c55
 8009cac:	08009e07 	.word	0x08009e07
 8009cb0:	08009c55 	.word	0x08009c55
 8009cb4:	08009d09 	.word	0x08009d09
 8009cb8:	08009c55 	.word	0x08009c55
 8009cbc:	08009c55 	.word	0x08009c55
 8009cc0:	08009dcf 	.word	0x08009dcf
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	1d1a      	adds	r2, r3, #4
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	602a      	str	r2, [r5, #0]
 8009ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e0a3      	b.n	8009e20 <_printf_i+0x1f4>
 8009cd8:	6820      	ldr	r0, [r4, #0]
 8009cda:	6829      	ldr	r1, [r5, #0]
 8009cdc:	0606      	lsls	r6, r0, #24
 8009cde:	f101 0304 	add.w	r3, r1, #4
 8009ce2:	d50a      	bpl.n	8009cfa <_printf_i+0xce>
 8009ce4:	680e      	ldr	r6, [r1, #0]
 8009ce6:	602b      	str	r3, [r5, #0]
 8009ce8:	2e00      	cmp	r6, #0
 8009cea:	da03      	bge.n	8009cf4 <_printf_i+0xc8>
 8009cec:	232d      	movs	r3, #45	; 0x2d
 8009cee:	4276      	negs	r6, r6
 8009cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cf4:	485e      	ldr	r0, [pc, #376]	; (8009e70 <_printf_i+0x244>)
 8009cf6:	230a      	movs	r3, #10
 8009cf8:	e019      	b.n	8009d2e <_printf_i+0x102>
 8009cfa:	680e      	ldr	r6, [r1, #0]
 8009cfc:	602b      	str	r3, [r5, #0]
 8009cfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d02:	bf18      	it	ne
 8009d04:	b236      	sxthne	r6, r6
 8009d06:	e7ef      	b.n	8009ce8 <_printf_i+0xbc>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	6820      	ldr	r0, [r4, #0]
 8009d0c:	1d19      	adds	r1, r3, #4
 8009d0e:	6029      	str	r1, [r5, #0]
 8009d10:	0601      	lsls	r1, r0, #24
 8009d12:	d501      	bpl.n	8009d18 <_printf_i+0xec>
 8009d14:	681e      	ldr	r6, [r3, #0]
 8009d16:	e002      	b.n	8009d1e <_printf_i+0xf2>
 8009d18:	0646      	lsls	r6, r0, #25
 8009d1a:	d5fb      	bpl.n	8009d14 <_printf_i+0xe8>
 8009d1c:	881e      	ldrh	r6, [r3, #0]
 8009d1e:	4854      	ldr	r0, [pc, #336]	; (8009e70 <_printf_i+0x244>)
 8009d20:	2f6f      	cmp	r7, #111	; 0x6f
 8009d22:	bf0c      	ite	eq
 8009d24:	2308      	moveq	r3, #8
 8009d26:	230a      	movne	r3, #10
 8009d28:	2100      	movs	r1, #0
 8009d2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d2e:	6865      	ldr	r5, [r4, #4]
 8009d30:	60a5      	str	r5, [r4, #8]
 8009d32:	2d00      	cmp	r5, #0
 8009d34:	bfa2      	ittt	ge
 8009d36:	6821      	ldrge	r1, [r4, #0]
 8009d38:	f021 0104 	bicge.w	r1, r1, #4
 8009d3c:	6021      	strge	r1, [r4, #0]
 8009d3e:	b90e      	cbnz	r6, 8009d44 <_printf_i+0x118>
 8009d40:	2d00      	cmp	r5, #0
 8009d42:	d04d      	beq.n	8009de0 <_printf_i+0x1b4>
 8009d44:	4615      	mov	r5, r2
 8009d46:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d4a:	fb03 6711 	mls	r7, r3, r1, r6
 8009d4e:	5dc7      	ldrb	r7, [r0, r7]
 8009d50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d54:	4637      	mov	r7, r6
 8009d56:	42bb      	cmp	r3, r7
 8009d58:	460e      	mov	r6, r1
 8009d5a:	d9f4      	bls.n	8009d46 <_printf_i+0x11a>
 8009d5c:	2b08      	cmp	r3, #8
 8009d5e:	d10b      	bne.n	8009d78 <_printf_i+0x14c>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	07de      	lsls	r6, r3, #31
 8009d64:	d508      	bpl.n	8009d78 <_printf_i+0x14c>
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	6861      	ldr	r1, [r4, #4]
 8009d6a:	4299      	cmp	r1, r3
 8009d6c:	bfde      	ittt	le
 8009d6e:	2330      	movle	r3, #48	; 0x30
 8009d70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d78:	1b52      	subs	r2, r2, r5
 8009d7a:	6122      	str	r2, [r4, #16]
 8009d7c:	f8cd a000 	str.w	sl, [sp]
 8009d80:	464b      	mov	r3, r9
 8009d82:	aa03      	add	r2, sp, #12
 8009d84:	4621      	mov	r1, r4
 8009d86:	4640      	mov	r0, r8
 8009d88:	f7ff fee2 	bl	8009b50 <_printf_common>
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d14c      	bne.n	8009e2a <_printf_i+0x1fe>
 8009d90:	f04f 30ff 	mov.w	r0, #4294967295
 8009d94:	b004      	add	sp, #16
 8009d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9a:	4835      	ldr	r0, [pc, #212]	; (8009e70 <_printf_i+0x244>)
 8009d9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009da0:	6829      	ldr	r1, [r5, #0]
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009da8:	6029      	str	r1, [r5, #0]
 8009daa:	061d      	lsls	r5, r3, #24
 8009dac:	d514      	bpl.n	8009dd8 <_printf_i+0x1ac>
 8009dae:	07df      	lsls	r7, r3, #31
 8009db0:	bf44      	itt	mi
 8009db2:	f043 0320 	orrmi.w	r3, r3, #32
 8009db6:	6023      	strmi	r3, [r4, #0]
 8009db8:	b91e      	cbnz	r6, 8009dc2 <_printf_i+0x196>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	f023 0320 	bic.w	r3, r3, #32
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	2310      	movs	r3, #16
 8009dc4:	e7b0      	b.n	8009d28 <_printf_i+0xfc>
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	f043 0320 	orr.w	r3, r3, #32
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	2378      	movs	r3, #120	; 0x78
 8009dd0:	4828      	ldr	r0, [pc, #160]	; (8009e74 <_printf_i+0x248>)
 8009dd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dd6:	e7e3      	b.n	8009da0 <_printf_i+0x174>
 8009dd8:	0659      	lsls	r1, r3, #25
 8009dda:	bf48      	it	mi
 8009ddc:	b2b6      	uxthmi	r6, r6
 8009dde:	e7e6      	b.n	8009dae <_printf_i+0x182>
 8009de0:	4615      	mov	r5, r2
 8009de2:	e7bb      	b.n	8009d5c <_printf_i+0x130>
 8009de4:	682b      	ldr	r3, [r5, #0]
 8009de6:	6826      	ldr	r6, [r4, #0]
 8009de8:	6961      	ldr	r1, [r4, #20]
 8009dea:	1d18      	adds	r0, r3, #4
 8009dec:	6028      	str	r0, [r5, #0]
 8009dee:	0635      	lsls	r5, r6, #24
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	d501      	bpl.n	8009df8 <_printf_i+0x1cc>
 8009df4:	6019      	str	r1, [r3, #0]
 8009df6:	e002      	b.n	8009dfe <_printf_i+0x1d2>
 8009df8:	0670      	lsls	r0, r6, #25
 8009dfa:	d5fb      	bpl.n	8009df4 <_printf_i+0x1c8>
 8009dfc:	8019      	strh	r1, [r3, #0]
 8009dfe:	2300      	movs	r3, #0
 8009e00:	6123      	str	r3, [r4, #16]
 8009e02:	4615      	mov	r5, r2
 8009e04:	e7ba      	b.n	8009d7c <_printf_i+0x150>
 8009e06:	682b      	ldr	r3, [r5, #0]
 8009e08:	1d1a      	adds	r2, r3, #4
 8009e0a:	602a      	str	r2, [r5, #0]
 8009e0c:	681d      	ldr	r5, [r3, #0]
 8009e0e:	6862      	ldr	r2, [r4, #4]
 8009e10:	2100      	movs	r1, #0
 8009e12:	4628      	mov	r0, r5
 8009e14:	f7f6 fa74 	bl	8000300 <memchr>
 8009e18:	b108      	cbz	r0, 8009e1e <_printf_i+0x1f2>
 8009e1a:	1b40      	subs	r0, r0, r5
 8009e1c:	6060      	str	r0, [r4, #4]
 8009e1e:	6863      	ldr	r3, [r4, #4]
 8009e20:	6123      	str	r3, [r4, #16]
 8009e22:	2300      	movs	r3, #0
 8009e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e28:	e7a8      	b.n	8009d7c <_printf_i+0x150>
 8009e2a:	6923      	ldr	r3, [r4, #16]
 8009e2c:	462a      	mov	r2, r5
 8009e2e:	4649      	mov	r1, r9
 8009e30:	4640      	mov	r0, r8
 8009e32:	47d0      	blx	sl
 8009e34:	3001      	adds	r0, #1
 8009e36:	d0ab      	beq.n	8009d90 <_printf_i+0x164>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	079b      	lsls	r3, r3, #30
 8009e3c:	d413      	bmi.n	8009e66 <_printf_i+0x23a>
 8009e3e:	68e0      	ldr	r0, [r4, #12]
 8009e40:	9b03      	ldr	r3, [sp, #12]
 8009e42:	4298      	cmp	r0, r3
 8009e44:	bfb8      	it	lt
 8009e46:	4618      	movlt	r0, r3
 8009e48:	e7a4      	b.n	8009d94 <_printf_i+0x168>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4632      	mov	r2, r6
 8009e4e:	4649      	mov	r1, r9
 8009e50:	4640      	mov	r0, r8
 8009e52:	47d0      	blx	sl
 8009e54:	3001      	adds	r0, #1
 8009e56:	d09b      	beq.n	8009d90 <_printf_i+0x164>
 8009e58:	3501      	adds	r5, #1
 8009e5a:	68e3      	ldr	r3, [r4, #12]
 8009e5c:	9903      	ldr	r1, [sp, #12]
 8009e5e:	1a5b      	subs	r3, r3, r1
 8009e60:	42ab      	cmp	r3, r5
 8009e62:	dcf2      	bgt.n	8009e4a <_printf_i+0x21e>
 8009e64:	e7eb      	b.n	8009e3e <_printf_i+0x212>
 8009e66:	2500      	movs	r5, #0
 8009e68:	f104 0619 	add.w	r6, r4, #25
 8009e6c:	e7f5      	b.n	8009e5a <_printf_i+0x22e>
 8009e6e:	bf00      	nop
 8009e70:	0800a419 	.word	0x0800a419
 8009e74:	0800a42a 	.word	0x0800a42a

08009e78 <memmove>:
 8009e78:	4288      	cmp	r0, r1
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	eb01 0402 	add.w	r4, r1, r2
 8009e80:	d902      	bls.n	8009e88 <memmove+0x10>
 8009e82:	4284      	cmp	r4, r0
 8009e84:	4623      	mov	r3, r4
 8009e86:	d807      	bhi.n	8009e98 <memmove+0x20>
 8009e88:	1e43      	subs	r3, r0, #1
 8009e8a:	42a1      	cmp	r1, r4
 8009e8c:	d008      	beq.n	8009ea0 <memmove+0x28>
 8009e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e96:	e7f8      	b.n	8009e8a <memmove+0x12>
 8009e98:	4402      	add	r2, r0
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	428a      	cmp	r2, r1
 8009e9e:	d100      	bne.n	8009ea2 <memmove+0x2a>
 8009ea0:	bd10      	pop	{r4, pc}
 8009ea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eaa:	e7f7      	b.n	8009e9c <memmove+0x24>

08009eac <_free_r>:
 8009eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eae:	2900      	cmp	r1, #0
 8009eb0:	d044      	beq.n	8009f3c <_free_r+0x90>
 8009eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb6:	9001      	str	r0, [sp, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f1a1 0404 	sub.w	r4, r1, #4
 8009ebe:	bfb8      	it	lt
 8009ec0:	18e4      	addlt	r4, r4, r3
 8009ec2:	f000 f913 	bl	800a0ec <__malloc_lock>
 8009ec6:	4a1e      	ldr	r2, [pc, #120]	; (8009f40 <_free_r+0x94>)
 8009ec8:	9801      	ldr	r0, [sp, #4]
 8009eca:	6813      	ldr	r3, [r2, #0]
 8009ecc:	b933      	cbnz	r3, 8009edc <_free_r+0x30>
 8009ece:	6063      	str	r3, [r4, #4]
 8009ed0:	6014      	str	r4, [r2, #0]
 8009ed2:	b003      	add	sp, #12
 8009ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ed8:	f000 b90e 	b.w	800a0f8 <__malloc_unlock>
 8009edc:	42a3      	cmp	r3, r4
 8009ede:	d908      	bls.n	8009ef2 <_free_r+0x46>
 8009ee0:	6825      	ldr	r5, [r4, #0]
 8009ee2:	1961      	adds	r1, r4, r5
 8009ee4:	428b      	cmp	r3, r1
 8009ee6:	bf01      	itttt	eq
 8009ee8:	6819      	ldreq	r1, [r3, #0]
 8009eea:	685b      	ldreq	r3, [r3, #4]
 8009eec:	1949      	addeq	r1, r1, r5
 8009eee:	6021      	streq	r1, [r4, #0]
 8009ef0:	e7ed      	b.n	8009ece <_free_r+0x22>
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	b10b      	cbz	r3, 8009efc <_free_r+0x50>
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	d9fa      	bls.n	8009ef2 <_free_r+0x46>
 8009efc:	6811      	ldr	r1, [r2, #0]
 8009efe:	1855      	adds	r5, r2, r1
 8009f00:	42a5      	cmp	r5, r4
 8009f02:	d10b      	bne.n	8009f1c <_free_r+0x70>
 8009f04:	6824      	ldr	r4, [r4, #0]
 8009f06:	4421      	add	r1, r4
 8009f08:	1854      	adds	r4, r2, r1
 8009f0a:	42a3      	cmp	r3, r4
 8009f0c:	6011      	str	r1, [r2, #0]
 8009f0e:	d1e0      	bne.n	8009ed2 <_free_r+0x26>
 8009f10:	681c      	ldr	r4, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	6053      	str	r3, [r2, #4]
 8009f16:	4421      	add	r1, r4
 8009f18:	6011      	str	r1, [r2, #0]
 8009f1a:	e7da      	b.n	8009ed2 <_free_r+0x26>
 8009f1c:	d902      	bls.n	8009f24 <_free_r+0x78>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	6003      	str	r3, [r0, #0]
 8009f22:	e7d6      	b.n	8009ed2 <_free_r+0x26>
 8009f24:	6825      	ldr	r5, [r4, #0]
 8009f26:	1961      	adds	r1, r4, r5
 8009f28:	428b      	cmp	r3, r1
 8009f2a:	bf04      	itt	eq
 8009f2c:	6819      	ldreq	r1, [r3, #0]
 8009f2e:	685b      	ldreq	r3, [r3, #4]
 8009f30:	6063      	str	r3, [r4, #4]
 8009f32:	bf04      	itt	eq
 8009f34:	1949      	addeq	r1, r1, r5
 8009f36:	6021      	streq	r1, [r4, #0]
 8009f38:	6054      	str	r4, [r2, #4]
 8009f3a:	e7ca      	b.n	8009ed2 <_free_r+0x26>
 8009f3c:	b003      	add	sp, #12
 8009f3e:	bd30      	pop	{r4, r5, pc}
 8009f40:	240003e8 	.word	0x240003e8

08009f44 <sbrk_aligned>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	4e0e      	ldr	r6, [pc, #56]	; (8009f80 <sbrk_aligned+0x3c>)
 8009f48:	460c      	mov	r4, r1
 8009f4a:	6831      	ldr	r1, [r6, #0]
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	b911      	cbnz	r1, 8009f56 <sbrk_aligned+0x12>
 8009f50:	f000 f8bc 	bl	800a0cc <_sbrk_r>
 8009f54:	6030      	str	r0, [r6, #0]
 8009f56:	4621      	mov	r1, r4
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f000 f8b7 	bl	800a0cc <_sbrk_r>
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	d00a      	beq.n	8009f78 <sbrk_aligned+0x34>
 8009f62:	1cc4      	adds	r4, r0, #3
 8009f64:	f024 0403 	bic.w	r4, r4, #3
 8009f68:	42a0      	cmp	r0, r4
 8009f6a:	d007      	beq.n	8009f7c <sbrk_aligned+0x38>
 8009f6c:	1a21      	subs	r1, r4, r0
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f000 f8ac 	bl	800a0cc <_sbrk_r>
 8009f74:	3001      	adds	r0, #1
 8009f76:	d101      	bne.n	8009f7c <sbrk_aligned+0x38>
 8009f78:	f04f 34ff 	mov.w	r4, #4294967295
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}
 8009f80:	240003ec 	.word	0x240003ec

08009f84 <_malloc_r>:
 8009f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f88:	1ccd      	adds	r5, r1, #3
 8009f8a:	f025 0503 	bic.w	r5, r5, #3
 8009f8e:	3508      	adds	r5, #8
 8009f90:	2d0c      	cmp	r5, #12
 8009f92:	bf38      	it	cc
 8009f94:	250c      	movcc	r5, #12
 8009f96:	2d00      	cmp	r5, #0
 8009f98:	4607      	mov	r7, r0
 8009f9a:	db01      	blt.n	8009fa0 <_malloc_r+0x1c>
 8009f9c:	42a9      	cmp	r1, r5
 8009f9e:	d905      	bls.n	8009fac <_malloc_r+0x28>
 8009fa0:	230c      	movs	r3, #12
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	2600      	movs	r6, #0
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fac:	4e2e      	ldr	r6, [pc, #184]	; (800a068 <_malloc_r+0xe4>)
 8009fae:	f000 f89d 	bl	800a0ec <__malloc_lock>
 8009fb2:	6833      	ldr	r3, [r6, #0]
 8009fb4:	461c      	mov	r4, r3
 8009fb6:	bb34      	cbnz	r4, 800a006 <_malloc_r+0x82>
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4638      	mov	r0, r7
 8009fbc:	f7ff ffc2 	bl	8009f44 <sbrk_aligned>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	d14d      	bne.n	800a062 <_malloc_r+0xde>
 8009fc6:	6834      	ldr	r4, [r6, #0]
 8009fc8:	4626      	mov	r6, r4
 8009fca:	2e00      	cmp	r6, #0
 8009fcc:	d140      	bne.n	800a050 <_malloc_r+0xcc>
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	eb04 0803 	add.w	r8, r4, r3
 8009fd8:	f000 f878 	bl	800a0cc <_sbrk_r>
 8009fdc:	4580      	cmp	r8, r0
 8009fde:	d13a      	bne.n	800a056 <_malloc_r+0xd2>
 8009fe0:	6821      	ldr	r1, [r4, #0]
 8009fe2:	3503      	adds	r5, #3
 8009fe4:	1a6d      	subs	r5, r5, r1
 8009fe6:	f025 0503 	bic.w	r5, r5, #3
 8009fea:	3508      	adds	r5, #8
 8009fec:	2d0c      	cmp	r5, #12
 8009fee:	bf38      	it	cc
 8009ff0:	250c      	movcc	r5, #12
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	f7ff ffa5 	bl	8009f44 <sbrk_aligned>
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	d02b      	beq.n	800a056 <_malloc_r+0xd2>
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	442b      	add	r3, r5
 800a002:	6023      	str	r3, [r4, #0]
 800a004:	e00e      	b.n	800a024 <_malloc_r+0xa0>
 800a006:	6822      	ldr	r2, [r4, #0]
 800a008:	1b52      	subs	r2, r2, r5
 800a00a:	d41e      	bmi.n	800a04a <_malloc_r+0xc6>
 800a00c:	2a0b      	cmp	r2, #11
 800a00e:	d916      	bls.n	800a03e <_malloc_r+0xba>
 800a010:	1961      	adds	r1, r4, r5
 800a012:	42a3      	cmp	r3, r4
 800a014:	6025      	str	r5, [r4, #0]
 800a016:	bf18      	it	ne
 800a018:	6059      	strne	r1, [r3, #4]
 800a01a:	6863      	ldr	r3, [r4, #4]
 800a01c:	bf08      	it	eq
 800a01e:	6031      	streq	r1, [r6, #0]
 800a020:	5162      	str	r2, [r4, r5]
 800a022:	604b      	str	r3, [r1, #4]
 800a024:	4638      	mov	r0, r7
 800a026:	f104 060b 	add.w	r6, r4, #11
 800a02a:	f000 f865 	bl	800a0f8 <__malloc_unlock>
 800a02e:	f026 0607 	bic.w	r6, r6, #7
 800a032:	1d23      	adds	r3, r4, #4
 800a034:	1af2      	subs	r2, r6, r3
 800a036:	d0b6      	beq.n	8009fa6 <_malloc_r+0x22>
 800a038:	1b9b      	subs	r3, r3, r6
 800a03a:	50a3      	str	r3, [r4, r2]
 800a03c:	e7b3      	b.n	8009fa6 <_malloc_r+0x22>
 800a03e:	6862      	ldr	r2, [r4, #4]
 800a040:	42a3      	cmp	r3, r4
 800a042:	bf0c      	ite	eq
 800a044:	6032      	streq	r2, [r6, #0]
 800a046:	605a      	strne	r2, [r3, #4]
 800a048:	e7ec      	b.n	800a024 <_malloc_r+0xa0>
 800a04a:	4623      	mov	r3, r4
 800a04c:	6864      	ldr	r4, [r4, #4]
 800a04e:	e7b2      	b.n	8009fb6 <_malloc_r+0x32>
 800a050:	4634      	mov	r4, r6
 800a052:	6876      	ldr	r6, [r6, #4]
 800a054:	e7b9      	b.n	8009fca <_malloc_r+0x46>
 800a056:	230c      	movs	r3, #12
 800a058:	603b      	str	r3, [r7, #0]
 800a05a:	4638      	mov	r0, r7
 800a05c:	f000 f84c 	bl	800a0f8 <__malloc_unlock>
 800a060:	e7a1      	b.n	8009fa6 <_malloc_r+0x22>
 800a062:	6025      	str	r5, [r4, #0]
 800a064:	e7de      	b.n	800a024 <_malloc_r+0xa0>
 800a066:	bf00      	nop
 800a068:	240003e8 	.word	0x240003e8

0800a06c <_realloc_r>:
 800a06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a070:	4680      	mov	r8, r0
 800a072:	4614      	mov	r4, r2
 800a074:	460e      	mov	r6, r1
 800a076:	b921      	cbnz	r1, 800a082 <_realloc_r+0x16>
 800a078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a07c:	4611      	mov	r1, r2
 800a07e:	f7ff bf81 	b.w	8009f84 <_malloc_r>
 800a082:	b92a      	cbnz	r2, 800a090 <_realloc_r+0x24>
 800a084:	f7ff ff12 	bl	8009eac <_free_r>
 800a088:	4625      	mov	r5, r4
 800a08a:	4628      	mov	r0, r5
 800a08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a090:	f000 f838 	bl	800a104 <_malloc_usable_size_r>
 800a094:	4284      	cmp	r4, r0
 800a096:	4607      	mov	r7, r0
 800a098:	d802      	bhi.n	800a0a0 <_realloc_r+0x34>
 800a09a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a09e:	d812      	bhi.n	800a0c6 <_realloc_r+0x5a>
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	f7ff ff6e 	bl	8009f84 <_malloc_r>
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d0ed      	beq.n	800a08a <_realloc_r+0x1e>
 800a0ae:	42bc      	cmp	r4, r7
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	bf28      	it	cs
 800a0b6:	463a      	movcs	r2, r7
 800a0b8:	f7ff fb4a 	bl	8009750 <memcpy>
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4640      	mov	r0, r8
 800a0c0:	f7ff fef4 	bl	8009eac <_free_r>
 800a0c4:	e7e1      	b.n	800a08a <_realloc_r+0x1e>
 800a0c6:	4635      	mov	r5, r6
 800a0c8:	e7df      	b.n	800a08a <_realloc_r+0x1e>
	...

0800a0cc <_sbrk_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4d06      	ldr	r5, [pc, #24]	; (800a0e8 <_sbrk_r+0x1c>)
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	602b      	str	r3, [r5, #0]
 800a0d8:	f7f7 fd06 	bl	8001ae8 <_sbrk>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d102      	bne.n	800a0e6 <_sbrk_r+0x1a>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	b103      	cbz	r3, 800a0e6 <_sbrk_r+0x1a>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	240003f0 	.word	0x240003f0

0800a0ec <__malloc_lock>:
 800a0ec:	4801      	ldr	r0, [pc, #4]	; (800a0f4 <__malloc_lock+0x8>)
 800a0ee:	f000 b811 	b.w	800a114 <__retarget_lock_acquire_recursive>
 800a0f2:	bf00      	nop
 800a0f4:	240003f4 	.word	0x240003f4

0800a0f8 <__malloc_unlock>:
 800a0f8:	4801      	ldr	r0, [pc, #4]	; (800a100 <__malloc_unlock+0x8>)
 800a0fa:	f000 b80c 	b.w	800a116 <__retarget_lock_release_recursive>
 800a0fe:	bf00      	nop
 800a100:	240003f4 	.word	0x240003f4

0800a104 <_malloc_usable_size_r>:
 800a104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a108:	1f18      	subs	r0, r3, #4
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	bfbc      	itt	lt
 800a10e:	580b      	ldrlt	r3, [r1, r0]
 800a110:	18c0      	addlt	r0, r0, r3
 800a112:	4770      	bx	lr

0800a114 <__retarget_lock_acquire_recursive>:
 800a114:	4770      	bx	lr

0800a116 <__retarget_lock_release_recursive>:
 800a116:	4770      	bx	lr

0800a118 <_init>:
 800a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11a:	bf00      	nop
 800a11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11e:	bc08      	pop	{r3}
 800a120:	469e      	mov	lr, r3
 800a122:	4770      	bx	lr

0800a124 <_fini>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	bf00      	nop
 800a128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12a:	bc08      	pop	{r3}
 800a12c:	469e      	mov	lr, r3
 800a12e:	4770      	bx	lr
